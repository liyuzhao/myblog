<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++语言ctime库</title>
      <link href="/2021/04/19/C-%E8%AF%AD%E8%A8%80ctime%E5%BA%93/"/>
      <url>/2021/04/19/C-%E8%AF%AD%E8%A8%80ctime%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>C++语言ctime库</p><a id="more"></a><h3 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h3><p><code>clock_t</code>: 是个long型，用来记录一段时间内的时钟计时单元数，即CPU的运行单元时间。</p><p><code>size_t</code>:标准C库中定义的，应为unsigned int, 在64位系统中为long unsigned int。</p><p><code>time_t</code>:从1970年1月1日0时0分0秒到该时间点所经过的秒数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> tm_sec; <span class="comment">/* 秒 - 取值区间为[0,59] */</span></span><br><span class="line"><span class="keyword">int</span> tm_min; <span class="comment">/* 分 - 取值区间为[0,59] */</span></span><br><span class="line"><span class="keyword">int</span> tm_hour; <span class="comment">/* 时 - 取值区间为[0,23] */</span></span><br><span class="line"><span class="keyword">int</span> tm_mday; <span class="comment">/* 一个月中的日期 - 取值区间为[1,31] */</span></span><br><span class="line"><span class="keyword">int</span> tm_mon; <span class="comment">/* 月份(从一月开始，0代表一月) - 取值区间为[0,11] */</span></span><br><span class="line"><span class="keyword">int</span> tm_year; <span class="comment">/* 年份，其值等于实际年份减去1900 */</span></span><br><span class="line"><span class="keyword">int</span> tm_wday; <span class="comment">/* 星期 - 取值区间为[0,6]，其中0代表星期日，1代表星期一，以此类推。 */</span></span><br><span class="line"><span class="keyword">int</span> tm_yday; <span class="comment">/* 从每年的1月1日开始的天数 - 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推。 */</span></span><br><span class="line"><span class="keyword">int</span> tm_isdst; <span class="comment">/* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的时候，tm_isdst为0；不了解情况时，tm_isdst()为负。 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="时间的操作"><a class="markdownIt-Anchor" href="#时间的操作"></a> 时间的操作</h3><p>clock: 返回时钟计时单元数，自从这个程序开始运行。</p><p>time: 返回当前的time_t。</p><p>difftime: 计算time_t两个之间的时间差。</p><h3 id="转换"><a class="markdownIt-Anchor" href="#转换"></a> 转换</h3><p>mktime: 转换tm structure成time_t</p><p>asctime: 转换tm structure成字符串</p><p>ctime: 转换time_t成字符串</p><p>gmtime: 转换time_t 成tm as UTC time</p><p>localtime: 转换time_t 成tm as local time</p><p>strftime: 格式时间成字符串</p><p>转换成字符串的几个函数：asctime, ctime, strftime</p><h3 id="宏"><a class="markdownIt-Anchor" href="#宏"></a> 宏</h3><p><code>CLOCKS_PER_SEC</code>: 它用来表示一秒钟会有多少个时钟计时单元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量事件的持续时间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_clock_t</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> i = <span class="number">100000000L</span>;</span><br><span class="line"><span class="keyword">clock_t</span> start, finish;</span><br><span class="line"><span class="keyword">double</span> duration;</span><br><span class="line">start = clock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i--)&#123;&#125;</span><br><span class="line"></span><br><span class="line">finish = clock();</span><br><span class="line">duration = (<span class="keyword">double</span>)(finish - start)/CLOCKS_PER_SEC;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Time to do 100000000 empty loops is %f seconds\n"</span>, duration);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_time_t</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> t = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"The Calendar time now is %ld \n"</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_difftime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> start, end;</span><br><span class="line">start = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> i = <span class="number">100000000L</span>;</span><br><span class="line"><span class="keyword">while</span>(i--)&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Time pause used %5.4f seconds.\n"</span>, difftime(end, start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面都是一些转换函数的应用</span></span><br><span class="line"><span class="comment">// mktime: tm --&gt; time_t</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_mktime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">t</span>;</span></span><br><span class="line"><span class="keyword">time_t</span> t_of_day;</span><br><span class="line">t.tm_year = <span class="number">1997</span> - <span class="number">1990</span>;</span><br><span class="line">t.tm_mon = <span class="number">6</span>;</span><br><span class="line">t.tm_mday = <span class="number">1</span>;</span><br><span class="line">t.tm_hour = <span class="number">0</span>;</span><br><span class="line">t.tm_sec = <span class="number">1</span>;</span><br><span class="line">t.tm_wday = <span class="number">4</span>; <span class="comment">/* Day of the week */</span></span><br><span class="line">t.tm_yday = <span class="number">0</span>; <span class="comment">/* Does not show in asctime  */</span></span><br><span class="line">t.tm_isdst = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">t_of_day = mktime(&amp;t);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,ctime(&amp;t_of_day));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// localtime: time_t --&gt; tm</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_localtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> rawtime;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">timeinfo</span>;</span></span><br><span class="line"></span><br><span class="line">time(&amp;rawtime);</span><br><span class="line"></span><br><span class="line">timeinfo = localtime(&amp;rawtime);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Current local time and date: %s"</span>, asctime(timeinfo));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gmtime: time_t --&gt; tm</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_gmtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> rawtime;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">timeinfo</span>;</span></span><br><span class="line"></span><br><span class="line">time(&amp;rawtime);</span><br><span class="line">timeinfo = gmtime(&amp;rawtime);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"UTC time and date: %s"</span>, asctime(timeinfo));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ctime: time_t --&gt; string</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_ctime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">time_t</span> t = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str = ctime(&amp;t);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">test_clock_t</span>();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">test_time_t</span>();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test_difftime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test_mktime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test_localtime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test_gmtime();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">test_ctime();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用strftime()函数将时间格式化为我们想要的格式。它的原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> strftime(</span><br><span class="line"><span class="keyword">char</span> *strDest,</span><br><span class="line"><span class="keyword">size_t</span> maxsize,</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *format,</span><br><span class="line"><span class="keyword">const</span> struct tm *timeptr</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。</p><p>函数strftime()的操作有些类似于sprintf():识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方式。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">a</span></span>星期几的简写</span><br><span class="line"><span class="tag">%<span class="selector-tag">A</span></span>星期几的全称</span><br><span class="line"><span class="tag">%<span class="selector-tag">b</span></span>月份的简写</span><br><span class="line"><span class="tag">%<span class="selector-tag">B</span></span>月份的全称</span><br><span class="line"><span class="tag">%<span class="selector-tag">c</span></span>标准的日期的时间串</span><br><span class="line"><span class="tag">%<span class="selector-tag">C</span></span>年份的后两位数字</span><br><span class="line"><span class="tag">%<span class="selector-tag">d</span></span>十进制表示的每月的第几天</span><br><span class="line"><span class="tag">%<span class="selector-tag">D</span></span>月/天/年</span><br><span class="line"><span class="tag">%<span class="selector-tag">e</span></span>在两字符域中，十进制表示的每月的第几天</span><br><span class="line"><span class="tag">%<span class="selector-tag">F</span></span>年-月-日</span><br><span class="line"><span class="tag">%<span class="selector-tag">g</span></span>年份的后两位数字，使用基于周的年</span><br><span class="line"><span class="tag">%<span class="selector-tag">G</span></span>年份，使用基于周的年</span><br><span class="line"><span class="tag">%<span class="selector-tag">h</span></span>简写的月份名</span><br><span class="line"><span class="tag">%<span class="selector-tag">H</span></span>24小时制的小时</span><br><span class="line"><span class="tag">%<span class="selector-tag">I</span></span>12小时制的小时</span><br><span class="line"><span class="tag">%<span class="selector-tag">j</span></span>十进制表示的每年的第几天</span><br><span class="line"><span class="tag">%<span class="selector-tag">m</span></span>十进制表示的月份</span><br><span class="line"><span class="tag">%<span class="selector-tag">M</span></span>十进制表示的分钟数</span><br><span class="line"><span class="tag">%<span class="selector-tag">n</span></span>新行符</span><br><span class="line"><span class="tag">%<span class="selector-tag">p</span></span>本地的AM或PM的等价显示</span><br><span class="line"><span class="tag">%<span class="selector-tag">r</span></span>12小时的时间</span><br><span class="line"><span class="tag">%<span class="selector-tag">R</span></span>显示小时和分钟：hh:mm</span><br><span class="line"><span class="tag">%<span class="selector-tag">S</span></span>十进制的秒数</span><br><span class="line"><span class="tag">%<span class="selector-tag">t</span></span>水平制表符</span><br><span class="line"><span class="tag">%<span class="selector-tag">T</span></span>显示时分秒：hh:mm:ss</span><br><span class="line"><span class="tag">%<span class="selector-tag">u</span></span>每周的第几天，星期一为第一天（值从0到6，星期一为0）</span><br><span class="line"><span class="tag">%<span class="selector-tag">U</span></span>每年的第几周，把星期日作为第一天（值从0到53）</span><br><span class="line"><span class="tag">%<span class="selector-tag">V</span></span>每年的第几周，使用基于周的年</span><br><span class="line"><span class="tag">%<span class="selector-tag">w</span></span>十进制表示的星期几（值从0到6，星期天为0）</span><br><span class="line"><span class="tag">%<span class="selector-tag">W</span></span>每年的第几周，把星期一作为第一天（值从0到53）</span><br><span class="line"><span class="tag">%<span class="selector-tag">x</span></span>标准的日期串</span><br><span class="line"><span class="tag">%<span class="selector-tag">X</span></span>标准的时间串</span><br><span class="line"><span class="tag">%<span class="selector-tag">y</span></span>不带世纪的十进制年份（值从0到99）</span><br><span class="line"><span class="tag">%<span class="selector-tag">Y</span></span>带世纪部分的十进制年份</span><br><span class="line"><span class="tag">%<span class="selector-tag">z</span></span>%Z时区名称，如果不能得到时区则返回空字符。</span><br><span class="line"><span class="tag">%</span>%百分号</span><br></pre></td></tr></table></figure><h4 id="strftime函数的声明"><a class="markdownIt-Anchor" href="#strftime函数的声明"></a> strftime()函数的声明</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t strftime(<span class="built_in">char</span> *<span class="built_in">str</span>, size_t maxsize, <span class="keyword">const</span> <span class="built_in">char</span> *format, <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tm</span></span> *timeptr)</span><br></pre></td></tr></table></figure><ul><li>str – 这是指向目标数组的指针，用来复制产生的 C 字符串。</li><li>maxsize – 这是被复制到 str 的最大字符数。</li><li>format – 这是 C 字符串，包含了普通字符和特殊格式说明符的任何组合。这些格式说明符由函数替换为表示 tm 中所指定时间的相对应值。格式说明符是：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">time_t</span> rawtime;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> *<span class="title">info</span>;</span></span><br><span class="line">   <span class="keyword">char</span> buffer[<span class="number">80</span>];</span><br><span class="line"> </span><br><span class="line">   time( &amp;rawtime );</span><br><span class="line"> </span><br><span class="line">   info = localtime( &amp;rawtime );</span><br><span class="line"> </span><br><span class="line">   strftime(buffer, <span class="number">80</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>, info);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"格式化的日期 &amp; 时间 : |%s|\n"</span>, buffer );</span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>std string常用函数</title>
      <link href="/2021/04/19/std-string%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2021/04/19/std-string%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="std-string常用函数"><a class="markdownIt-Anchor" href="#std-string常用函数"></a> std string常用函数</h3><a id="more"></a><h4 id="string类的构造函数"><a class="markdownIt-Anchor" href="#string类的构造函数"></a> string类的构造函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s); <span class="comment">// 用c字符串s初始化</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">int</span> n, <span class="keyword">char</span> c); <span class="comment">// 用户n个字符c初始化</span></span><br></pre></td></tr></table></figure><p>此外，string类还支持默认构造函数和复制构造函数，<br>如string s1; string s2=“hello”; 都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常</p><h4 id="string类的字符操作"><a class="markdownIt-Anchor" href="#string类的字符操作"></a> string类的字符操作:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n) <span class="keyword">const</span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n);</span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">operator</span>[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">data</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回一个非null终止的c字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回一个以null终止的c字符数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>; <span class="comment">// 把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。</span></span><br></pre></td></tr></table></figure><h4 id="string的特性描述"><a class="markdownIt-Anchor" href="#string的特性描述"></a> string的特性描述：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回当前容量(即string中不必增加内存即可存放的元素个数)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_size</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回string对象中可存放的最大字符串的长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回当前字符串的大小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 返回当前字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 当前字符串是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 把字符串当前大小置为len, 并用字符c填充不足的部分</span></span><br></pre></td></tr></table></figure><h4 id="string类的输入输出操作"><a class="markdownIt-Anchor" href="#string类的输入输出操作"></a> string类的输入输出操作：</h4><p>string 类重载运算符operator&gt;&gt;用于输入，同样重载运算符operator&lt;&lt;用于输出操作。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getline(istream &amp;<span class="keyword">in</span>, <span class="keyword">string</span> &amp;s); 用于从输入流<span class="keyword">in</span>中读取字符串到s中，以<span class="string">'\n'</span>分开</span><br></pre></td></tr></table></figure><h4 id="string的赋值"><a class="markdownIt-Anchor" href="#string的赋值"></a> string的赋值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s); <span class="comment">// 把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>; <span class="comment">// 用c类型字符串s赋值</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 用c字符串s开始的n个字符赋值</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>; <span class="comment">// 把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 用n个字符c赋值给当前字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> start, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 把字符串s中从start开始的n个字符赋给当前字符串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">assign</span><span class="params">(const_iterator first, const_iterator last)</span></span>; <span class="comment">// 把first和last迭代器之间的部分赋给字符串</span></span><br></pre></td></tr></table></figure><h4 id="string的连接"><a class="markdownIt-Anchor" href="#string的连接"></a> string的连接</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s); <span class="comment">// 把字符串s连接到当前字符串的结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>; <span class="comment">// 把c类型的字符串s连接到当前字符串的结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 把c类型字符串s的前n个字符串连接到当前字符串结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>; <span class="comment">// 同operator+=()</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 把字符串s中从pos开始的n个字符连接到当前字符串的结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 在当前字符串结尾添加n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">append</span><span class="params">(const_iterator first, const_iterator last)</span></span>; <span class="comment">// 把迭代器first和last之间的部分连接到当前字符串的结尾</span></span><br></pre></td></tr></table></figure><h4 id="string的比较"><a class="markdownIt-Anchor" href="#string的比较"></a> string的比较</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2) <span class="keyword">const</span>; <span class="comment">// 比较两个字符串是否相等</span></span><br><span class="line"><span class="comment">// 运算符"&gt;","&lt;","&gt;=","&lt;="均被重载用于字符串的比较;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> <span class="keyword">const</span></span>; <span class="comment">// 比较当前字符串和s的大小</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> <span class="keyword">const</span></span>; <span class="comment">// 比较当前字符串从pos开始的n个字符组成的字符串与s的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos2, <span class="keyword">int</span> n2)</span> <span class="keyword">const</span></span>; <span class="comment">// 比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2字符组成的字符串的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos2)</span>  <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p><strong>compare</strong> 函数在**&gt;**时返回1， **&lt;**时返回-1, <strong>==</strong> 时返回0</p><h4 id="string-的子串"><a class="markdownIt-Anchor" href="#string-的子串"></a> string 的子串</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> substr(<span class="built_in">int</span> pos = <span class="number">0</span>, <span class="built_in">int</span> n = npos) <span class="keyword">const</span>; <span class="comment">// 返回pos开始的n个字符组成的字符串</span></span><br></pre></td></tr></table></figure><h4 id="string-的交换"><a class="markdownIt-Anchor" href="#string-的交换"></a> string 的交换</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="built_in">string</span> &amp;s2)</span></span>; <span class="comment">// 交换当前字符串与s2的值</span></span><br></pre></td></tr></table></figure><h4 id="string-的查找函数"><a class="markdownIt-Anchor" href="#string-的查找函数"></a> string 的查找函数</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> find(<span class="built_in">char</span> c, <span class="built_in">int</span> pos = <span class="number">0</span>) const; <span class="comment">// 从pos开始查找字符c在当前字符串的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find(const <span class="built_in">char</span> *s, <span class="built_in">int</span> pos = <span class="number">0</span>) const; <span class="comment">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find(const <span class="built_in">char</span> *s, <span class="built_in">int</span> pos, <span class="built_in">int</span> n) const; <span class="comment">// 从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find(const <span class="built_in">string</span> &amp;s, <span class="built_in">int</span> pos = <span class="number">0</span>) const; <span class="comment">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从查找成功时返回的位置，失败返回string::npos的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> rfind(<span class="built_in">char</span> c, <span class="built_in">int</span> pos = npos) const; <span class="comment">// 从pos开始从后向前查找字符c在当前串中的位置。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> rfind(const <span class="built_in">char</span> *s, <span class="built_in">int</span> pos = npos) const; </span><br><span class="line"><span class="built_in">int</span> rfind(const <span class="built_in">char</span> *s, <span class="built_in">int</span> pos, <span class="built_in">int</span> n = npos) const;</span><br><span class="line"><span class="built_in">int</span> rfind(const <span class="built_in">string</span> &amp;s, <span class="built_in">int</span> pos = npos) const;</span><br><span class="line"><span class="comment">// 从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败返回string::npos的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_of(<span class="params">char</span> <span class="params">c</span>, <span class="params">int</span> <span class="params">pos</span> = 0)</span> const; <span class="comment">// 从pos开始查找字符c第一次出现的位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>=0)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">n</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_of(<span class="params">const</span> <span class="params">string</span> &amp;<span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = 0)</span> const;</span><br><span class="line"><span class="comment">// 从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_not_of(<span class="params">char</span> <span class="params">c</span>, <span class="params">int</span> <span class="params">pos</span> = 0)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>=0)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">n</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">n</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_first_not_of(<span class="params">const</span> <span class="params">string</span> &amp;<span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = 0)</span> const;</span><br><span class="line"><span class="comment">// 从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_of(<span class="params">char</span> <span class="params">c</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">n</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_of(<span class="params">const</span> <span class="params">string</span> &amp;<span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_not_of(<span class="params">char</span> <span class="params">c</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span>, <span class="params">int</span> <span class="params">n</span>)</span> const;</span><br><span class="line"><span class="built_in">int</span> find<span class="constructor">_last_not_of(<span class="params">const</span> <span class="params">char</span> <span class="operator">*</span><span class="params">s</span>, <span class="params">int</span> <span class="params">pos</span> = <span class="params">npos</span>)</span> const;</span><br><span class="line"><span class="comment">// find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找</span></span><br></pre></td></tr></table></figure><h4 id="string类的替换函数"><a class="markdownIt-Anchor" href="#string类的替换函数"></a> string类的替换函数:</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>; <span class="comment">// 删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>; <span class="comment">// 把[first0, last0)之间的部分替换为字符串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>; <span class="comment">// 把[first0, last0）之间的部分替换为字符串s</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 把[first0, last0) 之间的部分替换为n个字符c</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0, const_iterator first, const_iterator last)</span></span>; <span class="comment">// 把[first0, last0)之间的部分替换成[first, last)之间的字符串</span></span><br></pre></td></tr></table></figure><h4 id="string类的插入函数"><a class="markdownIt-Anchor" href="#string类的插入函数"></a> string类的插入函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">// 前4个函数在p0位置插入字符串s中pos开始的前n个字符</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 此函数在p0处插入n个字符c</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 在it处插入字符c，返回插入后迭代器的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, const_iterator first, const_iterator last)</span></span>; <span class="comment">// 在it处插入[first, last)之间的字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>; <span class="comment">// 在it处插入n个字符c</span></span><br></pre></td></tr></table></figure><h4 id="string类的删除函数"><a class="markdownIt-Anchor" href="#string类的删除函数"></a> string类的删除函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>; <span class="comment">// 删除[first, last) 之间的所有字符，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span>; <span class="comment">// 删除it指向的字符串，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> &amp;<span class="title">erase</span><span class="params">(<span class="keyword">int</span> pos=<span class="number">0</span>, <span class="keyword">int</span> n = npos)</span></span>; <span class="comment">// 删除pos开始的n个字符，返回修改后的字符串</span></span><br></pre></td></tr></table></figure><h4 id="string类的迭代器处理"><a class="markdownIt-Anchor" href="#string类的迭代器处理"></a> string类的迭代器处理</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</span><br><span class="line">用<span class="built_in">string</span>::iterator或<span class="built_in">string</span>::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span></span>; <span class="comment">// 返回string的起始位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span></span>; <span class="comment">// 返回string的最后一个字符后面的位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">rbegin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">rbegin</span><span class="params">()</span></span>; <span class="comment">// 返回string 的最后一个字符的位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">rend</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">const_iterator <span class="title">rend</span><span class="params">()</span></span>; <span class="comment">// 返回string的第一个字符位置的前面</span></span><br><span class="line"></span><br><span class="line">rbegin和rend用于从后向前的迭代访问，通过设置迭代器<span class="built_in">string</span>::reverse_iterator，<span class="built_in">string</span>::const_reverse_iterator实现</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL Algorithm 整理</title>
      <link href="/2021/04/19/STL-Algorithm-%E6%95%B4%E7%90%86/"/>
      <url>/2021/04/19/STL-Algorithm-%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>STL Algorithm 整理</p><a id="more"></a><table><thead><tr><th style="text-align:left">非修改性序列操作(12个)</th><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">循环</td><td style="text-align:left">对序列中的每个元素执行某操作</td><td style="text-align:left"><code>for_each()</code></td></tr><tr><td style="text-align:left">查找</td><td style="text-align:left">在序列中找出某个值的第一次出现的位置</td><td style="text-align:left">find()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中找出符合某谓词的第一个元素</td><td style="text-align:left"><code>find_if()</code></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中找出一子序列的最后一次出现的位置</td><td style="text-align:left">find_end()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中找出第一次出现指定值集中之值的位置</td><td style="text-align:left"><code>find_first_of()</code></td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中找出相邻的一对值</td><td style="text-align:left">adjacent_find()</td></tr><tr><td style="text-align:left">计数</td><td style="text-align:left">在序列中统计某个值出现的次数</td><td style="text-align:left">count()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中统计与某谓词匹配的次数</td><td style="text-align:left">count_if()</td></tr><tr><td style="text-align:left">比较</td><td style="text-align:left">找出两个序列相异的第一个元素</td><td style="text-align:left">mismatch()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">两个序列中的对应元素都相同时为真</td><td style="text-align:left">equal()</td></tr><tr><td style="text-align:left">搜索</td><td style="text-align:left">在序列中找出一子序列的第一次出现的位置</td><td style="text-align:left">search()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在序列中找出一值的连续n次出现的位置</td><td style="text-align:left">search_n()</td></tr><tr><td style="text-align:left">修改性序列操作（27个）</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">复制</td><td style="text-align:left">从序列的第一个元素起进行复制</td><td style="text-align:left">copy()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">从序列的最后一个元素起进行复制</td><td style="text-align:left">copy_backward()</td></tr><tr><td style="text-align:left">交换</td><td style="text-align:left">交换两个元素</td><td style="text-align:left">swap()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">交换指定范围的元素</td><td style="text-align:left">swap_ranges()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">交换由迭代器所指的两个元素</td><td style="text-align:left">iter_swap()</td></tr><tr><td style="text-align:left">变换</td><td style="text-align:left">将某操作应用于指定范围的每个元素</td><td style="text-align:left">transform()</td></tr><tr><td style="text-align:left">替换</td><td style="text-align:left">用一个给定值替换一些值</td><td style="text-align:left">replace()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">替换满足谓词的一些元素</td><td style="text-align:left">replace_if()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时用一给定值替换元素</td><td style="text-align:left">replace_copy()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时替换满足谓词的元素</td><td style="text-align:left"><code>replace_copy_if()</code></td></tr><tr><td style="text-align:left">填充</td><td style="text-align:left">用一给定值取代所有元素</td><td style="text-align:left">fill()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">用一给定值取代前n个元素</td><td style="text-align:left">fill_n()</td></tr><tr><td style="text-align:left">生成</td><td style="text-align:left">用一操作的结果取代所有元素</td><td style="text-align:left">generate()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">用一操作的结果取代前n个元素</td><td style="text-align:left">generate_n()</td></tr><tr><td style="text-align:left">删除</td><td style="text-align:left">删除具有给定值的元素</td><td style="text-align:left">remove()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">删除满足谓词的元素</td><td style="text-align:left">remove_if()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时删除具有给定值的元素</td><td style="text-align:left">remove_copy()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时删除满足谓词的元素</td><td style="text-align:left"><code>remove_copy_if()</code></td></tr><tr><td style="text-align:left">唯一</td><td style="text-align:left">删除相邻的重复元素</td><td style="text-align:left">unique()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时删除相邻的重复元素</td><td style="text-align:left">unique_copy()</td></tr><tr><td style="text-align:left">反转</td><td style="text-align:left">反转元素的次序</td><td style="text-align:left">reverse()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时反转元素的次序</td><td style="text-align:left">reverse_copy()</td></tr><tr><td style="text-align:left">环移</td><td style="text-align:left">循环移动元素</td><td style="text-align:left">rotate()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制序列时循环移动元素</td><td style="text-align:left">rotate_copy()</td></tr><tr><td style="text-align:left">随机</td><td style="text-align:left">采用均匀分布来随机移动元素</td><td style="text-align:left">random_shuffle()</td></tr><tr><td style="text-align:left">划分</td><td style="text-align:left">将满足某谓词的元素都放到前面</td><td style="text-align:left">partition()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">将满足某谓词的元素都放到前面并维持原顺序</td><td style="text-align:left">stable_partition()</td></tr><tr><td style="text-align:left">序列排序及相关操作（27个）</td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">排序</td><td style="text-align:left">以很好的平均效率排序</td><td style="text-align:left">sort()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">排序，并维持相同元素的原有顺序</td><td style="text-align:left">stable_sort()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">将序列的前一部分排好序</td><td style="text-align:left">partial_sort()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">复制的同时将序列的前一部分排好序</td><td style="text-align:left"><code>partial_sort_copy()</code></td></tr><tr><td style="text-align:left">第n个元素</td><td style="text-align:left">将第n各元素放到它的正确位置</td><td style="text-align:left">nth_element()</td></tr><tr><td style="text-align:left">二分检索</td><td style="text-align:left">找到大于等于某值的第一次出现</td><td style="text-align:left">lower_bound()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">找到大于某值的第一次出现</td><td style="text-align:left">upper_bound()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">找到（在不破坏顺序的前提下）可插入给定值的最大范围</td><td style="text-align:left">equal_range()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">在有序序列中确定给定元素是否存在</td><td style="text-align:left">binary_search()</td></tr><tr><td style="text-align:left">归并</td><td style="text-align:left">归并两个有序序列</td><td style="text-align:left">merge()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">归并两个接续的有序序列</td><td style="text-align:left">inplace_merge()</td></tr><tr><td style="text-align:left">有序结构上的集合操作</td><td style="text-align:left">一序列为另一序列的子序列时为真</td><td style="text-align:left">includes()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">构造两个集合的有序并集</td><td style="text-align:left">set_union()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">构造两个集合的有序交集</td><td style="text-align:left">set_intersection()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">构造两个集合的有序差集</td><td style="text-align:left">set_difference()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">构造两个集合的有序对称差集（并-交）</td><td style="text-align:left"><code>set_symmetric_difference()</code></td></tr><tr><td style="text-align:left">堆操作</td><td style="text-align:left">向堆中加入元素</td><td style="text-align:left">push_heap()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">从堆中弹出元素</td><td style="text-align:left">pop_heap()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">从序列构造堆</td><td style="text-align:left">make_heap()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">给堆排序</td><td style="text-align:left">sort_heap()</td></tr><tr><td style="text-align:left">最大和最小</td><td style="text-align:left">两个值中较小的</td><td style="text-align:left">min()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">两个值中较大的</td><td style="text-align:left">max()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">序列中的最小元素</td><td style="text-align:left">min_element()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">序列中的最大元素</td><td style="text-align:left">max_element()</td></tr><tr><td style="text-align:left">词典比较</td><td style="text-align:left">两个序列按字典序的第一个在前</td><td style="text-align:left">lexicographical_compare()</td></tr><tr><td style="text-align:left">排列生成器</td><td style="text-align:left">按字典序的下一个排列</td><td style="text-align:left">next_permutation()</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">按字典序的前一个排列</td><td style="text-align:left">prev_permutation()</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++文件读写详解</title>
      <link href="/2021/04/15/C-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/04/15/C-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="c文件读写详解ofstreamifstreamfstream"><a class="markdownIt-Anchor" href="#c文件读写详解ofstreamifstreamfstream"></a> C++文件读写详解（ofstream,ifstream,fstream）</h2><ul><li><code>#include &lt;fstream&gt;</code></li><li>ostream //文件写操作 内存写入存储设备</li><li>istream // 文件读操作，存储设备读取到内存中</li><li>fstream // 读写操作，对打开的文件可进行读写操作</li></ul><a id="more"></a><h3 id="打开文件"><a class="markdownIt-Anchor" href="#打开文件"></a> 打开文件</h3><p>在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofstream，ifstram，fstream对象进行对文件的读写操作</p><h4 id="函数open"><a class="markdownIt-Anchor" href="#函数open"></a> 函数：open()</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> member function</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> open(const <span class="keyword">char</span> *filename, <span class="string">ios_base:</span>:openmode mode = <span class="string">ios_base:</span>:<span class="keyword">in</span>|<span class="string">ios_base:</span>:out);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> open(const wchar_t *_Filename, <span class="string">ios_base:</span>:openmode mode = <span class="string">ios_base:</span>:<span class="keyword">in</span> | <span class="string">ios_base:</span>:out, <span class="keyword">int</span> prot = <span class="string">ios_base:</span>:Openprot);</span><br></pre></td></tr></table></figure><p>参数:</p><p>filename 操作文件名</p><p>mode 打开文件的方式</p><p>prot 打开文件的属性// 基本很少用到，在查看资料时，发现有两种方式</p><p>打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">ios::in</td><td style="text-align:left">为输入(读取)而打开文件</td></tr><tr><td style="text-align:left">ios::out</td><td style="text-align:left">为输出(写)而打开文件</td></tr><tr><td style="text-align:left">ios::ate</td><td style="text-align:left">初始位置:文件尾</td></tr><tr><td style="text-align:left">ios::app</td><td style="text-align:left">所有输出附加在文件末尾</td></tr><tr><td style="text-align:left">ios::trunc</td><td style="text-align:left">如果文件已存在则先删除该文件</td></tr><tr><td style="text-align:left">ios::binary</td><td style="text-align:left">二进制方式</td></tr></tbody></table><p>这些方式是能够进行组合使用的，以&quot;或&quot;运算(&quot;|&quot;)的方式：例如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ofstream <span class="keyword">out</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">out</span>.<span class="keyword">open</span>(<span class="string">"hello.txt"</span>, ios::<span class="keyword">in</span>|ios::<span class="keyword">out</span>|ios::binary); <span class="comment">// 根据自己需要进行适当的选取</span></span><br></pre></td></tr></table></figure><p>打开文件的属性同样在ios类中也有定义：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:left">普通文件，打开操作</td></tr><tr><td style="text-align:center">1</td><td style="text-align:left">只读文件</td></tr><tr><td style="text-align:center">2</td><td style="text-align:left">隐含文件</td></tr><tr><td style="text-align:center">4</td><td style="text-align:left">系统文件</td></tr></tbody></table><p>对于文件的属性也可以使用&quot;或&quot;运算和&quot;+&quot;进行组合使用，这里就不做说明了。</p><p>很多程序中，可能会遇到ofstream out(“hello.txt”)，ifstream in(&quot;…&quot;)，fstream foi(&quot;…&quot;) 这样的使用，并没有显式的去调用open()函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数，并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ostream <span class="title">out</span>(<span class="params"><span class="string">"..."</span>, ios::<span class="keyword">out</span></span>)</span>;</span><br><span class="line"><span class="function">ifstream <span class="title">in</span>(<span class="params"><span class="string">"..."</span>, ios::<span class="keyword">in</span></span>)</span>;</span><br><span class="line"><span class="function">fstream <span class="title">foi</span>(<span class="params"><span class="string">"..."</span>, ios::<span class="keyword">in</span>|ios::<span class="keyword">out</span></span>)</span>;</span><br></pre></td></tr></table></figure><p>当使用默认方式进行对文件的操作时，你可以使用成员函数is_open()对文件是否打开进行验证</p><h4 id="关闭文件"><a class="markdownIt-Anchor" href="#关闭文件"></a> 关闭文件</h4><p>当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。</p><h4 id="文本文件的读写"><a class="markdownIt-Anchor" href="#文本文件的读写"></a> 文本文件的读写</h4><p>类ofstream，ifstream和fstream是分别从ostream，istream和iostream中引申而来的。这就是为什么fstream的对象可以使用其父类的成员来访问数据。</p><p>一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin和cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符&lt;&lt;:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">write</span> <span class="keyword">on</span> a <span class="type">text</span> file</span><br><span class="line"><span class="meta">#include &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line"></span><br><span class="line">ofstream <span class="keyword">out</span>("out.txt");</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">out</span>.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">out</span> &lt;&lt; "This is a line.\n";</span><br><span class="line"><span class="keyword">out</span> &lt;&lt; "This is another line.\n";</span><br><span class="line"><span class="keyword">out</span>.<span class="keyword">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 结果: 在<span class="keyword">out</span>.txt中写入:</span><br><span class="line">This <span class="keyword">is</span> a <span class="type">line</span>.</span><br><span class="line">This <span class="keyword">is</span> another <span class="type">line</span>.</span><br></pre></td></tr></table></figure><p>从文件中读入数据也可以用与cin &gt;&gt; 的使用同样的方法:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rending a text file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"test.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!in.is_open())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Error opening"</span>; <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!in.oof()) &#123;</span><br><span class="line">in.getline(buffer, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buffer &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果 在屏幕上输出</span></span><br><span class="line">This is a line.</span><br><span class="line">This is another line.</span><br></pre></td></tr></table></figure><p>上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof，它是ifstream从类ios中集成过来的，当到达文件末尾时返回true。</p><h3 id="状态标识符的验证verification-of-state-flags"><a class="markdownIt-Anchor" href="#状态标识符的验证verification-of-state-flags"></a> 状态标识符的验证(Verification of state flags)</h3><p>除了eof()以外，还有一些验证流的状态的成员函数(所有都返回bool型返回值)：</p><ul><li>bad()</li></ul><p>如果在读写过程中出错，返回true。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。</p><ul><li>fail()</li></ul><p>除了与bad()同样的情况下会返回true外，加上格式错误时也会返回true，例如当想要读取一个整数，而获得了一个字母的时候。</p><ul><li>eof()</li></ul><p>如果读文件到达文件末尾，返回true。</p><ul><li>good()</li></ul><p>这是最通用的：如果调用以上任何一个函数返回true的话，此函数返回false。</p><p>要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear(),没有函数。</p><h3 id="获得和设置流指针get-and-put-stream-pointers"><a class="markdownIt-Anchor" href="#获得和设置流指针get-and-put-stream-pointers"></a> 获得和设置流指针(get and put stream pointers)</h3><p>所有输入/输出流对象(i/o streams objects)都有至少一个流指针：</p><ul><li>ifstream，类似istream，有一个被称为get pointer的指针，指向下一个将被读取的元素。</li><li>ofstream，类似ostream，有一个指针put pointer，指向写入下一个元素的位置。</li><li>fstream，类似iostream，同时继承了get和put。</li></ul><p>我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：</p><ul><li>tellg()和tellp()</li></ul><p>这两个成员函数不用传入参数，返回pos_type类型的值(根据ANSI-C++标准)，就是一个整数，代表当前get流指针的位置(用tellg)或put流指针的位置(用tellp)。</p><ul><li>seekg()和seekp()</li></ul><p>这对函数分别用来改变流指针get和put的位置。两个函数都被重载为两种不同的原型：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">seekg</span>(pos_<span class="keyword">type</span> position);</span><br><span class="line"><span class="title">seekp</span>(pos_<span class="keyword">type</span> position);</span><br></pre></td></tr></table></figure><p>使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数tellg和tellp的返回值类型相同。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">seekg</span>(off_<span class="keyword">type</span> offset, seekdir direction);</span><br><span class="line"><span class="title">seekp</span>(off_<span class="keyword">type</span> offset, seekdir direction);</span><br></pre></td></tr></table></figure><p>使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">ios::beg</td><td style="text-align:left">从流开始位置计算的位移</td></tr><tr><td style="text-align:left">ios::cur</td><td style="text-align:left">从流指针当前位置开始计算的位移</td></tr><tr><td style="text-align:left">ios::end</td><td style="text-align:left">从流末尾处开始计算的位移</td></tr></tbody></table><p>流指针get 和 put的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg和seekp的第一种原型，而且不要对tellg或tellp的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。</p><p>以下例子使用这些函数来获得一个二进制文件的大小：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * filename = <span class="string">"test.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> l,m;</span><br><span class="line"></span><br><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(filename, ios::in|ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">l = in.tellg();</span><br><span class="line">in.seekg(<span class="number">0</span>, ios::end);</span><br><span class="line">m = in.tellg();</span><br><span class="line">in.close();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"size of "</span> &lt;&lt; filename;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" is "</span> &lt;&lt; (m-l) &lt;&lt; <span class="string">" bytes.\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：</span></span><br><span class="line"><span class="comment">// size of test.txt is 40 bytes.</span></span><br></pre></td></tr></table></figure><h3 id="二进制文件"><a class="markdownIt-Anchor" href="#二进制文件"></a> 二进制文件</h3><p>在二进制文件中，使用<code>&lt;&lt;</code>和<code>&gt;&gt;</code>，以及函数(如getline)来操作输入和输出数据，没有什么实际意义，虽然它们是符合语法的。</p><p>文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数(write)是ostream的一个成员函数，都是被ofstream所继承。而read是istream的一个成员函数，被ifstream锁继承。类fstream的对象同时拥有这两个函数。它们的原型是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">write</span>(<span class="keyword">char</span> * <span class="built_in">buffer</span>, streamsize <span class="built_in">size</span>);</span><br><span class="line"><span class="built_in">read</span>(<span class="keyword">char</span> * <span class="built_in">buffer</span>, streamsize <span class="built_in">size</span>);</span><br></pre></td></tr></table></figure><p>这里buffer是一块内存的地址，用来存储或读取数据。参数size是一个整数值，表示要从缓存(buffer)中读出和写入的字符数。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * filename = <span class="string">"test.txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * <span class="built_in">buffer</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">ifstream in(filename, ios::in|ios::binary|ios::ate);</span><br><span class="line"></span><br><span class="line"><span class="built_in">size</span> = in.tellg();</span><br><span class="line"></span><br><span class="line">in.seekg(<span class="number">0</span>, ios::beg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">size</span>];</span><br><span class="line"></span><br><span class="line">in.<span class="built_in">read</span>(<span class="built_in">buffer</span>, <span class="built_in">size</span>);</span><br><span class="line"></span><br><span class="line">in.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">"the complete file is in a buffer"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> [] <span class="built_in">buffer</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓存和同步buffer-and-synchronization"><a class="markdownIt-Anchor" href="#缓存和同步buffer-and-synchronization"></a> 缓存和同步(buffer and synchronization)</h3><p>当我们对文件流进行操作的时候，它们与一个streambuf类型的缓存(buffer)联系在一起。这个缓存(buffer)实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流，每次成员函数put（写一个单个字符）被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存(buffer)中。<br>当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中(如果是一个输出流的话)，或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronzization)，它会在以下任一情况下发生：</p><ul><li><strong>当文件被关闭时</strong>：在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。</li><li><strong>当缓存buffer满时</strong>：缓存Buffers有一定的时间空间限制。当缓存满时，它会被自动同步。</li><li><strong>控制符明确指明</strong>：当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush和endl。</li><li><strong>明确调用函数sync()</strong>： 调用成员函数sync()（无参数）可以引发立即同步。这个函数返回一个int值，等于-1表示流没有联系的缓存和操作失败。</li></ul><p>在ios,istream和ostream类中,还定义了若干输入输出函数,它们主要用于错误处理,流的刷新以及流输入输出方式的控制。</p><h4 id="错误处理"><a class="markdownIt-Anchor" href="#错误处理"></a> 错误处理</h4><p>在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，错误的性质被记录在ios类的一个数据成员中。</p><p>ios类中定义的描述错误状态的常量:</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">goodbit<span class="comment">-------------没有错误，正常状态　</span></span><br><span class="line">eofbit<span class="comment">--------------到达流的结尾</span></span><br><span class="line">failbit<span class="comment">-------------I/O操作失败，清除状态字后，可以对流继续进行操作。</span></span><br><span class="line">badbit<span class="comment">--------------试图进行非法操作，清除状态字后，流可能还可以使用。</span></span><br><span class="line">hardfail<span class="comment">------------致命错误，不可恢复的错误。</span></span><br></pre></td></tr></table></figure><p>对应于这些位,可用ios中定义的如下函数来检查流的当前状态位:</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> good()<span class="comment">---------如果正常,返回非0值</span></span><br><span class="line"><span class="type">int</span> bad()<span class="comment">----------如果badbit被设置,返回非0值</span></span><br><span class="line"><span class="type">int</span> eof()<span class="comment">----------如果eofbit被设置,返回非0值</span></span><br><span class="line"><span class="type">int</span> fail()<span class="comment">---------如果failbit被设置,返回非0值</span></span><br><span class="line"><span class="type">int</span> rdstate()<span class="comment">------返回当前错误状态位.</span></span><br></pre></td></tr></table></figure><p>流的其它成员函数可以从流中读取字符或字符串，对流进行无格式化的输入 输出操作，以及直接控制对流的I/O操作。</p><table><thead><tr><th style="text-align:left">返回类型</th><th style="text-align:left">ostream类的成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">ostream&amp;</td><td style="text-align:left">put(char ch)</td><td style="text-align:left">向流中输出一个字符ch，不进行任何转换</td></tr><tr><td style="text-align:left">ostream&amp;</td><td style="text-align:left">write(char*,int)</td><td style="text-align:left">向流中输出指定长度的字符串，不进行转换</td></tr><tr><td style="text-align:left">ostream&amp;</td><td style="text-align:left">flush()</td><td style="text-align:left">刷新流，输出所有缓冲的但还未输出的数据</td></tr><tr><td style="text-align:left">ostream&amp;</td><td style="text-align:left">seekp(streampos)</td><td style="text-align:left">移动流的当前指针到给定的绝对位置</td></tr><tr><td style="text-align:left">ostream&amp;</td><td style="text-align:left">seekp(sereamoff,seek_dir)</td><td style="text-align:left">流的当前指针类似与文件的当前指针</td></tr><tr><td style="text-align:left">streampos</td><td style="text-align:left">tellp()</td><td style="text-align:left">返回流的当前指针的绝对位置</td></tr></tbody></table><p>istream类的成员函数</p><table><thead><tr><th style="text-align:left">返回类型</th><th style="text-align:left">istream类的成员</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">in</td><td style="text-align:left">get()</td><td style="text-align:left">读取并返回一个字符</td></tr><tr><td style="text-align:left">istream&amp;</td><td style="text-align:left">get(char &amp;c)</td><td style="text-align:left">读取字符并存入c中</td></tr><tr><td style="text-align:left">istream&amp;</td><td style="text-align:left">putback()</td><td style="text-align:left">将最近读取的字符放回流中</td></tr><tr><td style="text-align:left">istream&amp;</td><td style="text-align:left">read(char *, int)</td><td style="text-align:left">读取规定长度的字符串到缓冲区中</td></tr><tr><td style="text-align:left">in</td><td style="text-align:left">peek()</td><td style="text-align:left">返回流中下一个字符，但不移动文件指针</td></tr><tr><td style="text-align:left">istream&amp;</td><td style="text-align:left">seekg(streampos)</td><td style="text-align:left">移动当前指针到一绝对地址</td></tr><tr><td style="text-align:left">istream&amp;</td><td style="text-align:left">seekg(streampos, seek_dir)</td><td style="text-align:left">移动当前指针到一相对地址</td></tr><tr><td style="text-align:left">streampos</td><td style="text-align:left">tellg()</td><td style="text-align:left">返回当前指针</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CURL状态码列表</title>
      <link href="/2020/12/28/CURL%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%97%E8%A1%A8/"/>
      <url>/2020/12/28/CURL%E7%8A%B6%E6%80%81%E7%A0%81%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>CURL状态码列表</p><a id="more"></a><table><thead><tr><th style="text-align:center">状态码</th><th style="text-align:center">状态原因</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">正常访问</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">错误的协议</td><td style="text-align:center">未支持的协议。此版cURL 不支持这一协议。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">初始化代码失败</td><td style="text-align:center">初始化失败。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">URL格式不正确</td><td style="text-align:center">URL 格式错误。语法不正确。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">请求协议错误</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">无法解析代理</td><td style="text-align:center">无法解析代理。无法解析给定代理主机。</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">无法解析主机地址</td><td style="text-align:center">无法解析主机。无法解析给定的远程主机。</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">无法连接到主机</td><td style="text-align:center">无法连接到主机。</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">远程服务器不可用</td><td style="text-align:center">FTP 非正常的服务器应答。cURL 无法解析服务器发送的数据。</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">访问资源错误</td><td style="text-align:center">FTP 访问被拒绝。服务器拒绝登入或无法获取您想要的特定资源或目录。最有可能的是您试图进入一个在此服务器上不存在的目录。</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">FTP密码错误</td><td style="text-align:center">FTP 非正常的PASS 回复。cURL 无法解析发送到PASS 请求的应答。</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">结果错误</td><td style="text-align:center">FTP 非正常的的PASV 应答，cURL 无法解析发送到PASV 请求的应答。</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">FTP回应PASV命令</td><td style="text-align:center">FTP 非正常的227格式。cURL 无法解析服务器发送的227行。</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">内部故障</td><td style="text-align:center">FTP 无法连接到主机。无法解析在227行中获取的主机IP</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">设置传输模式为二进制</td><td style="text-align:center">FTP 无法设定为二进制传输。无法改变传输方式到二进制。</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">文件传输短或大于预期</td><td style="text-align:center">部分文件。只有部分文件被传输。</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">RETR命令传输完成</td><td style="text-align:center">FTP 不能下载/访问给定的文件， RETR (或类似)命令失败。</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">命令成功完成</td><td style="text-align:center">FTP quote 错误。quote 命令从服务器返回错误。</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">返回正常</td><td style="text-align:center">HTTP 找不到网页。找不到所请求的URL 或返回另一个HTTP 400或以上错误。此返回代码只出现在使用了-f/–fail 选项以后。</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">数据写入失败</td><td style="text-align:center">写入错误。cURL 无法向本地文件系统或类似目的写入数据。</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">无法启动上传</td><td style="text-align:center">FTP 无法STOR 文件。服务器拒绝了用于FTP 上传的STOR 操作。</td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">回调错误</td><td style="text-align:center">读错误。各类读取问题。</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">内存分配请求失败</td><td style="text-align:center">内存不足。内存分配请求失败。</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">访问超时</td><td style="text-align:center">操作超时。到达指定的超时期限条件。</td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">FTP端口错误</td><td style="text-align:center">FTP PORT 失败。PORT 命令失败。并非所有的FTP 服务器支持PORT 命令，请尝试使用被动(PASV)传输代替！</td></tr><tr><td style="text-align:center">31</td><td style="text-align:center">FTP错误</td><td style="text-align:center">FTP 无法使用REST 命令。REST 命令失败。此命令用来恢复的FTP 传输。</td></tr><tr><td style="text-align:center">33</td><td style="text-align:center">不支持请求</td><td style="text-align:center">HTTP range 错误。range &quot;命令&quot;不起作用。</td></tr><tr><td style="text-align:center">34</td><td style="text-align:center">内部发生错误</td><td style="text-align:center">HTTP POST 错误。内部POST 请求产生错误。</td></tr><tr><td style="text-align:center">35</td><td style="text-align:center">SSL/TLS握手失败</td><td style="text-align:center">SSL 连接错误。SSL 握手失败。</td></tr><tr><td style="text-align:center">36</td><td style="text-align:center">下载无法恢复</td><td style="text-align:center">FTP 续传损坏。不能继续早些时候被中止的下载。</td></tr><tr><td style="text-align:center">37</td><td style="text-align:center">文件权限错误</td><td style="text-align:center">文件无法读取。无法打开文件。权限问题？</td></tr><tr><td style="text-align:center">38</td><td style="text-align:center">LDAP可没有约束力</td><td style="text-align:center">LDAP 无法绑定。LDAP 绑定(bind)操作失败。</td></tr><tr><td style="text-align:center">39</td><td style="text-align:center">LDAP搜索失败</td><td style="text-align:center">LDAP 搜索失败。</td></tr><tr><td style="text-align:center">41</td><td style="text-align:center">函数没有找到</td><td style="text-align:center">功能无法找到。无法找到必要的LDAP 功能。</td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">中止的回调</td><td style="text-align:center">由回调终止。应用程序告知cURL 终止运作。</td></tr><tr><td style="text-align:center">43</td><td style="text-align:center">内部错误</td><td style="text-align:center">内部错误。由一个不正确参数调用了功能。</td></tr><tr><td style="text-align:center">45</td><td style="text-align:center">接口错误</td><td style="text-align:center">接口错误。指定的外发接口无法使用。</td></tr><tr><td style="text-align:center">47</td><td style="text-align:center">过多的重定向</td><td style="text-align:center">过多的重定向。cURL 达到了跟随重定向设定的最大限额跟</td></tr><tr><td style="text-align:center">48</td><td style="text-align:center">无法识别选项</td><td style="text-align:center">指定了未知TELNET 选项。</td></tr><tr><td style="text-align:center">49</td><td style="text-align:center">TELNET格式错误</td><td style="text-align:center">不合式的telnet 选项。</td></tr><tr><td style="text-align:center">51</td><td style="text-align:center">远程服务器的SSL证书</td><td style="text-align:center">peer 的SSL 证书或SSH 的MD5指纹没有确定。</td></tr><tr><td style="text-align:center">52</td><td style="text-align:center">服务器无返回内容</td><td style="text-align:center">服务器无任何应答，该情况在此处被认为是一个错误。</td></tr><tr><td style="text-align:center">53</td><td style="text-align:center">加密引擎未找到</td><td style="text-align:center">找不到SSL 加密引擎。</td></tr><tr><td style="text-align:center">54</td><td style="text-align:center">设定默认SSL加密失败</td><td style="text-align:center">无法将SSL 加密引擎设置为默认。</td></tr><tr><td style="text-align:center">55</td><td style="text-align:center">无法发送网络数据</td><td style="text-align:center">发送网络数据失败。</td></tr><tr><td style="text-align:center">56</td><td style="text-align:center">衰竭接收网络数据</td><td style="text-align:center">在接收网络数据时失败。</td></tr><tr><td style="text-align:center">57</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">58</td><td style="text-align:center">本地客户端证书</td><td style="text-align:center">本地证书有问题。</td></tr><tr><td style="text-align:center">59</td><td style="text-align:center">无法使用密码</td><td style="text-align:center">无法使用指定的SSL 密码。</td></tr><tr><td style="text-align:center">60</td><td style="text-align:center">凭证无法验证</td><td style="text-align:center">peer 证书无法被已知的CA 证书验证。</td></tr><tr><td style="text-align:center">61</td><td style="text-align:center">无法识别的传输编码</td><td style="text-align:center">无法辨识的传输编码。</td></tr><tr><td style="text-align:center">62</td><td style="text-align:center">无效的LDAP URL</td><td style="text-align:center">无效的LDAP URL。</td></tr><tr><td style="text-align:center">63</td><td style="text-align:center">文件超过最大大小</td><td style="text-align:center">超过最大文件尺寸。</td></tr><tr><td style="text-align:center">64</td><td style="text-align:center">FTP失败</td><td style="text-align:center">要求的FTP 的SSL 水平失败。</td></tr><tr><td style="text-align:center">65</td><td style="text-align:center">倒带操作失败</td><td style="text-align:center">发送此数据需要的回卷(rewind)失败。</td></tr><tr><td style="text-align:center">66</td><td style="text-align:center">SSL引擎失败</td><td style="text-align:center">初始化SSL 引擎失败。</td></tr><tr><td style="text-align:center">67</td><td style="text-align:center">服务器拒绝登录</td><td style="text-align:center">用户名、密码或类似的信息未被接受，cURL 登录失败。</td></tr><tr><td style="text-align:center">68</td><td style="text-align:center">未找到文件</td><td style="text-align:center">在TFTP 服务器上找不到文件。</td></tr><tr><td style="text-align:center">69</td><td style="text-align:center">无权限</td><td style="text-align:center">TFTP 服务器权限有问题。</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center">超出服务器磁盘空间</td><td style="text-align:center">TFTP 服务器磁盘空间不足。</td></tr><tr><td style="text-align:center">71</td><td style="text-align:center">非法TFTP操作</td><td style="text-align:center">非法的TFTP 操作。</td></tr><tr><td style="text-align:center">72</td><td style="text-align:center">未知TFTP传输的ID</td><td style="text-align:center">未知TFTP 传输编号(ID)。</td></tr><tr><td style="text-align:center">73</td><td style="text-align:center">文件已经存在</td><td style="text-align:center">文件已存在(TFTP) 。</td></tr><tr><td style="text-align:center">74</td><td style="text-align:center">错误TFTP服务器</td><td style="text-align:center">无此用户(TFTP) 。</td></tr><tr><td style="text-align:center">75</td><td style="text-align:center">字符转换失败</td><td style="text-align:center">字符转换失败。</td></tr><tr><td style="text-align:center">76</td><td style="text-align:center">必须记录回调</td><td style="text-align:center">需要字符转换功能。</td></tr><tr><td style="text-align:center">77</td><td style="text-align:center">CA证书权限</td><td style="text-align:center">读SSL 证书出现问题(路径？访问权限？ ) 。</td></tr><tr><td style="text-align:center">78</td><td style="text-align:center">URL中引用资源不存在</td><td style="text-align:center">URL 中引用的资源不存在。</td></tr><tr><td style="text-align:center">79</td><td style="text-align:center">错误发生在SSH会话</td><td style="text-align:center">SSH 会话期间发生一个未知错误。</td></tr><tr><td style="text-align:center">80</td><td style="text-align:center">无法关闭SSL连接</td><td style="text-align:center">未能关闭SSL 连接。</td></tr><tr><td style="text-align:center">81</td><td style="text-align:center">服务未准备</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">82</td><td style="text-align:center">无法载入CRL文件</td><td style="text-align:center">无法加载CRL 文件，丢失或格式不正确(在7.19.0版中增加) 。</td></tr><tr><td style="text-align:center">83</td><td style="text-align:center">发行人检查失败</td><td style="text-align:center">签发检查失败(在7.19.0版中增加) 。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> curl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> curl </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将make的输出重定向到文件</title>
      <link href="/2020/11/19/%E5%B0%86make%E7%9A%84%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2020/11/19/%E5%B0%86make%E7%9A%84%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>将make的输出重定向到文件</p><a id="more"></a><ul><li>想要把make输出的全部信息，输出到某个文件中，最常见的办法就是：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">make</span> <span class="selector-tag">xxx</span> &gt; <span class="selector-tag">build_output</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>此时默认情况是没有改变2=stderr的输出方式，还是屏幕，所以，如果有错误信息，还是可以在屏幕上看到的。</p><ul><li>只需要把make输出中的错误(及警告)信息输出到文件中，可以用：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make xxx <span class="number">2</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure><p>相应地，由于1=stdout没有变，还是屏幕，所以，那些命令执行时候输出的正常信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p><ul><li>只需要把make输出中的正常（非错误，非警告）的信息输出到文件中，可以用：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make xxx <span class="number">1</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure><p>相应地，由于2=stderr没有变，还是屏幕，所以，那些命令执行时候输出的错误信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p><ul><li>想要把正常输出信息和错误信息输出到分别的文件中，可以用：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make xxx <span class="number">1</span>&gt; build_output_normal.txt <span class="number">2</span>&gt;build_output_error.txt</span><br></pre></td></tr></table></figure><p>即联合使用了1和2，正常信息和错误信息，都输出到对应文件中了。</p><ul><li>所有的信息都输出到同一个文件中：</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make xxx &gt; build_output_all.txt <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>其中的2&gt;&amp;1表示错误信息输出到&amp;1中，而&amp;1，指的是前面的那个文件：build_output_all.txt 。<br>注意：上面所有的1,2等数字，后面紧跟着大于号’&gt;’ ，中间不能有空格</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux添加service服务，设置自启动</title>
      <link href="/2020/11/19/linux%E6%B7%BB%E5%8A%A0service%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
      <url>/2020/11/19/linux%E6%B7%BB%E5%8A%A0service%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>linux添加service服务，设置自启动</p><a id="more"></a><p>例如：注册一个oa-server的服务<br>创建文件： 在<code>/etc/init.d/oa-server</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># chkconfig: 2345 80 90</span></span><br><span class="line"><span class="comment"># description: oa-server register server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">sh /usr/<span class="built_in">local</span>/idea/start.sh</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">ps -ef | grep oa-server | grep -v grep | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><ul><li>注意: <code>#chkconfig, #description 不要少，设置自启动需要</code>.</li></ul><p>服务启动: service oa-server start</p><p>服务关闭: service oa-server shutdown</p><p>设置自启: chkconfig oa-server on</p><p>关闭自启: chkconfig oa-server off</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCode 编写C++ 引用头文件无自动补全</title>
      <link href="/2020/10/13/XCode-%E7%BC%96%E5%86%99C-%E5%BC%95%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E6%97%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/"/>
      <url>/2020/10/13/XCode-%E7%BC%96%E5%86%99C-%E5%BC%95%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6%E6%97%A0%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="如题xcode-编写c-引用头文件无自动补全"><a class="markdownIt-Anchor" href="#如题xcode-编写c-引用头文件无自动补全"></a> 如题:XCode 编写C++ 引用头文件无自动补全</h3><a id="more"></a><p>在Mac写C<ins>代码，最好的工具，无疑是XCode，在xcode中写c</ins>代码时，调用系统方法或引用系统头文件时，有代码提示或自动补全能够使开发更快，更不容易出错。</p><p>在Xcode 11写代码时，突然发现引入系统的头文件都没有提示。这个引起了我的好奇心，经过一顿操作和搜索，终于找到解决方案。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开Xcode —&gt; File —&gt; Workspace Settings或者Project<span class="built_in"> Settings </span>把界面上的build system的默认选项由<span class="string">"New Build System(Default)"</span> 改为 <span class="string">"Legacy Build System"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决git clone 速度慢的问题</title>
      <link href="/2020/09/15/%E8%A7%A3%E5%86%B3git-clone-%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/15/%E8%A7%A3%E5%86%B3git-clone-%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近从github clone一些项目的时候速度极慢，完全受不了，从网上look了很多办法，都以失败告终，直到看到了一篇文章…</p><p><a href="https://blog.csdn.net/weixin_42886104/article/details/106454331" target="_blank" rel="noopener">跳转</a></p><a id="more"></a><p>解决方法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用国内镜像，目前已知Github国内镜像网站有github<span class="selector-class">.com</span><span class="selector-class">.cnpmjs</span><span class="selector-class">.org</span>和hub<span class="selector-class">.fastgit</span><span class="selector-class">.org</span>/。速度根据各地情况而定，</span><br><span class="line"></span><br><span class="line">在clone某个项目的时候将github.com替换为github<span class="selector-class">.com</span><span class="selector-class">.cnpmjs</span><span class="selector-class">.org</span>即可。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>这是我们要clone的</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Hackergeek/</span>architecture-samples</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span>使用镜像</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com.cnpmjs.org<span class="regexp">/Hackergeek/</span>architecture-samples</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span>或者</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span>使用镜像</span><br><span class="line">git clone https:<span class="regexp">//</span>hub.fastgit.org<span class="regexp">/Hackergeek/</span>architecture-samples</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox for mac设置虚拟机硬盘大小</title>
      <link href="/2020/09/15/VirtualBox-for-mac%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A1%AC%E7%9B%98%E5%A4%A7%E5%B0%8F/"/>
      <url>/2020/09/15/VirtualBox-for-mac%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A1%AC%E7%9B%98%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<p>由于VirtualBox在设置好磁盘大小以后就无法通过GUI图形界面进行调整虚拟机硬盘的容量，只能通过命令行调整。我的系统是Mac OS X，Linux和Mac应该差不多，具体没确认过。这种通过命令调整的方法适用于VirtualBox4.0以上。</p><a id="more"></a><p>首先要确认虚拟机磁盘存储的位置。打开VirtualBox，点击存储，鼠标指向虚拟磁盘，会提示虚拟磁盘的位置，如下图。</p><p><img src="/assets/blogImg/20200915-vsbox.png" alt></p><p>现在打开终端，输入sudo su，取得管理员权限，依据刚刚获得的路径，使用VBoxManage命令调整硬盘大小，具体如下：VBoxManage modifyhd /Users/laoshu/VirtualBox\ VMs/windows7/windows7.vdi --resize 61440。resize的参数是MB，我需要60GB，所以就是61440MB。调整以后重启虚拟机，即可硬盘容量即为60GB。</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vitualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 禁用账户</title>
      <link href="/2020/09/11/Linux-%E7%A6%81%E7%94%A8%E8%B4%A6%E6%88%B7/"/>
      <url>/2020/09/11/Linux-%E7%A6%81%E7%94%A8%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>1、可直接修改/etc/passwd相关项来禁用账户：<br>/etc/passwd username❌uid:gid:explain:home:shell</p><p>x-用户的密码原来直接存储在第二字段，但是为了安全，最后专门有了/etc/shadow文件，现在默认用x替代</p><p>uid-用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始</p><a id="more"></a><p>gid-用户的gid,linux的用户都会有两个ID,一个是用户uid，一个是用户组id，在我们登录的时候，输入用户名和密码，其实会先到/etc/passwd查看是否有你输入的账号或者用户名，有的话将该账号与对应的UID和GID(在/etc/group中)读出来。然后读出主文件夹与shell的设置，然后再去检验密码是否正确，正确的话正常登录。</p><p>explain-用户的账号说明解释</p><p>home-用户的家目录文件夹</p><p>shell-用户使用的shell，如果换成/sbin/nologin/就是默认没有登录环境的</p><p>2、可直接修改/etc/shadow相关项来禁用账户：</p><p>/etc/shadow username:passwd:lastchg:min:max:warn:inactive:expire:</p><p>username–用户名</p><p>passwd–密码</p><p>lastchg–从1970年1月1日起到上次修改密码所经过的天数</p><p>min–密码再过几天可以被变更(0表示随时可以改变)</p><p>max–密码再过几天必须被变更(99999表示永不过期)</p><p>warn–密码过期前几天提醒用户(默认为一周)</p><p>inactive–密码过期几天后帐号被禁用</p><p>expire–从1970年1月1日算起，多少天后账号失效</p><p>3、禁止所有的用户登录</p><p>echo “hehe” &gt;&gt; /etc/nologin</p><p>这种方法设置后，只是禁止了从外部ssh登陆本机时有效！但是在本机上，无论是从root用户还是其他普通用户使用su命令切换到锁定用户下都不受影响。</p><p>4、使用命令 passwd    (锁定后，做了ssh无密码信任的机器之间登录不受影响)</p><p>passwd -l 用户            //锁定账号，-l:lock</p><p>passwd -u 用户            //解禁用户，-u:unlock</p><p>5、使用命令 usermod</p><p>usermod -L 用户            //锁定帐号，-L:lock</p><p>usermod -U 用户            //解锁帐号，-U:unlock</p><p>usermod -e 1970-01-02 用户            //该账号的密码自1970年1月1日起，过一天后立即过期</p><p>usermod 用户 -s /sbin/nologin        //修改用户的shell类型<br>用usermod -s禁用的用户，禁用的提示信息可加在 /etc/nologin.txt ，若没有此文件可新建</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode升级11，&#39;iostream&#39; file not found问题</title>
      <link href="/2020/07/20/Xcode%E5%8D%87%E7%BA%A711%EF%BC%8C-iostream-file-not-found%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/20/Xcode%E5%8D%87%E7%BA%A711%EF%BC%8C-iostream-file-not-found%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>升级xcode11后，代码报错：‘iostream’ file not found</p><p>解决方法：</p><p>Build Settings -&gt; Search paths -&gt; System Header Search Paths</p><p>在Debug和Release添加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer<span class="regexp">/Toolchains/</span>XcodeDefault.xctoolchain<span class="regexp">/usr/i</span>nclude<span class="regexp">/c++/</span>v1</span><br></pre></td></tr></table></figure><p>添加后，重新编译，发现已正常。</p>]]></content>
      
      
      <categories>
          
          <category> xcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> xcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar压缩和解压缩打包命令</title>
      <link href="/2020/03/08/tar%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/08/tar%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="tar压缩和解压缩打包命令"><a class="markdownIt-Anchor" href="#tar压缩和解压缩打包命令"></a> tar压缩和解压缩打包命令:</h3><ul><li>压缩成gzip文件：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf shell<span class="selector-class">.tar</span><span class="selector-class">.gz</span> shell/</span><br></pre></td></tr></table></figure><ul><li>将gzip文件解压：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf shell<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><ul><li>压缩为bz2文件：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf shell<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> shell/</span><br></pre></td></tr></table></figure><ul><li>将bz2文件解压：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf shell<span class="selector-class">.tar</span><span class="selector-class">.bz2</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>tar [-cxtzjvfpPN] <strong>文件与目录</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">参数：</span><br><span class="line">-<span class="string">c :</span>建立压缩文件的参数命令（creat的意思）</span><br><span class="line">-<span class="string">x :</span>解压缩文件的参数命令</span><br><span class="line">-<span class="string">t :</span>查看tar包里文件的命令特别注意，在使用参数时,c<span class="regexp">/x/</span>t只能有一个，不能同时存在 因为不可能同时压缩与解压缩。</span><br><span class="line">-<span class="string">z :</span>是否同时具有gzip的属性，即是否需要用gzip压缩</span><br><span class="line">-<span class="string">j :</span>是否同时具有bz2的属性，即是否需要用bzip2压缩（记不住的就是它）</span><br><span class="line">-<span class="string">v :</span>压缩过程中显示文件，这个常用，呵基本上我现在每次解压都会看一下里面的文件</span><br><span class="line">-<span class="string">f :</span>使用文件名，之后立即加文件名，不能再加别的参数</span><br><span class="line">-<span class="string">p :</span>使用原文件的原来属性（属性不会根据用户而变），这个从来没用过。。</span><br><span class="line">-<span class="string">P :</span>可以使用绝对路径来压缩</span><br><span class="line">-<span class="string">N :</span>比后面接的日期（yyyy<span class="regexp">/mm/</span>dd)还要新的才会被打包进新建的文件中</span><br><span class="line">–exclude <span class="string">FILE :</span>在压缩的过程中，不要将FILE打包</span><br></pre></td></tr></table></figure><h4 id="如果只想将文件打成tar包不做压缩同样很简单"><a class="markdownIt-Anchor" href="#如果只想将文件打成tar包不做压缩同样很简单"></a> 如果只想将文件打成tar包，不做压缩，同样很简单：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf <span class="keyword">shell</span>.<span class="bash">tar shell/</span></span><br><span class="line">同样，解压你也就知道了</span><br><span class="line">tar -xvf <span class="keyword">shell</span>.<span class="bash">tar</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome访问Https无法继续</title>
      <link href="/2020/01/08/Chrome%E8%AE%BF%E9%97%AEHttps%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD/"/>
      <url>/2020/01/08/Chrome%E8%AE%BF%E9%97%AEHttps%E6%97%A0%E6%B3%95%E7%BB%A7%E7%BB%AD/</url>
      
        <content type="html"><![CDATA[<p>今天更新了Chrome版本，发现请求自签名证书的https网站，无法不安全继续访问。</p><a id="more"></a><p>Chrome当请求https网站时，如检测不到证书，则会报不安全访问。<br>在旧版本中，可以点击“高级”按钮，选择不安全访问，即可继续访问。</p><hr><p>但在新版本的Chrome访问https网站时，点击“高级”按钮，并没有显示不安全继续访问，那这种情况下，怎样不影响继续访问呢？</p><p>在Chrome的新Tab中，输入如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">chrome:</span>//net-internals/<span class="meta">#hsts</span></span><br></pre></td></tr></table></figure><p>在打开的界面中，选择<code>Domain Security Policy</code> 选项， 在最下面的Delete Domain security policies中的Domain文本框中，输入对应的IP/域名，点击“Delete”按钮后，刷新访问的页面，在“高级”选项中，可以看到继续按照不安全访问的按钮。</p>]]></content>
      
      
      <categories>
          
          <category> chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode(Visual Studio Code)工具快捷键</title>
      <link href="/2019/09/29/vscode-Visual-Studio-Code-%E5%B7%A5%E5%85%B7%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2019/09/29/vscode-Visual-Studio-Code-%E5%B7%A5%E5%85%B7%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>vscode（Visual Studio Code）工具 快捷键</p><a id="more"></a><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + Shift + P，F1</td><td style="text-align:center">显示命令面板 Show Command Palette</td></tr><tr><td style="text-align:center">Ctrl + P</td><td style="text-align:center">快速打开 Quick Open</td></tr><tr><td style="text-align:center">Ctrl + Shift + N</td><td style="text-align:center">新窗口/实例 New window/instance</td></tr><tr><td style="text-align:center">Ctrl + Shift + W</td><td style="text-align:center">关闭窗口/实例 Close window/instance</td></tr></tbody></table><p>基础编辑 Basic editing</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+X</td><td style="text-align:center">剪切行（空选定） Cut line (empty selection)</td></tr><tr><td style="text-align:center">Ctrl+C</td><td style="text-align:center">复制行（空选定）Copy line (empty selection)</td></tr><tr><td style="text-align:center">Alt+ ↑ / ↓</td><td style="text-align:center">向上/向下移动行 Move line up/down</td></tr><tr><td style="text-align:center">Shift+Alt + ↓ / ↑</td><td style="text-align:center">向上/向下复制行 Copy line up/down</td></tr><tr><td style="text-align:center">Ctrl+Shift+K</td><td style="text-align:center">删除行 Delete line</td></tr><tr><td style="text-align:center">Ctrl+Enter</td><td style="text-align:center">在下面插入行 Insert line below</td></tr><tr><td style="text-align:center">Ctrl+Shift+Enter</td><td style="text-align:center">在上面插入行 Insert line above</td></tr><tr><td style="text-align:center">Ctrl+Shift+\</td><td style="text-align:center">跳到匹配的括号 Jump to matching bracket</td></tr><tr><td style="text-align:center">Ctrl+] / [</td><td style="text-align:center">缩进/缩进行 Indent/outdent line</td></tr><tr><td style="text-align:center">Home</td><td style="text-align:center">转到行首 Go to beginning of line</td></tr><tr><td style="text-align:center">End</td><td style="text-align:center">转到行尾 Go to end of line</td></tr><tr><td style="text-align:center">Ctrl+Home</td><td style="text-align:center">转到文件开头 Go to beginning of file</td></tr><tr><td style="text-align:center">Ctrl+End</td><td style="text-align:center">转到文件末尾 Go to end of file</td></tr><tr><td style="text-align:center">Ctrl+↑ / ↓</td><td style="text-align:center">向上/向下滚动行 Scroll line up/down</td></tr><tr><td style="text-align:center">Alt+PgUp /PgDown</td><td style="text-align:center">向上/向下滚动页面 Scroll page up/down</td></tr><tr><td style="text-align:center">Ctrl+Shift+[</td><td style="text-align:center">折叠（折叠）区域 Fold (collapse) region</td></tr><tr><td style="text-align:center">Ctrl+Shift+]</td><td style="text-align:center">展开（未折叠）区域 Unfold (uncollapse) region</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+[</td><td style="text-align:center">折叠（未折叠）所有子区域 Fold (collapse) all subregions</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+]</td><td style="text-align:center">展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+0</td><td style="text-align:center">折叠（折叠）所有区域 Fold (collapse) all regions</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+J</td><td style="text-align:center">展开（未折叠）所有区域 Unfold (uncollapse) all regions</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+C</td><td style="text-align:center">添加行注释 Add line comment</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+U</td><td style="text-align:center">删除行注释 Remove line comment</td></tr><tr><td style="text-align:center">Ctrl+/</td><td style="text-align:center">切换行注释 Toggle line comment</td></tr><tr><td style="text-align:center">Shift+Alt+A</td><td style="text-align:center">切换块注释 Toggle block comment</td></tr><tr><td style="text-align:center">Alt+Z</td><td style="text-align:center">切换换行 Toggle word wrap</td></tr></tbody></table><p>导航 Navigation</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + T</td><td style="text-align:center">显示所有符号 Show all Symbols</td></tr><tr><td style="text-align:center">Ctrl + G</td><td style="text-align:center">转到行… Go to Line…</td></tr><tr><td style="text-align:center">Ctrl + P</td><td style="text-align:center">转到文件… Go to File…</td></tr><tr><td style="text-align:center">Ctrl + Shift + O</td><td style="text-align:center">转到符号… Go to Symbol…</td></tr><tr><td style="text-align:center">Ctrl + Shift + M</td><td style="text-align:center">显示问题面板 Show Problems panel</td></tr><tr><td style="text-align:center">F8</td><td style="text-align:center">转到下一个错误或警告 Go to next error or warning</td></tr><tr><td style="text-align:center">Shift + F8</td><td style="text-align:center">转到上一个错误或警告 Go to previous error or warning</td></tr><tr><td style="text-align:center">Ctrl + Shift + Tab</td><td style="text-align:center">导航编辑器组历史记录 Navigate editor group history</td></tr><tr><td style="text-align:center">Alt + ←/→</td><td style="text-align:center">返回/前进 Go back / forward</td></tr><tr><td style="text-align:center">Ctrl + M</td><td style="text-align:center">切换选项卡移动焦点 Toggle Tab moves focus</td></tr></tbody></table><p>搜索和替换 Search and replace</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + F</td><td style="text-align:center">查找 Find</td></tr><tr><td style="text-align:center">Ctrl + H</td><td style="text-align:center">替换 Replace</td></tr><tr><td style="text-align:center">F3 / Shift + F3</td><td style="text-align:center">查找下一个/上一个 Find next/previous</td></tr><tr><td style="text-align:center">Alt + Enter</td><td style="text-align:center">选择查找匹配的所有出现 Select all occurences of Find match</td></tr><tr><td style="text-align:center">Ctrl + D</td><td style="text-align:center">将选择添加到下一个查找匹配 Add selection to next Find match</td></tr><tr><td style="text-align:center">Ctrl + K Ctrl + D</td><td style="text-align:center">将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td></tr><tr><td style="text-align:center">Alt + C / R / W</td><td style="text-align:center">切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td></tr></tbody></table><p>多光标和选择 Multi-cursor and selection</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Alt +单击</td><td style="text-align:center">插入光标 Insert cursor</td></tr><tr><td style="text-align:center">Ctrl + Alt +↑/↓</td><td style="text-align:center">在上/下插入光标 Insert cursor above / below</td></tr><tr><td style="text-align:center">Ctrl + U</td><td style="text-align:center">撤消上一个光标操作 Undo last cursor operation</td></tr><tr><td style="text-align:center">Shift + Alt + I</td><td style="text-align:center">在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td></tr><tr><td style="text-align:center">Ctrl + I</td><td style="text-align:center">选择当前行 Select current line</td></tr><tr><td style="text-align:center">Ctrl + Shift + L</td><td style="text-align:center">选择当前选择的所有出现 Select all occurrences of current selection</td></tr><tr><td style="text-align:center">Ctrl + F2</td><td style="text-align:center">选择当前字的所有出现 Select all occurrences of current word</td></tr><tr><td style="text-align:center">Shift + Alt + →</td><td style="text-align:center">展开选择 Expand selection</td></tr><tr><td style="text-align:center">Shift + Alt + ←</td><td style="text-align:center">缩小选择 Shrink selection</td></tr><tr><td style="text-align:center">Shift + Alt + （拖动鼠标）</td><td style="text-align:center">列（框）选择 Column (box) selection</td></tr><tr><td style="text-align:center">Ctrl + Shift + Alt +（箭头键）</td><td style="text-align:center">列（框）选择 Column (box) selection</td></tr><tr><td style="text-align:center">Ctrl + Shift + Alt + PgUp / PgDown</td><td style="text-align:center">列（框）选择页上/下 Column (box) selection page up/down</td></tr></tbody></table><p>丰富的语言编辑 Rich languages editing</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + 空格</td><td style="text-align:center">触发建议 Trigger suggestion</td></tr><tr><td style="text-align:center">Ctrl + Shift + Space</td><td style="text-align:center">触发器参数提示 Trigger parameter hints</td></tr><tr><td style="text-align:center">Tab Emmet</td><td style="text-align:center">展开缩写 Emmet expand abbreviation</td></tr><tr><td style="text-align:center">Shift + Alt + F</td><td style="text-align:center">格式化文档 Format document</td></tr><tr><td style="text-align:center">Ctrl + K Ctrl + F</td><td style="text-align:center">格式选定区域 Format selection</td></tr><tr><td style="text-align:center">F12</td><td style="text-align:center">转到定义 Go to Definition</td></tr><tr><td style="text-align:center">Alt + F12</td><td style="text-align:center">Peek定义 Peek Definition</td></tr><tr><td style="text-align:center">Ctrl + K</td><td style="text-align:center">F12打开定义到边 Open Definition to the side</td></tr><tr><td style="text-align:center">Ctrl + .</td><td style="text-align:center">快速解决 Quick Fix</td></tr><tr><td style="text-align:center">Shift + F12</td><td style="text-align:center">显示引用 Show References</td></tr><tr><td style="text-align:center">F2重命名符号</td><td style="text-align:center">Rename Symbol</td></tr><tr><td style="text-align:center">Ctrl + Shift + . /，</td><td style="text-align:center">替换为下一个/上一个值 Replace with next/previous value</td></tr><tr><td style="text-align:center">Ctrl + K Ctrl + X</td><td style="text-align:center">修剪尾随空格 Trim trailing whitespace</td></tr><tr><td style="text-align:center">Ctrl + K M</td><td style="text-align:center">更改文件语言 Change file language</td></tr></tbody></table><p>编辑器管理 Editor management</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+F4, Ctrl+W</td><td style="text-align:center">关闭编辑器 Close editor</td></tr><tr><td style="text-align:center">Ctrl+K F</td><td style="text-align:center">关闭文件夹 Close folder</td></tr><tr><td style="text-align:center">Ctrl+\</td><td style="text-align:center">拆分编辑器 Split editor</td></tr><tr><td style="text-align:center">Ctrl+ 1 / 2 / 3</td><td style="text-align:center">聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+ ←/→</td><td style="text-align:center">聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td></tr><tr><td style="text-align:center">Ctrl+Shift+PgUp / PgDown</td><td style="text-align:center">向左/向右移动编辑器 Move editor left/right</td></tr><tr><td style="text-align:center">Ctrl+K ← / →</td><td style="text-align:center">移动活动编辑器组 Move active editor group</td></tr></tbody></table><p>文件管理 File management</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+N</td><td style="text-align:center">新文件 New File</td></tr><tr><td style="text-align:center">Ctrl+O</td><td style="text-align:center">打开文件… Open File…</td></tr><tr><td style="text-align:center">Ctrl+S</td><td style="text-align:center">保存 Save</td></tr><tr><td style="text-align:center">Ctrl+Shift+S</td><td style="text-align:center">另存为… Save As…</td></tr><tr><td style="text-align:center">Ctrl+K S</td><td style="text-align:center">全部保存 Save All</td></tr><tr><td style="text-align:center">Ctrl+F4</td><td style="text-align:center">关闭 Close</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+W</td><td style="text-align:center">关闭所有 Close All</td></tr><tr><td style="text-align:center">Ctrl+Shift+T</td><td style="text-align:center">重新打开关闭的编辑器 Reopen closed editor</td></tr><tr><td style="text-align:center">Ctrl+K</td><td style="text-align:center">输入保持打开 Enter Keep Open</td></tr><tr><td style="text-align:center">Ctrl+Tab</td><td style="text-align:center">打开下一个 Open next</td></tr><tr><td style="text-align:center">Ctrl+Shift+Tab</td><td style="text-align:center">打开上一个 Open previous</td></tr><tr><td style="text-align:center">Ctrl+K P</td><td style="text-align:center">复制活动文件的路径 Copy path of active file</td></tr><tr><td style="text-align:center">Ctrl+K R</td><td style="text-align:center">显示资源管理器中的活动文件 Reveal active file in Explorer</td></tr><tr><td style="text-align:center">Ctrl+K O</td><td style="text-align:center">显示新窗口/实例中的活动文件 Show active file in new window/instance</td></tr></tbody></table><p>显示 Display</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">F11</td><td style="text-align:center">切换全屏 Toggle full screen</td></tr><tr><td style="text-align:center">Shift+Alt+1</td><td style="text-align:center">切换编辑器布局 Toggle editor layout</td></tr><tr><td style="text-align:center">Ctrl+ = / -</td><td style="text-align:center">放大/缩小 Zoom in/out</td></tr><tr><td style="text-align:center">Ctrl+B</td><td style="text-align:center">切换侧栏可见性 Toggle Sidebar visibility</td></tr><tr><td style="text-align:center">Ctrl+Shift+E</td><td style="text-align:center">显示浏览器/切换焦点 Show Explorer / Toggle focus</td></tr><tr><td style="text-align:center">Ctrl+Shift+F</td><td style="text-align:center">显示搜索 Show Search</td></tr><tr><td style="text-align:center">Ctrl+Shift+G</td><td style="text-align:center">显示Git Show Git</td></tr><tr><td style="text-align:center">Ctrl+Shift+D</td><td style="text-align:center">显示调试 Show Debug</td></tr><tr><td style="text-align:center">Ctrl+Shift+X</td><td style="text-align:center">显示扩展 Show Extensions</td></tr><tr><td style="text-align:center">Ctrl+Shift+H</td><td style="text-align:center">替换文件 Replace in files</td></tr><tr><td style="text-align:center">Ctrl+Shift+J</td><td style="text-align:center">切换搜索详细信息 Toggle Search details</td></tr><tr><td style="text-align:center">Ctrl+Shift+C</td><td style="text-align:center">打开新命令提示符/终端 Open new command prompt/terminal</td></tr><tr><td style="text-align:center">Ctrl+Shift+U</td><td style="text-align:center">显示输出面板 Show Output panel</td></tr><tr><td style="text-align:center">Ctrl+Shift+V</td><td style="text-align:center">切换Markdown预览 Toggle Markdown preview</td></tr><tr><td style="text-align:center">Ctrl+K V</td><td style="text-align:center">从旁边打开Markdown预览 Open Markdown preview to the side</td></tr></tbody></table><p>调试 Debug</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">F9</td><td style="text-align:center">切换断点 Toggle breakpoint</td></tr><tr><td style="text-align:center">F5</td><td style="text-align:center">开始/继续 Start/Continue</td></tr><tr><td style="text-align:center">Shift+F5</td><td style="text-align:center">停止 Stop</td></tr><tr><td style="text-align:center">F11 / Shift+F11</td><td style="text-align:center">下一步/上一步 Step into/out</td></tr><tr><td style="text-align:center">F10</td><td style="text-align:center">跳过 Step over</td></tr><tr><td style="text-align:center">Ctrl+K Ctrl+I</td><td style="text-align:center">显示悬停 Show hover</td></tr></tbody></table><p>集成终端 Integrated terminal</p><table><thead><tr><th style="text-align:center">按Press</th><th style="text-align:center">功能Function</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl+`</td><td style="text-align:center">显示集成终端 Show integrated terminal</td></tr><tr><td style="text-align:center">Ctrl+Shift+`</td><td style="text-align:center">创建新终端 Create new terminal</td></tr><tr><td style="text-align:center">Ctrl+Shift+C</td><td style="text-align:center">复制选定 Copy selection</td></tr><tr><td style="text-align:center">Ctrl+Shift+V</td><td style="text-align:center">粘贴到活动端子 Paste into active terminal</td></tr><tr><td style="text-align:center">Ctrl+↑ / ↓</td><td style="text-align:center">向上/向下滚动 Scroll up/down</td></tr><tr><td style="text-align:center">Shift+PgUp / PgDown</td><td style="text-align:center">向上/向下滚动页面 Scroll page up/down</td></tr><tr><td style="text-align:center">Ctrl+Home / End</td><td style="text-align:center">滚动到顶部/底部 Scroll to top/bottom</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USB数据线和充电线有什么不同</title>
      <link href="/2019/09/24/USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E5%92%8C%E5%85%85%E7%94%B5%E7%BA%BF%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/"/>
      <url>/2019/09/24/USB%E6%95%B0%E6%8D%AE%E7%BA%BF%E5%92%8C%E5%85%85%E7%94%B5%E7%BA%BF%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p>从X宝上买了两根快充线，当连接手机和电脑后，怎样也无法检测到设备，无法进行传输数据，难道我买了个假的线？还是版本不兼容？但手机有显示在充电啊~</p><a id="more"></a><p>原来，USB数据线与充电线是不同的，购买时，千万要注意。</p><h4 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别：</h4><ol><li>数据线在USB接口那跟线里有四条线，而电源线在USB那个线里有两条线。</li><li>充电线用到时电源的VCC和GND这两个线，而数据线是用到VCC，GND，和两个通信线。</li><li>充电线只能拿来给手机充电，数据线除了能给移动设备充电外，还能用来于手机与电脑之间的数据传输，也就是说，数据线可以当充电线用，但充电线不一定能当数据线用。</li></ol><h4 id="扩展资料"><a class="markdownIt-Anchor" href="#扩展资料"></a> 扩展资料</h4><h5 id="手机数据线的接线方式"><a class="markdownIt-Anchor" href="#手机数据线的接线方式"></a> 手机数据线的接线方式</h5><p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p><p><strong>白线</strong>：负电压数据线（标识为：Data-或USB Port -）</p><p><strong>绿线</strong>：正电压数据线（标识为：Data+或USB Port +）</p><p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p><h5 id="手机充电线的接线方式"><a class="markdownIt-Anchor" href="#手机充电线的接线方式"></a> 手机充电线的接线方式</h5><p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p><p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> usb </tag>
            
            <tag> 常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搜索命令ag</title>
      <link href="/2019/09/24/Linux%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4ag/"/>
      <url>/2019/09/24/Linux%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4ag/</url>
      
        <content type="html"><![CDATA[<p>ag的the_silver_searcher介绍，搜索代码神器</p><a id="more"></a><p>the_silver_searcher是什么？ ag又是什么？</p><p>作者主页关于the_silver_searcher的说明：<a href="http://geoff.greer.fm/ag/" target="_blank" rel="noopener">http://geoff.greer.fm/ag/</a></p><p>The Silver Searcher is a tool for searching code. It started off as a clone of Ack, but their feature sets have since diverged slightly. In typical usage, Ag is 5-10x faster than Ack. See the GitHub page for more info.</p><p>源代码：<a href="https://github.com/ggreer/the_silver_searcher" target="_blank" rel="noopener">https://github.com/ggreer/the_silver_searcher</a></p><p>Mac 下安装：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>the_silver_searcher</span><br></pre></td></tr></table></figure><p>Mac 下卸载：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>uninstall the_silver_searcher</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ag <span class="string">'hx'</span> <span class="regexp">/www/</span>t086.com</span><br></pre></td></tr></table></figure><p>常用参数<br>-i 忽略大小写<br>-l 只列出文件名<br>-g 文件名匹配<br>–php 只搜索php文件<br>–ignore-dir 忽略目录</p><p>如：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ag <span class="params">--ignore-dir</span> sitedata <span class="params">--php</span> hx <span class="string">/www/9enjoy.com</span></span><br></pre></td></tr></table></figure><p>更多</p><p>-h 看帮助吧</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令生成Patch和打补丁</title>
      <link href="/2019/07/26/Git%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90Patch%E5%92%8C%E6%89%93%E8%A1%A5%E4%B8%81/"/>
      <url>/2019/07/26/Git%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90Patch%E5%92%8C%E6%89%93%E8%A1%A5%E4%B8%81/</url>
      
        <content type="html"><![CDATA[<p>推荐大家使用git的format-patch和am命令进行生成patch和打patch，用此方法获得的patch其实就是commit里提交的code修改以及commit信息。有如下好处：</p><ol><li><p>对于git这种以project为单位的修改，尤其是涉及到多个文件夹下的多个文件的改动时，非常方便，能够记录所有的改动（添加，修改，删除文件等）</p></li><li><p>可以保存commit信息。</p></li><li><p>能够灵活的获取patch。可以获取任意两个commit之间的patch集。</p></li></ol><a id="more"></a><p>使用方法（直接给一些examples）：</p><h3 id="git-format-patch"><a class="markdownIt-Anchor" href="#git-format-patch"></a> git format-patch</h3><p>$ git format-patch HEAD^ 　　　　　　　　　　　　　   #生成最近的1次commit的patch</p><p>$ git format-patch HEAD^^　　　　　　　　　　　　　  #生成最近的2次commit的patch</p><p>$ git format-patch HEAD^^^ 　　　　　　　　　　　　　#生成最近的3次commit的patch</p><p>$ git format-patch HEAD^^^^ 　　　　　　　　　　　      #生成最近的4次commit的patch</p><p>$ git format-patch <r1>…<r2>            #生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>都是具体的commit号)</r2></r1></r2></r1></p><p>$ git format-patch -1 <r1>               #生成单个commit的patch</r1></p><p>$ git format-patch <r1>               #生成某commit以来的修改patch（不包含该commit）</r1></p><p>$ git format-patch --root <r1>　　　　　　　　　　　　   #生成从根到r1提交的所有patch</r1></p><h3 id="git-am"><a class="markdownIt-Anchor" href="#git-am"></a> git am</h3><p>$ git apply --stat 0001-limit-log-function.patch   　　　　  # 查看patch的情况</p><p>$ git apply --check 0001-limit-log-function.patch   　　　  # 检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上</p><p>(注：git apply是另外一种打patch的命令，其与git am的区别是，git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人)</p><p>$ git am 0001-limit-log-function.patch                                # 将名字为0001-limit-log-function.patch的patch打上</p><p>$ git am --signoff 0001-limit-log-function.patch                  # 添加-s或者–signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者</p><p>$ git am ~/patch-set/*.patch　　　　　　　　　　　　　# 将路径~/patch-set/*.patch 按照先后顺序打上</p><p>$ git am --abort                                                                   #</p><p>当git am失败时，用以将已经在am过程中打上的patch废弃掉(比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态)</p><p>$ git am --resolved                   #当git am失败，解决完冲突后，这条命令会接着打patch</p><p>如果打Patch的过程中发生了冲突（conflicts），怎么办？</p><p>解决patch冲突的过程是：</p><p>如果不想打这一系列patch了，直接：git am --abort。</p><p>如果还想打, 有两种解决方案：</p><p>方案一（个人推荐）：</p><p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p><p>(2) 根据.rej文件，通过编辑该patch文件的方式解决冲突。</p><p>(3) 废弃上一条am命令已经打了的patch：git am --abort</p><p>(4) 重新打patch：git am ~/patch-set/*.patchpatch</p><p>方案二：</p><p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p><p>(2) 根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。</p><p>(3) 将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令git add &lt;file_name&gt;添加到工作区中</p><p>(4) 告诉git冲突已经解决，继续打patch: git am --resolved (git am --resolved 和 git am --continue是一样的)</p><p>分析：方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二十通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下安装depot_tools</title>
      <link href="/2019/07/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85depot-tools/"/>
      <url>/2019/07/12/mac%E4%B8%8B%E5%AE%89%E8%A3%85depot-tools/</url>
      
        <content type="html"><![CDATA[<p>Google的Chrome代码，webrtc代码都是需要用到depot_tools的，那怎样安装呢，下面详细介绍，使用环境为Mac系统。</p><h3 id="1-获取depot_tools"><a class="markdownIt-Anchor" href="#1-获取depot_tools"></a> 1. 获取depot_tools</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure><h3 id="2-获取depot_tools当前目录"><a class="markdownIt-Anchor" href="#2-获取depot_tools当前目录"></a> 2. 获取depot_tools当前目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h3 id="3-添加环境变量"><a class="markdownIt-Anchor" href="#3-添加环境变量"></a> 3. 添加环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile 打开最后一行添加，如无此文件，可添加此文件</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:/PWD/depot_tools"</span> PWD为刚才第二步获取的路径</span><br></pre></td></tr></table></figure><h3 id="4-生效环境变量"><a class="markdownIt-Anchor" href="#4-生效环境变量"></a> 4. 生效环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webrtc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webrtc </tag>
            
            <tag> depot_tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vpn下git clone的正确方式</title>
      <link href="/2019/07/12/vpn%E4%B8%8Bgit-clone%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/07/12/vpn%E4%B8%8Bgit-clone%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在Mac系统中，使用了Shadowsocks开了代理，使用浏览器打开Google是正常的，但用git clone googlesource.com里面的代码，缺总是超时，怎样解决git也使用代理呢？</p><p>修改git配置即可，速度直接飙升10倍</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config --global http<span class="selector-class">.proxy</span> <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line"></span><br><span class="line">git config --global https<span class="selector-class">.proxy</span> <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile经典教程</title>
      <link href="/2019/05/22/Makefile%E7%BB%8F%E5%85%B8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/05/22/Makefile%E7%BB%8F%E5%85%B8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u011857683/article/details/82049589" target="_blank" rel="noopener">Makefile经典教程(掌握这些足够)</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频相关-视频协议</title>
      <link href="/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.51cto.com/2343338/411983" target="_blank" rel="noopener">【转载：51cto】</a></p><a id="more"></a><h4 id="11-音视频协议-通讯协议介绍"><a class="markdownIt-Anchor" href="#11-音视频协议-通讯协议介绍"></a> 1.1 音视频协议、通讯协议介绍</h4><h5 id="111-两大标准制定组织"><a class="markdownIt-Anchor" href="#111-两大标准制定组织"></a> 1.1.1 两大标准制定组织</h5><p>这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（ISO）和国际电信联盟（ITU），相信IT行业的从业者没听说过这两个行业的人很少。</p><p>在音视频压缩标准方面，mpeg系列的协议是ISO制定的标准，而H系列的协议则是ITU制定的标准。</p><h5 id="112-视频协议"><a class="markdownIt-Anchor" href="#112-视频协议"></a> 1.1.2 视频协议</h5><p>目前主要的视频压缩协议有：H.261、H.263、H.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是H.261，它的算法现在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准H.264。H.264单看名字，感觉是ITU组织制定的，其实它还有一个名字叫mpeg-4 Part 10，翻译过来叫mpeg-4 第十部分，这是因为H.264是ISO和ITU组织共同制定的，版权共享。其实，一直以来，H系列的标准制定者和mpeg系列的标准制定者基本上就是同一群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。</p><p>从应用的角度看，mpeg系列在消费类应用更广些，大家也更熟悉些，我们熟悉的VCD格式视频主要是mpeg-1，DVD的视频则是mpeg-2，早期大家看的电影在电脑上存盘文件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到最近的H.264。而H系列的标准，用得最多的是视频会议，从H.261到H.263，再到H.263 、H.263 等，再到现在的H.264。<br>从技术角度说，H系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比H系列同一代的协议要出得晚些，算法也相对更先进些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到H系列协议的原因。<br>H.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，H.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。<br>除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。</p><h5 id="113-音频协议"><a class="markdownIt-Anchor" href="#113-音频协议"></a> 1.1.3 音频协议</h5><p>音频协议也分两大类，ITU组织的主要是用于视频会议的G系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型的g.723支持5.9k/s这样的码率，而且语音音质还很不错。ISO的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 Audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比G系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。<br>同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。</p><h5 id="114-上层通讯协议"><a class="markdownIt-Anchor" href="#114-上层通讯协议"></a> 1.1.4 上层通讯协议</h5><p>在视频会议系统中，目前最流行的有H.323和SIP协议，在流媒体应用中，ISMA rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。<br>H.323主要用于视频会议，被称为协议簇，我们前面提到的H系列视频压缩协议和G系列音频压缩协议都属于它的子协议。除了音视频编×××外；它还定义了各种数据应用，包括T.120、T.84、T.434等；另外还包括H.245控制信道、H.225.0呼叫信令信道以及RAS信道。详细的H.323的知识，这里就不深入介绍了。</p><p>SIP是由IETF提出来的一个应用控制（信令）协议。正如名字所隐含的–用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。</p><p>H.323和SIP分别是通信领域与因特网两大阵营推出的建议。 H.323企图把IP电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而SIP协议侧重于将IP电话作为因特网上的一个应用，较其实应用（如FTP，E-mail等）增加了信令和QoS的要求，它们支持的业务基本相同，也都利用RTP作为媒体传输的协议。但H.323是一个相对复杂的协议。<br>RTSP主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用RTSP协议。</p><h4 id="12-音视频基本概念介绍"><a class="markdownIt-Anchor" href="#12-音视频基本概念介绍"></a> 1.2 音视频基本概念介绍</h4><h5 id="121-视频的基本概念"><a class="markdownIt-Anchor" href="#121-视频的基本概念"></a> 1.2.1 视频的基本概念</h5><h6 id="rgb和yuv"><a class="markdownIt-Anchor" href="#rgb和yuv"></a> RGB和YUV</h6><p>RGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，BMP文件格式中的像素值等；而YUV主要指亮度和两个色差信号，被称为luminance和chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用YUV格式。</p><h6 id="yuv格式"><a class="markdownIt-Anchor" href="#yuv格式"></a> YUV格式</h6><p>YUV文件格式又分很多种，如果算上存储格式，就更多了，比如YUV444、YUV422、YUV411、YUV420等等，视频压缩用到的是420格式，这是因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、progressive等。</p><h6 id="帧率"><a class="markdownIt-Anchor" href="#帧率"></a> 帧率</h6><p>每秒钟图像的刷新速度。PAL制式的电视，帧率是25帧每秒，NTSC制式的电视帧率是29.97帧每秒。我们常用的电脑也有刷新率，一般来说，电脑的刷新率要在75赫兹以上，人眼才不会觉得闪。</p><h6 id="隔行扫描interlace和逐行扫描progressive"><a class="markdownIt-Anchor" href="#隔行扫描interlace和逐行扫描progressive"></a> 隔行扫描(interlace)和逐行扫描(progressive)</h6><p>一般的电视上都是隔行扫描，而显示器都是逐行扫描。这里有一个场的概念，隔行扫描是一帧等于两场，而逐行扫描则是一帧就是一场。</p><h6 id="码率"><a class="markdownIt-Anchor" href="#码率"></a> 码率</h6><p>它的单位是 bit per second，一般所有描述带宽的概念，单位都是bit，描述存储容量的单位一般都是大B，也就是BYTE（字节）。</p><h6 id="分辨率"><a class="markdownIt-Anchor" href="#分辨率"></a> 分辨率</h6><p>图像的分辨率指的是它的像素数，一般用得最多的是CIF，也就是352*288，4cif自然就是指704*576，而D1的分辨率严格意义上是720*576，大小来说和4cif差不多了。当然现在还有很多高清的分辨率，这些我不是太了解，大家感兴趣可以查一下。另外，国外很多时候，对cif的高度取240，这是因为他们的帧率比我们高（29.97hz），自然，高度要小一些了。</p><h6 id="实时与非实时"><a class="markdownIt-Anchor" href="#实时与非实时"></a> 实时与非实时</h6><p>主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。 延时<br>也是形容编码器的一个重要指标，一般来说，200ms到300ms人的感觉不会很明显，到了500毫秒的话，还是可以很明显感觉到的。</p><h6 id="音视频同步"><a class="markdownIt-Anchor" href="#音视频同步"></a> 音视频同步</h6><p>作为视频会议的应用，一般要求做到所谓的“唇同步”。基本的保证音视频同步的手段就是时间戳（time stamp）。</p><h6 id="复合视频和s-video"><a class="markdownIt-Anchor" href="#复合视频和s-video"></a> 复合视频和S-Video</h6><p>NTSC和PAL彩色视频信号是这样构成的–首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多种数据“叠加”起来的，故称之为“复合视频”。S-Video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。它的 功能是将RGB三原色和亮度进行分离处理。</p><h6 id="ntsc-pal和secam"><a class="markdownIt-Anchor" href="#ntsc-pal和secam"></a> NTSC、PAL和SECAM</h6><p>基带视频是一种简单的模拟信号，由视频模拟数据和视频同步数据构成，用于接收端正确地显示图像。信号的细节取决于应用的视频标准或者“制式”–NTSC（美国全国电视标准委员会，National Television Standards Committee）、PAL（逐行倒相，Phase Alternate Line）以及SECAM（顺序传送与存储彩色电视系统，法国采用的一种电视制式，SEquential Couleur Avec Memoire）。<br>中国的电视信号一般都是PAL，而美日则是NTSC。这2个制式的帧率，图像尺寸都有所不同。<br>线数<br>我们在买摄像头的时候，经常会提到一个叫线数的概念，它其实就是分辨率中的高（height）。举个例子：PAL制式的D1图像，线数就是576。</p><h6 id="亮度-饱和度和对比度"><a class="markdownIt-Anchor" href="#亮度-饱和度和对比度"></a> 亮度、饱和度和对比度</h6><p>英文名分别是：brightness、saturation和 contrast。这是三个表示图像的重要指标。</p><h5 id="122-音频的基本概念"><a class="markdownIt-Anchor" href="#122-音频的基本概念"></a> 1.2.2 音频的基本概念</h5><h6 id="采样率"><a class="markdownIt-Anchor" href="#采样率"></a> 采样率</h6><p>音频的采样率其实类似视频的帧率，意思是每秒钟采样的次数。G.711的采样率是8k（人的语音大概就在这个频率范围以内），而mp3支持的典型采样率是 44.1kHz（超过人耳响应频率的2倍多一点——奈奎斯特定理）。很明显，mp3压缩的原始声音要比g.711好多了。</p><h6 id="采样精度"><a class="markdownIt-Anchor" href="#采样精度"></a> 采样精度</h6><p>就是每个采样进行模数转换时的量化系数。G.711是8bit采样精度，而mp3典型的是16bit。</p><h6 id="回声消除"><a class="markdownIt-Anchor" href="#回声消除"></a> 回声消除</h6><p>视频会议应用中的音频最大问题。回声产生的原因很复杂，一般认为，在互联网中的语音传输，延时来源有三个：压缩延迟、分组传输延迟和处理延迟。语音压缩延迟是产生回声的主要延迟，例如在G.723.1标准中，压缩一帧（30ms）的最大延迟是37.5ms。分组传输延迟也是一个很重要的来源，测试表明，端到端的最大传输延迟可达250ms以上。处理延迟是指语音包的封装时延及其缓冲时延等。</p><h5 id="13-视讯产品简介"><a class="markdownIt-Anchor" href="#13-视讯产品简介"></a> 1.3 视讯产品简介</h5><h6 id="131-mp4"><a class="markdownIt-Anchor" href="#131-mp4"></a> 1.3.1 MP4</h6><p>这是最近两年开始流行的新产品，它的定义其实业有些混乱。目前流行的说法是：只要和视频沾边的便携式播放器，都叫MP4。不过下面的图更能说明问题。</p><h6 id="132-光端机"><a class="markdownIt-Anchor" href="#132-光端机"></a> 1.3.2 光端机</h6><p>一种完成电——光信号转换的设备。主要用于模拟远程视频监控系统，它可将远端的摄像头模拟信号转换成光信号传送到监控中心，配合监控中心的DVR使用。</p><h6 id="133-视频会议mcu"><a class="markdownIt-Anchor" href="#133-视频会议mcu"></a> 1.3.3 视频会议MCU</h6><p>它是视频会议的核心设备之一。当参与视频会议的终端超过2个时，就必须通过MCU来召开会议。<br>MCU的基本功能是媒体流转发和混音，并进行会议管理，随着视频会议的发展，MCU支持的功能也越来越多，比如：混屏、远程摄像头控制等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
            <tag> 视频协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频相关-文件码率与大小计算</title>
      <link href="/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E6%96%87%E4%BB%B6%E7%A0%81%E7%8E%87%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97/"/>
      <url>/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E6%96%87%E4%BB%B6%E7%A0%81%E7%8E%87%E4%B8%8E%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>编码率/比特率直接与文件体积有关。且编码率与编码格式配合是否合适，直接关系到视频文件是否清晰。</p></blockquote><a id="more"></a><p>在视频编码领域，比特率常翻译为编码率，单位是Kbps，例如800Kbps</p><p>其中， 1K=1024 1M=1024K</p><p>b 为 比特（bit） 这个就是电脑文件大小的计量单位，1KB=8Kb，区分大小写，B代表字节(Byte) s 为 秒（second） p 为 每（per）<br>以800kbps来编码表示经过编码后的数据每秒钟需要用800K比特来表示。<br>1MB=8Mb=1024KB=8192Kb</p><p>Windows系统文件大小经常用B(字节)为单位表示，但网络运营商则用b(比特)，也就是为什么2Mb速度宽带在电脑上显示速度最快只有约256KB的原因，网络运营商宣传网速的时候省略了计量单位。</p><p>完整的视频文件是由音频流与视频流2个部分组成的，音频和视频分别使用的是不同的编码率，因此一个视频文件的最终技术大小的编码率是音频编码率+视频编码率。例如一个音频编码率为128Kbps，视频编码率为800Kbps的文件，其总编码率为928Kbps，意思是经过编码后的数据每秒钟需要用928K比特来表示。</p><p>了解了编码率的含义以后，根据视频播放时间长度，就不难了解和计算出最终文件的大小。编码率也高，视频播放时间越长，文件体积就越大。不是分辨率越大文件就越大，只是一般情况下，为了保证清晰度，较高的分辨率需要较高的编码率配合，所以使人产生分辨率越大的视频文件体积越大的感觉。</p><p>计算输出文件大小公式：<br>（音频编码率（Kbit为单位）/8 + 视频编码率（Kbit为单位）/8）× 影片总长度（秒为单位）= 文件大小（MB为单位）<br>这样以后大家就能精确的控制输出文件大小了。</p><p>例：有一个1.5小时（5400秒）的影片，希望转换后文件大小刚好为700M<br>计算方法如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">700</span>×<span class="number">8</span>÷<span class="number">5400</span>×<span class="number">1024</span>≈<span class="number">1061</span>Kbps</span><br></pre></td></tr></table></figure><p>意思是只要音频编码率加上视频编码率之和为1061Kb，则1个半小时的影片转换后文件体积大小刚好为700M。</p><p>至于音频编码率和视频编码率具体如何设置，就看选择的编码格式和个人喜好了，只要2者之和为1061即可。如可以设置为视频编码格式H264，视频编码率900 Kbps，音频编码格式AAC，编码率161 Kbps。</p><p>与文件体积大小有关的码率是指的平均码率，因此，不论是使用固定比特一次编码方式还是使用二次（多次）动态编码方式，都是可以保证文件大小的。只有使用基于质量编码的方式的时候，文件大小才不可控制。</p><p>编码格式有很多种，在技术不断进步的情况下，针对不同的用途，产生了各种编码格式。不同编码格式的压缩率不一样，且有各自的特点，有些在低码率情况下能保持较高的画面质量，但在高码率情况下反而画面质量提示不大，有些适合在高码率情况下保持高清晰度画面，但可能在低码率情况下效果不佳。介绍常见的几种。</p><p>RMVB/RM在制定的时候主要考虑的是网络传播，目的在于利用不快的网速传播视觉可以接受的画面质量。因此，RMVB/RM编码格式的特点是较低码率下能获得较好的视频质量。但高码率的情况下反不如其他编码格式。同样是RM/RMVB后缀的文件，其内部编码格式细分还有R8/R9/R10等，但总的来说，上面所说的特点依然是存在的。只是压缩率更高了，因此RMVB没人用在高清编码领域。RMVB追求的是高压缩率，能接受的画面质量，所以经常压缩掉一些不容易注意的细节。初看画面不错，细看就发现画面不锐利，层次不分明，总给人一直模糊的感觉。</p><p>RMVB/RM后缀文件的音频编码部分同样存在这样的情况，声音压缩率很高，但只是能听，不要奢望达到声音动听的境界。</p><p>RMVB的流行，一是因为REAL的这种格式适合低速网络的传播，能以较小的文件体积获得可以接受的画面质量。二是随着RMVB的使用，开始出现功能比较完善的转码软件和解决方案，方便了视频爱好者，扩大了影片来源。但随着网速越来越快，H264等更好的编码器出现，同时也因为RMVB不适合高清视频制作，且若对于其他硬件厂家希望支持RMVB/RM格式，就必须向REAL公司支付相当昂贵的专利费，导致很多硬件厂商放弃了对RMVB文件的支持。RMVB的文件已经不是以前那种完全压倒性的优势了。</p><p>现在网络传播的视频文件已经很多都是AVI、MKV、MP4、3GP等后缀了。其中MKV等多用于高清视频文件，MP4、3GP等多用于手机和便携式设备等领域，AVI则使用范围更加广，不但在高清晰度视频文件中有AVI文件，在便携式设备领域也有AVI使用。</p><p>VCD用的视频编码格式为MPEG1，DVD则为MPEG2，VCD和DVD都主要用于家庭影音播放，而且一般来说，VCD用MPEG1编码为固定码率编码。DVD可以支持动态码率的MPEG2编码。<br>为了能保证激烈变化画面时的清晰度，其默认编码率都较高，VCD标准编码率1152Kbps，DVD开放些，根据影片播放时间，常设置为5000 Kbps -8000 Kbps之间，在不浪费DVD碟容量的前提下尽可能的使用较高的码率获得更高的清晰度。MPEG1和MPEG2在超低码率情况效果不佳，且过分提高码率，画面效果带来的提示也不明显。而MKV则以H.264编码，用于高清视频，1080p的画面达到了30Mbps的码率。</p><p>当然不经过压缩文件的计算公式又不同：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">声音为，数据量（位/秒）= (采样频率（Hz）*采样位数（bit）*声道数) </span><br><span class="line">其中，单声道的声道数为<span class="number">1</span>，立体声的声道数为<span class="number">2</span>。 </span><br><span class="line">数据量*时间/<span class="number">8</span>＝文件总字节 </span><br><span class="line">例如CD即为未经压缩的音频文件，采样<span class="number">44.1</span>k,<span class="number">16</span>位,双声道。 </span><br><span class="line">数据量＝<span class="number">44.1</span>*<span class="number">16</span>*<span class="number">2</span>=<span class="number">1411</span>kb/<span class="number">1024</span>=<span class="number">1.38</span>Mb,一般的MP3压缩后为<span class="number">128</span>kbps </span><br><span class="line">如果以一张CD放一个小时计算的话，CD总量＝<span class="number">1.38</span>*<span class="number">3600</span>/<span class="number">8</span>=<span class="number">621</span>MB,当然CD大约放<span class="number">1</span>小时多点,顶多也就<span class="number">700</span>MB。</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">图象应该是，数据量（位/秒）= (画面尺寸*彩色位数（bit）*帧数) </span><br><span class="line">数据量*时间/<span class="number">8</span>＝文件总字节 </span><br><span class="line">例如<span class="number">2</span>分钟,<span class="number">25</span>帧/秒,<span class="number">640</span>×<span class="number">480</span>分辨率,<span class="number">24</span>位真彩色数字视频的不压缩的数据量约为，数据量＝<span class="number">640</span>x480x24*<span class="number">25</span>=<span class="number">184320</span>Kb=<span class="number">180</span>Mb,而VCD、MKV标准编码率(加上音频)分别为<span class="number">1152</span>Kbps和<span class="number">30</span>Mbps(<span class="number">1080</span>p高清) </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>分钟文件字节＝<span class="number">180</span>Mbx120/<span class="number">8</span>=<span class="number">2700000</span>KB=<span class="number">2636.71875</span>MB＝<span class="number">2.57</span>GB，而压缩后一部<span class="number">90</span>分钟高质量DVD电影可以达到<span class="number">9</span>GB。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
            <tag> 码率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音视频相关-基础概念</title>
      <link href="/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/04/22/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分基础概念"><a class="markdownIt-Anchor" href="#第一部分基础概念"></a> 第一部分：基础概念</h3><h5 id="媒体"><a class="markdownIt-Anchor" href="#媒体"></a> 媒体</h5><p>媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。<br>多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象</p><h5 id="多媒体技术"><a class="markdownIt-Anchor" href="#多媒体技术"></a> 多媒体技术</h5><p>多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。</p><a id="more"></a><h5 id="流媒体"><a class="markdownIt-Anchor" href="#流媒体"></a> 流媒体</h5><p>流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。</p><h5 id="多媒体文件"><a class="markdownIt-Anchor" href="#多媒体文件"></a> 多媒体文件</h5><p>多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；</p><h5 id="媒体编码"><a class="markdownIt-Anchor" href="#媒体编码"></a> 媒体编码</h5><p>媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。 转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式</p><h5 id="视频"><a class="markdownIt-Anchor" href="#视频"></a> 视频</h5><p>视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频</p><h5 id="音频"><a class="markdownIt-Anchor" href="#音频"></a> 音频</h5><p>音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音</p><h3 id="第二部分视频文件格式"><a class="markdownIt-Anchor" href="#第二部分视频文件格式"></a> 第二部分：视频文件格式</h3><h4 id="基本视频概念讲解"><a class="markdownIt-Anchor" href="#基本视频概念讲解"></a> 基本视频概念讲解</h4><h5 id="码率"><a class="markdownIt-Anchor" href="#码率"></a> 码率</h5><p>码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质</p><h5 id="帧"><a class="markdownIt-Anchor" href="#帧"></a> 帧</h5><p>帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。 一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。</p><h5 id="帧率"><a class="markdownIt-Anchor" href="#帧率"></a> 帧率</h5><p>帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过更新率的帧率就浪费掉了。</p><h5 id="关键帧"><a class="markdownIt-Anchor" href="#关键帧"></a> 关键帧</h5><p>关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键帧。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到<br>2秒增加一个关键帧。</p><h4 id="目前我们经常见的视频格式无非就是两大类"><a class="markdownIt-Anchor" href="#目前我们经常见的视频格式无非就是两大类"></a> 目前我们经常见的视频格式无非就是两大类：</h4><p>1、影像格式（Video）<br>2、流媒体格式（Stream Video）</p><h4 id="在影像格式中还可以根据出处划分为三大种"><a class="markdownIt-Anchor" href="#在影像格式中还可以根据出处划分为三大种"></a> 在影像格式中还可以根据出处划分为三大种：</h4><ol><li>AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式</li><li>MOV格式：这是由苹果（Apple）公司提出的一种视频格式</li><li>MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。</li></ol><h4 id="在流媒体格式中同样还可以划分为三种"><a class="markdownIt-Anchor" href="#在流媒体格式中同样还可以划分为三种"></a> 在流媒体格式中同样还可以划分为三种：</h4><ol><li>RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。</li><li>MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。</li><li>ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。</li><li>FLV</li></ol><h4 id="具体视频文件格式详解"><a class="markdownIt-Anchor" href="#具体视频文件格式详解"></a> 具体视频文件格式详解：</h4><h5 id="mpegmpgdat"><a class="markdownIt-Anchor" href="#mpegmpgdat"></a> *. MPEG/.MPG/.DAT</h5><p>MPEG也是Motion Picture Experts Group 的缩写。这类格式包括了 MPEG-1, MPEG-2 和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在 VCD 的制作和一些视频片段下载的网络应用上面，大部分的 VCD 都是用 MPEG1 格式压缩的 ( 刻录软件自动将MPEG1转为 .DAT格式 ) ，使用 MPEG-1 的压缩算法，可以把一部 120 分钟长的电影压缩到 1.2 GB 左右大小。MPEG-2 则是应用在 DVD 的制作，同时在一些 HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用 MPEG-2 的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB 的大小（MPEG2的图像质量MPEG-1 与其无法比拟的）。</p><h5 id="avi"><a class="markdownIt-Anchor" href="#avi"></a> *.AVI</h5><p>它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的×××来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有 Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。</p><h5 id="rarmram"><a class="markdownIt-Anchor" href="#rarmram"></a> *.RA/RM/RAM</h5><p>*.RM， Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash （Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO （RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用 56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。</p><h5 id="mov"><a class="markdownIt-Anchor" href="#mov"></a> *.MOV</h5><p>MOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列, 在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有 4 个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。</p><h5 id="asf"><a class="markdownIt-Anchor" href="#asf"></a> *.ASF</h5><p>ASF (Advanced Streaming format高级流格式)。ASF 是 MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了 MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为 ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比 VCD 差一点点并不出奇，但比同是视频“流”格式的 RAM 格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。</p><h5 id="wmv"><a class="markdownIt-Anchor" href="#wmv"></a> *.WMV</h5><p>WMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。</p><h5 id="navi"><a class="markdownIt-Anchor" href="#navi"></a> *. NAVI</h5><p>如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是 New AVI 的缩写，是一个名为 Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的 AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的 ASF 格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型 ASF 格式。</p><h5 id="flv"><a class="markdownIt-Anchor" href="#flv"></a> *.FLV</h5><p>FLV 是 FLASH VIDEO 的简称，是由Macromedia 公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson 公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash 中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。</p><h4 id="视频文件转换"><a class="markdownIt-Anchor" href="#视频文件转换"></a> 视频文件转换：</h4><p>比较常见的视频格式转化有：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">RM→ASF </span><br><span class="line"><span class="built_in">AVI</span>→RMVB </span><br><span class="line">dat--&gt;divx </span><br><span class="line">mpg--&gt;divx </span><br><span class="line">vcd--&gt;rm </span><br><span class="line">dat--&gt;rm </span><br><span class="line">mpg,dat、avi、mov--&gt;rm </span><br><span class="line">*--&gt;FLV </span><br><span class="line">最近视频博客的兴起，导致了flv的快速发展</span><br><span class="line"></span><br><span class="line"><span class="built_in">AVI</span>→<span class="built_in">MPEG</span>(<span class="built_in">MPEG</span>－<span class="number">1</span>) </span><br><span class="line">例如有纪念性的家庭录影带，可以事先转换成<span class="built_in">AVI</span>格式，再用软件将它转换成<span class="built_in">MPEG</span>－<span class="number">1</span>格式，然后用刻录器将<span class="built_in">MPEG</span>－<span class="number">1</span>格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 </span><br><span class="line"><span class="built_in">MPEG</span>(<span class="built_in">MPEG</span>－<span class="number">1</span>)→<span class="built_in">AVI</span> </span><br><span class="line">从<span class="built_in">MPEG</span>到<span class="built_in">AVI</span>文件之间的转换，为磁盘节省空间。</span><br><span class="line"><span class="built_in">MPEG</span>(<span class="built_in">MPEG</span>－<span class="number">1</span>)→ASF </span><br><span class="line">将vcd文件转码后实现VOD点播和直播。</span><br><span class="line"></span><br><span class="line">ASF→<span class="built_in">MPEG</span>(<span class="built_in">MPEG</span>－<span class="number">1</span>) </span><br><span class="line">由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上<span class="built_in">MPEG</span>－<span class="number">1</span>，所以转换之前，请三思而后行。 </span><br><span class="line"></span><br><span class="line">DVD(<span class="built_in">MPEG</span>－<span class="number">2</span>)→VCD (<span class="built_in">MPEG</span>－<span class="number">1</span>) </span><br><span class="line">由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成<span class="built_in">MPEG</span>－<span class="number">1</span>格式的视频文件，留在硬盘上观看或是刻成VCD光盘。 </span><br><span class="line">dat/mpg-&gt;mp3 </span><br><span class="line">CD--&gt;wav,mp3,wma </span><br><span class="line">rm--&gt;mp3 </span><br><span class="line">mp3--&gt;wma</span><br></pre></td></tr></table></figure><p>以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。</p><p>比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需 要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则：</p><p>1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD-&gt;RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。</p><p>2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。</p><h4 id="音视频压缩编码标准"><a class="markdownIt-Anchor" href="#音视频压缩编码标准"></a> 音视频压缩编码标准：</h4><p>多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有：</p><ol><li>MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC；<br>音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的</li><li>H.26X系列：包括H261、H262、H263、H263+、H263++、H264</li><li>微软windows media系列： 视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10 ；音频编码有Windows Media audeo v1/v2/7/8/9</li><li>Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10 ；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等</li><li>QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264 ；音频编码有QDesign Music 2、Apple MPEG-4 AAC</li><li>其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式<br>各视频编码的应用场合简要：<a href="http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx" target="_blank" rel="noopener">http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx</a>这里讲的挺详细的</li></ol><hr><ol><li>Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1；</li><li>在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。</li><li>MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。</li><li>MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右</li><li>Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准）</li><li>H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。</li><li>H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是&quot;ITU-T建议H.262&quot;和&quot;ISO/IEC 13818-2&quot;。这两个标准在所有的文字叙述上都是相同的。</li><li>H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的</li><li>H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。</li><li>H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。</li><li>H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。</li><li>Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。</li><li>Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。</li><li>Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少</li><li>Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。</li><li>RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。</li><li>RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。</li><li>RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。</li><li>RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。</li><li>Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。</li><li>Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。</li><li>Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。</li><li>Ogg 是 <a href="http://Xiph.org" target="_blank" rel="noopener">Xiph.org</a> 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。</li><li>On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。</li><li>Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。</li><li>M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。</li></ol><h4 id="各音频编码的应用场合简要"><a class="markdownIt-Anchor" href="#各音频编码的应用场合简要"></a> 各音频编码的应用场合简要：</h4><ol><li>MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps</li><li>MPEG Audio Layer 2典型数据压缩率是1：4—1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码</li><li>MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10—1：12，即每个立体声信号为128到112 kbps</li><li>MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio 不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。</li><li>MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布</li><li>杜比数字AC-3技术也就是5.1声道技术</li><li>Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。</li><li>Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化</li><li>Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。</li><li>RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。</li><li>RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。</li><li>RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。</li><li>RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。</li><li>QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。</li><li>Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。</li></ol><h4 id="四种主流的视频压缩编码标准"><a class="markdownIt-Anchor" href="#四种主流的视频压缩编码标准"></a> 四种主流的视频压缩编码标准：</h4><h5 id="1-windows-media-video-9"><a class="markdownIt-Anchor" href="#1-windows-media-video-9"></a> 1、Windows Media Video 9</h5><p>相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　<br>官方网站：<a href="http://www.microsoft.com" target="_blank" rel="noopener">http://www.microsoft.com</a></p><h5 id="2-real-video-9"><a class="markdownIt-Anchor" href="#2-real-video-9"></a> 2、Real Video 9</h5><p>玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。<br>官方网址：<a href="http://www.realnetworks.com" target="_blank" rel="noopener">http://www.realnetworks.com</a></p><h5 id="3-divx"><a class="markdownIt-Anchor" href="#3-divx"></a> 3、DivX</h5><p>历史介绍：<br>ISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。<br>1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。<br>DivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。<br>看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。<br>接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码–XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。<br>DivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。<br>官方网站：<a href="http://www.divx.com" target="_blank" rel="noopener">http://www.divx.com</a></p><h5 id="4-koepis-xvid-codec"><a class="markdownIt-Anchor" href="#4-koepis-xvid-codec"></a> 4、Koepi’s XviD Codec</h5><p>相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。<br>官方网站：<a href="http://roeder.goe.net/~koepi" target="_blank" rel="noopener">http://roeder.goe.net/~koepi</a></p><h4 id="视频压缩基本概念"><a class="markdownIt-Anchor" href="#视频压缩基本概念"></a> 视频压缩基本概念：</h4><h5 id="一-有损和无损压缩"><a class="markdownIt-Anchor" href="#一-有损和无损压缩"></a> 一、有损和无损压缩：</h5><p>在视频压缩中有损（Lossy ）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。</p><h5 id="二-帧内和帧间压缩"><a class="markdownIt-Anchor" href="#二-帧内和帧间压缩"></a> 二、帧内和帧间压缩：</h5><p>帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。<br>采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p><h5 id="三-对称和不对称编码"><a class="markdownIt-Anchor" href="#三-对称和不对称编码"></a> 三、对称和不对称编码：</h5><p>对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。</p><h3 id="第三部分音频文件格式"><a class="markdownIt-Anchor" href="#第三部分音频文件格式"></a> 第三部分：音频文件格式</h3><p>一些音视频的参数含义:</p><p><strong>声道</strong>：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍：</p><p><strong>1.单声道</strong>：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。</p><p><strong>2.立体声</strong>：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。</p><p><strong>3.准立体声</strong>：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。</p><p><strong>4.四声道环绕</strong>：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。</p><p><strong>5. 5.1声道</strong> 5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。</p><h5 id="一wma"><a class="markdownIt-Anchor" href="#一wma"></a> 一.WMA</h5><p>WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。<br>优点<br>WMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。<br>缺点<br>在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。</p><h5 id="二vqf"><a class="markdownIt-Anchor" href="#二vqf"></a> 二.VQF</h5><p>VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。<br>但是VQF不支持&quot;流&quot;，这可能也是为什么现在它完全被WMA压下去的一个主要原因.</p><h5 id="三mp3"><a class="markdownIt-Anchor" href="#三mp3"></a> 三.MP3</h5><p>MP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用 MPEG Audio Layer 3 的技术，将音乐以1:10 甚至 1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　<br>MP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步; 其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE 和 DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS, 在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.</p><h5 id="四mp3pro"><a class="markdownIt-Anchor" href="#四mp3pro"></a> 四.MP3PRO</h5><p>MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication 频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO.</p><h5 id="五ogg"><a class="markdownIt-Anchor" href="#五ogg"></a> 五.OGG</h5><p>OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因<br>在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　<br>Ogg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。<br>　　OGG Vorbis这种编码也远比90年×××发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。<br>　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。</p><h5 id="六-mpc"><a class="markdownIt-Anchor" href="#六-mpc"></a> 六. MPC</h5><p>MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。<br>MPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了<br>较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了. 但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.</p><h5 id="七atrac"><a class="markdownIt-Anchor" href="#七atrac"></a> 七.ATRAC</h5><p>ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。<br>ATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。<br>ATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。<br>.</p><h5 id="八-ape"><a class="markdownIt-Anchor" href="#八-ape"></a> 八. APE</h5><p>APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey’‘s Audio这个软件进行“瘦身”压缩为 APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过 Monkey’‘s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”， Monkey’‘s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的 APE音频文件是可以直接被播放的。 Monkey’'s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。<br>和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了 Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.</p><h5 id="九-wav"><a class="markdownIt-Anchor" href="#九-wav"></a> 九. WAV</h5><p>WAV是录音时用的标准的windows文件格式，文件的扩展名为“ .wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。<br>WAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。<br>　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟 44khz 采样率的WAV文件就会占用10M硬盘空间！<br>它通常作为制作高质量音乐的中间体</p><h5 id="十rm"><a class="markdownIt-Anchor" href="#十rm"></a> 十.RM</h5><p>Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。<br>RM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。<br>RM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。</p>]]></content>
      
      
      <categories>
          
          <category> 音视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++-OSI参考模型</title>
      <link href="/2019/04/16/C-OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/04/16/C-OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="osi参考模型"><a class="markdownIt-Anchor" href="#osi参考模型"></a> OSI参考模型</h3><p>开发式系统互联（Open System Interconnection）简称OSI, 是国际标准化组织(ISO)为了实现计算机网络的标准化而颁布的参考模型。OSI 参考模型采用分层的划分原则，将网络中的数据传输划分为7层，每一层使用下层的服务，并向上层提供服务。</p><a id="more"></a><p>OSI参考模型</p><table><thead><tr><th style="text-align:center">层 次</th><th style="text-align:center">名 称</th><th style="text-align:center">功 能 描 述</th></tr></thead><tbody><tr><td style="text-align:center">第7层</td><td style="text-align:center">应用层（Application）</td><td style="text-align:center">应用层负责网络中应用程序与网络操作系统之间的联系。例如，建立和结束使用者之间的连接，管理建立相互连接使用的应用资源</td></tr><tr><td style="text-align:center">第6层</td><td style="text-align:center">表示层（Presentation）</td><td style="text-align:center">表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，并负责设备之间所需要的字符集和数据的转换</td></tr><tr><td style="text-align:center">第5层</td><td style="text-align:center">会话层（Session）</td><td style="text-align:center">会话层是用户应用程序与网络层的接口，它能够建立与其他设备的连接，即会话。并且它能够对会话进行有效的管理</td></tr><tr><td style="text-align:center">第4层</td><td style="text-align:center">传输层（Tansport）</td><td style="text-align:center">传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层</td></tr><tr><td style="text-align:center">第3层</td><td style="text-align:center">网络层（Network）</td><td style="text-align:center">网络层能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备</td></tr><tr><td style="text-align:center">第2层</td><td style="text-align:center">数据链路层（Data Link）</td><td style="text-align:center">数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过物理介质传输数据的方法</td></tr><tr><td style="text-align:center">第1层</td><td style="text-align:center">物理层（Physical）</td><td style="text-align:center">利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度</td></tr></tbody></table><p>OSI参考模型的建立不仅创建了通信设备之间的物理通道，还规划了各层之间的功能，为标准化组合和生产厂家定制协议提供了基本原则，它有助于用户了解复杂的协议，例如TCP/IP、X.25协议等。用户可以将这些协议与OSI参考模型对比，进而了解这些协议的工作原理。</p><hr><h3 id="tcpip-参考模型"><a class="markdownIt-Anchor" href="#tcpip-参考模型"></a> TCP/IP 参考模型</h3><p>TCP/IP(Transmission Control Protocal/Internet Protocal, 传输控制协议/网际协议)协议是互联网上最流行的协议，但它并不完全符合 OSI 的7层参考模型。传统的开放式系统互联参考模型，是一种通信协议的 7 层抽象的参考模型，其中每一层执行某一特定任务，该模型的目的是使各种硬件在相同的层次上相互通信，这7层是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。而TCP/IP通信协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为：</p><p>☑ 应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。</p><p>☑ 传输层：在此层中提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据包协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中。这一层负责传送数据，并且确定数据已被送达并接收。</p><p>☑ 互联网络层： 负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网络协议（IP）。</p><p>☑ 网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++流操作的控制</title>
      <link href="/2019/04/16/C-%E6%B5%81%E6%93%8D%E4%BD%9C%E7%9A%84%E6%8E%A7%E5%88%B6/"/>
      <url>/2019/04/16/C-%E6%B5%81%E6%93%8D%E4%BD%9C%E7%9A%84%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在头文件 <code>iomainip.h</code> 中定义了一些控制流输出格式的函数，默认情况下整型数按十进制形式输出，也可以通过 hex 将其设置为十六进制输出。</p><p>流操作的控制具体函数如下。</p><a id="more"></a><h5 id="1-long-setflong-f"><a class="markdownIt-Anchor" href="#1-long-setflong-f"></a> (1) long setf(long f);</h5><p>根据参数 f 设置相应的格式标志，返回此前的设置。该参数 f 所对应的实参为无名枚举类型中的枚举常量(又称格式化常量)，可以同时使用一个或多个常量，每两个常量之间要用按位或操作符连接。<br>如需要左对齐输出，并使数值中的字母大写时，则调用该函数的实参为 <code>ios::left|ios::uppercase</code>。</p><h5 id="2-long-unsetflong-f"><a class="markdownIt-Anchor" href="#2-long-unsetflong-f"></a> (2) long unsetf(long f);</h5><p>根据参数 f 清除相应的格式化标志，返回此前的设置。 如果要清除此前左对齐输出设置，恢复默认的右对齐输出设置，则调用该函数的实参为 <code>ios::left</code>。</p><h5 id="3-int-width"><a class="markdownIt-Anchor" href="#3-int-width"></a> (3) int width();</h5><p>返回当前的输出域宽。若返回数值为0，则表明没为刚才输出的数值设置输出域宽。输出域宽是指输出的值在流中所占有的字节数。</p><h5 id="4-int-widthint-w"><a class="markdownIt-Anchor" href="#4-int-widthint-w"></a> (4) int width(int w);</h5><p>设置下一个数据值的输出域宽为w, 返回为输出上一个数据值所规定的域宽，若无规定则返回0.注意，此设置不是一直有效，而只是对下一个输出数据有效。</p><h5 id="5-setiosflagslong-f"><a class="markdownIt-Anchor" href="#5-setiosflagslong-f"></a> (5) setiosflags(long f);</h5><p>设置f所对应的格式标志，功能与setf(long f)成员函数相同，当然，在输出该操作符后返回的是一个输出流。如果采用标准输出流 cout 输出它时，则返回 cout。输出每个操作符后都是如此，即返回输出它的流，以便向流中继续插入下一个数据。</p><h5 id="6-resetiosflagslong-f"><a class="markdownIt-Anchor" href="#6-resetiosflagslong-f"></a> (6) resetiosflags(long f);</h5><p>清除 f 所对应的格式化标志，功能与 unsetf(long f)成员函数相同。输出后返回一个流。</p><h5 id="7-setfillint-c"><a class="markdownIt-Anchor" href="#7-setfillint-c"></a> (7) setfill(int c);</h5><p>设置填充字符的 ASCⅡ 码为 c 的字符。</p><h5 id="8-setprecisionint-n"><a class="markdownIt-Anchor" href="#8-setprecisionint-n"></a> (8) setprecision(int n);</h5><p>设置浮点数的输出精度为 n 。</p><h5 id="9-setwint-w"><a class="markdownIt-Anchor" href="#9-setwint-w"></a> (9) setw(int w);</h5><p>设置下一个数据的输出域宽为 w 。</p><p>数据输入/输出的格式控制还有更简便的形式，就是使用头文件 iomainip.h 中提供的操作符。使用这些操作符不需要调用成员函数，只要把它们作为插入操作符 “” 的输出对象即可。</p><p>☑ dec: 转换为按十进制输出整数，是默认的输出格式。</p><p>☑ oct: 转换为按八进制输出整数。</p><p>☑ hex: 转换为按十六进制输出整数。</p><p>☑ ws: 从输出流中读取空白字符。</p><p>☑ endl: 输出换行符\n 并刷新流。刷新流是指把流缓冲区的内容立即写入到对应的物理设备上。</p><p>☑ ends: 输出一个空字符\0。</p><p>☑ flush: 只刷新一个输出流。</p><p>例如 (控制打印程序)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">123.456789012345</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setprecision(<span class="number">9</span>) &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setprecision(<span class="number">6</span>); <span class="comment">// 恢复默认格式（精度为6）</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">8</span>) &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; setprecision(<span class="number">4</span>) &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例如 (整数输出的例子)：</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomainip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">123456</span>;<span class="comment">// 对b赋初值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 输出: 123456</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出：1e240</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::uppercase) &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 输出：1E240</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; b &lt;&lt; <span class="string">','</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出：    123456， 123456</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setfill(<span class="string">'*'</span>) &lt;&lt; setw(<span class="number">10</span>) &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出： **** 123456</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; setiosflags(ios::showpos) &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出：+123456</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如(输出大写的十六进制)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0x2F</span>,j=<span class="number">255</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; hex &lt;&lt; setiosflags(ios::uppercase)&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如(控制输出精度)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">3.1415</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x="</span>;</span><br><span class="line"><span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>.setf(ios::left);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x="</span>;</span><br><span class="line"><span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"y="</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>.fill(<span class="string">'*'</span>);</span><br><span class="line"><span class="built_in">cout</span>.precision(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span>.setf(ios:showpos);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x="</span>;</span><br><span class="line"><span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"y="</span>;</span><br><span class="line"><span class="built_in">cout</span>.width(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如（流输出小数点控制）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> x = <span class="number">20</span>, y = <span class="number">-400</span>;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"><span class="built_in">cout</span>.setf(ios::showpoint); <span class="comment">// 强制显示小数点和无效0</span></span><br><span class="line">cout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"><span class="built_in">cout</span>.unsetf(ios::showpoint); </span><br><span class="line"><span class="built_in">cout</span>.setf(ios::scientific); <span class="comment">// 设置按科学表示法输出</span></span><br><span class="line">cout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"><span class="built_in">cout</span>.setf(ios::fixed); <span class="comment">// 设置按定点表示法输出</span></span><br><span class="line">cout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++整型变量范围</title>
      <link href="/2019/04/16/C-%E6%95%B4%E5%9E%8B%E5%8F%98%E9%87%8F%E8%8C%83%E5%9B%B4/"/>
      <url>/2019/04/16/C-%E6%95%B4%E5%9E%8B%E5%8F%98%E9%87%8F%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<p>整型变量范围</p><table><thead><tr><th style="text-align:center">关键字</th><th style="text-align:center">类型</th><th style="text-align:center">数的范围</th><th style="text-align:center">字节数</th></tr></thead><tbody><tr><td style="text-align:center">short</td><td style="text-align:center">短整型</td><td style="text-align:center">-32768<sub>32767,即-2&lt;sup&gt;15&lt;/sup&gt;</sub>2<sup>15</sup>-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">unsigned short</td><td style="text-align:center">无符号短整型</td><td style="text-align:center">0<sub>65535,即0</sub>2<sup>16</sup>-1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">整型</td><td style="text-align:center">-2147483648<sub>2147483647,即-2&lt;sup&gt;31&lt;/sup&gt;</sub>2<sup>31</sup>-1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">unsigned int</td><td style="text-align:center">无符号整型</td><td style="text-align:center">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">long int</td><td style="text-align:center">长整型</td><td style="text-align:center">-2147483648-2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">unsigned long</td><td style="text-align:center">无符号长整型</td><td style="text-align:center">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td><td style="text-align:center">4</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++常用的程序库</title>
      <link href="/2019/03/22/C-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BA%93/"/>
      <url>/2019/03/22/C-%E5%B8%B8%E7%94%A8%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<ul><li>合适的程序库，可以带来方便。</li><li>代码有深度且可读性高。</li></ul><a id="more"></a><h4 id="强烈推荐的库"><a class="markdownIt-Anchor" href="#强烈推荐的库"></a> 强烈推荐的库</h4><p>printf 不好用，ostream 也不好用，format 好用 <a href="https://github.com/fmtlib/fmt" target="_blank" rel="noopener">fmtlib/fmt</a></p><p>超高效级的 json 解析 <a href="https://github.com/Tencent/rapidjson" target="_blank" rel="noopener">Tencent/rapidjson</a></p><h4 id="其他库"><a class="markdownIt-Anchor" href="#其他库"></a> 其他库</h4><p>3D模型解析 <a href="https://github.com/assimp/assimp" target="_blank" rel="noopener">assimp/assimp</a></p><p>物理模拟 <a href="https://github.com/bulletphysics/bullet3" target="_blank" rel="noopener">bulletphysics/bullet3</a></p><p>渲染中间层 <a href="https://github.com/bkaradzic/bgfx" target="_blank" rel="noopener">bkaradzic/bgfx</a></p><p>3D灵感宣泄场所 <a href="https://github.com/cinder/Cinder" target="_blank" rel="noopener">cinder/Cinder</a></p><p>命令行帮助既是命令行解析 <a href="https://github.com/docopt/docopt.cpp" target="_blank" rel="noopener">https://github.com/docopt/docopt.cpp</a></p><p>3D 数学运算 <a href="https://link.zhihu.com/?target=https%3A//github.com/g-truc/glm" target="_blank" rel="noopener">g-truc/glm</a></p><p>拿来就能用的 UI <a href="https://github.com/ocornut/imgui" target="_blank" rel="noopener">ocornut/imgui</a></p><p>json 结构用在 C++ 里面就像在 JS 里面一样自然 <a href="https://github.com/nlohmann/json" target="_blank" rel="noopener">nlohmann/json</a></p><p>用过都知道它的好的性能分析工具 <a href="https://github.com/jonasmr/microprofile" target="_blank" rel="noopener">jonasmr/microprofile</a></p><p>又快又不折腾的 xml 解析 <a href="https://github.com/zeux/pugixml" target="_blank" rel="noopener">zeux/pugixml</a></p><p>专注寻路 <a href="https://github.com/recastnavigation/recastnavigation" target="_blank" rel="noopener">recastnavigation/recastnavigation</a></p><p>什么都能放到头文件中 <a href="https://github.com/nothings/stb" target="_blank" rel="noopener">nothings/stb</a></p><p>一键生成 C/C++ 对各种其他语言的接口 <a href="https://github.com/swig/swig" target="_blank" rel="noopener">swig/swig</a></p><p>最快的哈希算法 <a href="https://github.com/Cyan4973/xxHash" target="_blank" rel="noopener">Cyan4973/xxHash</a></p><p>包含大量计算几何算法的 <a href="https://www.geometrictools.com/" target="_blank" rel="noopener">Geometric Tools</a></p><p>包含最经典渲染算法的 <a href="https://github.com/mmp/pbrt-v3" target="_blank" rel="noopener">mmp/pbrt-v3</a></p><p>又小又快又方便的单元测试库 <a href="https://github.com/onqtam/doctest" target="_blank" rel="noopener">onqtam/doctest</a></p><p>高精度浮点数运算库 <a href="https://bellard.org/libbf/" target="_blank" rel="noopener">LibBF Library</a></p><h4 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h4><ul><li><a href="http://threads.sourceforge.net/" target="_blank" rel="noopener">C++ Threads</a>：这个库的目标是给程序员提供易于使用的类，这些类被继承以提供在Linux环境中很难看到的大量的线程方面的功能。</li><li><a href="http://zthread.sourceforge.net/" target="_blank" rel="noopener">ZThreads</a>：跨平台的C++线程和同步库。</li></ul><h4 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h4><ul><li><a href="http://www.utilitycode.com/str/" target="_blank" rel="noopener">C++ Str Library</a>：操作字符串和字符的库，支持Windows和支持gcc的多种平台。</li><li><a href="http://cttl.sourceforge.net/" target="_blank" rel="noopener">Common Text Transformation Library</a>：解析和修改STL字符串的库。</li><li><a href="http://research.microsoft.com/projects/greta/" target="_blank" rel="noopener">GRETA</a>：由微软研究院的研究人员开发的处理正则表达式的库，在小型匹配的情况下有非常优秀的表现。</li></ul><h4 id="c语言开源项目"><a class="markdownIt-Anchor" href="#c语言开源项目"></a> C语言开源项目：</h4><ul><li><p><a href="http://home.tiscali.cz/~cz210552/webbench.html" target="_blank" rel="noopener">Webbench</a>：在Linux下使用的非常简单的网站压测工具，使用C语言编写, 代码超级简洁，源码加起来几乎不到600行。</p></li><li><p><a href="http://sourceforge.net/projects/tinyhttpd/" target="_blank" rel="noopener">Tinyhttpd</a>：超轻量型Http Server，C语言开发，附带简单的Client，可通过阅读这段代码理解一个 Http Server 的本质。</p></li><li><p><a href="http://sourceforge.net/projects/cjson/" target="_blank" rel="noopener">cJSON</a>：C语言中的一个JSON编解码器，非常轻量级，速度非常理想。结构简单易懂，可以作为一个非常好的C语言项目进行学习。</p></li><li><p><a href="http://code.google.com/p/cmockery/downloads/list" target="_blank" rel="noopener">CMockery</a>：Google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。</p></li><li><p><a href="http://software.schmorp.de/pkg/libev.html" target="_blank" rel="noopener">Libev</a>：基于Reactor模式，效率较高，并且代码精简，是学习事件驱动编程的很好的资源。</p></li><li><p><a href="http://memcached.org/" target="_blank" rel="noopener">Memcached</a>：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。</p></li><li><p><a href="http://www.lua.org/" target="_blank" rel="noopener">Lua</a>：在任何支持ANSI C编译器的平台上都可以轻松编译通过。</p></li><li><p><a href="http://www.sqlite.org/" target="_blank" rel="noopener">SQLite</a>：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。</p></li><li><p><a href="http://www.netbsd.org/" target="_blank" rel="noopener">NETBSD</a>：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统。</p></li><li><p>应用开发框架Qt，优雅的信号与槽，强大的界面类库，跨平台。</p></li><li><p>CEF（Chromium Embedded Framework），使用网页做富客户端的绝佳选择，基于Chromium，可以方便嵌入到你的应用中。类似的还有 Electron 。</p></li><li><p>WebRTC，非常赞的框架，做音视频通信绕不开的。</p></li><li><p>TinyXml，小巧的C++ XML库，几个源文件，直接加入到项目中就可以用</p></li><li><p>Protobuf，Google的，网络通信，非常赞，方便序列化和结构化，流量又小</p></li><li><p>FreeImage，强大好用的图形库</p></li><li><p>Libevent，轻量级的基于事件驱动的高性能的开源网络库</p></li><li><p>ffmpeg，多媒体开发类库的无冕之王</p></li></ul><hr><ul><li>一个非常容易上手的 C++ gui 库 <a href="http://nanapro.org/en-us/" target="_blank" rel="noopener">nana</a></li><li>http客户端curl</li><li>http服务器 crow</li><li>gzip压缩zlib</li><li>json序列化nlohmann/json</li><li>二进制序列化protobuf</li><li>嵌入式数据库sqlite</li><li>日志库glog</li><li>参数解析库gflags</li><li>消息队列zmq</li><li>rpc库brpc</li><li>tcp网络库evpp</li><li>3d仿真osg</li><li>图形图像opencv</li><li>stl,boost,qt就不用说了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++调试技巧</title>
      <link href="/2019/03/21/C-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/03/21/C-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="1-常用调试技巧"><a class="markdownIt-Anchor" href="#1-常用调试技巧"></a> 1、常用调试技巧</h3><ol><li><strong>代码检查</strong>，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。</li></ol><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -pedantic -<span class="keyword">ansi</span> 表示以<span class="keyword">ansi</span>/iso生成所有的警告西信息。</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li><strong>取样法：</strong> 在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。</li></ol><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x :</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。</p><ol start="3"><li><strong>程序的受控执行</strong>。用调试器来控制代码的运行，随时查看这些变量的状态</li></ol><p>为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息向用户显示程序已经执行到的源代码的位置。-g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。</p><h3 id="2-使用gdb进行程序调试"><a class="markdownIt-Anchor" href="#2-使用gdb进行程序调试"></a> 2、使用gdb进行程序调试</h3><h4 id="常用功能命令"><a class="markdownIt-Anchor" href="#常用功能命令"></a> 常用功能命令：</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">g</span>++ -<span class="keyword">g</span> -o <span class="keyword">test</span> <span class="keyword">test</span>.cpp <span class="comment">// 编译时加上-g参数</span></span><br></pre></td></tr></table></figure><ol><li>启动gdb: <code>gdb test</code></li><li>help</li><li>具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行最近执行过的那条命令。单步调试非常有用。</li><li>quit: 退出</li><li>run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。</li><li>backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。</li><li>print：run 后检查变量，注意变量的生命期。</li><li>打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。</li><li>设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，end，display，disable breakpoint number，clear，commands breakpointNumber.</li><li>设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。</li></ol><h3 id="3-valgrind-内存调试"><a class="markdownIt-Anchor" href="#3-valgrind-内存调试"></a> 3、valgrind 内存调试</h3><p>动态内存分配很容易出现程序漏洞，必须清楚自己分配的每一块内存，而且要确定没有使用已经释放的内存块，非常重要。内存调试的工具有很多，这里使用的是valgrind工具。在centos 7中直接使用 yum install valgrind 安装。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *ptr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>];</span><br><span class="line">    ptr[<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] ptr;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面简单的代码编译运行不会发生错误，但是实际上发生了很严重的内存问题。ptr[3]访问越界，std::cout &lt;&lt;ptr[i]，读已经释放过的内存。</p><p><strong>通过valgrind工具可以检查出来：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[xgwang@localhost Desktop]$ g++ -g -o test2 test2.cpp</span><br><span class="line"></span><br><span class="line">[xgwang@localhost Desktop]$ valgrind ./test2</span><br><span class="line"></span><br><span class="line">==21739== Memcheck, a memory error detector</span><br><span class="line">==21739== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</span><br><span class="line">==21739== Using Valgrind-3.10.0 and LibVEX; rerun <span class="keyword">with</span> -h <span class="keyword">for</span> copyright info</span><br><span class="line">==<span class="number">21739</span>== Command: ./test2</span><br><span class="line">==<span class="number">21739</span>== </span><br><span class="line">==<span class="number">21739</span>== Invalid write <span class="keyword">of</span> <span class="keyword">size</span> <span class="number">4</span></span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">at</span> <span class="number">0x40081E</span>: <span class="keyword">main</span> (test2.cpp:<span class="number">8</span>)</span><br><span class="line">==<span class="number">21739</span>== Address <span class="number">0x5a1504c</span> <span class="keyword">is</span> <span class="number">0</span> <span class="keyword">bytes</span> <span class="keyword">after</span> a <span class="keyword">block</span> <span class="keyword">of</span> <span class="keyword">size</span> <span class="number">12</span> alloc<span class="string">'d</span></span><br><span class="line"><span class="string">==21739== at 0x4C2A7AA: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class="line"><span class="string">==21739== by 0x400811: main (test2.cpp:7)</span></span><br><span class="line"><span class="string">==21739== </span></span><br><span class="line"><span class="string">==21739== Invalid read of size 4</span></span><br><span class="line"><span class="string">==21739== at 0x40083F: main (test2.cpp:11)</span></span><br><span class="line"><span class="string">==21739== Address 0x5a15044 is 4 bytes inside a block of size 12 free'</span>d</span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">at</span> <span class="number">0x4C2B5E1</span>: <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="built_in">void</span>*) (<span class="keyword">in</span> /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">by</span> <span class="number">0x400836</span>: <span class="keyword">main</span> (test2.cpp:<span class="number">10</span>)</span><br><span class="line">==<span class="number">21739</span>== </span><br><span class="line"><span class="number">0</span>==<span class="number">21739</span>== </span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">HEAP</span> SUMMARY:</span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">in</span> <span class="keyword">use</span> <span class="keyword">at</span> <span class="keyword">exit</span>: <span class="number">0</span> <span class="keyword">bytes</span> <span class="keyword">in</span> <span class="number">0</span> blocks</span><br><span class="line">==<span class="number">21739</span>== total <span class="keyword">heap</span> <span class="keyword">usage</span>: <span class="number">1</span> allocs, <span class="number">1</span> frees, <span class="number">12</span> <span class="keyword">bytes</span> allocated</span><br><span class="line">==<span class="number">21739</span>== </span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">All</span> <span class="keyword">heap</span> blocks were freed <span class="comment">-- no leaks are possible</span></span><br><span class="line">==<span class="number">21739</span>== </span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">For</span> counts <span class="keyword">of</span> detected <span class="keyword">and</span> suppressed <span class="keyword">errors</span>, rerun <span class="keyword">with</span>: -v</span><br><span class="line">==<span class="number">21739</span>== <span class="keyword">ERROR</span> SUMMARY: <span class="number">2</span> <span class="keyword">errors</span> <span class="keyword">from</span> <span class="number">2</span> contexts (suppressed: <span class="number">2</span> <span class="keyword">from</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>转载自：知乎</p><p><a href="https://www.zhihu.com/people/dai-ma-ren-sheng-5" target="_blank" rel="noopener">代码人生</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> debug </tag>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-单向链表</title>
      <link href="/2019/02/21/C%E8%AF%AD%E8%A8%80-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/02/21/C%E8%AF%AD%E8%A8%80-%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="单向链表"><a class="markdownIt-Anchor" href="#单向链表"></a> 单向链表：</h3><p>单向链表的组成包括一个链表头(head)和若干链表元素(node),对链表的基本操作其实就是增、删、改、查。 首先说说单向链表的C语言实现方法</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data; <span class="comment">// 数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="built_in">list</span> *<span class="title">create_list</span><span class="params">()</span> <span class="comment">// 建立一个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(struct <span class="built_in">list</span>), <span class="number">1</span>);<span class="comment">// 在堆中创建一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(struct <span class="built_in">list</span> *ls)</span> <span class="comment">// 循环遍历链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next; <span class="comment">// p指向他对应的下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="built_in">list</span> *<span class="title">insert_list</span><span class="params">(struct <span class="built_in">list</span> *ls, <span class="keyword">int</span> n, <span class="keyword">int</span> data)</span> <span class="comment">// 在指定位置插入元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; n--)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// n的位置大于链表节点数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">node</span> = <span class="title">create_list</span>();</span><span class="comment">//建立新的节点</span></span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = node;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete_list</span><span class="params">(struct <span class="built_in">list</span> *ls, <span class="keyword">int</span> n)</span> <span class="comment">// 删除指定位置元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">pre</span> = <span class="title">p</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; n--)</span><br><span class="line">&#123;</span><br><span class="line">pre = p;</span><br><span class="line">p= p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//n的位置不合适</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pre-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count_list</span><span class="params">(struct <span class="built_in">list</span> *ls)</span><span class="comment">// 返回链表元素个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_list</span><span class="params">(struct <span class="built_in">list</span> *ls)</span> <span class="comment">// 清空链表，只保留首节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>-&gt;<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">tmp</span> = <span class="title">p</span>;</span></span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">ls-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">empty_list</span><span class="params">(struct <span class="built_in">list</span> *ls)</span><span class="comment">// 返回链表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ls-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="built_in">list</span> *<span class="title">locale_list</span><span class="params">(struct <span class="built_in">list</span> *ls, <span class="keyword">int</span> n)</span><span class="comment">// 返回链表指定位置节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; n--)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="built_in">list</span> *<span class="title">elem_locale</span><span class="params">(struct <span class="built_in">list</span> *ls, <span class="keyword">int</span> data)</span> <span class="comment">// 返回数据域等于data的节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == data)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">elem_pos</span><span class="params">(struct <span class="built_in">list</span> *ls, <span class="keyword">int</span> data)</span> <span class="comment">//返回数据域等于data的节点位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == data)</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct <span class="built_in">list</span> *<span class="title">last_list</span><span class="params">(struct <span class="built_in">list</span> *ls)</span> <span class="comment">//得到链表最后一个节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> = <span class="title">ls</span>;</span></span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_list</span><span class="params">(struct <span class="built_in">list</span> *ls1, struct <span class="built_in">list</span> *ls2)</span><span class="comment">//合并两个链表，结果放入ls1中</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 只合并链表的节点，不合并链表头</span></span><br><span class="line">last_list(ls1)-&gt;next = ls2-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(ls2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(struct <span class="built_in">list</span> *ls)</span> <span class="comment">// 链表的逆置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ls-&gt;next == <span class="literal">NULL</span>) </span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 只有一个首节点，不需要逆置</span></span><br><span class="line"><span class="keyword">if</span>(ls-&gt;next-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 只有两个节点，也不需要逆置</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">last</span> = <span class="title">ls</span>-&gt;<span class="title">next</span>;</span> <span class="comment">//逆置后ls-&gt;next</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">pre</span> = <span class="title">ls</span>;</span> <span class="comment">// 上一个节点的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">cur</span> = <span class="title">ls</span>-&gt;<span class="title">next</span>;</span> <span class="comment">// 当前节点的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">next</span> = <span class="title">NULL</span>;</span> <span class="comment">// 下一个节点的指针</span></span><br><span class="line"><span class="keyword">while</span>(cur)</span><br><span class="line">&#123;</span><br><span class="line">next = cur-&gt;next;</span><br><span class="line">cur-&gt;next = pre;</span><br><span class="line">pre = cur;</span><br><span class="line">cur = next;</span><br><span class="line">&#125;</span><br><span class="line">ls-&gt;next = pre;</span><br><span class="line">last-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">first</span> = <span class="title">create_list</span>();</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">second</span> = <span class="title">create_list</span>();</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">third</span> = <span class="title">create_list</span>();</span></span><br><span class="line"></span><br><span class="line">first-&gt;next = second;</span><br><span class="line">second-&gt;next = third;</span><br><span class="line">third-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">first-&gt;data = <span class="number">1</span>;</span><br><span class="line">second-&gt;data = <span class="number">2</span>;</span><br><span class="line">third-&gt;data = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">traverse(first);</span><br><span class="line">insert_list(first, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">traverse(first);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"count = %d\n"</span>, count_list(first));</span><br><span class="line"></span><br><span class="line">delete_list(first, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">traverse(first);</span><br><span class="line"></span><br><span class="line"><span class="comment">// clear_list(first);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"count = %d\n"</span>, count_list(first));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"locale_list(%d)-&gt;data = %d\n"</span>, <span class="number">2</span>,  locale_list(first, <span class="number">2</span>)-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"last_list-&gt;data = %d\n"</span>, last_list(first)-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">first1</span> = <span class="title">create_list</span>();</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">insert_list(first1, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">traverse(first1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------------------\n"</span>);</span><br><span class="line"><span class="comment">// merge_list(first, first1);</span></span><br><span class="line">traverse(first);</span><br><span class="line">reverse(first);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------逆置------------\n"</span>);</span><br><span class="line">traverse(first);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-排序与查找</title>
      <link href="/2019/02/21/C%E8%AF%AD%E8%A8%80-%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/"/>
      <url>/2019/02/21/C%E8%AF%AD%E8%A8%80-%E6%8E%92%E5%BA%8F%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>排序与查找</p><a id="more"></a><h3 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h3><p>常见排序有：冒泡排序、选择排序、插入排序、快速排序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> n)</span> <span class="comment">// 冒泡排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[j - <span class="number">1</span>] &gt; <span class="built_in">array</span>[j])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;<span class="built_in">array</span>[j - <span class="number">1</span>], &amp;<span class="built_in">array</span>[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找指定范围的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">minkey</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 第一个参数是一个数组，第二个参数是数组的开始下标，第三个参数是数组的终止下标</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回值是最小元素的下标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min = low;</span><br><span class="line"><span class="keyword">int</span> key = <span class="built_in">array</span>[low]; <span class="comment">// 在没有查找最小元素之前，第一个元素是最小值</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = low + <span class="number">1</span>; i &lt; high; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(key &gt; <span class="built_in">array</span>[i])&#123;</span><br><span class="line">key = <span class="built_in">array</span>[i];</span><br><span class="line">min = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个集合里面找最小的数，将最小的数放到集合的最前面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> * <span class="built_in">array</span>, <span class="keyword">int</span> n)</span> <span class="comment">// 选择排序法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = minkey(<span class="built_in">array</span>, i, n);</span><br><span class="line"><span class="keyword">if</span>(i != j) <span class="comment">// 证明范围内的第一个成员不是最小的</span></span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;<span class="built_in">array</span>[i], &amp;<span class="built_in">array</span>[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">32</span>,  <span class="number">45</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">2</span> , <span class="number">5</span>, <span class="number">11</span>,  <span class="number">33</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bubble(array, 10);</span></span><br><span class="line"><span class="comment">// printf("min = %d\n", minkey(array, 0, 10));</span></span><br><span class="line">select(<span class="built_in">array</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">array</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h3><p>常见查找方法有：顺序查找，二分查找。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> base = <span class="built_in">array</span>[low]; <span class="comment">// 用子表的第一个记录做枢轴(分水岭)记录</span></span><br><span class="line"><span class="keyword">while</span>(low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">array</span>[high] &gt;= base &amp;&amp; low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;<span class="built_in">array</span>[high], &amp;<span class="built_in">array</span>[low]);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">array</span>[low] &lt;= base &amp;&amp; low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;<span class="built_in">array</span>[high], &amp;<span class="built_in">array</span>[low]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low &lt; high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> part = partition(<span class="built_in">array</span>, low, high);</span><br><span class="line">quick_sort(<span class="built_in">array</span>, low, part - <span class="number">1</span>);</span><br><span class="line">quick_sort(<span class="built_in">array</span>, part + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">seq</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">// 在指定范围内寻找和key相同的值，找到返回下标，找不到返回-1</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = low; i &lt; high; i++)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">array</span>[i] == key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找，在已经排序的列表中查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(key == <span class="built_in">array</span>[mid])<span class="comment">// 中间切一刀，正好和要查找的数相等</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; <span class="built_in">array</span>[mid]) <span class="comment">// 如果要找的数大于array[mid]， 那么就在下半部分切刀</span></span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 如果要找到的数小于array[mid], 那么就在上半部分继续切刀</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 没有找到数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_rec</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(low &lt;= high)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(key == <span class="built_in">array</span>[mid])</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; <span class="built_in">array</span>[mid])</span><br><span class="line"><span class="keyword">return</span> bin_rec(<span class="built_in">array</span>, mid + <span class="number">1</span>, high, key);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> bin_rec(<span class="built_in">array</span>, low, mid - <span class="number">1</span>, key);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>] = &#123;<span class="number">32</span>, <span class="number">45</span>, <span class="number">76</span>, <span class="number">21</span>, <span class="number">56</span>, <span class="number">85</span>, <span class="number">23</span>, <span class="number">89</span>, <span class="number">15</span>, <span class="number">49</span>&#125;;</span><br><span class="line"><span class="comment">// int array[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("%d\n", seq(array, 0, 10, 32));</span></span><br><span class="line">quick_sort(<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bin(<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bin_rec(<span class="built_in">array</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------------------------\n"</span>);</span><br><span class="line">print(<span class="built_in">array</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// printf("count = %d\n", count);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 查找 </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言-文件操作</title>
      <link href="/2019/02/18/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/02/18/C%E8%AF%AD%E8%A8%80-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>文件操作</p><h3 id="fopen"><a class="markdownIt-Anchor" href="#fopen"></a> fopen</h3><p>r 以只读方式打开文件， 该文件必须存在<br>r+ 以可读方式打开文件，该文件必须存在<br>rb+ 读写打开一个二进制文件，允许读写数据，文件必须存在<br>rw+ 读写打开一个文本文件，允许读和写<br>w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件。<br>w+打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失，若文件不存在则建立该文件。</p><p>a 以追加的方式打开只写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(EOF符保留)</p><p>a+ 以追加的方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(原先的EOF符不保留)</p><h3 id="eof与feof-函数文件结尾"><a class="markdownIt-Anchor" href="#eof与feof-函数文件结尾"></a> EOF与feof 函数文件结尾</h3><p>如果已经是文件尾， feof 函数返回true.<br>EOF 用于一个字符一个字符输出时，当获取到的字符是EOF(其中EOF真实为-1)，则代表已经是文件尾。</p><a id="more"></a><h3 id="fprintf-fscanf-fgets-fputs-函数"><a class="markdownIt-Anchor" href="#fprintf-fscanf-fgets-fputs-函数"></a> fprintf, fscanf, fgets, fputs 函数</h3><p>这些函数都是通过 FILE * 来对文件进行读写</p><h3 id="stat-函数"><a class="markdownIt-Anchor" href="#stat-函数"></a> stat 函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* _fileName, struct stat * _stat)</span></span>;</span><br></pre></td></tr></table></figure><p>stat.st_size; // 文件大小，单位：字节</p><p>函数的第一个参数代表文件名， 第二个参数是 struct stat 结构<br>得到的文件属性，包括文件建立时间，文件大小等信息。</p><h3 id="fread-和-fwrite-函数"><a class="markdownIt-Anchor" href="#fread-和-fwrite-函数"></a> fread 和 fwrite 函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fread(<span class="keyword">void</span> *buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE * stream);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">const</span> <span class="keyword">void</span> * buffer, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE * stream);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这个函数以二进制形式对文件进行操作，不局限于文本文件</p><p>返回值：返回实际写入的数据块数目</p><h3 id="fread-与-feof"><a class="markdownIt-Anchor" href="#fread-与-feof"></a> fread 与 feof</h3><p>注意一下两段代码的区别</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span><span class="comment">(!feof(p)</span>)</span><br><span class="line">&#123;</span><br><span class="line">fread<span class="comment">(&amp;buf, 1, sizeof(buf)</span>,p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(<span class="name">fread</span>(<span class="name">&amp;buf</span>, <span class="number">1</span>, sizeof(<span class="name">buf</span>), p))</span><br></pre></td></tr></table></figure><h3 id="通过-fwrite-将结构保存到二进制文件中"><a class="markdownIt-Anchor" href="#通过-fwrite-将结构保存到二进制文件中"></a> 通过 fwrite 将结构保存到二进制文件中</h3><h3 id="fseek-函数"><a class="markdownIt-Anchor" href="#fseek-函数"></a> fseek 函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE * _file, <span class="keyword">long</span> _offset, <span class="keyword">int</span> _orgin)</span></span>;</span><br></pre></td></tr></table></figure><p>函数设置文件指针 steam的位置。如果执行成功， stream将指向以fromwhere 为基准，偏移offset(指针偏移量) 个字节的位置， 函数返回 0. 如果执行失败则不改变 stream 指向的位置，函数返回一个非0值。</p><p>实验得出，超过文件末尾位置，还是返回0，往回偏移超过首位置，还是返回0，请小心使用。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个参数， stream为文件指针</span><br><span class="line">第二个参数， offset 为偏移量，正数表示正向偏移，负数表示负向偏移。</span><br><span class="line">第三个参数， origin 设定从文件的哪里开始偏移，可能取值为：SEEK_CUR, SEEK_END 或 SEEK_SET。</span><br><span class="line"></span><br><span class="line"><span class="symbol">SEEK_SET:</span> 文件开头</span><br><span class="line"><span class="symbol">SEEK_CUR:</span> 当前位置</span><br><span class="line"><span class="symbol">SEEK_END:</span> 文件末尾</span><br></pre></td></tr></table></figure><h3 id="ftell-函数"><a class="markdownIt-Anchor" href="#ftell-函数"></a> ftell 函数</h3><p>函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">long len</span> = ftell(fp);</span><br></pre></td></tr></table></figure><h3 id="fflush-函数"><a class="markdownIt-Anchor" href="#fflush-函数"></a> fflush 函数</h3><p>fflush 函数可以将缓冲区中任何未写入的数据写入文件中。</p><p>成功返回 0， 失败返回 EOF.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fflush</span><span class="params">(FILE * _file)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="remove-函数"><a class="markdownIt-Anchor" href="#remove-函数"></a> remove 函数</h3><p>remove函数 删除指定文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * _fileName)</span></span>;</span><br></pre></td></tr></table></figure><p>参数filename为指定的要删除的文件名，如果是windows 下文件名与路径可以用反斜杠‘\’分隔，也可以用斜杠’/'分隔。</p><h3 id="rename-函数"><a class="markdownIt-Anchor" href="#rename-函数"></a> rename 函数</h3><p>rename 函数将指定文件改名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rename</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * _oldFilename, <span class="keyword">const</span> <span class="keyword">char</span> * _newFilename)</span></span>;</span><br></pre></td></tr></table></figure><p>参数oldFilename为指定的要修改的文件名，newFilename 为修改后的文件名，如果是windows 下文件名与路径可以用反斜杠’‘分隔，也可以用斜杠’/'分隔。</p><h3 id="输出错误信息排错"><a class="markdownIt-Anchor" href="#输出错误信息排错"></a> 输出错误信息（排错）：</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include &lt;errno.h&gt;</span><br><span class="line"><span class="function"><span class="title">strerror</span><span class="params">(errno)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE * p = fopen(<span class="string">"tfile.txt"</span>, <span class="string">"w"</span>);<span class="comment">// 用写的方式打开一个文件</span></span><br><span class="line"><span class="comment">// 'w' 如果文件不存在，则创建文件，如果文件存在就覆盖</span></span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">"hello world\n"</span>, p); <span class="comment">// 向文件写入一个字符串</span></span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">"aaabbb\n"</span>, p); <span class="comment">// 向文件写入一个字符串</span></span><br><span class="line">fclose(p); <span class="comment">// 关闭这个文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123; <span class="comment">// 写文件</span></span><br><span class="line">FILE * p = fopen(<span class="string">"tfile.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="comment">//scanf("%s", s);</span></span><br><span class="line">gets(s);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(s, <span class="string">"exit"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 如果用户输入的是exit, 那么循环退出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">s[len] = <span class="string">'\n'</span>;</span><br><span class="line">s[len + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">fputs</span>(s, p);</span><br><span class="line">&#125;</span><br><span class="line">fclose(p); <span class="comment">// 关闭这个文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"complete\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main03</span><span class="params">()</span></span>&#123; <span class="comment">// 读文件</span></span><br><span class="line">FILE *p = fopen(<span class="string">"tfile.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class="line"><span class="keyword">while</span>(!feof(p))&#123; <span class="comment">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class="line"><span class="comment">//printf("%s\n", s);</span></span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">code</span><span class="params">(<span class="keyword">char</span> * s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*s)&#123;</span><br><span class="line">(*s)++;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main04</span><span class="params">()</span></span>&#123; <span class="comment">// 加密</span></span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">FILE *pw = fopen(<span class="string">"b.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class="line"><span class="keyword">while</span>(!feof(p))&#123; <span class="comment">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), p);</span><br><span class="line">code(s);</span><br><span class="line"><span class="built_in">fputs</span>(s, pw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class="line"><span class="comment">//printf("%s\n", s);</span></span><br><span class="line">fclose(p);</span><br><span class="line">fclose(pw);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(*s)&#123;</span><br><span class="line">(*s)--;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main05</span><span class="params">()</span></span>&#123; <span class="comment">// 解密</span></span><br><span class="line"></span><br><span class="line">FILE *p = fopen(<span class="string">"b.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">FILE *pw = fopen(<span class="string">"c.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class="line"><span class="keyword">while</span>(!feof(p))&#123; <span class="comment">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">fgets(s, <span class="keyword">sizeof</span>(s), p);</span><br><span class="line">decode(s);</span><br><span class="line"><span class="built_in">fputs</span>(s, pw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class="line"><span class="comment">//printf("%s\n", s);</span></span><br><span class="line">fclose(p);</span><br><span class="line">fclose(pw);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main06</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="comment">// 'a' 的含义是，如果文件不存在，那么就创建文件，如果文件存在，就在文件结尾追加数据</span></span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"file open fail\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">"hello"</span>, p);</span><br><span class="line">fclose(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main07</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *fp = fopen(<span class="string">"a.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(fp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//char c = getc(p); // 一次只读一个字符</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = getc(fp))!= EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="comment">// 写一个字符</span></span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"error\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">putc(<span class="string">'a'</span>, p);</span><br><span class="line">putc(<span class="string">'b'</span>, p);</span><br><span class="line">putc(<span class="string">'c'</span>, p);</span><br><span class="line"></span><br><span class="line">fclose(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">while</span>(!feof(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//fgets(buf, sizeof(buf), p);</span></span><br><span class="line"><span class="comment">//fscanf(p, "%s", buf); // fscanf与scanf用法一致，fscanf是从一个文件读取输入</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">fscanf</span>(p, <span class="string">"%d + %d = "</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>, a, b);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>] = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fprintf(p, "%s, %d, %d", buf, a, b); // 和printf功能一样，fprintf将数据输入到文件里面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(p, <span class="string">"array[%d] = %d\n"</span>, i, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"rb"</span>); <span class="comment">// 用读二进制的方式打开一个文件</span></span><br><span class="line"><span class="keyword">while</span>(!feof(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">size_t</span> res = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="keyword">sizeof</span>(buf), p); <span class="comment">//第一个参数是缓冲区，第二个参数是读取的时候最小单位大小，第三个参数是一次读取几个单位，第四个参数是打开的文件指针。</span></span><br><span class="line"><span class="comment">// fread的返回值代表读取了多少记录数</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; res; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"buf[%d] = %x\n"</span>, i, buf[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%s", buf);</span></span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"wb"</span>);</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">buf[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">buf[<span class="number">1</span>] = <span class="string">'b'</span>;</span><br><span class="line">fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">10</span>, p);</span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] -= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main03</span><span class="params">()</span></span>&#123; <span class="comment">// 带加密</span></span><br><span class="line"><span class="comment">// FILE *p = fopen("m.wmv", "rb");</span></span><br><span class="line"><span class="comment">// FILE *p1 = fopen("n.wmv", "wb");</span></span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"rb"</span>);</span><br><span class="line">FILE *p1 = fopen(<span class="string">"b.txt"</span>, <span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span> * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>(!feof(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="keyword">size_t</span> res = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="keyword">sizeof</span>(buf), p);</span><br><span class="line">encode(buf, res);</span><br><span class="line">fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), res, p1);</span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br><span class="line">fclose(p1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">clock_t</span> c1 = clock();</span><br><span class="line"><span class="comment">// 带解密</span></span><br><span class="line"><span class="comment">// FILE *p = fopen("m.wmv", "rb");</span></span><br><span class="line"><span class="comment">// FILE *p1 = fopen("n.wmv", "wb");</span></span><br><span class="line">FILE *p = fopen(<span class="string">"b.txt"</span>, <span class="string">"rb"</span>);</span><br><span class="line">FILE *p1 = fopen(<span class="string">"d.txt"</span>, <span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span> * <span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>(!feof(p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="keyword">size_t</span> res = fread(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="keyword">sizeof</span>(buf), p);</span><br><span class="line">decode(buf, res);</span><br><span class="line">fwrite(buf, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), res, p1);</span><br><span class="line">&#125;</span><br><span class="line">fclose(p);</span><br><span class="line">fclose(p1);</span><br><span class="line"><span class="keyword">clock_t</span> c2 = clock();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end %ld\n"</span>, (c2 - c1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st</span> = &#123;</span><span class="string">"刘德华"</span>, <span class="number">30</span>&#125;;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(&amp;st, <span class="keyword">sizeof</span>(st), <span class="number">1</span>, p);</span><br><span class="line"></span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st</span> = &#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"rb"</span>);</span><br><span class="line">fread(&amp;st, <span class="keyword">sizeof</span>(st), <span class="number">1</span>, p);</span><br><span class="line">fclose(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"name = %s, age = %d\n"</span>, st.name, st.age);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st</span>[10] = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line"> <span class="keyword">int</span> i;</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"please input name:"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%s"</span>, st[i].name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please input age:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;st[i].age);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"wb"</span>);</span><br><span class="line"> fwrite(st, <span class="keyword">sizeof</span>(struct student), <span class="number">10</span>, p);</span><br><span class="line"> fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st</span> = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line"> </span><br><span class="line"> FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"rb"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">memset</span>(&amp;st, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct student));</span><br><span class="line"> <span class="keyword">size_t</span> res = fread(&amp;st, <span class="keyword">sizeof</span>(struct student), <span class="number">1</span>, p);</span><br><span class="line"> <span class="keyword">if</span>(res == <span class="number">0</span>)&#123;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"name = %s, age = %d\n"</span>, st.name, st.age);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="comment">// seek </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">st</span> = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line"> </span><br><span class="line"> FILE *p = fopen(<span class="string">"a.dat"</span>, <span class="string">"rb"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 从文件开始位置向后偏移结构student的大小</span></span><br><span class="line"> <span class="comment">// fseek(p, sizeof(struct student), SEEK_SET);</span></span><br><span class="line"> <span class="comment">// 第二个参数：偏移字节数</span></span><br><span class="line"> <span class="comment">// 第三个参数：SEEK_SET, SEEK_CUR, SEEK_END</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(&amp;st, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct student));</span><br><span class="line"> fread(&amp;st, <span class="keyword">sizeof</span>(struct student), <span class="number">1</span>, p);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"name = %s, age = %d\n"</span>, st.name, st.age);</span><br><span class="line"></span><br><span class="line"> fseek(p, -<span class="keyword">sizeof</span>(struct student), SEEK_CUR);<span class="comment">//从当前位置往回偏移</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">memset</span>(&amp;st, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct student));</span><br><span class="line"> fread(&amp;st, <span class="keyword">sizeof</span>(struct student), <span class="number">1</span>, p);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"name = %s, age = %d\n"</span>, st.name, st.age);</span><br><span class="line"></span><br><span class="line"> fseek(p, -<span class="keyword">sizeof</span>(struct student), SEEK_END);<span class="comment">//从文件结尾往回偏移</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">memset</span>(&amp;st, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct student));</span><br><span class="line"> fread(&amp;st, <span class="keyword">sizeof</span>(struct student), <span class="number">1</span>, p);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"name = %s, age = %d\n"</span>, st.name, st.age);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"ftell = %ld\n"</span>, ftell(p)); <span class="comment">// ftell当前指针在哪一个字节</span></span><br><span class="line"></span><br><span class="line"> fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *fileName = <span class="string">"m.wmv"</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span> = &#123;</span> <span class="number">0</span> &#125;; <span class="comment">// 定义一个结构，名字叫st</span></span><br><span class="line">stat(fileName, &amp;st); <span class="comment">// 调用完stat函数后，文件相关的信息就保存在了st结构中</span></span><br><span class="line"><span class="comment">//st.st_size 得到文件的大小</span></span><br><span class="line"><span class="comment">// printf("%lld\n", st.st_size);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * <span class="built_in">array</span> = <span class="built_in">malloc</span>(st.st_size); <span class="comment">// 根据文件大小在堆中动态的分配一块内存</span></span><br><span class="line"><span class="keyword">clock_t</span> c1 = clock(); <span class="comment">//得到系统当前时间，单位毫秒</span></span><br><span class="line">FILE * p = fopen(fileName, <span class="string">"rb"</span>);</span><br><span class="line">fread(<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), st.st_size, p);<span class="comment">// 相当于一下整个文件放入内存</span></span><br><span class="line">fclose(p);</span><br><span class="line"></span><br><span class="line">p = fopen(<span class="string">"w.wmv"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(<span class="built_in">array</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), st.st_size, p); <span class="comment">// 将堆中的信息一下都写入文件</span></span><br><span class="line">fclose(p);</span><br><span class="line"><span class="keyword">clock_t</span> c2 = clock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end %ld\n"</span>, (c2 - c1));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main01</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FILE *p = fopen(<span class="string">"a.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"exit"</span>, buf) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(p, <span class="string">"%s\n"</span>, buf);</span><br><span class="line">fflush(p); <span class="comment">// fflush 将缓冲区的内容立刻写入文件</span></span><br><span class="line"><span class="comment">//优势是，不会因为停电，或者电脑死机等故障导致缓冲区的内容丢失</span></span><br><span class="line"><span class="comment">//缺点是，硬盘读写次数增加，导致程序效率低下，同时硬盘寿命变短</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main02</span><span class="params">()</span></span>&#123; <span class="comment">// 删除某个文件</span></span><br><span class="line"></span><br><span class="line">remove(<span class="string">"a.txt"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="comment">// 将指定文件改名</span></span><br><span class="line"></span><br><span class="line">rename(<span class="string">"c.txt"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"end\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> file </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI-日志</title>
      <link href="/2019/01/07/JNI-%E6%97%A5%E5%BF%97/"/>
      <url>/2019/01/07/JNI-%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h4 id="框架"><a class="markdownIt-Anchor" href="#框架"></a> 框架</h4><p>Android 日志框架把日志消息分成4个日志缓冲区：</p><ul><li>Main: 主要应用程序的日志信息</li><li>Event: 系统事件</li><li>Radio: Radio相关的日志信息</li><li>System: 调试时产生的低级系统调试信息</li></ul><p>这 4 个缓冲区以伪设备的形式保存在/dev/log 系统目录中。因为移动平台上的 I/O 操作代价很大，所以日志信息要保存到内存中，而不能保存在永久性存储器(例如磁盘)中。为了有效控制对存储日志信息的内存空间的利用， logger 模块把日志信息放在固定大小的缓冲区。 Main、radio 和 system 日志以自由文本的格式保存在 64KB的日志缓存区中。事件日志信息带有额外的二进制形式信息，因此保存在256KB的日志缓存区中。</p><a id="more"></a><h4 id="原生日志api"><a class="markdownIt-Anchor" href="#原生日志api"></a> 原生日志API</h4><p>开发者不希望直接与Logger内核模块进行交互。 Android 运行库系统提供了一组 API 调用以便于 Java 代码和原生代码向 logger 内核模块发送日志信息。通过 android/log.h 头文件来展示原生代码的日志 API。为了使用日志函数，原生代码需要先包含该头文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>除了要包含合适的头文件，还需要动态修改 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件从而将原生模块与日志库进行链接，可以通过构建系统变量 <code>LOCAL_LDLIBS</code> 完成该操作， 该构建系统变量必须被放在共享库构建片段的include语句之前；否则它将不起作用。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动态链接原生模块与日志库</span><br><span class="line">LOCAL_MODULE := hello-jni</span><br><span class="line">...</span><br><span class="line">LOCAL_LDLIBS += -llog</span><br><span class="line">...</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><h5 id="1日志消息"><a class="markdownIt-Anchor" href="#1日志消息"></a> 1.日志消息</h5><p>通过日志API发送给logger 模块的每个日志条目都具有以下字段：</p><ul><li>Priority: 取值分别为：verbose、debug、info、warning、error 和 fatal,表示日志信息的重要程度。支持的日志优先级在android/log.h头文件中声明，</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//支持的日志优先级</span><br><span class="line">typedef enum android_LogPriority &#123;</span><br><span class="line">...</span><br><span class="line"><span class="type">ANDROID_LOG_VERBOSE</span>,</span><br><span class="line"><span class="type">ANDROID_LOG_DEBUG</span>,</span><br><span class="line"><span class="type">ANDROID_LOG_INFO</span>,</span><br><span class="line"><span class="type">ANDROID_LOG_WARN</span>,</span><br><span class="line"><span class="type">ANDROID_LOG_ERROR</span>,</span><br><span class="line"><span class="type">ANDROID_LOG_FATAL</span>,</span><br><span class="line">...</span><br><span class="line">&#125; android_LogPriority;</span><br></pre></td></tr></table></figure><ul><li>Tag: 标识产生日志信息的组件，Logcat 和 DDMS 工具可以基于这个标签值过滤日志信息。标签值应该尽可能小。</li><li>Message: 用于存放实际日志信息。在每一个日志消息后自动追加一个换行符，因为循环的日志缓存区很小，因此强烈建议应用程序的日志信息大小尽量保持合适。</li></ul><h5 id="2日志函数"><a class="markdownIt-Anchor" href="#2日志函数"></a> 2.日志函数</h5><p><code>android/log.h</code>头文件也声明了一系列函数，这些函数主要用于原生代码生成日志消息。</p><ul><li><code>_android_log_write</code>:可用于生成一个简单的字符串作为日志信息。它包括日志优先级、日志标签和日志消息。</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成简单的日志消息</span></span><br><span class="line"><span class="selector-tag">_android_log_write</span>(ANDROID_LOG_WARN, <span class="string">"hello-jni"</span>, <span class="string">"warning log."</span>);</span><br></pre></td></tr></table></figure><ul><li><code>_android_log_print</code>:可用于生成一个格式化字符串为日志消息。它包括日志优先级、日志标签、字符串格式和格式中指定个数的其他参数，</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成格式化的日志消息</span></span><br><span class="line"><span class="constructor">_android_log_print(ANDROID_LOG_ERROR, <span class="string">"hello-jni"</span>, <span class="string">"Failed with errno %d"</span>, <span class="params">errno</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li><code>_android_log_vprint</code>: 除了参数传递方式外，其他功能与<code>_android_log_print</code> 函数完全相同，<code>_android_log_vprint</code> 函数用va_list 传递附加参数， 而 <code>_android_log_print</code> 函数中以连续参数的方式改为传递参数。如果想要调用日志函数时给当前函数的参数个数动态变化时，该函数的优势就会体现出来。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传递的参数个数变化时生成日志消息</span></span><br><span class="line">void log<span class="constructor">_verbose(<span class="params">const</span> <span class="params">char</span><span class="operator">*</span> <span class="params">format</span>, <span class="operator">...</span>)</span>&#123;</span><br><span class="line">va_list args;</span><br><span class="line"></span><br><span class="line">va<span class="constructor">_start(<span class="params">args</span>, <span class="params">format</span>)</span>;</span><br><span class="line"><span class="constructor">_android_log_vprint(ANDROID_LOG_VERBOSE, <span class="string">"hello-jni"</span>, <span class="params">format</span>, <span class="params">args</span>)</span>;</span><br><span class="line">va<span class="constructor">_end(<span class="params">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">void example<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">log<span class="constructor">_verbose(<span class="string">"Errno is now %d"</span>, <span class="params">errno</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_android_log_assert</code>: 用于记录断言失败。与其他的日志函数比较，它不包括日志优先级，但总是将所有的日志记录为fatal, 如果附加了调试器，它也SIGTRAP 当前进程以通过 debugger 进一步检查。</li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成断言失败日志</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>!=errno)&#123;</span><br><span class="line"><span class="number">_</span>android<span class="number">_</span>log<span class="number">_</span><span class="keyword">assert</span>(<span class="string">"0!=errno"</span>, <span class="string">"hello-jni"</span>, <span class="string">"There is an error."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="受控制的日志"><a class="markdownIt-Anchor" href="#受控制的日志"></a> 受控制的日志</h4><p>在jni目录下，添加文件<code>my_log.h</code></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#pragma once</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NDK的基本日志框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> &lt;android/log.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_VERBOSE <span class="number">1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_DEBUG <span class="number">2</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_INFO <span class="number">3</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_WARNING <span class="number">4</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_ERROR <span class="number">5</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_FATAL <span class="number">6</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVEL_SILENT <span class="number">7</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MY_LOG_TAG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_TAG  __FILE__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_LEVELMY_LOG_LEVEL_VERBOSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_NOOP (void) <span class="number">0</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_PRINT(level, fmt, ...) \</span></span><br><span class="line">_android_log_print(level, MY_LOG_TAG, <span class="string">"(%s:%u) %s: "</span> fmt, \</span><br><span class="line"><span class="keyword">__FILE__</span>, <span class="keyword">__LINE__</span>, __PRETTY_FUNCTION__, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_VERBOSE &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_VERBOSE(fmt,...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_VERBOSE, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_VERBOSE(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>MY_LOG_LEVEL_DEBUG &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_DEBUG(fmt, ...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_DEBUG, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_DEBUG(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_INFO &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_INFO(fmt, ...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_INFO, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_INFO(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_WARNING &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_WARNING(fmt, ...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_WARN, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_WARING(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_ERROR &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_ERROR(fmt, ...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_ERROR, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_ERROR(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_FATAL(fmt, ...) \</span></span><br><span class="line">MY_LOG_PRINT(ANDROID_LOG_FATAL, fmt, <span class="meta">##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_FATAL(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_ASSERT(expression, fmt, ...) \</span></span><br><span class="line"><span class="keyword">if</span>(!(expression)) \</span><br><span class="line">&#123; \</span><br><span class="line">__android_log_assert(<span class="meta">#expression, MY_LOG_TAG, \</span></span><br><span class="line">fmt, <span class="meta">##__VA_ARGS__); \</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_LOG_ASSERT(...) MY_LOG_NOOP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>现在可以在原生函数中添加日志声明语句。</p><blockquote><p>在原生函数中添加日志声明语句</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jstring <span class="module-access"><span class="module"><span class="identifier">Java_com</span>.</span></span>example<span class="constructor">_hellojni_HelloJni_stringFromJNI(JNIEnv<span class="operator">*</span> <span class="params">env</span>, <span class="params">jobject</span> <span class="params">thiz</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="constructor">MY_LOG_VERBOSE(<span class="string">"The stringFromJNI is called."</span>)</span>;</span><br><span class="line"><span class="constructor">MY_LOG_DEBUG(<span class="string">"env=%p thiz=%p"</span>, <span class="params">env</span>, <span class="params">thiz</span>)</span>;</span><br><span class="line"><span class="constructor">MY_LOG_ASSERT(0 != <span class="params">env</span>, <span class="string">"JNIENV cannot be NULL."</span>)</span>;</span><br><span class="line"><span class="constructor">MY_LOG_INFO(<span class="string">"Returning a new string."</span>)</span>;</span><br><span class="line"></span><br><span class="line">return (*env)-&gt;<span class="constructor">NewStringUTF(<span class="params">env</span>, <span class="string">"Hello from JNI!"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新 <code>Android.mk</code></p><ul><li>1.日志标签</li></ul><blockquote><p>通过 MY_LOG_TAG 构建变量定义日志标签</p></blockquote><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := hello-jni</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 定义日志标签</span></span><br><span class="line">MY_LOG_TAG := \<span class="string">"hello-jni\"</span></span><br></pre></td></tr></table></figure><ul><li>2.日志等级</li></ul><blockquote><p>定义默认的日志等级</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LOCAL_MODULE</span> :<span class="string">= hello-jni</span></span><br><span class="line"><span class="attr">...</span></span><br><span class="line"><span class="comment"># 定义日志标签</span></span><br><span class="line"><span class="attr">MY_LOG_TAG</span> :<span class="string">= \"hello-jni\"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义基于构建类型的默认日志等级</span></span><br><span class="line"><span class="attr">ifeq</span> <span class="string">($(APP_OPTIM), release)</span></span><br><span class="line"><span class="attr">MY_LOG_LEVEL</span> :<span class="string">= MY_LOG_LEVEL_ERROR</span></span><br><span class="line"><span class="attr">else</span></span><br><span class="line"><span class="attr">MY_LOG_LEVEL</span> :<span class="string">= MY_LOG_LEVEL_VERBOSE</span></span><br><span class="line"><span class="attr">endif</span></span><br></pre></td></tr></table></figure><ul><li>3.应用日志配置</li></ul><p>在定义<code>MY_LOG_TAG</code> 和 <code>MY_LOG_LEVEL</code> 构建系统变量时，可以将日志系统配置应用在模块中。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 将日志系统配置应用在模块中</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := hello-jni</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 定义日志标签</span></span><br><span class="line">MY_LOG_TAG := hello-jni</span><br><span class="line"><span class="comment"># 定义基于构建类型的默认日志等级</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(APP_OPTIM)</span>, release)</span><br><span class="line">MY_LOG_LEVEL := MY_LOG_LEVEL_ERROR</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">MY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加编译标记</span></span><br><span class="line">LOCAL_CFLAGS += -DMY_LOG_TAG=<span class="variable">$(MY_LOG_TAG)</span></span><br><span class="line">LOCAL_CFLAGS += -DMY_LOG_LEVEL=<span class="variable">$(MY_LOG_LEVEL)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态链接日志库</span></span><br><span class="line">LOCAL_LDLIBS += -llog</span><br></pre></td></tr></table></figure><h5 id="控制台日志"><a class="markdownIt-Anchor" href="#控制台日志"></a> 控制台日志</h5><p>默认情况下，控制台文件描述符–STDOUT 和 STDERR 在Android 平台上是不可见的。要想将这些日志消息重定向到 Android 系统日志中， 需要打开一个命令提示符或一个终端窗口，并执行如下所示的ADB命令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 将控制台日志重定向到 Android 系统日志中</span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> stop</span></span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> setprop log.redirect-stdio <span class="literal">true</span></span></span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> start</span></span><br></pre></td></tr></table></figure><p>在重新启动应用程序时，用Logcat视图可以看到控制台日志信息。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ndk </tag>
            
            <tag> jni </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI-局部和全局引用</title>
      <link href="/2019/01/04/JNI-%E5%B1%80%E9%83%A8%E5%92%8C%E5%85%A8%E5%B1%80%E5%BC%95%E7%94%A8/"/>
      <url>/2019/01/04/JNI-%E5%B1%80%E9%83%A8%E5%92%8C%E5%85%A8%E5%B1%80%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="局部引用和全局引用"><a class="markdownIt-Anchor" href="#局部引用和全局引用"></a> 局部引用和全局引用</h3><p>JNI支持三种引用：局部引用、全局引用和弱全局引用。</p><h4 id="局部引用"><a class="markdownIt-Anchor" href="#局部引用"></a> 局部引用</h4><p>大多数JNI函数返回局部应用。局部引用不能在后续的调用中被缓存及重用，主要因为它们的使用期限仅限于原生方法，一旦原生函数返回，局部引用即被释放。例如：FindClass 函数返回一个局部引用，当原生方法返回时，它被自动释放，也可以用DeleteLocalRef 函数显式的是否原生代码。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除一个局部引用</span><br><span class="line">jclass clazz;</span><br><span class="line"><span class="function"><span class="title">clazz</span> = <span class="params">(*env)</span>-&gt;</span>FindClass(env, <span class="string">"java/lang/String"</span>);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>DeleteLocalRef(env, clazz);</span><br></pre></td></tr></table></figure><p>根据JNI的规范，虚拟机应该允许原生代码创建最少16个局部引用。在单个方法调用时进行多个内存密集型操作的最佳实践是删除未用的局部引用。如果不可能，原生代码可以在使用之前用 EnsureLocalCapacity 方法请求更多的局部引用槽。</p><h4 id="全局引用"><a class="markdownIt-Anchor" href="#全局引用"></a> 全局引用</h4><p>全局引用在原生方法的后续调用过程中依然有效，除非它们被原生代码显式释放。</p><ul><li>1.创建全局引用</li></ul><p>可以用 NewGlobalRef 函数将局部引用初始化为全局引用。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用给定的局部引用创建全局引用</span><br><span class="line">jclass localClazz;</span><br><span class="line">jclass globalClazz;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">localClazz</span> = <span class="params">(*env)</span>-&gt;</span>FindClass(env, <span class="string">"java/lang/String"</span>);</span><br><span class="line"><span class="function"><span class="title">globalClazz</span> = <span class="params">(*env)</span>-&gt;</span>NewGlobalRef(env, localClazz);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>DeleteLocalRef(env, localClazz);</span><br></pre></td></tr></table></figure><ul><li>2.删除全局引用</li></ul><p>当原生代码不再需要一个全局引用时，可以随时用 DeleteGlobalRef 函数释放它，如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除一个全局应用</span></span><br><span class="line">(*env)-&gt;<span class="constructor">DeleteGlobalRef(<span class="params">env</span>, <span class="params">globalClazz</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="弱全局引用"><a class="markdownIt-Anchor" href="#弱全局引用"></a> 弱全局引用</h4><p>全局引用的另一种类型是弱全局引用。与全局引用一样，弱全局引用在原生方法的后续调用过程中依然有效，与全局引用不同，弱全局引用并不阻止潜在的对象被垃圾收回。</p><ul><li>1.创建弱全局引用</li></ul><p>可以用 NewWeakGlobalRef 函数对弱全局引用进行初始化。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jclass weakGlobalClazz<span class="comment">;</span></span><br><span class="line">weakGlobalClazz = (<span class="name">*env</span>)-&gt;NewWeakGlobalRef(<span class="name">env</span>, localClazz)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>2.弱全局引用的有效性检验</li></ul><p>可以用 IsSameObject 函数检验一个弱全局引用是否仍然指向活动的类实例。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">检验弱全局变量是否仍然有效</span><br><span class="line"><span class="keyword">if</span>(JNI_FALSE<span class="operator"> == </span>(*env)-&gt;<span class="constructor">IsSameObject(<span class="params">env</span>, <span class="params">weakGlobalClazz</span>, NULL)</span>)&#123;</span><br><span class="line"><span class="comment">/** 对象仍然处于活动状态且可以使用 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/** 对象被垃圾回收器收回，不能使用 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3.删除弱全局引用</li></ul><p>可以随时用 DeleteWeakGlobalRef 函数是否弱全局引用。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除一个弱全局引用</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>DeleteWeakGlobalRef(env, weakGlobalClazz);</span><br></pre></td></tr></table></figure><p>全局引用显式释放前一直有效，他们可以被其他原生函数及原生线程使用。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI-异常处理</title>
      <link href="/2019/01/04/JNI-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2019/01/04/JNI-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="异常处理"><a class="markdownIt-Anchor" href="#异常处理"></a> 异常处理</h3><h4 id="捕获异常"><a class="markdownIt-Anchor" href="#捕获异常"></a> 捕获异常</h4><p>JNIEnv 接口提供了一组与异常相关的函数集，在运行过程中可以使用Java类查看这些函数。</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">抛出异常的 Java 例子</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> &#123;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抛出方法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwingMethod</span><span class="params">()</span> throws NullPointerException </span>&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Null pointer"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 访问方法(原生方法).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> native <span class="keyword">void</span> <span class="title">accessMethods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 throwingMethod 方法时， accessMethods 原生方法需要显示地做异常处理。 JNI提供了 ExceptionOccurred 函数查询虚拟机中是否有挂起的异常。在使用完之后，异常处理程序需要用 ExceptionClear 函数显式地清除异常。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原生代码中的异常处理</span><br><span class="line">jthrowable ex;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>CallVoidMethod(env, instance, throwingMethodId);</span><br><span class="line"><span class="function"><span class="title">ex</span> = <span class="params">(*env)</span>-&gt;</span>ExceptionOccurred(env);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != ex) &#123;</span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>ExceptionClear(env);</span><br><span class="line"><span class="comment">/* Exception handler. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抛出异常"><a class="markdownIt-Anchor" href="#抛出异常"></a> 抛出异常</h4><p>JNI 也允许原生代码抛出异常。因为异常是Java类，应该先用FindClass函数找到异常类，用ThrowNew 函数可以初始化且抛出新的异常。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原生代码中抛出异常</span><br><span class="line">jclass clazz;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">clazz</span> = <span class="params">(*env)</span>-&gt;</span>FindClass(env, <span class="string">"java/lang/NullPointerException"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != clazz) &#123;</span><br><span class="line"><span class="function"><span class="params">(*env)</span>-&gt;</span>ThrowNew(env, clazz, <span class="string">"Exception message."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为原生函数的代码执行不受虚拟机的控制，因此抛出异常并不会停止原生函数的执行并把控制权转交给异常处理程序。到抛出异常时，原生函数应该释放所有已分配的原生资源，例如内存及合适的返回值等。通过 JNIEnv 接口获得的引用是局部引用且一旦返回原生函数，它们自动地被虚拟机释放。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI-数据类型</title>
      <link href="/2019/01/03/JNI-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/01/03/JNI-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="jni的数据类型"><a class="markdownIt-Anchor" href="#jni的数据类型"></a> JNI的数据类型</h3><p>Java 中有两种数据类型：</p><ul><li>基本数据类型：布尔型、字节型、字符型、短整型、整型、长整型、浮点型和双精度类型。</li><li>引用类型：字符串类型、数组类及其他类。</li></ul><a id="more"></a><p>Java 基本数据类型</p><table><thead><tr><th style="text-align:center">Java 类型</th><th style="text-align:center">JNI类型</th><th style="text-align:center">C/C++类型</th><th style="text-align:center">大小</th></tr></thead><tbody><tr><td style="text-align:center">boolean</td><td style="text-align:center">jboolean</td><td style="text-align:center">unsigned char</td><td style="text-align:center">无符号8位</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">jbyte</td><td style="text-align:center">char</td><td style="text-align:center">有符号8位</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">jchar</td><td style="text-align:center">unsigned short</td><td style="text-align:center">无符号16位</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">jshort</td><td style="text-align:center">short</td><td style="text-align:center">有符号16位</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">jint</td><td style="text-align:center">int</td><td style="text-align:center">有符号32位</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">jlong</td><td style="text-align:center">long long</td><td style="text-align:center">有符号64位</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">jfloat</td><td style="text-align:center">float</td><td style="text-align:center">32位</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">jdouble</td><td style="text-align:center">double</td><td style="text-align:center">64位</td></tr></tbody></table><p>Java 引用类型映射</p><table><thead><tr><th style="text-align:center">Java 类型</th><th style="text-align:center">原生类型</th></tr></thead><tbody><tr><td style="text-align:center">java.lang.Class</td><td style="text-align:center">jclass</td></tr><tr><td style="text-align:center">java.lang.Throwable</td><td style="text-align:center">jthrowable</td></tr><tr><td style="text-align:center">java.lang.String</td><td style="text-align:center">jstring</td></tr><tr><td style="text-align:center">Other objects</td><td style="text-align:center">jobjects</td></tr><tr><td style="text-align:center">java.lang.Object]</td><td style="text-align:center">jobjectArray</td></tr><tr><td style="text-align:center">boolean[]</td><td style="text-align:center">jbooleanArray</td></tr><tr><td style="text-align:center">char[]</td><td style="text-align:center">jcharArray</td></tr><tr><td style="text-align:center">short[]</td><td style="text-align:center">jshortArray</td></tr><tr><td style="text-align:center">byte[]</td><td style="text-align:center">jbyteArray</td></tr><tr><td style="text-align:center">char[]</td><td style="text-align:center">jcharArray</td></tr><tr><td style="text-align:center">short[]</td><td style="text-align:center">jshortArray</td></tr><tr><td style="text-align:center">int[]</td><td style="text-align:center">jintArray</td></tr><tr><td style="text-align:center">long[]</td><td style="text-align:center">jlongArray</td></tr><tr><td style="text-align:center">float[]</td><td style="text-align:center">jfloatArray</td></tr><tr><td style="text-align:center">double[]</td><td style="text-align:center">jdoubleArray</td></tr><tr><td style="text-align:center">Other arrays</td><td style="text-align:center">jarray</td></tr></tbody></table><h4 id="对引用数据类型的操作"><a class="markdownIt-Anchor" href="#对引用数据类型的操作"></a> 对引用数据类型的操作</h4><h5 id="字符串操作"><a class="markdownIt-Anchor" href="#字符串操作"></a> 字符串操作</h5><p>JNI把 Java 字符串当成应用类型处理。这些引用类型并不像原生 C 字符串一样可以直接使用， JNI 提供了 Java 字符串与C字符串之间相互转化的必要函数。因为Java字符串对象是不可变的，因此JNI不提供任何修改现有的Java字符串内容的函数。</p><p>JNI支持Unicode编码格式和UTF-8编码格式的字符串，还提供两组函数通过JNIEnv接口指针处理这些字符串编码。</p><ul><li><p>1.创建字符串</p><p>可以在原生代码中用 NewString 函数构建Unicode编码格式的字符串实例，用NewStringUTF函数构建UTF-8编码格式的字符串实例。这些函数以一个C字符串为参数，并返回一个Java字符串引用类型jstring值。</p>  <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jstring javaString<span class="comment">;</span></span><br><span class="line">javaString = (<span class="name">*env</span>)-&gt;NewStringUTF(<span class="name">env</span>, <span class="string">"Hello world!"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>在内存溢出的情况下，这些函数返回NULL以通过原生代码虚拟机中抛出异常，这样原生代码就会停止运行。</p></li><li><p>2.把 Java 字符串转换成 C 字符串</p><p>为了在原生代码中使用 Java 字符串，需要先将 Java 字符串转换成 C 字符串。用 GetStringChars 函数可以将Unicode格式的Java字符串转换成 C 字符串， 用GetStringUTFChars 函数可以将UTF-8格式的Java字符串转换成C字符串。 这些函数的第三个参数均为可选参数，该可选参数名是isCopy, 它让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">将<span class="keyword">Java字符串转换成C字符串</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">const </span><span class="keyword">jbyte* </span>str<span class="comment">;</span></span><br><span class="line"><span class="keyword">jboolean </span>isCopy<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">str = (*env)-&gt;GetStringUTFChars(env, <span class="keyword">javaString, </span>&amp;isCopy)<span class="comment">;</span></span><br><span class="line">if(<span class="number">0</span> != str)&#123;</span><br><span class="line">printf(<span class="string">"Java string: %s"</span>, str)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if(<span class="keyword">JNI_TRUE </span>== isCopy)&#123;</span><br><span class="line">printf(<span class="string">"C string is a copy of the Java string."</span>)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(<span class="string">"C string points to actual string."</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3.释放字符串</p><p>通过JNI GetStringChars 函数和 GetStringUTFChars 函数获得的C字符串在原生代码中使用完之后需要正确地释放，否则将会引起内存泄露。 JNI提供了 ReleaseStringChars 函数释放 Unicode编码格式的字符串，而用ReleaseStringUTFChars函数释放UTF-8编码格式的字符串。</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">释放 JNI 函数返回的 C 字符串</span><br><span class="line">(*env)-&gt;<span class="constructor">ReleaseStringUTFChars(<span class="params">env</span>, <span class="params">javaString</span>, <span class="params">str</span>)</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="数组操作"><a class="markdownIt-Anchor" href="#数组操作"></a> 数组操作</h5><p>JNI 把 Java 数组当成引用类型来处理，JNI提供必要的函数访问和处理Java数组。</p><ul><li><p>1.创建数组</p><p>用 New&lt;Type&gt;Array 函数在原生代码中创建数组实例，其中&lt;Type&gt;可以是 Int, Char 和 Boolean 等，例如 NewIntArray。使用这些函数时应该以参数的形式给出数组的大小。</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在原生代码中创建数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">jintArray </span><span class="keyword">javaArray;</span></span><br><span class="line"><span class="keyword">javaArray </span>= (*env)-&gt;NewIntArray(env, <span class="number">10</span>)<span class="comment">;</span></span><br><span class="line">if(<span class="number">0</span> != <span class="keyword">javaArray)&#123;</span></span><br><span class="line"><span class="keyword"></span><span class="comment">/* 现在可以使用数组了。 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 NewString 函数一样，在内存溢出的情况下，New&lt;Type&gt;Array 函数将返回 NULL 以通知原生代码虚拟机中有异常抛出，这样原生代码就会停止运行。</p></li><li><p>2.访问数组元素</p><p>JNI 提供两种访问 Java 数组元素的方法，可以将数组的代码复制成C数组或者让JNI提供直接指向数组元素的指针。</p></li><li><p>3.对副本的操作</p><p>Get&lt;Type&gt;ArrayRegion 函数将给定的基本Java数组复制到给定的C数组中。</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将<span class="keyword">Java数组区复制到C数组中</span></span><br><span class="line"><span class="keyword">jint </span>nativeArray[<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line">(*env)-&gt;GetIntArrayRegion(env, <span class="keyword">javaArray, </span><span class="number">0</span>, <span class="number">10</span>, nativeArray)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>原生代码可以像使用普通的C数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，可以使用 Set&lt;Type&gt;ArrayRegion 函数将C数组复制回Java数组中。</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从C数组向Java数组提交所作的修改</span><br><span class="line"></span><br><span class="line">(*env)-&gt;<span class="constructor">SetIntArrayRegion(<span class="params">env</span>, <span class="params">javaArray</span>, 0, 10, <span class="params">nativeArray</span>)</span>;</span><br></pre></td></tr></table></figure><p>当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，原生代码只获取或设置数组元素区域而不是获取整个数组。另外，JNI 提供了不同的函数集以获得数组元素而非其副本的直接指针。</p></li><li><p>4.对直接指针的操作</p><p>可能的话，原生代码可以用Get&lt;Type&gt;ArrayElements函数获取指向数组元素的直接指针。函数带有三个参数，第三个参数是可选参数，该可选参数名是isCopy, 让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获得指向<span class="keyword">Java数组元素的直接指针</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">jint* </span>nativeDirectArray<span class="comment">;</span></span><br><span class="line"><span class="keyword">jboolean </span>isCopy<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">nativeDirectArray = (*env)-&gt;GetIntArrayElements(env, <span class="keyword">javaArray, </span>&amp;isCopy)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>因为可以像普通的C数组一样访问和处理数组元素，因此JNI没提供访问和处理数组元素的方法，JNI 要求原生代码用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用JNI提供的 Release&lt;Type&gt;ArrayElements函数释放 Get&lt;Type&gt;ArrayElements函数返回C数组。</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">释放指向Java数组元素的直接指针</span><br><span class="line">(*env)-&gt;<span class="constructor">ReleaseIntArrayElements(<span class="params">env</span>, <span class="params">javaArray</span>, <span class="params">nativeDirectArray</span>, 0)</span>;</span><br></pre></td></tr></table></figure><p>该函数带有四个函数，第四个函数是释放模式，下面列出了支持的释放模式列表。</p></li></ul><table><thead><tr><th style="text-align:center">释放模式</th><th style="text-align:center">动作</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">将内容复制回来并是否原生数组</td></tr><tr><td style="text-align:center">JNI_COMMIT</td><td style="text-align:center">将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组</td></tr><tr><td style="text-align:center">JNI_ABORT</td><td style="text-align:center">释放原生数组但不用将内容复制回来</td></tr></tbody></table><h5 id="nio操作"><a class="markdownIt-Anchor" href="#nio操作"></a> NIO操作</h5><p>原生I/O（NIO）在缓冲管理区、大规模网络和文件I/O及字符集支持方面的性能有所改进。JNI提供了在原生代码中使用NIO的函数。与数组操作相比，NIO缓冲区的数据传送性能较好，更适合在原生代码和Java应用程序之间传送大量数据。</p><ul><li><p>1.创建直接字节缓冲区</p><p>原生代码可以创建Java应用程序使用的直接字节缓冲区，该过程是以一个原生C字节数组为基础，下面列出了NewDirectByteBuffer的使用。</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基于给定的C字节数组创建字节缓冲区</span><br><span class="line"></span><br><span class="line">unsigned char* <span class="keyword">buffer </span>= (unsigned char*) malloc(<span class="number">1024</span>)<span class="comment">;</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">jobject </span><span class="keyword">directBuffer;</span></span><br><span class="line"><span class="keyword">directBuffer </span>= (*env)-&gt;NewDirectByteBuffer(env, <span class="keyword">buffer, </span><span class="number">1024</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>原生方法中的内存分配超出了虚拟机的管理范围，且不能用虚拟机的垃圾回收器回收原生方法中的内存。原生函数应该通过释放未使用的内存分配以避免内存泄露来正确管理内存。</p></li><li><p>2.直接字节缓冲区获取</p><p>Java应用程序中也可以创建直接字节缓冲区，在原生代码中调用 GetDirectBufferAddress 函数可以获得原生字节数组的内存地址。</p>  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过Java字节缓冲区获取原生字节数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* <span class="built_in">buffer</span>;</span><br><span class="line"><span class="built_in">buffer</span> = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)(*env)-&gt;GetDirectBufferAddress(env, directBuffer);</span><br></pre></td></tr></table></figure></li></ul><h5 id="访问域"><a class="markdownIt-Anchor" href="#访问域"></a> 访问域</h5><p>Java 有两类域：实例域和静态域。类的每个实例都有自己的实例域副本，而一个类的所有实例共享同一个静态域。</p><p>JNI提供了访问两类域的函数，下面代码显示了带有静态域和实例域的Java类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">带有静态域和实例域的 Java 类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> </span>&#123;</span><br><span class="line"><span class="comment">/** 实例域 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> instanceField = <span class="string">"Instance Field"</span>;</span><br><span class="line"><span class="comment">/** 静态域 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> staticField = <span class="string">"Static Field"</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1.获取域ID</p><p>JNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID,用GetObjectClass 函数获得 class 对象，</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用对象引用获取类</span><br><span class="line">jclass clazz;</span><br><span class="line"><span class="function"><span class="title">clazz</span> = <span class="params">(*env)</span>-&gt;</span>GetObjectClass(env, instance);</span><br></pre></td></tr></table></figure><p>有两个获得域ID的函数分别适用于不同类型域，GetFieldId 函数用于获取实例域，如下：</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取实例域的域ID</span><br><span class="line"></span><br><span class="line">jfieldID instanceFieldId;</span><br><span class="line"><span class="function"><span class="title">instanceFieldId</span> = <span class="params">(*env)</span>-&gt;</span>GetFieldID(env, clazz, <span class="string">"instanceField"</span>, <span class="string">"Ljava/lang/String;"</span>)</span><br></pre></td></tr></table></figure><p>GetStaticFieldId用于获取静态域ID， 这两个函数均返回 jfieldID 类型的域ID.</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获得静态域的域ID</span><br><span class="line"></span><br><span class="line">jfieldID staticFieldId;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">staticFieldId</span> = <span class="params">(*env)</span>-&gt;</span>GetStaticFieldID(env, clazz, <span class="string">"staticField"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br></pre></td></tr></table></figure><p>两个函数的最后一个参数是Java中表示域类型的域描述符。在上述示例代码中，“Ljava/lang/String” 表明域类型是String。</p><blockquote><p>为了提高应用程序的性能，可以缓存域ID。一般总是缓存使用最频繁的域ID。</p></blockquote></li><li><p>2.获取域</p><p>在获得域ID之后，可以用Get&lt;Type&gt;Field 函数获得实际的实例域，</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获得实例域</span><br><span class="line"></span><br><span class="line"><span class="keyword">jstring </span><span class="keyword">instanceField;</span></span><br><span class="line"><span class="keyword">instanceField </span>= (*env)-&gt;GetObjectField(env, <span class="keyword">instance, </span><span class="keyword">instanceFieldId);</span></span><br></pre></td></tr></table></figure><p>用GetStatic&lt;Type&gt;Field函数获得静态域</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获得静态域</span><br><span class="line">jstring staticField;</span><br><span class="line">staticField = (*env)-&gt;<span class="constructor">GetStaticObjectField(<span class="params">env</span>, <span class="params">clazz</span>, <span class="params">staticFieldId</span>)</span>;</span><br></pre></td></tr></table></figure><p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p><blockquote><p>获得单个域值需要调用两到三个JNI函数，原生代码回到Java中获取每个单独的域值，这给应用程序增加了额外的负担，进而导致性能下降。强烈建议将所有需要的参数传递给原生方法调用，而不是让原生代码回到Java中。</p></blockquote></li></ul><h5 id="调用方法"><a class="markdownIt-Anchor" href="#调用方法"></a> 调用方法</h5><p>与域一样，Java中有两类方法：实例方法和静态方法。JNI 提供访问两类方法的函数， 如下代码给出了含有一个静态方法和一个实例方法的Java类。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">带有静态方法和实例方法的Java类</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClass</span> &#123;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">instanceMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"instance Method"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">staticMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Static Method"</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1.获取方法ID</p><p>JNI 提供了用方法ID访问两类方法的途径，可以用给定的实例的 class 对象获得方法ID。 用GetMethodID 函数获得实例方法的方法ID,</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获得实例方法的方法ID</span><br><span class="line"><span class="keyword">jmethodID </span><span class="keyword">instanceMethodId;</span></span><br><span class="line"><span class="keyword">instanceMethodId </span>= (*env)-&gt;GetMethodID(env, clazz, <span class="string">"instanceMethod"</span>, <span class="string">"()Ljava/lang/String;"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>用GetStaticMethodID 函数获得静态域的方法ID， 两个函数均返回 jmethodID 类型的方法ID.</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获得静态方法的方法ID</span><br><span class="line"></span><br><span class="line">jmethodID staticMethodId;</span><br><span class="line"><span class="function"><span class="title">staticMethodId</span> = <span class="params">(*env)</span>-&gt;</span>GetStaticMethodID(env, clazz, <span class="string">"staticMethod"</span>, <span class="string">"()Ljava/lang/String;"</span>);</span><br></pre></td></tr></table></figure><p>与字段ID获取方法一样，两个函数的最后一个参数均表示方法描述符，在Java中它表示方法签名。</p><blockquote><p>为了提升应用程序性能，可以缓存方法ID。一般总是缓存使用最频繁的方法ID。</p></blockquote></li><li><p>2.调用方法</p><p>可以以方法ID为参数通过Call&lt;Type&gt;Method 类函数调用实际的实例方法， 如下：</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用实例方法</span><br><span class="line"><span class="keyword">jstring </span><span class="keyword">instanceMethodResult;</span></span><br><span class="line"><span class="keyword">instanceMethodResult </span>= (*env)-&gt;CallStringMethod(env, <span class="keyword">instance, </span><span class="keyword">instanceMethodId);</span></span><br></pre></td></tr></table></figure><p>用CallStatic&lt;Type&gt;Field类函数调用静态方法，如下：</p>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用静态方法</span><br><span class="line">jstring staticMethodResult;</span><br><span class="line">staticMethodResult = (*env)-&gt;<span class="constructor">CallStaticStringMethod(<span class="params">env</span>, <span class="params">clazz</span>, <span class="params">staticMethodId</span>)</span>;</span><br></pre></td></tr></table></figure><p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p><blockquote><p>Java和原生代码之间的转换是代价较大的操作，强烈建议规划Java代码和原生代码的任务时考虑这种代价，最小化这种转换可以大大提高应用程序的性能。</p></blockquote></li><li><p>3.域和方法的描述符</p></li></ul><p>下表为 Java类型签名映射</p><table><thead><tr><th style="text-align:center">Java 类型</th><th style="text-align:center">签名</th></tr></thead><tbody><tr><td style="text-align:center">Boolean</td><td style="text-align:center">Z</td></tr><tr><td style="text-align:center">Byte</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">Char</td><td style="text-align:center">C</td></tr><tr><td style="text-align:center">Short</td><td style="text-align:center">S</td></tr><tr><td style="text-align:center">Int</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">Long</td><td style="text-align:center">J</td></tr><tr><td style="text-align:center">fully-qualified-class</td><td style="text-align:center">Lfully-qualified-class;</td></tr><tr><td style="text-align:center">type[]</td><td style="text-align:center">[type</td></tr><tr><td style="text-align:center">method type</td><td style="text-align:center">(arg-type)ret-type</td></tr></tbody></table><blockquote><p>用类型签名映射手工生成域和方法描述符并让它们与Java代码同步是一件非常繁琐的任务。通常都是借助Java的类文件反汇编程序：javap</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-NDK结构</title>
      <link href="/2018/12/28/Android-NDK%E7%BB%93%E6%9E%84/"/>
      <url>/2018/12/28/Android-NDK%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="android-ndk-的结构"><a class="markdownIt-Anchor" href="#android-ndk-的结构"></a> Android NDK 的结构</h3><ul><li>ndk-build: 该shell脚本是Android NDK构建系统的起始点。</li><li>ndk-gdb: 该shell脚本允许用GNU调试器调试原生组件。</li><li>ndk-stack: 该shell脚本可以帮助分析原生组件崩溃时的堆栈追踪</li><li>build: 该目录包含了Android NDK构建系统的所有模块。</li><li>platforms: 该目录包含了支持不同Android目标版本的头文件和库文件。</li><li>samples: 该目录包含了一些示例应用程序，这些程序可以体现Android NDK的性能。</li><li>sources: 该目录包含了可供开发人员导入到现有的Android NDK项目的一些共享模块。</li><li>toolchains: 该目录包含目录Android NDK支持的不用目标机体系结构的交叉编译器。Android NDK目前支持ARM、X86 和MIPS机体系结构。Android NDK 构建系统根据选定的体系结构使用不同的交叉编译器。</li></ul><a id="more"></a><p>使用NDK可以做什么：</p><ul><li>建立一个共享库</li><li>建立多种共享库</li><li>建立静态库</li><li>利用共享库共享通用模块</li><li>在多种NDK项目见共享模块</li><li>使用预建库</li><li>使用独立的可执行文件</li><li>其他构件系统变量和宏</li><li>定义新变量和条件操作</li></ul><h3 id="androidmk"><a class="markdownIt-Anchor" href="#androidmk"></a> <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a></h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := hello-jni</span><br><span class="line">LOCAL_SRC_FILES := hello-jni.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><blockquote><p>LOCAL_PATH := $(call my-dir)</p></blockquote><p>Android 构建系统利用LOCAL_PATH来定位源文件。因为将该变量设置为硬编码值并不合适，所以 Android 构建系统提供了一个名为 my-dir 的宏功能。通过该变量设置为 my-dir 宏功能的返回值， 可以将其放在当前目录下。</p><p>Android 构建系统将CLEAR_VARS变量设置为clear-vars.mk片段的位置。包含Makefile片段可以清除除了LOCAL_PATH以外的LOCAL_<name>变量，例如 LOCAL_MODULE 与 LOCAL_SRC_FILES 等。</name></p><blockquote><p>Include $(CLEAR_VARS)</p></blockquote><p>这样做是因为 Android 构建系统在单次执行中解析多个构建文件和模块定义，而LOCAL_<name>是全局变量。清除他们可以避免冲突，每一个原生组件被称为一个模块。</name></p><p>LOCAL_MODULE 变量用来给这些模块设定一个唯一的名称。下面的代码将该模块的名称设为 hello-jni:</p><blockquote><p>LOCAL_MODLE := hello-jni</p></blockquote><p>因为模块名称也被用于给构建过程所生成的文件命名，所以构建系统给该文件添加了适当的前缀和后缀。本例中， hello-jni 模块会生成一个共享库文件且构建系统会将它命名为<code>libhello-jni.so</code>。</p><p>用LOCAL_SRC_FILES变量定义用来建立和组装这个模块的源文件列表。</p><blockquote><p>LOCAL_SRC_FILES := hello-jni.c</p></blockquote><p>这里，hello-jni 模块只由一个源文件生成，而 LOCAL_SRC_FILES 变量可以包含用空格分开的多个源文件名。</p><hr><p>构建多个共享库模块的 <a href="http://Androd.mk" target="_blank" rel="noopener">Androd.mk</a> 构建文件</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 模块 1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := module1</span><br><span class="line">LOCAL_SRC_FILES := module1.c</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 模块2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := module2</span><br><span class="line">LOCAL_SRC_FILES := module2.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><hr><p>构建静态库的 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 构建文件</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 第三方 AVI 库</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := avilib</span><br><span class="line">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 原生模块</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := module</span><br><span class="line">LOCAL_SRC_FILES := module.c</span><br><span class="line"></span><br><span class="line">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><p>在将第三方代码模块生成静态库之后，共享库就可以通过将它的模块名添加到<code>LOCAL_STATIC_LIBRARIES</code> 变量中来使用该模块。</p><hr><h5 id="用共享库共享通用模块"><a class="markdownIt-Anchor" href="#用共享库共享通用模块"></a> 用共享库共享通用模块</h5><p>静态库可以保证源代码模块化；但是，在静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与同一个静态库连接时，需要将通用模块的多个副本与不同共享库重复相连，这样就增加了应用程序的大小。在这种情况下，不用构建静态库，而是将通用模块作为共享库建立起来，而动态连接依赖模块以便消除重复的副本。</p><p><a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件中共享库之间的代码共享</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 第三方 AVI 库</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := avilib</span><br><span class="line">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 原生模块1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULES := module1</span><br><span class="line">LOCAL_SRC_FILES := module1.c</span><br><span class="line"></span><br><span class="line">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 原生模块2</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := module2</span><br><span class="line">LOCAL_SRC_FILES := module2.c</span><br><span class="line"></span><br><span class="line">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><hr><h5 id="不同ndk项目间共享模块"><a class="markdownIt-Anchor" href="#不同ndk项目间共享模块"></a> 不同NDK项目间共享模块</h5><p><strong>注意：</strong> 在 Android NDK 构建系统中，共享模块路径不能包含空格。</p><ul><li>作为共享模块，avilib 需要自己的 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件</li></ul><p>共享 avilib 模块的 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 第三方 AVI 库</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := avilib</span><br><span class="line">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><p>使用共享模块的 NDK项目</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 原生模块</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := module</span><br><span class="line">LOCAL_SRC_FILES := module.c</span><br><span class="line">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">call</span> import-module, transcode/avilib)</span></span><br></pre></td></tr></table></figure><ul><li>import-module 函数库需要先定位共享模块，然后再将它导入到 NDK 项目中。默认情况下，import-module 函数库只搜索<android ndk>/sources 目录。为了搜索 c:\android\shared-modules 目录，定义一个名为 <code>NDK_MODULE_PATH</code> 的新环境变量并将它设置成共享库的根目录，例如：c:\android\shared-modules。</android></li></ul><hr><p>预构建共享模块的 <code>Android.mk</code> 文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 第三方预构建 AVI 库</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := avilib</span><br><span class="line">LOCAL_SRC_FILES := libavilib.so</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><p><code>LOCAL_SRC_FILES</code> 变量指向的不是源文件，而是实际 Prebuilt 库相对于 <code>LOCAL_PATH</code> 的位置。</p><p><strong>注意:</strong> Prebuilt 库定义中不包含任何关于该库所构建的实际机器体系结构的信息。开发人员需要确保 Prebuilt 库是为与 NDK 项目相同的机器的体系结构而构建的。</p><p><code>PREBUILT_SHARED_LIBRARY</code> 变量指向 <a href="http://prebuilt-shared-library.mk" target="_blank" rel="noopener">prebuilt-shared-library.mk</a> MakeFile 片段。它什么都没有构建，但是它将Prebuilt 库复制到 NDK 项目的libs目录下。通过使用 <code>PREBUILT_STATIC_LIBRARY</code> 变量，静态库可以像共享库一样被用作 Prebuilt 库，NDK 项目可以像普通共享库一样使用 Prebuilt库了。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><p>独立可执行模块的 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件</p> <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 独立的可执行的原生模块</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line">LOCAL_MODULE := module</span><br><span class="line">LOCAL_SRC_FILES := module.c</span><br><span class="line"></span><br><span class="line">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure><p><code>BUILD_EXECUTABLE</code> 变量指向 <a href="http://build-executable.mk" target="_blank" rel="noopener">build-executable.mk</a> Makefile 片段，该片段包含了在 Android 平台上生成独立可执行文件的必要步骤。独立可执行文件以与模块相同的名称被放在libs/<machine architecture>目录下。尽管放在该目录下，但在打包阶段它并没有被包含在APK文件中。</machine></p><hr><h4 id="其他构建系统变量"><a class="markdownIt-Anchor" href="#其他构建系统变量"></a> 其他构建系统变量</h4><p>构建系统定义的变量有：</p><ul><li><code>TARGET_ARCH</code>: 目标 CPU 体系结构的名称，例如 arm</li><li><code>TARGET_PLATFORM</code>: 目标 Android 平台的名称，例如: android-8</li><li><code>TARGET_ARCH_ABI</code>: 目标CPU体系结构和ABI的名称，例如：armeabi-v7a</li><li><code>TARGET_ABI</code>: 目标平台和 ABI 的串联，例如：android-7-armeabi-v7a</li></ul><p>可被定义为模块说明部分的变量有：</p><ul><li><p><code>LOCAL_MODULE_FILENAME</code>: 可选变量，用来重新定义生成的输出文件名称。默认情况下，构建系统使用<code>LOCAL_MODULE</code> 的值作为生成的输出文件名称，但变量 <code>LOCAL_MODULE_FILENAME</code> 可以覆盖 <code>LOCAL_MODULE</code> 的值。</p></li><li><p><code>LOCAL_CPP_EXTENSION</code>: C<ins>源文件的默认扩展名是 .cpp。这个变量可以用来为C</ins>源代码指定一个或多个文件扩展名。</p></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">LOCAL_CPP_EXTENSION := <span class="string">.cpp</span> <span class="string">.cxx</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_CPP_FEATURES</code>: 可选变量，用来指明模块所依赖的具体 C++ 特性，如 RTTI 、 exceptions 等。</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">LOCAL_CPP_FEATURES := rtti</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_C_INCLUDES</code>: 可选目录列表，NDK 安装目录的相对路径，用来搜索头文件</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">LOCAL_C_INCLUDES := sources/shared-module</span><br><span class="line">LOCAL_C_INCLUDES := <span class="variable">$(LOCAL_PATH)</span>/<span class="keyword">include</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_CFLAGS</code>: 一组可选的编译器标志，在编译C和C++源文件的时候会被传送给编译器。</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">..</span>.</span><br><span class="line">LOCAL_CFLAGS := -DNDEBUG <span class="attribute">-DPORT</span>=1234</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_CPP_FLAGS</code>: 一组可选的编译标志，在只编译C++源文件时被传送给编译器。</li><li><code>LOCAL_WHOLE_STATIC_LIBRARIES</code>:<code>LOCAL_STATIC_LIBRARIES</code> 的变体，用来指明应该被包含在生成的共享库中的所有静态库内容。</li></ul><p><strong>小贴士</strong>: 当几个静态库之间有循环依赖时，<code>LOCAL_WHOLE_STATIC_LIBRARIES</code> 很有用。</p><ul><li><code>LOCAL_LDLIBS</code>:链接标志的可选列表，当对目标文件进行链接以生成输出文件时该标志将被传送给链接器。它主要用于传送要进行动态链接的系统库列表。<br>例如：要与 Android NDK 日志库链接，使用以下代码：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_LDFLAGS := -llog</span><br></pre></td></tr></table></figure><p>-<code>LOCAL_ALLOW_UNDEFINED_SYMBOLS</code>: 可选参数，它禁止在生成的文件中进行缺失符号检查。若没有定义，链接器会在符号缺失时生成错误信息。</p><ul><li><code>LOCAL_ARM_MODE</code>: 可选参数，ARM机器体系结构特有变量，用于指定要生成的ARM 二进制类型。默认情况下，构建系统在拇指模式下用16位指令生成，但该变量可以被设置为 arm 来指定使用 32 位指令。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_ARM_MODE := arm</span><br></pre></td></tr></table></figure><p>该变量改变了整个模块的构建系统行为；可以用 .arm扩展名指定只在 arm 模式下构建特定文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILES :=file1<span class="selector-class">.c</span> file2<span class="selector-class">.c</span><span class="selector-class">.arm</span></span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_ARM_NEON</code>: 可选参数，ARM机器体系结构特有变量，用来指定在源文件中应该使用的 ARM 高级单指令多数据流(Single Instruction Multiple Data,SIMD)(a.k.a. NEON)内联函数。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_ARM_NEON := <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>该变量改变了整个模块的构建系统行为；可以用.neon 扩展名指定只构建带有NEON内联函数的特定文件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILES :=file1<span class="selector-class">.c</span> file2<span class="selector-class">.c</span><span class="selector-class">.neon</span></span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_DISABLE_NO_EXECUTE</code>:可选变量，用来禁用 NX Bit 安全特性。 NX Bit代表 Never Execute(永不执行)，它是在CPU中使用的一项技术，用来隔离代码区和存储区。这样可以防止恶意软件通过将它的代码插入应用程序的存储区来控制应用程序。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_DISABLE_NO_EXECUTE :=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><code>LOCAL_EXPORT_CFLAGS</code>: 该变量记录一组编译器标志，这些编译器标志会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code>或<code>LOCAL_SHARED_LIBRARIES</code>使用本模块的其他模块的LOCAL_CFLAGS 定义中。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := avilib</span><br><span class="line">...</span><br><span class="line">LOCAL_EXPORT_CFLAGS := -DENABLE_AUDIO</span><br><span class="line">...</span><br><span class="line">LOCAL_MODULE := module1</span><br><span class="line">LOCAL_CFLAGS := -DDEBUG</span><br><span class="line">...</span><br><span class="line">LOCAL_SHARED_LIBRARIES := avilib</span><br></pre></td></tr></table></figure><p>编译器在构建 module1 时会以-DENABLE_AUDIO -DDEBUG 标志执行。</p><ul><li><code>LOCAL_EXPORT_CPPFLAGS</code>： 和<code>LOCAL_EXPORT_CFLAGS</code>一样，但是它是C++特定代码编译器标志。</li><li><code>LOCAL_EXPORT_LDFLAGS</code>: 和 <code>LOCAL_EXPORT_CFLAGS</code>一样，但用作链接器标志。</li><li><code>LOCAL_EXPORT_C_INCLUDES</code>:该变量允许记录路径集，这些路径会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code> 或 <code>LOCAL_SHARED_LIBRARIES</code> 使用该模块的 <code>LOCAL_C_INCLUDES</code> 定义中。</li><li><code>LOCAL_SHORT_COMMANDS</code>: 对于有大量资源或独立的静态/共享库的模块，该变量应该被设置为 true. 诸如Windows 之类的操作系统只允许命令行最多输入8191个字符；该变量通过分解构建命令使其长度小于8191个字符。在较小的模块中不推荐使用该方法，因为使用它会让构建过程变慢。</li><li><code>LOCAL_FILTER_ASM</code>:该变量定义了用于过滤来自<code>LOCAL_SRC_FILES</code>变量的装配文件的应用程序。</li></ul><hr><p>包含条件操作的构建文件 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ife<span class="string">q ($(TARGET_ARCH)</span>, arm)</span><br><span class="line">LOCAL_SRC_FILES += armonly.c</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LOCAL_SRC_FILES += generic.c</span><br><span class="line">endif</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="applicationmk"><a class="markdownIt-Anchor" href="#applicationmk"></a> <a href="http://Application.mk" target="_blank" rel="noopener">Application.mk</a></h3><p><a href="http://xn--Application-cq8qr2g328j.mk" target="_blank" rel="noopener">以下是Application.mk</a> 构建文件指出的变量：</p><ul><li><code>APP_MODULES</code>: 默认情况下，Android NDK 构建系统构建 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 文件声明的所有模块。该变量可以覆盖上述行为并提供一个空格分开的、需要被构建的模块列表。</li><li><code>APP_OPTIM</code>: 该变量可以被设置为 release 或 debug 以改变生成的二进制文件的优化级别。默认情况下使用的是 release 模式，并且此时生成的二进制文件被高度优化。该变量可以被设置为debug模式以生成更容易调试的未优化二进制文件。</li><li><code>APP_CLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C 和 C++源文件时这些标志都会被传给编译器。</li><li><code>APP_CPPFLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C++ 源文件时这些标志都会被传给编译器。</li><li><code>APP_BUILD_SCRIPT</code>:默认情况下， Android NDK 构建系统在项目的 jni 子目录下查找 <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a> 构建文件。可以用该变量改变上述行为，并使用不同的生成文件。</li><li><code>APP_ABI</code>:默认情况下，Android NDK构建系统为armeabi  ABI 生成二进制文件。可以用该变量改变上述行为，并为其他 ABI 生成二进制文件，例如：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">APP_ABI :=mips</span><br><span class="line">另外， 可以设置多个 ABI </span><br><span class="line">APP_ABI := armeabi mips</span><br><span class="line"></span><br><span class="line">为所有支持的ABI生成二进制文件</span><br><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure><ul><li><code>APP_STL</code>: 默认情况下， Android NDK 构建系统使用最小 STL 运行库，也被称为system库。可以用该变量选择不同的STL实现。</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_STL :=stlport_shared</span><br></pre></td></tr></table></figure><ul><li><code>APP_GNUSTL_FORCE_CPP_FEATURES</code>: 与 <code>LOCAL_CPP_EXTENSIONS</code> 变量相似，该变量表明所有模块都依赖于具体的C++特性， 如RTTI 、exceptions 等。</li><li><code>APP_SHORT_COMMANDS</code>: 与 <code>LOCAL_SHORT_COMMANDS</code> 变量相似，该变量使得构建系统在有大量源文件的情况下可以在项目中使用更短的命令。</li></ul>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ndk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下查看监听端口对应的进程</title>
      <link href="/2018/12/10/linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%E5%AF%B9%E5%BA%94%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/12/10/linux%E4%B8%8B%E6%9F%A5%E7%9C%8B%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3%E5%AF%B9%E5%BA%94%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h4><h5 id="1通过lsof命令查看pid"><a class="markdownIt-Anchor" href="#1通过lsof命令查看pid"></a> 1.通过lsof命令查看PID</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ipv4</span><br><span class="line">[<span class="symbol">root@</span>test proc]# lsof -Pnl +M -i4          </span><br><span class="line">COMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME</span><br><span class="line">java       <span class="number">1419</span>     <span class="number">1401</span>   <span class="number">10</span>u  IPv4 <span class="number">6793357</span>       TCP *:<span class="number">8453</span> (LISTEN)</span><br><span class="line">AutonomyD  <span class="number">6147</span>     <span class="number">1401</span>    <span class="number">6</span>u  IPv4 <span class="number">7597365</span>       TCP *:<span class="number">20003</span> (LISTEN)</span><br><span class="line">AutonomyD  <span class="number">6147</span>     <span class="number">1401</span>   <span class="number">14</span>u  IPv4 <span class="number">7597369</span>       TCP *:<span class="number">20000</span> (LISTEN)</span><br><span class="line">也可以使用:</span><br><span class="line">[<span class="symbol">root@</span>test proc]# lsof -Pnl +M -i4|grep <span class="number">8453</span></span><br><span class="line">java       <span class="number">1419</span>     <span class="number">1401</span>   <span class="number">10</span>u  IPv4 <span class="number">6793357</span>       TCP *:<span class="number">8453</span> (LISTEN)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ipv6</span><br><span class="line">[root@test proc]# lsof -Pnl +M -i6</span><br><span class="line">COMMAND     PID    <span class="built_in"> USER </span>  FD  <span class="built_in"> TYPE </span> DEVICE SIZE NODE NAME</span><br><span class="line">java       1419     1401  286u <span class="built_in"> IPv6 </span>7616547       TCP 192.168.1.29:55829-&gt;192.168.1.17:7001 (CLOSE_WAIT)</span><br><span class="line">java       1419     1401  290u <span class="built_in"> IPv6 </span>6987470       TCP 192.168.1.29:33836-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class="line">java       1419     1401  297u <span class="built_in"> IPv6 </span>6793642       UDP *:1133 </span><br><span class="line">java       1419     1401  304u <span class="built_in"> IPv6 </span>6987472       TCP 192.168.1.29:33838-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class="line">java       1419     1401  306u <span class="built_in"> IPv6 </span>6987479       TCP 192.168.1.29:33839-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class="line">java       1419     1401  307u <span class="built_in"> IPv6 </span>7006208       TCP 192.168.1.29:60340-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class="line">也可以使用:</span><br><span class="line">[root@test proc]# lsof -Pnl +M -i6|grep 5001</span><br><span class="line">java      12886        0  530u <span class="built_in"> IPv6 </span>6988341       TCP *:5001 (LISTEN)</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2通过ps命令查看进程情况"><a class="markdownIt-Anchor" href="#2通过ps命令查看进程情况"></a> 2.通过ps命令查看进程情况</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test proc]# ps -ef|<span class="keyword">grep</span> <span class="number">12886</span></span><br><span class="line">root     <span class="number">12886</span> <span class="number">12851</span>  <span class="number">0</span> Dec09 ?        <span class="number">00</span>:<span class="number">00</span>:<span class="number">43</span> <span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>jdk160_05<span class="regexp">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class="number">8000</span> -XX:PermSize=<span class="number">48</span>m -XX:MaxPermSize=<span class="number">128</span>m -Xverify:none -da -Dplatform.home=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>wlserver_10.<span class="number">3</span> -Dwls.home=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>wlserver_10.<span class="number">3</span><span class="regexp">/server -Dweblogic.home=/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class="keyword">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>patch_wlw1030<span class="regexp">/profiles/</span><span class="keyword">default</span><span class="regexp">/sysext_manifest_classpath:/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/patch_wls1030/</span>profiles<span class="regexp">/default/</span>sysext_manifest_classpath:<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>patch_cie660<span class="regexp">/profiles/</span><span class="keyword">default</span><span class="regexp">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/wlserver_10.3/</span>server<span class="regexp">/lib/</span>weblogic.policy weblogic.Server</span><br></pre></td></tr></table></figure><h5 id="3lsof命令参数解释"><a class="markdownIt-Anchor" href="#3lsof命令参数解释"></a> 3.lsof命令参数解释</h5><ul><li><ol><li>-P :这个选项约束着网络文件的端口号到端口名称的转换。约束转换可以使lsof运行得更快一些。在端口名称的查找不能奏效时，这是很有用的。</li></ol></li><li><ol start="2"><li>-n : 这个选项约束着网络文件的端口号到主机名称的转换。约束转换可以使lsof的运行更快一些。在主机名称的查找不能奏效时，它非常有用。</li></ol></li><li><ol start="3"><li>-l :这个选项约束着用户ID号到登录名的转换。在登录名的查找不正确或很慢时，这个选项就很有用。</li></ol></li><li><ol start="4"><li>+M :此选项支持本地TCP和UDP端口映射程序的注册报告。</li></ol></li><li><ol start="5"><li>-i4 :仅列示IPv4协议下的端口。</li></ol></li><li><ol start="6"><li>-i6 : 仅列示IPv6协议下的端口。</li></ol></li></ul><h4 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二：</h4><h5 id="1使用netstat查看进程pid"><a class="markdownIt-Anchor" href="#1使用netstat查看进程pid"></a> 1.使用netstat查看进程PID</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>test ~]#  netstat -anp|grep <span class="number">5001</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> :::<span class="number">5001</span>                     :::*                        LISTEN      <span class="number">12886</span>/java</span><br></pre></td></tr></table></figure><h5 id="2使用ps查看进程情况"><a class="markdownIt-Anchor" href="#2使用ps查看进程情况"></a> 2.使用ps查看进程情况</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test <span class="number">12886</span>]# ps -ef|<span class="keyword">grep</span> <span class="number">12886</span></span><br><span class="line">root     <span class="number">12886</span> <span class="number">12851</span>  <span class="number">0</span> Dec09 ?        <span class="number">00</span>:<span class="number">01</span>:<span class="number">14</span> <span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>jdk160_05<span class="regexp">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class="number">8000</span> -XX:PermSize=<span class="number">48</span>m -XX:MaxPermSize=<span class="number">128</span>m -Xverify:none -da -Dplatform.home=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>wlserver_10.<span class="number">3</span> -Dwls.home=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>wlserver_10.<span class="number">3</span><span class="regexp">/server -Dweblogic.home=/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class="keyword">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>patch_wlw1030<span class="regexp">/profiles/</span><span class="keyword">default</span><span class="regexp">/sysext_manifest_classpath:/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/patch_wls1030/</span>profiles<span class="regexp">/default/</span>sysext_manifest_classpath:<span class="regexp">/home/</span>bjca<span class="regexp">/bea/</span>patch_cie660<span class="regexp">/profiles/</span><span class="keyword">default</span><span class="regexp">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class="regexp">/bjca/</span>bea<span class="regexp">/wlserver_10.3/</span>server<span class="regexp">/lib/</span>weblogic.policy weblogic.Server</span><br><span class="line">root     <span class="number">27592</span> <span class="number">27546</span>  <span class="number">0</span> <span class="number">09</span>:<span class="number">11</span> pts<span class="regexp">/2    00:00:00 grep 12886</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wireshark过滤器规则</title>
      <link href="/2018/12/10/wireshark%E8%BF%87%E6%BB%A4%E5%99%A8%E8%A7%84%E5%88%99/"/>
      <url>/2018/12/10/wireshark%E8%BF%87%E6%BB%A4%E5%99%A8%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h4 id="一-ip过滤包括来源ip或者目标ip等于某个ip"><a class="markdownIt-Anchor" href="#一-ip过滤包括来源ip或者目标ip等于某个ip"></a> 一、IP过滤：包括来源IP或者目标IP等于某个IP</h4><p>比如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ip</span>.src addr==<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.208</span>  <span class="keyword">or</span> <span class="built_in">ip</span>.src addr eq <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.208</span> 显示来源<span class="built_in">IP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ip</span>.dst addr==<span class="number">192.168</span><span class="meta">.0</span><span class="meta">.208</span>  <span class="keyword">or</span> <span class="built_in">ip</span>.dst addr eq <span class="number">192.168</span><span class="meta">.0</span><span class="meta">.208</span> 显示目标<span class="built_in">IP</span></span><br></pre></td></tr></table></figure><h4 id="二-端口过滤"><a class="markdownIt-Anchor" href="#二-端口过滤"></a> 二、端口过滤：</h4><p>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> tcp<span class="selector-class">.port</span> eq <span class="number">80</span> <span class="comment">// 不管端口是来源的还是目标的都显示</span></span><br><span class="line"> tcp<span class="selector-class">.port</span> == <span class="number">80</span></span><br><span class="line"> tcp<span class="selector-class">.port</span> eq <span class="number">2722</span></span><br><span class="line"> tcp<span class="selector-class">.port</span> eq <span class="number">80</span> or udp<span class="selector-class">.port</span> eq <span class="number">80</span></span><br><span class="line"> tcp<span class="selector-class">.dstport</span> == <span class="number">80</span> <span class="comment">// 只显tcp协议的目标端口80</span></span><br><span class="line"> tcp<span class="selector-class">.srcport</span> == <span class="number">80</span> <span class="comment">// 只显tcp协议的来源端口80</span></span><br><span class="line"></span><br><span class="line">过滤端口范围</span><br><span class="line">tcp<span class="selector-class">.port</span> &gt;= <span class="number">1</span> and tcp<span class="selector-class">.port</span> &lt;= <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="三-协议过滤tcp"><a class="markdownIt-Anchor" href="#三-协议过滤tcp"></a> 三、协议过滤：tcp</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">udp</span><br><span class="line">arp</span><br><span class="line">icmp</span><br><span class="line">http</span><br><span class="line">smtp</span><br><span class="line">ftp</span><br><span class="line">dns</span><br><span class="line">msnms</span><br><span class="line">ip</span><br><span class="line">ssl</span><br><span class="line">等等</span><br><span class="line">排除ssl包，如!ssl 或者  <span class="keyword">not</span> ssl</span><br></pre></td></tr></table></figure><h4 id="四-包长度过滤"><a class="markdownIt-Anchor" href="#四-包长度过滤"></a> 四、包长度过滤：</h4><p>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">udp<span class="selector-class">.length</span> == <span class="number">26</span> 这个长度是指udp本身固定长度<span class="number">8</span>加上udp下面那块数据包之和</span><br><span class="line">tcp<span class="selector-class">.len</span> &gt;= <span class="number">7</span>  指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><span class="line">ip<span class="selector-class">.len</span> == <span class="number">94</span> 除了以太网头固定长度<span class="number">14</span>,其它都算是ip<span class="selector-class">.len</span>,即从ip本身到最后</span><br><span class="line">frame<span class="selector-class">.len</span> == <span class="number">119</span> 整个数据包长度,从eth开始到最后</span><br></pre></td></tr></table></figure><h4 id="五-http模式过滤"><a class="markdownIt-Anchor" href="#五-http模式过滤"></a> 五、http模式过滤：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例子:</span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “GET”</span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “POST”</span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.uri</span> == “/img/logo-edu.gif”</span><br><span class="line">http contains “GET”</span><br><span class="line">http contains “HTTP/<span class="number">1</span>.”</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET包</span></span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “GET” &amp;&amp; http contains “Host: ”</span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “GET” &amp;&amp; http contains “User-Agent: ”</span><br><span class="line"><span class="comment">// POST包</span></span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “POST” &amp;&amp; http contains “Host: ”</span><br><span class="line">http<span class="selector-class">.request</span><span class="selector-class">.method</span> == “POST” &amp;&amp; http contains “User-Agent: ”</span><br><span class="line"><span class="comment">// 响应包</span></span><br><span class="line">http contains “HTTP/<span class="number">1.1</span> <span class="number">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class="line">http contains “HTTP/<span class="number">1.0</span> <span class="number">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class="line">一定包含如下</span><br><span class="line">Content-Type:</span><br></pre></td></tr></table></figure><h4 id="六-连接符-and-or"><a class="markdownIt-Anchor" href="#六-连接符-and-or"></a> 六、连接符 and / or</h4><h4 id="七-表达式"><a class="markdownIt-Anchor" href="#七-表达式"></a> 七、表达式：</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!(arp.src==<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>) <span class="keyword">and</span> !(arp.dst.proto_ipv4==<span class="number">192.168</span><span class="number">.1</span><span class="number">.243</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git submodule的使用</title>
      <link href="/2018/12/10/git-submodule%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/12/10/git-submodule%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h3><p>为当前工程添加submodule，命令如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">submodule </span><span class="keyword">add </span>仓库地址 路径</span><br></pre></td></tr></table></figure><p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br><strong>注意</strong>：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能顺利 clone）</p><p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。</p><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。</p><h3 id="下载的工程带有submodule"><a class="markdownIt-Anchor" href="#下载的工程带有submodule"></a> 下载的工程带有submodule</h3><p>当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">submodule</span> <span class="comment">update</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">init</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">recursive</span></span><br></pre></td></tr></table></figure><p>即可将子模块内容下载下来后工程才不会缺少相应的文件。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android.mk简介</title>
      <link href="/2018/12/07/Android-mk%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/12/07/Android-mk%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="androidmk简介"><a class="markdownIt-Anchor" href="#androidmk简介"></a> Android.mk简介</h2><p><a href="https://blog.csdn.net/fyfcauc/article/details/27545507" target="_blank" rel="noopener">跳转链接</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime快捷键</title>
      <link href="/2018/08/15/Sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/08/15/Sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="sublime快捷键"><a class="markdownIt-Anchor" href="#sublime快捷键"></a> Sublime快捷键</h1><a id="more"></a><hr><p>Alt+R : 开启正则表达式功能</p><p>Alt+Enter: 找到匹配目标后全部选择</p><p>Ctrl+R：前往 method（mac下⌘R）</p><p>Ctrl+M：跳转到对应括号</p><p>按Ctrl+Shift+上下键，可替换行</p><p>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</p><p>Ctrl+L：选择行，重复可依次增加选择下一行</p><p>Ctrl+Shift+P：打开命令面板</p><p>Ctrl+P：搜索项目中的文件（mac下⌘P），在里面输入：</p><p>admi@auto 可以定位到相应文件夹(admin.html)下的相应方法（auto）。</p><p>Ctrl+G：跳转到第几行</p><p>Ctrl+W：关闭当前打开文件</p><p>Ctrl+Shift+W：关闭所有打开文件</p><p>Ctrl+Shift+V：粘贴并格式化</p><p>Ctrl+Shift+L：选择多行</p><p>Ctrl+Shift+Enter：在当前行前插入新行</p><p>Ctrl+X：删除当前行</p><p>Ctrl+U：软撤销，撤销光标位置</p><p>Ctrl+J：选择标签内容</p><p>Ctrl+F：查找内容</p><p>Ctrl+Shift+F：查找并替换</p><p>Ctrl+H：替换</p><p>Ctrl+N：新建窗口</p><p>Ctrl+K+B：开关侧栏</p><p>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p><p>Ctrl+F2：设置/删除标记</p><p>Ctrl+/：注释当前行</p><p>Ctrl+Shift+/：当前位置插入注释</p><p>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</p><p>Ctrl+Shift+A：选择当前标签前后，修改标签用的</p><p>F11：全屏</p><p>Shift+F11：全屏免打扰模式，只编辑当前文件</p><p>Alt+F3：选择所有相同的词</p><p>Alt+.：闭合标签</p><p>Alt+Shift+数字：分屏显示</p><p>Alt+数字：切换打开第N个文件</p><p>Shift+右键拖动：光标多不，用来更改或插入列内容</p><p>鼠标的前进后退键可切换Tab文件</p><p>按Ctrl，依次点击或选取，可需要编辑的多个位置</p><p>Ctrl+shift+D: 备份多个当前行</p><p>Ctrl+shift+T: 恢复已经关闭的标签</p><h2 id="编辑"><a class="markdownIt-Anchor" href="#编辑"></a> 编辑</h2><p>Ctrl + X 删除某行</p><p>Ctrl + shift+ ↑ 将某行上移</p><p>Ctrl + shift + ↓ 将某行下移</p><p>Ctrl + L 选择一行</p><p>Ctrl + D 选择一个字符，可以连续选择‘button’‘a’….</p><p>Ctrl + KK 删除从游标到该行末尾的字符</p><p>Ctrl + K + ⌫ 删除从游标到该行最前的字符</p><p>Ctrl + ] 缩进该行</p><p>Ctrl + [ 取消缩进该行</p><p>Ctrl + shift + D 复制该行</p><p>Ctrl + J 将多行合并</p><p>Ctrl + / 将该行注释</p><p>Ctrl + shift + / 将整段注释</p><p>Ctrl + Alt + Up 向上连续选中</p><p>Ctrl + Alt + Down 向下连续选中</p><h2 id="快速定位"><a class="markdownIt-Anchor" href="#快速定位"></a> 快速定位</h2><p>Ctrl + P 快速打开文件（根据文件名）</p><p>Ctrl + R 快速找到标识charset id style….</p><p>Ctrl + ; 找word</p><p>Ctrl + G 迅速到某一行</p><h2 id="一般命令"><a class="markdownIt-Anchor" href="#一般命令"></a> 一般命令</h2><p>Ctrl + shift + P 打开控制面板</p><p>Ctrl + KB 隐藏侧边栏</p><p>Ctrl + shift + Alt + P Show scope in status bar</p><h2 id="查找替换"><a class="markdownIt-Anchor" href="#查找替换"></a> 查找/替换</h2><p>Ctrl + F 查找</p><p>Ctrl + H 替换</p><p>Ctrl + shift + F 在文件中查找</p><h2 id="标签组"><a class="markdownIt-Anchor" href="#标签组"></a> 标签组</h2><p>Ctrl + shift + t 打开最近关闭的标签</p><p>Ctrl + PgUp 标签之间逆向切换</p><p>Ctrl + PgDn 标签之间正向切换</p><p>Alt + [NUM] 跳到第NUM个标签</p><h2 id="分离窗口"><a class="markdownIt-Anchor" href="#分离窗口"></a> 分离窗口</h2><p>Alt + shift + 2/3 窗口分为两/三列</p><p>Alt + shift + 1 合并窗口</p><p>Ctrl + [NUM] 跳到第NUM个窗口</p><h2 id="书签"><a class="markdownIt-Anchor" href="#书签"></a> 书签</h2><p>Ctrl + F2 转换书签</p><p>F2 下一个书签</p><p>shift + F2 上一个书签</p><p>Ctrl +shift + F2 清除书签</p><h2 id="大小写转换"><a class="markdownIt-Anchor" href="#大小写转换"></a> 大小写转换</h2><p>Ctrl + KU 转换为大写<br>Ctrl + KL 转换为小写</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Cheat Sheet</title>
      <link href="/2018/05/18/Vim-Cheat-Sheet/"/>
      <url>/2018/05/18/Vim-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<h4 id="光标"><a class="markdownIt-Anchor" href="#光标"></a> 光标</h4><ul><li>h - 左移光标</li><li>j - 下移光标</li><li>k - 上移光标</li><li>l - 右移光标</li><li>w - 移动到下个单词开头</li><li>W - 移动到下个单词开头(单词含标点)</li><li>e - 移动到下个单词结尾</li><li>E - 移动到下个单词结尾(单词含标点)</li><li>b - 移动到上个单词结尾</li><li>B -移动到上个单词结尾(单词含标点)</li><li>O - 移动到行首</li><li>^ - 移动到行首的非空白符</li><li>$ - 移动到行尾</li><li>G - 移动到文档末行行首</li><li>{n}G - 移动到第{n}行</li></ul><p>Tip: 命令前追加数字表示命令的重复次数，比如5j表示向下移动4行</p><a id="more"></a><h4 id="插入模式-插入追加文本"><a class="markdownIt-Anchor" href="#插入模式-插入追加文本"></a> 插入模式 - 插入/追加文本</h4><ul><li>i - 从光标前开始插入字符</li><li>I - 从行首开始插入字符</li><li>a - 从光标后开始插入字符</li><li>A - 从行尾开始插入字符</li><li>o - 在当前行之下另起一行，开始插入字符</li><li>O - 在当前行至上另起一行，开始插入字符</li><li>ea - 从当前单词末尾开始插入</li><li>Esc - 退出插入模式</li></ul><h4 id="编辑"><a class="markdownIt-Anchor" href="#编辑"></a> 编辑</h4><ul><li>r - 替换当前字符</li><li>J - 将下一行合并到当前行</li><li>cc - 清空当前行，然后进入插入模式</li><li>cw - 从光标位置开始，修改单词</li><li>c$ - 从光标位置开始，修改当前行</li><li>s - 删除当前字符，然后进入插入模式</li><li>S - 清空当前行，然后进入插入模式(同cc)</li><li>xp - 当前字符后移</li><li>u - 撤销</li><li>Ctrl + r - 重复</li><li>.- 再次执行上个命令</li></ul><h4 id="选择文本可视化模式"><a class="markdownIt-Anchor" href="#选择文本可视化模式"></a> 选择文本(可视化模式)</h4><ul><li>v - 进入可视化模式，移动光标高亮选择，然后可以对选择的文本执行命令(例如y-复制)</li><li>V - 进入可视化模式(行粒度选择)</li><li>o - 切换光标到选择区开头/结尾</li><li>Ctrl + v - 进入可视化模式(矩阵选择)</li><li>O - 切换光标到选择区的角</li><li>aw - 选择当前单词</li><li>ab - 选择被()包裹的区域(含括号)</li><li>aB - 选择被{}包裹的区域(含花括号)</li><li>ib - 选择被()包裹的区域(不含括号)</li><li>iB - 选择被{}包裹的区域(不含花括号)</li><li>Esc - 退出可视化模式</li></ul><h4 id="可视化模式命令"><a class="markdownIt-Anchor" href="#可视化模式命令"></a> 可视化模式命令</h4><ul><li>&lt; - 向左缩进 | &gt; - 向右缩进</li><li>y - 复制</li><li>d - 剪切</li><li>~ - 大小写切换</li></ul><h4 id="剪切-复制-粘贴"><a class="markdownIt-Anchor" href="#剪切-复制-粘贴"></a> 剪切、复制、粘贴</h4><ul><li>yy - 复制当前行</li><li>2yy - 复制2行</li><li>yw - 复制当前单词</li><li>y$ - 复制，从光标位置到行末</li><li>p - 在光标后粘贴</li><li>P - 在光标前粘贴</li><li>dd - 剪切当前行</li><li>2dd - 剪切2行</li><li>dw - 剪切当前单词</li><li>D - 剪切，从光标位置到行末</li><li>d$ - 剪切，从光标位置到行末(同D)</li><li>x - 剪切当前字符</li></ul><h4 id="查找替换"><a class="markdownIt-Anchor" href="#查找替换"></a> 查找/替换</h4><ul><li>/pattern - 查找pattern</li><li>?pattern - 向上查找pattern</li><li>n - 查找下一个</li><li>N - 查找上一个</li><li>:%s/old/new/g - 替换全部</li><li>:%s/old/new/gc - (逐个)替换</li></ul><h4 id="多文件"><a class="markdownIt-Anchor" href="#多文件"></a> 多文件</h4><ul><li>:e filename - 新建缓冲区打开filename</li><li>:bnext or :bn - 切换到下个缓冲区</li><li>:bprev or :bp - 切换到上个缓冲区</li><li>:bd - 关闭缓冲区</li><li>:sp filename - 新建缓冲区打开 filename 并水平分栏</li><li>:vsp filename - 新缓冲区打开 filename 并垂直分栏</li><li>Ctrl + ws - 水平分栏</li><li>Ctrl + ww - 在分栏间切换</li><li>Ctrl + wq - 关闭分栏</li><li>Ctrl + wv - 垂直分栏</li><li>Ctrl + wh - 切换到右侧分栏</li><li>Ctrl + wl - 切换到左侧分栏</li><li>Ctrl + wj - move cursor to the window below (horizontal split)</li><li>Ctrl + wk - move cursor to the window above (horizontal split)</li></ul><h4 id="页签"><a class="markdownIt-Anchor" href="#页签"></a> 页签</h4><ul><li>:tabnew filename or :tabn filename - 创建新页签/在新标签页中打开文档</li><li>Ctrl + wT - 将分栏变成页签</li><li>gt or :tabnext or :tabn - 切换到下一个页签</li><li>gT or :tabprev or :tabp - 切换到上一个页签</li><li>Xgt - 切换到第X个页签</li><li>:tabmove # - 移动页签到第 # 位(下标从0开始)</li><li>:tabclose or :tabc - 关闭当前页签</li><li>:tabonly or :tabo - 关闭其他页签</li></ul><p>Tip: “X” 表示一个具体的数字</p><h4 id="退出"><a class="markdownIt-Anchor" href="#退出"></a> 退出</h4><ul><li>:w - 保存</li><li>:wq or :x or ZZ - 保存并退出</li><li>:q - 退出(修改未保存时警告)</li><li>:q! or ZQ - 不保存强制退出</li></ul><h4 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h4><ul><li>nu 显示光标所在行号</li><li>:set nu 显示所有行号</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsyncTask源码了解</title>
      <link href="/2018/04/11/AsyncTask%E6%BA%90%E7%A0%81%E4%BA%86%E8%A7%A3/"/>
      <url>/2018/04/11/AsyncTask%E6%BA%90%E7%A0%81%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>简单了解下AsyncTask源码，作为以后复习时用。</p><a id="more"></a><blockquote><p>package: android.os;</p></blockquote><p>功能：在进行异步请求时，解决子线程和主线程之间的通讯等。</p><p>此类为：抽象类，因此不能实例化，需要继承自它，再使用。</p><h4 id="源码解析"><a class="markdownIt-Anchor" href="#源码解析"></a> 源码解析</h4><h5 id="asynctask-类包含"><a class="markdownIt-Anchor" href="#asynctask-类包含"></a> AsyncTask 类包含：</h5><ul><li>3个静态内部类 [AsyncTaskResult、InternalHandler、SerialExector]</li><li>1个静态内部抽象类 [WorkerRunnable]</li><li>1个枚举类 [Status]</li></ul><h5 id="线程池部分"><a class="markdownIt-Anchor" href="#线程池部分"></a> 线程池部分：</h5><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * An &#123;@link Executor&#125; that can be used to<span class="built_in"> execute </span>tasks in parallel.</span><br><span class="line">    */</span><br><span class="line">  <span class="keyword"> public</span><span class="keyword"> static</span><span class="keyword"> final</span> Executor THREAD_POO<span class="class">L_EXECUTOR;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword"> static</span> &#123;</span><br><span class="line">       ThreadPoolExecutor threadPoolExecutor =<span class="built_in"> new </span>ThreadPoolExecutor(</span><br><span class="line">               CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class="line">               sPoolWorkQueue, sThreadFactory);</span><br><span class="line">       threadPoolExecutor.allowCoreThreadTimeOut(true);</span><br><span class="line">       THREAD_POO<span class="class">L_EXECUTOR = threadPoolExecutor;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中参数：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">// 核心线程数最小为2， 最大为4，根据cpu的核数确定。</span></span><br><span class="line">   <span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> CORE_POOL_SIZE = Math.max(<span class="number">2</span>, Math.min(CPU_COUNT - <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">   <span class="comment">// 最大线程池数量为 cpu 的核数的2倍 + 1</span></span><br><span class="line">   <span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">   <span class="comment">// 非核心线程数存活时间为30s</span></span><br><span class="line">   <span class="keyword">private</span> static <span class="keyword">final</span> <span class="built_in">int</span> KEEP_ALIVE_SECONDS = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">阻塞队列长度为<span class="number">128</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">128</span>);</span><br></pre></td></tr></table></figure><h5 id="使用中重要的方法"><a class="markdownIt-Anchor" href="#使用中重要的方法"></a> 使用中重要的方法：</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任务开始前需要的操作：主线程</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 抽象类，必须要实现。 耗时的操作：子线程</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Result <span class="title">doInBackground</span>(<span class="params">Params... <span class="keyword">params</span></span>)</span>;</span><br><span class="line"><span class="comment">// 后台任务执行的进度，用于显示进度条：主线程</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span>(<span class="params">Progress... values</span>)</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 任务执行完成后，需要调用的操作：主线程</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span>(<span class="params">Result result</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="execute执行方法"><a class="markdownIt-Anchor" href="#execute执行方法"></a> execute执行方法：</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种：需要传入调度器和参数</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;<span class="keyword">Params</span>, Progress, <span class="keyword">Result</span>&gt; executeOnExecutor(Executor exec,</span><br><span class="line">            <span class="keyword">Params</span>... <span class="keyword">params</span>)</span><br><span class="line">第二种：内部调用了第一种方式，使用默认的调度器，传入参数即可</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> AsyncTask&lt;<span class="keyword">Params</span>, Progress, <span class="keyword">Result</span>&gt; execute(<span class="keyword">Params</span>... <span class="keyword">params</span>) </span><br><span class="line">            </span><br><span class="line">第三种：通过默认调度器执行runnable方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void execute(Runnable runnable)</span><br></pre></td></tr></table></figure><h5 id="默认调度器sdefaultexecutor"><a class="markdownIt-Anchor" href="#默认调度器sdefaultexecutor"></a> 默认调度器：sDefaultExecutor</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor SERIAL_EXECUTOR = <span class="keyword">new</span> SerialExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class="keyword">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class="line">        Runnable mActive;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable r)</span> </span>&#123;</span><br><span class="line">            mTasks.offer(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        r.run();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        scheduleNext();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mActive == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scheduleNext();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">scheduleNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ((mActive = mTasks.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>SerialExecutor 介绍</p><ol><li>SerialExecutor是通过ArrayDeque这个队列管理Runnable的，当我们启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null, 第一次运行肯定是null了，于是调用scheduleNext()方法。这个队列会从头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR.execute(mActive)方法，去执行取出的Runnable对象。</li><li>execute 和 scheduleNext 都被synchronized修饰，因此这两个方法拥有同一把对象锁，不可以同时运行，在execute方法中，r.run()方法为子线程中的耗时任务，当执行完成后，最终会进入到finally中调用scheduleNext去取下一个top任务。</li><li>mTasks.offer是每次来了task都放到ArrayDeque的尾部，保证先来的先被执行。</li></ol><h5 id="executeonexecutor方法"><a class="markdownIt-Anchor" href="#executeonexecutor方法"></a> executeOnExecutor()方法：</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> final AsyncTask&lt;Params, Progress, Result&gt; <span class="title">executeOnExecutor</span>(<span class="params">Executor exec,</span></span></span><br><span class="line"><span class="function"><span class="params">            Params... <span class="keyword">params</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (mStatus) &#123;</span><br><span class="line">                <span class="keyword">case</span> RUNNING:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task is already running."</span>);</span><br><span class="line">                <span class="keyword">case</span> FINISHED:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot execute task:"</span></span><br><span class="line">                            + <span class="string">" the task has already been executed "</span></span><br><span class="line">                            + <span class="string">"(a task can be executed only once)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mStatus = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">        onPreExecute();</span><br><span class="line"></span><br><span class="line">        mWorker.mParams = <span class="keyword">params</span>;</span><br><span class="line">        exec.execute(mFuture);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>executeOnExecutor方法中执行了onPreExecute(),然后执行了exec.execute(mFuture);</p><p>其中Future为：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mFuture = <span class="keyword">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">done</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    postResultIfNotInvoked(get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    android.util.Log.w(LOG_TAG, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"An error occurred while executing doInBackground()"</span>,</span><br><span class="line">                            e.getCause());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                    postResultIfNotInvoked(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>从executeOnExecutor方法执行中可以看出，AsyncTask内，在主线程中先执行了onPreExecute()方法，然后在线程中调用了doInBackground()方法，任务执行完成后，通过postResult 或者 postResultIfNotInvoked 方法发送消息到主线程</p><h5 id="postresult方法"><a class="markdownIt-Anchor" href="#postresult方法"></a> postResult方法</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">postResultIfNotInvoked</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class="line">        <span class="keyword">if</span> (!wasTaskInvoked) &#123;</span><br><span class="line">            postResult(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function">Result <span class="title">postResult</span><span class="params">(Result result)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class="line">                <span class="keyword">new</span> AsyncTaskResult&lt;Result&gt;(<span class="keyword">this</span>, result));</span><br><span class="line">        message.sendToTarget();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>postResult方法的作用即为任务结束后，发送message给主线程，反馈Result结果。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static <span class="class"><span class="keyword">class</span> <span class="title">InternalHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">       public <span class="type">InternalHandler</span>(<span class="type">Looper</span> looper) &#123;</span><br><span class="line">           <span class="keyword">super</span>(looper);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"RawUseOfParameterizedType"</span>&#125;)</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       public void handleMessage(<span class="type">Message</span> msg) &#123;</span><br><span class="line">           <span class="type">AsyncTaskResult</span>&lt;?&gt; result = (<span class="type">AsyncTaskResult</span>&lt;?&gt;) msg.obj;</span><br><span class="line">           switch (msg.what) &#123;</span><br><span class="line">               <span class="keyword">case</span> <span class="type">MESSAGE_POST_RESULT</span>:</span><br><span class="line">                   <span class="comment">// There is only one result</span></span><br><span class="line">                   result.mTask.finish(result.mData[<span class="number">0</span>]);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> <span class="type">MESSAGE_POST_PROGRESS</span>:</span><br><span class="line">                   result.mTask.onProgressUpdate(result.mData);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接收结果的为InternalHandler类，接收到结果并调用mTask的finish方法并把结果返回过去。</p><h5 id="finish方法"><a class="markdownIt-Anchor" href="#finish方法"></a> finish方法</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">private</span> <span class="variable">void</span> <span class="function"><span class="title">finish</span>(<span class="variable"><span class="class">Result</span></span> <span class="variable"><span class="class">result</span></span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="variable"><span class="keyword">if</span></span> (<span class="title">isCancelled</span>()) &#123;</span></span><br><span class="line"><span class="function">            <span class="title">onCancelled</span>(<span class="variable"><span class="class">result</span></span>);</span></span><br><span class="line"><span class="function">        &#125; <span class="variable"><span class="keyword">else</span></span> &#123;</span></span><br><span class="line"><span class="function">            <span class="title">onPostExecute</span>(<span class="variable"><span class="class">result</span></span>);</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        <span class="variable">mStatus</span> = <span class="variable">Status</span>.FINISHED;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure><p>当Task结束后，会调用finish方法，如AsyncTask已经被取消，则会返回onCancelled回调，当未被取消则会调用onPostExecute回调。因此，onPostExecute回调也是主线程。</p><h5 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h5><p>过去一直在用AsyncTask，也知道怎样调用，但并不知道它的工作原理，经过我们分析源码可以看到，AsyncTask为我们做了很好的线程管理(在应用中滥用线程，会造成线程过多引起很严重的问题)，提供了执行前，执行中进度条更新，执行后等回调操作，便利了我们使用。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> AsyncTask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Android手机内提取已安装的apk文件</title>
      <link href="/2018/04/09/%E4%BB%8EAndroid%E6%89%8B%E6%9C%BA%E5%86%85%E6%8F%90%E5%8F%96%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84apk%E6%96%87%E4%BB%B6/"/>
      <url>/2018/04/09/%E4%BB%8EAndroid%E6%89%8B%E6%9C%BA%E5%86%85%E6%8F%90%E5%8F%96%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84apk%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>假如你在其他手机上看到一个应用，又不知道从哪去下载，而那个手机的安装包已经被删除掉，那怎样安装一个和那个手机上一模一样的应用呢？办法就是从那个手机中备份一份，然后传给你。也许你见过一些其他软件有备份apk的功能，也是这个原理。</p><a id="more"></a><h4 id="找到具体的应用的包名"><a class="markdownIt-Anchor" href="#找到具体的应用的包名"></a> 找到具体的应用的包名</h4><p>连接到手机，用adb命令执行如下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb <span class="keyword">shell</span><span class="bash"> pm list package</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package:com<span class="selector-class">.mediatek</span><span class="selector-class">.gba</span></span><br><span class="line">package:com<span class="selector-class">.mediatek</span><span class="selector-class">.ims</span></span><br><span class="line">package:com<span class="selector-class">.flyme</span><span class="selector-class">.roamingpay</span></span><br><span class="line">package:com<span class="selector-class">.github</span><span class="selector-class">.shadowsocks</span></span><br><span class="line">package:org<span class="selector-class">.simalliance</span><span class="selector-class">.openmobileapi</span><span class="selector-class">.uicc2terminal</span></span><br><span class="line">package:com<span class="selector-class">.android</span><span class="selector-class">.providers</span><span class="selector-class">.telephony</span></span><br><span class="line">package:com<span class="selector-class">.meizu</span><span class="selector-class">.documentsui</span></span><br><span class="line">package:com<span class="selector-class">.goodix</span><span class="selector-class">.fingerprint</span></span><br><span class="line">package:com<span class="selector-class">.android</span><span class="selector-class">.providers</span><span class="selector-class">.calendar</span></span><br><span class="line">package:com<span class="selector-class">.zgczw</span><span class="selector-class">.chezhiwang</span></span><br><span class="line">package:cc.mianfeinovel</span><br><span class="line">package:com<span class="selector-class">.android</span><span class="selector-class">.providers</span><span class="selector-class">.media</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="找到需要备份的安装包的位置"><a class="markdownIt-Anchor" href="#找到需要备份的安装包的位置"></a> 找到需要备份的安装包的位置</h4><p>如果要找到应用包名为：cc.mianfeinovel</p><p>可通过如下命令，找到具体安装包的位置：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb <span class="keyword">shell</span><span class="bash"> pm path cc.mianfeinovel</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span>:<span class="regexp">/data/</span>app<span class="regexp">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure><h4 id="把安装包取出"><a class="markdownIt-Anchor" href="#把安装包取出"></a> 把安装包取出</h4><p>可通过adb的pull命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb pull <span class="regexp">/data/</span>app<span class="regexp">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/data/app/cc.mianfeinovel<span class="number">-2</span>/base.apk: <span class="number">1</span> file pulled. <span class="number">5.7</span> MB/s (<span class="number">11417386</span> bytes <span class="keyword">in</span> <span class="number">1.913</span>s)</span><br></pre></td></tr></table></figure><p>此操作手机无需root,也就是说每个手机都可以这样操作。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apk </tag>
            
            <tag> backup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apktool反编译</title>
      <link href="/2018/04/08/Apktool%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
      <url>/2018/04/08/Apktool%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>Android的反编译，一般需要用到apktool，这里记录下当用到apktool时，基本的用法</p><a id="more"></a><p>Apktool反编译和回编为apk，主要是apktool.jar出力，在mac或linux上一般会有个apktool，来执行apktool.jar。如果没有的话，把如下代码保存为apktool即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Copyright (C) 2007 The Android Open Source Project</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This script is a wrapper for smali.jar, so you can simply call "smali",</span></span><br><span class="line"><span class="comment"># instead of java -jar smali.jar. It is heavily based on the "dx" script</span></span><br><span class="line"><span class="comment"># from the Android SDK</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up prog to be the path of this script, including following symlinks,</span></span><br><span class="line"><span class="comment"># and set up progdir to be the fully-qualified pathname of its directory.</span></span><br><span class="line">prog=<span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line"><span class="keyword">while</span> [ -h <span class="string">"<span class="variable">$&#123;prog&#125;</span>"</span> ]; <span class="keyword">do</span></span><br><span class="line">    newProg=`/bin/ls -ld <span class="string">"<span class="variable">$&#123;prog&#125;</span>"</span>`</span><br><span class="line"></span><br><span class="line">    newProg=`expr <span class="string">"<span class="variable">$&#123;newProg&#125;</span>"</span> : <span class="string">".* -&gt; \(.*\)$"</span>`</span><br><span class="line">    <span class="keyword">if</span> expr <span class="string">"x<span class="variable">$&#123;newProg&#125;</span>"</span> : <span class="string">'x/'</span> &gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        prog=<span class="string">"<span class="variable">$&#123;newProg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        progdir=`dirname <span class="string">"<span class="variable">$&#123;prog&#125;</span>"</span>`</span><br><span class="line">        prog=<span class="string">"<span class="variable">$&#123;progdir&#125;</span>/<span class="variable">$&#123;newProg&#125;</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">oldwd=`<span class="built_in">pwd</span>`</span><br><span class="line">progdir=`dirname <span class="string">"<span class="variable">$&#123;prog&#125;</span>"</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;progdir&#125;</span>"</span></span><br><span class="line">progdir=`<span class="built_in">pwd</span>`</span><br><span class="line">prog=<span class="string">"<span class="variable">$&#123;progdir&#125;</span>"</span>/`basename <span class="string">"<span class="variable">$&#123;prog&#125;</span>"</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;oldwd&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">jarfile=apktool.jar</span><br><span class="line">libdir=<span class="string">"<span class="variable">$progdir</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$libdir</span>/<span class="variable">$jarfile</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> `basename <span class="string">"<span class="variable">$prog</span>"</span>`<span class="string">": can't find <span class="variable">$jarfile</span>"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">javaOpts=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you want DX to have more memory when executing, uncomment the following</span></span><br><span class="line"><span class="comment"># line and adjust the value accordingly. Use "java -X" for a list of options</span></span><br><span class="line"><span class="comment"># you can pass here.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">javaOpts=<span class="string">"-Xmx512M"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alternatively, this will extract any parameter "-Jxxx" from the command line</span></span><br><span class="line"><span class="comment"># and pass them to Java (instead of to dx). This makes it possible for you to</span></span><br><span class="line"><span class="comment"># add a command-line parameter such as "-JXmx256M" in your ant scripts, for</span></span><br><span class="line"><span class="comment"># example.</span></span><br><span class="line"><span class="keyword">while</span> expr <span class="string">"x<span class="variable">$1</span>"</span> : <span class="string">'x-J'</span> &gt;/dev/null; <span class="keyword">do</span></span><br><span class="line">    opt=`expr <span class="string">"<span class="variable">$1</span>"</span> : <span class="string">'-J\(.*\)'</span>`</span><br><span class="line">    javaOpts=<span class="string">"<span class="variable">$&#123;javaOpts&#125;</span> -<span class="variable">$&#123;opt&#125;</span>"</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$OSTYPE</span>"</span> = <span class="string">"cygwin"</span> ] ; <span class="keyword">then</span></span><br><span class="line">jarpath=`cygpath -w  <span class="string">"<span class="variable">$libdir</span>/<span class="variable">$jarfile</span>"</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">jarpath=<span class="string">"<span class="variable">$libdir</span>/<span class="variable">$jarfile</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add current location to path for aapt</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:`<span class="built_in">pwd</span>`;</span><br><span class="line"><span class="built_in">export</span> PATH;</span><br><span class="line"><span class="built_in">exec</span> java <span class="variable">$javaOpts</span> -Djava.awt.headless=<span class="literal">true</span> -jar <span class="string">"<span class="variable">$jarpath</span>"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><h4 id="反编译apk"><a class="markdownIt-Anchor" href="#反编译apk"></a> 反编译apk</h4><p>常用命令行为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d app-release.apk</span><br><span class="line">I: Using Apktool <span class="number">2.3</span>.<span class="number">2</span> on app-release.apk</span><br><span class="line">I: Loading resource <span class="selector-tag">table</span>...</span><br><span class="line">I: Decoding AndroidManifest<span class="selector-class">.xml</span> with resources...</span><br><span class="line">I: Loading resource <span class="selector-tag">table</span> from file: <span class="variable">$HOME</span>/Library/apktool/framework/<span class="number">1</span>.apk</span><br><span class="line">I: Regular manifest package...</span><br><span class="line">I: Decoding file-resources...</span><br><span class="line">I: Decoding values *<span class="comment">/* XMLs...</span></span><br><span class="line"><span class="comment">I: Baksmaling classes.dex...</span></span><br><span class="line"><span class="comment">I: Copying assets and libs...</span></span><br><span class="line"><span class="comment">I: Copying unknown files...</span></span><br><span class="line"><span class="comment">I: Copying original files...</span></span><br><span class="line"><span class="comment">$</span></span><br></pre></td></tr></table></figure><p>它的其他语法还有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ apktool d foo.jar</span><br><span class="line"><span class="comment">// decodes foo.jar to foo.jar.out folder</span></span><br><span class="line"></span><br><span class="line">$ apktool decode foo.jar</span><br><span class="line"><span class="comment">// decodes foo.jar to foo.jar.out folder</span></span><br><span class="line"></span><br><span class="line">$ apktool d bar.apk</span><br><span class="line"><span class="comment">// decodes bar.apk to bar folder</span></span><br><span class="line"></span><br><span class="line">$ apktool decode bar.apk</span><br><span class="line"><span class="comment">// decodes bar.apk to bar folder</span></span><br><span class="line"></span><br><span class="line">$ apktool d bar<span class="selector-class">.apk</span> -o baz</span><br><span class="line"><span class="comment">// decodes bar.apk to baz folder</span></span><br></pre></td></tr></table></figure><h4 id="回编译为apk"><a class="markdownIt-Anchor" href="#回编译为apk"></a> 回编译为apk</h4><p>常用语法为：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apktool b app-release/ -o app-release_unsigned.apk</span><br><span class="line"></span><br><span class="line"><span class="keyword">I</span>: <span class="keyword">Using</span> Apktool <span class="number">2.3</span><span class="number">.2</span></span><br><span class="line"><span class="keyword">I</span>: Checking whether sources has changed...</span><br><span class="line"><span class="keyword">I</span>: Checking whether resources has changed...</span><br><span class="line"><span class="keyword">I</span>: Building resources...</span><br><span class="line"><span class="keyword">I</span>: Building apk file...</span><br><span class="line"><span class="keyword">I</span>: Copying unknown files/dir...</span><br><span class="line"><span class="keyword">I</span>: Built apk...</span><br></pre></td></tr></table></figure><p>它的其他语法还有：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ apktool <span class="selector-tag">b</span> foo<span class="selector-class">.jar</span><span class="selector-class">.out</span></span><br><span class="line"><span class="comment">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class="line"></span><br><span class="line">$ apktool build foo<span class="selector-class">.jar</span><span class="selector-class">.out</span></span><br><span class="line"><span class="comment">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class="line"></span><br><span class="line">$ apktool <span class="selector-tag">b</span> bar</span><br><span class="line"><span class="comment">// builds bar folder into bar/dist/bar.apk file</span></span><br><span class="line"></span><br><span class="line">$ apktool <span class="selector-tag">b</span> .</span><br><span class="line"><span class="comment">// builds current directory into ./dist</span></span><br><span class="line"></span><br><span class="line">$ apktool <span class="selector-tag">b</span> bar -o new_bar.apk</span><br><span class="line"><span class="comment">// builds bar folder into new_bar.apk</span></span><br><span class="line"></span><br><span class="line">$ apktool <span class="selector-tag">b</span> bar.apk</span><br><span class="line"><span class="comment">// WRONG: brut.androlib.AndrolibException: brut.directory.PathNotExist: apktool.yml</span></span><br><span class="line"><span class="comment">// Must use folder, not apk/jar file</span></span><br></pre></td></tr></table></figure><h4 id="frameworks"><a class="markdownIt-Anchor" href="#frameworks"></a> Frameworks</h4><p>当回编译为apk时，可能会有找不到资源的问题，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app-<span class="keyword">release</span>/res/layout-v26/abc_screen_toolbar.xml:<span class="number">5</span>: <span class="keyword">error</span>: <span class="keyword">No</span> <span class="keyword">resource</span> identifier <span class="keyword">found</span> <span class="keyword">for</span> <span class="keyword">attribute</span> <span class="string">'keyboardNavigationCluster'</span> <span class="keyword">in</span> <span class="keyword">package</span> <span class="string">'android'</span></span><br></pre></td></tr></table></figure><p>当出现如上问题时，应该为framework-res.apk过期了，换句话说，是这个apk有点老了。</p><p><code>framework-res.apk</code> 可以从最新版本的手机或模拟器中拿到。具体位置在：<br><code>/system/framework/framework-res.apk</code> 可以通过adb命令取出：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull /<span class="built_in">system</span>/framework/framework-<span class="keyword">res</span>.apk</span><br></pre></td></tr></table></figure><p>在得到framework-res.apk后，即可安装到电脑中。</p><p>一般为（其中: <strong>if</strong> 为 install-framework的缩写）：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apktool <span class="keyword">if</span> framework-<span class="keyword">res</span>.apk</span><br></pre></td></tr></table></figure><p>安装后，即不再报上面找不到资源的问题了。</p><h4 id="签名"><a class="markdownIt-Anchor" href="#签名"></a> 签名</h4><p>千万不要忘记最后一步，签名。<br>如果不签名的话，是安装不到手机的，会报未签名错误，自己签名后即可啦。</p><p>如下命令为签名：相关参数自己修改</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore /opt/workspace/testkeystore -signedjar app-release_signed<span class="selector-class">.apk</span> app-release_unsigned<span class="selector-class">.apk</span> testkeystore</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apktool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer比较的误区</title>
      <link href="/2018/03/13/Integer%E6%AF%94%E8%BE%83%E7%9A%84%E8%AF%AF%E5%8C%BA/"/>
      <url>/2018/03/13/Integer%E6%AF%94%E8%BE%83%E7%9A%84%E8%AF%AF%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="integer比较时不准确的原因"><a class="markdownIt-Anchor" href="#integer比较时不准确的原因"></a> Integer比较时不准确的原因</h2><a id="more"></a><p>首先理解的是：Java的装箱和拆箱</p><h5 id="什么时候会进行装箱"><a class="markdownIt-Anchor" href="#什么时候会进行装箱"></a> 什么时候会进行装箱</h5><blockquote><p>装箱用到的方法：Integer.valueOf()</p></blockquote><blockquote><p>Integer i = 100;</p></blockquote><h5 id="什么是会进行拆箱"><a class="markdownIt-Anchor" href="#什么是会进行拆箱"></a> 什么是会进行拆箱</h5><blockquote><p>如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)，例如：a + b</p></blockquote><h5 id="integervalueof中的cache问题"><a class="markdownIt-Anchor" href="#integervalueof中的cache问题"></a> Integer.valueOf()中的cache问题</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static Integer value<span class="constructor">Of(<span class="params">int</span> <span class="params">i</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= - <span class="number">128</span><span class="operator"> &amp;&amp; </span>i &lt;= <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>high)</span><br><span class="line">return <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>cache<span class="literal">[<span class="identifier">i</span> + <span class="number">128</span>]</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">return <span class="keyword">new</span> <span class="constructor">Integer(<span class="params">i</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果数值在[-128, 127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用</p></blockquote><h5 id="的比较问题"><a class="markdownIt-Anchor" href="#的比较问题"></a> == 的比较问题</h5><blockquote><p>当“==”运算符的两个操作数都是包装类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)。</p></blockquote><p>例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Integer</span> <span class="string">a</span> <span class="string">=</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"><span class="string">Integer</span> <span class="string">b</span> <span class="string">=</span> <span class="number">2</span><span class="string">;</span></span><br><span class="line"><span class="string">Integer</span> <span class="string">c</span> <span class="string">=</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line"><span class="string">Integer</span> <span class="string">d</span> <span class="string">=</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line"><span class="string">Integer</span> <span class="string">e</span> <span class="string">=</span> <span class="number">321</span><span class="string">;</span></span><br><span class="line"><span class="string">Integer</span> <span class="string">f</span> <span class="string">=</span> <span class="number">321</span><span class="string">;</span></span><br><span class="line"><span class="string">Long</span> <span class="string">g</span> <span class="string">=</span> <span class="number">3</span><span class="string">L;</span></span><br><span class="line"><span class="string">Long</span> <span class="string">h</span> <span class="string">=</span> <span class="number">2</span><span class="string">L;</span></span><br><span class="line"></span><br><span class="line"><span class="string">System.out.println(c</span> <span class="string">==</span> <span class="string">d);</span> <span class="bullet">----true</span>  <span class="string">在[-128,</span> <span class="number">127</span><span class="string">]区间，对象相同</span></span><br><span class="line"><span class="string">System.out.println(e</span> <span class="string">==</span> <span class="string">f);</span> <span class="bullet">----</span> <span class="literal">false</span> <span class="string">不在[-128,</span> <span class="number">127</span><span class="string">]区间，对象不同</span></span><br><span class="line"><span class="string">System.out.println(c</span> <span class="string">==</span> <span class="string">(a</span> <span class="string">+</span> <span class="string">b));</span> <span class="bullet">----</span> <span class="literal">true</span> <span class="string">包含运算符，拆箱比较值</span></span><br><span class="line"><span class="string">System.out.println(c.equals(a</span> <span class="string">+</span> <span class="string">b));</span> <span class="meta">---</span> <span class="literal">true</span> <span class="string">先拆箱(a</span> <span class="string">+</span> <span class="string">b),再装箱</span></span><br><span class="line"><span class="string">System.out.println(g</span> <span class="string">==</span> <span class="string">(a</span> <span class="string">+</span> <span class="string">b));</span> <span class="meta">---</span> <span class="literal">true</span> <span class="string">区间缓存</span></span><br><span class="line"><span class="string">System.out.println(g.equals(a</span> <span class="string">+</span> <span class="string">b));</span> <span class="meta">---</span> <span class="literal">false</span>  <span class="string">对象类型不同</span></span><br><span class="line"><span class="string">System.out.println(g.equals(a</span> <span class="string">+</span> <span class="string">h));</span> <span class="meta">---</span> <span class="literal">true</span> <span class="string">a+h</span> <span class="string">向上转换成long类型，再装箱</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> integer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio打包Jar</title>
      <link href="/2018/03/13/AndroidStudio%E6%89%93%E5%8C%85Jar/"/>
      <url>/2018/03/13/AndroidStudio%E6%89%93%E5%8C%85Jar/</url>
      
        <content type="html"><![CDATA[<h2 id="android-studio-打包jar"><a class="markdownIt-Anchor" href="#android-studio-打包jar"></a> Android Studio 打包Jar</h2><a id="more"></a><h5 id="需要在module的gradle中配置如下task"><a class="markdownIt-Anchor" href="#需要在module的gradle中配置如下task"></a> 需要在module的gradle中配置如下task</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Copy类型</span></span><br><span class="line"><span class="keyword">task</span> makeJar(type: <span class="keyword">Copy</span>) &#123;</span><br><span class="line">    <span class="comment">//删除存在的</span></span><br><span class="line">    <span class="keyword">delete</span> <span class="string">'build/libs/myjar.jar'</span></span><br><span class="line">    <span class="comment">//设置拷贝的文件</span></span><br><span class="line">    <span class="keyword">from</span>(<span class="string">'build/intermediates/bundles/release/'</span>)</span><br><span class="line">    <span class="comment">//打进jar包后的文件目录</span></span><br><span class="line">    <span class="keyword">into</span>(<span class="string">'build/libs/'</span>)</span><br><span class="line">    <span class="comment">//将classes.jar放入build/libs/目录下</span></span><br><span class="line">    <span class="comment">//include ,exclude参数来设置过滤</span></span><br><span class="line">    <span class="comment">//（我们只关心classes.jar这个文件）</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="string">'classes.jar'</span>)</span><br><span class="line">    <span class="comment">//重命名</span></span><br><span class="line">    rename(<span class="string">'classes.jar'</span>, <span class="string">'myjar.jar'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeJar.dependsOn(build)</span><br></pre></td></tr></table></figure><h5 id="在终端执行"><a class="markdownIt-Anchor" href="#在终端执行"></a> 在终端执行</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gradlew markJar</span></span><br></pre></td></tr></table></figure><h5 id="打包后的位置module的buildlibs下"><a class="markdownIt-Anchor" href="#打包后的位置module的buildlibs下"></a> 打包后的位置：module的/build/libs/下</h5><p>具体位置自己可以修改</p><h5 id="可能的报错"><a class="markdownIt-Anchor" href="#可能的报错"></a> 可能的报错</h5><blockquote><p>Fix the issues identified by lint, or add the following to your build script to proceed with errors</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">android</span> &#123;</span><br><span class="line"><span class="section">lintOptions</span> &#123;</span><br><span class="line"><span class="attribute">abortOnError</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gyp-学习记录</title>
      <link href="/2017/12/25/Gyp-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2017/12/25/Gyp-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>Gyp 学习记录</p><p>GYP(Generate Your Projects)是由 Chromium 团队开发的跨平台自动化项目构建工具。</p><h5 id="gyp简述"><a class="markdownIt-Anchor" href="#gyp简述"></a> gyp简述</h5><p>GYP的输入是.gyp和.gypi文件，.gypi文件是用于.gyp文件include使用的。.gyp文件就是符合特定格式的json文件。</p><p>gyp文件中包含target，Visual C++下，gyp生成sln，target生成vcproj或vxcproj。</p><a id="more"></a><h5 id="11-设计目标"><a class="markdownIt-Anchor" href="#11-设计目标"></a> 1.1 设计目标</h5><p>gyp设计针对目标就是为了解决chromium浏览器构建问题，最重要的就是支持多平台的构建。因为Chromium内部都是c/c<ins>文件，因此主要考虑方便c/c</ins>程序的构建。设计时候还考虑到下面这些问题：</p><ul><li>debug vs release</li><li>cross compile</li><li>toolchain interface</li></ul><h5 id="12-构建文件"><a class="markdownIt-Anchor" href="#12-构建文件"></a> 1.2 构建文件</h5><p>构建文件名字不固定，但是后缀通常是.gyp和.gypi(gyp included).构建文件内容就是python的一个数据结构.<br>example:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="string">'target_defaults'</span>:&#123;</span><br><span class="line"><span class="string">'defines'</span>:[<span class="string">'DEBUG'</span>],</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'targets'</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'target_name'</span>:<span class="string">'test'</span>, #生成的文件.</span><br><span class="line"><span class="string">'type'</span>:<span class="string">'executable'</span>, #可执行程序.</span><br><span class="line"><span class="string">'sources'</span>:[<span class="string">'test.cc'</span>],</span><br><span class="line"><span class="string">'defines'</span>:[<span class="string">'FOO'</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="13-gyp文件剖析"><a class="markdownIt-Anchor" href="#13-gyp文件剖析"></a> 1.3 .gyp文件剖析</h5><p>整个构建文件最顶层是一个字典，包含了下面这些key:</p><ul><li>conditions //条件判断</li><li>includes // 包含的构建文件</li><li>target <sub>defualt</sub> //构建目标默认属性</li><li>targets // 构建目标列表</li><li>variables // 构建文件使用的变量</li></ul><h6 id="131-conditions"><a class="markdownIt-Anchor" href="#131-conditions"></a> 1.3.1 conditions</h6><p>conditions分两种行为。 普通的conditions就在load构建文件之后立即计算，另外一种是target(conditions)是在计算完成依赖之后然后来进行计算的，两个过程分别就是early and late phases阶段。对于conditions写法非常简单</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'conditions</span><span class="symbol">':</span>[</span><br><span class="line">[<span class="symbol">'OS==Linux</span>', &#123;<span class="symbol">'sources</span><span class="symbol">':</span>[<span class="symbol">'linux_interface.cc</span>']&#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>对于condition的判断，主要还是为了能够修改一些描述属性。从文档上来看，默认提供的条件就是OS判断，其他判断应该都是变量的判断。</p><h6 id="132-targets"><a class="markdownIt-Anchor" href="#132-targets"></a> 1.3.2 targets</h6><p>target部分的话对target(default)里面设定的内容默认进行merge。比如上面例子的话，对于target/test来说，使用的define就会是-DDEBUG -DFOO.当然对于这种东西是可以进行其他策略选择的，比如如果修改成下面格式，那么就是直接替换：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'defines=</span><span class="symbol">':</span>[<span class="symbol">'FOO</span>']</span><br></pre></td></tr></table></figure><p>生成的defines就是-DFOO了。或者是可以剔除掉：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'defines!</span><span class="symbol">':</span>[<span class="symbol">'DEBUG</span>']</span><br></pre></td></tr></table></figure><p>生成的defines就没有任何内容了。通过在选项key后面添加操作符号来达到自定义目的(相对于全局环境).<br>对于一个target包括了下面这些重要属性：</p><ul><li>actions(list) //执行命令</li><li>all<sub>dependentsettings</sub>(dict) //如果依赖这个target的话，需要使用的设置</li><li>configurations(dict) 配置</li><li>defines(list) //对于C/C++的defines</li><li>dependencies(list) //依赖对象。如果是本文件的话那么直接引用，如果是其他文件的话，使用path/xxx.gyp:target.</li><li>direct<sub>dependentsetting</sub>(dict) //直接依赖这个target的话，需要使用的设置</li><li>include<sub>dirs</sub>(list) // 头文件目录</li><li>libraries(list)//目标需要链接的库</li><li>link<sub>settings</sub> //依赖这个target,需要使用的链接参数</li><li>sources(list) //源文件</li><li>target<sub>conditions</sub>(list) // 和conditions类似，但是是在完全计算之后然后来判断</li><li>target<sub>name</sub>(string) //名字</li><li>type //目标类型，现在只是支持static<sub>library</sub>,shared<sub>library</sub>,executable和none</li></ul><h6 id="133-includes"><a class="markdownIt-Anchor" href="#133-includes"></a> 1.3.3 includes</h6><p>gyp倾向的组织就是在toplevel上面存在一个gyp文件，可以存在子目录下面，但是子目录下面并不存放一个完整的构建文件， 通常只是存放构建文件的片段。为了区分，后缀为gypi。本身来说，这个gypi并不可以直接被gyp所接受生成native构建系统文件， 唯一的作用就是被toplevel的gyp文件进行include。如果对于Linux系统来说，最终生成的Makefile应该是一份大Makefile并且没有递归make的操作。 关于构造一个没有递归的Makefile是非常有价值的，不管是对于调试还是提升编译速度方面。可以参考文章Recusive Make Considered Harmful.<br>一旦我们允许include子目录的gypi文件进来，我们就必须规定哪些字段应该是文件。原因是假设存在src目录下面有src/BUILD.gypi这样一个文件，sources内容如下:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'sources</span><span class="symbol">':</span>[<span class="symbol">'src.cc</span>']</span><br></pre></td></tr></table></figure><p>而在上层BUILD.gyp文件里面，使用includes语法：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'includes</span><span class="symbol">':</span>[<span class="symbol">'./src/BUILD.gypi</span>']</span><br></pre></td></tr></table></figure><p>那么在生成大Makefile的时候，我们必须清楚’sources’字段里面内容都是文件，<a href="http://xn--src-628d49d4v4bo9hzq0bhndy92e.cc" target="_blank" rel="noopener">不应该直接使用src.cc</a>， 相反应该加上目录前缀src，<br>最终应该使用src/src.cc这样一个文件。关于哪些字段里面内容是路径， 这个在gyp里面有详细规定，在后面小节里面我们也会提到。</p><h6 id="134-actions"><a class="markdownIt-Anchor" href="#134-actions"></a> 1.3.4 actions</h6><p>actions是targets里面的一个特殊属性，主要是用来进行target的自定义操作的.<br>每个action是一个dict，主要包含4个属性：</p><ul><li>action<sub>name</sub>(string). //操作名称</li><li>input(list) //输入文件</li><li>outputs (list) //输出文件</li><li>actions(list) //命令</li></ul><p>有了这些属性就可以做一个完整的操作抽象。</p><h6 id="135-variable"><a class="markdownIt-Anchor" href="#135-variable"></a> 1.3.5 variable</h6><p>variables这个小节里面是进行变量的定义，格式是dict。下面是一个例子：</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'variables'</span>:&#123;</span><br><span class="line">    <span class="symbol">'common_files'</span>:[<span class="symbol">'src</span>/common.cc',<span class="symbol">'src</span>/interface.cc'],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了引用变量，我们可以这样写：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="comment">(common_files)</span></span><br><span class="line">&lt;@<span class="comment">(common_files)</span></span><br><span class="line">&gt;<span class="comment">(common_files)</span></span><br><span class="line">&gt;@<span class="comment">(common_files)</span></span><br></pre></td></tr></table></figure><p>总之引用变量必须加上(),同时在前面加上&lt;,&lt;@,&gt;,&gt;@的4种中一种前缀符号。关于前缀符号的含义， 会在后面的operator小节里面说明。<br>对于变量类型，一共分为3类：</p><ul><li>predefined variables //预定义变量</li><li>user-defined variables //用户定义变量</li><li>automatic variables //自动变量</li></ul><p>预定义变量比如OS(系统环境),EXECUTABLE<sub>SUFFIX</sub>(可执行文件后缀).用户自定义变量就不再赘述。<br>自动变量类似于Makefile里面的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">@</mi><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">@,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">@</span><span class="mpunct">,</span></span></span></span>这样的变量，好比反射。比如在target<sub>conditions</sub>部门的话，我们根据不同类型程序来做不同的condition:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">'target_conditions</span><span class="symbol">':</span>[</span><br><span class="line">[<span class="symbol">'_type==static_library</span>',&#123;<span class="symbol">'source</span><span class="symbol">':</span>[<span class="symbol">'func.cc</span>']&#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样对于target为static<sub>library</sub>都会联编func.cc这个文件了，自动变量就是属性名称之前加上构成的。<br>存在自动变量非常必要。有时候我们在全局环境中，希望根据不同的条件来定义不同的行为，并且是在计算的同时在来做条件判断的。 这样就提出一个要求就是，条件判断部分必须有能力知道，当前到底在计算什么东西(反射)。</p><h5 id="14-early-and-late-phases"><a class="markdownIt-Anchor" href="#14-early-and-late-phases"></a> 1.4 early and late phases</h5><p>对于变量展开和条件判断有两个不同的阶段：<br>载入文件之后进行，就是early phase。<br>计算完成之后进行，就是late phase。<br>对于两个阶段允许不同操作是非常必要的。对于early phase这个肯定需要，而对于late phase的话， 有时候我们是希望了解到gyp处理完成某个target之后所有信息，然后进行判断的。<br>ps:comake2在设计的时候，就没有考虑late phase这个功能。造成没有办法在应用层添加延迟计算这样一个特性。 最终只能够是修改comake2代码来完成需求。</p><h5 id="15-operator"><a class="markdownIt-Anchor" href="#15-operator"></a> 1.5 operator</h5><p>关于每个操作符号的含义：</p><ul><li>x= //字段内容进行覆盖</li><li>x? //如果字段没有定义，那么就进行覆盖</li><li>x+ //字段内容进行merge</li><li>&lt; (x) //early phase计算变量x，并且以string类型返回结果</li><li><blockquote><p>(x) //late phase计算变量x，并且以string类型返回结果</p></blockquote></li><li>&lt; @(x) //early phase计算变量x，并且以list类型返回结果</li><li><blockquote><p>@(x) //late phase计算变量x，并且以list类型返回结果</p></blockquote></li><li>x! //从已有的x字段中排除部分</li><li>x/ //操作允许使用include/exclude，内容是一个正则表达式来进行包含和排除列表里面内容</li><li>&lt; !(x) //认为x是一个shell command，得到执行结果作为string类型返回</li><li>&lt; !@(x) //认为x是一个shell command，得到执行结果作为list类型返回</li></ul><h5 id="16-路径内容属性"><a class="markdownIt-Anchor" href="#16-路径内容属性"></a> 1.6 路径内容属性</h5><p>在includes这个小节提到了，gyp规定了某些属性的内容必须为路径。这些属性是：</p><ul><li>files.</li><li>include<sub>dirs</sub>.</li><li>inputs.</li><li>libraries.</li><li>outputs.</li><li>sources.</li></ul><p>但是gyp对于里面的内容也做了一些特殊处理。对于内容来说，如果以下面这些字符开头：</p><ul><li>/ //绝对路径</li><li>$ //变量</li><li><ul><li>//链接参数比如-lm</li></ul></li><li>&lt; ,&gt;,! //operator</li><li>其他作为相对路径</li></ul><h5 id="17-在ubuntu下使用gyp"><a class="markdownIt-Anchor" href="#17-在ubuntu下使用gyp"></a> 1.7 在Ubuntu下使用gyp</h5><blockquote><p>安装工具： sudo apt-get install gyp</p></blockquote><h6 id="171-简单实例"><a class="markdownIt-Anchor" href="#171-简单实例"></a> 1.7.1 简单实例</h6><p>hello.c</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello gyp\n"</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.gyp</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">   <span class="string">'targets'</span>: [    </span><br><span class="line">     &#123;    </span><br><span class="line">       <span class="string">'target_name'</span>: <span class="string">'hello'</span>,    </span><br><span class="line">       <span class="string">'type'</span>: <span class="string">'executable'</span>,    </span><br><span class="line">       <span class="string">'sources'</span>: [    </span><br><span class="line">         <span class="string">'hello.c'</span>,    </span><br><span class="line">       ],    </span><br><span class="line">     &#125;,    </span><br><span class="line">   ],    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>构建：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gyp <span class="params">--depth=</span><span class="string">./</span> main.gyp</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">make</span></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./hello</span></span><br></pre></td></tr></table></figure><h6 id="172-改进"><a class="markdownIt-Anchor" href="#172-改进"></a> 1.7.2 改进</h6><p>把上面的构建命令做成脚本 <a href="http://genPrj.sh" target="_blank" rel="noopener">genPrj.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">gyp --depth=./ --generator-output=./build main.gyp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d build ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">make</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>所有生成非源码文件都生成到了build目录下，看起来比较干净，在做一个清除脚本，清除就更省事了。do_clean.sh:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">rm -rf build</span><br></pre></td></tr></table></figure><h6 id="173-c实例"><a class="markdownIt-Anchor" href="#173-c实例"></a> 1.7.3 c++实例</h6><p>目录结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- do_clean.sh</span></span><br><span class="line"><span class="string">|-- genPrj.sh</span></span><br><span class="line"><span class="string">|---src</span></span><br><span class="line">     <span class="string">|-- hello.cc</span></span><br><span class="line">     <span class="string">|-- main.gyp</span></span><br><span class="line">     <span class="string">|-- my_class</span></span><br><span class="line">           <span class="string">|-- my_class.cc</span></span><br><span class="line">           <span class="string">|-- my_class.h</span></span><br></pre></td></tr></table></figure><p><a href="http://genPrj.sh" target="_blank" rel="noopener">genPrj.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">gyp --depth=. --generator-output=build src/main.gyp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d build ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">cd</span> bulid</span><br><span class="line">make</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><a href="http://hello.cc" target="_blank" rel="noopener">hello.cc</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_class/my_class.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello world\n"</span>);</span><br><span class="line"><span class="function">MyClass <span class="title">my_class</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">my_class.Fun1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.gyp</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">   <span class="symbol">'targets'</span>: [    </span><br><span class="line">     &#123;    </span><br><span class="line">       <span class="symbol">'target_name'</span>: <span class="symbol">'my_class'</span>,    </span><br><span class="line">       <span class="symbol">'type'</span>: <span class="symbol">'executable'</span>,    </span><br><span class="line">       <span class="symbol">'sources'</span>: [    </span><br><span class="line">         <span class="symbol">'hello</span>.cc',    </span><br><span class="line">         <span class="symbol">'my_class</span>/my_class.h',    </span><br><span class="line">         <span class="symbol">'my_class</span>/my_class.cc',    </span><br><span class="line">       ],    </span><br><span class="line">     &#125;,    </span><br><span class="line">   ],    </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>my_class.cc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"my_class.h"</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="keyword">void</span> MyClass::Fun1() &#123;    </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"the value is %d\n"</span>, value_);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>my_class.h</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">  MyClass(<span class="keyword">int</span> <span class="keyword">value</span>) : value_(<span class="keyword">value</span>) &#123;&#125;    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Fun1</span>(<span class="params"></span>)</span>;    </span><br><span class="line"><span class="keyword">private</span>:    </span><br><span class="line">  <span class="keyword">int</span> value_;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="18-ninja"><a class="markdownIt-Anchor" href="#18-ninja"></a> 1.8 ninja</h5><p>gyp是google为chromium项目开发的管理工具，功能类似于cmake。gyp只能产生编译脚本，真正的编译工作还有靠其他工具，例如: ninja。</p><h6 id="181-安装gyp和ninja"><a class="markdownIt-Anchor" href="#181-安装gyp和ninja"></a> 1.8.1 安装gyp和ninja</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install gyp</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install ninja-build</span><br></pre></td></tr></table></figure><h6 id="182-一个简单的例子"><a class="markdownIt-Anchor" href="#182-一个简单的例子"></a> 1.8.2 一个简单的例子</h6><ol><li><p>首先准备一个源文件，我写了template_sample.cpp,代码如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;  </span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span></span>&#123; <span class="keyword">return</span> a+b; &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt; add&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>,<span class="number">6</span>)&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt; add&lt;<span class="keyword">double</span>&gt;(<span class="number">3.4</span>,<span class="number">4.0</span>)&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写gyp使用的文件，build.gyp（后缀是.gyp即可，名字随意）</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'executable'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'template_sample.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成ninja脚本，命令如下：</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gyp <span class="attribute">-depth</span>=. <span class="attribute">-format</span>=ninja ./build.gyp</span><br></pre></td></tr></table></figure><p>其中<code>-depth=.</code> 表示在当前文件夹下寻找开始的gyp脚本，必须显示的指出gyp没有默认设置。 <code>-format=ninja</code> 表示要生成ninja的脚本，默认生成的是Makefile<br>执行后，会在当前目录下生成一个out目录。其结构如下：</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">out</span></span><br><span class="line">|<span class="comment">-- Default</span></span><br><span class="line">|<span class="comment">-- an</span></span><br><span class="line">|<span class="comment">-- build.ninja</span></span><br><span class="line">|<span class="comment">-- obj</span></span><br><span class="line">  |<span class="comment">-- an.ninja</span></span><br><span class="line">  |<span class="comment">-- an.template_sample.o</span></span><br></pre></td></tr></table></figure></li><li><p>编译，执行如下命令：</p> <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja -C <span class="keyword">out</span>/<span class="keyword">Default</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>: -C是大写，执行成功后会在out/Default目录下生成一个叫做an的可执行文件，这个an就是在target_name字段指定的名字。</p></li><li><p>clean整个工程重新编译</p><p>目前，gyp没有提供clean的方案，所以只能手动删除out目录。</p></li></ol><h6 id="183-gyp脚本的编写"><a class="markdownIt-Anchor" href="#183-gyp脚本的编写"></a> 1.8.3 gyp脚本的编写</h6><ol><li><p>如何增加编译、链接参数<br>编译参数一般增加在conditions字段，根据系统的不同增加cflags和ldflags,如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'executable'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'template_sample.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[  </span><br><span class="line">              [<span class="string">'OS=="win"'</span>,&#123;  </span><br><span class="line">                             <span class="string">'cflags'</span>:[],  </span><br><span class="line">                             <span class="string">'ldflags'</span>:[]  </span><br><span class="line">                         &#125;,&#123;  </span><br><span class="line">                              <span class="string">'cflags'</span>:[  </span><br><span class="line">                                   <span class="string">'--std=c++11'</span>,  </span><br><span class="line">                               ],  </span><br><span class="line">                              <span class="string">'ldflags'</span>:[]  </span><br><span class="line">                         &#125;  </span><br><span class="line">              ],  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意conditions字段的变化：<code>'OS=&quot;win&quot;'</code>是条件语句的后要有<code>,</code>号，第一个括号内表示条件为真时的参数，第二个括号表示条件为假时的参数。上面的例子中，我在不是win的系统上增加了<code>--std=c++11</code>这个参数。<br>另外，这里有必要提一下链接顺序问题。在链接的时候，链接器对符号表的寻找是按照你输入的命令的顺序进行的，比如a.o需要libm.so的函数，那么libm.so在链接命令里就必须写在a.o的后面，因为链接器发现a.o有函数没有找到，就只会去他后面的库里找，如果你把libm.so写在前面，自然就找不到。所以在增加链接库的时候，不要在ldflags里增加-l类的参数，这类参数要加到libraries字段里 如：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'executable'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'template_sample.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[  </span><br><span class="line">              [<span class="string">'OS=="win"'</span>,&#123;  </span><br><span class="line">                             <span class="string">'cflags'</span>:[],  </span><br><span class="line">                             <span class="string">'ldflags'</span>:[]  </span><br><span class="line">                         &#125;,&#123;  </span><br><span class="line">                              <span class="string">'cflags'</span>:[  </span><br><span class="line">                                   <span class="string">'--std=c++11'</span>,  </span><br><span class="line">                               ],  </span><br><span class="line">                              <span class="string">'ldflags'</span>:[]，  </span><br><span class="line">                              <span class="string">'libraries'</span>:[  </span><br><span class="line">                                  <span class="string">'-lm'</span>  </span><br><span class="line">                              ]  </span><br><span class="line">                         &#125;  </span><br><span class="line">              ],  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>头文件路径设定 --include_dirs字段的使用<br>有如下工程目录结构</p> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">-- build.gyp</span></span><br><span class="line">|<span class="string">-- include</span></span><br><span class="line">|<span class="string"></span>|<span class="string">-- define.h</span></span><br><span class="line">|<span class="string">-- main.cpp</span></span><br></pre></td></tr></table></figure><p>main.cpp的代码如下</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"defines.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; MY_NUMBER &lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见main.cpp文件引用了defines.h这个头文件，所以在编译的时候需要告诉编译系统到哪里去寻找这个defines.h文件。为此buid.gyp如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'executable'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[  </span><br><span class="line">                <span class="string">'include'</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'main.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出头文件的位置include在include_dirs字段中被指出。这里需要注意，两个单引号之间一定是文件的路径，不要包含不必要的空格等其他字符。</p></li><li><p>编译参数增加宏定义 --defines字段使用<br>测试程序的源码如下：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> BIG_NUMBER  </span></span><br><span class="line"><span class="keyword">int</span> out_number = <span class="number">10</span>;   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line"><span class="keyword">int</span> out_number = <span class="number">1</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; out_number &lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，如果BIG_NUMBER宏被定义，则输出为10 ，否则为1。在使用Makefile的时候，我们可以通过为gcc增加-DBIG_NUBMER参数的方式来定义这个宏。那在gyp管理的时候，我们就要使用defines字段，代码如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'executable'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[  </span><br><span class="line">                 <span class="string">'BIG_NUMBER'</span>  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'main.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译静态库(动态库)</p><p>有时我们不是要输出一个可执行文件，而是要编译一个静态库或动态库。这就要修改type字段，上文中type字段使用了executable，实际还可以设置为<code>static_library</code>,修改后的gyp脚本如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'static_library'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'main.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这样在out/Default/obj的目录下就会生成一个liban.a的静态库。</p><pre><code>动态库的方式类似，只需把type字段设置为shared_library即可。另外还有一种使用变量的方法，在这里提前介绍一下。就是将type字段设置为`&lt;(library)`,完整的代码如下：<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">'targets'</span>:[  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">'target_name'</span>:<span class="string">'an'</span>,  </span><br><span class="line">            <span class="string">'type'</span>:<span class="string">'&lt;(library)'</span>,  </span><br><span class="line">            <span class="string">'dependencies'</span>:[],  </span><br><span class="line">            <span class="string">'defines'</span>:[],  </span><br><span class="line">            <span class="string">'include_dirs'</span>:[],  </span><br><span class="line">            <span class="string">'sources'</span>:[  </span><br><span class="line">                <span class="string">'main.cpp'</span>,  </span><br><span class="line">            ],  </span><br><span class="line">            <span class="string">'conditions'</span>:[]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ],    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然后在使用gyp工具的时候指定这个library的值，如：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gyp <span class="attribute">-depth</span>=. <span class="attribute">-format</span>=ninja <span class="attribute">-Dlibrary</span>=static_library ./build.gyp</span><br></pre></td></tr></table></figure>这样生成ninja脚本后，也可以生成静态库，这样做的好处是你可以在真正输出时再决定输出静态库还是动态库。尤其对于要一次生成多个库的情况下，这种方法尤其好用。</code></pre><h5 id="19-更多功能介绍"><a class="markdownIt-Anchor" href="#19-更多功能介绍"></a> 1.9 更多功能介绍</h5><h6 id="设计准则"><a class="markdownIt-Anchor" href="#设计准则"></a> 设计准则：</h6><ul><li>关键字一致性：所有的关键字都和平台项目的配置字段相同</li><li>通过前缀表明配置属于的特定平台。比如：<code>msvs_disabled_warnings</code>,<code>xcode_framework_dirs</code></li></ul><p><strong>样例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"target_defaults"</span>: &#123;</span><br><span class="line">        <span class="attr">"defines"</span>: [</span><br><span class="line">            <span class="string">"U_STATIC_IMPLEMENTATION"</span>,</span><br><span class="line">            [</span><br><span class="line">                <span class="string">"LOGFILE"</span>,</span><br><span class="line">                <span class="string">"foo.log"</span></span><br><span class="line">            ]</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"include_dirs"</span>: [</span><br><span class="line">            <span class="string">".."</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"targets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"target_name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"static_library"</span>,</span><br><span class="line">            <span class="attr">"sources"</span>: [</span><br><span class="line">                <span class="string">"foo/src/foo.cc"</span>,</span><br><span class="line">                <span class="string">"foo/src/foo_main.cc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"include_dirs"</span>: [</span><br><span class="line">                <span class="string">"foo"</span>,</span><br><span class="line">                <span class="string">"foo/include"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"conditions"</span>: [</span><br><span class="line">                [</span><br><span class="line">                    <span class="string">"OS==mac"</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"sources"</span>: [</span><br><span class="line">                            <span class="string">"platform_test_mac.mm"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"direct_dependent_settings"</span>: &#123;</span><br><span class="line">                <span class="attr">"defines"</span>: [</span><br><span class="line">                    <span class="string">"UNIT_TEST"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"include_dirs"</span>: [</span><br><span class="line">                    <span class="string">"foo"</span>,</span><br><span class="line">                    <span class="string">"foo/include"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构元素</strong></p><p>.gyp文件中定义了一些targets和构建规则。</p><p>下面的关键字可以定义在最顶层：</p><ul><li><p>conditions:条件定义。</p></li><li><p>includes:包含.gypi文件的列表</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"targets"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">"target_name"</span>: <span class="string">"Thread"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"executable"</span>,</span><br><span class="line"><span class="attr">"includes"</span>: [</span><br><span class="line"><span class="string">"../common.gypi"</span>,</span><br><span class="line"><span class="string">"./thread.gypi"</span></span><br><span class="line">]</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>target_defaults:默认的项目配置，每个项目(targets)的配置都需要从这个配置继承</p></li><li><p>targets:项目列表</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"targets"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"target_name"</span>: <span class="string">"hello1"</span>,</span><br><span class="line"><span class="attr">"product_extension"</span>: <span class="string">"stuff"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"executable"</span>,</span><br><span class="line"><span class="attr">"sources"</span>: [</span><br><span class="line"><span class="string">"hello.c"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"target_name"</span>: <span class="string">"hello2"</span>,</span><br><span class="line"><span class="attr">"target_extension"</span>: <span class="string">"stuff"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"executable"</span>,</span><br><span class="line"><span class="attr">"sources"</span>: [</span><br><span class="line"><span class="string">"hello.c"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>variable: 定义了键值对，可以被其他地方以<code>&lt;(varname)</code>的方式引用</p>  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'variables'</span>: &#123;</span><br><span class="line">    <span class="string">'pi'</span>: <span class="string">'import math; print math.pi'</span>,</span><br><span class="line">    <span class="string">'third_letters'</span>: <span class="string">"&lt;(other_letters)HIJK"</span>,</span><br><span class="line">    <span class="string">'letters_list'</span>: <span class="string">'ABCD'</span>,</span><br><span class="line">    <span class="string">'other_letters'</span>: <span class="string">'&lt;(letters_list)EFG'</span>,</span><br><span class="line">    <span class="string">'check_included'</span>: <span class="string">'&lt;(included_variable)'</span>,</span><br><span class="line">    <span class="string">'check_lists'</span>: [</span><br><span class="line">      <span class="string">'&lt;(included_variable)'</span>,</span><br><span class="line">      <span class="string">'&lt;(third_letters)'</span>,</span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'check_int'</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">'check_str_int'</span>: <span class="string">'6'</span>,</span><br><span class="line">    <span class="string">'check_list_int'</span>: [</span><br><span class="line">      <span class="number">7</span>,</span><br><span class="line">      <span class="string">'8'</span>,</span><br><span class="line">      <span class="number">9</span>,</span><br><span class="line">      </span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'not_int_1'</span>: <span class="string">' 10'</span>,</span><br><span class="line">    <span class="string">'not_int_2'</span>: <span class="string">'11 '</span>,</span><br><span class="line">    <span class="string">'not_int_3'</span>: <span class="string">'012'</span>,</span><br><span class="line">    <span class="string">'not_int_4'</span>: <span class="string">'13.0'</span>,</span><br><span class="line">    <span class="string">'not_int_5'</span>: <span class="string">'+14'</span>,</span><br><span class="line">    <span class="string">'negative_int'</span>: <span class="string">'-15'</span>,</span><br><span class="line">    <span class="string">'zero_int'</span>: <span class="string">'0'</span>,</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>项目(targets)</strong></p><p>.gyp文件定义的一套构建项目的规则。targets中也可以包含<code>includes</code>,<code>conditions</code>和<code>variables</code>。下面的是一些targets中的专有字段：</p><ul><li><p>target_name: 指定定义的target的名称</p></li><li><p>type: target的类型。支持<code>executable</code>、<code>static_library</code>、<code>shared_library</code>和<code>none</code>.其中<code>none</code>类型也很有用，可以作为处理资源、文档等特别项目的类型。例如，在Windows中,<code>none</code>将作为工具集类型的项目存在</p></li><li><p>product_extension:指定target生成目标的扩展名，不包含’.’</p></li><li><p>product_name: 指定tareget生成目标的文件名，与 <code>product_extension</code> 组成一个文件全名</p></li><li><p>dependencies:指定target依赖的其他target</p>  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'targets'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'target_name'</span>: <span class="string">'a'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'static_library'</span>,</span><br><span class="line">      <span class="string">'dependencies'</span>: [</span><br><span class="line">        <span class="string">'b/b.gyp:b'</span>,</span><br><span class="line">        <span class="string">'c/c.gyp:*'</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'sources'</span>: [</span><br><span class="line">        <span class="string">'a.c'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>defines: 定义了预处理宏。类似于C/C++命令行编译中的-D或者/D选项</p>  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'targets'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'target_name'</span>: <span class="string">'defines'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'executable'</span>,</span><br><span class="line">      <span class="string">'defines'</span>: [</span><br><span class="line">        <span class="string">'FOO'</span>,</span><br><span class="line">        <span class="string">'VALUE=1'</span>,</span><br><span class="line">        <span class="string">'PAREN_VALUE=(1+2+3)'</span>,</span><br><span class="line">        <span class="string">'HASH_VALUE="a#1"'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'sources'</span>: [</span><br><span class="line">        <span class="string">'defines.c'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>include_dirs: 指定了包含文件的查找目录。类似于C/C++命令行编译中的-I或/I选项</p>  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'targets'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'target_name'</span>: <span class="string">'includes'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'executable'</span>,</span><br><span class="line">      <span class="string">'dependencies'</span>: [</span><br><span class="line">        <span class="string">'subdir/subdir_includes.gyp:subdir_includes'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'cflags'</span>: [</span><br><span class="line">        <span class="string">'-Ishadow1'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'include_dirs'</span>: [</span><br><span class="line">        <span class="string">'.'</span>,</span><br><span class="line">        <span class="string">'inc1'</span>,</span><br><span class="line">        <span class="string">'shadow2'</span>,</span><br><span class="line">        <span class="string">'subdir/inc2'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      <span class="string">'sources'</span>: [</span><br><span class="line">        <span class="string">'includes.c'</span>,</span><br><span class="line">        </span><br><span class="line">      ],</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sources:列出了项目中的代码文件和一些项目相关的文件.<code>sources!</code>段中可以指定被排除的文件</p></li><li><p>configurations:为targets定义的一套构建配置。</p></li><li><p>link_settings:指定target需要链接的库。<code>executable</code>和<code>shared_library</code> 类型的target需要指定链接库。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有配置。可以与<code>all_dependent_settings</code>、<code>direct_dependent_setting</code>做对比</p></li><li><p>direct_dependent_settings:指定依赖本target的target设置。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有属性。可以与<code>all_dependent_settings</code>、<code>link_settings</code>做对比</p></li><li><p>all_dependent_settings:</p></li><li><p>libraries:指定target依赖的库，见<code>link_settings&gt;libraries</code></p>  <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">'link_settings'</span>: &#123;</span><br><span class="line"></span><br><span class="line"><span class="string">'libraries'</span>: [</span><br><span class="line"></span><br><span class="line"><span class="string">'libiconv.dylib'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'&lt;(ZLIB_DIR)contrib/minizip/libminizip.a'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'libcurl.dylib'</span>,],</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>actions:针对输入的文件，定义了一组自定义的构建动作。</p></li><li><p>copies:定义了一套拷贝动作。</p></li><li><p>rules:</p></li><li><p>target_conditions:类似于conditions,但是起左右的时间比conditions晚</p></li><li><p>msvs_precompiled_header:指定预编译头文件。只能用于Visual Studio</p></li><li><p>msvs_precompiled_source:指定预编译源文件。只能用于Visual Studio</p></li><li><p>msvs_prebuild:生成之前事件。只能用于Visual Studio</p></li><li><p>msvs_postbuild:生成之后事件。只能用于Visual Studio</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'msvs_postbuild'</span>:<span class="string">r'copy "$&#123;OutDir&#125;$&#123;TargetName&#125;" "C:\$&#123;TargetName&#125;"'</span></span><br></pre></td></tr></table></figure></li><li><p>msvs_props:指定target的属性页文件(.vsprops)。只能用于Visual Studio</p></li><li><p>msvs_cygwin_shell:指定action运行在cygwin下。只能用于Visual Studio</p></li><li><p>msvs_cygwin_dirs:指定cygwin的目录。只能用于Visual Studio</p></li><li><p>xcode_config_file:在xcode中，指定target的配置文件(.xcconfig)。只能用于xcode</p></li><li><p>xcode_framework_dirs:在xcode中，指定框架的目录。只能用于xcode</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gyp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Android中软键盘与布局的问题</title>
      <link href="/2017/12/05/%E5%85%B3%E4%BA%8EAndroid%E4%B8%AD%E8%BD%AF%E9%94%AE%E7%9B%98%E4%B8%8E%E5%B8%83%E5%B1%80%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2017/12/05/%E5%85%B3%E4%BA%8EAndroid%E4%B8%AD%E8%BD%AF%E9%94%AE%E7%9B%98%E4%B8%8E%E5%B8%83%E5%B1%80%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。</p></blockquote><p><strong>解决办法：</strong></p><p>方法一、在Activity中的onCreate中setContentView之前写上如下代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getWindow</span><span class="params">()</span></span>.setSoftInputMode(WindowManager<span class="selector-class">.LayoutParams</span><span class="selector-class">.SOFT_INPUT_ADJUST_PAN</span>)</span><br></pre></td></tr></table></figure><p>方法二、在项目的AndroidManifest.xml文件中界面对应<activity>里加上 <code>android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot;</code>,这样会让屏幕整体上移。如果加上的是<code>android:windowSoftInputMode=&quot;adjustPan&quot;</code>这样键盘就会覆盖屏幕。</activity></p><p>方法三、把顶级的layout替换为ScrollView, 或者在顶级的layout外再嵌套一层ScrollView。这样页面就可以一起滚动了，软键盘会一直处于底部。</p><p><strong>注意：</strong> 方法一和二应该是同一种方法，只不过一个是在代码中实现一个是在xml中实现。</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keyboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android中通过反射获取资源ID</title>
      <link href="/2017/12/05/Android%E4%B8%AD%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90ID/"/>
      <url>/2017/12/05/Android%E4%B8%AD%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90ID/</url>
      
        <content type="html"><![CDATA[<p>某些时候，自己把代码打包成工具jar包，但jar包中可能引用到res中的资源，这时候不能将资源一起打包，只能通过反射机制动态获取</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过反射获取组件的id号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static <span class="built_in">int</span> get<span class="constructor">CompentID(String <span class="params">packageName</span>, String <span class="params">className</span>,String <span class="params">idName</span>)</span> &#123;</span><br><span class="line"><span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; cls = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="params">packageName</span> + <span class="string">".R$"</span> + <span class="params">className</span>)</span>;</span><br><span class="line">id = cls.get<span class="constructor">Field(<span class="params">idName</span>)</span>.get<span class="constructor">Int(<span class="params">cls</span>)</span>;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">LogUtil.<span class="constructor">LogPrint(LogUtil.LOG_ERROR, <span class="string">"缺少"</span> + <span class="params">idName</span> + <span class="string">"文件!"</span>)</span>;</span><br><span class="line">e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">&#125;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS设置AppIcon&amp;LauncherImages尺寸和位置</title>
      <link href="/2017/12/05/iOS%E8%AE%BE%E7%BD%AEAppIcon-LauncherImages%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE/"/>
      <url>/2017/12/05/iOS%E8%AE%BE%E7%BD%AEAppIcon-LauncherImages%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="ios-appicon图标布局及尺寸"><a class="markdownIt-Anchor" href="#ios-appicon图标布局及尺寸"></a> iOS AppIcon图标布局及尺寸</h3><hr><h4 id="appicon图标尺寸"><a class="markdownIt-Anchor" href="#appicon图标尺寸"></a> AppIcon图标尺寸：</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1024</span>px*<span class="number">1024</span>px     <span class="number">180</span>px*<span class="number">180</span>px    <span class="number">120</span>px*<span class="number">120</span>px  <span class="number">87</span>px*<span class="number">87</span>px  <span class="number">80</span>px*<span class="number">80</span>px   <span class="number">60</span>px*<span class="number">60</span>px  <span class="number">58</span>px*<span class="number">58</span>px    <span class="number">40</span>px*<span class="number">40</span>px</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="appicon位置"><a class="markdownIt-Anchor" href="#appicon位置"></a> AppIcon位置：</h4><table><thead><tr><th style="text-align:left">iPhone Notification</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">60px × 60px (20pt × 20pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">40px × 40px (20pt × 20pt @2x)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">iPhone Settings</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">87px × 87px (29pt × 29pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">58px × 58px (29pt × 29pt @2x)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">iPhone Spotlight</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">120px × 120px (40pt × 40pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">80px × 80px (40pt × 40pt @2x)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">iPhone App</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">180px × 180px (60pt × 60pt @3x)</td></tr><tr><td style="text-align:left"></td><td style="text-align:center">120px × 120px (60pt × 60pt @2x)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">App Store</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left"></td><td style="text-align:center">1024px × 1024px (1024pt × 1024pt @1x)</td></tr></tbody></table><h3 id="launch-screen-images"><a class="markdownIt-Anchor" href="#launch-screen-images"></a> Launch Screen Images</h3><hr><table><thead><tr><th style="text-align:left">Location</th><th style="text-align:center">Portrait size</th><th style="text-align:center">Device</th></tr></thead><tbody><tr><td style="text-align:left">iPhoneX</td><td style="text-align:center">125px × 2436px</td><td style="text-align:center">iPhone X</td></tr><tr><td style="text-align:left">Retina HD 5.5&quot;</td><td style="text-align:center">1242px × 2208px</td><td style="text-align:center">6 plus / 7 plus / 8 plus</td></tr><tr><td style="text-align:left">Retina HD 4.7&quot;</td><td style="text-align:center">750px × 1334px</td><td style="text-align:center">6/ 6s/ 7/ 8</td></tr><tr><td style="text-align:left">Retina 4</td><td style="text-align:center">640px × 1136px</td><td style="text-align:center">5/ 5s/ 5c/ se</td></tr><tr><td style="text-align:left">2x</td><td style="text-align:center">640px × 960px</td><td style="text-align:center">4/ 4s</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> appicon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用命令总结</title>
      <link href="/2017/11/16/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2017/11/16/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一-连接mysql"><a class="markdownIt-Anchor" href="#一-连接mysql"></a> 一、连接MYSQL</h3><p>格式： mysql -h主机地址 -u用户名 －p用户密码<br>或者： mysql -u 用户名 -p // 回车后要求输入密码，密码不可见</p><a id="more"></a><h4 id="1-连接到本机上的mysql"><a class="markdownIt-Anchor" href="#1-连接到本机上的mysql"></a> 1、连接到本机上的MYSQL</h4><p>首先打开DOS窗口，然后进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是如果-p后带有用户密码，那么-p与密码之间必须没有空格，否则让你重新输入密码.例如以下都是合法的登陆：(帐号：root   密码:123)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">mysql -uroot -p</span><br><span class="line">mysql -uroot -p123</span><br></pre></td></tr></table></figure><p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p><h4 id="2-连接到远程主机上的mysql"><a class="markdownIt-Anchor" href="#2-连接到远程主机上的mysql"></a> 2、连接到远程主机上的MYSQL</h4><p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>mysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</p><h4 id="3-退出mysql命令"><a class="markdownIt-Anchor" href="#3-退出mysql命令"></a> 3、退出MYSQL命令</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exit</span> （回车）</span><br></pre></td></tr></table></figure><h3 id="二-修改密码"><a class="markdownIt-Anchor" href="#二-修改密码"></a> 二、修改密码</h3><p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p><h4 id="1-给root加个密码ab12"><a class="markdownIt-Anchor" href="#1-给root加个密码ab12"></a> 1、给root加个密码ab12</h4><p>首先在DOS下进入目录mysql\bin，然后键入以下命令<br>mysqladmin -u root -password ab12<br>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p><h4 id="2-再将root的密码改为djg345"><a class="markdownIt-Anchor" href="#2-再将root的密码改为djg345"></a> 2、再将root的密码改为djg345</h4><p>mysqladmin -u root -p ab12 password djg345<br>（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</p><h4 id="3-命令行修改root密码"><a class="markdownIt-Anchor" href="#3-命令行修改root密码"></a> 3、命令行修改root密码</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(’新密码’) <span class="keyword">WHERE</span> <span class="keyword">User</span>=’root’;</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h4 id="4-显示当前的user"><a class="markdownIt-Anchor" href="#4-显示当前的user"></a> 4、显示当前的user</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br></pre></td></tr></table></figure><h3 id="三-增加新用户"><a class="markdownIt-Anchor" href="#三-增加新用户"></a> 三、增加新用户</h3><p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p><h4 id="1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限"><a class="markdownIt-Anchor" href="#1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限"></a> 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。</h4><p>首先用root用户连入MYSQL，然后键入以下命令：<br>grant select,insert,update,delete on <em>.</em> to test1”%&quot; Identified by “abc”;<br>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p><h4 id="2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机"><a class="markdownIt-Anchor" href="#2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机"></a> 2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）</h4><p>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> test2@localhost identifiedby <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span> <span class="keyword">on</span> mydb.* <span class="keyword">to</span> test2@localhost <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">""</span>;</span><br></pre></td></tr></table></figure><h3 id="四-操作技巧"><a class="markdownIt-Anchor" href="#四-操作技巧"></a> 四、操作技巧</h3><p>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。<br>也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。<br>2、你可以使用光标上下键调出以前的命令。</p><h3 id="五-对数据库的操作"><a class="markdownIt-Anchor" href="#五-对数据库的操作"></a> 五、对数据库的操作</h3><h4 id="1-显示当前数据库服务器中的数据库列表"><a class="markdownIt-Anchor" href="#1-显示当前数据库服务器中的数据库列表"></a> 1、显示当前数据库服务器中的数据库列表：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SHOW </span>DATABASES<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p><h4 id="2-显示数据库中的数据表"><a class="markdownIt-Anchor" href="#2-显示数据库中的数据表"></a> 2、显示数据库中的数据表：</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">USE</span> 库名；</span><br><span class="line">mysql&gt; <span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><h4 id="3-显示use的数据库名"><a class="markdownIt-Anchor" href="#3-显示use的数据库名"></a> 3、显示use的数据库名：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();</span><br></pre></td></tr></table></figure><h4 id="4-建立数据库"><a class="markdownIt-Anchor" href="#4-建立数据库"></a> 4、建立数据库：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure><h4 id="5-删除数据库"><a class="markdownIt-Anchor" href="#5-删除数据库"></a> 5、删除数据库：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">DROP</span> <span class="keyword">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure><h4 id="6-导入sql文件命令"><a class="markdownIt-Anchor" href="#6-导入sql文件命令"></a> 6、导入.sql文件命令：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">USE</span> 数据库名;</span><br><span class="line">mysql&gt; SOURCE d:/mysql.sql;</span><br></pre></td></tr></table></figure><p>也可以在DOS环境下键入以下命令进行导入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysql</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-proot</span> <span class="selector-tag">databasename</span> &lt; <span class="selector-tag">databasename</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:导入前请保证mysql中必须有databasename这个数据库;</p><h3 id="六-备份数据库"><a class="markdownIt-Anchor" href="#六-备份数据库"></a> 六、备份数据库：</h3><p>注意，mysqldump命令在DOS的 mysql\bin 目录下执行,不能在mysql环境下执行，因此，不能以分号“;”结尾。若已登陆mysql，请运行退出命令mysql&gt; exit</p><h4 id="1导出整个数据库"><a class="markdownIt-Anchor" href="#1导出整个数据库"></a> 1.导出整个数据库</h4><p>导出文件默认是存在mysql\bin目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysqldump</span> <span class="string">-u用户名 -p数据库名 &gt; 导出的文件名</span></span><br><span class="line"><span class="attr">mysqldump</span> <span class="string">-uroot -p123456 database_name &gt; outfile_name.sql</span></span><br></pre></td></tr></table></figure><h4 id="2导出一个表"><a class="markdownIt-Anchor" href="#2导出一个表"></a> 2.导出一个表</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -<span class="selector-tag">p</span> 数据库名 表名&gt; 导出的文件名</span><br><span class="line">mysqldump -u user_name -<span class="selector-tag">p</span> database_name table_name &gt; outfile_name.sql</span><br></pre></td></tr></table></figure><h4 id="3导出一个数据库结构"><a class="markdownIt-Anchor" href="#3导出一个数据库结构"></a> 3.导出一个数据库结构</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u user_name -p -d –<span class="keyword">add</span>-<span class="keyword">drop</span>-<span class="keyword">table</span> database_name &gt; outfile_name.<span class="keyword">sql</span></span><br><span class="line">-d 没有数据 –<span class="keyword">add</span>-<span class="keyword">drop</span>-<span class="keyword">table</span> 在每个<span class="keyword">create</span>语句之前增加一个<span class="keyword">drop</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure><h4 id="4带语言参数导出"><a class="markdownIt-Anchor" href="#4带语言参数导出"></a> 4.带语言参数导出</h4><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mysqldump </span>-<span class="string">uroot </span>-p –<span class="string">default-character-</span><span class="string">set=</span><span class="string">latin1 </span>–<span class="built_in">set-charset=gbk</span> –<span class="string">skip-opt </span><span class="string">database_name </span>&gt; <span class="string">outfile_name.</span><span class="string">sql</span></span><br></pre></td></tr></table></figure><h3 id="七-将文本数据转到数据库中"><a class="markdownIt-Anchor" href="#七-将文本数据转到数据库中"></a> 七、将文本数据转到数据库中</h3><h4 id="1-文本数据应符合的格式"><a class="markdownIt-Anchor" href="#1-文本数据应符合的格式"></a> 1、文本数据应符合的格式</h4><p>字段数据之间用tab键隔开，null值用\n来代替.例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">3 </span>rose 大连二中 <span class="number">1976</span>-<span class="number">10</span>-<span class="number">10</span></span><br><span class="line"><span class="symbol">4 </span>mike 大连一中 <span class="number">1975</span>-<span class="number">12</span>-<span class="number">23</span></span><br></pre></td></tr></table></figure><p>假设你把这两组数据存为school.txt文件，放在c盘根目录下。</p><h4 id="2-数据传入命令"><a class="markdownIt-Anchor" href="#2-数据传入命令"></a> 2、数据传入命令</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">load</span> data <span class="keyword">local</span> infile "c:\school.txt" <span class="keyword">into</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:你最好将文件复制到mysql\bin目录下，并且要先用use命令打表所在的库。</p><h3 id="八-对表的操作"><a class="markdownIt-Anchor" href="#八-对表的操作"></a> 八、对表的操作</h3><h4 id="1-显示数据表的结构"><a class="markdownIt-Anchor" href="#1-显示数据表的结构"></a> 1、显示数据表的结构：</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">DESCRIBE</span> 表名; （<span class="keyword">DESC</span> 表名）</span><br></pre></td></tr></table></figure><h4 id="2-建立数据表"><a class="markdownIt-Anchor" href="#2-建立数据表"></a> 2、建立数据表：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE 库名; //进入数据库</span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (字段名 <span class="type">VARCHAR</span>(<span class="number">20</span>), 字段名 <span class="type">CHAR</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h4 id="3-删除数据表"><a class="markdownIt-Anchor" href="#3-删除数据表"></a> 3、删除数据表：</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP <span class="keyword">TABLE</span> 表名；</span><br></pre></td></tr></table></figure><h4 id="4-重命名数据表"><a class="markdownIt-Anchor" href="#4-重命名数据表"></a> 4、重命名数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">rename</span> t2;</span><br></pre></td></tr></table></figure><h4 id="5-显示表中的记录"><a class="markdownIt-Anchor" href="#5-显示表中的记录"></a> 5、显示表中的记录：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="6-往表中插入记录"><a class="markdownIt-Anchor" href="#6-往表中插入记录"></a> 6、往表中插入记录：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (”hyq”,”M”);</span><br></pre></td></tr></table></figure><h4 id="7-更新表中数据"><a class="markdownIt-Anchor" href="#7-更新表中数据"></a> 7、更新表中数据：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql-&gt; UPDATE 表名 <span class="builtin-name">SET</span> 字段名<span class="attribute">1</span>=’a',字段名2=’b’ WHERE 字段名<span class="attribute">3</span>=’c';</span><br></pre></td></tr></table></figure><h4 id="8-将表中记录清空"><a class="markdownIt-Anchor" href="#8-将表中记录清空"></a> 8、将表中记录清空：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="9-用文本方式将数据装入数据表中"><a class="markdownIt-Anchor" href="#9-用文本方式将数据装入数据表中"></a> 9、用文本方式将数据装入数据表中：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">LOAD</span> DATA <span class="keyword">LOCAL</span> INFILE “D:/mysql.txt” <span class="keyword">INTO</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><h4 id="10-显示表的定义"><a class="markdownIt-Anchor" href="#10-显示表的定义"></a> 10、 显示表的定义</h4><p>还可以看到表的约束，例如外键</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> yourtablename</span><br></pre></td></tr></table></figure><p>还可以通过 mysqldump 将表的完整定义转储到文件中，当然包括外键定义。<br>还可以通过下面的指令列出表 T 的外键约束：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> yourdatabasename <span class="keyword">LIKE</span> <span class="string">'T'</span></span><br></pre></td></tr></table></figure><p>外键约束将会在表注释中列出。</p><h3 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h3><h4 id="11-创建存储过程"><a class="markdownIt-Anchor" href="#11-创建存储过程"></a> 11、创建存储过程</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">procedureName</span> <span class="params">(<span class="keyword">in</span> paramentName <span class="keyword">type</span>, <span class="keyword">in</span> paramentName <span class="keyword">type</span>,……)</span></span></span><br><span class="line"><span class="function"><span class="title">BEGIN</span></span></span><br><span class="line"><span class="function"><span class="title">SQL</span> <span class="title">sentences</span>;</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="12-调用存储过程"><a class="markdownIt-Anchor" href="#12-调用存储过程"></a> 12、调用存储过程</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CALL procedureName(paramentList)<span class="comment">;</span></span><br><span class="line">例：mysql&gt; CALL <span class="keyword">addMoney(12, </span><span class="number">500</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="13-查看特定数据库的存储过程"><a class="markdownIt-Anchor" href="#13-查看特定数据库的存储过程"></a> 13、查看特定数据库的存储过程</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法一：mysql&gt; <span class="keyword">SELECT</span> `name` <span class="keyword">FROM</span> mysql.proc <span class="keyword">WHERE</span> db = <span class="string">'your_db_name'</span> <span class="keyword">AND</span> `<span class="keyword">type</span>` = <span class="string">'PROCEDURE'</span>;</span><br><span class="line">方法二：mysql&gt; show <span class="function"><span class="keyword">procedure</span> <span class="title">status</span>;</span></span><br></pre></td></tr></table></figure><h4 id="14-删除存储过程"><a class="markdownIt-Anchor" href="#14-删除存储过程"></a> 14、删除存储过程</h4><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">procedure_name</span>;</span></span><br><span class="line">mysql&gt; DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">IF</span> <span class="title">EXISTS</span> <span class="title">procedure_name</span>;</span></span><br></pre></td></tr></table></figure><h4 id="15-查看指定的存储过程定义"><a class="markdownIt-Anchor" href="#15-查看指定的存储过程定义"></a> 15、查看指定的存储过程定义</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW <span class="keyword">CREATE</span> <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">proc_name</span>;</span></span><br><span class="line">mysql&gt; SHOW <span class="keyword">CREATE</span> <span class="function"><span class="keyword">FUNCTION</span> <span class="title">func_name</span>;</span></span><br><span class="line">---------- 示例一-----------</span><br><span class="line">mysql&gt; DELIMITER</span><br><span class="line">mysql&gt;USE‘dbname‘</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择数据库</span></span><br><span class="line">mysql&gt; DROP <span class="function"><span class="keyword">PROCEDURE</span> <span class="title">IF</span> <span class="title">EXISTS</span> `<span class="title">addMoney</span>`</span></span><br><span class="line"><span class="function">//如果存在同名存储过程，则删除之<span class="title">mysql</span>&gt;<span class="title">CREATEDEFINER</span>=‘<span class="title">root</span>‘@‘<span class="title">localhost</span>‘<span class="title">PROCEDURE</span>‘<span class="title">addMoney</span>‘<span class="params">(INxidINT(5)</span>,<span class="title">INxmoneyINT</span><span class="params">(6)</span>)<span class="title">mysql</span>&gt;<span class="title">BEGINmysql</span>&gt;<span class="title">UPDATEUSERuSETu</span>.<span class="title">money</span>=<span class="title">u</span>.<span class="title">money</span>+<span class="title">xmoneyWHEREu</span>.<span class="title">id</span>=<span class="title">xid</span>;</span><span class="comment">//分号";"不会导致语句执行，因为当前的分割符被定义为</span></span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">END</span>$$   <span class="comment">//终止</span></span><br><span class="line">mysql&gt; DELIMITER ;    <span class="comment">//把分割符改回分号";"</span></span><br><span class="line">mysql&gt; call addMoney(<span class="number">5</span>,<span class="number">1000</span>); <span class="comment">//执行存储过程</span></span><br><span class="line">---------- 示例二-----------</span><br><span class="line">mysql&gt; delimiter <span class="comment">//</span></span><br><span class="line">mysql&gt; <span class="keyword">create</span> <span class="function"><span class="keyword">procedure</span> <span class="title">proc_name</span> <span class="params">(<span class="keyword">in</span> parameter integer)</span></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">begin</span></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">if</span> <span class="title">parameter</span>=0 <span class="title">then</span></span></span><br><span class="line"><span class="function"><span class="title">mysql</span>&gt; <span class="title">select</span> * <span class="title">from</span> <span class="title">user</span> <span class="title">order</span> <span class="title">by</span> <span class="title">id</span> <span class="title">asc</span>;</span></span><br><span class="line">mysql&gt; <span class="keyword">else</span></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> user <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span>;</span><br><span class="line">mysql&gt; <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">mysql&gt; <span class="keyword">end</span>;</span><br><span class="line">mysql&gt; <span class="comment">//        //此处“//”为终止符</span></span><br><span class="line">mysql&gt; delimiter ;</span><br><span class="line">mysql&gt; show warnings;</span><br><span class="line">mysql&gt; call proc_name(<span class="number">1</span>);</span><br><span class="line">mysql&gt; call proc_name(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="九-修改表的列属性的操作"><a class="markdownIt-Anchor" href="#九-修改表的列属性的操作"></a> 九、修改表的列属性的操作</h3><ol><li>为了改变列a，从INTEGER改为TINYINT NOT NULL(名字一样)，<br>并且改变列b，从CHAR(10)改为CHAR(20)，同时重命名它，从b改为c:</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t2 MODIFY a TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span>, CHANGE b c <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>增加一个新TIMESTAMP列，名为d：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t2 <span class="keyword">ADD</span> d <span class="type">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>在列d上增加一个索引，并且使列a为主键：</li></ol><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="meta">ALTER</span> <span class="meta">TABLE</span> t2 <span class="meta">ADD</span> <span class="meta">INDEX</span> (d), <span class="meta">ADD</span> <span class="meta">PRIMARY</span> <span class="meta">KEY</span> (a);</span><br></pre></td></tr></table></figure><ol start="4"><li>删除列c：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t2 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> c;</span><br></pre></td></tr></table></figure><ol start="5"><li>增加一个新的AUTO_INCREMENT整数列，命名为c：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t2 <span class="keyword">ADD</span> c <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,<span class="keyword">ADD</span> <span class="keyword">INDEX</span> (c);</span><br></pre></td></tr></table></figure><p>注意，我们索引了c，因为AUTO_INCREMENT柱必须被索引，并且另外我们声明c为NOT NULL，<br>因为索引了的列不能是NULL</p><h3 id="十-一个建库和建表以及插入数据的实例"><a class="markdownIt-Anchor" href="#十-一个建库和建表以及插入数据的实例"></a> 十、一个建库和建表以及插入数据的实例</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> school; //如果存在SCHOOL则删除</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> school; //建立库SCHOOL</span><br><span class="line">use school; //打开库SCHOOL</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher //建立表TEACHER</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span>(<span class="number">3</span>) auto_increment <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary key</span>,</span><br><span class="line"><span class="type">name</span> <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span> ‘深圳’,</span><br><span class="line">year <span class="type">date</span></span><br><span class="line">); //建表结束</span><br><span class="line">//以下为插入字段</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="string">''</span>,<span class="string">'allen'</span>,<span class="string">'大连一中'</span>,<span class="string">'1976-10-10'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher <span class="keyword">values</span>(<span class="string">''</span>,<span class="string">'jack'</span>,<span class="string">'大连二中'</span>,<span class="string">'1975-12-23'</span>);</span><br><span class="line">如果你在mysql提示符键入上面的命令也可以，但不方便调试。</span><br><span class="line">（<span class="number">1</span>）你可以将以上命令原样写入一个文本文件中，假设为school.<span class="keyword">sql</span>，然后复制到c:\下，并在DOS状态进入目录\mysql\bin，然后键入以下命令：</span><br><span class="line">mysql -uroot -p密码 &lt; c:\school.<span class="keyword">sql</span></span><br><span class="line">如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</span><br><span class="line">（<span class="number">2</span>）或者进入命令行后使用 mysql&gt; source c:\school.<span class="keyword">sql</span>; 也可以将school.<span class="keyword">sql</span>文件导入数据库中。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-Keyboard</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-Keyboard/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-Keyboard/</url>
      
        <content type="html"><![CDATA[<p>文本经常需要和键盘打交道，现在记录一下初步的键盘相关的知识点。<br>键盘出现和消失促发两个消息。</p><p>UIKeyboardWillShowNotification （出现通知）<br>UIKeyboardWillHideNotification （隐藏通知）</p><p>NSNotificationCenter 监听两个消息即可捕捉到键盘弹出和隐藏的两个消息。</p><a id="more"></a><h3 id="键盘类型"><a class="markdownIt-Anchor" href="#键盘类型"></a> 键盘类型</h3><p>键盘类型系统提供了几种类型，文本里面只需要设置一下相应的的类型就可以呈现出对应的键盘种类</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.keyboardType  = UIKeyboardTypeNumberPad<span class="comment">;（数字类型）理财方面的产品里面可以见到这样的设置。</span></span><br></pre></td></tr></table></figure><h3 id="类型枚举"><a class="markdownIt-Anchor" href="#类型枚举"></a> 类型枚举</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">UIKeyboardType</span>) &#123;</span><br><span class="line">    <span class="type">UIKeyboardTypeDefault</span>,                // <span class="type">Default</span> type for the current input method.</span><br><span class="line">    <span class="type">UIKeyboardTypeASCIICapable</span>,           // <span class="type">Displays</span> a keyboard which can enter <span class="type">ASCII</span> characters, non-<span class="type">ASCII</span> keyboards remain active</span><br><span class="line">    <span class="type">UIKeyboardTypeNumbersAndPunctuation</span>,  // <span class="type">Numbers</span> and assorted punctuation.</span><br><span class="line">    <span class="type">UIKeyboardTypeURL</span>,                    // <span class="type">A</span> type optimized for <span class="type">URL</span> entry (shows . / .com prominently).</span><br><span class="line">    <span class="type">UIKeyboardTypeNumberPad</span>,              // <span class="type">A</span> number pad (0-9). <span class="type">Suitable</span> for <span class="type">PIN</span> entry.</span><br><span class="line">    <span class="type">UIKeyboardTypePhonePad</span>,               // <span class="type">A</span> phone pad (1-9, *, 0, #, with letters under the numbers).</span><br><span class="line">    <span class="type">UIKeyboardTypeNamePhonePad</span>,           // <span class="type">A</span> type optimized for entering a person's name or phone number.</span><br><span class="line">    <span class="type">UIKeyboardTypeEmailAddress</span>,           // <span class="type">A</span> type optimized for multiple email address entry (shows space @ . prominently).</span><br><span class="line">    <span class="type">UIKeyboardTypeDecimalPad</span> <span class="type">NS_ENUM_AVAILABLE_IOS(4_1)</span>,   // <span class="type">A</span> number pad with a decimal point.</span><br><span class="line">    <span class="type">UIKeyboardTypeTwitter</span> <span class="type">NS_ENUM_AVAILABLE_IOS(5_0)</span>,      // <span class="type">A</span> type optimized for twitter text entry (easy access to @ #)</span><br><span class="line">    <span class="type">UIKeyboardTypeWebSearch</span> <span class="type">NS_ENUM_AVAILABLE_IOS(7_0)</span>,    // <span class="type">A</span> default keyboard type with <span class="type">URL</span>-oriented addition (shows space . prominently).</span><br><span class="line"></span><br><span class="line">    <span class="type">UIKeyboardTypeAlphabet</span> = <span class="type">UIKeyboardTypeASCIICapable</span>, // <span class="type">Deprecated</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(keyboardDisappear:) name:<span class="built_in">UIKeyboardWillHideNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(keyboardAppear:) name:<span class="built_in">UIKeyboardWillShowNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *textField  = [[<span class="built_in">UITextField</span> alloc] init];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:textField];</span><br><span class="line">    textField.frame  = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">200</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">    textField.text  = <span class="string">@"我们来了"</span>;</span><br><span class="line">    textField.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    textField.keyboardType  = <span class="built_in">UIKeyboardTypeNumberPad</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) keyboardDisappear:(<span class="built_in">NSNotification</span> *) notification</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"键盘隐藏消息"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>) keyboardAppear:(<span class="built_in">NSNotification</span> *) notification</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"键盘出现消息"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(keyboardDisappear:) name:<span class="built_in">UIKeyboardWillHideNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter]addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(keyboardAppear:) name:<span class="built_in">UIKeyboardWillShowNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UITextField</span> *textField  = [[<span class="built_in">UITextField</span> alloc] init];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:textField];</span><br><span class="line">    textField.frame  = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">160</span>, <span class="number">200</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">    textField.text  = <span class="string">@"我们来了"</span>;</span><br><span class="line">    textField.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    textField.keyboardType  = <span class="built_in">UIKeyboardTypeNumberPad</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) keyboardDisappear:(<span class="built_in">NSNotification</span> *) notification</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"键盘隐藏消息"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>) keyboardAppear:(<span class="built_in">NSNotification</span> *) notification</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"键盘出现消息"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-GCD</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-GCD/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-GCD/</url>
      
        <content type="html"><![CDATA[<p>一些常用的API</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步执行一个线程</span></span><br><span class="line">dispatch_async(<span class="built_in">queue</span>,^&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个线程</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> =     dispatch_queuq_create(<span class="string">"com.example.queue"</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取主线程的方法</span></span><br><span class="line">dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">//优先级获取方法</span></span><br><span class="line"><span class="keyword">dispath_queue_t</span> <span class="built_in">queue</span> = dispatch_get_global_queue(优先级，<span class="number">0</span>);</span><br><span class="line">Dispatch Queue 的种类 有几种</span><br><span class="line"></span><br><span class="line"><span class="comment">//优先级常量</span></span><br><span class="line">DISPATCH_QUEUE_PRIORITY_HIGH</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_LOW</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延迟执行</span></span><br><span class="line">dispatch_after</span><br><span class="line"></span><br><span class="line"><span class="keyword">dispatch_time_t</span> time = dispatch_time(DISPATCH_TIME_NOW,<span class="number">3u</span>ll*NSEC_PER_SEC);</span><br></pre></td></tr></table></figure><p>处理线程的API，有涉及到暂停，挂起，恢复，取消，等待、延迟执行，线程组，同步和异步 ，死锁，只执行一次，等系列的概念出现。这些概念大部分是对于处理线程和任务。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_once_t</span></span><br><span class="line"></span><br><span class="line">dispatch_after</span><br><span class="line"></span><br><span class="line">dispatch_group_wait</span><br><span class="line"></span><br><span class="line">dispatch_release</span><br><span class="line"></span><br><span class="line">dispatch_barrier_async</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span> <span class="comment">//异步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_sync</span> <span class="comment">//同步</span></span><br><span class="line"></span><br><span class="line">dispatch_apply</span><br><span class="line"></span><br><span class="line">dispatch_io_create</span><br></pre></td></tr></table></figure><p>当线程过多时候，会引发内存问题。导致系统内存开销过多，效率降低。</p><p>同样多线程在更新相同一个资源的时候，会造成数据竞争的问题。</p><p>同步执行的时候容易出现死锁的问题，导致UI卡顿的问题发生。</p><p>系统提供了标准的Dispatch Queue<br>1.Main Dispatch Queue<br>2.Global Dispatch Queue</p><p>通过dispatch_get_global_queue 可以获取到不同等级的线程<br>通过dispatch_get_main_queue 获取主线程</p><p><strong>刷新UI操作必须在主线程</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_async(dispatch_get_global_queue(0,0),^&#123;</span></span><br><span class="line"><span class="keyword"> </span>  NSInteger <span class="built_in">count</span> = [numOfInstructions<span class="meta">.text</span> intValue]<span class="comment">;</span></span><br><span class="line">   for (int i = <span class="number">0</span><span class="comment">; i&lt;count;i++)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">dispatch_async(dispatch_get_main_queue(),^&#123;</span></span><br><span class="line"><span class="keyword"> </span>     currentCount<span class="meta">.text</span> =[NSString stringWithFormat:@<span class="string">"instruction%d"</span>,i]<span class="comment">;</span></span><br><span class="line">     &#125;)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>构建一个单例</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+(SingleManager) shareManager</span><br><span class="line">&#123;</span><br><span class="line">  static dispatch_once_t once;</span><br><span class="line">  static SingleManager *instance;</span><br><span class="line">  dispatch_once(&amp;once,^&#123;</span><br><span class="line">    <span class="built_in"> instance </span>= [[self alloc]init];</span><br><span class="line">   &#125;</span><br><span class="line">   return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>延迟执行某些任务</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MBProgressHUD *hud = [MBProgressHUD <span class="keyword">showHUDAddedTo:self.view </span>animated:YES]<span class="comment">;</span></span><br><span class="line">hud.labelText =@<span class="string">"拼命加载中"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">dispatch_time_t </span>popTime = <span class="keyword">dispatch_time(DISPATCH_TIME_NOW, </span><span class="number">10</span> *NSEC_PER_SEC)<span class="comment">;</span></span><br><span class="line">   <span class="keyword">dispatch_after(popTime, </span><span class="keyword">dispatch_get_main_queue(), </span>^&#123;</span><br><span class="line">       [MBProgressHUD hideAllHUDsForView:self.view animated:YES]<span class="comment">;</span></span><br><span class="line">   &#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-UIImage,CIImage,CGImageRef</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-UIImage-CIImage-CGImageRef/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-UIImage-CIImage-CGImageRef/</url>
      
        <content type="html"><![CDATA[<p>UIImage 有很多有用的东西，前段时间接触了coreImage的API，发现有一个CIImage的东西，同样还有一个CGImage的东西，这三者总是可以切换起来，多少让人觉得这个东西很能耐。<br>IOS编程揭秘 书中记录着如下一段话。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span>类的Core Graphics</span><br><span class="line">版本是<span class="built_in">CGImage</span>（<span class="built_in">CGImageRef</span>）这两个类之间很容易进行转换，因为一个<span class="built_in">UIImage</span>类有一个<span class="built_in">CGImage</span>的属性“</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1创建过程"><a class="markdownIt-Anchor" href="#1创建过程"></a> 1.创建过程</h3><p>UIImage 常规创建过程</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image =[ <span class="built_in">UIImage</span> imageNamed:<span class="string">@"xx.png"</span>];</span><br></pre></td></tr></table></figure><p>CGImage的创建过程</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CGImageRef imageRef = <span class="constructor">CGImageCreateWithImageInRect(<span class="params">image</span>.CGImage,CGRectMake(0,0,<span class="params">size</span>.<span class="params">width</span>,<span class="params">size</span>.<span class="params">height</span>)</span>);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image =[ <span class="built_in">UIImage</span> imageNamed:<span class="string">@"xx.png"</span>];</span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = [image <span class="built_in">CGImage</span>];</span><br></pre></td></tr></table></figure><p>CIImage的创建过程</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *path = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"bbg"</span> ofType:<span class="string">@"jpg"</span>];</span><br><span class="line"><span class="built_in">NSURL</span> *myURL = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line"></span><br><span class="line"><span class="built_in">CIImage</span> *ciImage = [<span class="built_in">CIImage</span> imageWithContentsOfURL:myURL];</span><br></pre></td></tr></table></figure><h3 id="2相互转换"><a class="markdownIt-Anchor" href="#2相互转换"></a> 2.相互转换</h3><p>UIImage， CGImageRef， CIImage 三者之间可以通过一些联系进行转换</p><h4 id="21-uiimage-转换cgimageref"><a class="markdownIt-Anchor" href="#21-uiimage-转换cgimageref"></a> 2.1 UIImage 转换CGImageRef</h4><p>UIImage 类当中包含了CGImage的属性，所以很方便地就能转换，方法如下</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image =[ <span class="built_in">UIImage</span> imageNamed:<span class="string">@"xx.png"</span>];</span><br><span class="line"><span class="built_in">CGImageRef</span> imageRef = [image <span class="built_in">CGImage</span>];</span><br></pre></td></tr></table></figure><h4 id="22-cgimageref-转换uiimage"><a class="markdownIt-Anchor" href="#22-cgimageref-转换uiimage"></a> 2.2 CGImageRef 转换UIImage</h4><p>UIImage里面包含了一个方法imageWithCGImage，如果知道了CGImage，则这样子也可以创建得到UIIamge类，在上面我们可以看到关系 UIImage 通过属性得到CGImageRef，同样地两者也可以关联起来。</p><p>UIImage—&gt;CGImageRef<br>CGImageRef –&gt; UIImage</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *uiImage =[<span class="built_in">UIImage</span> imageWithCGImage:cgImage];</span><br></pre></td></tr></table></figure><h4 id="23-ciimage-转换cgimageref"><a class="markdownIt-Anchor" href="#23-ciimage-转换cgimageref"></a> 2.3 CIImage 转换CGImageRef</h4><p>CIContext 当中有一个方法createCGImage，可以创建得到CGImageRef，换句话可知道CIImage 可以通过其他方式转换CGImageRef</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CIContext <span class="number">*c</span>ontext = [CIContext contextWithOptions:nil];                </span><br><span class="line"> CIImage <span class="number">*c</span>iImage = [CIImage imageWithContentsOfURL:myURL];                </span><br><span class="line"><span class="built_in"> filter </span>= [filterWithName:@<span class="string">"CISepiaTone"</span>];            </span><br><span class="line"> [filter setValue:ciImage forKey:kCIInputImageKey];</span><br><span class="line"> [filter setValue:@0.8f forKey:kCIInputIntensityKey];</span><br><span class="line"> CIImage *outputImg = [filter outputImage];   </span><br><span class="line"> CGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure><p>最主要的一句</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CGImageRef cgImage</span> = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure><h4 id="24-uiimage-转换ciimage"><a class="markdownIt-Anchor" href="#24-uiimage-转换ciimage"></a> 2.4 UIImage 转换CIImage</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CIImage</span>  *ciImage = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"test.png"</span>].CIImage</span><br><span class="line"><span class="built_in">UIImage</span> *image = [[<span class="built_in">UIImage</span> alloc] initWithCIImage:ciImage];</span><br></pre></td></tr></table></figure><p>但是采用这种方式转换，CIImage的值会是nil，<br>相反 采用CIImage 的initWithCGImage初始化的方式 则有值，很奇怪</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"test.png"</span>];</span><br><span class="line"><span class="built_in">CIImage</span> *ciImage = [[<span class="built_in">CIImage</span> alloc]initWithCGImage:image.CGImage];</span><br></pre></td></tr></table></figure><p>由此可见，三者都可以实现转换了，通过直接或者间接把他们联系起来。<br>UIImage –&gt; CGImageRef –&gt; CIImage<br>UIImage &lt;– CGImageRef &lt;– CIImage</p>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-UILabel</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-UILabel/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-UILabel/</url>
      
        <content type="html"><![CDATA[<p>UILable 的用法涉及内容有如下</p><ol><li>创建与显示</li><li>文本内容和字体设置</li><li>背景颜色指定</li><li>计算高度。</li><li>行数指定和计算</li></ol><p>UIlabel可以显示指定的行数，设置numberOfLines =0 则为不限制行数，因为UIlabel不是Icontrol的方面，没有addTarget和block等方法处理相应的行为机制，但支持扩展手势触控等方法处理点击，不过对于html 超链接响应情况，在之前看过是需要采用第三方处理机制处理。</p><p>在日常使用过程，对于文本方法计算高度的用法很常用，ios提供相应计算方法。如属于NSString的类别（NSStringDrawing.h）该类为此提供相应处理解决方案，提供计算高度和文本大小的方法。<br>注意到 过去ios6的版本 提供sizeWithFont方法 在ios 7.0 已经不生效，需要改成其他方法处理。boundingRectWithSize 后续推荐的方式。</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(CGSize)</span>sizeWithAttributes:<span class="params">(NSDictionary *)</span>attrs NS_AVAILABLE_IOS<span class="params">(<span class="number">7</span>_0)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="params">(CGRect)</span>boundingRectWithSize:<span class="params">(CGSize)</span>size options:<span class="params">(NSStringDrawingOptions)</span>options attributes:<span class="params">(NSDictionary *)</span>attributes context:<span class="params">(NSStringDrawingContext *)</span>context NS_AVAILABLE_IOS<span class="params">(<span class="number">7</span>_0)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="literal">self</span>.<span class="keyword">label</span> = [[UILabel alloc]initWithFrame:CGRectMake(<span class="number">85</span>, <span class="number">0</span>, <span class="literal">self</span>.view.frame.size.width-<span class="number">85</span>, <span class="number">70</span>)];</span><br><span class="line"> [<span class="literal">self</span>.panel addSubview:<span class="literal">self</span>.<span class="keyword">label</span>];</span><br><span class="line"> <span class="literal">self</span>.<span class="keyword">label</span>.text = @<span class="string">"这个人很懒，什么都没留下"</span>;</span><br><span class="line"> <span class="literal">self</span>.<span class="keyword">label</span>.numberOfLines = <span class="number">3</span>;</span><br><span class="line"> <span class="literal">self</span>.<span class="keyword">label</span>.lineBreakMode = NSLineBreakByCharWrapping;</span><br><span class="line"> <span class="literal">self</span>.<span class="keyword">label</span>.font =[UIFont systemFontOfSize:<span class="number">14</span>];</span><br><span class="line">// <span class="literal">self</span>.<span class="keyword">label</span>.<span class="keyword">user</span>InteractionEnabled = YES; 需要的时候才打开</span><br><span class="line"> [<span class="literal">self</span>.view addSubview:<span class="literal">self</span>.panel];</span><br></pre></td></tr></table></figure><p>下面计算一下高度，当采用默认字体的时候，字体号为17，其高度约为20, 字体为14的时候，高度约为16~17之间</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">字体号：<span class="number">17</span> ，文本高：<span class="number">20</span></span><br><span class="line">字体号：<span class="number">16</span> ，文本高：<span class="number">19</span></span><br><span class="line">字体号：<span class="number">15</span> ，文本高：<span class="number">17</span>~<span class="number">18</span> 之间</span><br><span class="line">字体号：<span class="number">14</span>， 文本高：<span class="number">16</span>~<span class="number">17</span> 之间</span><br></pre></td></tr></table></figure><p>这些字体是默认字体，要是采用其他字体或者设置粗体 ，估计值会受到一些浮动影响。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> getTextHeight:<span class="number">17</span> width:<span class="keyword">self</span>.view.frame.size.width<span class="number">-85</span>];   </span><br><span class="line">-(<span class="keyword">void</span>) getTextHeight:(<span class="built_in">CGFloat</span>) fontSize width:(<span class="built_in">CGFloat</span>) textWidth</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic =@&#123;<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:fontSize]&#125;;</span><br><span class="line">    <span class="built_in">CGSize</span> curSize = <span class="built_in">CGSizeMake</span>(textWidth, MAXFLOAT);</span><br><span class="line">    <span class="built_in">CGRect</span> rect =   [<span class="keyword">self</span>.label.text boundingRectWithSize:curSize</span><br><span class="line">                                                  options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span>|<span class="built_in">NSStringDrawingUsesFontLeading</span></span><br><span class="line">                                               attributes:dic context:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="built_in">NSStringFromCGRect</span>(rect);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-leftBarButtonItem</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-leftBarButtonItem/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-leftBarButtonItem/</url>
      
        <content type="html"><![CDATA[<h3 id="1设置leftbarbuttonitem的文字"><a class="markdownIt-Anchor" href="#1设置leftbarbuttonitem的文字"></a> 1.设置leftBarButtonItem的文字</h3><p>在设置 leftBarButtonItem的时候，又会少了一个左箭头。</p><p>一般情况下，自定义一个新的标题会这样操作，设置完成后，问题来了，发现左箭头不见了。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.navigationItem.leftBarButtonItem =  [[UIBarButtonItem alloc]<span class="string">initWithTitle:</span>@<span class="string">"返回"</span> <span class="string">style:</span>UIBarButtonItemStylePlain <span class="string">target:</span>self  <span class="string">action:</span><span class="meta">@selector</span>(onSelect)];</span><br></pre></td></tr></table></figure><p>一般情况下，自定义 UIBarButtonItem 使用设置图片有如下，但发现文本不能设置显示了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[[UIBarButtonItem alloc]</span><span class="selector-tag">initWithImage</span><span class="selector-pseudo">:image</span> <span class="selector-tag">style</span><span class="selector-pseudo">:UIBarButtonItemStylePlain</span> <span class="selector-tag">target</span><span class="selector-pseudo">:self</span></span><br><span class="line">                                   <span class="selector-tag">action</span>:@<span class="keyword">selector</span>(<span class="keyword">onSelect</span>)];</span><br></pre></td></tr></table></figure><p>还有一种方式，既有文本又有左箭头的需求，只能使用下面这种方式，自定义一个按钮视图。</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="name">UIBarButtonItem</span> alloc]initWithCustomView:backButton]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>问题前提： 使用pushViewController的时候，该界面返回情况会默认是上一级的标题， 更改文字，又会对本身产生影响。原本意图很简单，就是想设置自己的文字，又想有左箭头。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self.navigationController </span><span class="keyword">pushViewController:cityController </span>animated:YES]<span class="comment">;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2实现过程"><a class="markdownIt-Anchor" href="#2实现过程"></a> 2.实现过程</h3><p>实现这个过程改用了一种做法是 用按钮的方式去完成这件事。这里涉及几个问题。设置了图片的时候，按钮点下去还是会出现<strong>蓝色</strong>。</p><p>在写的时候，会发现Button 的 setImage 和 setBackGroundImage 是有区别的。<br><strong>setBackGroundImage</strong>： 会对原图拉伸产生影响，跟随性。也就是说，按钮宽度改变，底图也发生改变</p><p><strong>setImage</strong> ： 会保持原图性质，不随改变而改变。<br>在测试过程也是一样。</p><p>为了解决点击后保存一致的效果， 改用暴力的方式，对点击下去的情况设置一张透明度的图 。同时对文本设置透明度。这样有点罗嗦和累赘。暂时还没发现更好的方式。有一些人说是设置backBarButtonItem 但是没有效果。我也遇到这个问题。<strong>backBarButtonItem 和 leftBarButtonItem 还是有区别</strong>。</p><p>为了解决按钮图片和文本点击后透明度变化，采取的办法是对两个状态设置不同的UIImage信息。其中这里使用到复制位图的操作，UIGraphicsBeginImageContext 使用这个方式。拷贝一个UIImage副本出来，对其透明度alpha 设置。<br>这个设计的目标是为 了解决点击后还是变蓝色的问题。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按钮</span></span><br><span class="line">[backButton <span class="string">setImage:</span>image <span class="string">forState:</span>UIControlStateNormal];</span><br><span class="line">[backButton <span class="string">setImage:</span>neImage <span class="string">forState:</span>UIControlStateHighlighted];</span><br><span class="line"><span class="comment">//文本颜色</span></span><br><span class="line">[backButton <span class="string">setTitleColor:</span>[UIColor whiteColor] <span class="string">forState:</span>UIControlStateNormal];</span><br><span class="line">[backButton <span class="string">setTitleColor:</span>[UIColor <span class="string">colorWithWhite:</span><span class="number">1.0</span> <span class="string">alpha:</span><span class="number">0.7</span>] <span class="string">forState:</span>UIControlStateHighlighted];</span><br></pre></td></tr></table></figure><p>一切完成后，在刚运行的过程当中，按钮背景图片和文本粘贴在比较紧，可以使用 setImageEdgeInsets的方式让其他拉开一点距离。这样子可以实现一个自定义LeftBarButtonItem。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UIButton *<span class="keyword">backButton </span>= [[UIButton alloc ]initWithFrame:CGRectMake(<span class="number">0</span>, <span class="number">0</span>, <span class="number">60</span>, <span class="number">30</span>)]<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span><span class="keyword">addTarget:self </span>action:@selector(onSelectCity:) forControlEvents:UIControlEventTouchUpInside]<span class="comment">;</span></span><br><span class="line">UIImage  *image =[[UIImage imageNamed:@<span class="string">"navbar_btn@2x.png"</span>] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setImage:image forState:UIControlStateNormal]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContext(image.size)<span class="comment">;</span></span><br><span class="line">[image drawInRect:CGRectMake(<span class="number">0</span>,<span class="number">0</span>,image.size.width,image.size.height) <span class="keyword">blendMode:kCGBlendModeNormal </span>alpha:<span class="number">0</span>.<span class="number">7</span>]<span class="comment">;</span></span><br><span class="line">UIImage *neImage = UIGraphicsGetImageFromCurrentImageContext()<span class="comment">;</span></span><br><span class="line">UIGraphicsEndImageContext()<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setImage:neImage forState:UIControlStateHighlighted]<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal]<span class="comment">;</span></span><br><span class="line"><span class="keyword">backButton.titleLabel.font </span> =[UIFont systemFontOfSize:<span class="number">14</span>] <span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setTitleColor:[UIColor colorWithWhite:<span class="number">1</span>.<span class="number">0</span> alpha:<span class="number">0</span>.<span class="number">7</span>] forState:UIControlStateHighlighted]<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setTitle:@<span class="string">"全部"</span> forState:UIControlStateNormal]<span class="comment">;</span></span><br><span class="line">[<span class="keyword">backButton </span>setImageEdgeInsets:UIEdgeInsetsMake(<span class="number">0</span>, -<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>)]<span class="comment">;</span></span><br><span class="line">UIBarButtonItem *<span class="keyword">backItem </span>= [[UIBarButtonItem alloc]initWithCustomView:<span class="keyword">backButton];</span></span><br><span class="line"><span class="keyword">self.navigationItem.leftBarButtonItem </span>= <span class="keyword">backItem;</span></span><br></pre></td></tr></table></figure><h3 id="3遇到的问题"><a class="markdownIt-Anchor" href="#3遇到的问题"></a> 3.遇到的问题</h3><p>问题1： UITabbar选择图片的问题，选中后出现蓝色的问题，而不是自定义的</p><p>问题2：按钮点击后，蓝色按钮蓝色的问题</p><p>问题3：颜色设置缺少一个0会出现奇特现象</p><p>问题4：UIImage的缩放操作</p><p>在学习实验过程，遇到问题 UIColor colorWithRed的方法，后缀 255.0 去掉了0 后变成255 会发现很莫名的颜色，这个小数点影响了一些结果。非法奇怪。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIColor *color = [UIColor colorWithRed:<span class="number">254</span>/<span class="number">255.0</span> green:<span class="number">85</span>/<span class="number">255.0</span> blue:<span class="number">90</span>/<span class="number">255.0</span> alpha:<span class="number">1.0</span>];</span><br></pre></td></tr></table></figure><p>其次是UITabBarItem 使用了两张图片做状态，一种是默认的情况，一种是选中的效果。会发现变成蓝色。不同不使用UIImage的imageWithRenderingMode的方式去改回原图。这样子这个问题就解决了。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span>  *image =[[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"navbar_btn@2x.png"</span>] imageWithRenderingMode:<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>];</span><br></pre></td></tr></table></figure><p>而NavigationBar的颜色，也是一个坑的，旧的API只能在旧版本使用，新的版本需要在7.0以上才能使用，这样要兼容6.0 还要挖个坑。有时候 会对背景整个栏目设置，所以在这个情况下只能使用兼容方式。</p>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-截屏</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-%E6%88%AA%E5%B1%8F/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-%E6%88%AA%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>iPhone 截屏并本地存储</p><p>使用UIGraphicsBeginImageContext 相关绘图API 获取到图像信息，使用UIImageWriteToSavedPhotosAlbum 方法就可以保存到相关的库里面去</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIWindow</span> *window =[<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</span><br><span class="line"><span class="built_in">UIGraphicsBeginImageContext</span>(window.frame.size);</span><br><span class="line">[window.layer renderInContext:<span class="built_in">UIGraphicsGetCurrentContext</span>()];</span><br><span class="line"><span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"><span class="built_in">UIImageWriteToSavedPhotosAlbum</span>(image, <span class="keyword">self</span>, <span class="keyword">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) image:(<span class="built_in">UIImage</span> *) image didFinishSavingWithError:(<span class="built_in">NSError</span> *) error contextInfo:(<span class="keyword">void</span> *) contextInfo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"保存失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UIAlertView</span> *alertView = [[<span class="built_in">UIAlertView</span> alloc]initWithTitle:<span class="string">@"提示"</span> message:<span class="string">@"保存成功！"</span> delegate:<span class="literal">nil</span> cancelButtonTitle:<span class="string">@"确定"</span> otherButtonTitles:<span class="literal">nil</span>, <span class="literal">nil</span>];</span><br><span class="line">        [alertView show];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPhone开发-常用组件</title>
      <link href="/2017/11/15/iPhone%E5%BC%80%E5%8F%91-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
      <url>/2017/11/15/iPhone%E5%BC%80%E5%8F%91-%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-uibutton"><a class="markdownIt-Anchor" href="#1-uibutton"></a> 1. UIButton</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeRoundedRect</span>];</span><br><span class="line">button.frame = frame;</span><br><span class="line">[button setTitle:<span class="string">@"click"</span> forState: <span class="built_in">UIControlStateNormal</span>];</span><br><span class="line">button.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">[button addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClicked:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:button];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) buttonClicked:(<span class="built_in">UIButton</span> *)button</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//添加code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-uialertview"><a class="markdownIt-Anchor" href="#2-uialertview"></a> 2. UIAlertView</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIAlertView *alert = [[UIAlertView alloc]<span class="string">initWithTitle:</span>@<span class="string">"标题"</span> <span class="string">message:</span>@<span class="string">"你的内存已满"</span> <span class="string">delegate:</span>self <span class="string">cancelButtonTitle:</span>@<span class="string">"取消"</span> <span class="string">otherButtonTitles:</span>nil, nil];</span><br><span class="line">   [alert show];</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="3-uilabel"><a class="markdownIt-Anchor" href="#3-uilabel"></a> 3. UILabel</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UILabel *<span class="keyword">label</span><span class="bash"> =[[UILabel alloc]initWithFrame:CGRectMake(0, 10, 200, 34)];</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">textColor =[UIColor grayColor];</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">font =[UIFont systemFontOfSize:18];</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">text =@<span class="string">"创建一个文本"</span>;</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">lineBreakMode = NSLineBreakByCharWrapping;</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">numberOfLines = 0;</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">backgroundColor =[UIColor grayColor];</span></span><br><span class="line"><span class="keyword">label</span>.<span class="bash">textAlignment = NSTextAlignmentCenter;</span></span><br></pre></td></tr></table></figure><h3 id="4-uitextfield"><a class="markdownIt-Anchor" href="#4-uitextfield"></a> 4. UITextField</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">UITextField</span> *textField =[[<span class="built_in">UITextField</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">44</span>, <span class="keyword">self</span>.view.bounds.size.width<span class="number">-20</span>,<span class="number">30</span>)];</span><br><span class="line"> textField.borderStyle = <span class="built_in">UITextBorderStyleRoundedRect</span>;</span><br><span class="line"> textField.placeholder = <span class="string">@"请输入用户名"</span>;</span><br><span class="line"> textField.clearButtonMode = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line"> textField.delegate = <span class="keyword">self</span>;</span><br><span class="line"> textField.textColor = [<span class="built_in">UIColor</span> grayColor];</span><br><span class="line"> textField.keyboardType = <span class="built_in">UIKeyboardTypeDefault</span>;</span><br><span class="line"> textField.returnKeyType = <span class="built_in">UIReturnKeyDone</span>;</span><br><span class="line"> textField.clearButtonMode = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</span><br></pre></td></tr></table></figure><h3 id="5uislider"><a class="markdownIt-Anchor" href="#5uislider"></a> 5.UISlider</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UISlider *slider =[[UISlider alloc]<span class="string">initWithFrame:</span>CGRectMake(<span class="number">0</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">33</span>)];</span><br><span class="line">  [slider <span class="string">addTarget:</span>self <span class="string">action:</span><span class="meta">@selector</span>(<span class="string">onChangeHandler:</span>) <span class="string">forControlEvents:</span>UIControlEventValueChanged];</span><br><span class="line">  [self.view <span class="string">addSubview:</span>slider];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) <span class="string">onChangeHandler:</span>(UISlider *) slider</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">float</span> value = slider.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6uisegmentedcontrol"><a class="markdownIt-Anchor" href="#6uisegmentedcontrol"></a> 6.UISegmentedControl</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UISegmentedControl</span> *seg= [[<span class="built_in">UISegmentedControl</span> alloc]initWithItems:@[<span class="string">@"骑士"</span>,<span class="string">@"勇士"</span>]];</span><br><span class="line">   [<span class="keyword">self</span>.view addSubview:seg];</span><br><span class="line">   seg.frame =<span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">33</span>);</span><br><span class="line">   [seg addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(onSelect:) forControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onSelect:(<span class="built_in">UISegmentedControl</span> *) control</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSInteger</span> index = control.selectedSegmentIndex;</span><br><span class="line">    <span class="keyword">if</span> (index==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击骑士"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"点击勇士"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7uiviewimage"><a class="markdownIt-Anchor" href="#7uiviewimage"></a> 7.UIViewImage</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UIImageView *imageView =<span class="string">[[UIImageView alloc]initWithImage:[UIImage imageNamed:@"head.png" ]]</span>;</span><br><span class="line">imageView.layer.cornerRadius = <span class="number">4.0</span>;</span><br></pre></td></tr></table></figure><h3 id="8uiswitch"><a class="markdownIt-Anchor" href="#8uiswitch"></a> 8.UISwitch</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UISwitch</span> *uiSwitch=[[<span class="built_in">UISwitch</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">20</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">33</span>)];</span><br><span class="line">   [<span class="keyword">self</span>.view addSubview:uiSwitch];</span><br><span class="line">   [uiSwitch setOn:<span class="literal">YES</span> animated:<span class="literal">YES</span>];</span><br><span class="line">   [uiSwitch addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(onChange:) forControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onChange:(<span class="built_in">UISwitch</span> *) uiswitch</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">BOOL</span> isOn =  uiswitch.isOn;</span><br><span class="line">  <span class="comment">//两种方式输出真假值</span></span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,  [<span class="built_in">NSNumber</span> numberWithBool:isOn].stringValue);</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,  isOn ? <span class="string">@"YES"</span>:<span class="string">@"NO"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9uiactionsheet"><a class="markdownIt-Anchor" href="#9uiactionsheet"></a> 9.UIActionSheet</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIActionSheet</span> *actionSheet = [[<span class="built_in">UIActionSheet</span> alloc]initWithTitle:<span class="literal">nil</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"取消"</span> destructiveButtonTitle:<span class="string">@"微信"</span> otherButtonTitles:<span class="string">@"新浪微博"</span>,<span class="string">@"腾讯微博"</span>, <span class="literal">nil</span>];</span><br><span class="line">actionSheet.actionSheetStyle = <span class="built_in">UIActionSheetStyleDefault</span>;</span><br><span class="line">[actionSheet showInView:<span class="keyword">self</span>.view];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) actionSheet:(<span class="built_in">UIActionSheet</span> *)actionSheet clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(buttonIndex == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"微信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(buttonIndex ==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"新浪微博"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(buttonIndex == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"腾讯微博"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10uiwindow"><a class="markdownIt-Anchor" href="#10uiwindow"></a> 10.UIWindow</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIWindow *window =<span class="comment">[<span class="comment">[UIWindow alloc]</span>initWithFrame:<span class="comment">[UIScreen mainScreen]</span>.bounds]</span>;</span><br></pre></td></tr></table></figure><h3 id="11uibarbuttonitem"><a class="markdownIt-Anchor" href="#11uibarbuttonitem"></a> 11.UIBarButtonItem</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左边</span></span><br><span class="line">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]<span class="string">initWithTitle:</span>@<span class="string">"话题"</span> <span class="string">style:</span>UIBarButtonItemStylePlain <span class="string">target:</span>self <span class="string">action:</span><span class="meta">@selector</span>(showMenu)];</span><br><span class="line"> <span class="comment">//右边</span></span><br><span class="line">self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]<span class="string">initWithTitle:</span>@<span class="string">"话题"</span> <span class="string">style:</span>UIBarButtonItemStylePlain <span class="string">target:</span>self <span class="string">action:</span><span class="meta">@selector</span>(showMenu)];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) showMenu</span><br><span class="line">&#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] <span class="string">postNotificationName:</span>@<span class="string">"ShowMenuCmd"</span> <span class="string">object:</span>nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12uiwebview"><a class="markdownIt-Anchor" href="#12uiwebview"></a> 12.UIWebView</h3><p>UIWebView 的本地加载HTML页面</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> rect = [<span class="built_in">UIScreen</span> mainScreen].bounds;</span><br><span class="line"><span class="built_in">UIWebView</span> *webView = [[<span class="built_in">UIWebView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, rect .size.width,rect.size.height)];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.webView];</span><br><span class="line">[webView setUserInteractionEnabled:<span class="literal">YES</span>];<span class="comment">//是否支持交互</span></span><br><span class="line"><span class="built_in">NSString</span> *path =  [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"index"</span> ofType:<span class="string">@"html"</span>];</span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line">[webView loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:url]];   </span><br><span class="line">webView.autoresizingMask = <span class="built_in">UIViewAutoresizingFlexibleHeight</span> | <span class="built_in">UIViewAutoresizingFlexibleWidth</span>;</span><br></pre></td></tr></table></figure><h3 id="13uipickerview"><a class="markdownIt-Anchor" href="#13uipickerview"></a> 13.UIPickerView</h3><p>选择器创建与代理设置</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *pickerArray =@[<span class="string">@"勇士"</span>,<span class="string">@"火箭"</span>,<span class="string">@"湖人"</span>,<span class="string">@"雷霆"</span>];</span><br><span class="line"><span class="built_in">UIPickerView</span> *pickerView =[[<span class="built_in">UIPickerView</span> alloc]init];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.pickerView];</span><br><span class="line">pickerView.frame =(<span class="built_in">CGRect</span>)&#123;<span class="number">0</span>,<span class="keyword">self</span>.view.frame.size.height<span class="number">-160</span>,<span class="number">320</span>,<span class="number">180</span>&#125;;</span><br><span class="line">pickerView.delegate = <span class="keyword">self</span>;<span class="comment">//设置代理</span></span><br><span class="line">pickerView.dataSource = <span class="keyword">self</span>;<span class="comment">//设置代理</span></span><br><span class="line">pickerView.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line"></span><br><span class="line"> - (<span class="built_in">NSInteger</span>)numberOfComponentsInPickerView:(<span class="built_in">UIPickerView</span> *)pickerView</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)pickerView:(<span class="built_in">UIPickerView</span> *)pickerView numberOfRowsInComponent:(<span class="built_in">NSInteger</span>)component</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [pickerArray count];</span><br><span class="line">&#125;</span><br><span class="line">-(<span class="built_in">NSString</span> *) pickerView:(<span class="built_in">UIPickerView</span> *)pickerView titleForRow:(<span class="built_in">NSInteger</span>)row forComponent:(<span class="built_in">NSInteger</span>)component</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> [pickerArray objectAtIndex:row];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pickerView:(<span class="built_in">UIPickerView</span> *)pickerView didSelectRow:(<span class="built_in">NSInteger</span>)row inComponent:(<span class="built_in">NSInteger</span>)component</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"点击选择了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14uiscrollview"><a class="markdownIt-Anchor" href="#14uiscrollview"></a> 14.UIScrollView</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">UIScrollView *<span class="keyword">scrollView </span>= [[UIScrollView alloc] initWithFrame:CGRectMake(<span class="number">0</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">100</span>)]<span class="comment">;</span></span><br><span class="line"><span class="keyword">scrollView.backgroundColor </span>=  [UIColor <span class="keyword">blueColor];</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   CGFloat y=<span class="number">20</span><span class="comment">;</span></span><br><span class="line">    for (int i=<span class="number">0</span><span class="comment">; i&lt;30;i++)</span></span><br><span class="line">    &#123;</span><br><span class="line">        UILabel *lab = [[UILabel alloc]init]<span class="comment">;</span></span><br><span class="line">        lab<span class="meta">.text</span> = @<span class="string">"第一章 约定的开始"</span><span class="comment">;</span></span><br><span class="line">        [lab sizeToFit]<span class="comment">;</span></span><br><span class="line">        CGRect f= lab.frame<span class="comment">;</span></span><br><span class="line">        f.<span class="keyword">origin.y </span>= i*<span class="number">22</span><span class="comment">;</span></span><br><span class="line">        lab.frame =f<span class="comment">;</span></span><br><span class="line">        [<span class="keyword">scrollView </span><span class="keyword">addSubview:lab];</span></span><br><span class="line"><span class="keyword"> </span>       y += lab.<span class="keyword">bounds.size.height </span>+<span class="number">10</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    CGSize sz=<span class="keyword">scrollView.bounds.size;</span></span><br><span class="line"><span class="keyword"> </span>   sz.height = y<span class="comment">;</span></span><br><span class="line">    <span class="keyword">scrollView.contentSize </span>= sz<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="15uiprogressview"><a class="markdownIt-Anchor" href="#15uiprogressview"></a> 15.UIProgressView</h3><p>进度条</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIProgressView</span> *progressView =[[<span class="built_in">UIProgressView</span> alloc]initWithProgressViewStyle:<span class="built_in">UIProgressViewStyleDefault</span>];</span><br><span class="line">  [<span class="keyword">self</span>.view addSubview:progressView];</span><br><span class="line">  [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(onTimer:) userInfo:progressView repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onTimer:(<span class="built_in">NSTimer</span> *) timer</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UIProgressView</span> *progress =(<span class="built_in">UIProgressView</span> *) timer.userInfo;</span><br><span class="line">  progress.progress += <span class="number">0.1</span>;</span><br><span class="line">  <span class="keyword">if</span>(progress.progress == <span class="number">1.0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      progress.progress =<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16uiactivityindicatorview"><a class="markdownIt-Anchor" href="#16uiactivityindicatorview"></a> 16.UIActivityIndicatorView</h3><p>活动指示器</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIActivityIndicatorView</span> *activityView= [[<span class="built_in">UIActivityIndicatorView</span> alloc]initWithActivityIndicatorStyle:<span class="built_in">UIActivityIndicatorViewStyleWhiteLarge</span>];</span><br><span class="line">  [<span class="keyword">self</span>.view addSubview:activityView];</span><br><span class="line">  [activityView startAnimating];<span class="comment">//播放动画</span></span><br><span class="line">  [activityView stopAnimating];<span class="comment">//停止动画</span></span><br><span class="line">  [activityView isAnimating];<span class="comment">//判断是否在播放动画</span></span><br><span class="line">  <span class="keyword">self</span>.view.backgroundColor=[<span class="built_in">UIColor</span> orangeColor];<span class="comment">//背景设置颜色方便预览该组件</span></span><br></pre></td></tr></table></figure><h3 id="17uinavigationbar"><a class="markdownIt-Anchor" href="#17uinavigationbar"></a> 17.UINavigationBar</h3><p>UINavigationBar 导航栏 需要抱一个导航栏目UINavigationItem</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UINavigationBar</span> *navbar =[[<span class="built_in">UINavigationBar</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="number">44</span>)];</span><br><span class="line"> [<span class="keyword">self</span>.view addSubview:navbar];</span><br><span class="line"> <span class="built_in">UIBarButtonItem</span> *leftButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithTitle:<span class="string">@"菜单"</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(onSelectLeft:)];</span><br><span class="line"> <span class="built_in">UIBarButtonItem</span> *rightButtonItem = [[<span class="built_in">UIBarButtonItem</span> alloc]initWithTitle:<span class="string">@"设置"</span> style:<span class="built_in">UIBarButtonItemStylePlain</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(onSelectRight:)];</span><br><span class="line"> <span class="built_in">UINavigationItem</span> *navigationItem =[[<span class="built_in">UINavigationItem</span> alloc]initWithTitle:<span class="string">@"我爱IOS"</span>];</span><br><span class="line"> [navbar pushNavigationItem:navigationItem animated:<span class="literal">NO</span>];</span><br><span class="line"> [navigationItem setLeftBarButtonItem:leftButtonItem];</span><br><span class="line"> [navigationItem setRightBarButtonItem:rightButtonItem];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onSelectLeft:(<span class="built_in">UIBarButtonItem</span> *) button</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"点击左边"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) onSelectRight:(<span class="built_in">UIBarButtonItem</span> *) button</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"点击右边"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18uitabbar"><a class="markdownIt-Anchor" href="#18uitabbar"></a> 18.UITabBar</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UITabBar</span> *tabBar =[[<span class="built_in">UITabBar</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, [<span class="built_in">UIScreen</span> mainScreen].bounds.size.height<span class="number">-44</span>, <span class="keyword">self</span>.view.frame.size.width, <span class="number">44</span>)];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:tabBar];</span><br><span class="line"><span class="built_in">UITabBarItem</span> *firstBarItem =[[<span class="built_in">UITabBarItem</span> alloc]initWithTitle:<span class="string">@"首页"</span> image:<span class="literal">nil</span> tag:<span class="number">1</span>];</span><br><span class="line"><span class="built_in">UITabBarItem</span> *secondBarItem =[[<span class="built_in">UITabBarItem</span> alloc]initWithTitle:<span class="string">@"我的"</span> image:<span class="literal">nil</span> tag:<span class="number">2</span>];</span><br><span class="line">[tabBar setItems:@[firstBarItem,secondBarItem]];</span><br></pre></td></tr></table></figure><h3 id="19uiapplication"><a class="markdownIt-Anchor" href="#19uiapplication"></a> 19.UIApplication</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSURL *appStoreUrl = [NSURL URLWithString:@<span class="string">"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;amp;mt=8"</span>]<span class="comment">;</span></span><br><span class="line">[[UIApplication <span class="keyword">sharedApplication] </span>openURL:appStoreUrl]<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//退出编辑</span></span><br><span class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span><span class="selector-class">.keyWindow</span> <span class="selector-tag">endEditing</span><span class="selector-pseudo">:YES</span>];</span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置网络状态</span></span><br><span class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span> <span class="selector-tag">setNetworkActivityIndicatorVisible</span><span class="selector-pseudo">:YES</span>];<span class="comment">//开启</span></span><br><span class="line"><span class="selector-attr">[[UIApplication sharedApplication]</span> <span class="selector-tag">setNetworkActivityIndicatorVisible</span><span class="selector-pseudo">:NO</span>];<span class="comment">//关闭</span></span><br></pre></td></tr></table></figure><h3 id="20uirefreshcontrol"><a class="markdownIt-Anchor" href="#20uirefreshcontrol"></a> 20.UIRefreshControl</h3><p>刷新组件，继承了UITableController 有refreshControl 属性存在</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIRefreshControl</span> *refreshControl = [[<span class="built_in">UIRefreshControl</span> alloc]init];</span><br><span class="line">  refreshControl.attributedTitle = [[<span class="built_in">NSAttributedString</span> alloc]initWithString:<span class="string">@"刷新中.."</span>];</span><br><span class="line">  [refreshControl addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(refreshTableView) forControlEvents:<span class="built_in">UIControlEventValueChanged</span>];</span><br><span class="line">  <span class="keyword">self</span>.refreshControl = refreshControl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) refreshTableView</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//刷新后请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21uiimagepickercontroller"><a class="markdownIt-Anchor" href="#21uiimagepickercontroller"></a> 21.UIImagePickerController</h3><p>查看相册</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImagePickerController</span> *pickerController = [[<span class="built_in">UIImagePickerController</span> alloc]init];</span><br><span class="line">pickerController.sourceType  = <span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>;</span><br><span class="line">pickerController.delegate = <span class="keyword">self</span>;</span><br><span class="line">[<span class="keyword">self</span> presentViewController:pickerController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) imagePickerController:(<span class="built_in">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class="built_in">NSDictionary</span> *)info</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>([<span class="built_in">UIImagePickerController</span> isSourceTypeAvailable:<span class="built_in">UIImagePickerControllerSourceTypePhotoLibrary</span>])</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="built_in">UIImage</span> *image =  [info objectForKey:<span class="built_in">UIImagePickerControllerOriginalImage</span>];</span><br><span class="line">     <span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22uicollectionview"><a class="markdownIt-Anchor" href="#22uicollectionview"></a> 22.UICollectionView</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UICollectionViewFlowLayout</span>* flowLayout = [[<span class="built_in">UICollectionViewFlowLayout</span> alloc]init];</span><br><span class="line">flowLayout.itemSize = <span class="built_in">CGSizeMake</span>(<span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line">[flowLayout setScrollDirection:<span class="built_in">UICollectionViewScrollDirectionVertical</span>];</span><br><span class="line"><span class="built_in">UICollectionView</span> *collectionView = [[<span class="built_in">UICollectionView</span> alloc]initWithFrame:rect collectionViewLayout:flowLayout ];</span><br><span class="line">collectionView.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">collectionView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">collectionView.delegate = <span class="keyword">self</span>;</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.collectionView];</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">NSInteger</span>) collectionView:(<span class="built_in">UICollectionView</span> *)collectionView numberOfItemsInSection:(<span class="built_in">NSInteger</span>)section</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="built_in">UICollectionViewCell</span> *) collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UICollectionViewCell</span> *cell = [collectionView dequeueReusableCellWithReuseIdentifier:<span class="string">@"NodeCell"</span> forIndexPath:indexPath];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) collectionView:(<span class="built_in">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//选中子项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23mpmovieplayercontroller"><a class="markdownIt-Anchor" href="#23mpmovieplayercontroller"></a> 23.MPMoviePlayerController</h3><p>视频控制</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8"</span>];</span><br><span class="line"><span class="built_in">MPMoviePlayerController</span>  *player =[[<span class="built_in">MPMoviePlayerController</span> alloc]initWithContentURL:url];</span><br><span class="line">player.fullscreen = <span class="literal">YES</span>;</span><br><span class="line"><span class="built_in">CGRect</span> winRect = [[<span class="built_in">UIScreen</span> mainScreen] applicationFrame];</span><br><span class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>,<span class="number">0</span>,winRect.size.height, winRect.size.width);</span><br><span class="line">player.controlStyle = <span class="built_in">MPMovieControlStyleDefault</span>;</span><br><span class="line">player.view.frame = rect;</span><br><span class="line">player.view.center = <span class="built_in">CGPointMake</span>(rect.size.width/<span class="number">2</span>, rect.size.height/<span class="number">2</span>);  </span><br><span class="line">[player.view setTransform:<span class="built_in">CGAffineTransformMakeRotation</span>(M_PI/<span class="number">2</span>)];</span><br><span class="line">layer.scalingMode = <span class="built_in">MPMovieScalingModeAspectFill</span>;</span><br><span class="line">[player play];</span><br><span class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(playCompleteFun:) name:<span class="built_in">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:player.view];</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) playCompleteFun:(<span class="built_in">NSNotification</span> *) notification</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的一些代码片段记录"><a class="markdownIt-Anchor" href="#常用的一些代码片段记录"></a> 常用的一些代码片段记录</h3><h4 id="视频截图"><a class="markdownIt-Anchor" href="#视频截图"></a> 视频截图</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIImage</span> *) captureFromView: (<span class="built_in">UIView</span> *) aView</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(aView.frame.size);</span><br><span class="line">    <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">    [aView.layer renderInContext:context];</span><br><span class="line">    <span class="built_in">UIImage</span> *image= <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();     </span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遇到block的情况下转为self"><a class="markdownIt-Anchor" href="#遇到block的情况下转为self"></a> 遇到block的情况下转为self</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>)weakSelf = <span class="keyword">self</span>;</span><br><span class="line">__storng <span class="keyword">typeof</span>(<span class="keyword">self</span>)strongSelf = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><h3 id="常用的一些build-setting-记录"><a class="markdownIt-Anchor" href="#常用的一些build-setting-记录"></a> 常用的一些Build setting 记录</h3><h4 id="bitcode-的开启和关闭"><a class="markdownIt-Anchor" href="#bitcode-的开启和关闭"></a> Bitcode 的开启和关闭</h4><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/20150923200746917" alt="bitcode"></p><h4 id="pch文件开启和配置路径位置"><a class="markdownIt-Anchor" href="#pch文件开启和配置路径位置"></a> pch文件开启和配置路径位置</h4><p>需要则在Precompile Prefix Header 开启 默认关闭</p><h5 id="prefix-header-则配置相应的路径"><a class="markdownIt-Anchor" href="#prefix-header-则配置相应的路径"></a> Prefix Header 则配置相应的路径</h5><p>例如：<strong>$(SRCROOT)/PrefixHeader.pch</strong><br><img src="http://7xpj58.com1.z0.glb.clouddn.com/20150923201059584" alt="PrefixHeader"></p><h5 id="library-search-paths"><a class="markdownIt-Anchor" href="#library-search-paths"></a> Library Search Paths</h5><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/20150923201555972" alt="Search Paths"></p><h5 id="product-name-产品名字设置"><a class="markdownIt-Anchor" href="#product-name-产品名字设置"></a> Product Name 产品名字设置</h5><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/20150923201750634" alt="Product BundleId"></p><h5 id="other-linker-flags-objc-设置"><a class="markdownIt-Anchor" href="#other-linker-flags-objc-设置"></a> Other Linker Flags -Objc 设置</h5><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/20150923202008456" alt="Other linker"></p>]]></content>
      
      
      <categories>
          
          <category> ios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 安全类Repo收集整理[转载]</title>
      <link href="/2017/09/11/Github-%E5%AE%89%E5%85%A8%E7%B1%BBRepo%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86-%E8%BD%AC%E8%BD%BD/"/>
      <url>/2017/09/11/Github-%E5%AE%89%E5%85%A8%E7%B1%BBRepo%E6%94%B6%E9%9B%86%E6%95%B4%E7%90%86-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>漏洞及渗透练习平台：<br>WebGoat漏洞练习环境<br><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a><br><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat-Legacy</a><br>Damn Vulnerable Web Application(漏洞练习平台)<br><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="noopener">https://github.com/RandomStorm/DVWA</a><br>数据库注入练习平台<br><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a><br>用node编写的漏洞练习平台，like OWASP Node Goat<br><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="noopener">https://github.com/cr0hn/vulnerable-node</a></p><a id="more"></a><p>花式扫描器 ：<br>端口扫描器Nmap<br><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a><br>本地网络扫描器<br><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a><br>子域名扫描器<br><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a><br>漏洞路由扫描器<br><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="noopener">https://github.com/jh00nbr/Routerhunter-2.0</a><br>迷你批量信息泄漏扫描脚本<br><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a><br>Waf类型检测工具<br><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a><br>信息搜集工具 :<br>社工插件，可查找以email、phone、username的注册的所有网站账号信息<br><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a><br>Github信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息<br><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a><br>github Repo信息搜集工具<br><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a><br>WEB：<br>webshell大合集<br><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a><br>渗透以及web攻击脚本<br><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a><br>web渗透小工具大合集<br><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a><br>XSS数据接收平台<br><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a><br>XSS与CSRF工具<br><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a><br>Short for command injection exploiter，web向命令注入检测工具<br><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a><br>数据库注入工具<br><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a><br>Web代理，通过加载sqlmap api进行sqli实时检测<br><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a><br>新版中国菜刀<br><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a><br>.git泄露利用EXP<br><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a><br>浏览器攻击框架<br><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a><br>自动化绕过WAF脚本<br><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a><br>http命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）<br><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a><br>浏览器调试利器<br><a href="https://github.com/firebug/firebug" target="_blank" rel="noopener">https://github.com/firebug/firebug</a><br>一款开源WAF<br><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a><br>windows域渗透工具：<br>windows渗透神器<br><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a><br>Powershell渗透库合集<br><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a><br>Powershell tools合集<br><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="noopener">https://github.com/clymb3r/PowerShell</a><br>Fuzz:<br>Web向Fuzz工具<br><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a><br>HTTP暴力破解，撞库攻击脚本<br><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a><br>漏洞利用及攻击框架：<br>msf<br><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a><br>Poc调用框架，可加载Pocsuite,Tangscan，Beebeeto等<br><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a><br>Pocsuite<br><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="noopener">https://github.com/knownsec/Pocsuite</a><br>Beebeeto<br><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="noopener">https://github.com/n0tr00t/Beebeeto-framework</a><br>漏洞POC&amp;EXP:<br>ExploitDB官方git版本<br><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a><br>php漏洞代码分析<br><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a><br>Simple test for CVE-2016-2107<br><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a><br>CVE-2015-7547 POC<br><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a><br>JAVA反序列化POC生成工具<br><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a><br>JAVA反序列化EXP<br><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a><br>Jenkins CommonCollections EXP<br><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a><br>CVE-2015-2426 EXP (windows内核提权)<br><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a><br>use docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)<br><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a><br>php7缓存覆写漏洞Demo及相关工具<br><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a><br>XcodeGhost木马样本<br><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a><br>中间人攻击及钓鱼<br>中间人攻击框架<br><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a><br><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="noopener">https://github.com/secretsquirrel/BDFProxy</a><br><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a><br>Inject code, jam wifi, and spy on wifi users<br><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a><br>可扩展的中间人代理工具<br><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="noopener">https://github.com/intrepidusgroup/mallory</a><br>wifi钓鱼<br><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="noopener">https://github.com/sophron/wifiphisher</a><br>密码破解：<br>密码破解工具<br><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a><br>本地存储的各类密码提取利器<br><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a><br>二进制及代码分析工具：<br>二进制分析工具<br><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">https://github.com/devttys0/binwalk</a><br>系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息<br><a href="https://github.com/quarkslab/binmap" target="_blank" rel="noopener">https://github.com/quarkslab/binmap</a><br>rp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn’t support the FAT binaries) x86/x64 binaries.<br><a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a><br>Windows Exploit Development工具<br><a href="https://github.com/lillypad/badger" target="_blank" rel="noopener">https://github.com/lillypad/badger</a><br>二进制静态分析工具（python）<br><a href="https://github.com/bdcht/amoco" target="_blank" rel="noopener">https://github.com/bdcht/amoco</a><br>Python Exploit Development Assistance for GDB<br><a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a><br>对BillGates Linux Botnet系木马活动的监控工具<br><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="noopener">https://github.com/ValdikSS/billgates-botnet-tracker</a><br>木马配置参数提取工具<br><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="noopener">https://github.com/kevthehermit/RATDecoders</a><br>Shellphish编写的二进制分析工具（CTF向）<br><a href="https://github.com/angr/angr" target="_blank" rel="noopener">https://github.com/angr/angr</a><br>针对python的静态代码分析工具<br><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">https://github.com/yinwang0/pysonar2</a><br>一个自动化的脚本（shell）分析工具，用来给出警告和建议<br><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">https://github.com/koalaman/shellcheck</a><br>基于AST变换的简易Javascript反混淆辅助工具<br><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="noopener">https://github.com/ChiChou/etacsufbo</a><br>EXP编写框架及工具：<br>二进制EXP编写工具<br><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="noopener">https://github.com/t00sh/rop-tool</a><br>CTF Pwn 类题目脚本编写框架<br><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a><br>an easy-to-use io library for pwning development<br><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">https://github.com/zTrix/zio</a><br>跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）<br><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a><br>隐写：<br>隐写检测工具<br><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="noopener">https://github.com/abeluck/stegdetect</a><br>各类安全资料:<br>域渗透教程<br><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a><br>python security教程（原文链接http://www.primalsecurity.net/tutorials/python-tutorials/）<br><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">https://github.com/smartFlash/pySecurity</a><br>data_hacking合集<br><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="noopener">https://github.com/ClickSecurity/data_hacking</a><br>mobile-security-wiki<br><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="noopener">https://github.com/exploitprotocol/mobile-security-wiki</a><br>书籍《reverse-engineering-for-beginners》<br><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="noopener">https://github.com/veficos/reverse-engineering-for-beginners</a><br>一些信息安全标准及设备配置<br><a href="https://github.com/luyg24/IT_security" target="_blank" rel="noopener">https://github.com/luyg24/IT_security</a><br>APT相关笔记<br><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="noopener">https://github.com/kbandla/APTnotes</a><br>Kcon资料<br><a href="https://github.com/knownsec/KCon" target="_blank" rel="noopener">https://github.com/knownsec/KCon</a><br>ctf及黑客资源合集<br><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources</a><br>ctf和安全工具大合集<br><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a><br>《DO NOT FUCK WITH A HACKER》<br><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="noopener">https://github.com/citypw/DNFWAH</a><br>各类CTF资源<br>近年ctf writeup大全<br><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2016</a><br><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015</a><br><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014</a><br>fbctf竞赛平台Demo<br><a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a><br>ctf Resources<br><a href="https://github.com/ctfs/resources" target="_blank" rel="noopener">https://github.com/ctfs/resources</a><br>各类编程资源:<br>大礼包（什么都有）<br><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">https://github.com/bayandin/awesome-awesomeness</a><br>bash-handbook<br><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="noopener">https://github.com/denysdovhan/bash-handbook</a><br>python资源大全<br><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a><br>git学习资料<br><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">https://github.com/xirong/my-git</a><br>安卓开源代码解析<br><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">https://github.com/android-cn/android-open-project-analysis</a><br>python框架，库，资源大合集<br><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a><br>JS 正则表达式库（用于简化构造复杂的JS正则表达式）<br><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/JSVerbalExpressions</a><br>Python：<br>python 正则表达式库（用于简化构造复杂的python正则表达式）<br><a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/PythonVerbalExpressions</a><br>python任务管理以及命令执行库<br><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener">https://github.com/pyinvoke/invoke</a><br>python exe打包库<br><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">https://github.com/pyinstaller/pyinstaller</a><br>py3 爬虫框架<br><a href="https://github.com/orf/cyborg" target="_blank" rel="noopener">https://github.com/orf/cyborg</a><br>一个提供底层接口数据包编程和网络协议支持的python库<br><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a><br>python requests 库<br><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">https://github.com/kennethreitz/requests</a><br>python 实用工具合集<br><a href="https://github.com/mahmoud/boltons" target="_blank" rel="noopener">https://github.com/mahmoud/boltons</a><br>python爬虫系统<br><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a><br>ctf向 python工具包<br><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a><br>科学上网：<br>科学上网工具<br><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net</a><br>福利：<br>微信自动抢红包动态库<br><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="noopener">https://github.com/east520/AutoGetRedEnv</a><br>微信抢红包插件（安卓版）<br><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a><br>神器<br><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/hardseed</a><br>本文出自 RedFree’s Blog，转载时请注明出处及相应链接。<br>本文永久链接: <a href="http://py4.me/blog/?p=124" target="_blank" rel="noopener">http://py4.me/blog/?p=124</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命名规则-阿里巴巴Java开发</title>
      <link href="/2017/08/08/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91/"/>
      <url>/2017/08/08/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99-%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4Java%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<ol><li>【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br>反例： _name / __name / <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant="normal">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant="normal">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Object / name_ / name</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord">/</span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">/</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span></span></span></span> / Object$</li></ol><a id="more"></a><ol start="2"><li>【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式<br>也要避免采用。<br>反例：  DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3<br>正例：  alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。</li><li>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型<br>的相关命名 ）DO /  BO  /  DTO /  VO 等。<br>正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion<br>反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion</li><li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>驼峰形式。<br>正例：  localValue /  getHttpMessage() /  inputUserId</li><li>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>正例：  MAX _ STOCK _ COUNT<br>反例：  MAX _ COUNT</li><li>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类<br>命名以它要测试的类的名称开始，以 Test 结尾。</li><li>【强制】中括号是数组类型的一部分，数组定义如下： String[] args;<br>反例：使用 String args[] 的方式来定义。</li><li>【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。<br>反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC<br>框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异<br>常。</li><li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<br>单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考<br>spring 的框架结构 ）</li><li>【强制】杜绝完全不规范的缩写，避免望文不知义。<br>反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类<br>随意缩写严重降低了代码的可阅读性。</li><li>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。<br>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br>正例： public class OrderFactory;<br>public class LoginProxy;<br>public class ResourceObserver;</li><li>【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁<br>性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>与接口方法相关，并且是整个应用的基础常量。<br>正例：接口方法签名： void f();<br>接口基础常量表示： String COMPANY = &quot; alibaba &quot; ;<br>反例：接口方法定义： public abstract void f();<br>说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默<br>认实现。</li><li>接口和实现类的命名有两套规则：<br>1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>的实现类用 Impl 的后缀与接口区别。<br>正例： CacheServiceImpl 实现 CacheService 接口。<br>2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。<br>正例： AbstractTranslator 实现  Translatable 。</li><li>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。</li><li>【参考】各层命名规约：<br>A) Service / DAO 层方法命名规约<br>1 ） 获取单个对象的方法用 get 做前缀。<br>2 ） 获取多个对象的方法用 list 做前缀。<br>3 ） 获取统计值的方法用 count 做前缀。<br>4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。<br>5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。<br>6 ） 修改的方法用 update 做前缀。<br>B) 领域模型命名规约<br>1 ） 数据对象： xxxDO ， xxx 即为数据表名。<br>2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。<br>3 ） 展示对象： xxxVO ， xxx 一般为网页名称。<br>4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>升级Xcode后Qt问题了</title>
      <link href="/2017/01/23/%E5%8D%87%E7%BA%A7Xcode%E5%90%8EQt%E9%97%AE%E9%A2%98%E4%BA%86/"/>
      <url>/2017/01/23/%E5%8D%87%E7%BA%A7Xcode%E5%90%8EQt%E9%97%AE%E9%A2%98%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>升级XCode后，Qt新建项目出现了问题：</p><p><code>Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.</code></p><a id="more"></a><p>在Google找到了解决方法。<br><a href="http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t" target="_blank" rel="noopener">http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t</a></p><p>~&gt; Xcode 8</p><p>This problem occurs when command line tools are installed after Xcode is installed. What happens is the <code>Xcode-select</code> developer directory gets pointed to ``/Library/Developer/CommandLineTools`.</p><p>Step 1:</p><p>Point <code>Xcode-select</code> to the correct Xcode Developer directory with the command:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select -<span class="keyword">switch</span> <span class="regexp">/Applications/</span>Xcode.app<span class="regexp">/Contents/</span>Developer</span><br></pre></td></tr></table></figure><p>Step 2:</p><p>Confirm the license agreement with the command:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -<span class="meta">license</span></span><br></pre></td></tr></table></figure><p>This will prompt you to read through the license agreement.</p><p>Enter <code>agree</code> to accept the terms.</p><h4 id="xcode-8"><a class="markdownIt-Anchor" href="#xcode-8"></a> &gt;= Xcode 8</h4><p>Step 1:</p><p>As Bruce said, this happens when Qt tries to find <code>xcrun</code> when it should be looking for <code>xcodebuild</code>.</p><p>Open the file:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Qt_install_folder<span class="regexp">/5.7/</span>clang_64<span class="regexp">/mkspecs/</span>features<span class="regexp">/mac/</span>default_pre.prf</span><br></pre></td></tr></table></figure><p>Step 2:</p><p>Replace:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEmpty(<span class="symbol">$</span><span class="symbol">$</span>list(<span class="symbol">$</span><span class="symbol">$</span><span class="keyword">system</span>(<span class="string">"/usr/bin/xcrun -find xcrun 2&gt;/dev/null"</span>))))</span><br></pre></td></tr></table></figure><p>With:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isEmpty(<span class="symbol">$</span><span class="symbol">$</span>list(<span class="symbol">$</span><span class="symbol">$</span><span class="keyword">system</span>(<span class="string">"/usr/bin/xcrun -find xcodebuild 2&gt;/dev/null"</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore文件不起作用</title>
      <link href="/2017/01/03/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/"/>
      <url>/2017/01/03/gitignore%E6%96%87%E4%BB%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>当用git时，经常会添加一些忽略的文件到.gitignore文件中，这里面类似于git的黑名单，文件中指定的文件不会加入到git仓库中，<br>但当发现添加某个文件名后，通过git status查看，并不能忽略此文件。</p><a id="more"></a><p>遇到此问题原因是：git仓库中某些文件被stage标记，如果不想用此文件即使添加.gitignore后，也是不会被忽略的。</p><p>** .gitignore ** 文件只是ignore没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除。</p><p>从网络搜索到此解释：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you already have <span class="keyword">a</span> <span class="built_in">file</span> checked <span class="keyword">in</span>, <span class="keyword">and</span> you want <span class="built_in">to</span> ignore <span class="keyword">it</span>, Git will <span class="keyword">not</span> ignore <span class="keyword">the</span> <span class="built_in">file</span> <span class="keyword">if</span> you <span class="built_in">add</span> <span class="keyword">a</span> rule later.</span><br><span class="line">In those cases, you must untrack <span class="keyword">the</span> <span class="built_in">file</span> <span class="keyword">first</span>, <span class="keyword">by</span> running <span class="keyword">the</span> following <span class="keyword">command</span> <span class="title">in</span> <span class="title">your</span> <span class="title">terminal</span>:</span><br><span class="line"></span><br><span class="line">$ git rm <span class="comment">--cached</span></span><br></pre></td></tr></table></figure><p>通过上面这句话明白：把我们想要忽略的文件，从他们的staged中移除即可。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached <span class="keyword">file</span>/path/<span class="keyword">to</span>/<span class="keyword">be</span>/ignored</span><br><span class="line">git <span class="built_in">add</span> .</span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">"fix untracked files"</span></span><br></pre></td></tr></table></figure><p>** 引用 **：<br><a href="http://stackoverflow.com/questions/11451535/gitignore-not-working" target="_blank" rel="noopener">ignore-not-working</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt Creator常用快捷键</title>
      <link href="/2016/11/14/Qt-Creator%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2016/11/14/Qt-Creator%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>Qt Creator常用快捷键</p><a id="more"></a><ol><li><p>Ctrl + / ：注释/取消注释选定内容。</p></li><li><p>F4 ：在 头文件(.h) 和 实现文件(.cpp) 之间进行切换。</p></li><li><p>Ctrl + i ：自动格式化选中代码。</p></li><li><p>F2 ： 快速切换到 光标选中对象 的源码。</p></li><li><p>快速添加方法实体(.cpp)声明： 将光标移动到h文件中的方法声明。按Alt(按住)+ Enter,再按回车键将在cpp中添加该函数的声明。</p></li><li><p>按Alt +数字键(1-7)可以快速打开对应的输出窗口。</p></li><li><p>右键Refactor可以重构修改变量或函数名 。</p></li><li><p>书签： Ctrl + M 添加/删除书签,按Ctrl + . 查找并移动到下一个标签</p></li><li><p>分栏显示：:</p></li></ol><ul><li>先按Ctrl + e后松开再按2添加上下布局的分栏</li><li>先按Ctrl + e后松开再按3添加左右布局的分栏</li><li>先按Ctrl + e后松开再按1删除所有的分栏</li></ul><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ctrl+F:查找（当前文件）</span><br><span class="line">ctrl+shift+F:高级查找（项目或工程等） 常用!!!</span><br><span class="line">ctrl+r:直接运行： 常用!!!</span><br><span class="line">F5:调试运行 常用!!!</span><br><span class="line">调试-restart debugging.</span><br><span class="line"></span><br><span class="line">执行qmake：qmake *.pro:根据pro文件生成makefile。（然后make根据makefile编译链接生成可执行文件。也就是构建！）</span><br><span class="line">注意：清除（或重新构建）并不清除makefile，可自己试试。如果修改了pro文件，请注意执行qmake一下。</span><br><span class="line">F9：断点； 常用!!!</span><br><span class="line">F10：单步跳过； 常用!!!</span><br><span class="line">F11：单步进入； 常用!!!</span><br><span class="line">Ctrl+M：书签。书签跳转可能与搜狗输入法的快捷键冲突。</span><br><span class="line"></span><br><span class="line">某个函数上按F1，跳转到帮助。 常用!!!</span><br><span class="line"></span><br><span class="line">左右或上下分栏显示。 好用！</span><br><span class="line">构建菜单 - 忽略构建执行运行。</span><br><span class="line">F2: 函数声明和定义之间跳转。 常用!!!</span><br><span class="line">F4：头文件和cpp文件之间跳转。 常用!!!</span><br><span class="line">Alt+<span class="number">0</span>:</span><br><span class="line">Ctrl+\ :注释和不注释 常用!!!</span><br><span class="line"></span><br><span class="line">shift+del:删除当前行。</span><br><span class="line">ctrl+ins:复制当前行。</span><br><span class="line"></span><br><span class="line">有时需要手动修改mainwindow.ui文件，右键-用普通文件编辑器打开即可修改。</span><br><span class="line"></span><br><span class="line">工程右键-add existing directory。（删除文件后，可用此添加回来，在pro文件中即可显示添加的文件）。</span><br><span class="line">右键-添加库。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep &amp;&amp; find命令用法</title>
      <link href="/2016/09/01/grep-find%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/"/>
      <url>/2016/09/01/grep-find%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Linux下搜索文件内容常用grep，搜索文件信息使用find</p></blockquote><a id="more"></a><blockquote><p>原文：<a href="http://gityuan.com/2015/09/13/grep-and-find/" target="_blank" rel="noopener">http://gityuan.com/2015/09/13/grep-and-find/</a></p></blockquote><h2 id="一-grep"><a class="markdownIt-Anchor" href="#一-grep"></a> 一、 grep</h2><p>搜索文本的命令</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令格式: <span class="keyword">grep</span> [<span class="keyword">options</span>]... pattern [<span class="keyword">file</span>]...</span><br><span class="line">命令格式: <span class="keyword">grep</span> 查找规则... 正则表达式 查看文件</span><br></pre></td></tr></table></figure><h3 id="11-查找规则"><a class="markdownIt-Anchor" href="#11-查找规则"></a> 1.1 查找规则</h3><table><thead><tr><th style="text-align:center">options</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">-i</td><td style="text-align:center">不区分大 小写(只适用于单字符)</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">遍历匹配</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">整字匹配</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">查询多文件时只输出包含匹配字符的文件名</td></tr><tr><td style="text-align:center">-c</td><td style="text-align:center">只输出匹配行的计数</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">显示匹配行及行号</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">不显示不存在或无匹配文本的错误信息</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:center">查询多文件时不显示文件名</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:center">显示不包含匹配文本的所有行</td></tr></tbody></table><h3 id="12-正则表达式"><a class="markdownIt-Anchor" href="#12-正则表达式"></a> 1.2 正则表达式</h3><p>pattern正则表达式主要参数：</p><ul><li><code>\</code>： 忽略正则表达式中特殊字符的原有含义。</li><li><code>^</code>：匹配正则表达式的开始行。</li><li><code>$</code>: 匹配正则表达式的结束行。</li><li><code>&lt;</code>：从匹配正则表达 式的行开始。</li><li><code>&gt;</code>：到匹配正则表达式的行结束。</li><li><code>[]</code>：单个字符，如[A]即A符合要求 。</li><li><code>[ - ]</code>：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</li><li><code>.</code> ：所有的单个字符。</li><li><code>*</code> ：有字符，长度可以为0.</li></ul><h3 id="13-实例"><a class="markdownIt-Anchor" href="#13-实例"></a> 1.3 实例</h3><ul><li><p>忽略大小写搜索</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -<span class="selector-tag">i</span> <span class="string">"androiD"</span>  logcat<span class="selector-class">.txt</span>   <span class="comment">//从logcat.txt文件中，搜索包含android的文本行，不区分大小写</span></span><br></pre></td></tr></table></figure></li><li><p>遍历搜索，且不显示无匹配信息</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -rs <span class="string">"android"</span> .   <span class="comment">//从当前目录下，遍历所有的文件，搜索包含android的文本行</span></span><br></pre></td></tr></table></figure></li><li><p>整字匹配搜索</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -w “android” logcat.txt <span class="comment">//从logcat.txt文件中，搜索包含单词android的文本行</span></span><br><span class="line"><span class="keyword">grep</span> -w “android | ios” logcat.txt <span class="comment">//从logcat.txt文件中，搜索包含单词android或者ios的文本行</span></span><br></pre></td></tr></table></figure></li><li><p>只列出文件名</p>  <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -l <span class="string">"android"</span> .</span><br></pre></td></tr></table></figure></li><li><p>统计字符出现次数</p>  <figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c <span class="string">"android"</span> .</span><br></pre></td></tr></table></figure></li><li><p>显示字符出现所在行</p>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -n <span class="comment">"android“ .</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="二-find"><a class="markdownIt-Anchor" href="#二-find"></a> 二、 find</h2><p>搜索文件的命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令格式  <span class="builtin-name">find</span> pathname -options [ actions]</span><br><span class="line">命令格式  <span class="builtin-name">find</span> 查找目录  -查找规则 [执行操作]</span><br></pre></td></tr></table></figure><h3 id="21-查找目录"><a class="markdownIt-Anchor" href="#21-查找目录"></a> 2.1 查找目录</h3><p>(1) 如果不写，默认为当前路径； (2) 支持多个路径，目录直接用空格间隔；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> . -name demo</span><br></pre></td></tr></table></figure><h3 id="22-查找规则"><a class="markdownIt-Anchor" href="#22-查找规则"></a> 2.2 查找规则</h3><h4 id="221-根据文件名name"><a class="markdownIt-Anchor" href="#221-根据文件名name"></a> 2.2.1 根据文件名(name)</h4><p><code>-name</code>  //根据文件名查找，区分大小写<br><code>-iname</code> //根据文件名查找，不区分大小写</p><p>通配符说明： (1)* 匹配任意的若干个字符 (2)? 匹配任意的单个字符 (3)[] 匹配括号内的任意一个字符</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /<span class="keyword">data</span> -<span class="keyword">name</span> dalvi*</span><br><span class="line">find /<span class="keyword">data</span> -<span class="keyword">name</span> dalvik?cache</span><br><span class="line">find /<span class="keyword">data</span> -<span class="keyword">name</span> dalvik-cach[abe]</span><br></pre></td></tr></table></figure><h4 id="222-根据文件类型type"><a class="markdownIt-Anchor" href="#222-根据文件类型type"></a> 2.2.2 根据文件类型(type)</h4><ul><li>f 普通文件</li><li>d 目录文件</li><li>l 链接文件</li><li>b 块设备文件</li><li>c 字符设备文件</li><li>p 管道文件</li><li>s socket文件</li></ul><p>例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -<span class="class"><span class="keyword">type</span> <span class="title">f</span></span> <span class="comment">//查看文件类型</span></span><br></pre></td></tr></table></figure><h4 id="223-根据目录深度depth"><a class="markdownIt-Anchor" href="#223-根据目录深度depth"></a> 2.2.3 根据目录深度(depth)</h4><ul><li>-maxdepth n:查找最大深度为n</li><li>-mindepth m:查找最小深度为m</li></ul><h4 id="224-根据文件大小size"><a class="markdownIt-Anchor" href="#224-根据文件大小size"></a> 2.2.4 根据文件大小(size)</h4><p>单位：c(小写), k(小写), M(大写), G(大写)</p><p>-size +10M: 查找大于10M的文件<br>-size -2k: 查找小于2k的文件<br>-empty: 查找大小为0的文件或空目录</p><h4 id="225-根据文件权限perm"><a class="markdownIt-Anchor" href="#225-根据文件权限perm"></a> 2.2.5 根据文件权限(perm)</h4><p>例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -perm <span class="number">777</span> <span class="comment">//查找权限为777的文件</span></span><br></pre></td></tr></table></figure><h4 id="226-根据文件所属用户和组"><a class="markdownIt-Anchor" href="#226-根据文件所属用户和组"></a> 2.2.6 根据文件所属用户和组</h4><ul><li>-user:根据属主来查找文件</li><li>-group:根据属组来查找文件</li></ul><h4 id="227-根据uid和gid"><a class="markdownIt-Anchor" href="#227-根据uid和gid"></a> 2.2.7 根据uid和gid</h4><ul><li>-uid 500: 查找uid是500 的文件</li><li>-gid 1000: 查找gid是1000的文件</li></ul><h4 id="228-根据时间"><a class="markdownIt-Anchor" href="#228-根据时间"></a> 2.2.8 根据时间</h4><p>可以通过<code>stat</code>命令来查看文件的时间，下列是按照文件的各种时间来查找文件：</p><ul><li>-mtime -n +n: 根据更改(modify)时间，-n指n天以内，+n指n天以前</li><li>-atime -n +n: 根据访问(access)时间，-n指n天以内，+n指n天以前</li><li>-ctime -n +n: 根据创建(create)时间，-n指n天以内，+n指n天以前</li><li>-mmin -n +n: 根据更改(modify)时间，-n指n分钟以内，+n指n分钟以前</li><li>-amin -n +n: 根据访问(access)时间，-n指n分钟以内，+n指n分钟以前</li><li>-cmin -n +n: 根据创建(create)时间，-n指n分钟以内，+n指n分钟以前</li></ul><h4 id="229-多条件连接"><a class="markdownIt-Anchor" href="#229-多条件连接"></a> 2.2.9 多条件连接</h4><ul><li>-a:两个条件同时满足（and）</li><li>-o:两个条件满足其一（or）</li><li>-not:对条件取反（not）</li></ul><p>例如，查找当前路径下，以a开头，并排除掉以b结尾的文件或文件夹：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> -<span class="built_in">name</span> a* -<span class="built_in">not</span> -<span class="built_in">name</span> *b</span><br></pre></td></tr></table></figure><h3 id="23-执行操作"><a class="markdownIt-Anchor" href="#23-执行操作"></a> 2.3 执行操作</h3><ul><li><p><code>-print</code> 匹配文件输出到标准输出，默认操作</p></li><li><p><code>-ls</code> 查找到的结果，以ls方式显示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> -name app -ls</span><br></pre></td></tr></table></figure></li><li><p><code>-ok [command]</code> 查找完成后，执行command执行，询问执行</p>  <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> -<span class="built_in">name</span> app -ok cat &#123;&#125; \;   <span class="comment">//注意：&#123;&#125;前后有空格</span></span><br></pre></td></tr></table></figure></li><li><p><code>-exec [command]</code> 查找完成后，执行command执行，直接执行</p>  <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> -<span class="built_in">name</span> app  -<span class="built_in">exec</span> ls &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EditText 的使用及值得注意的地方</title>
      <link href="/2016/09/01/EditText-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
      <url>/2016/09/01/EditText-%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：<a href="http://www.jianshu.com/p/1f05bb1fde3e" target="_blank" rel="noopener">http://www.jianshu.com/p/1f05bb1fde3e</a><br>作者：张明云（@UperOne）</p></blockquote><p>Android上有很多输入法应用，每种输入法都有各自的特点，输入法多数时候是和EditText配合使用，结合我自己的亲身实践分享一下使用EditText过程中遇到的一些问题及解决方法。</p><a id="more"></a><h3 id="设置默认输入法"><a class="markdownIt-Anchor" href="#设置默认输入法"></a> 设置默认输入法</h3><p>有时候为了提高用户体验，在弹出输入法时需要设置默认的输入状态，比如单词应用弹出输入法时，输入法最好是在英文输入状态下。如果是字典应用，弹出输入法时最好是在中文输入状态下，Android并没有提供设置默认的输入状态的接口，但我们可以通过如下方法一样能够达到想要的效果：</p><h4 id="默认中文"><a class="markdownIt-Anchor" href="#默认中文"></a> 默认中文：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mEditText</span><span class="selector-class">.setInputType</span>(<span class="selector-tag">EditorInfo</span><span class="selector-class">.TYPE_CLASS_TEXT</span>);</span><br></pre></td></tr></table></figure><h4 id="默认英文"><a class="markdownIt-Anchor" href="#默认英文"></a> 默认英文：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mEditText</span><span class="selector-class">.setInputType</span>(<span class="selector-tag">EditorInfo</span><span class="selector-class">.TYPE_TEXT_VARIATION_URI</span>);</span><br></pre></td></tr></table></figure><h3 id="打开和关闭输入法"><a class="markdownIt-Anchor" href="#打开和关闭输入法"></a> 打开和关闭输入法</h3><p>手动控制输入法的开关状态也能提升用户体验，比如：</p><ul><li>有的搜索框会有一个清除按钮，点击清除按钮时就应该弹出输入法，因为用户清除搜索内容的目的多数时候是需要输入新的内容；</li><li>执行搜索时应该隐藏输入法，因为显示输入法时会遮挡搜索结果，用户体验不太好；</li><li>闹钟来时或者有其它window弹出时应该隐藏输入法，因为输入法也是window，如果不隐藏可能导致输入法遮挡住了其它window等用户体验不太友好的问题。</li></ul><h4 id="打开输入法"><a class="markdownIt-Anchor" href="#打开输入法"></a> 打开输入法：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void open(<span class="built_in">Context</span> <span class="built_in">context</span>, View editText)&#123;</span><br><span class="line">    InputMethodManager inputMethodManager = (InputMethodManager) <span class="built_in">context</span>.getSystemService(<span class="built_in">Context</span>.INPUT_METHOD_SERVICE)<span class="comment">;</span></span><br><span class="line">    inputMethodManager.<span class="keyword">showSoftInput(editText, </span><span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭输入法"><a class="markdownIt-Anchor" href="#关闭输入法"></a> 关闭输入法：</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="keyword">close(Context </span><span class="built_in">context</span>, View editText)&#123;</span><br><span class="line">    InputMethodManager inputMethodManager = (InputMethodManager) <span class="built_in">context</span>.getSystemService(<span class="built_in">Context</span>.INPUT_METHOD_SERVICE)<span class="comment">;</span></span><br><span class="line">    inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), <span class="number">0</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听edittext的输入状态"><a class="markdownIt-Anchor" href="#监听edittext的输入状态"></a> 监听EditText的输入状态</h3><ul><li>类似新浪微博，在输入内容时会提示还可以输入多少字；</li><li>有的搜索引擎，输入内容时实时显示搜索结果；</li><li>有的输入框有输入长度限制，输入内容超过长度限制时弹出提示信息。</li></ul><p>上面这些都可以通过监听EditText的输入状态来实现，具体实现方式如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mInputEditTxt.add<span class="constructor">TextChangedListener(<span class="params">new</span> TextWatcher()</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void before<span class="constructor">TextChanged(CharSequence <span class="params">s</span>, <span class="params">int</span> <span class="params">start</span>, <span class="params">int</span> <span class="params">count</span>, <span class="params">int</span> <span class="params">after</span>)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void on<span class="constructor">TextChanged(CharSequence <span class="params">s</span>, <span class="params">int</span> <span class="params">start</span>, <span class="params">int</span> <span class="params">before</span>, <span class="params">int</span> <span class="params">count</span>)</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"监听EditText输入内容的变化，在这里可以监听输入内容的长度。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void after<span class="constructor">TextChanged(Editable <span class="params">s</span>)</span> &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"这里可以实现所输即所得，用户输入的同时可以立即在这里根据输入内容执行操作，显示搜索结果！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="监听输入法中的回车按钮"><a class="markdownIt-Anchor" href="#监听输入法中的回车按钮"></a> 监听输入法中的回车按钮</h4><p>比如搜狗输入法的右下角有一个回车按钮，我们希望用户点击它时也执行确认功能，可以通过监听EditText的按键点击事件来实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监听输入法按键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    mInputEditTxt.set<span class="constructor">OnKeyListener(<span class="params">new</span> OnKeyListener()</span> &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean on<span class="constructor">Key(View <span class="params">v</span>, <span class="params">int</span> <span class="params">keyCode</span>, KeyEvent <span class="params">event</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyCode<span class="operator"> == </span>KeyEvent.KEYCODE_ENTER<span class="operator"> &amp;&amp; </span>event.get<span class="constructor">Action()</span><span class="operator"> == </span>KeyEvent.ACTION_UP) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"手指弹起时执行确认功能"</span>);</span><br><span class="line">                return <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="改变输入法中回车按钮的显示内容"><a class="markdownIt-Anchor" href="#改变输入法中回车按钮的显示内容"></a> 改变输入法中回车按钮的显示内容</h4><p>如果回车按钮是执行搜索功能，则回车按钮上显示”搜索”，如果是执行发送功能，则显示”发送”,如果是下一步，则显示”下一步”。</p><p>实现这个功能需要调用EditText的setImeOptions方法：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="bullet">* </span>IME<span class="emphasis">_ACTION_</span>SEARCH 搜索</span><br><span class="line"><span class="bullet">* </span>IME<span class="emphasis">_ACTION_</span>SEND 发送</span><br><span class="line"><span class="bullet">* </span>IME<span class="emphasis">_ACTION_</span>NEXT 下一步</span><br><span class="line"><span class="bullet">* </span>IME<span class="emphasis">_ACTION_</span>DONE 完成</span><br><span class="line"><span class="strong">*/</span></span><br><span class="line"><span class="strong">mInputEditTxt.setImeOptions(EditorInfo.IME_ACTION_SEARCH);</span></span><br></pre></td></tr></table></figure><h4 id="限制输入内容"><a class="markdownIt-Anchor" href="#限制输入内容"></a> 限制输入内容</h4><p>有时候我们根本就不想用户输入一些杂七杂八的内容，因为这需要程序针对输入的内容做各种处理，如果处理不当还会有好多不可预见的问题，索性在输入内容时就禁止用户输入一些非法字符，这可以通过下面的方式实现，新建一个类InputTxtFilter：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> InputTxtFilter&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INPUT_TYPE_EN = <span class="number">0</span>x01;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INPUT_TYPE_CH = <span class="number">0</span>x02;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SPELL = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>,<span class="string">"h"</span>,<span class="string">"i"</span>,<span class="string">"j"</span>,<span class="string">"k"</span>,<span class="string">"l"</span>,<span class="string">"m"</span>,<span class="string">"n"</span>,<span class="string">"o"</span>,<span class="string">"p"</span>,<span class="string">"q"</span>,<span class="string">"r"</span>,<span class="string">"s"</span>,<span class="string">"t"</span>,<span class="string">"u"</span>,<span class="string">"v"</span>,<span class="string">"w"</span>,<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>,</span><br><span class="line">        <span class="string">"ā"</span>,<span class="string">"á"</span>,<span class="string">"ǎ"</span>,<span class="string">"à"</span>,<span class="string">"ō"</span>,<span class="string">"ó"</span>,<span class="string">"ǒ"</span>,<span class="string">"ò"</span>,<span class="string">"ē"</span>,<span class="string">"é"</span>,<span class="string">"ě"</span>,<span class="string">"è"</span>,<span class="string">"ī"</span>,<span class="string">"í"</span>,<span class="string">"ǐ"</span>,<span class="string">"ì"</span>,<span class="string">"ū"</span>,<span class="string">"ú"</span>,<span class="string">"ǔ"</span>,<span class="string">"ù"</span>,<span class="string">"ǖ"</span>,<span class="string">"ǘ"</span>,<span class="string">"ǚ"</span>,<span class="string">"ǜ"</span>,<span class="string">"ü"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] chineseParam = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'」'</span>,<span class="string">'，'</span>,<span class="string">'。'</span>,<span class="string">'？'</span>,<span class="string">'…'</span>,<span class="string">'：'</span>,<span class="string">'～'</span>,<span class="string">'【'</span>,<span class="string">'＃'</span>,<span class="string">'、'</span>,<span class="string">'％'</span>,<span class="string">'＊'</span>,<span class="string">'＆'</span>,<span class="string">'＄'</span>,<span class="string">'（'</span>,<span class="string">'‘'</span>,<span class="string">'’'</span>,<span class="string">'“'</span>,<span class="string">'”'</span>,<span class="string">'『'</span>,<span class="string">'〔'</span>,<span class="string">'｛'</span>,<span class="string">'【'</span></span><br><span class="line">        ,<span class="string">'￥'</span>,<span class="string">'￡'</span>,<span class="string">'‖'</span>,<span class="string">'〖'</span>,<span class="string">'《'</span>,<span class="string">'「'</span>,<span class="string">'》'</span>,<span class="string">'〗'</span>,<span class="string">'】'</span>,<span class="string">'｝'</span>,<span class="string">'〕'</span>,<span class="string">'』'</span>,<span class="string">'”'</span>,<span class="string">'）'</span>,<span class="string">'！'</span>,<span class="string">'；'</span>,<span class="string">'—'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputTxtFilter( )&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> inputFilter( <span class="keyword">final</span> Context context, <span class="keyword">final</span> EditText editText, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> <span class="keyword">int</span> inputLimit)&#123;</span><br><span class="line">        InputFilter[] filters = <span class="keyword">new</span> InputFilter[<span class="number">1</span>];</span><br><span class="line">        filters[<span class="number">0</span>] = <span class="keyword">new</span> InputFilter.LengthFilter(inputLimit)&#123;</span><br><span class="line">            <span class="keyword">public</span> CharSequence filter(CharSequence <span class="keyword">source</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Spanned dest, <span class="keyword">int</span> dstart, <span class="keyword">int</span> dend)&#123;</span><br><span class="line">                <span class="keyword">boolean</span> isRightCharater = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(type == INPUT_TYPE_EN)&#123;</span><br><span class="line">                    isRightCharater = isLetter(<span class="keyword">source</span>.toString());</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == INPUT_TYPE_CH)&#123;</span><br><span class="line">                    isRightCharater = isChineseWord(<span class="keyword">source</span>.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ( !isRightCharater|| dest.toString( ).length( )&gt;=inputLimit )&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">source</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        editText.setFilters(filters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测String是否全是中文</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isChineseWord( String name )&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span>[] cTemp = name.toCharArray( );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; name.length( ); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( !isChinese( cTemp[ i ] ) )&#123;</span><br><span class="line">                res=<span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为英文字母</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isLetter( String inputStr )&#123;</span><br><span class="line">        <span class="keyword">char</span>[] inputArray = inputStr.toCharArray( );</span><br><span class="line">        List&lt;String&gt; spellList = Arrays.<span class="keyword">asList</span>( SPELL );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">char</span> input : inputArray )&#123;</span><br><span class="line">            <span class="keyword">if</span>( !spellList.contains( input + <span class="string">""</span> ) )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判定输入汉字</span></span><br><span class="line"><span class="comment">     * @param c</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isChinese( <span class="keyword">char</span> c )&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">char</span> param : chineseParam )&#123;</span><br><span class="line">            <span class="keyword">if</span>( param == c )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Character.UnicodeBlock ub = Character.UnicodeBlock.of( c );</span><br><span class="line">        <span class="keyword">if</span> ( ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class="line">            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION</span><br><span class="line">            || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION</span><br><span class="line">            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在初始化EditText时，调用InputTxtFilter的inputFilter方法，传入输入长度限制、输入内容的类型限制等即可，eg：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">InputTxtFilter</span>.</span></span>input<span class="constructor">Filter(<span class="params">this</span>, <span class="params">mInputEditTxt</span>, InputTxtFilter.INPUT_TYPE_EN, 5)</span>;</span><br></pre></td></tr></table></figure><h3 id="屏蔽edittext的复制-粘贴功能"><a class="markdownIt-Anchor" href="#屏蔽edittext的复制-粘贴功能"></a> 屏蔽EditText的复制、粘贴功能</h3><p>在低版本的Android SDK中，如果对EditText的输入长度有限制时，长按EditText并将选中的内容拖动到EditText输入框中，如果这时候的长度超过了EditText的输入长度限制，程序会直接崩溃掉，在高版本的Android SDK中这个问题已经改了，如果出现上面的情况会直接清空输入框中的内容，为了避免这种讨厌的问题，我们可以屏蔽EditText的复制和粘贴功能，只需要屏蔽EditText的长按响应即可：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 屏蔽复制、粘贴功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    mInputEditTxt.setCustomSelectionActionModeCallback(<span class="keyword">new</span> ActionMode.Callback() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onCreateActionMode</span><span class="params">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onPrepareActionMode</span><span class="params">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onActionItemClicked</span><span class="params">(ActionMode actionMode, MenuItem menuItem)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroyActionMode</span><span class="params">(ActionMode mode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    mInputEditTxt.setLongClickable(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EditText </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一句代码搞定 Android 图片压缩</title>
      <link href="/2016/08/29/%E4%B8%80%E5%8F%A5%E4%BB%A3%E7%A0%81%E6%90%9E%E5%AE%9A-Android-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/"/>
      <url>/2016/08/29/%E4%B8%80%E5%8F%A5%E4%BB%A3%E7%A0%81%E6%90%9E%E5%AE%9A-Android-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>一个Android图片压缩工具</p><a id="more"></a><h4 id="尊重原著请移步作者博客"><a class="markdownIt-Anchor" href="#尊重原著请移步作者博客"></a> 尊重原著，请移步作者博客</h4><blockquote><p>文／zibin（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/8a51288c1dee" target="_blank" rel="noopener">http://www.jianshu.com/p/8a51288c1dee</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glide的简单用法</title>
      <link href="/2016/08/29/glide%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/2016/08/29/glide%E7%9A%84%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>首先需要在app的build.gradle中加入</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="string">'com.github.bumptech.glide:glide:+'</span></span><br></pre></td></tr></table></figure><p>注：&quot;+&quot;表示始终请求最新版</p><a id="more"></a><h3 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> 基本用法</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">        .load(url)<span class="comment">//图片地址</span></span><br><span class="line">        .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.default_image)<span class="comment">//加载中显示的图片</span></span><br><span class="line">        .error(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.error_image)<span class="comment">//加载出错显示的图片</span></span><br><span class="line">        .cross<span class="constructor">Fade()</span><span class="comment">//淡入效果</span></span><br><span class="line">        .into(imageView);</span><br></pre></td></tr></table></figure><h3 id="缓存多尺寸"><a class="markdownIt-Anchor" href="#缓存多尺寸"></a> 缓存多尺寸</h3><p>因为Glide默认只缓存一种尺寸大小的图片，即当前要加载的ImageView大小的图片，当你要在另一个不同大小的ImageView中加载同一张图片时Glide就会再次请求加载新的尺寸的图片，但是Glide给我们提供了一个设置可以缓存全尺寸的图片，这样在不同大小的ImageView中加载同一张图片就只会产生一次请求。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">        <span class="selector-class">.load</span>(<span class="selector-tag">url</span>)</span><br><span class="line">        <span class="selector-class">.diskCacheStrategy</span>(<span class="selector-tag">DiskCacheStrategy</span><span class="selector-class">.ALL</span>)</span><br><span class="line">        <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><h3 id="加载特定大小的图片"><a class="markdownIt-Anchor" href="#加载特定大小的图片"></a> 加载特定大小的图片</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(context)</span><br><span class="line">        .load(url)</span><br><span class="line">        .<span class="keyword">override</span>(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">        .<span class="built_in">int</span>o(imageView);</span><br></pre></td></tr></table></figure><h3 id="center-cropping"><a class="markdownIt-Anchor" href="#center-cropping"></a> Center Cropping</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">context</span>)</span><br><span class="line">        <span class="selector-class">.load</span>(<span class="selector-tag">url</span>)</span><br><span class="line">        <span class="selector-class">.centerCrop</span>();</span><br><span class="line">        <span class="selector-class">.into</span>(<span class="selector-tag">imageView</span>);</span><br></pre></td></tr></table></figure><h3 id="transforming"><a class="markdownIt-Anchor" href="#transforming"></a> Transforming</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">        .load(url)</span><br><span class="line">        .transform(<span class="keyword">new</span> <span class="constructor">CircleTransform(<span class="params">context</span>)</span>)</span><br><span class="line">        .into(imageView);</span><br></pre></td></tr></table></figure><h3 id="特性加载gif-加载本地图片-asbitmap"><a class="markdownIt-Anchor" href="#特性加载gif-加载本地图片-asbitmap"></a> 特性：加载Gif、加载本地图片、asbitmap</h3><p>Glide可以加载Gif动态图，使用方法和加载普通图片一样，同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Glide</span>.</span></span><span class="keyword">with</span>(context)</span><br><span class="line">        .load(url)<span class="comment">//图片地址</span></span><br><span class="line">        .<span class="keyword">as</span><span class="constructor">Gif()</span><span class="comment">//asGif加载Gif动态图，asBitmap可以将Gif解码成bitmap</span></span><br><span class="line">        .placeholder(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.default_image)<span class="comment">//加载中显示的图片</span></span><br><span class="line">        .error(<span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>drawable.error_image)<span class="comment">//加载出错显示的图片</span></span><br><span class="line">        .cross<span class="constructor">Fade()</span><span class="comment">//淡入效果</span></span><br><span class="line">        .into(imageView);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git忽略文件.ignore模板（Android Studio）</title>
      <link href="/2016/08/29/Git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6-ignore%E6%A8%A1%E6%9D%BF%EF%BC%88Android-Studio%EF%BC%89/"/>
      <url>/2016/08/29/Git%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6-ignore%E6%A8%A1%E6%9D%BF%EF%BC%88Android-Studio%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="git忽略文件ignore模板android-studio"><a class="markdownIt-Anchor" href="#git忽略文件ignore模板android-studio"></a> Git忽略文件.ignore模板（Android Studio）</h4><a id="more"></a><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#built application files  </span></span><br><span class="line">    *<span class="string">.apk</span>  </span><br><span class="line">    *<span class="string">.ap_</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># files for the dex VM  </span></span><br><span class="line">    *<span class="string">.dex</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Java class files  </span></span><br><span class="line">    *<span class="string">.class</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># generated files  </span></span><br><span class="line">    bin/  </span><br><span class="line">    gen/  </span><br><span class="line">    out/  </span><br><span class="line">    build/  </span><br><span class="line">    <span class="comment">#  build/  忽略所有的 build/ 目录下文件  </span></span><br><span class="line">    <span class="comment">#  /build  只忽略此目录下build文件，子目录的build不忽略  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Local configuration file (sdk path, etc)  </span></span><br><span class="line">    local.properties  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Windows thumbnail db  </span></span><br><span class="line">    Thumbs.db  </span><br><span class="line">    <span class="comment"># OSX files  </span></span><br><span class="line">    <span class="string">.DS_Store</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Eclipse project files  </span></span><br><span class="line">    <span class="string">.classpath</span>  </span><br><span class="line">    <span class="string">.project</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Android Studio  </span></span><br><span class="line">    *<span class="string">.iml</span>  </span><br><span class="line">    <span class="string">.idea</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Local IDEA workspace  </span></span><br><span class="line">    <span class="string">.idea/workspace.xml</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Gradle cache  </span></span><br><span class="line">    <span class="string">.gradle</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#NDK  </span></span><br><span class="line">    obj/  </span><br><span class="line"></span><br><span class="line">    <span class="string">.settings/</span>  </span><br><span class="line">    *<span class="string">.properties</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Log Files</span></span><br><span class="line">    *<span class="string">.log</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令wc的详细用法</title>
      <link href="/2016/08/29/Linux%E5%91%BD%E4%BB%A4wc%E7%9A%84%E8%AF%A6%E7%BB%86%E7%94%A8%E6%B3%95/"/>
      <url>/2016/08/29/Linux%E5%91%BD%E4%BB%A4wc%E7%9A%84%E8%AF%A6%E7%BB%86%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>wc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）。在Windows的Word中有个“字数统计”的工具，可以帮我们把选中范围的字数、字符数统计出来。Linux下的wc命令可以实现这个 功能。使用vi打开文件的时候，底下的信息也会显示行数和字节数。</p><a id="more"></a><h2 id="常用参数"><a class="markdownIt-Anchor" href="#常用参数"></a> 常用参数</h2><p>格式：wc -l <file><br>打印指定文件的文本行数。（l=小写L）<br>以下参数可组合使用。<br>参数：-c, --bytes<br>打印字节数（print the byte counts）</file></p><p>参数：-m, --chars<br>打印字符数（print the character counts）</p><p>参数：-l, --lines<br>打印行数（print the newline counts）</p><p>参数：-L, --max-line-length<br>打印最长行的长度（print the length of the longest line）</p><p>参数：-w, --words<br>打印单词数（print the word counts）</p><h2 id="使用示例"><a class="markdownIt-Anchor" href="#使用示例"></a> 使用示例</h2><h3 id="示例一"><a class="markdownIt-Anchor" href="#示例一"></a> 示例一</h3><p>[root@jfht ~]# wc /etc/passwd<br>46   66 2027 /etc/passwd<br>行数 单词数 字节数 文件名<br>[root@jfht ~]#<br>[root@jfht ~]# wc -l /etc/passwd<br>46 /etc/passwd<br>[root@jfht ~]# wc -cmlwL /etc/passwd<br>46   66 2027 2027   74 /etc/passwd<br>[root@jfht ~]# wc -cmlLw /etc/passwd<br>46   66 2027 2027   74 /etc/passwd<br>[root@jfht ~]# wc -wcmlL /etc/passwd<br>46   66 2027 2027   74 /etc/passwd<br>[root@jfht ~]#<br>问题来了：从上面的命令行执行结果来看，wc的输出数据的顺序与的几个参数的顺序好像没有关系？！</p><h3 id="示例二-用wc命令怎么做到只打印统计数字不打印文件名"><a class="markdownIt-Anchor" href="#示例二-用wc命令怎么做到只打印统计数字不打印文件名"></a> 示例二 用wc命令怎么做到只打印统计数字不打印文件名</h3><p>使用管道线。这在编写shell脚本时特别有用。<br>[root@jfht ~]# wc -l /etc/passwd<br>46 /etc/passwd<br>[root@jfht ~]# cat /etc/passwd | wc -l<br>46<br>[root@jfht ~]#</p><h3 id="示例三-中文编码的问题"><a class="markdownIt-Anchor" href="#示例三-中文编码的问题"></a> 示例三 中文编码的问题</h3><p>执行环境是中文编码的。<br>[root@jfht ~]# echo $LANG<br>zh_CN.GB18030<br>中文编码文件ehr_object.gv，UTF8编码的文件ehr_object_utf8.gv。<br>[root@jfht ~]# file ehr_object.gv ehr_object_utf8.gv<br>ehr_object.gv:      ISO-8859 text<br>ehr_object_utf8.gv: UTF-8 Unicode text<br>[root@jfht ~]#<br>[root@jfht ~]# wc ehr_object.gv ehr_object_utf8.gv<br>11  105  830 ehr_object.gv<br>wc: ehr_object_utf8.gv:4: 无效或不完整的多字节字符或宽字符<br>11  105  866 ehr_object_utf8.gv<br>22  210 1696 总计<br>[root@jfht ~]#</p><h3 id="示例四-中文单词数的计算"><a class="markdownIt-Anchor" href="#示例四-中文单词数的计算"></a> 示例四 中文单词数的计算</h3><p>[root@jfht ~]# cat test.txt<br>你好Word<br>Linux</p><p>[root@jfht ~]# wc test.txt<br>3  2 16 test.txt<br>行数 单词数 字节数 文件名<br>[root@jfht ~]#</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux之cut用法</title>
      <link href="/2016/08/29/linux%E4%B9%8Bcut%E7%94%A8%E6%B3%95/"/>
      <url>/2016/08/29/linux%E4%B9%8Bcut%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。</p><a id="more"></a><p>(1) 其语法格式为：<br><font color="red">cut [-bn] [file] 或 cut [-c] [file] 或者 cut [-df] [file]</font></p><p>使用说明<br>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br><br>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><p>主要参数</p><ul><li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li><li>-c ：以字符为单位进行分割。</li><li>-d ：自定义分隔符，默认为制表符。</li><li>-f  ：与-d一起使用，指定显示哪个区域。</li><li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</li></ul><p>（2）cut一般以什么为依据呢? 也就是说，我怎么告诉cut我想定位到的剪切内容呢?</p><p>cut命令主要是接受三个定位方法：<br>第一，字节（bytes），用选项-b<br>第二，字符（characters），用选项-c<br>第三，域（fields），用选项-f</p><p>3）以“字节”定位<br>举个例子吧，当你执行ps命令时，会输出类似如下的内容：<br>[rocrocket@rocrocket programming]$ who<br>rocrocket :0           2009-01-08 11:07<br>rocrocket pts/0        2009-01-08 11:23 (:0.0)<br>rocrocket pts/1        2009-01-08 14:15 (:0.0)<br>如果我们想提取每一行的第3个字节，就这样：<br>[rocrocket@rocrocket programming]$ who|cut -b 3<br>c<br>c<br>c</p><p>4） 如果“字节”定位中，我想提取第3，第4、第5和第8个字节，怎么办?<br>-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：<br>[rocrocket@rocrocket programming]$ who|cut -b 3-5,8<br>croe<br>croe<br>croe<br>但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。可不能颠倒定位的顺序哦。这个例子就可以说明这个问题：</p><p>[rocrocket@rocrocket programming]$ who|cut -b 8,3-5<br>croe<br>croe<br>croe<br>（5） 还有哪些类似“3-5”这样的小技巧，列举一下吧!</p><p>[rocrocket@rocrocket programming]$ who<br>rocrocket :0           2009-01-08 11:07<br>rocrocket pts/0        2009-01-08 11:23 (:0.0)<br>rocrocket pts/1        2009-01-08 14:15 (:0.0)<br>[rocrocket@rocrocket programming]$ who|cut -b -3<br>roc<br>roc<br>roc<br>[rocrocket@rocrocket programming]$ who|cut -b 3-<br>crocket :0           2009-01-08 11:07<br>crocket pts/0        2009-01-08 11:23 (:0.0)<br>crocket pts/1        2009-01-08 14:15 (:0.0)<br>想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。<br>如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。看：</p><p>[rocrocket@rocrocket programming]$ who|cut -b -3,3-<br>rocrocket :0           2009-01-08 11:07<br>rocrocket pts/0        2009-01-08 11:23 (:0.0)<br>rocrocket pts/1        2009-01-08 14:15 (:0.0)<br>（6）给个以字符为定位标志的最简单的例子吧!</p><p>下面例子你似曾相识，提取第3，第4，第5和第8个字符：</p><p>[rocrocket@rocrocket programming]$ who|cut -c 3-5,8<br>croe<br>croe<br>croe<br>不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：</p><p>[rocrocket@rocrocket programming]$ cat cut_ch.txt<br>星期一<br>星期二<br>星期三<br>星期四<br>[rocrocket@rocrocket programming]$ cut -b 3 cut_ch.txt<br>�<br>�<br>�<br>�<br>[rocrocket@rocrocket programming]$ cut -c 3 cut_ch.txt<br>一<br>二<br>三<br>四<br>看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。<br>既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。<br>当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。例子如下：</p><p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -b 2<br>�<br>�<br>�<br>�<br>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 2</p><p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 1,2,3<br>星<br>星<br>星<br>星<br>（7）域是怎么回事呢？解释解释:)</p><p>为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。</p><p>我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！</p><p>以/etc/passwd的前五行内容为例：</p><p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5<br>root❌0:0:root:/root:/bin/bash<br>bin❌1:1:bin:/bin:/sbin/nologin<br>daemon❌2:2:daemon:/sbin:/sbin/nologin<br>adm❌3:4:adm:/var/adm:/sbin/nologin<br>lp❌4:7:lp:/var/spool/lpd:/sbin/nologin<br>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1<br>root<br>bin<br>daemon<br>adm<br>lp<br>看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！<br>当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：</p><p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5<br>root:0:0:root<br>bin:1:1:bin<br>daemon:2:2:daemon<br>adm:3:4:adm<br>lp:4:7:lp<br>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7<br>root:0:0:root:/bin/bash<br>bin:1:1:bin:/sbin/nologin<br>daemon:2:2:daemon:/sbin/nologin<br>adm:3:4:adm:/sbin/nologin<br>lp:4:7:lp:/sbin/nologin<br>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f -2<br>root:x<br>bin:x<br>daemon:x<br>adm:x<br>lp:x<br>（8）如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？</p><p>有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。</p><p>[rocrocket@rocrocket programming]$ cat tab_space.txt<br>this is tab finish.<br>this is several space      finish.<br>[rocrocket@rocrocket programming]$ sed -n l tab_space.txt<br>this is tab\tfinish.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>s</mi><mi>h</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">this is several space      finish.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mord">.</span></span></span></span><br>看到了吧，如果是制表符（TAB），那么会显示为\t符号，如果是空格，就会原样显示。<br>通过此方法即可以判断制表符和空格了。<br>注意，上面sed -n后面的字符是L的小写字母哦，不要看错。</p><p>（9）我应该在cut -d中用什么符号来设定制表符或空格呢?</p><p>其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。</p><p>如果你设定一个空格为间隔符，那么就这样：</p><p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>this<br>this<br>注意，两个单引号之间可确实要有一个空格哦，不能偷懒。<br>而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。</p><p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>cut: the delimiter must be a single character<br>Try `cut --help’ for more information.</p><p>（10）cut有哪些缺陷和不足？</p><p>猜出来了吧？对，就是在处理多空格时。<br>如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串的去除空格函数 字符串的内建函数</title>
      <link href="/2016/08/24/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%BB%E9%99%A4%E7%A9%BA%E6%A0%BC%E5%87%BD%E6%95%B0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0/"/>
      <url>/2016/08/24/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%BB%E9%99%A4%E7%A9%BA%E6%A0%BC%E5%87%BD%E6%95%B0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="python字符串的去除空格函数-字符串的内建函数"><a class="markdownIt-Anchor" href="#python字符串的去除空格函数-字符串的内建函数"></a> python字符串的去除空格函数 字符串的内建函数</h2><hr><ul><li>strip 同时去掉左右两边的空格</li><li>lstrip 去掉左边的空格</li><li>rstrip 去掉右边的空格</li></ul><a id="more"></a><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">string.capitalize()</td><td style="text-align:left">把字符串的第一个字符大写</td></tr><tr><td style="text-align:left">string.center(width)</td><td style="text-align:left">返回一个原字符串居中,并使用空格填充至长度width的新字串</td></tr><tr><td style="text-align:left">string.count(str, beg=0, end=len(string))</td><td style="text-align:left">返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内 str 出现的次数</td></tr><tr><td style="text-align:left">string.decode(encoding=‘UTF-8’, errors=‘strict’)</td><td style="text-align:left">以 encoding 指定的编码格式解码string，如果出错默认报一个 ValueError的异常 ，除非errors 指定的是 ‘ignore’‘replace’ string.encode(encoding=‘UTF-8’, errors=‘strict’)  以 encoding 指定的编码格式编码string，如果出错默认报一个ValueError 的异常，除非 errors指定的是’ignore’或者’replace’</td></tr><tr><td style="text-align:left">string.endswith(obj, beg=0, end=len(string))</td><td style="text-align:left">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回True,否则返回 False.</td></tr><tr><td style="text-align:left">string.expandtabs(tabsize=8)</td><td style="text-align:left">把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.</td></tr><tr><td style="text-align:left">string.find(str, beg=0, end=len(string))</td><td style="text-align:left">检测str是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td></tr><tr><td style="text-align:left">string.index(str, beg=0, end=len(string))</td><td style="text-align:left">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td></tr><tr><td style="text-align:left">string.isalnum()</td><td style="text-align:left">R如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False</td></tr><tr><td style="text-align:left">string.isalpha()</td><td style="text-align:left">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td></tr><tr><td style="text-align:left">string.isdecimal()</td><td style="text-align:left">如果 string 只包含十进制数字则返回True 否则返回 False.</td></tr><tr><td style="text-align:left">string.isdigit()</td><td style="text-align:left">如果 string 只包含数字则返回 True 否则返回 False.</td></tr><tr><td style="text-align:left">string.islower()</td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回 False</td></tr><tr><td style="text-align:left">string.isnumeric()</td><td style="text-align:left">如果 string 中只包含数字字符，则返回True，否则返回 False</td></tr><tr><td style="text-align:left">string.isspace()</td><td style="text-align:left">如果 string 中只包含空格，则返回True，否则返回 False.</td></tr><tr><td style="text-align:left">string.istitle()</td><td style="text-align:left">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td style="text-align:left">string.isupper()</td><td style="text-align:left">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False</td></tr><tr><td style="text-align:left">string.join(seq)</td><td style="text-align:left">Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td style="text-align:left">string.ljust(width)</td><td style="text-align:left">返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串</td></tr><tr><td style="text-align:left">string.lower()</td><td style="text-align:left">转换 string 中所有大写字符为小写.</td></tr><tr><td style="text-align:left"><font color="#DC143C">string.lstrip() </font></td><td style="text-align:left"><font color="#DC143C">截掉 string 左边的空格.</font></td></tr><tr><td style="text-align:left">string.partition(str)</td><td style="text-align:left">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.</td></tr><tr><td style="text-align:left">string.replace(str1, str2,num=string.count(str1))</td><td style="text-align:left">把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.</td></tr><tr><td style="text-align:left">string.rfind(str, beg=0,end=len(string) )</td><td style="text-align:left">类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td style="text-align:left">string.rindex( str, beg=0,end=len(string))</td><td style="text-align:left">类似于 index()，不过是从右边开始.</td></tr><tr><td style="text-align:left">string.rjust(width)</td><td style="text-align:left">返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串</td></tr><tr><td style="text-align:left">string.rpartition(str)</td><td style="text-align:left">类似于 partition()函数,不过是从右边开始查找.</td></tr><tr><td style="text-align:left"><font color="#DC143C">string.rstrip() </font></td><td style="text-align:left"><font color="#DC143C">          删除 string 字符串末尾的空格.</font></td></tr><tr><td style="text-align:left">string.split(str=&quot;&quot;, num=string.count(str))</td><td style="text-align:left">以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串</td></tr><tr><td style="text-align:left">string.splitlines(num=string.count(’\n’))</td><td style="text-align:left">按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.</td></tr><tr><td style="text-align:left">string.startswith(obj, beg=0,end=len(string))</td><td style="text-align:left">检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td></tr><tr><td style="text-align:left"><font color="#DC143C">string.strip([obj]) </font></td><td style="text-align:left"><font color="#DC143C">    在string 上执行 lstrip()和 rstrip().</font></td></tr><tr><td style="text-align:left">string.swapcase()</td><td style="text-align:left">翻转 string 中的大小写</td></tr><tr><td style="text-align:left">string.title()</td><td style="text-align:left">返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td style="text-align:left">string.translate(str, del=&quot;&quot;)</td><td style="text-align:left">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td></tr><tr><td style="text-align:left">string.upper()</td><td style="text-align:left">转换 string 中的小写字母为大写</td></tr><tr><td style="text-align:left">string.zfill(width)</td><td style="text-align:left">返回长度为width的字符串,原字符串 string 右对齐,前面填充0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知道Android 中Gradle 的这些技巧，提升编译构建速度</title>
      <link href="/2016/06/07/%E7%9F%A5%E9%81%93Android-%E4%B8%ADGradle-%E7%9A%84%E8%BF%99%E4%BA%9B%E6%8A%80%E5%B7%A7%EF%BC%8C%E6%8F%90%E5%8D%87%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/"/>
      <url>/2016/06/07/%E7%9F%A5%E9%81%93Android-%E4%B8%ADGradle-%E7%9A%84%E8%BF%99%E4%BA%9B%E6%8A%80%E5%B7%A7%EF%BC%8C%E6%8F%90%E5%8D%87%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。</p><p>下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。</p><blockquote><p>原文链接：<a href="http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/" target="_blank" rel="noopener">http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/</a></p></blockquote><a id="more"></a><h2 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h2><p>因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例ShadowSocket</span></span><br><span class="line">systemProp<span class="selector-class">.http</span><span class="selector-class">.proxyHost</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">systemProp<span class="selector-class">.http</span><span class="selector-class">.proxyPort</span>=<span class="number">1080</span></span><br><span class="line">systemProp<span class="selector-class">.https</span><span class="selector-class">.proxyHost</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">systemProp<span class="selector-class">.https</span><span class="selector-class">.proxyPort</span>=<span class="number">1080</span></span><br></pre></td></tr></table></figure><p>如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。</p><h2 id="更新gradle设置离线状态"><a class="markdownIt-Anchor" href="#更新gradle设置离线状态"></a> 更新Gradle,设置离线状态</h2><p>Android Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。</p><p><img src="http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg" alt="image"></p><p>如果需要使用命令行编译，可以配置—daemon —parallel —offline。</p><p><img src="http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg" alt="image"></p><h2 id="守护进程并行编译"><a class="markdownIt-Anchor" href="#守护进程并行编译"></a> 守护进程，并行编译</h2><p>在项目的根目录中有一个gradle.properties 文件，<br><img src="http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg" alt="image"></p><p>org.gradle.daemon=true 就是让你让你编译时使用守护进程。</p><p>org.gradle.parallel=true 使用并行编译</p><p>org.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配</p><p>-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配</p><p>当然你也可以在下面的目录下面创建<code>gradle.properties</code>,来配置全局的属性，在所有的项目中起作用。<br><code>/home//.gradle/</code>(Linux)<br><code>/Users//.gradle/</code>(Mac)<br><code>C:\Users\\.gradle</code>(Windows)<br>当然也可以修改xxx\android studio 安装目录\bin\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。</p><p>开发使用SDK=21</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">android</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">...</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">productFlavors</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">dev</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">minSdkVersion</span> <span class="string">21</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">release</span> <span class="string">&#123;</span></span><br><span class="line">            <span class="attr">minSdkVersion</span> <span class="string">14</span></span><br><span class="line">        <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><p>我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。</p><h2 id="使用aar依赖"><a class="markdownIt-Anchor" href="#使用aar依赖"></a> 使用aar依赖</h2><p>我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">   <span class="keyword">repositories</span> &#123;</span><br><span class="line">      jcenter()</span><br><span class="line">      <span class="keyword">flatDir</span> &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span>(name:<span class="string">'cards'</span>, ext:<span class="string">'aar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当然也可以这样添加</strong></p><p>我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">configurations</span>.maybeCreate(<span class="string">"default"</span>)</span><br><span class="line"><span class="keyword">artifacts</span>.add(<span class="string">"default"</span>, <span class="keyword">file</span>(<span class="string">'mylibrary-debug.aar'</span>))</span><br></pre></td></tr></table></figure><p>然后在我们的Module 中这样引用即可。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">':mylibrary-debug'</span>)</span><br></pre></td></tr></table></figure><h2 id="dexoptions"><a class="markdownIt-Anchor" href="#dexoptions"></a> dexOptions</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.0.0-alpha9'</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span></span><br><span class="line">org.gradle.<span class="attribute">jvmargs</span>=-Xmx4g -XX:<span class="attribute">MaxPermSize</span>=512m</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">dexOptions</span> &#123;</span><br><span class="line">    <span class="attribute">preDexLibraries</span> <span class="literal">true</span></span><br><span class="line">    javaMaxHeapSize <span class="string">"3g"</span></span><br><span class="line">    incremental <span class="literal">true</span></span><br><span class="line">    dexInProcess = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9" target="_blank" rel="noopener">android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow</a></p><p><a href="http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst" target="_blank" rel="noopener">How to manually include external aar package using new Gradle Android Build System | Stack Overflow</a></p><p><a href="http://www.devtf.cn/?p=585" target="_blank" rel="noopener">优化android studio编译效率的方法 | 开发技术前线</a></p><p><a href="http://blog.isming.me/2015/03/18/android-build-speed-up/" target="_blank" rel="noopener">加速Android Studio/Gradle构建 | 码农明明桑</a></p><p><a href="http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build" target="_blank" rel="noopener">android - Adding local .aar files to my gradle build | Stack Overflow</a></p><p><a href="http://stormzhang.com/android/2015/03/01/android-reference-local-aar/" target="_blank" rel="noopener">Android模块化编程之引用本地的aar | Stormzhang</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程中的命名设计那点事</title>
      <link href="/2016/05/30/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E8%AE%BE%E8%AE%A1%E9%82%A3%E7%82%B9%E4%BA%8B/"/>
      <url>/2016/05/30/%E7%BC%96%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E8%AE%BE%E8%AE%A1%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="编程中的命名设计那点事"><a class="markdownIt-Anchor" href="#编程中的命名设计那点事"></a> 编程中的命名设计那点事</h1><p>在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In <span class="keyword">the</span> beginning was <span class="keyword">the</span> Word, <span class="keyword">and</span> <span class="keyword">the</span> Word was <span class="keyword">with</span> God, <span class="keyword">and</span> <span class="keyword">the</span> Word was God</span><br><span class="line">太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)</span><br></pre></td></tr></table></figure><a id="more"></a><p>在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。</p><p>好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。</p><p>为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。</p><h2 id="类型命名类接口和结构"><a class="markdownIt-Anchor" href="#类型命名类接口和结构"></a> 类型命名(类，接口，和结构)</h2><h3 id="名字应该尽量采用名词"><a class="markdownIt-Anchor" href="#名字应该尽量采用名词"></a> 名字应该尽量采用名词</h3><p>Bad:           Happy<br>Good:          Happiness</p><h3 id="不要使用类似名字空间的前缀"><a class="markdownIt-Anchor" href="#不要使用类似名字空间的前缀"></a> 不要使用类似名字空间的前缀</h3><p>Bad:           SystemOnlineMessage<br>Good:          System::Online:Message</p><h3 id="形容词不要用太多能描述清楚就行"><a class="markdownIt-Anchor" href="#形容词不要用太多能描述清楚就行"></a> 形容词不要用太多，能描述清楚就行</h3><p>Bad:           IAbstractFactoryPatternBase<br>Good:          IFactory</p><h3 id="在类型中不要使用manager-或则-helper-或则其他没意义的单词"><a class="markdownIt-Anchor" href="#在类型中不要使用manager-或则-helper-或则其他没意义的单词"></a> 在类型中不要使用Manager 或则 Helper 或则其他没意义的单词</h3><p>如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。</p><p>Bad:           ConnectionManager<br>XmlHelper<br>Good:          Connection<br>XmlDocument, XmlNode, etc.</p><h3 id="如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名"><a class="markdownIt-Anchor" href="#如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名"></a> 如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名</h3><p>Bad:           IncomingMessageQueue<br>CharacterArray<br>SpatialOrganizer<br>Good:          Mailbox<br>String<br>Map</p><h3 id="如果你使用类比你就应该一致的使用它们"><a class="markdownIt-Anchor" href="#如果你使用类比你就应该一致的使用它们"></a> 如果你使用类比，你就应该一致的使用它们</h3><p>Bad:           Mailbox,DestinationID<br>Good:          Mailbox,Address</p><h2 id="函数方法和过程"><a class="markdownIt-Anchor" href="#函数方法和过程"></a> 函数(方法和过程)</h2><h3 id="简洁"><a class="markdownIt-Anchor" href="#简洁"></a> 简洁</h3><p>Bad:           list.GetNumberOfItems()<br>Good:          list.Count()</p><h3 id="不要太简洁"><a class="markdownIt-Anchor" href="#不要太简洁"></a> 不要太简洁</h3><p>Bad:           list.Verify()<br>Good:          list.ContainsNull()</p><h3 id="避免缩写"><a class="markdownIt-Anchor" href="#避免缩写"></a> 避免缩写</h3><p>Bad:           list.Srt()<br>Good:          list.Sort()</p><h3 id="对于完成某件事情的函数使用动词"><a class="markdownIt-Anchor" href="#对于完成某件事情的函数使用动词"></a> 对于完成某件事情的函数使用动词</h3><p>Bad:           obj.RefCount();<br>Good:          list.Clear();<br>list.Sort();<br>obj.AddReference();</p><h3 id="对于返回布尔型的函数使用类似提问的方式"><a class="markdownIt-Anchor" href="#对于返回布尔型的函数使用类似提问的方式"></a> 对于返回布尔型的函数，使用类似提问的方式</h3><p>Bad:           list.Empty();<br>Good:          list.IsEmpty();<br>list.Contains(item);</p><h3 id="对于只是返回属性而不改变状态的函数则使用名词"><a class="markdownIt-Anchor" href="#对于只是返回属性而不改变状态的函数则使用名词"></a> 对于只是返回属性，而不改变状态的函数则使用名词</h3><p>Bad:           list.GetCount();<br>Good:          list.Count();</p><h3 id="不要在函数名字中重复参数的名称"><a class="markdownIt-Anchor" href="#不要在函数名字中重复参数的名称"></a> 不要在函数名字中重复参数的名称</h3><p>Bad:           list.AddItem(item);<br>handler.ReceiveMessage(msg);<br>Good:          list.Add(item);<br>handler.Receive(msg);</p><h3 id="不要方法的名字中重复此方法的类的名称"><a class="markdownIt-Anchor" href="#不要方法的名字中重复此方法的类的名称"></a> 不要方法的名字中重复此方法的类的名称</h3><p>Bad:           list.AddToList(item);<br>Good:          list.Add(item);</p><h3 id="不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别"><a class="markdownIt-Anchor" href="#不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别"></a> 不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别</h3><p>Bad:           list.GetCountInt();<br>Good:          list.GetCount();<br>message.GetIntValue();<br>message.GetFloatValue();</p><h3 id="不要名字中使用and-或则-or"><a class="markdownIt-Anchor" href="#不要名字中使用and-或则-or"></a> 不要名字中使用And 或则 Or</h3><p>如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。<br>如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他<br>Bad:           mail.VerifyAddressAndSendStatus();<br>Good:          mail.VerifyAddress();<br>mail.SendStatus();</p><p>本文为转载：<a href="http://coolshell.cn/articles/990.html" target="_blank" rel="noopener">查看原文</a></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> 命名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebView调用本地的图片选择</title>
      <link href="/2016/05/19/WebView%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/"/>
      <url>/2016/05/19/WebView%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="android中webview调用本地图片选择器"><a class="markdownIt-Anchor" href="#android中webview调用本地图片选择器"></a> Android中WebView调用本地图片选择器</h2><hr><p>默认的情况下WebView是不能调用本地图片选择器的，Android的默认浏览器是支持的，因此我可以断定这是完全能做到的</p><p>在做的过程中，确实遇到了一些问题，开始以为是特殊手机原因，后来调查才确定是AndroidSDK的版本问题</p><ul><li>Android 3.0 以前的版本</li><li>Android 3.x 版本</li><li>Android 4.x 版本</li><li>Android 5.x 版本</li></ul><a id="more"></a><blockquote><p>主要区别：为 5.x版本以前为ValueCallback&lt;Uri&gt;<br>从5.x版本返回的是ValueCallback&lt;Uri[]&gt;<br>因此只用单独一种的话可能会有一些版本不能用，曾经我就犯过这样的错误</p></blockquote><p>具体实现方式，请看下面的代码部分：</p><h3 id="mainactivityjava-代码如下"><a class="markdownIt-Anchor" href="#mainactivityjava-代码如下"></a> MainActivity.java 代码如下：</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>  ValueCallback&lt;Uri&gt; mUploadMessage;</span><br><span class="line"><span class="keyword">public</span> ValueCallback&lt;Uri[]&gt; mUploadMessageForAndroid5;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FILECHOOSER_RESULTCODE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FILECHOOSER_RESULTCODE_FOR_ANDORID_5 = <span class="number">2</span>;</span><br><span class="line">ProgressDialog progressBar;</span><br><span class="line"><span class="keyword">private</span> WebView mWebView;</span><br><span class="line"><span class="keyword">private</span> ImageButton btnBack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String remoteUrl = <span class="string">"http://kefu.easemob.com/webim/im.html?tenantId=35"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>) <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mWebView = (WebView) findViewById(R.id.webview);</span><br><span class="line">    btnBack = (ImageButton) findViewById(R.id.back);</span><br><span class="line">    btnBack.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">finish();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    progressBar = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">    progressBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);</span><br><span class="line">    mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">    mWebView.getSettings().setAppCacheEnabled(<span class="keyword">false</span>);</span><br><span class="line">    mWebView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line">    mWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</span><br><span class="line">    <span class="keyword">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;</span><br><span class="line">    mWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    mWebView.loadUrl(remoteUrl);</span><br><span class="line">    mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">handler</span>.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">    view.loadUrl(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(newProgress == <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="keyword">handler</span>.sendEmptyMessage(<span class="number">1</span>);<span class="comment">//如果全部载入，隐藏进度对话框</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>.onProgressChanged(view, newProgress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展支持alert事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> onJsAlert(WebView view, String url, String message,</span><br><span class="line">    JsResult result) &#123;</span><br><span class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(view.getContext());</span><br><span class="line">    builder.setTitle(<span class="string">"提示"</span>).setMessage(message).setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">null</span>);</span><br><span class="line">    builder.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">    builder.setIcon(R.drawable.ic_launcher);</span><br><span class="line">    AlertDialog dialog = builder.create();</span><br><span class="line">    dialog.show();</span><br><span class="line">    result.confirm();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展浏览器上传文件</span></span><br><span class="line">    <span class="comment">//3.0++版本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType)</span></span>&#123;</span><br><span class="line">    openFileChooserImpl(uploadMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.0--版本</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class="line">    openFileChooserImpl(uploadMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">openFileChooser</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span></span>&#123;</span><br><span class="line">    openFileChooserImpl(uploadMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For Android &gt; 5.0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onShowFileChooser</span><span class="params">(WebView webView, ValueCallback&lt;Uri[]&gt; uploadMsg, WebChromeClient.FileChooserParams fileChooserParams)</span></span>&#123;</span><br><span class="line">    openFileChooserImplForAndroid5(uploadMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">openFileChooserImpl</span><span class="params">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class="line">    mUploadMessage = uploadMsg;</span><br><span class="line">    Intent i = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">    i.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    startActivityForResult(Intent.createChooser(i, <span class="string">"File Chooser"</span>), FILECHOOSER_RESULTCODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">openFileChooserImplForAndroid5</span><span class="params">(ValueCallback&lt;Uri[]&gt; uploadMsg)</span></span>&#123;</span><br><span class="line">    mUploadMessageForAndroid5 = uploadMsg;</span><br><span class="line">    Intent contentSelectionIntent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    contentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">    contentSelectionIntent.setType(<span class="string">"image/*"</span>);</span><br><span class="line"></span><br><span class="line">    Intent chooserIntent = <span class="keyword">new</span> Intent(Intent.ACTION_CHOOSER);</span><br><span class="line">    chooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);</span><br><span class="line">    chooserIntent.putExtra(Intent.EXTRA_TITLE, <span class="string">"Image Chooser"</span>);</span><br><span class="line">    startActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE_FOR_ANDORID_5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mWebView.canGoBack() &amp;&amp; event.getKeyCode() == KeyEvent.KEYCODE_BACK)&#123;</span><br><span class="line">    <span class="comment">//获取历史列表</span></span><br><span class="line">    WebBackForwardList mWebBackForwardList = mWebView.copyBackForwardList();</span><br><span class="line">    <span class="comment">//判断当前历史列表是否最顶端，其实canGoBack已经判断过</span></span><br><span class="line">    <span class="keyword">if</span>(mWebBackForwardList.getCurrentIndex() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    mWebView.goBack();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onKeyDown</span><span class="params">(keyCode, event)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == FILECHOOSER_RESULTCODE)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mUploadMessage)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    Uri result = intent == <span class="keyword">null</span> || resultCode != RESULT_OK ? <span class="keyword">null</span> : intent.getData();</span><br><span class="line">    mUploadMessage.onReceiveValue(result);</span><br><span class="line">    mUploadMessage = <span class="keyword">null</span>;</span><br><span class="line">    &#125;<span class="function"><span class="keyword">else</span> <span class="title">if</span><span class="params">(requestCode == FILECHOOSER_RESULTCODE_FOR_ANDORID_5)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">null</span> == mUploadMessageForAndroid5)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    Uri result = (intent == <span class="keyword">null</span> || resultCode != RESULT_OK) ? <span class="keyword">null</span>: intent.getData();</span><br><span class="line">    <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">    mUploadMessageForAndroid5.onReceiveValue(<span class="keyword">new</span> Uri[]&#123;result&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    mUploadMessageForAndroid5.onReceiveValue(<span class="keyword">new</span> Uri[]&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    mUploadMessageForAndroid5 = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler <span class="keyword">handler</span> = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;<span class="comment">//定义一个Handler， 用于处理下载线程与UI间通讯</span></span><br><span class="line">    <span class="keyword">if</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">    <span class="keyword">switch</span>(msg.what)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    progressBar.show();<span class="comment">//显示进度框</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    progressBar.hide();<span class="comment">//隐藏进度对话框不可使用dismiss()、cancel()，否则再次调用show()时,显示的对话框小圆圈不会动</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="activity_mainxml的代码"><a class="markdownIt-Anchor" href="#activity_mainxml的代码"></a> activity_main.xml的代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/back"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:drawable/ic_delete"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"WebViewDemo"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/webview"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最后在androidmanifestxml中不要忘记权限"><a class="markdownIt-Anchor" href="#最后在androidmanifestxml中不要忘记权限"></a> 最后在AndroidManifest.xml中不要忘记权限</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span><br><span class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span><br><span class="line">&lt;uses-permission android:<span class="attribute">name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span><br></pre></td></tr></table></figure><p>什么？你告诉我你不喜欢自己写？好吧，我提供源码下载。</p><p><a href="http://7xpj58.com1.z0.glb.clouddn.com/WebViewTest.zip" target="_blank" rel="noopener">Demo源码下载</a></p><p>到此结束，欢迎提供bug和意见！</p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令记录</title>
      <link href="/2016/05/18/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2016/05/18/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo常用命令记录"><a class="markdownIt-Anchor" href="#hexo常用命令记录"></a> Hexo常用命令记录</h1><p>由于博客是用的hexo, 方便以后忘记来此查询</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> #新建文章</span><br><span class="line">hexo new<span class="built_in"> page </span><span class="string">"pageName"</span> #新建页面</span><br><span class="line">hexo new draft <span class="string">"draftName"</span> #新建草稿</span><br><span class="line">hexo publish draft <span class="string">"draftName"</span> #草稿变成正文</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo<span class="built_in"> server </span>#开启预览(可以访问localhost:4000)</span><br><span class="line">hexo deploy #部署到github, gitcafe等</span><br></pre></td></tr></table></figure><p>简写命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">hexo</span> n <span class="comment">#新生成</span></span><br><span class="line">hexo g <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo s <span class="comment">#开启预览(可以访问localhost:4000)</span></span><br><span class="line">hexo d <span class="comment">#部署</span></span><br><span class="line"></span><br><span class="line">hexo d -g <span class="comment">#重新生成并发布</span></span><br></pre></td></tr></table></figure><p><a href="http://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android,iOS打开手机QQ与指定聊天界面</title>
      <link href="/2016/04/15/Android-iOS%E6%89%93%E5%BC%80%E6%89%8B%E6%9C%BAQQ%E4%B8%8E%E6%8C%87%E5%AE%9A%E8%81%8A%E5%A4%A9%E7%95%8C%E9%9D%A2/"/>
      <url>/2016/04/15/Android-iOS%E6%89%93%E5%BC%80%E6%89%8B%E6%9C%BAQQ%E4%B8%8E%E6%8C%87%E5%AE%9A%E8%81%8A%E5%A4%A9%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="androidios打开手机qq与指定聊天界面"><a class="markdownIt-Anchor" href="#androidios打开手机qq与指定聊天界面"></a> Android，iOS打开手机QQ与指定聊天界面</h3><blockquote><p>在浏览器中可以通过JS代码打开QQ并弹出聊天界面，一般作为客服QQ使用。<br>在移动端可以使用schema模式来启动手机QQ。</p></blockquote> <a id="more"></a><h4 id="android"><a class="markdownIt-Anchor" href="#android"></a> Android:</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String url=<span class="string">"mqqwpa://im/chat?chat_type=wpa&amp;uin=123456"</span><span class="comment">;  </span></span><br><span class="line">startActivity(<span class="name">new</span> Intent(<span class="name">Intent</span>.ACTION_VIEW, Uri.parse(<span class="name">url</span>)))<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="ios"><a class="markdownIt-Anchor" href="#ios"></a> iOS:</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIWebView</span> *webView = [[<span class="built_in">UIWebView</span> alloc] initWithFrame:<span class="built_in">CGRectZero</span>];  </span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"mqq://im/chat?chat_type=wpa&amp;uin=123456&amp;version=1&amp;src_type=web"</span>];  </span><br><span class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];  </span><br><span class="line">webView.delegate = <span class="keyword">self</span>;  </span><br><span class="line">[webView loadRequest:request];  </span><br><span class="line">[<span class="keyword">self</span>.view addSubview:webView];</span><br></pre></td></tr></table></figure><h4 id="浏览器"><a class="markdownIt-Anchor" href="#浏览器"></a> 浏览器：</h4><pre class="highlight"><code class>&lt;a target=&quot;_blank&quot; href=&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=123456&amp;site=qq&amp;menu=yes&quot;&gt;click here&lt;/a&gt;  </code></pre>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> qq </tag>
            
            <tag> intent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看被删的微信好友</title>
      <link href="/2016/04/01/%E6%9F%A5%E7%9C%8B%E8%A2%AB%E5%88%A0%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B/"/>
      <url>/2016/04/01/%E6%9F%A5%E7%9C%8B%E8%A2%AB%E5%88%A0%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%A5%BD%E5%8F%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="查看被删的微信好友"><a class="markdownIt-Anchor" href="#查看被删的微信好友"></a> 查看被删的微信好友</h2><a id="more"></a><p><a href="https://github.com/0x5e/wechat-deleted-friends" target="_blank" rel="noopener">来自这里</a></p><blockquote><p>原理：</p></blockquote><p>查看被删的微信好友<br>原理就是新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的)<br>用的是微信网页版的接口<br>查询结果可能会引起一些心理上的不适,请小心使用.<br>Mac OS用法: 启动Terminal</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> wechat.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>下面是wechat.py的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> urllib <span class="keyword">import</span> urlencode, quote_plus</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode, quote_plus</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib2 <span class="keyword">as</span> wdf_urllib</span><br><span class="line">    <span class="keyword">from</span> cookielib <span class="keyword">import</span> CookieJar</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">import</span> urllib.request <span class="keyword">as</span> wdf_urllib</span><br><span class="line">    <span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"></span><br><span class="line">DEBUG = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">MAX_GROUP_NUM = <span class="number">35</span>  <span class="comment"># 每组人数</span></span><br><span class="line">INTERFACE_CALLING_INTERVAL = <span class="number">20</span>  <span class="comment"># 接口调用时间间隔, 间隔太短容易出现"操作太频繁", 会被限制操作半小时左右</span></span><br><span class="line">MAX_PROGRESS_LEN = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">QRImagePath = os.path.join(os.getcwd(), <span class="string">'qrcode.jpg'</span>)</span><br><span class="line"></span><br><span class="line">tip = <span class="number">0</span></span><br><span class="line">uuid = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">base_uri = <span class="string">''</span></span><br><span class="line">redirect_uri = <span class="string">''</span></span><br><span class="line">push_uri = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">skey = <span class="string">''</span></span><br><span class="line">wxsid = <span class="string">''</span></span><br><span class="line">wxuin = <span class="string">''</span></span><br><span class="line">pass_ticket = <span class="string">''</span></span><br><span class="line">deviceId = <span class="string">'e000000000000000'</span></span><br><span class="line"></span><br><span class="line">BaseRequest = &#123;&#125;</span><br><span class="line"></span><br><span class="line">ContactList = []</span><br><span class="line">My = []</span><br><span class="line">SyncKey = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    xrange</span><br><span class="line">    range = xrange</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="comment"># python 3</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">responseState</span><span class="params">(func, BaseResponse)</span>:</span></span><br><span class="line">    ErrMsg = BaseResponse[<span class="string">'ErrMsg'</span>]</span><br><span class="line">    Ret = BaseResponse[<span class="string">'Ret'</span>]</span><br><span class="line">    <span class="keyword">if</span> DEBUG <span class="keyword">or</span> Ret != <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'func: %s, Ret: %d, ErrMsg: %s'</span> % (func, Ret, ErrMsg))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Ret != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRequest</span><span class="params">(url, data=None)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = data.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> wdf_urllib.Request(url=url, data=data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUUID</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> uuid</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://login.weixin.qq.com/jslogin'</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'appid'</span>: <span class="string">'wx782c26e4c19acffb'</span>,</span><br><span class="line">        <span class="string">'fun'</span>: <span class="string">'new'</span>,</span><br><span class="line">        <span class="string">'lang'</span>: <span class="string">'zh_CN'</span>,</span><br><span class="line">        <span class="string">'_'</span>: int(time.time()),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=urlencode(params))</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># window.QRLogin.code = 200; window.QRLogin.uuid = "oZwt_bFfRg==";</span></span><br><span class="line">    regx = <span class="string">r'window.QRLogin.code = (\d+); window.QRLogin.uuid = "(\S+?)"'</span></span><br><span class="line">    pm = re.search(regx, data)</span><br><span class="line"></span><br><span class="line">    code = pm.group(<span class="number">1</span>)</span><br><span class="line">    uuid = pm.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> code == <span class="string">'200'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showQRImage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tip</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://login.weixin.qq.com/qrcode/'</span> + uuid</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'t'</span>: <span class="string">'webwx'</span>,</span><br><span class="line">        <span class="string">'_'</span>: int(time.time()),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=urlencode(params))</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line"></span><br><span class="line">    tip = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    f = open(QRImagePath, <span class="string">'wb'</span>)</span><br><span class="line">    f.write(response.read())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sys.platform.find(<span class="string">'darwin'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        subprocess.call([<span class="string">'open'</span>, QRImagePath])</span><br><span class="line">    <span class="keyword">elif</span> sys.platform.find(<span class="string">'linux'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        subprocess.call([<span class="string">'xdg-open'</span>, QRImagePath])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.startfile(QRImagePath)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请使用微信扫描二维码以登录'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waitForLogin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> tip, base_uri, redirect_uri, push_uri</span><br><span class="line"></span><br><span class="line">    url = <span class="string">'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&amp;uuid=%s&amp;_=%s'</span> % (</span><br><span class="line">        tip, uuid, int(time.time()))</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># window.code=500;</span></span><br><span class="line">    regx = <span class="string">r'window.code=(\d+);'</span></span><br><span class="line">    pm = re.search(regx, data)</span><br><span class="line"></span><br><span class="line">    code = pm.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> code == <span class="string">'201'</span>:  <span class="comment"># 已扫描</span></span><br><span class="line">        print(<span class="string">'成功扫描,请在手机上点击确认以登录'</span>)</span><br><span class="line">        tip = <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> code == <span class="string">'200'</span>:  <span class="comment"># 已登录</span></span><br><span class="line">        print(<span class="string">'正在登录...'</span>)</span><br><span class="line">        regx = <span class="string">r'window.redirect_uri="(\S+?)";'</span></span><br><span class="line">        pm = re.search(regx, data)</span><br><span class="line">        redirect_uri = pm.group(<span class="number">1</span>) + <span class="string">'&amp;fun=new'</span></span><br><span class="line">        base_uri = redirect_uri[:redirect_uri.rfind(<span class="string">'/'</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)</span></span><br><span class="line">        services = [</span><br><span class="line">            (<span class="string">'wx2.qq.com'</span>, <span class="string">'webpush2.weixin.qq.com'</span>),</span><br><span class="line">            (<span class="string">'qq.com'</span>, <span class="string">'webpush.weixin.qq.com'</span>),</span><br><span class="line">            (<span class="string">'web1.wechat.com'</span>, <span class="string">'webpush1.wechat.com'</span>),</span><br><span class="line">            (<span class="string">'web2.wechat.com'</span>, <span class="string">'webpush2.wechat.com'</span>),</span><br><span class="line">            (<span class="string">'wechat.com'</span>, <span class="string">'webpush.wechat.com'</span>),</span><br><span class="line">            (<span class="string">'web1.wechatapp.com'</span>, <span class="string">'webpush1.wechatapp.com'</span>),</span><br><span class="line">        ]</span><br><span class="line">        push_uri = base_uri</span><br><span class="line">        <span class="keyword">for</span> (searchUrl, pushUrl) <span class="keyword">in</span> services:</span><br><span class="line">            <span class="keyword">if</span> base_uri.find(searchUrl) &gt;= <span class="number">0</span>:</span><br><span class="line">                push_uri = <span class="string">'https://%s/cgi-bin/mmwebwx-bin'</span> % pushUrl</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># closeQRImage</span></span><br><span class="line">        <span class="keyword">if</span> sys.platform.find(<span class="string">'darwin'</span>) &gt;= <span class="number">0</span>:  <span class="comment"># for OSX with Preview</span></span><br><span class="line">            os.system(<span class="string">"osascript -e 'quit app \"Preview\"'"</span>)</span><br><span class="line">    <span class="keyword">elif</span> code == <span class="string">'408'</span>:  <span class="comment"># 超时</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># elif code == '400' or code == '500':</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> skey, wxsid, wxuin, pass_ticket, BaseRequest</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=redirect_uri)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    doc = xml.dom.minidom.parseString(data)</span><br><span class="line">    root = doc.documentElement</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> root.childNodes:</span><br><span class="line">        <span class="keyword">if</span> node.nodeName == <span class="string">'skey'</span>:</span><br><span class="line">            skey = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">        <span class="keyword">elif</span> node.nodeName == <span class="string">'wxsid'</span>:</span><br><span class="line">            wxsid = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">        <span class="keyword">elif</span> node.nodeName == <span class="string">'wxuin'</span>:</span><br><span class="line">            wxuin = node.childNodes[<span class="number">0</span>].data</span><br><span class="line">        <span class="keyword">elif</span> node.nodeName == <span class="string">'pass_ticket'</span>:</span><br><span class="line">            pass_ticket = node.childNodes[<span class="number">0</span>].data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,</span></span><br><span class="line">    <span class="comment"># wxuin, pass_ticket))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> all((skey, wxsid, wxuin, pass_ticket)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    BaseRequest = &#123;</span><br><span class="line">        <span class="string">'Uin'</span>: int(wxuin),</span><br><span class="line">        <span class="string">'Sid'</span>: wxsid,</span><br><span class="line">        <span class="string">'Skey'</span>: skey,</span><br><span class="line">        <span class="string">'DeviceID'</span>: deviceId,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webwxinit</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    url = base_uri + \</span><br><span class="line">        <span class="string">'/webwxinit?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class="line">            pass_ticket, skey, int(time.time()))</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'BaseRequest'</span>: BaseRequest</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        f = open(os.path.join(os.getcwd(), <span class="string">'webwxinit.json'</span>), <span class="string">'wb'</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    data = data.decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> ContactList, My, SyncKey</span><br><span class="line">    dic = json.loads(data)</span><br><span class="line">    ContactList = dic[<span class="string">'ContactList'</span>]</span><br><span class="line">    My = dic[<span class="string">'User'</span>]</span><br><span class="line">    SyncKey = dic[<span class="string">'SyncKey'</span>]</span><br><span class="line"></span><br><span class="line">    state = responseState(<span class="string">'webwxinit'</span>, dic[<span class="string">'BaseResponse'</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webwxgetcontact</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    url = base_uri + \</span><br><span class="line">        <span class="string">'/webwxgetcontact?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class="line">            pass_ticket, skey, int(time.time()))</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url)</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        f = open(os.path.join(os.getcwd(), <span class="string">'webwxgetcontact.json'</span>), <span class="string">'wb'</span>)</span><br><span class="line">        f.write(data)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    data = data.decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    dic = json.loads(data)</span><br><span class="line">    MemberList = dic[<span class="string">'MemberList'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 倒序遍历,不然删除的时候出问题..</span></span><br><span class="line">    SpecialUsers = [<span class="string">"newsapp"</span>, <span class="string">"fmessage"</span>, <span class="string">"filehelper"</span>, <span class="string">"weibo"</span>, <span class="string">"qqmail"</span>, <span class="string">"tmessage"</span>, <span class="string">"qmessage"</span>, <span class="string">"qqsync"</span>, <span class="string">"floatbottle"</span>, <span class="string">"lbsapp"</span>, <span class="string">"shakeapp"</span>, <span class="string">"medianote"</span>, <span class="string">"qqfriend"</span>, <span class="string">"readerapp"</span>, <span class="string">"blogapp"</span>, <span class="string">"facebookapp"</span>, <span class="string">"masssendapp"</span>,</span><br><span class="line">                    <span class="string">"meishiapp"</span>, <span class="string">"feedsapp"</span>, <span class="string">"voip"</span>, <span class="string">"blogappweixin"</span>, <span class="string">"weixin"</span>, <span class="string">"brandsessionholder"</span>, <span class="string">"weixinreminder"</span>, <span class="string">"wxid_novlwrv3lqwv11"</span>, <span class="string">"gh_22b87fa7cb3c"</span>, <span class="string">"officialaccounts"</span>, <span class="string">"notification_messages"</span>, <span class="string">"wxitil"</span>, <span class="string">"userexperience_alarm"</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(MemberList) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        Member = MemberList[i]</span><br><span class="line">        <span class="keyword">if</span> Member[<span class="string">'VerifyFlag'</span>] &amp; <span class="number">8</span> != <span class="number">0</span>:  <span class="comment"># 公众号/服务号</span></span><br><span class="line">            MemberList.remove(Member)</span><br><span class="line">        <span class="keyword">elif</span> Member[<span class="string">'UserName'</span>] <span class="keyword">in</span> SpecialUsers:  <span class="comment"># 特殊账号</span></span><br><span class="line">            MemberList.remove(Member)</span><br><span class="line">        <span class="keyword">elif</span> Member[<span class="string">'UserName'</span>].find(<span class="string">'@@'</span>) != <span class="number">-1</span>:  <span class="comment"># 群聊</span></span><br><span class="line">            MemberList.remove(Member)</span><br><span class="line">        <span class="keyword">elif</span> Member[<span class="string">'UserName'</span>] == My[<span class="string">'UserName'</span>]:  <span class="comment"># 自己</span></span><br><span class="line">            MemberList.remove(Member)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> MemberList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createChatroom</span><span class="params">(UserNames)</span>:</span></span><br><span class="line">    MemberList = [&#123;<span class="string">'UserName'</span>: UserName&#125; <span class="keyword">for</span> UserName <span class="keyword">in</span> UserNames]</span><br><span class="line"></span><br><span class="line">    url = base_uri + \</span><br><span class="line">        <span class="string">'/webwxcreatechatroom?pass_ticket=%s&amp;r=%s'</span> % (</span><br><span class="line">            pass_ticket, int(time.time()))</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'BaseRequest'</span>: BaseRequest,</span><br><span class="line">        <span class="string">'MemberCount'</span>: len(MemberList),</span><br><span class="line">        <span class="string">'MemberList'</span>: MemberList,</span><br><span class="line">        <span class="string">'Topic'</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    dic = json.loads(data)</span><br><span class="line">    ChatRoomName = dic[<span class="string">'ChatRoomName'</span>]</span><br><span class="line">    MemberList = dic[<span class="string">'MemberList'</span>]</span><br><span class="line">    DeletedList = []</span><br><span class="line">    BlockedList = []</span><br><span class="line">    <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">        <span class="keyword">if</span> Member[<span class="string">'MemberStatus'</span>] == <span class="number">4</span>:  <span class="comment"># 被对方删除了</span></span><br><span class="line">            DeletedList.append(Member[<span class="string">'UserName'</span>])</span><br><span class="line">        <span class="keyword">elif</span> Member[<span class="string">'MemberStatus'</span>] == <span class="number">3</span>:  <span class="comment"># 被加入黑名单</span></span><br><span class="line">            BlockedList.append(Member[<span class="string">'UserName'</span>])</span><br><span class="line"></span><br><span class="line">    state = responseState(<span class="string">'createChatroom'</span>, dic[<span class="string">'BaseResponse'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ChatRoomName, DeletedList, BlockedList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteMember</span><span class="params">(ChatRoomName, UserNames)</span>:</span></span><br><span class="line">    url = base_uri + \</span><br><span class="line">        <span class="string">'/webwxupdatechatroom?fun=delmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'BaseRequest'</span>: BaseRequest,</span><br><span class="line">        <span class="string">'ChatRoomName'</span>: ChatRoomName,</span><br><span class="line">        <span class="string">'DelMemberList'</span>: <span class="string">','</span>.join(UserNames),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    dic = json.loads(data)</span><br><span class="line"></span><br><span class="line">    state = responseState(<span class="string">'deleteMember'</span>, dic[<span class="string">'BaseResponse'</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addMember</span><span class="params">(ChatRoomName, UserNames)</span>:</span></span><br><span class="line">    url = base_uri + \</span><br><span class="line">        <span class="string">'/webwxupdatechatroom?fun=addmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'BaseRequest'</span>: BaseRequest,</span><br><span class="line">        <span class="string">'ChatRoomName'</span>: ChatRoomName,</span><br><span class="line">        <span class="string">'AddMemberList'</span>: <span class="string">','</span>.join(UserNames),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    dic = json.loads(data)</span><br><span class="line">    MemberList = dic[<span class="string">'MemberList'</span>]</span><br><span class="line">    DeletedList = []</span><br><span class="line">    BlockedList = []</span><br><span class="line">    <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">        <span class="keyword">if</span> Member[<span class="string">'MemberStatus'</span>] == <span class="number">4</span>:  <span class="comment"># 被对方删除了</span></span><br><span class="line">            DeletedList.append(Member[<span class="string">'UserName'</span>])</span><br><span class="line">        <span class="keyword">elif</span> Member[<span class="string">'MemberStatus'</span>] == <span class="number">3</span>:  <span class="comment"># 被加入黑名单</span></span><br><span class="line">            BlockedList.append(Member[<span class="string">'UserName'</span>])</span><br><span class="line"></span><br><span class="line">    state = responseState(<span class="string">'addMember'</span>, dic[<span class="string">'BaseResponse'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> DeletedList, BlockedList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syncKey</span><span class="params">()</span>:</span></span><br><span class="line">    SyncKeyItems = [<span class="string">'%s_%s'</span> % (item[<span class="string">'Key'</span>], item[<span class="string">'Val'</span>])</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> SyncKey[<span class="string">'List'</span>]]</span><br><span class="line">    SyncKeyStr = <span class="string">'|'</span>.join(SyncKeyItems)</span><br><span class="line">    <span class="keyword">return</span> SyncKeyStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">syncCheck</span><span class="params">()</span>:</span></span><br><span class="line">    url = push_uri + <span class="string">'/synccheck?'</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'skey'</span>: BaseRequest[<span class="string">'Skey'</span>],</span><br><span class="line">        <span class="string">'sid'</span>: BaseRequest[<span class="string">'Sid'</span>],</span><br><span class="line">        <span class="string">'uin'</span>: BaseRequest[<span class="string">'Uin'</span>],</span><br><span class="line">        <span class="string">'deviceId'</span>: BaseRequest[<span class="string">'DeviceID'</span>],</span><br><span class="line">        <span class="string">'synckey'</span>: syncKey(),</span><br><span class="line">        <span class="string">'r'</span>: int(time.time()),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url + urlencode(params))</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># window.synccheck=&#123;retcode:"0",selector:"2"&#125;</span></span><br><span class="line">    regx = <span class="string">r'window.synccheck=&#123;retcode:"(\d+)",selector:"(\d+)"&#125;'</span></span><br><span class="line">    pm = re.search(regx, data)</span><br><span class="line"></span><br><span class="line">    retcode = pm.group(<span class="number">1</span>)</span><br><span class="line">    selector = pm.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> selector</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">webwxsync</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> SyncKey</span><br><span class="line"></span><br><span class="line">    url = base_uri + <span class="string">'/webwxsync?lang=zh_CN&amp;skey=%s&amp;sid=%s&amp;pass_ticket=%s'</span> % (</span><br><span class="line">        BaseRequest[<span class="string">'Skey'</span>], BaseRequest[<span class="string">'Sid'</span>], quote_plus(pass_ticket))</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'BaseRequest'</span>: BaseRequest,</span><br><span class="line">        <span class="string">'SyncKey'</span>: SyncKey,</span><br><span class="line">        <span class="string">'rr'</span>: ~int(time.time()),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class="line">    request.add_header(<span class="string">'ContentType'</span>, <span class="string">'application/json; charset=UTF-8'</span>)</span><br><span class="line">    response = wdf_urllib.urlopen(request)</span><br><span class="line">    data = response.read().decode(<span class="string">'utf-8'</span>, <span class="string">'replace'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">    dic = json.loads(data)</span><br><span class="line">    SyncKey = dic[<span class="string">'SyncKey'</span>]</span><br><span class="line"></span><br><span class="line">    state = responseState(<span class="string">'webwxsync'</span>, dic[<span class="string">'BaseResponse'</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heartBeatLoop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        selector = syncCheck()</span><br><span class="line">        <span class="keyword">if</span> selector != <span class="string">'0'</span>:</span><br><span class="line">            webwxsync()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"></span><br><span class="line">        opener = wdf_urllib.build_opener(</span><br><span class="line">            wdf_urllib.HTTPCookieProcessor(CookieJar()))</span><br><span class="line">        opener.addheaders = [</span><br><span class="line">            (<span class="string">'User-agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'</span>)]</span><br><span class="line">        wdf_urllib.install_opener(opener)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> getUUID():</span><br><span class="line">        print(<span class="string">'获取uuid失败'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'正在获取二维码图片...'</span>)</span><br><span class="line">    showQRImage()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> waitForLogin() != <span class="string">'200'</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    os.remove(QRImagePath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> login():</span><br><span class="line">        print(<span class="string">'登录失败'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> webwxinit():</span><br><span class="line">        print(<span class="string">'初始化失败'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    MemberList = webwxgetcontact()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'开启心跳线程'</span>)</span><br><span class="line">    thread.start_new_thread(heartBeatLoop, ())</span><br><span class="line"></span><br><span class="line">    MemberCount = len(MemberList)</span><br><span class="line">    print(<span class="string">'通讯录共%s位好友'</span> % MemberCount)</span><br><span class="line"></span><br><span class="line">    ChatRoomName = <span class="string">''</span></span><br><span class="line">    result = []</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> Member <span class="keyword">in</span> MemberList:</span><br><span class="line">        d[Member[<span class="string">'UserName'</span>]] = (Member[<span class="string">'NickName'</span>].encode(</span><br><span class="line">            <span class="string">'utf-8'</span>), Member[<span class="string">'RemarkName'</span>].encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    print(<span class="string">'开始查找...'</span>)</span><br><span class="line">    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, group_num):</span><br><span class="line">        UserNames = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, MAX_GROUP_NUM):</span><br><span class="line">            <span class="keyword">if</span> i * MAX_GROUP_NUM + j &gt;= MemberCount:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            Member = MemberList[i * MAX_GROUP_NUM + j]</span><br><span class="line">            UserNames.append(Member[<span class="string">'UserName'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 新建群组/添加成员</span></span><br><span class="line">        <span class="keyword">if</span> ChatRoomName == <span class="string">''</span>:</span><br><span class="line">            (ChatRoomName, DeletedList, BlockedList) = createChatroom(</span><br><span class="line">                UserNames)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># todo BlockedList 被拉黑列表</span></span><br><span class="line"></span><br><span class="line">        DeletedCount = len(DeletedList)</span><br><span class="line">        <span class="keyword">if</span> DeletedCount &gt; <span class="number">0</span>:</span><br><span class="line">            result += DeletedList</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除成员</span></span><br><span class="line">        deleteMember(ChatRoomName, UserNames)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进度条</span></span><br><span class="line">        progress = MAX_PROGRESS_LEN * (i + <span class="number">1</span>) / group_num</span><br><span class="line">        print(<span class="string">'['</span>, <span class="string">'#'</span> * progress, <span class="string">'-'</span> * (MAX_PROGRESS_LEN - progress), <span class="string">']'</span>, end=<span class="string">' '</span>)</span><br><span class="line">        print(<span class="string">'新发现你被%d人删除'</span> % DeletedCount)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(DeletedCount):</span><br><span class="line">            <span class="keyword">if</span> d[DeletedList[i]][<span class="number">1</span>] != <span class="string">''</span>:</span><br><span class="line">                print(d[DeletedList[i]][<span class="number">0</span>] + <span class="string">'(%s)'</span> % d[DeletedList[i]][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(d[DeletedList[i]][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i != group_num - <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'正在继续查找,请耐心等待...'</span>)</span><br><span class="line">            <span class="comment"># 下一次进行接口调用需要等待的时间</span></span><br><span class="line">            time.sleep(INTERFACE_CALLING_INTERVAL)</span><br><span class="line">    <span class="comment"># todo 删除群组</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'\n结果汇总完毕,20s后可重试...'</span>)</span><br><span class="line">    resultNames = []</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> d[r][<span class="number">1</span>] != <span class="string">''</span>:</span><br><span class="line">            resultNames.append(d[r][<span class="number">0</span>] + <span class="string">'(%s)'</span> % d[r][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resultNames.append(d[r][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'---------- 被删除的好友列表(共%d人) ----------'</span> % len(result))</span><br><span class="line">    <span class="comment"># 过滤emoji</span></span><br><span class="line">    resultNames = map(<span class="keyword">lambda</span> x: re.sub(<span class="string">r'&lt;span.+/span&gt;'</span>, <span class="string">''</span>, x), resultNames)</span><br><span class="line">    <span class="keyword">if</span> len(resultNames):</span><br><span class="line">        print(<span class="string">'\n'</span>.join(resultNames))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"无"</span>)</span><br><span class="line">    print(<span class="string">'---------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows下编码问题修复</span></span><br><span class="line"><span class="comment"># http://blog.csdn.net/heyuxuanzee/article/details/8442718</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnicodeStreamFilter</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        self.target = target</span><br><span class="line">        self.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        self.errors = <span class="string">'replace'</span></span><br><span class="line">        self.encode_to = self.target.encoding</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(s) == str:</span><br><span class="line">            s = s.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)</span><br><span class="line">        self.target.write(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.stdout.encoding == <span class="string">'cp936'</span>:</span><br><span class="line">    sys.stdout = UnicodeStreamFilter(sys.stdout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'本程序的查询结果可能会引起一些心理上的不适,请小心使用...'</span>)</span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">'回车键退出...'</span>)</span><br></pre></td></tr></table></figure><p>按照指示做即可。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> wechat </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Math类的一些常用方法</title>
      <link href="/2016/03/30/Java%E4%B8%ADMath%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2016/03/30/Java%E4%B8%ADMath%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="java中math类的一些常用方法"><a class="markdownIt-Anchor" href="#java中math类的一些常用方法"></a> Java中Math类的一些常用方法</h1><a id="more"></a><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> MathTest&#123;</span><br><span class="line">  public static void main(String args<span class="literal">[]</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * abs求绝对值 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>abs<span class="number">(-10.4)</span>);    <span class="comment">//10.4  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>abs(<span class="number">10.1</span>));     <span class="comment">//10.1  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * ceil天花板的意思，就是返回大的值，注意一些特殊值 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil<span class="number">(-10.1)</span>);   <span class="comment">//-10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil(<span class="number">10.7</span>));    <span class="comment">//11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil<span class="number">(-0.7)</span>);    <span class="comment">//-0.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil(<span class="number">0.0</span>));     <span class="comment">//0.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>ceil<span class="number">(-0.0)</span>);    <span class="comment">//-0.0  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * floor地板的意思，就是返回小的值 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor<span class="number">(-10.1)</span>);  <span class="comment">//-11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(<span class="number">10.7</span>));   <span class="comment">//10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor<span class="number">(-0.7)</span>);   <span class="comment">//-1.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(<span class="number">0.0</span>));    <span class="comment">//0.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor<span class="number">(-0.0)</span>);   <span class="comment">//-0.0  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * max 两个中返回大的值,min和它相反，就不举例了 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(-<span class="number">10.1</span>, -<span class="number">10</span>));   <span class="comment">//-10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(<span class="number">10.7</span>, <span class="number">10</span>));     <span class="comment">//10.7  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(<span class="number">0.0</span>, -<span class="number">0.0</span>));    <span class="comment">//0.0  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * random 取得一个大于或者等于0.0小于不等于1.0的随机数 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>random<span class="literal">()</span>);  <span class="comment">//0.08417657924317234  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>random<span class="literal">()</span>);  <span class="comment">//0.43527904004403717  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * rint 四舍五入，返回double值 </span></span><br><span class="line"><span class="comment">             * 注意.5的时候会取偶数 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint(<span class="number">10.1</span>));    <span class="comment">//10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint(<span class="number">10.7</span>));    <span class="comment">//11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint(<span class="number">11.5</span>));    <span class="comment">//12.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint(<span class="number">10.5</span>));    <span class="comment">//10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint(<span class="number">10.51</span>));   <span class="comment">//11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint<span class="number">(-10.5)</span>);   <span class="comment">//-10.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint<span class="number">(-11.5)</span>);   <span class="comment">//-12.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint<span class="number">(-10.51)</span>);  <span class="comment">//-11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint<span class="number">(-10.6)</span>);   <span class="comment">//-11.0  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>rint<span class="number">(-10.2)</span>);   <span class="comment">//-10.0  </span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">/** </span></span><br><span class="line"><span class="comment">             * round 四舍五入，float时返回int值，double时返回long值 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round(<span class="number">10.1</span>));   <span class="comment">//10  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round(<span class="number">10.7</span>));   <span class="comment">//11  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round(<span class="number">10.5</span>));   <span class="comment">//11  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round(<span class="number">10.51</span>));  <span class="comment">//11  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round<span class="number">(-10.5)</span>);  <span class="comment">//-10  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round<span class="number">(-10.51)</span>); <span class="comment">//-11  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round<span class="number">(-10.6)</span>);  <span class="comment">//-11  </span></span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>round<span class="number">(-10.2)</span>);  <span class="comment">//-10  </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> math </tag>
            
            <tag> round </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom 编辑器快捷键列表汇总整理</title>
      <link href="/2016/03/28/Atom-%E7%BC%96%E8%BE%91%E5%99%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%88%97%E8%A1%A8%E6%B1%87%E6%80%BB%E6%95%B4%E7%90%86/"/>
      <url>/2016/03/28/Atom-%E7%BC%96%E8%BE%91%E5%99%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%88%97%E8%A1%A8%E6%B1%87%E6%80%BB%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="atom-编辑器快捷键列表汇总整理"><a class="markdownIt-Anchor" href="#atom-编辑器快捷键列表汇总整理"></a> Atom 编辑器快捷键列表汇总整理</h1><p>来自Github的Atom 编辑器已经更新到1.0版本了，由于有着 Github  的光环，很多人都在用，下面是网友总结的一些<strong>Atom 快捷键列表</strong>，喜欢高效键盘操作的朋友可以看下。</p><a id="more"></a><h2 id="文件切换"><a class="markdownIt-Anchor" href="#文件切换"></a> 文件切换</h2><p>ctrl-shift-s 保存所有打开的文件<br>ctrl-shift-o 打开目录<br>cmd-\ 显示或隐藏目录树<br>ctrl-0 焦点移到目录树<br>目录树下，使用a, m, delete来增加，修改和删除<br>cmd-t或cmd-p 查找文件<br>cmd-b 在打开的文件之间切换<br>cmd-shift-b 只搜索从上次git commit 修改或者新增的文件</p><h2 id="导航"><a class="markdownIt-Anchor" href="#导航"></a> 导航</h2><p>(等价于上下左右)<br>ctrl-p 前一行<br>ctrl-n 后一行<br>ctrl-f 前一个字符<br>ctrl-b 后一个字符</p><p>alt-B, alt-left 移动到单词开始<br>alt-F, alt-right 移动到单词末尾</p><p>cmd-right, ctrl-E 移动到一行结束<br>cmd-left, ctrl-A 移动到一行开始</p><p>cmd-up 移动到文件开始<br>cmd-down 移动到文件结束</p><p>ctrl-g 移到到指定行 row:column 处</p><p>cmd-r 在方法之间跳转</p><h2 id="书签"><a class="markdownIt-Anchor" href="#书签"></a> 书签</h2><p>cmd-F2 在本行增加书签<br>F2 跳到当前文件的下一条书签<br>shift-F2 跳到当前文件的上一条书签<br>ctrl-F2 列出当前工程所有书签</p><h2 id="选取"><a class="markdownIt-Anchor" href="#选取"></a> 选取</h2><p>大部分和导航一致，只不过加上shift<br>ctrl-shift-P 选取至上一行<br>ctrl-shift-N 选取至下一行<br>ctrl-shift-B 选取至前一个字符<br>ctrl-shift-F 选取至后一个字符</p><p>alt-shift-B, alt-shift-left 选取至字符开始<br>alt-shift-F, alt-shift-right 选取至字符结束<br>ctrl-shift-E, cmd-shift-right 选取至本行结束<br>ctrl-shift-A, cmd-shift-left 选取至本行开始</p><p>cmd-shift-up 选取至文本开始<br>cmd-shift-down 选取至文件结尾</p><p>cmd-A 全选<br>cmd-L 选取一行， 继续按回选取下一行<br>ctrl-shift-W 选取当前单词</p><h2 id="编辑和删除文本"><a class="markdownIt-Anchor" href="#编辑和删除文本"></a> 编辑和删除文本</h2><blockquote><p>基本操作</p></blockquote><hr><p>ctrl-T 使光标前后字符交换<br>cmd-J 将下一行与当前行合并<br>ctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动<br>cmd-shift-D 复制当前行到下一行<br>cmd-K, cmd-U 使当前字符大写<br>cmd-K, cmd-L 使当前字符小写</p><blockquote><p>删除和剪切</p></blockquote><hr><p>ctrl-shift-K 删除当前行<br>cmd-backspace 删除到当前行开始<br>cmd-fn-backspace 删除到当前行结束<br>ctrl-K 剪切到当前行结束<br>alt-backspace 或 alt-H 删除到当前单词开始<br>alt-delete 或 alt-D 删除到当前单词结束</p><blockquote><p>多光标和多处选取</p></blockquote><hr><p>cmd-click 增加新光标<br>cmd-shift-L 将多行选取改为多行光标<br>ctrl-shift-up, ctrl-shift-down 增加上（下）一行光标<br>cmd-D 选取文档中和当前单词相同的下一处<br>ctrl-cmd-G 选取文档中所有和当前光标单词相同的位置</p><blockquote><p>括号跳转</p></blockquote><hr><p>ctrl-m 相应括号之间， html tag 之间等跳转<br>ctrl-cmd-m 括号(tag)之间文件选取<br>alt-cmd-. 关闭当前XML/HTML tag</p><blockquote><p>编码方式</p></blockquote><hr><p>ctrl-shift-U 调出切换编码选项</p><h2 id="查找和切换"><a class="markdownIt-Anchor" href="#查找和切换"></a> 查找和切换</h2><p>cmd-F 在 buffer 中查找<br>cmd-shift-f 在整个工程中查找</p><h2 id="代码片段"><a class="markdownIt-Anchor" href="#代码片段"></a> 代码片段</h2><p>alt-shift-S 查看当前可用代码片段<br>在~/.atom 目录下snippets.cson文件中存放了你定制的snippets<br><a href="http://flight-manual.atom.io" target="_blank" rel="noopener">定制说明</a></p><h2 id="自动补全"><a class="markdownIt-Anchor" href="#自动补全"></a> 自动补全</h2><p>ctrl-space 提示补全信息</p><h2 id="折叠"><a class="markdownIt-Anchor" href="#折叠"></a> 折叠</h2><p>alt-cmd-[ 折叠<br>alt-cmd-] 展开<br>alt-cmd-shift-{ 折叠全部<br>alt-cmd-shift-} 展开全部<br>cmd-k cmd-N 指定折叠层级 N为层级数</p><h2 id="文件语法高亮"><a class="markdownIt-Anchor" href="#文件语法高亮"></a> 文件语法高亮</h2><p>ctrl-shift-L 选择文本类型</p><h2 id="使用atom进行写作"><a class="markdownIt-Anchor" href="#使用atom进行写作"></a> 使用Atom进行写作</h2><p>ctrl-shift-M Markdown预览<br>可用代码片段 b, legal, img, l, i, code, t, table</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
          <category> atom </category>
          
      </categories>
      
      
        <tags>
            
            <tag> atom </tag>
            
            <tag> tools </tag>
            
            <tag> mac </tag>
            
            <tag> RAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Android Studio的lint清除无用的资源文件</title>
      <link href="/2016/03/22/%E4%BD%BF%E7%94%A8Android-Studio%E7%9A%84lint%E6%B8%85%E9%99%A4%E6%97%A0%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
      <url>/2016/03/22/%E4%BD%BF%E7%94%A8Android-Studio%E7%9A%84lint%E6%B8%85%E9%99%A4%E6%97%A0%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="使用android-studio的lint清除无用的资源文件"><a class="markdownIt-Anchor" href="#使用android-studio的lint清除无用的资源文件"></a> 使用Android Studio的lint清除无用的资源文件</h2><a id="more"></a><blockquote><p>studio很容易查找无用的资源</p></blockquote><p>在项目中，点击菜单栏的Analyze-&gt;Run Inspection by Name…<br><img src="http://7xpj58.com1.z0.glb.clouddn.com/20160322-1.png" alt="lint-1.png"></p><p>选择后出现弹窗如下：<br><img src="http://7xpj58.com1.z0.glb.clouddn.com/20160322-2.png" alt="lint-2.png"></p><p>在弹窗中输入 unused resources 选中点击回车后：<br><img src="http://7xpj58.com1.z0.glb.clouddn.com/20160322-3.png" alt="lint-3.png"></p><p>这里可以选择，整个项目或者某个模块，也可以自定义选择某个目录<br>到此，Android Studio 就会自动分析，然后可以根据结果清除无用的资源文件。</p><p><strong>注意</strong>：在某些情况下，也有可能检测错误，我就在build.gradle中有引用图片，然而这里无法查询到，但大部分查出是对的。</p><blockquote><p>Note:<br>1.一般是删除无用的Java文件<br>2.然后删除无用Java文件中引用的xml文件<br>3.删除xml或Java代码中用到的图片等资源文件<br>4.可以通过指定图片Alt+F7(Find Usages)查询是否引用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> lint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7</title>
      <link href="/2016/03/20/Mac-OS-X-%E4%B8%8B-TAR-GZ-%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-MySQL-5-7/"/>
      <url>/2016/03/20/Mac-OS-X-%E4%B8%8B-TAR-GZ-%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-MySQL-5-7/</url>
      
        <content type="html"><![CDATA[<h1 id="mac-os-x-下-targz-方式安装-mysql-57"><a class="markdownIt-Anchor" href="#mac-os-x-下-targz-方式安装-mysql-57"></a> Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7</h1><h3 id="与-mysql-56-相比-57-版本在安装时有两处不同"><a class="markdownIt-Anchor" href="#与-mysql-56-相比-57-版本在安装时有两处不同"></a> 与 MySQL 5.6 相比, 5.7 版本在安装时有两处不同:</h3><blockquote><p>初始化方式改变，从<code>scripts/mysql_install_db --user=mysql</code> 初始化方式变成了<code>bin/mysqld --initialize --user=mysql</code>方式；<br>初始密码生成改变, 5.6 的版本在 tar gz 方式初始化完成后默认 root 密码为空, 5.7 版本在初始化完成后会生成一个临时的 root 密码。</p></blockquote><a id="more"></a><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统环境: OS X El Capitan <span class="number">10.11</span><span class="number">.1</span></span><br><span class="line">登录用户: wid (有 sudo 权限)</span><br><span class="line">MySQL 版本: <span class="number">5.7</span><span class="number">.9</span> (mysql<span class="number">-5.7</span><span class="number">.9</span>-osx10<span class="number">.10</span>-x86_64.tar.gz)</span><br><span class="line">MySQL下载: http:<span class="comment">//dev.mysql.com/downloads/mysql/</span></span><br></pre></td></tr></table></figure><h3 id="和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化"><a class="markdownIt-Anchor" href="#和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化"></a> 和 MySQL 5.6 tar gz 安装方式一样, 解压并移动到指定安装目录中并执行初始化:</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/Users/</span>&lt;YourName&gt;<span class="string">/Downloads</span></span><br><span class="line">tar zxvf mysql-5.7.9-osx10.10-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动解压后的二进制包到安装目录</span></span><br><span class="line">sudo mv mysql-5.7.9-osx10.10-x86_64 <span class="string">/usr/local/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改 mysql 安装目录所属用户与用户组</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local</span></span><br><span class="line">sudo chown -R root<span class="function">:wheel</span> mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 mysql 安装目录并执行初始化命令并记录生成的临时 root 密码</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/mysql</span></span><br><span class="line">sudo bin/mysqld <span class="params">--initialize</span> <span class="params">--user=mysql</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>:需要记录在初始化完成后命令行窗口中显示的临时 root 密码, 如图:<br><img src="http://7xpj58.com1.z0.glb.clouddn.com/20160320mysql.png" alt="mysql-pwd-pic"></p><h3 id="测试启动-重启与停止"><a class="markdownIt-Anchor" href="#测试启动-重启与停止"></a> 测试启动、重启与停止:</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/<span class="built_in">local</span>/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo support-<span class="built_in">files</span>/mysql.server <span class="built_in">start</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo support-<span class="built_in">files</span>/mysql.server restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">sudo support-<span class="built_in">files</span>/mysql.server <span class="built_in">stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 MySQL 运行状态</span></span><br><span class="line">sudo support-<span class="built_in">files</span>/mysql.server status</span><br></pre></td></tr></table></figure><h3 id="修改-mysql-root-初始密码"><a class="markdownIt-Anchor" href="#修改-mysql-root-初始密码"></a> 修改 MySQL root 初始密码</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要 MySQL 服务在运行状态执行</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/mysql/bin</span></span><br><span class="line"><span class="string">./mysqladmin</span> -u root -p password 新密码</span><br><span class="line">输入生成的临时密码↵</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> mysql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 清除 DNS 缓存</title>
      <link href="/2016/03/18/Mac-%E6%B8%85%E9%99%A4-DNS-%E7%BC%93%E5%AD%98/"/>
      <url>/2016/03/18/Mac-%E6%B8%85%E9%99%A4-DNS-%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="mac-清除-dns-缓存"><a class="markdownIt-Anchor" href="#mac-清除-dns-缓存"></a> Mac 清除 DNS 缓存</h1><a id="more"></a><p>打开 Terminal，根据你的系统版本运行对应的命令：</p><p>Mac OSX 10.11</p><blockquote><p>sudo killall -HUP mDNSResponder</p></blockquote><p>Mac OSX 10.10.4以上</p><blockquote><p>sudo killall -HUP mDNSResponder</p></blockquote><p>Mac OSX 10.10.0 - 10.10.3</p><blockquote><p>sudo discoveryutil mdnsflushcache</p></blockquote><p>Mac OSX 10.7 &amp; 10.8 &amp; 10.9</p><blockquote><p>sudo killall -HUP mDNSResponder</p></blockquote><p>Mac OSX 10.6</p><blockquote><p>dscacheutil -flushcache</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> dns </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android.mk、Application.mk</title>
      <link href="/2016/03/14/Android-mk%E3%80%81Application-mk/"/>
      <url>/2016/03/14/Android-mk%E3%80%81Application-mk/</url>
      
        <content type="html"><![CDATA[<h1 id="androidmk"><a class="markdownIt-Anchor" href="#androidmk"></a> <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a>、<a href="http://Application.mk" target="_blank" rel="noopener">Application.mk</a></h1><h3 id="applicationmk"><a class="markdownIt-Anchor" href="#applicationmk"></a> <a href="http://Application.mk" target="_blank" rel="noopener">Application.mk</a></h3><p><a href="http://Application.mk" target="_blank" rel="noopener">Application.mk</a> 目的是描述在你的应用程序中所需要的模块(即静态库或动态库)，如下是表示编译出所有对应的平台。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_ABI := all</span><br></pre></td></tr></table></figure><h3 id="androidmk-2"><a class="markdownIt-Anchor" href="#androidmk-2"></a> <a href="http://Android.mk" target="_blank" rel="noopener">Android.mk</a></h3><p>Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := hello-jni</span><br><span class="line">LOCAL_SRC_FILES := hello-jni.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="local_path-call-my-dir"><a class="markdownIt-Anchor" href="#local_path-call-my-dir"></a> LOCAL_PATH := $(call my-dir)</h4><p>每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。<br>宏 my-dir 则由Build System提供。返回包含Android.mk的目录路径。</p><h4 id="include-clear_vars"><a class="markdownIt-Anchor" href="#include-clear_vars"></a> include $(CLEAR_VARS)</h4><p>CLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.<br>例如：LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH.<br>这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响。</p><h4 id="local_module-hello-jni"><a class="markdownIt-Anchor" href="#local_module-hello-jni"></a> LOCAL_MODULE := hello-jni</h4><p>LOCAL_MODULE 模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。<br>Build System会自动添加适当的前缀和后缀。例如, foo, 要产生动态库，<a href="http://xn--libfoo-2m3jw86hu39a.so" target="_blank" rel="noopener">则生成libfoo.so</a>。但请注意：如果模块名被定为：libfoo。<a href="http://xn--libfoo-2m3jw86hu39a.so" target="_blank" rel="noopener">则生成libfoo.so</a>。不再加前缀。</p><h4 id="local_src_files-hello-jnic"><a class="markdownIt-Anchor" href="#local_src_files-hello-jnic"></a> LOCAL_SRC_FILES := hello-jni.c</h4><p>LOCAL_SRC_FILES变量必须包含将要打包入模块的C/C<ins>源码。<br>不必列出头文件，Build System会自动帮我们找到依赖文件。<br>缺省的C</ins>源码的扩展名为.cpp。也可以修改，通过LOCAL_CPP_EXTENSION。</p><h4 id="include-build_shared_library"><a class="markdownIt-Anchor" href="#include-build_shared_library"></a> include $(BUILD_SHARED_LIBRARY)</h4><p>BUILD_SHARED_LIBRARY: 是Build System提供的一个变量，指向一个GNU Makefile Script。<br>它负责收集自从上次调用<code>include $(CLEAR_VARS)</code>后的所有LOCAL_xxx信息。并决定编译什么。</p><h5 id="build_static_library-编译为静态库"><a class="markdownIt-Anchor" href="#build_static_library-编译为静态库"></a> BUILD_STATIC_LIBRARY: 编译为静态库。</h5><h5 id="build_shared_library-编译为动态库"><a class="markdownIt-Anchor" href="#build_shared_library-编译为动态库"></a> BUILD_SHARED_LIBRARY: 编译为动态库。</h5><h5 id="build_executable-编译为native-c可执行程序"><a class="markdownIt-Anchor" href="#build_executable-编译为native-c可执行程序"></a> BUILD_EXECUTABLE: 编译为Native C可执行程序</h5><h3 id="多文件编译"><a class="markdownIt-Anchor" href="#多文件编译"></a> 多文件编译</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># first lib, which will be built statically</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := libtwolib-first</span><br><span class="line">LOCAL_SRC_FILES := first.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># second lib, which will depend on and include the first one</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := libtwolib-second</span><br><span class="line">LOCAL_SRC_FILES := second.c</span><br><span class="line"></span><br><span class="line">LOCAL_STATIC_LIBRARIES := libtwolib-first</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure><h3 id="语法详解"><a class="markdownIt-Anchor" href="#语法详解"></a> 语法详解</h3><p><a href="http://android.mk/" target="_blank" rel="noopener">android.mk</a></p><blockquote><p>作者：ben_speed<br>文章源自：<a href="http://www.jianshu.com/p/46089c2276f3" target="_blank" rel="noopener">http://www.jianshu.com/p/46089c2276f3</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ndk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用 Git 命令清单</title>
      <link href="/2016/03/14/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
      <url>/2016/03/14/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常用-git-命令清单"><a class="markdownIt-Anchor" href="#常用-git-命令清单"></a> 常用 Git 命令清单</h1><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/675733-cc81d1c02c093efa.png" alt="git structer picture"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><ul><li>Workspace: 工作区</li><li>Index / Stage: 暂存区</li><li>Repository: 仓库区（或本地仓库）</li><li>Remote: 远程仓库</li></ul><a id="more"></a><h2 id="一-新建代码库"><a class="markdownIt-Anchor" href="#一-新建代码库"></a> 一、新建代码库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init [project-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> [url]</span></span><br></pre></td></tr></table></figure><h2 id="二-配置"><a class="markdownIt-Anchor" href="#二-配置"></a> 二、配置</h2><p>Git的设置文件<code>.gitconfig</code>,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git<span class="built_in"> config </span>-e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git<span class="built_in"> config </span>[--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="三-增加删除文件"><a class="markdownIt-Anchor" href="#三-增加删除文件"></a> 三、增加/删除文件</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git <span class="builtin-name">add</span> [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git <span class="builtin-name">add</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git <span class="builtin-name">add</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] <span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="四-代码提交"><a class="markdownIt-Anchor" href="#四-代码提交"></a> 四、代码提交</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure><h2 id="五-分支"><a class="markdownIt-Anchor" href="#五-分支"></a> 五、分支</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git <span class="keyword">commit</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend -m [message]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git <span class="keyword">commit</span> <span class="comment">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure><h2 id="六-标签"><a class="markdownIt-Anchor" href="#六-标签"></a> 六、标签</h2>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br></pre></td></tr></table></figure><h2 id="七-查看信息"><a class="markdownIt-Anchor" href="#七-查看信息"></a> 七、查看信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示有变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的版本历史</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个commit之后的所有变动，其<span class="string">"提交说明"</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git whatchanged [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示过去5次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git shortlog -sn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git blame [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached [file]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff HEAD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示两次提交之间的差异</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff [first-branch]...[second-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show --name-only [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git show [commit]:[filename]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><h2 id="八-远程同步"><a class="markdownIt-Anchor" href="#八-远程同步"></a> 八、远程同步</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="九-撤销"><a class="markdownIt-Anchor" href="#九-撤销"></a> 九、撤销</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [<span class="keyword">commit</span>] [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">file</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--keep [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [<span class="keyword">commit</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="十-其他"><a class="markdownIt-Anchor" href="#十-其他"></a> 十、其他</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure><blockquote><p>作者：阮一峰<br>文章源自：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语谚语</title>
      <link href="/2016/03/12/%E8%8B%B1%E8%AF%AD%E8%B0%9A%E8%AF%AD/"/>
      <url>/2016/03/12/%E8%8B%B1%E8%AF%AD%E8%B0%9A%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h4 id="英语谚语"><a class="markdownIt-Anchor" href="#英语谚语"></a> 英语谚语</h4><blockquote><p>English proverbs</p></blockquote><a id="more"></a><p>Great minds have purpose, others have wishes.<br>伟大的人有目标， 平庸的人只有愿望。</p><p>If winter comes, can spring be far behind?<br>冬天来了， 春天还会远吗？</p><p>Behind the fear of an ideal you, you create the fear, you can beat him.<br>恐惧的背后有一个理想的你，恐惧是你自己创造，你也可以打败他。</p><p>The best preparation for tomorrow is doing your best today.<br>立足当下，赢在未来。</p><p>The more you care, the more you have to lose.<br>在意的越多，失去的越多。</p><p>All sad people like poetry, happy people like songs.<br>悲伤的人喜欢诗，幸福的人喜欢歌。</p><p>Life’s a little bit messy. We all make mistakes, No matter what type of animal you are, change starts with you.<br>生活总会有点不顺意，我们都会犯错。天性如何并不重要，重要的是你开始改变。</p><p>The first wealth is health.<br>健康是人生第一财富。</p><p>Sweat is the lubricant of success.<br>汗水是成功的润滑剂。</p><p>Be confident with yourself and stop worring what other people think. Do what’s best for your future happiness.<br>对自己要自信，别再管其他人怎么想了，为了未来幸福全力以赴吧！</p><p>True mastery of any skill taskes a lifetime.<br>对任何技能的掌握都需要一生的刻苦操练。</p><p>You’re unique, nothing can replace you.<br>你举世无双，无人可以替代。</p><p>The less you reveal the more people can wonder.<br>越矜持神秘，越令人神往。–人间烟火0000译</p><p>We are as indestructible as we believe ourselves to be.<br>如我所念，坚不可摧。–悄然翩跹译</p><p>To be close to your friend, but closer to your enemy.<br>亲近你的朋友，但更要亲近你的敌人。–雪织天医译</p><p>Where there is life, there is hope.<br>有生命必有希望。</p><p>Even the smallest person can change the course of the future.<br>即使是小人物，也可以改变未来。–清清me(~~)心译文</p><p>Intelligence without ambition is a bird without wings.<br>无志之才，如无翼之鸟。</p><p>I have no secret of success but hard work.<br>除辛勤工作之外，我别无成功的秘诀。</p><p>That man is the richest whose pleasures are the cheapest.<br>能处处寻求快乐的人才是最富有的人。</p><p>A smile is a curve that sets everything straight.<br>微笑是一道弧线，去能把一切摆平。</p><p>Think great thoughts and you will be great.<br>心怀伟大的理想，你将会变得伟大。</p><p>We must hang together, or we’ll be hanged separately.<br>我们必须团结在一起，否则我们将被一个个绞死。</p><p>Live well, love lots, and laugh often.<br>善待生活，热爱一切，笑口常开。</p><p>But all sunshine without shade, all pleasure without pain, is not life at all.<br>但只有阳光没有阴影，只有快乐没有痛苦，根本不是真正的生活。</p><p>Never regret anything because at one time it was exactly what you wanted.<br>不要后悔做任何事情，因为曾经有个时候，那正是你想要的。</p><p>Beauty is an attitude. It has nothing to do with age.<br>美，是一种态度，与年龄无关  --也许就这样译</p><p>The cloud stood humbly in a corner of the sky. The morning crowned it with splendor.<br>白云谦卑地站在天边，晨光给它披上壮丽的光彩。 --泰戈尔</p><p>I am a slow walker, but I never walk backwards.<br>我走的很慢，但是我从来不会后退。</p><p>Music is the best school in life, and at the same time it is the best way   for us to extricate ourselves from it.<br>音乐是生活中最好的学校，而同时它又是我们从中解脱的最佳途径。</p><p>It’s kind of fun to do the impossible.<br>乐在为不可为之事。—千倩晶汀译</p><p>Whatever is worth doing is worth doing well.<br>任何值得做的，都值得把它做好。</p><p>Stay hungry,stay foolish.<br>求知若饥，虚心若愚。</p><p>The best preparation for tomorrow is doing your best today.<br>对明天做好的准备就是今天做到最好。</p><p>Either move or be moved.<br>先发制人，后发而制于人。</p><p>Cowards die many times before their actual deaths.<br>胆小怕死，虽生犹死。</p><p>A friend without faults will never be found.<br>没有缺点的朋友是永远找不到的。</p><p>Every man desires to live long, but no man wishes to be old.<br>人人都想要长命百岁，但没人愿意变老。</p><p>Brevity is the soul of wit.<br>简洁是智慧的灵魂。</p><p>Every man dies, not every man really lives.<br>任何人都将会死去，然而并不是每个人都真真正正的活过。</p><p>Sweet are the uses of adversity.<br>逆境和厄运自有妙处。</p><p>Had I not seen the sun, I could have borne the shade.<br>我本可以忍受黑暗，如果我不曾见过阳光。</p>]]></content>
      
      
      <categories>
          
          <category> english </category>
          
      </categories>
      
      
        <tags>
            
            <tag> english </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android TextView 部分字体设置颜色或大小</title>
      <link href="/2016/03/10/Android-TextView-%E9%83%A8%E5%88%86%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2%E6%88%96%E5%A4%A7%E5%B0%8F/"/>
      <url>/2016/03/10/Android-TextView-%E9%83%A8%E5%88%86%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2%E6%88%96%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="android-textview-部分字体设置颜色或大小"><a class="markdownIt-Anchor" href="#android-textview-部分字体设置颜色或大小"></a> Android TextView 部分字体设置颜色或大小</h3><blockquote><p>在某些情况下，会遇到某些关键字需要<strong>高亮</strong>显示，可Android自带的TextView支持很困难。</p></blockquote><blockquote><p>背景来自：今天一同学问我怎么实现，给他举例两种方式，他感觉不方便，因此我才写此文章，简单介绍下。</p></blockquote><h4 id="支持方式一"><a class="markdownIt-Anchor" href="#支持方式一"></a> 支持方式一</h4><p>可以通过HTML的方式，因为TextView可以加载HTML，因此可以简单的实现，缺点是和Android自带的字体看起来有点别扭。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textView4.setText(Html.fromHtml("北京市发布霾黄色预警，<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'#ff0000'</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>外出携带好<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span>口罩"));</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="支持方式二"><a class="markdownIt-Anchor" href="#支持方式二"></a> 支持方式二</h4><p>可以通过代码的方式，对TextView设置部分字体的颜色。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Spannable span = <span class="keyword">new</span> <span class="constructor">SpannableString(<span class="params">textView3</span>.<span class="params">getText</span>()</span>);</span><br><span class="line">span.set<span class="constructor">Span(<span class="params">new</span> AbsoluteSizeSpan(58)</span>, <span class="number">11</span>, <span class="number">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">span.set<span class="constructor">Span(<span class="params">new</span> ForegroundColorSpan(Color.RED)</span>, <span class="number">11</span>, <span class="number">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">span.set<span class="constructor">Span(<span class="params">new</span> BackgroundColorSpan(Color.YELLOW)</span>, <span class="number">11</span>, <span class="number">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">textView3.set<span class="constructor">Text(<span class="params">span</span>)</span>;</span><br></pre></td></tr></table></figure><hr><p>以上两种方式，我感觉就可以了，不过有些同学感觉就是用起来比较麻烦，因此我们可以封装下第二种方法，变为第三种方法，也就是我要写的。</p><h4 id="支持方式三"><a class="markdownIt-Anchor" href="#支持方式三"></a> 支持方式三</h4><p>通过自定义View的方式来封装这些代码。</p><h5 id="首先是ctextview-extends-textview当然名称无所谓自己喜欢就好"><a class="markdownIt-Anchor" href="#首先是ctextview-extends-textview当然名称无所谓自己喜欢就好"></a> 首先是CTextView extends TextView,当然名称无所谓，自己喜欢就好</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> CTextView extends TextView &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> normalTextSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> highlightTextSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> normalTextColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> highlightTextColor;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">CTextView(Context <span class="params">context</span>)</span> &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">CTextView(Context <span class="params">context</span>, AttributeSet <span class="params">attrs</span>)</span> &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        TypedArray typedArray = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            typedArray = context.obtain<span class="constructor">StyledAttributes(<span class="params">attrs</span>, R.<span class="params">styleable</span>.CTextView, 0, 0)</span>;</span><br><span class="line">            normalTextSize = typedArray.get<span class="constructor">Dimension(R.<span class="params">styleable</span>.CTextView_normal_textsize, 14)</span>;</span><br><span class="line">            highlightTextSize = typedArray.get<span class="constructor">Dimension(R.<span class="params">styleable</span>.CTextView_highlight_textsize, 14)</span>;</span><br><span class="line">            normalTextColor = typedArray.get<span class="constructor">Color(R.<span class="params">styleable</span>.CTextView_normal_textcolor, Color.BLACK)</span>;</span><br><span class="line">            highlightTextColor = typedArray.get<span class="constructor">Color(R.<span class="params">styleable</span>.CTextView_highlight_textcolor, Color.BLACK)</span>;</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">if</span> (typedArray != null) &#123;</span><br><span class="line">                typedArray.recycle<span class="literal">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set<span class="constructor">Text(String <span class="params">allString</span>, String <span class="params">highlightString</span>)</span> &#123;</span><br><span class="line">        SpannableStringBuilder spannableStringBuilder = <span class="keyword">new</span> <span class="constructor">SpannableStringBuilder()</span>;</span><br><span class="line">        spannableStringBuilder.append(allString);</span><br><span class="line">        spannableStringBuilder.set<span class="constructor">Span(<span class="params">new</span> AbsoluteSizeSpan((<span class="params">int</span>)</span> normalTextSize, <span class="literal">true</span>), <span class="number">0</span>, allString.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        spannableStringBuilder.set<span class="constructor">Span(<span class="params">new</span> ForegroundColorSpan(<span class="params">normalTextColor</span>)</span>, <span class="number">0</span>, allString.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = get<span class="constructor">SubIndex(0, <span class="params">allString</span>, <span class="params">highlightString</span>)</span>;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">int</span> index = <span class="built_in">list</span>.get(i);</span><br><span class="line">            spannableStringBuilder.set<span class="constructor">Span(<span class="params">new</span> StyleSpan(Typeface.BOLD)</span>, index, index + highlightString.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">            spannableStringBuilder.set<span class="constructor">Span(<span class="params">new</span> AbsoluteSizeSpan((<span class="params">int</span>)</span> highlightTextSize, <span class="literal">true</span>), index, index + highlightString.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">            spannableStringBuilder.set<span class="constructor">Span(<span class="params">new</span> ForegroundColorSpan(<span class="params">highlightTextColor</span>)</span>, index, index + highlightString.length<span class="literal">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        &#125;</span><br><span class="line">        set<span class="constructor">MovementMethod(LinkMovementMethod.<span class="params">getInstance</span>()</span>);</span><br><span class="line">        set<span class="constructor">Text(<span class="params">spannableStringBuilder</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; get<span class="constructor">SubIndex(<span class="params">int</span> <span class="params">startIndex</span>, String <span class="params">allString</span>, String <span class="params">highlightString</span>)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Integer&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="built_in">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (startIndex<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">            index = allString.index<span class="constructor">Of(<span class="params">highlightString</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = allString.index<span class="constructor">Of(<span class="params">highlightString</span>, <span class="params">startIndex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">list</span>.add(index);</span><br><span class="line">            <span class="built_in">list</span>.add<span class="constructor">All(<span class="params">getSubIndex</span>(<span class="params">index</span> + <span class="params">highlightString</span>.<span class="params">length</span>()</span>, allString, highlightString));</span><br><span class="line">        &#125;</span><br><span class="line">        return <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义上面类中用到的attrsxml"><a class="markdownIt-Anchor" href="#定义上面类中用到的attrsxml"></a> 定义上面类中用到的attrs.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CTextView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"normal_textsize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"highlight_textsize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"normal_textcolor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"highlight_textcolor"</span> <span class="attr">format</span>=<span class="string">"color"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在xml中的textview的用法"><a class="markdownIt-Anchor" href="#在xml中的textview的用法"></a> 在xml中的TextView的用法</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处是包名+类名，请写自己的包名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.easemob.ctextview.CTextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/c_textview"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:normal_textsize</span>=<span class="string">"12sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:highlight_textsize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:normal_textcolor</span>=<span class="string">"#000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:highlight_textcolor</span>=<span class="string">"#f00"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在activity中的用法"><a class="markdownIt-Anchor" href="#在activity中的用法"></a> 在Activity中的用法</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CTextView cTextView = (CTextView) find<span class="constructor">ViewById(R.<span class="params">id</span>.<span class="params">c_textview</span>)</span>;</span><br><span class="line">cTextView.set<span class="constructor">Text(<span class="string">"欢迎大家看我说了这么久，大家辛苦了！"</span>,<span class="string">"大家"</span>)</span>;</span><br></pre></td></tr></table></figure><h5 id="结果如下"><a class="markdownIt-Anchor" href="#结果如下"></a> 结果如下：</h5><p><img src="http://7xpj58.com1.z0.glb.clouddn.com/img_20160310202020.png" alt="result ctextview"></p>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下，添加Android adb命令</title>
      <link href="/2016/03/09/Mac%E4%B8%8B%EF%BC%8C%E6%B7%BB%E5%8A%A0Android-adb%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/03/09/Mac%E4%B8%8B%EF%BC%8C%E6%B7%BB%E5%8A%A0Android-adb%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1 在用户目录下 ~/.bash_profile 如果存在打开，不存在则创建</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.bash_profile</span></span><br></pre></td></tr></table></figure><p>2 加入我们需要的添加的环境变量，例如：Android需要添加platform-tools 和 tools</p><a id="more"></a><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$&#123;</span>PATH&#125;<span class="symbol">:/Users/user/android-sdks/platform-tools</span><span class="symbol">:/Users/user/android-sdks/tools</span> </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">export PATH=<span class="regexp">/Users/user</span><span class="regexp">/android-sdks/platform</span>-<span class="symbol">tools:</span><span class="variable">$PATH</span> </span><br><span class="line">export PATH=<span class="regexp">/Users/user</span><span class="regexp">/android-sdks/tools</span><span class="symbol">:</span><span class="variable">$PATH</span> </span><br><span class="line"></span><br><span class="line">其中 <span class="symbol">:</span><span class="variable">$PATH</span> 不能少，表示加入系统的环境变量</span><br></pre></td></tr></table></figure><p>3 进行验证</p><blockquote><p>重新打开一个终端：输入adb,即可验证。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac系统如何显示和隐藏文件</title>
      <link href="/2016/03/09/mac%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/"/>
      <url>/2016/03/09/mac%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="显示mac隐藏文件的命令"><a class="markdownIt-Anchor" href="#显示mac隐藏文件的命令"></a> 显示Mac隐藏文件的命令：</h3><blockquote><p>defaults write com.apple.finder AppleShowAllFiles -bool true</p></blockquote><h3 id="隐藏mac隐藏文件的命令"><a class="markdownIt-Anchor" href="#隐藏mac隐藏文件的命令"></a> 隐藏Mac隐藏文件的命令：</h3><blockquote><p>defaults write com.apple.finder AppleShowAllFiles -bool false</p></blockquote><a id="more"></a><h2 id="或者"><a class="markdownIt-Anchor" href="#或者"></a> 或者 :</h2><h3 id="显示mac隐藏文件的命令-2"><a class="markdownIt-Anchor" href="#显示mac隐藏文件的命令-2"></a> 显示Mac隐藏文件的命令：</h3><blockquote><p>defaults write com.apple.finder AppleShowAllFiles YES</p></blockquote><h3 id="隐藏mac隐藏文件的命令-2"><a class="markdownIt-Anchor" href="#隐藏mac隐藏文件的命令-2"></a> 隐藏Mac隐藏文件的命令：</h3><blockquote><p>defaults write com.apple.finder AppleShowAllFiles NO</p></blockquote><p>输完单击Enter键，退出终端，重新启动Finder就可以了</p><h4 id="重启finder"><a class="markdownIt-Anchor" href="#重启finder"></a> 重启Finder：</h4><blockquote><p>鼠标单击窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式--匹配电话号码和手机号码</title>
      <link href="/2016/03/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F--%E5%8C%B9%E9%85%8D%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E5%92%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81/"/>
      <url>/2016/03/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F--%E5%8C%B9%E9%85%8D%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E5%92%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式匹配电话号码和手机号码"><a class="markdownIt-Anchor" href="#正则表达式匹配电话号码和手机号码"></a> 正则表达式匹配电话号码和手机号码</h3><hr><h5 id="正则表达式电话号码一"><a class="markdownIt-Anchor" href="#正则表达式电话号码一"></a> 正则表达式（电话号码）一、</h5><pre><code>\d{3}-\d{8}|\d{4}-\d{7}匹配 0511-1234567 | 022 -28191732不匹配 02-123456 12345-123456</code></pre><h5 id="正则表达式电话号码二"><a class="markdownIt-Anchor" href="#正则表达式电话号码二"></a> 正则表达式（电话号码）二、</h5><pre><code>(^\([0]\d{2}|\d{4}\))(\d{6,7}$)匹配    (021)1234567 | (0411)123456 | (000)000000不匹配    (123)1234567 | 025123456 | 0252345678  </code></pre><a id="more"></a><h5 id="正则表达式手机号码三"><a class="markdownIt-Anchor" href="#正则表达式手机号码三"></a> 正则表达式（手机号码）三、</h5><pre><code>^(?&lt;national&gt;\+?(?:86)?)(?&lt;separator&gt;\s?-?)(?&lt;phone&gt;(?&lt;vender&gt;(13|15|18)[0-9])(?&lt;area&gt;\d{4})(?&lt;id&gt;\d{4}))$匹配 +8613012345678 | 86 13012345678 | 13245679087不匹配 +86130123456781231434352 | 13560012513 | ++8613012345678</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
