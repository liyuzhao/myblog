{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/ds.php","path":"images/ds.php","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/assets/blogImg/avatar.jpg","path":"assets/blogImg/avatar.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/wechat.jpg","path":"assets/blogImg/wechat.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/assets/blogImg/20200915-vsbox.png","path":"assets/blogImg/20200915-vsbox.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1550646980000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1550646980000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1550646980000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1550646980000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1550646980000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1550646980000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1550646980000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1550646980000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1550646980000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1550646980000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1550646980000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1550646980000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1550646980000},{"_id":"themes/next/_config.yml","hash":"685d82d3f796cf19029415bfc5f0626e15f2f367","modified":1550664906000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1550646980000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1550646980000},{"_id":"source/.DS_Store","hash":"0a66fd5597dfcb60e6aa918b0bf22b89fa4dc3b2","modified":1618473634553},{"_id":"source/CNAME","hash":"022afafd11ce9e1d8dadaff5c334361feed80389","modified":1595245284000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1550646980000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1550646980000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1550646980000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1550646980000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1550646980000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1550646980000},{"_id":"themes/next/.git/index","hash":"39b2f7691b295422ea58a5fb0af1d1c9e742db28","modified":1597675716503},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1550646874000},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1550646980000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1550646980000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1550646980000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1550646980000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1550646980000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1550646980000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1550646980000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1550646980000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1550646980000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1550646980000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1550646980000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1550646980000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1550646980000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1550646980000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1550646980000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1550646980000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1550646980000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1550646980000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1550646980000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1550646980000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1550646980000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1550646980000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1550646980000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1550646980000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1550646980000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1550646980000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1550646980000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1550646980000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1550646980000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1550646980000},{"_id":"source/about/index.md","hash":"1d042a6b6f4d4621c18c1c4a62eb883eaae8c158","modified":1595245284000},{"_id":"source/_posts/Android-NDK结构.md","hash":"37d3a8ff9bd76aef7b5d72cd83ec428bf6d6e464","modified":1595245284000},{"_id":"source/categories/index.md","hash":"3cb97ec38f20b967331b58f9d6bbe7b71bb291a2","modified":1595244560000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1597718934316},{"_id":"source/_posts/Android-TextView-部分字体设置颜色或大小.md","hash":"ee41767633a7bc43c63ecc03f100db305e97e65a","modified":1595244560000},{"_id":"source/_posts/Android-mk、Application-mk.md","hash":"bf657c15f247f1f65d8e17f734f115ab139d34f7","modified":1595245284000},{"_id":"source/_posts/Android-iOS打开手机QQ与指定聊天界面.md","hash":"cf5c7195ecb887eda4784edc5dcc78d7c0f80157","modified":1595244560000},{"_id":"source/_posts/Android-mk简介.md","hash":"ae5e88d9b8cfc7f427a7e235f5448c285aadf88c","modified":1595245284000},{"_id":"source/_posts/Android中通过反射获取资源ID.md","hash":"b082f334aa0a85d2e474a63e0b9fc0e66749b7dc","modified":1595245284000},{"_id":"source/_posts/AndroidStudio打包Jar.md","hash":"55c07b7ec388d71636af6b4bcd988e00d6b4e30a","modified":1595245284000},{"_id":"source/_posts/Apktool反编译.md","hash":"7bcf73cb2f142bcda06743b44751c9218962e55d","modified":1595245284000},{"_id":"source/_posts/C-OSI参考模型.md","hash":"a020eb855dd744e44cbb77f99bf0b91fcbd95626","modified":1618807991447},{"_id":"source/_posts/Atom-编辑器快捷键列表汇总整理.md","hash":"2d83f71f2d1854c27980281725a9f7fe80b1ce58","modified":1595244560000},{"_id":"source/_posts/C-常用的程序库.md","hash":"52639cd7d6430c2f174dacc606c2da26f6435af3","modified":1618808008366},{"_id":"source/_posts/C-流操作的控制.md","hash":"3b10729bc994c2aa34d15e577954a28ddf9611d2","modified":1618808040295},{"_id":"source/_posts/C-语言ctime库.md","hash":"a23c06b73f795b676b2a26f3d08a6a610048074f","modified":1618892450914},{"_id":"source/_posts/C-整型变量范围.md","hash":"84bb5edf5754a3e323bab24fa955d673801fa391","modified":1618808018616},{"_id":"source/_posts/C-调试技巧.md","hash":"b84db9091492cda97a8bf1d5fafb0ac2e7ed25c9","modified":1618808051144},{"_id":"source/_posts/Chrome访问Https无法继续.md","hash":"8ee767bf03a4a48bf9b16511a29c216794a31abf","modified":1595245284000},{"_id":"source/_posts/AsyncTask源码了解.md","hash":"3b93e9e9536be7f836ee1d1312e17e86cf4d932a","modified":1595245284000},{"_id":"source/_posts/CURL状态码列表.md","hash":"9050e143a57514b7d6f6f1a118bfbac6d7ff4a8a","modified":1609135581124},{"_id":"source/_posts/C语言-排序与查找.md","hash":"e49f92a20fcc9fd77d224394a66d6628f7757faf","modified":1595245284000},{"_id":"source/_posts/C语言-单向链表.md","hash":"99d0ecfc88236f8c3d61201d7730b43fe7ad7e71","modified":1595245284000},{"_id":"source/_posts/C-文件读写详解.md","hash":"8c025772f169706db025303da896c9270435c002","modified":1618808028820},{"_id":"source/_posts/C语言-文件操作.md","hash":"756bbd25cc241346e676e26970addc426a0e8af0","modified":1595245284000},{"_id":"source/_posts/EditText-的使用及值得注意的地方.md","hash":"9ab26ad5c9b9d889524b6c04e48d5a402de40006","modified":1595245284000},{"_id":"source/_posts/Github-安全类Repo收集整理-转载.md","hash":"7cff2ac9338a0677e5b153add74c4c39016888bb","modified":1595245284000},{"_id":"source/_posts/Gyp-学习记录.md","hash":"793cbd82746ea274b6750b603e0cf67a0fa12fa5","modified":1618808075649},{"_id":"source/_posts/Git命令生成Patch和打补丁.md","hash":"02f5d7f15cb42ca4d27cb88e917bcf1f0ff94f74","modified":1595245284000},{"_id":"source/_posts/Git忽略文件-ignore模板（Android-Studio）.md","hash":"575a0b3263134cf1fecfb56ae74a1c1d38cb21bf","modified":1595245284000},{"_id":"source/_posts/JNI-异常处理.md","hash":"8b3d5679b04b4e1c5b2fa056517281247d290457","modified":1595245284000},{"_id":"source/_posts/Integer比较的误区.md","hash":"52a63aba8801babc97188cde046dbbf2e3d858a6","modified":1595245284000},{"_id":"source/_posts/Hexo常用命令记录.md","hash":"15c8f0a5d7c7e1cac724c977ce5b334ddbc69c21","modified":1595245284000},{"_id":"source/_posts/JNI-日志.md","hash":"8d64284bbcef8a833b56b40d82909f996631b141","modified":1595245284000},{"_id":"source/_posts/JNI-局部和全局引用.md","hash":"54f0c7c0ce69489a80106e9deb9cb6da9c8c55f4","modified":1595245284000},{"_id":"source/_posts/Java中Math类的一些常用方法.md","hash":"cb3427c95a877560797968a63b817e084a336502","modified":1595244560000},{"_id":"source/_posts/JNI-数据类型.md","hash":"02c6a74b86f23f82ee4d67adec3f11c97b55ea99","modified":1595245284000},{"_id":"source/_posts/Linux命令wc的详细用法.md","hash":"8c591935d2cf886a166d27ef23a5346d7ed34e27","modified":1595245284000},{"_id":"source/_posts/Linux-禁用账户.md","hash":"ceb5972693d29f8d74387475b53c5621b5e10e96","modified":1599819332445},{"_id":"source/_posts/Linux搜索命令ag.md","hash":"f887179a3de88401f60491f816f7f3bc4202d156","modified":1595245284000},{"_id":"source/_posts/Mac下，添加Android-adb命令.md","hash":"dc379877b74f87cf09611a123630409358f42174","modified":1595244560000},{"_id":"source/_posts/Mac-OS-X-下-TAR-GZ-方式安装-MySQL-5-7.md","hash":"5e6649f4c83a0f38b903f3aab8b9ece745dcb192","modified":1595244560000},{"_id":"source/_posts/Mac-清除-DNS-缓存.md","hash":"b637fde331907928005345a085fbe8b4ac346eef","modified":1595244560000},{"_id":"source/_posts/Makefile经典教程.md","hash":"c33b416b7d9a52f3b857fd8e2876e8d00baa64a7","modified":1595245284000},{"_id":"source/_posts/Sublime快捷键.md","hash":"5a9acc763038c486ce46cb496da67e16a33b61b7","modified":1595245284000},{"_id":"source/_posts/MySQL常用命令总结.md","hash":"e763601e817ab373287a48014d5bf7ce28215689","modified":1595245284000},{"_id":"source/_posts/USB数据线和充电线有什么不同.md","hash":"97fbc61974ec6e561248ff6d52991495afe4f124","modified":1595245284000},{"_id":"source/_posts/STL-Algorithm-整理.md","hash":"138c853f8e6bf1596331877cbbd5d2c4999a906f","modified":1618808368738},{"_id":"source/_posts/VirtualBox-for-mac设置虚拟机硬盘大小.md","hash":"b6e53a7f7ce3e055ec3c244a8668641efa0b0e49","modified":1600167165106},{"_id":"source/_posts/Qt-Creator常用快捷键.md","hash":"3144900f3186ff97d22f7ae7c1b4a03e08c5f6fa","modified":1597719039569},{"_id":"source/_posts/Vim-Cheat-Sheet.md","hash":"ab7d6ea3d36287e07ea28099dca703866aba0bfd","modified":1595245284000},{"_id":"source/_posts/Xcode升级11，-iostream-file-not-found问题.md","hash":"1f62199907f9fadba23005e0843d96e0867e8ae9","modified":1595245284000},{"_id":"source/_posts/WebView调用本地的图片选择.md","hash":"f36753ec8cd31e78902719ade44b79f067cfcf36","modified":1595245284000},{"_id":"source/_posts/git-submodule的使用.md","hash":"5f57d326c35b40daa7ace01b9bed7d199d1f0f4e","modified":1595245284000},{"_id":"source/_posts/glide的简单用法.md","hash":"7e67f757a9ec4a2eb05bfdd85ece18822277e033","modified":1595245284000},{"_id":"source/_posts/gitignore文件不起作用.md","hash":"b1f5e4c8a76c24b4b6f6472813e57e4086722da3","modified":1595245284000},{"_id":"source/_posts/iPhone开发-GCD.md","hash":"ec654a0f06a579d2e967421376bb8de9f7949a57","modified":1595245284000},{"_id":"source/_posts/iOS设置AppIcon-LauncherImages尺寸和位置.md","hash":"4405263437de00aa4bad38f1a72eded8e15fde14","modified":1595245284000},{"_id":"source/_posts/grep-find命令用法.md","hash":"f3bc45d2ef36142c4a72ad5135118f79d57c52b0","modified":1595245284000},{"_id":"source/_posts/iPhone开发-Keyboard.md","hash":"361b9424ae987d99e83fa3c5820f476e5717aa04","modified":1595245284000},{"_id":"source/_posts/iPhone开发-UILabel.md","hash":"f38ce61c5d04eb65a9aebdb166dabeb2a4fc7f0c","modified":1595245284000},{"_id":"source/_posts/iPhone开发-leftBarButtonItem.md","hash":"4770186dfaa93d640be62e485a435d2fc54858b3","modified":1595245284000},{"_id":"source/_posts/iPhone开发-UIImage-CIImage-CGImageRef.md","hash":"4109e7924877e1864b186b9204a80ddcb1495184","modified":1595245284000},{"_id":"source/_posts/XCode-编写C-引用头文件无自动补全.md","hash":"6624726eb7e6da88e3176fa9d64c4b3c407ff12a","modified":1602563063427},{"_id":"source/_posts/iPhone开发-截屏.md","hash":"99ebedb02cfe69fe2179e7d3c66a9b37a65d968a","modified":1595245284000},{"_id":"source/_posts/linux下查看监听端口对应的进程.md","hash":"b64c080102f4a4fcbe42cd8d69ebced026c7d946","modified":1595245284000},{"_id":"source/_posts/iPhone开发-常用组件.md","hash":"c67ea5b528b2638d6d84a7a599a7b9ec1197ab5d","modified":1595245284000},{"_id":"source/_posts/linux之cut用法.md","hash":"0dc65b7510ea4262da8eeace27f688c9d495ce1a","modified":1595245284000},{"_id":"source/_posts/linux添加service服务，设置自启动.md","hash":"31547360b5bef5a249231bf4ae832c829f0e3fcb","modified":1605757940735},{"_id":"source/_posts/mac下安装depot-tools.md","hash":"c19901254389daba2d427c3d6c0b3c7d23a3c139","modified":1595245284000},{"_id":"source/_posts/mac系统如何显示和隐藏文件.md","hash":"a6e6889081615ec47587998dcfd629efe836a19f","modified":1595244560000},{"_id":"source/_posts/python字符串的去除空格函数-字符串的内建函数.md","hash":"d94c3d9bd9d56c23392ab6fd08682b415925bc3f","modified":1595245284000},{"_id":"source/_posts/vpn下git-clone的正确方式.md","hash":"90de7fb13b92c957fe89d42a09f17c818dd22491","modified":1595245284000},{"_id":"source/_posts/tar压缩和解压缩打包命令.md","hash":"3ca38b80d3b017bac14a6fe2872620975364a0f8","modified":1595245284000},{"_id":"source/_posts/wireshark过滤器规则.md","hash":"2d84ce2d18b55f519686328ea8e1ff6da09f6a6b","modified":1595245284000},{"_id":"source/_posts/vscode-Visual-Studio-Code-工具快捷键.md","hash":"9db579e7cd66c58a8a6cc33ae66500392e0abf9d","modified":1595245284000},{"_id":"source/_posts/std-string常用函数.md","hash":"2d0daef8c51847a59a8e36aed454c21f551d0c25","modified":1618817396315},{"_id":"source/_posts/关于Android中软键盘与布局的问题.md","hash":"9fb2e32d61dcfa1fc9585aae905179df95a644cb","modified":1595245284000},{"_id":"source/_posts/从Android手机内提取已安装的apk文件.md","hash":"21472e45d996c5ceb887903f421338d5b0cd56e8","modified":1595245284000},{"_id":"source/_posts/一句代码搞定-Android-图片压缩.md","hash":"bc4c6708c94ff131340abdd945d87e584bf3136a","modified":1595245284000},{"_id":"source/_posts/命名规则-阿里巴巴Java开发.md","hash":"d0cfad9cc568edcfc092a3e2362e953f91e40d18","modified":1595245284000},{"_id":"source/_posts/将make的输出重定向到文件.md","hash":"f0f93bc37e066d4a5dbec58c10261713bce350cd","modified":1605757908641},{"_id":"source/_posts/升级Xcode后Qt问题了.md","hash":"edaf31e35228f2ca64a8b957510d4c117b7446ed","modified":1595245284000},{"_id":"source/_posts/使用Android-Studio的lint清除无用的资源文件.md","hash":"8f6e48c11025fb18f62b4030123679ca51d7d0cb","modified":1595244560000},{"_id":"source/_posts/常用-Git-命令清单.md","hash":"4d23d17c3d979d253ac553d09d894dfc6d9b30fc","modified":1618825418796},{"_id":"source/_posts/正则表达式--匹配电话号码和手机号码.md","hash":"7ef0a0b7f69e33ed7394626b7e6a9b66613e80e3","modified":1595244560000},{"_id":"source/_posts/查看被删的微信好友.md","hash":"56f444582dde1d752c92d399a506c0c0a8924950","modified":1595244560000},{"_id":"source/_posts/知道Android-中Gradle-的这些技巧，提升编译构建速度.md","hash":"b7ebdf062f54ad755fdc4e260ef892edb5563bb7","modified":1595245284000},{"_id":"source/_posts/音视频相关-协议.md","hash":"bc2a36de8b8702020372835cecf7ae85b4419148","modified":1595245284000},{"_id":"source/_posts/英语谚语.md","hash":"0b0bb3b6c09cfa2a9d32719cab161f2852765bde","modified":1595245284000},{"_id":"source/_posts/编程中的命名设计那点事.md","hash":"7cdd63a6a4bcdb98f7ff008ebf597600236cf975","modified":1595245284000},{"_id":"source/tags/index.md","hash":"2241424081ba2c89788e24a836cb14df1f1303de","modified":1595244560000},{"_id":"source/_posts/音视频相关-文件码率与大小计算.md","hash":"0e8b47a0059e9c9a0891d5a799037e3fcd69babb","modified":1595245284000},{"_id":"source/_posts/音视频相关-基础概念.md","hash":"666ae71672773211a7fc361df853cb0f721a524a","modified":1595245284000},{"_id":"source/images/ds.php","hash":"7069d9d3773c0c394867138e0a510a41ac0ead30","modified":1595245284000},{"_id":"source/_posts/解决git-clone-速度慢的问题.md","hash":"93f3562b458725688dbe01834aedaf2078383764","modified":1602818919973},{"_id":"source/images/embed.js","hash":"ad5ae707f1b7831187e414d613570e46939ab1c6","modified":1595245284000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1550646874000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1550646874000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1550646874000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1550646874000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1550646874000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1550646874000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1550646874000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1550646874000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1550646874000},{"_id":"themes/next/.git/logs/HEAD","hash":"9b9c29ee2864af255c35da8bc423640460075016","modified":1550646980000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1550646874000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1550646980000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1550646980000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1550646980000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1550646980000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1550646980000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1550646980000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1550646980000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1550646980000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1550646980000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1550646980000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1550646980000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1550646980000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1550646980000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1550646980000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1550646980000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1550646980000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1550646980000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1550646980000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1550646980000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1550646980000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1550646980000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1550646980000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1550646980000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1550646980000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1550646980000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1550646980000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1550646980000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1550646980000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1550646980000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1550646980000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1550646980000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1550646980000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1550646980000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1550646980000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1550646980000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1550646980000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1550646980000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1550646980000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1550646980000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1550646980000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1550646980000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1550646980000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1550646980000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1550646980000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1550646980000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550646980000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1550646980000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1550646980000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1550646980000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1550646980000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1550646980000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1550646980000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1550646980000},{"_id":"source/assets/blogImg/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1595245284000},{"_id":"source/assets/blogImg/avatar.jpg","hash":"b378c83a45b74762b7340e2cebd82d01ac4f35e3","modified":1595245284000},{"_id":"source/assets/blogImg/wechat.jpg","hash":"aa6d9dcdfebf4c889b3a1b18ff2f54981dcc1346","modified":1595245284000},{"_id":"source/assets/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1595245284000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1550646980000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1550646980000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1550646980000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1550646980000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1550646980000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1550646980000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1550646980000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1550646980000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1550646980000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1550646980000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1550646980000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1550646980000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1550646980000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1550646980000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1550646980000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1550646980000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1550646980000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1550646980000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1550646980000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1550646980000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1550646980000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1550646980000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1550646980000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1550646980000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1550646980000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1550646980000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1550646980000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1550646980000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1550646980000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1550646980000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1550646980000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1550646980000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1550646980000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1550646980000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1550646980000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1550646980000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1550646980000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1550646980000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1550646980000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1550646980000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1550646980000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1550646980000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1550646980000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1550646980000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1550646980000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1550646980000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1550646980000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1550646980000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1550646980000},{"_id":"source/assets/blogImg/20200915-vsbox.png","hash":"c6bf74034e6ebe1894c9cc9cd22e4e5869865efc","modified":1600166775111},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1550646980000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9b9c29ee2864af255c35da8bc423640460075016","modified":1550646980000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1550646980000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1550646980000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1550646980000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1550646980000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1550646980000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1550646980000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1550646980000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1550646980000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1550646980000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1550646980000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9b9c29ee2864af255c35da8bc423640460075016","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1550646980000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1550646980000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1550646980000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1550646980000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1550646980000},{"_id":"themes/next/.git/objects/pack/pack-13d3290b0a8eb9f96d0dc2f0c5a41d909767d903.idx","hash":"2b30388a8c5c0c181a2818b330b9b6b2e8c01ac4","modified":1550646980000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1550646980000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1550646980000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1550646980000},{"_id":"themes/next/.git/objects/pack/pack-13d3290b0a8eb9f96d0dc2f0c5a41d909767d903.pack","hash":"c9801325247a531b0818f555008af87249b5b3f1","modified":1550646980000},{"_id":"public/images/embed.js","hash":"709d1144376e28a1883c2d310552207e9012c776","modified":1618893076134},{"_id":"public/search.xml","hash":"7f749dc350bc3cfe2f38a693ce6109ab027c486c","modified":1618893076135},{"_id":"public/content.json","hash":"0bbbb0ee0ac89eb432ff795f3dacb09500ae6fa1","modified":1618893076211},{"_id":"public/about/index.html","hash":"bc4b5f3c3a17bb6a39778935906316ea531b37ae","modified":1618893076236},{"_id":"public/categories/chrome/index.html","hash":"232bc5c847ca408168d3b59832aab1448761ac6e","modified":1618893076238},{"_id":"public/categories/android/page/3/index.html","hash":"1b74b9ce07418bb496f1b26c61c78e8c357ac9d1","modified":1618893076236},{"_id":"public/categories/c/index.html","hash":"2c6e6c843a79c6e3e72a3dc0baa0aa1cd658164c","modified":1618893076238},{"_id":"public/categories/curl/index.html","hash":"2edb168c2e4515865779375a2ae17dc63d0bf3f6","modified":1618893076238},{"_id":"public/categories/mac/atom/index.html","hash":"aa20e5a700f61f8b2f2f473412ec01901c3bef85","modified":1618893076238},{"_id":"public/categories/java/index.html","hash":"dbc2a15ac46007c563636fa3eb4c2dcd58d4ef05","modified":1618893076238},{"_id":"public/categories/hexo/index.html","hash":"7c24e712fa1c0e51c02076d4b4549836edeeef78","modified":1618893076238},{"_id":"public/categories/linux/page/2/index.html","hash":"89f58336c083b1215676205e5dcbddd6b08a1336","modified":1618893076238},{"_id":"public/categories/常识/index.html","hash":"77ecafbc1068a0c173beca2f02cf78ad648d1b60","modified":1618893076239},{"_id":"public/categories/qt/index.html","hash":"400ce085562fcd8e3b1fd2a7a68350e49e90f21f","modified":1618893076239},{"_id":"public/categories/xcode/index.html","hash":"86374412f9c344377948eee724b30d7e04a14531","modified":1618893076239},{"_id":"public/categories/webrtc/index.html","hash":"8fa68714695c8e9d543dd5f2874cf759f17886f9","modified":1618893076239},{"_id":"public/categories/python/index.html","hash":"ef6efc8b64a92f42ec602f4589178a10d2e991d5","modified":1618893076239},{"_id":"public/categories/vscode/index.html","hash":"c49075d7f9f1bb06f55abccef88dfe17606fa462","modified":1618893076239},{"_id":"public/categories/english/index.html","hash":"0414b33ecc3b293e73bf9ed2cbda71325f231696","modified":1618893076239},{"_id":"public/categories/音视频/index.html","hash":"34da15cdeacf5e376ef12c8a61fb4da075f45ac0","modified":1618893076239},{"_id":"public/categories/github/index.html","hash":"14719b5d824563f6e7896ecf0bc7b0202e93be5a","modified":1618893076239},{"_id":"public/categories/mysql/index.html","hash":"869684bd398f4c7f0cfc6954e5ffe1f0e6bc396c","modified":1618893076240},{"_id":"public/archives/2016/04/index.html","hash":"40cde87fcd956867b37ce27bc07b796c950e0995","modified":1618893076244},{"_id":"public/archives/2016/05/index.html","hash":"1bf84e003eeee168799a6850fe93ad81f25d2bef","modified":1618893076244},{"_id":"public/archives/2016/06/index.html","hash":"8402a21a2eadd91b49635ebe2246e1663f7356ad","modified":1618893076244},{"_id":"public/archives/2016/09/index.html","hash":"5462b3a82fff1fc2ea0d060dc81662c941687839","modified":1618893076245},{"_id":"public/archives/2016/11/index.html","hash":"36d48a255c1c35deb26c7312cd95c7d6e3895cc6","modified":1618893076245},{"_id":"public/archives/2017/01/index.html","hash":"63a52014293531a493c9d8c0283d50bb5bd3b50d","modified":1618893076245},{"_id":"public/archives/2017/08/index.html","hash":"3e6e1ef55c3f4fb4c3b2293683e0c104da2910e1","modified":1618893076245},{"_id":"public/archives/2017/09/index.html","hash":"c5a4f0f86a70d6940b34b3c30c8177b1a2b4af7f","modified":1618893076245},{"_id":"public/archives/2018/03/index.html","hash":"6323f727d384554218296975e10720c12691d8f9","modified":1618893076245},{"_id":"public/archives/2018/04/index.html","hash":"7e5892d397f43f4c7b479865413567e0d6b7bb95","modified":1618893076245},{"_id":"public/archives/2018/05/index.html","hash":"22c6454811c84957ebdd7e1c671b1b8c4c0a3d39","modified":1618893076245},{"_id":"public/archives/2018/08/index.html","hash":"9b56b14ab4071e81a135314478f31fc89afb1f13","modified":1618893076245},{"_id":"public/archives/2019/02/index.html","hash":"aa6c0519a7f6771ff01002df4825b665b1308702","modified":1618893076245},{"_id":"public/archives/2019/03/index.html","hash":"d4d715c107b38feee2e23bc635ed6fe6f443c97f","modified":1618893076246},{"_id":"public/archives/2019/05/index.html","hash":"75b1308076951ad230bca47c843ab9764e9c3c81","modified":1618893076246},{"_id":"public/archives/2019/07/index.html","hash":"2bd810bba0c8c65f265b73bb4aaeb125120d2184","modified":1618893076246},{"_id":"public/archives/2019/09/index.html","hash":"50a77256ce1110dedbb4625905cddcaac0998a92","modified":1618893076246},{"_id":"public/archives/2020/01/index.html","hash":"dcd2f5bee0cc13ed04f8052179a527fb812f39bc","modified":1618893076246},{"_id":"public/archives/2020/03/index.html","hash":"8c94b61a00044d39ebc0b0d44b1c381d41e271ad","modified":1618893076246},{"_id":"public/archives/2020/07/index.html","hash":"28fb146fb10ca5f4d5daca07f16711a651f7653a","modified":1618893076246},{"_id":"public/archives/2020/09/index.html","hash":"216ab291803cdabd18617ff8d85a731e459c5676","modified":1618893076246},{"_id":"public/archives/2020/10/index.html","hash":"69ffc29b5707776fb98491c0bd4160cac9af0fe6","modified":1618893076246},{"_id":"public/archives/2020/11/index.html","hash":"bb58dc317c622f2bcb369d16537bf0551d3aff0d","modified":1618893076246},{"_id":"public/archives/2020/12/index.html","hash":"cb6c6088f1ec5bde780c11591851e0327cfb7474","modified":1618893076246},{"_id":"public/tags/qq/index.html","hash":"65f8a2638039f50c63a906bc23a02355e4cf3b86","modified":1618893076240},{"_id":"public/tags/intent/index.html","hash":"68b7bc63fec708be8fa5e23e9469f75835df26e8","modified":1618893076240},{"_id":"public/tags/ndk/index.html","hash":"0d53510e074a6c4fe05303641bda9304a51dd0d0","modified":1618893076240},{"_id":"public/tags/apktool/index.html","hash":"d22eed6959f9477cf75e9f278a1656055b70e063","modified":1618893076240},{"_id":"public/tags/jar/index.html","hash":"e83ac7b431082aaec75debf41626e87e5773d0de","modified":1618893076240},{"_id":"public/tags/c/index.html","hash":"bc4630b379dc55240b612cd3208a1d1a43e62c1c","modified":1618893076240},{"_id":"public/tags/atom/index.html","hash":"135793c02e8b034dd369264259fbcd0e79cad870","modified":1618893076240},{"_id":"public/tags/tools/index.html","hash":"a9f06b697f1e4dd26d466bf15666d29096f59c2b","modified":1618893076240},{"_id":"public/tags/RAML/index.html","hash":"92e2a1755b6b283a42aed77c2b5e5db29efa68dc","modified":1618893076240},{"_id":"public/tags/debug/index.html","hash":"cf55a9b2ef05605585e3d9b2a61a64e44039ebae","modified":1618893076241},{"_id":"public/tags/gdb/index.html","hash":"eeaccdc077d48f7bb9b4873ed6e702e83f8fac94","modified":1618893076241},{"_id":"public/tags/变量/index.html","hash":"4a0f675676e69bc9b2af5dd1b05f16e7b989b00e","modified":1618893076241},{"_id":"public/tags/chrome/index.html","hash":"e280a676d250b9a70387ebf661ae9025770a50e1","modified":1618893076241},{"_id":"public/tags/排序/index.html","hash":"ad303de5e80b8e92303294f4d265bc1df9b866ce","modified":1618893076241},{"_id":"public/tags/查找/index.html","hash":"6ee76d4deb8beeef8261230e89847300a3ad2c0e","modified":1618893076241},{"_id":"public/tags/linux/page/2/index.html","hash":"b82e47edc60c3b079e3aa66c67d8187d6399fab0","modified":1618893076242},{"_id":"public/tags/单向链表/index.html","hash":"615c0f2b94dc14132623e58fa15cd73700aaccb7","modified":1618893076242},{"_id":"public/tags/curl/index.html","hash":"d12feb3c9a4376a0c43fceca8b7b954be77747ae","modified":1618893076241},{"_id":"public/tags/integer/index.html","hash":"3513f8133663ae3708ef4f29947663730ffd53ac","modified":1618893076242},{"_id":"public/tags/hexo/index.html","hash":"d07fd5027ff67f43ada2123d495e05b5014d8258","modified":1618893076242},{"_id":"public/tags/math/index.html","hash":"c597a259e689a3424cb06d6f0ea4200d86c9bfbe","modified":1618893076242},{"_id":"public/tags/round/index.html","hash":"17cd3a72adf60ee867fd2ecc6673b30b329e6373","modified":1618893076242},{"_id":"public/tags/ag/index.html","hash":"774de215a7cfd40ea1ea372cede61755c1433fc7","modified":1618893076242},{"_id":"public/tags/mysql/index.html","hash":"b7888e341cf638eb98ebf91c11bd034c5599246e","modified":1618893076242},{"_id":"public/tags/数据库/index.html","hash":"8a71ec9e166f0c9b03d174b30173ac81b26e5e09","modified":1618893076242},{"_id":"public/tags/dns/index.html","hash":"e93aafb811830a0dd7584ad1a634dee6ae1bdbb6","modified":1618893076242},{"_id":"public/tags/缓存/index.html","hash":"7dc5a2f71db4760f43092f3bae91e2f793721e32","modified":1618893076242},{"_id":"public/tags/makefile/index.html","hash":"ecb57c33c9f5568b60f1118bed439733fa0fff62","modified":1618893076242},{"_id":"public/tags/sublime/index.html","hash":"94e5856555f581e03e296615f03bf6a4a95bdc25","modified":1618893076242},{"_id":"public/tags/usb/index.html","hash":"3ce63bc0864a2807dcb902c2e95606ff8f199dbd","modified":1618893076242},{"_id":"public/tags/常识/index.html","hash":"a33ea4bdea1475fd435feba1d0e7356591be12b0","modified":1618893076242},{"_id":"public/tags/vitualBox/index.html","hash":"26fd96e5c59842a02c73d333c50598648ba8e39f","modified":1618893076242},{"_id":"public/tags/qt/index.html","hash":"0bc74e0f265ca1866a8a5be9b33bf392fa3fe4fa","modified":1618893076243},{"_id":"public/tags/vim/index.html","hash":"84f3a2a6c0e9b7befdbcf58831f4d390faa21c85","modified":1618893076243},{"_id":"public/tags/stl/index.html","hash":"5eb3710bfd59ea239cd9d0708a2888da0bcc1069","modified":1618893076242},{"_id":"public/tags/xcode/index.html","hash":"4f78f661496c7b00dcad98ea13cf4810783edbb5","modified":1618893076243},{"_id":"public/tags/glide/index.html","hash":"fcd22fcb6f80196c1438370f10785739b790c0f4","modified":1618893076243},{"_id":"public/tags/appicon/index.html","hash":"2a86f232fd21afbf9600e490436e93af9b583e68","modified":1618893076243},{"_id":"public/tags/grep/index.html","hash":"0f7af0ed28774a68034a4938b3c6c6ad4eb2a960","modified":1618893076243},{"_id":"public/tags/process/index.html","hash":"cf2e1d7a3e4bcea2db0e54bf4578930b987d2ac6","modified":1618893076243},{"_id":"public/tags/webrtc/index.html","hash":"3e81ec5617dfda05a57b6de76503609f8ef6a7e4","modified":1618893076243},{"_id":"public/tags/depot-tool/index.html","hash":"20afef79794425de799bf81438fea16f7a235d2b","modified":1618893076243},{"_id":"public/tags/tar/index.html","hash":"33f00dc80b54bce82571dd94430ed8aa8b93b3fa","modified":1618893076243},{"_id":"public/tags/python/index.html","hash":"15dffcc7607031ffe84621c2676845bf3dc60cca","modified":1618893076243},{"_id":"public/tags/wireshark/index.html","hash":"78833fdf6118c9797ab05969a596da9f462dcb7d","modified":1618893076243},{"_id":"public/tags/keyboard/index.html","hash":"20089d3e79e0323719a84efe69a1a020f53253bd","modified":1618893076243},{"_id":"public/tags/vscode/index.html","hash":"915a15e9cf0e47092e045bf477bc788a2ab8e0b4","modified":1618893076243},{"_id":"public/tags/快捷键/index.html","hash":"aa228c5a53bb67949d22bc15d359878597cfd085","modified":1618893076243},{"_id":"public/tags/apk/index.html","hash":"49961e2be8955366190568c66c7f3580c732e784","modified":1618893076243},{"_id":"public/tags/backup/index.html","hash":"3134e711f64491bdbf1035c22eb6e3da628552f7","modified":1618893076243},{"_id":"public/tags/lint/index.html","hash":"8237a1eb6851d7b1fe194fce0f4756d97cf5fa2f","modified":1618893076243},{"_id":"public/tags/english/index.html","hash":"71bd496b20618c82f2a7a8a1609111803837ee03","modified":1618893076244},{"_id":"public/tags/命名/index.html","hash":"c7988ea1f93590d75a05367cb8d67da9dfecf1a5","modified":1618893076244},{"_id":"public/tags/音视频/index.html","hash":"6fbb114fcb968653d6220a74d09b9c62b07abfeb","modified":1618893076244},{"_id":"public/tags/码率/index.html","hash":"c621ac73c800db328dcf12b51ac22c0be2034530","modified":1618893076244},{"_id":"public/tags/github/index.html","hash":"b2bdd5244d3ad6ad8c0436436be90eef6dd8375d","modified":1618893076244},{"_id":"public/tags/file/index.html","hash":"bd8008a17acf8ebb6e49946ac4749ac3e6d2fd52","modified":1618893076244},{"_id":"public/tags/安全/index.html","hash":"7f94602f30f337af430c0e189cdf7d82c68ccb76","modified":1618893076244},{"_id":"public/tags/AsyncTask/index.html","hash":"009a5a92de660714601a94b8b1c0c5064394fcaa","modified":1618893076244},{"_id":"public/tags/EditText/index.html","hash":"a1b67008e61ac078f21c6310264107a82ffda2f2","modified":1618893076244},{"_id":"public/tags/WebView/index.html","hash":"67395d7158ba514edfd9daf2660f2cf40e195d3d","modified":1618893076244},{"_id":"public/tags/string/index.html","hash":"d439d96ea3fa9cbf1ca7fa8738ebc667df67a34f","modified":1618893076244},{"_id":"public/tags/视频协议/index.html","hash":"aaa51c286d2d10b764670d633cf1523991ea13c4","modified":1618893076244},{"_id":"public/tags/wechat/index.html","hash":"1733f01fbdbc7d5378edbc498f56ad4405433f59","modified":1618893076244},{"_id":"public/tags/微信/index.html","hash":"0d71490431897513d717beed39c49eb17bc32230","modified":1618893076244},{"_id":"public/tags/gyp/index.html","hash":"6673a68d82f1c7e70ab480cbf039f88d6ece6c1a","modified":1618893076244},{"_id":"public/categories/index.html","hash":"b25227011b47209d07425ff11f95f778088533ca","modified":1618893076246},{"_id":"public/tags/index.html","hash":"0b8e41d3f85918055362516adace0b2f9b8f3543","modified":1618893076246},{"_id":"public/2021/04/19/STL-Algorithm-整理/index.html","hash":"9e875fb6548f5d2c63f23be2cc851d1d535f6d6c","modified":1618893076246},{"_id":"public/2021/04/19/std-string常用函数/index.html","hash":"f803a434913b039a18c2fb2e582432f5633a7aa4","modified":1618893076246},{"_id":"public/2020/12/28/CURL状态码列表/index.html","hash":"c08fd873012815cf897d3bb1f3a3ea7ef0d1a3e1","modified":1618893076247},{"_id":"public/2020/11/19/将make的输出重定向到文件/index.html","hash":"19f6617b8b52d71a29dcda4968832103e98b282e","modified":1618893076247},{"_id":"public/2021/04/15/C-文件读写详解/index.html","hash":"d718e995249a4cdb4dff1fe4ed0de0b04634f674","modified":1618893076247},{"_id":"public/2020/11/19/linux添加service服务，设置自启动/index.html","hash":"804c28d2729bf501aabb5dcf8d2b45ebb7f84ddf","modified":1618893076247},{"_id":"public/2020/10/13/XCode-编写C-引用头文件无自动补全/index.html","hash":"4a5429c5fcd6805fed3bebbef9996d32da2af278","modified":1618893076248},{"_id":"public/2020/09/15/解决git-clone-速度慢的问题/index.html","hash":"cee30a42f2645a07506281b2c14a196958def80f","modified":1618893076248},{"_id":"public/2020/09/15/VirtualBox-for-mac设置虚拟机硬盘大小/index.html","hash":"f78a74a444e14d529c5c18bb8149317f8244f584","modified":1618893076248},{"_id":"public/2020/09/11/Linux-禁用账户/index.html","hash":"ae9bfb53c2b57bfdd8d59b8b696694266527c0d2","modified":1618893076248},{"_id":"public/2020/07/20/Xcode升级11，-iostream-file-not-found问题/index.html","hash":"553d66efad61a4461b9893781212d042651a2820","modified":1618893076248},{"_id":"public/2020/03/08/tar压缩和解压缩打包命令/index.html","hash":"57bb2f8694c3bf73605a43102eb0e597286415ab","modified":1618893076248},{"_id":"public/2019/09/29/vscode-Visual-Studio-Code-工具快捷键/index.html","hash":"0ccd0472141496c3ff92fca1fc3d40fe3b59f284","modified":1618893076248},{"_id":"public/2019/09/24/USB数据线和充电线有什么不同/index.html","hash":"60ecaf72eb120571865928f1f172d027e3ded28e","modified":1618893076248},{"_id":"public/2019/09/24/Linux搜索命令ag/index.html","hash":"54123ca69b3d828f7c40e89e026935e9ab668a9f","modified":1618893076248},{"_id":"public/2020/01/08/Chrome访问Https无法继续/index.html","hash":"29b21bf64d27bafa77f4f220f1d9ca2cd8ca0203","modified":1618893076248},{"_id":"public/2019/07/26/Git命令生成Patch和打补丁/index.html","hash":"92f45f8470d31e567c8f114e4c925978833434a1","modified":1618893076248},{"_id":"public/2019/07/12/mac下安装depot-tools/index.html","hash":"2070bc8c9980a6b31330165e9cf090591db56490","modified":1618893076249},{"_id":"public/2019/07/12/vpn下git-clone的正确方式/index.html","hash":"cca5d15044e40404f283951b955108e96fe3f577","modified":1618893076249},{"_id":"public/2019/05/22/Makefile经典教程/index.html","hash":"a09facf5bf5936a3823eb41dd2e85a0163b48568","modified":1618893076249},{"_id":"public/2019/04/22/音视频相关-协议/index.html","hash":"9735575519a632e211be9d452b2e1b3e3304cfae","modified":1618893076249},{"_id":"public/2019/04/22/音视频相关-文件码率与大小计算/index.html","hash":"775001baa78dcc462d96045a263382de1dbfb768","modified":1618893076249},{"_id":"public/2019/04/22/音视频相关-基础概念/index.html","hash":"7c9a46eeef4472da1a83f9f7011dfeb3318b50eb","modified":1618893076249},{"_id":"public/2019/04/16/C-OSI参考模型/index.html","hash":"fdb45dd121381584edda6ddc4c1306250516e2b8","modified":1618893076249},{"_id":"public/2019/04/16/C-流操作的控制/index.html","hash":"35a6b97c31529c9d689d0027cabfc78684613e4f","modified":1618893076249},{"_id":"public/2019/04/16/C-整型变量范围/index.html","hash":"53eaca59ca8a9b2ed586cc912b45c12f545b9242","modified":1618893076249},{"_id":"public/2019/03/22/C-常用的程序库/index.html","hash":"ea02b2b678df8f6609fc3fe5aa274fc6f5074fbc","modified":1618893076249},{"_id":"public/2019/03/21/C-调试技巧/index.html","hash":"2491ba186756c1c65221be754482f099df0b334e","modified":1618893076249},{"_id":"public/2019/02/21/C语言-单向链表/index.html","hash":"ae07d26f92082886cf5f230bf38ca8469516f865","modified":1618893076249},{"_id":"public/2019/02/21/C语言-排序与查找/index.html","hash":"9eb680a9eaea468d448e38ad5945a10a53d8b05d","modified":1618893076249},{"_id":"public/2019/01/07/JNI-日志/index.html","hash":"b8f30da191a100ae3b8a2255e10ceb5098240c03","modified":1618893076250},{"_id":"public/2019/01/04/JNI-局部和全局引用/index.html","hash":"48dd8282582e97eb343204f8a2e386572d11f4c8","modified":1618893076250},{"_id":"public/2019/02/18/C语言-文件操作/index.html","hash":"0b30eda141eb8875d8eec560385fde6fa34f0a6b","modified":1618893076249},{"_id":"public/2019/01/04/JNI-异常处理/index.html","hash":"15dd815149b3c96520512769a33c839bf7890493","modified":1618893076250},{"_id":"public/2019/01/03/JNI-数据类型/index.html","hash":"8bf20971130c9d4bf1b3cc4a858b25235076278e","modified":1618893076250},{"_id":"public/2018/12/28/Android-NDK结构/index.html","hash":"f4be91a7556a8d983c324e1529eba08f0e6c78df","modified":1618893076250},{"_id":"public/2018/12/10/linux下查看监听端口对应的进程/index.html","hash":"a1f4429e40c8fb4053806cd11ffe4eec5e590b2f","modified":1618893076250},{"_id":"public/2018/12/10/wireshark过滤器规则/index.html","hash":"a88f8429041c169ccf9a23771cdf3742b1be15df","modified":1618893076250},{"_id":"public/2018/12/10/git-submodule的使用/index.html","hash":"822de5f7145d505fe261ccc04200530f5a5367ff","modified":1618893076250},{"_id":"public/2018/12/07/Android-mk简介/index.html","hash":"3998f35425e68c6130506d71777ba6b7765a31cd","modified":1618893076250},{"_id":"public/2018/08/15/Sublime快捷键/index.html","hash":"1a0e340b6164778366ffe3764a9cab4e15e2b4ae","modified":1618893076250},{"_id":"public/2018/05/18/Vim-Cheat-Sheet/index.html","hash":"c91e5934fd050f5c496c7e710d60a6e87d44ea3c","modified":1618893076250},{"_id":"public/2018/04/11/AsyncTask源码了解/index.html","hash":"8d5c2d8201df56b2610994db8ef916e1d048e0d1","modified":1618893076250},{"_id":"public/2018/04/09/从Android手机内提取已安装的apk文件/index.html","hash":"39cfdcad15c8ba0c987a3785f309b2d64ca5f476","modified":1618893076250},{"_id":"public/2018/04/08/Apktool反编译/index.html","hash":"a334653b432bf2daff5cc3eaf605f039e623d0cf","modified":1618893076250},{"_id":"public/2018/03/13/Integer比较的误区/index.html","hash":"7796915d8ff8a856642e414d19d50a0ccff1f385","modified":1618893076250},{"_id":"public/2018/03/13/AndroidStudio打包Jar/index.html","hash":"f9fc88c0b5ee947ec27538ffc51fe9ed921d8eb1","modified":1618893076250},{"_id":"public/2017/12/25/Gyp-学习记录/index.html","hash":"ed2ea4fd0b06a1be21157c59153a1d7096ae1a60","modified":1618893076250},{"_id":"public/2017/12/05/关于Android中软键盘与布局的问题/index.html","hash":"f040528e8ee69587125909eeeae22556ce04d358","modified":1618893076251},{"_id":"public/2017/12/05/Android中通过反射获取资源ID/index.html","hash":"29135dfc4de6d1329e00738f22ebd3435e5e1656","modified":1618893076251},{"_id":"public/2017/12/05/iOS设置AppIcon-LauncherImages尺寸和位置/index.html","hash":"81cf332d45f52bb89ef9c8ef76ac83c65abf58b7","modified":1618893076251},{"_id":"public/2017/11/16/MySQL常用命令总结/index.html","hash":"52700b186c96aba244e51c3126d31337248c5098","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-Keyboard/index.html","hash":"74424850c34e23b809756c8789e2a1bcd1cc2150","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-UIImage-CIImage-CGImageRef/index.html","hash":"c339b632e1bf1a062b0bdfc52e2b9bd300c0b46b","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-截屏/index.html","hash":"a2948da204389602d221ab27ae0cd8845d22884f","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-常用组件/index.html","hash":"1623d563d66be383fa746b9133b8006a2df5d457","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-UILabel/index.html","hash":"a31a9186cecbb83ec724a5e7f137db75d14ea0bc","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-GCD/index.html","hash":"aae33699b1996b31320a30c9c0107a62fa325f96","modified":1618893076251},{"_id":"public/2017/09/11/Github-安全类Repo收集整理-转载/index.html","hash":"44d6cb3552d964aafad44944777189c71e37bbb5","modified":1618893076251},{"_id":"public/2017/11/15/iPhone开发-leftBarButtonItem/index.html","hash":"7b673299b0e188e85aabf0fa5be308167c06552c","modified":1618893076251},{"_id":"public/2017/08/08/命名规则-阿里巴巴Java开发/index.html","hash":"bd4f29adaf0cd856cdb0ce94ea7450536f6afd12","modified":1618893076251},{"_id":"public/2017/01/23/升级Xcode后Qt问题了/index.html","hash":"4bcaa5f3c796996fca7b5575cab583edb68cb850","modified":1618893076251},{"_id":"public/2016/11/14/Qt-Creator常用快捷键/index.html","hash":"6ea8525fb2ad25f292076a97d136c84ba4f2497d","modified":1618893076251},{"_id":"public/2016/09/01/grep-find命令用法/index.html","hash":"f55d2432b0188286caa7b8b72860f07d844557c0","modified":1618893076252},{"_id":"public/2017/01/03/gitignore文件不起作用/index.html","hash":"d00bf079fc2b8e3eb2bcc352f5a7f74139e0ce4d","modified":1618893076251},{"_id":"public/2016/08/29/一句代码搞定-Android-图片压缩/index.html","hash":"28ba36633aa006abfd64301b186774af132cb299","modified":1618893076252},{"_id":"public/2016/09/01/EditText-的使用及值得注意的地方/index.html","hash":"c391dbd82cf28229ccfc4274ca81d1b15141ef81","modified":1618893076252},{"_id":"public/2016/08/29/glide的简单用法/index.html","hash":"60feadf4c40a11df9acfa6cc04f76f94af9acd82","modified":1618893076252},{"_id":"public/2016/08/29/Git忽略文件-ignore模板（Android-Studio）/index.html","hash":"c332d1d9c08d0d34282f3d393e735ec8e7a1c343","modified":1618893076252},{"_id":"public/2016/08/29/Linux命令wc的详细用法/index.html","hash":"f0be3cb20acd91a12dff7c9688c98eae4b183b4c","modified":1618893076252},{"_id":"public/2016/08/29/linux之cut用法/index.html","hash":"626bc151cd728dd193efa28db49e9e62ee5cbce2","modified":1618893076252},{"_id":"public/2016/08/24/python字符串的去除空格函数-字符串的内建函数/index.html","hash":"e4cc38f880f96694d03731b89224a79cadd36c69","modified":1618893076252},{"_id":"public/2016/06/07/知道Android-中Gradle-的这些技巧，提升编译构建速度/index.html","hash":"58557198fd8e92d3c9363d4b16570e35e1e7baad","modified":1618893076252},{"_id":"public/2016/05/30/编程中的命名设计那点事/index.html","hash":"0c2759d17870d992923b9ce8fd303dc12f281f59","modified":1618893076252},{"_id":"public/2016/05/19/WebView调用本地的图片选择/index.html","hash":"300908bd38f6ccb613f5f97709eb91a754e435cd","modified":1618893076252},{"_id":"public/2016/05/18/Hexo常用命令记录/index.html","hash":"0575d755a18bfa1c08688d6b0e0d3ba83ed3b893","modified":1618893076252},{"_id":"public/2016/04/15/Android-iOS打开手机QQ与指定聊天界面/index.html","hash":"25def759e739404878a3a715522a41776cec153a","modified":1618893076252},{"_id":"public/2016/04/01/查看被删的微信好友/index.html","hash":"a6f2037981bc29aa2dcdad7b9bcd6a888def9fc5","modified":1618893076252},{"_id":"public/2016/03/30/Java中Math类的一些常用方法/index.html","hash":"e540ac3d43c56be1aaa22af4c3c3deb87a7e2ade","modified":1618893076252},{"_id":"public/2016/03/28/Atom-编辑器快捷键列表汇总整理/index.html","hash":"1a65bc0cc7f880ae7680fbfdeec308071750da37","modified":1618893076253},{"_id":"public/2016/03/22/使用Android-Studio的lint清除无用的资源文件/index.html","hash":"d629f2c3abd8bf60eeb0d9fb9875455e41203dff","modified":1618893076253},{"_id":"public/2016/03/20/Mac-OS-X-下-TAR-GZ-方式安装-MySQL-5-7/index.html","hash":"b3232bbb7fe411d5f43224d5e6d248145c97c97b","modified":1618893076253},{"_id":"public/2016/03/14/Android-mk、Application-mk/index.html","hash":"0c6699bc8879343edd1dc01ff4cc5dc172b056b6","modified":1618893076253},{"_id":"public/2016/03/18/Mac-清除-DNS-缓存/index.html","hash":"ded3bd07e2a2c903911248bbb1dc70969add7c09","modified":1618893076253},{"_id":"public/2016/03/14/常用-Git-命令清单/index.html","hash":"85db59c8ffe9f0b2ed518585083be0b60e3f0f28","modified":1618893076253},{"_id":"public/2016/03/12/英语谚语/index.html","hash":"c6d7b0f095328edf591bb975a8678ae7a34a2516","modified":1618893076253},{"_id":"public/2016/03/10/Android-TextView-部分字体设置颜色或大小/index.html","hash":"cde1d9f09efbd9664e9befc4120e5c68d31078db","modified":1618893076253},{"_id":"public/2016/03/09/Mac下，添加Android-adb命令/index.html","hash":"4d63a9696645ed35eb27f08e99ee215239901373","modified":1618893076253},{"_id":"public/2016/03/09/mac系统如何显示和隐藏文件/index.html","hash":"6318c5a8072255d88d086d8f6c0d243d4772b43a","modified":1618893076253},{"_id":"public/2016/03/03/正则表达式--匹配电话号码和手机号码/index.html","hash":"8a9f77af2469cdd9200c80d8650c82e09392d642","modified":1618893076253},{"_id":"public/index.html","hash":"0131806243e7f9a719fd8a0468ca05cfac401492","modified":1618893076254},{"_id":"public/page/2/index.html","hash":"b29db129b4af7572644176cfba286a138086d0db","modified":1618893076254},{"_id":"public/page/3/index.html","hash":"60fc216f95121c076cd201ede9a26bd040979ece","modified":1618893076254},{"_id":"public/page/4/index.html","hash":"a4022208e09549595eb5f66bb41e3d02ad1fe906","modified":1618893076254},{"_id":"public/page/5/index.html","hash":"7836971fa48605d670c9997436cb99ddeab03509","modified":1618893076254},{"_id":"public/page/6/index.html","hash":"66f7191b2b74b0a8aba2f2f8fb2d7741e48c7b01","modified":1618893076254},{"_id":"public/page/7/index.html","hash":"4425dcc1419acb3bd7df97fa702575a7775e7a06","modified":1618893076254},{"_id":"public/page/8/index.html","hash":"baf4d83d58a769bcc6af6c2fae8f5cc022479cb5","modified":1618893076254},{"_id":"public/page/9/index.html","hash":"ef5048a3095a6c51e5a4d414fdebfab046121c67","modified":1618893076254},{"_id":"public/categories/android/index.html","hash":"5e749eca4a883443f885b8b0e921313931bbe15a","modified":1618893076253},{"_id":"public/categories/cpp/index.html","hash":"7603bfd996cc7f2a9a46d2f6a508a46bbc871b9c","modified":1618893076253},{"_id":"public/categories/android/page/2/index.html","hash":"5d429ea1b61e86be0f16f2d8ccc383fd8948c2de","modified":1618893076253},{"_id":"public/categories/mac/index.html","hash":"533c2837364f5d1e12190e7f9780de26fa965803","modified":1618893076253},{"_id":"public/categories/git/index.html","hash":"9670ef5b553ee82f08e5ee0a2a2cdd81e37bfde1","modified":1618893076254},{"_id":"public/categories/linux/index.html","hash":"4def988da03ae285480ad05242443f87516c88d2","modified":1618893076254},{"_id":"public/categories/ios/index.html","hash":"65d71338da38400a81950cdc5dd54d945c45e2b2","modified":1618893076254},{"_id":"public/archives/index.html","hash":"5b1ef75b76d6484bbe3dd23d237d0191c31f5b06","modified":1618893076255},{"_id":"public/archives/2016/index.html","hash":"9bf9fce6511e14f42d8cf4207d53415f4b295891","modified":1618893076255},{"_id":"public/archives/2016/03/index.html","hash":"fda6838063ae04a0ddc1eebd030b49447ada636c","modified":1618893076256},{"_id":"public/archives/2016/08/index.html","hash":"729993b8ea2e4d4ba17a5eab56b0989e6abce53a","modified":1618893076256},{"_id":"public/archives/2017/index.html","hash":"b08fabfd809d44c705b99853953ce99419099c38","modified":1618893076256},{"_id":"public/archives/2017/11/index.html","hash":"934528db9f95f4b555232e3865f3fbc66a43c3b8","modified":1618893076256},{"_id":"public/archives/2017/12/index.html","hash":"08ca71b287da4efb86cc484d53dc29c628038655","modified":1618893076256},{"_id":"public/archives/2018/index.html","hash":"0a6b5c3c5ba61e8ca6918df968dfc6a238f2db05","modified":1618893076256},{"_id":"public/archives/2018/12/index.html","hash":"493b177f2a094f5df7daf6fba4f4fc8e233dea09","modified":1618893076256},{"_id":"public/archives/2019/index.html","hash":"0e8644ee0ab1b1c39cf4f823bd21d7d7da5c0ad1","modified":1618893076256},{"_id":"public/archives/2019/01/index.html","hash":"34a356c90e539c90b4caf19693d538e3e83b68e9","modified":1618893076257},{"_id":"public/archives/2019/04/index.html","hash":"31e79870e4c286a704bb8a2c7f5e6b75bf4cbdd6","modified":1618893076257},{"_id":"public/archives/2020/index.html","hash":"5fc6d6ee9fc1fa2c235d89b84aa79950e5fcf529","modified":1618893076257},{"_id":"public/archives/2021/04/index.html","hash":"5ce87def173547e6d7adca4237b8abd141c82699","modified":1618893076257},{"_id":"public/archives/2021/index.html","hash":"d6b63e8ce1253cd52316665167259630eb400437","modified":1618893076257},{"_id":"public/tags/android/index.html","hash":"0176a57343d5666827cc62a1e684c6802ddc404f","modified":1618893076254},{"_id":"public/tags/android/page/2/index.html","hash":"e592c7f4a869176d089c75800a5323ab3a00ac18","modified":1618893076254},{"_id":"public/tags/jni/index.html","hash":"f6e07d53fbf367e26282571f9af1c41b199fb954","modified":1618893076254},{"_id":"public/tags/mac/index.html","hash":"724dfc45881dbb76ad3640fc237b5aa15b9a004c","modified":1618893076254},{"_id":"public/tags/linux/index.html","hash":"49badb3989e6c8635756fcccc55ef8606fb06d3c","modified":1618893076255},{"_id":"public/tags/git/index.html","hash":"d5622081dd87ee8fe20617a4928683452bfbfaa1","modified":1618893076255},{"_id":"public/tags/java/index.html","hash":"b043cbdaa06e77e6f2c1d9578ab2887d0315ad8f","modified":1618893076255},{"_id":"public/tags/ios/index.html","hash":"72721e41178672100d234d4dbd7946e7496107d9","modified":1618893076255},{"_id":"public/tags/c/page/2/index.html","hash":"4fde5dc7bfd07c4fdb285a9147d1042edf74503d","modified":1618893076240},{"_id":"public/2021/04/19/C-语言ctime库/index.html","hash":"ecff09c2beb5e0d6d1e9a30bc49ce680fa653b1f","modified":1618893076246},{"_id":"public/page/10/index.html","hash":"eaab945ec54a8ca70bd55665484ca3abb8bfc0f0","modified":1618893076254},{"_id":"public/images/ds.php","hash":"7069d9d3773c0c394867138e0a510a41ac0ead30","modified":1618893076277},{"_id":"public/CNAME","hash":"022afafd11ce9e1d8dadaff5c334361feed80389","modified":1618893076277},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1618893076277},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1618893076277},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1618893076277},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1618893076277},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1618893076277},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1618893076277},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1618893076277},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1618893076277},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1618893076277},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1618893076277},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1618893076277},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1618893076277},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1618893076277},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1618893076277},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1618893076277},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1618893076277},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1618893076277},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1618893076277},{"_id":"public/assets/blogImg/wechat.jpg","hash":"aa6d9dcdfebf4c889b3a1b18ff2f54981dcc1346","modified":1618893076277},{"_id":"public/assets/blogImg/avatar.jpg","hash":"b378c83a45b74762b7340e2cebd82d01ac4f35e3","modified":1618893076277},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1618893076277},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1618893076277},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1618893076278},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1618893076278},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1618893076278},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1618893076278},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1618893076278},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1618893076278},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1618893076278},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1618893076278},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1618893076278},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1618893076278},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1618893076278},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1618893076278},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1618893076278},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1618893076752},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1618893076757},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1618893076771},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1618893076772},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1618893076772},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1618893076771},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1618893076772},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1618893076772},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1618893076772},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1618893076772},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1618893076772},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1618893076773},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1618893076772},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1618893076773},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1618893076773},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1618893076773},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1618893076773},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1618893076773},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1618893076773},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1618893076773},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1618893076773},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1618893076774},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1618893076774},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1618893076774},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1618893076774},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1618893076774},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1618893076774},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1618893076774},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1618893076774},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1618893076774},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1618893076774},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1618893076774},{"_id":"public/css/main.css","hash":"63f2170b4fa459df50ffa89f66039c4528f5e22a","modified":1618893076774},{"_id":"public/assets/blogImg/20200915-vsbox.png","hash":"c6bf74034e6ebe1894c9cc9cd22e4e5869865efc","modified":1618893076774},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1618893076774},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1618893076774},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1618893076774},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1618893076782},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1618893076782},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1618893076783},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1618893076783},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1618893076783},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1618893076783},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1618893076783},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1618893076783},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1618893076787},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1618893076787},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1618893076792},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1618893076792},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1618893076798},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1618893076800},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1618893076799},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1618893076800},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1618893076800},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1618893076800},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1618893076800},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1618893076804},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1618893076804},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1618893076805},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1618893076815},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1618893076825},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1618893076828},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1618893076829},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1618893076840},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1618893076848},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1618893076849}],"Category":[{"name":"android","_id":"cknpirxeg0004sifyo7b2b2su"},{"name":"cpp","_id":"cknpirxeq000nsifyf4fgiqpt"},{"name":"mac","_id":"cknpirxew001asifyqza37uk6"},{"name":"chrome","_id":"cknpirxex001jsifykl84hmo2"},{"name":"c","_id":"cknpirxf0001psifyocnvgpjn"},{"name":"curl","_id":"cknpirxf2001vsifyl6u8b1x3"},{"name":"atom","parent":"cknpirxew001asifyqza37uk6","_id":"cknpirxf50024sifydud441qr"},{"name":"git","_id":"cknpirxf9002gsifyvx264mgt"},{"name":"java","_id":"cknpirxfc002usifywy1di4uu"},{"name":"hexo","_id":"cknpirxfe0030sifyydfyrgky"},{"name":"linux","_id":"cknpirxfi003fsifyhqxdcj6l"},{"name":"常识","_id":"cknpirxfp0047sifysx09yqfh"},{"name":"qt","_id":"cknpirxfq004fsifyba9ob691"},{"name":"xcode","_id":"cknpirxfu004rsifyvrafq8fh"},{"name":"ios","_id":"cknpirxfw0051sifyzk0odc1n"},{"name":"webrtc","_id":"cknpirxge006nsifyeutr1cgh"},{"name":"python","_id":"cknpirxgf006tsify4u4st6sp"},{"name":"vscode","_id":"cknpirxgf0070sify8dsxknto"},{"name":"english","_id":"cknpirxgg0076sifym4ickwzi"},{"name":"音视频","_id":"cknpirxgg007csify2lcfoz0c"},{"name":"github","_id":"cknpirxi300brsifyrk9dm2nt"},{"name":"mysql","_id":"cknpirxi900c8sifyplunw3tw"}],"Data":[],"Page":[{"title":"关于","date":"2019-02-20T06:48:44.000Z","_content":"\nemail: lyuzhao@sina.com\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-02-20 14:48:44\n---\n\nemail: lyuzhao@sina.com\n\n\n\n","updated":"2020-07-20T11:41:24.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cknpirxe80000sifywrq9b0b1","content":"<p>email: <a href=\"mailto:lyuzhao@sina.com\" target=\"_blank\" rel=\"noopener\">lyuzhao@sina.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>email: <a href=\"mailto:lyuzhao@sina.com\" target=\"_blank\" rel=\"noopener\">lyuzhao@sina.com</a></p>\n"},{"title":"categories","date":"2016-03-10T03:02:47.000Z","type":"categories","comments":1,"_content":"\n\n","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-03-10 11:02:47\ntype: \"categories\"\ncomments: true\n---\n\n\n","updated":"2020-07-20T11:29:20.000Z","path":"categories/index.html","layout":"page","_id":"cknpirxee0002sifyc3pkjzcj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-03-10T03:02:47.000Z","type":"tags","comments":1,"_content":"\n\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-10 11:02:47\ntype: \"tags\"\ncomments: true\n---\n\n\n","updated":"2020-07-20T11:29:20.000Z","path":"tags/index.html","layout":"page","_id":"cknpirxeh0006sifyq044bdcu","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"!function(e,t,s){function a(){return c.short_name?g+\"//\"+c.short_name+\".\"+S.DOMAIN:S.REMOTE}function i(){function t(){for(var t;t=y.shift();){var a=t.url,i=new s(t.title,{dir:\"auto\",icon:t.iconUrl,body:t.body});try{i.onclick=function(){e.focus(),h.href=a,i.close()}}catch(r){}setTimeout(function(){i.close&&i.close()},8e3)}}var s=e.Notification;\"Notification\"in e&&\"denied\"!==s.permission&&(\"granted\"===s.permission&&t(),s.requestPermission(function(e){\"granted\"===e&&t()}))}function r(){return 0==nt.data.user_id}function n(e){S.theme=e,\"none\"!=e&&o.injectStylesheet(S.STATIC_URL+\"/styles/embed\"+(e?\".\"+e+\".css?\"+M[e]:\".\"+short_name)+\".css\")}var o={},d=t.getElementsByTagName(\"head\")[0]||t.getElementsByTagName(\"body\")[0];if(o.extend=function(e,t){for(var s in t)e[s]=t[s];return e},o.injectScript=function(a,i){var r=t.createElement(\"script\"),n=t.head||t.getElementsByTagName(\"head\")[0]||t.documentElement;r.type=\"text/javascript\",r.src=a,r.async=\"async\",r.charset=\"utf-8\",i&&(r.onload=r.onreadystatechange=function(t,a){var o=a||!r.readyState||/loaded|complete/.test(r.readyState);o&&(r.onload=r.onreadystatechange=null,n&&r.parentNode&&n.removeChild(r),r=s,a||i.call(e))}),n.insertBefore(r,n.firstChild)},o.injectStylesheet=function(e){var s=t.createElement(\"link\");s.type=\"text/css\",s.rel=\"stylesheet\",s.href=e,d.appendChild(s)},o.injectStyle=function(e){var s=t.createElement(\"style\");return s.type=\"text/css\",d.appendChild(s),e=e.replace(/\\}/g,\"}\\n\"),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(t.createTextNode(e)),s},o.getCookie=function(e){for(var a,i,r,n=\" \"+e+\"=\",o=t.cookie.split(\";\"),d=0;d<o.length;d++)if(a=\" \"+o[d],i=a.indexOf(n),i>=0&&i+n.length==(r=a.indexOf(\"=\")+1))return decodeURIComponent(a.substring(r,a.length).replace(/\\+/g,\"\"));return s},o.param=function(e){var t=[];for(var a in e)e[a]!=s&&t.push(a+\"=\"+encodeURIComponent(e[a]));return t.join(\"&\")},o.cssProperty=function(e,s){var a=(t.body||t.documentElement).style;if(\"undefined\"==typeof a)return!1;if(\"string\"==typeof a[e])return s?e:!0;for(var i=[\"Moz\",\"Webkit\",\"ms\"],e=e.charAt(0).toUpperCase()+e.substr(1),r=0;r<i.length;r++)if(\"string\"==typeof a[i[r]+e])return s?i[r]+e:!0},!e.DUOSHUO){for(var l in Object.prototype)return alert(\"Object.prototype 不为空，请不要给 Object.prototype 设置方法\");var c,u,p=e.JSON,h=e.location,f=e.XMLHttpRequest,m=p&&p.stringify&&e.localStorage,v=e.navigator.userAgent,g=\"https:\"==t.location.protocol?\"https:\":\"http:\",b=0,y=[],_=u=function(){function e(e){return t[e]||\"&amp;\"}var t={\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},s=/&(?!\\w+;)|[<>\"'`]/g,a=/[&<>\"'`]/;return function(t){return null==t||t===!1?\"\":a.test(t)?t.replace(s,e):t}}(),k=function(e){if(e.match(/^(http|https):/))return e;var s=t.createElement(\"a\");return s.href=e,P.hrefNormalized?s.href:s.getAttribute(\"href\",4)},w=function(e){return function(){return e}},x=function(){for(var e={},t=0;t<arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var s=o.param(e);return s?\"?\"+s:\"\"},T=function(){var e=o.getCookie(\"duoshuo_token\");return e?{jwt:e}:c.remote_auth?{short_name:c.short_name,remote_auth:c.remote_auth}:s},q=function(){if(!c&&(c=e.duoshuoQuery)){if(!c.short_name||\"your_duoshuo_short_name\"===c.short_name)return c=s,void alert(\"你还没有设置多说域名(duoshuoQuery.short_name)，填入已有域名或创建新站点：http://duoshuo.com/create-site/\");it.trigger(\"queryDefined\")}return c},C=function(e){return e&&e.error&&e.warn?e:{error:function(){},log:function(){},warn:function(){}}}(e.console),S=e.DUOSHUO={sourceName:{weibo:\"新浪微博\",qq:\"QQ\",qzone:\"QQ空间\",qqt:\"腾讯微博\",renren:\"人人网\",douban:\"豆瓣网\",kaixin:\"开心网\",sohu:\"搜狐微博\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},serviceNames:{weibo:\"微博\",qq:\"QQ\",douban:\"豆瓣\",renren:\"人人\",kaixin:\"开心\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},parseDate:function(e){return e.parse(\"2011-10-28T00:00:00+08:00\")&&function(t){return new e(t)}||e.parse(\"2011/10/28T00:00:00+0800\")&&function(t){return new e(t.replace(/-/g,\"/\").replace(/:(\\d\\d)$/,\"$1\"))}||e.parse(\"2011/10/28 00:00:00+0800\")&&function(t){return new e(t.replace(/-/g,\"/\").replace(/:(\\d\\d)$/,\"$1\").replace(\"T\",\" \"))}||function(t){return new e(t)}}(Date),fullTime:function(e){var t=S.parseDate(e);return t.getFullYear()+\"年\"+(t.getMonth()+1)+\"月\"+t.getDate()+\"日 \"+t.toLocaleTimeString()},elapsedTime:function(e){var t=S.parseDate(e),s=new Date,a=(s-b-t)/1e3;return 10>a?\"刚刚\":60>a?Math.round(a)+\"秒前\":3600>a?Math.round(a/60)+\"分钟前\":86400>a?Math.round(a/3600)+\"小时前\":(s.getFullYear()==t.getFullYear()?\"\":t.getFullYear()+\"年\")+(t.getMonth()+1)+\"月\"+t.getDate()+\"日\"},compileStyle:function(e){var t=\"\",s={};if(s.textbox=\"#ds-thread #ds-reset .ds-replybox .ds-textarea-wrapper\",!e)return t;for(var a in e)t+=s[a]+\"{\"+e[a]+\"}\\n\";return t},init:function(e,t){e&&!O[e]&&(O[e]=t||{type:\"EmbedThread\"}),S.initView&&S.initView()}},j=t.all,P=S.support=function(){var s=t.createElement(\"div\");s.innerHTML='<a href=\"/a\" style=\"opacity:.55;\">a</a><input type=\"checkbox\"/>';var a=s.getElementsByTagName(\"a\")[0],i=s.getElementsByTagName(\"input\")[0],r={placeholder:\"placeholder\"in i,touch:\"ontouchstart\"in e||\"onmsgesturechange\"in e,opacity:/^0.55$/.test(a.style.opacity),hrefNormalized:\"/a\"===a.getAttribute(\"href\"),iOS:v.match(/ \\((iPad|iPhone|iPod);( U;)? CPU( iPhone)? OS /),android:v.match(/ \\(Linux; U; Android /)};return r.ie6=!f&&\"undefined\"==typeof s.style.maxHeight,r.authInWin=e.postMessage&&e.screen.width>800&&!r.iOS&&!r.android&&h.origin,r}(),O=S.selectors={\".ds-thread\":{type:\"EmbedThread\"},\".ds-recent-comments\":{type:\"RecentComments\"},\".ds-recent-visitors\":{type:\"RecentVisitors\"},\".ds-top-users\":{type:\"TopUsers\"},\".ds-top-threads\":{type:\"TopThreads\"},\".ds-login\":{type:\"LoginWidget\"},\".ds-thread-count\":{type:\"ThreadCount\"},\".ds-share\":{type:\"ShareWidget\"}},E=S.openDialog=function(e){return S.dialog!==s&&S.dialog.el.remove(),S.dialog=new st.Dialog(et.dialog(e)).open()},L=S.smilies={};S.require=function(){function t(e){var t=U[e]?\"?\"+U[e]+\".js\":\"\";return S.STATIC_URL+\"/libs/\"+e+\".js\"+t}var s={mzadxN:\"undefined\"!=typeof mzadxN};return\"undefined\"!=typeof jQuery&&jQuery.fn.jquery>=\"1.5\"&&(s[\"embed.compat\"]=!0,S.jQuery=e.jQuery),function(e,a){if(\"string\"==typeof e)s[e]?a():o.injectScript(t(e),function(){s[e]=!0,a()});else if(\"object\"==typeof e){var i,r=!0;for(i=0;i<e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectScript(t(n),function(){s[n]=!0;for(var t=0;t<e.length;t++)if(!s[e[t]])return;a()}))})(e[i]);r&&a()}}}();for(var N=0,I=[\"EmbedThread\",\"RecentComments\",\"RecentVisitors\",\"TopUsers\",\"TopThreads\",\"LoginWidget\",\"ThreadCount\"];N<I.length;N++)S[I[N]]=function(e){return function(t,s){s=s||{},s.type=e,t&&!O[t]&&(O[t]=s),S.initSelector&&S.initSelector(t,s)}}(I[N]),S[\"create\"+I[N]]=function(e){return function(s,a){var i=t.createElement(s);for(var r in a)i.setAttribute(\"data-\"+r,a[r]);return S[e](i),i}}(I[N]);S.RecentCommentsWidget=S.RecentComments;var R=S.API={ajax:function(e,t,i,r,n){function d(e){var t=e.getResponseHeader(\"Date\");t&&(b=new Date-new Date(t))}function l(e,t,s){var a,i,o,l=t;if(e>=200&&300>e||304===e)if(304===e)l=\"notmodified\",o=!0;else try{a=p.parse(s),l=\"success\",o=!0}catch(c){l=\"parsererror\",i=c}else{i=l,(!l||e)&&(l=\"error\",0>e&&(e=0));try{a=p.parse(s)}catch(c){l=\"parsererror\",i=c}}o?r&&r(a):\"parseerror\"===l?C.error(\"解析错误: \"+s):(C.error(\"出错啦(\"+a.code+\"): \"+a.errorMessage),n&&n(a),a.errorTrace&&C.error(a.errorTrace)),d(m)}var u=o.getCookie(\"duoshuo_token\");i=i||{},i.v=S.version,u?i.jwt=u:c.remote_auth&&(i.remote_auth=c.remote_auth);var h=f&&p&&p.parse;if(h){var m=new f,v=!!m&&\"withCredentials\"in m;if(v){var g;return m.open(e,a()+\"/api/\"+t+\".json\"+(\"GET\"==e?\"?\"+o.param(i):\"\"),!0),m.withCredentials=!0,m.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=UTF-8\"),m.send(\"GET\"==e?null:o.param(i)),g=function(e,t){var a,i,r,n;try{if(g&&(t||4===m.readyState))if(g=s,t)4!==m.readyState&&m.abort();else{a=m.status,r=m.getAllResponseHeaders();try{n=m.responseText}catch(e){}try{i=m.statusText}catch(o){i=\"\"}}}catch(d){t||l(-1,d)}n&&l(a,i,n,r)},void(4===m.readyState?g():m.onreadystatechange=g)}}\"GET\"!=e&&(i._method=\"POST\");var y=\"cb_\"+Math.round(1e6*Math.random());R[y]=function(e){switch(e.code){case 0:r&&r(e);break;default:n&&n(e),C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}},i.callback=\"DUOSHUO.API['\"+y+\"']\",o.injectScript(a()+\"/api/\"+t+\".jsonp?\"+o.param(i))},get:function(e,t,s,a){return this.ajax(\"GET\",e,t,s,a)},post:function(e,t,s,a){return this.ajax(\"POST\",e,t,s,a)}},A=S.ws={messages:[],send:function(s){if(!(\"WebSocket\"in e&&p))return!1;var a=this;if(a.messages.push(p.stringify(s)),!a.webSocket){var r=\"https:\"===t.location.protocol?\"wss://ws.duoshuo.com:8202/\":\"ws://ws.duoshuo.com:8201/\",n=a.webSocket=new WebSocket(r);n.onopen=function(){var e,t=1===n.readyState;if(t)for(;e=a.messages.shift();)n.send(e)},n.onmessage=function(e){try{var t=p.parse(e.data)}catch(s){return}switch(t.type){case\"post\":for(var a,r=0;r<S.pagelets.length;r++)a=S.pagelets[r],a.threadId==t.thread_id&&a.onMessage(t);break;case\"notification\":y.push(t),i()}},e.addEventListener(\"beforeunload\",function(){n.close()})}a.webSocket.onopen()}};S.DOMAIN=\"duoshuo.com\",S.STATIC_URL=g+\"//static.duoshuo.com\",S.REMOTE=g+\"//duoshuo.com\",S.version=\"16.6.16\";var M={\"default\":\"9b2a46a0\",dark:\"33f3a5ac\",bluebox:\"39a75d50\",newhua:\"706ba4eb\",justflat:\"9d72ec5a\"},U={\"embed.compat\":\"24f8ca3f\",smilies:\"921e8eda\"},z={post:\"发布\",posting:\"正在发布\",settings:\"设置\",reply:\"回复\",like:\"顶\",repost:\"转发\",report:\"举报\",\"delete\":\"删除\",reply_to:\"回复 \",reposts:\"转发\",comments:\"评论\",floor:\"楼\",latest:\"最新\",earliest:\"最早\",hottest:\"最热\",share_to:\"分享到:\",leave_a_message:\"说点什么吧…\",no_comments_yet:\"还没有评论，沙发等你来抢\",repost_reason:\"请输入转发理由\",hot_posts_title:\"被顶起来的评论\",comments_zero:\"暂无评论\",comments_one:\"1条评论\",comments_multiple:\"{num}条评论\",reposts_zero:\"暂无转发\",reposts_one:\"1条转发\",reposts_multiple:\"{num}条转发\",weibo_reposts_zero:\"暂无新浪微博\",weibo_reposts_one:\"1条新浪微博\",weibo_reposts_multiple:\"{num}条新浪微博\",qqt_reposts_zero:\"暂无腾讯微博\",qqt_reposts_one:\"1条腾讯微博\",qqt_reposts_multiple:\"{num}条腾讯微博\"},D={get:function(e){return m?m[e]:void 0},save:function(e,t){if(m)try{m.removeItem(e),m[e]=p.stringify(t),m.removeItem(e+\":timestamp\"),m[e+\":timestamp\"]=Math.floor((new Date-b)/1e3)}catch(s){}}},W=S.loadRequire=function(t){if(t.visitor&&(!nt.data&&t.visitor.user_id&&e.Notification&&A.send({logged_user_id:t.visitor.user_id}),nt.reset(t.visitor)),t.site&&(rt.reset(t.site),D.save(\"ds_site_\"+c.short_name,t.site)),!S.theme&&rt.data.theme&&n(rt.data.theme),t.lang&&(o.extend(z,t.lang),D.save(\"ds_lang_\"+c.short_name,t.lang)),t.stylesheets)for(var s=0;s<t.stylesheets.length;s++)o.injectStylesheet(t.stylesheets[s]);if(t.nonce&&(S.nonce=t.nonce),t.style&&o.injectStyle((t.style||\"\")+S.compileStyle(c.component_style)),t.unread&&ot.reset(t.unread),t.warnings)for(var s=0;s<t.warnings.length;s++)C.warn(t.warnings[s])},B=0,H=S.Class=function(){};H.extend=function(e){function t(){!B&&this.init&&this.init.apply(this,arguments)}B=1;var s=new this;B=0;for(var a in e)s[a]=e[a];return t.prototype=s,t.prototype.constructor=t,t.extend=arguments.callee,t};var J=S.Event=H.extend({on:function(e,t){var a=this.handlers||(this.handlers={});return a[e]===s&&(a[e]=[]),a[e].push(t),this},trigger:function(e,t){var s=(this.handlers||(this.handlers={}))[e];if(s)for(var a=0;a<s.length&&s[a].call(this,t)!==!1;a++);return this}}),Q=S.Widget=J.extend({init:function(e,t){this.el=e,this.options=t||{},this.render()},render:function(){},reset:function(){},load:function(e){switch(e.code){case 0:W(e);var t=this.prepare(e);t.options=o.extend(this.options,e.options),this.onload(t);break;default:this.onError(e)}},onload:function(e){this.el.html(et[this.tmpl](e))},prepare:function(e){return e},onMessage:function(){},onError:function(e){C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}}),V=S.Model=J.extend({init:function(e){this.data=e},reset:function(e){this.data=e,this.trigger(\"reset\")},remove:function(e){this.data.splice(e,1),this.trigger(\"reset\")},set:function(e,t){if(t===s)for(var a in e)this.data[a]=e[a];else this.data[e]=t;return this.trigger(\"reset\"),this},toJSON:function(){return o.extend({},this.data)}}),$=V.extend({toJSON:function(){return o.extend({},this.data)}}),F=V.extend({toJSON:function(){var e=o.extend({},this.data);return e.theAuthor=ct[this.data.author_id]&&ct[this.data.author_id].data||this.data.author,e.parents=this.data.parents||[],e}}),G=V.extend({toJSON:function(){return o.extend({},this.data)}}),Y=function(e){this.model=e};Y.prototype.set=function(e){for(var t in e)e[t]&&(this[t]?this[t].set(e[t]):this[t]=new this.model(e[t]))},Y.prototype.get=function(e){for(var t=0,s=[];t<e.length;t++)s[t]=this[e[t]];return s},Y.prototype.getJSON=function(e){for(var t=0,s=[];t<e.length;t++)this[e[t]]&&s.push(this[e[t]].toJSON());return s};var Z={userUrl:function(e){return e.url},avatarUrl:function(e){return e.avatar_url||rt.data.default_avatar_url},loginUrl:function(e,t){return t||(t={}),c.sso&&c.sso.login&&(t.sso=1,t.redirect_uri=c.sso.login),a()+\"/login/\"+e+\"/\"+x(t)},bindUrl:function(e){return a()+\"/bind/\"+e+\"/\"+x(c.sso&&c.sso.login?{sso:1,redirect_uri:c.sso.login}:null,T())},logoutUrl:function(){return a()+\"/logout/\"+x(c.sso&&c.sso.logout?{sso:1,redirect_uri:c.sso.logout}:null)}},X=[\"weixin\",\"weibo\",\"qq\",\"renren\"],K=[\"douban\",\"kaixin\",\"baidu\",\"google\"],et=S.templates={userAnchor:function(e){return e.url?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(e.url)+'\">'+_(e.name)+\"</a>\":_(e.name)},avatarImg:function(e,t){return'<img src=\"'+_(Z.avatarUrl(e,t))+'\" alt=\"'+_(e.name)+'\"'+(t?' style=\"width:'+t+\"px;height:\"+t+'px\"':\"\")+\"/>\"},avatar:function(e,t){var s=et.avatarImg(e,t),i=Z.userUrl(e);return i?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(i)+'\" '+(e.user_id?\" onclick=\\\"this.href='\"+a()+\"/user-url/?user_id=\"+e.user_id+\"';\\\"\":\"\")+' title=\"'+_(e.name)+'\">'+s+\"</a>\":s},timeText:function(e){return e?'<span class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</span>\":\"\"},timeAnchor:function(e,t){return e?'<a href=\"'+t+'\" target=\"_blank\" rel=\"nofollow\" class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</a>\":\"\"},serviceIcon:function(e,t){return'<a href=\"javascript:void(0)\" class=\"ds-service-icon'+(t?\"-grey\":\"\")+\" ds-\"+e+'\" data-service=\"'+e+'\" title=\"'+S.sourceName[e]+'\"></a>'},poweredBy:function(e){return'<p class=\"ds-powered-by\"><a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"nofollow\">'+_(e)+\"</a></p>\"},indicator:w('<div id=\"ds-indicator\"></div>'),waitingImg:w('<div id=\"ds-waiting\"></div>'),loginItem:function(e,t){var s=Z[t?\"bindUrl\":\"loginUrl\"](e);return'<li>    <a href=\"'+s+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+e+'\">'+S.serviceNames[e]+(nt.data.social_uid[e]?' <span class=\"ds-icon ds-icon-ok\"></span>':\"\")+\"</a></li>\"}},tt=function(e){var t=[];for(var s in e)t.push('<input type=\"hidden\" name=\"'+s+'\" value=\"'+_(e[s])+'\" />');return t.join(\"\\n\")};et.commentList=function(e){var t=\"\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li class=\"ds-comment',e.options.show_avatars&&(t+=\" ds-show-avatars\"),t+='\" data-post-id=\"'+a.post_id+'\">',e.options.show_avatars&&(t+='<div class=\"ds-avatar\">'+et.avatar(a.theAuthor,e.options.avatar_size)+\"</div>\"),t+='<div class=\"ds-meta\">'+et.userAnchor(a.theAuthor),e.options.show_time&&(t+=et.timeText(a.created_at)),t+=\"</div>\",t+=e.options.show_title?'<div class=\"ds-thread-title\">在 <a href=\"'+u(a.thread.url)+'#comments\">'+u(a.thread.title)+'</a> 中评论</div><div class=\"ds-excerpt\">'+a.message+\"</div>\":'<a class=\"ds-excerpt\" title=\"'+a.thread.title+' 中的评论\" href=\"'+u(a.thread.url)+'#comments\">'+a.message+\"</a>\",t+=\"</li>\";return t},et.ctxPost=function(e){var t=\"\";return e.post&&(t+='<li class=\"ds-ctx-entry\"',e.hidden&&(t+=' style=\"display:none\"'),t+=' data-post-id=\"'+e.post.post_id+'\"><div class=\"ds-avatar\">'+et.avatar(e.post.theAuthor||e.post.author)+'</div><div class=\"ds-ctx-body\"><div class=\"ds-ctx-head\">'+et.userAnchor(e.post.theAuthor||e.post.author)+et.timeAnchor(e.post.created_at,e.post.url),e.index>=0&&(t+='<div class=\"ds-ctx-nth\" title=\"'+S.fullTime(e.post.created_at)+'\">'+(e.index+1)+z.floor+\"</div>\"),t+='</div><div class=\"ds-ctx-content\">'+e.post.message,e.index>=0&&(t+='　　　　　　　<div class=\"ds-comment-actions',e.post.vote>0&&(t+=\" ds-post-liked\"),t+='\">'+et.likePost(e.post)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-reply\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a></div>\"),t+=\"</div></div></li>\"),t},et[\"dialog-anonymous\"]=function(e){var t='<h2>社交帐号登录</h2><div class=\"ds-icons-32\">',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\",e.options.deny_anonymous||(t+='<h2>作为游客留言</h2><form><div class=\"ds-control-group\"><input type=\"text\" name=\"author_name\" id=\"ds-dialog-name\" value=\"'+u(nt.data.name)+'\" required /><label for=\"ds-dialog-name\">名字(必填)</label></div>',e.options.require_guest_email&&(t+='<div class=\"ds-control-group\"><input type=\"email\" name=\"author_email\" id=\"ds-dialog-email\" value=\"'+u(nt.data.email)+'\" required /><label for=\"ds-dialog-email\">邮箱(必填)</label></div>'),e.options.require_guest_url&&(t+='<div class=\"ds-control-group\"><input type=\"url\" name=\"author_url\" id=\"ds-dialog-url\" placeholder=\"http://\" value=\"'+u(nt.data.url)+'\" /><label for=\"ds-dialog-url\">网址(可选)</label></div>'),t+='<button type=\"submit\">发布</button></form>'),t},et[\"dialog-ask-for-auth\"]=function(){var e='<h2>社交帐号登录</h2><ul class=\"ds-service-list\">'+et.serviceList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul>\";return e},et[\"dialog-bind-more\"]=function(){var e='<h2>绑定更多帐号</h2><ul class=\"ds-service-list\">'+et.serviceBindList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceBindList(K)+'</ul><div style=\"clear:both\"></div>';return e},et[\"dialog-qrcode\"]=function(e){var t='<h2>微信扫一扫，分享到朋友圈</h2><div class=\"ds-share-qrcode\" style=\"text-align:center;\"><img src=\"'+e.qrcode_url+'\" alt=\"'+e.url+'\"></div>';return t},et[\"dialog-reposts\"]=function(e){var t='<h2>转发到微博</h2><div class=\"ds-quote\"><strong>@'+u(e.post.theAuthor.name)+\"</strong>: \"+e.post.message+\"</div><form>\"+tt({post_id:e.post.post_id})+'<div class=\"ds-textarea-wrapper\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.repost_reason)+'\">'+u(e.repostMessage)+'</textarea><pre class=\"ds-hidden-text\"></pre>';return t+='</div><div class=\"ds-actions\">',e.service?t+=tt({\"service[]\":e.service}):(t+='<label><input type=\"checkbox\" name=\"service[]\" value=\"weibo\"',nt.data.social_uid.weibo&&(t+=' checked=\"checked\"'),t+=' /><span class=\"ds-service-icon ds-weibo\"></span>新浪微博</label><label><input type=\"checkbox\" name=\"service[]\" value=\"qqt\"',nt.data.social_uid.qq&&(t+=' checked=\"checked\"'),t+=' /><span class=\"ds-service-icon ds-qqt\"></span>腾讯微博</label>'),t+='<button type=\"submit\">'+z.repost+\"</button></div></form>\"},et.dialog=function(e){var t='<div class=\"ds-dialog\"><div class=\"ds-dialog-inner ds-rounded\"><div class=\"ds-dialog-body\">'+e+'</div><div class=\"ds-dialog-footer\"><a href=\"http://duoshuo.com/\" target=\"_blank\" class=\"ds-logo\"></a><span>社会化评论框</span></div><a class=\"ds-dialog-close\" href=\"javascript:void(0)\" title=\"关闭\"></a></div></div>';return t},et.hotPosts=function(e){var t='<div class=\"ds-header ds-gradient-bg\">'+u(z.hot_posts_title)+\"</div><ul>\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=et.post({post:a,options:e.options});return t+=\"</ul>\"},et.likePost=function(e){var t='<a class=\"ds-post-likes\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-like\"></span>'+z.like;return e.likes>0&&(t+=\"(\"+e.likes+\")\"),t+=\"</a>\"},et.likeTooltip=function(e){var t='<div class=\"ds-like-tooltip ds-rounded\"><p>很高兴你能喜欢，分享一下吧：</p><ul>';for(var s in e.services)t+='<li><a class=\"ds-share-to-'+s+\" ds-service-link ds-\"+s+'\" href=\"'+a()+\"/share-proxy/?\"+o.param({service:s,thread_id:e.thread_id})+'\">'+e.services[s]+\"</a></li>\";return t+='</ul><p class=\"ds-like-tooltip-footer\"><a class=\"ds-like-tooltip-close\">算了</a></p></div>'},et.loginButtons=function(){var e='<div class=\"ds-login-buttons\"><p>社交帐号登录:</p><div class=\"ds-social-links\"><ul class=\"ds-service-list\">'+et.serviceList(X)+'<li><a class=\"ds-more-services\" href=\"javascript:void(0)\">更多»</a></li></ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul></div></div>\";return e},et.loginWidget=function(e){var t='<div class=\"ds-icons-32\">',s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\"},et.meta=function(e){var t='<div class=\"ds-meta\"><a href=\"javascript:void(0)\" class=\"ds-like-thread-button ds-rounded';return e.user_vote>0&&(t+=\" ds-thread-liked\"),t+='\"><span class=\"ds-icon ds-icon-heart\"></span> <span class=\"ds-thread-like-text\">',t+=e.user_vote>0?\"已喜欢\":\"喜欢\",t+='</span><span class=\"ds-thread-cancel-like\">取消喜欢</span></a><span class=\"ds-like-panel\"></span></div>'},et.notify=function(e){var t='<div id=\"ds-reset\"><a class=\"ds-logo\" href=\"http://duoshuo.com/\" target=\"_blank\" title=\"多说\"></a><ul class=\"ds-notify-unread\"><li';return e.comments||(t+=' style=\"display:none;\"'),t+='><a data-type=\"unread-comments\" href=\"javascript:void(0);\">你有'+e.comments+\"条新回复</a></li><li\",e.notifications||(t+=' style=\"display:none;\"'),t+='><a data-type=\"unread-notifications\" href=\"javascript:void(0);\">你有'+e.notifications+\"条系统消息</a></li></ul></div>\"},et.post=function(e){var t=\"\",s=e.post,i=e.options,r=s.author;if(t+='<li class=\"ds-post\" data-post-id=\"'+s.post_id+'\"><div class=\"ds-post-self\" data-post-id=\"'+s.post_id+'\" data-thread-id=\"'+s.thread_id+'\" data-root-id=\"'+s.root_id+'\" data-source=\"'+s.source+'\"><div class=\"ds-avatar\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=\">\"+et.avatar(r),S.sourceName[s.source]&&(t+=et.serviceIcon(s.source)),t+='</div><div class=\"ds-comment-body\"><div class=\"ds-comment-header\">',r.url?(t+='<a class=\"ds-user-name ds-highlight\" data-qqt-account=\"'+(r.qqt_account||\"\")+'\" href=\"'+u(r.url)+'\" ',r.user_id&&(t+=\" onclick=\\\"this.href='\"+a()+\"/user-url/?user_id=\"+r.user_id+\"';\\\"\"),t+=' rel=\"nofollow\" target=\"_blank\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=\">\"+u(r.name)+\"</a>\"):(t+='<span class=\"ds-user-name\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=' data-qqt-account=\"'+(r.qqt_account||\"\")+'\">'+u(r.name)+\"</span>\"),t+=\"</div>\",1==i.max_depth&&i.show_context&&s.parents.length){t+='<ol id=\"ds-ctx\">';var n=lt.getJSON(s.parents);if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],1==d&&s.parents.length>2&&(t+='<li class=\"ds-ctx-entry\"><a href=\"javascript:void(0);\" class=\"ds-expand\">还有'+(s.parents.length-2)+\"条评论</a></li>\"),t+=et.ctxPost({post:o,index:d,hidden:d&&d<s.parents.length-1});t+=\"</ol>\"}if(t+=\"<p>\",s.parents.length>=i.max_depth&&(!i.show_context||i.max_depth>1)&&s.parent_id&&lt[s.parent_id]&&(t+='<a class=\"ds-comment-context\" data-post-id=\"'+s.post_id+'\" data-parent-id=\"'+s.parent_id+'\">'+z.reply_to+u(lt[s.parent_id].toJSON().author.name)+\": </a>\"),t+=s.message+'</p><div class=\"ds-comment-footer ds-comment-actions',s.vote>0&&(t+=\" ds-post-liked\"),t+='\">',t+=s.url?et.timeAnchor(s.created_at,s.url):et.timeText(s.created_at),\"duoshuo\"==s.source?(t+='<a class=\"ds-post-reply\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a>\"+et.likePost(s)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-report\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-report\"></span>'+z.report+\"</a>\",s.privileges[\"delete\"]&&(t+='<a class=\"ds-post-delete\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-delete\"></span>'+z[\"delete\"]+\"</a>\")):(\"qqt\"==s.source||\"weibo\"==s.source)&&(t+='<a class=\"ds-weibo-comments\" href=\"javascript:void(0);\">'+z.comments,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.comments+\"</span>)\"),t+='</a><a class=\"ds-weibo-reposts\" href=\"javascript:void(0);\">'+z.reposts,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.reposts+\"</span>)\"),t+=\"</a>\"),t+=\"</div></div></div>\",i.max_depth>1&&(s.childrenArray||s.children)&&\"weibo\"!=s.source&&\"qqt\"!=s.source){t+='<ul class=\"ds-children\">';var c=lt.getJSON(s.childrenArray||s.children);if(c)for(var s,d=-1,p=c.length-1;p>d;)s=c[d+=1],t+=et.post({post:s,options:i});t+=\"</ul>\"}return t+=\"</li>\"},et.postListHead=function(e){var t='<div class=\"ds-comments-info\"><div class=\"ds-sort\"><a class=\"ds-order-desc\">'+z.latest+'</a><a class=\"ds-order-asc\">'+z.earliest+'</a><a class=\"ds-order-hot\">'+z.hottest+'</a></div><ul class=\"ds-comments-tabs\"><li class=\"ds-tab\"><a class=\"ds-comments-tab-duoshuo ds-current\" href=\"javascript:void(0);\"></a></li>';return e.options.show_reposts&&e.thread.reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-repost\" href=\"javascript:void(0);\"></a></li>'),t+=\" \",e.options.show_weibo&&e.thread.weibo_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-weibo\" href=\"javascript:void(0);\"></a></li>'),t+=\" \",e.options.show_qqt&&e.thread.qqt_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-qqt\" href=\"javascript:void(0);\"></a></li>'),t+=\"</ul></div>\"},et.recentVisitors=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"</div>\";return t},et[\"related-read\"]=function(e){var t=\"\";if(e&&e.length){t+='<article class=\"ds-reads-expand\"><div class=\"ds-header\">头条推荐</div><section> ';var s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;){if(a=s[i+=1],t+=' <a href=\"'+a.url+'\" class=\"ds-reads-item\"> ',3==a.imgs.length){t+=\" <h2>\"+a.title+'</h2> <div class=\"ds-reads-pics\"> <ul> ';var n=a.imgs;if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],t+=' <li> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+o+');\"></div> </li> ';t+=' </ul> </div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> '}else t+=' <div class=\"ds-reads-desc ',a.imgs.length||(t+=\"ds-reads-only\"),t+='\"> <div class=\"ds-reads-title\">'+a.title+'</div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> </div> ',a.imgs.length&&(t+=' <div class=\"ds-reads-pic-right\"> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+a.imgs[0]+');\"> ',a.hasVideo&&(t+=' <div class=\"ds-reads-vid-info\"><span>'+a.videoDuration+\"</span></div> \"),t+=\" </div> </div> \"),t+=\" \";t+=\" </a> \"}t+=\"</section></article>\"}return t},et.replybox=function(e){var t='<div class=\"ds-replybox\"><a class=\"ds-avatar\"';if(t+=r()?' href=\"javascript:void(0);\" onclick=\"return false\"':' href=\"'+S.REMOTE+\"/settings/avatar/\"+x(T())+'\" target=\"_blank\" title=\"设置头像\"',t+=\">\"+et.avatarImg(nt.data)+'</a><form method=\"post\">'+tt(e.params)+'<div class=\"ds-textarea-wrapper ds-rounded-top\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.leave_a_message)+'\"></textarea><pre class=\"ds-hidden-text\"></pre>',t+=\"</div>\",t+='<div class=\"ds-post-toolbar\"><div class=\"ds-post-options ds-gradient-bg\"><span class=\"ds-sync\">',!r()&&nt.data.repostOptions){t+='<input id=\"ds-sync-checkbox',e.inline&&(t+=\"-inline\"),t+='\" type=\"checkbox\" name=\"repost\" ',e.checked&&(t+='checked=\"checked\" '),t+='value=\"'+e.repostArray.join(\",\")+'\"> <label for=\"ds-sync-checkbox',e.inline&&(t+=\"-inline\"),t+='\">'+z.share_to+\"</label>\";for(var s in nt.data.repostOptions)t+=et.serviceIcon(s,!nt.data.repostOptions[s])}return t+=\"</span>\",t+=\"</div>\",t+='<button class=\"ds-post-button\" type=\"submit\">'+u(z.post)+'</button><div class=\"ds-toolbar-buttons\">',e.options.use_smilies&&(t+='<a class=\"ds-toolbar-button ds-add-emote\" title=\"插入表情\"></a>'),e.options.use_images&&e.options.parse_html_enabled&&(t+='<a class=\"ds-toolbar-button ds-add-image\" title=\"插入图片\"></a>'),t+=\"</div></div>\",t+=\"</form></div>\"},et.serviceBindList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.bindUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a],nt.data.social_uid[a]&&(t+=' <span class=\"ds-icon ds-icon-ok\"></span>'),t+=\"</a></li>\";return t},et.serviceList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.loginUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a]+\"</a></li>\";return t},et.shareWidget=function(e){var t='<div class=\"ds-share-icons\"> <div class=\"ds-share-icons-inner\"> <ul class=\"ds-share-icons-16\"> ',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=' <li> <a class=\"ds-'+a+'\" href=\"javascript:void(0);\" data-service=\"'+a+'\">'+S.sourceName[a]+\"</a> </li> \";return t+=' </ul> </div> <div class=\"ds-share-icons-footer\">'+e.copyright+\"</div></div>\"},et.smiliesTooltip=function(e){var t='<div id=\"ds-smilies-tooltip\"><ul class=\"ds-smilies-tabs\">';for(var s in e)t+=\"<li><a>\"+s+\"</a></li>\";return t+='</ul><div class=\"ds-smilies-container\"></div></div>'},et.toolbar=function(){var e='<div class=\"ds-toolbar\"><div class=\"ds-account-control\"><span class=\"ds-icon ds-icon-settings\"></span> <span>帐号管理</span><ul><li><a class=\"ds-bind-more\" href=\"javascript:void(0);\" style=\"border-top: none\">绑定更多</a></li><li><a target=\"_blank\" href=\"'+S.REMOTE+\"/settings/\"+x(T())+'\">'+u(z.settings)+'</a></li><li><a rel=\"nofollow\" href=\"'+Z.logoutUrl()+'\" style=\"border-bottom: none\">登出</a></li></ul></div><div class=\"ds-visitor\">';return e+=nt.data.url?'<a class=\"ds-visitor-name\" href=\"'+u(nt.data.url)+'\" target=\"_blank\">'+u(nt.data.name)+\"</a>\":'<span class=\"ds-visitor-name\">'+u(nt.data.name)+\"</span>\",e+='<a class=\"ds-unread-comments-count\" href=\"javascript:void(0);\" title=\"新回复\"></a></div></div>'},et.topThreads=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a target=\"_blank\" href=\"'+u(a.url)+'\" title=\"'+u(a.title)+'\">'+u(a.title)+\"</a></li>\";return t},et.topUsers=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"<h4>\"+u(a.name)+\"</h4></div>\";return t},et.userInfo=function(e){var t='<a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\"/user-url/?user_id=\"+e.user_id+'\\';\" class=\"ds-avatar\" target=\"_blank\">'+et.avatarImg(e)+'</a><a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\"/user-url/?user_id=\"+e.user_id+'\\';\" class=\"ds-user-name ds-highlight\" target=\"_blank\">'+u(e.name)+\"</a>\";for(var s in e.social_uid)t+='<a href=\"'+S.REMOTE+\"/user-proxy/\"+s+\"/\"+e.social_uid[s]+'/\" target=\"_blank\" class=\"ds-service-icon ds-'+s+'\" title=\"'+S.sourceName[s]+'\"></a>';return t+='<p class=\"ds-user-card-meta\"><a href=\"'+S.REMOTE+\"/profile/\"+e.user_id+'/\" target=\"_blank\"><span class=\"ds-highlight\">'+e.comments+\"</span>条评论</a></p>\",e.description&&(t+='<p class=\"ds-user-description\">'+u(e.description)+\"</p>\"),t};var st=S.Views={},at=(S.Callbacks={},S.pagelets=[]),it=S.events=new J,rt=S.site=new V,nt=S.visitor=new $,ot=S.unread=new V,dt=S.threadPool=new Y(G),lt=S.postPool=new Y(F),ct=S.userPool=new Y($);it.on(\"queryDefined\",function(){var e=c.short_name;if(c.theme&&n(c.theme),m){var t=m[\"ds_site_\"+e],s=m[\"ds_lang_\"+e];t&&rt.reset(p.parse(t)),s&&o.extend(z,p.parse(s))}}),q(),S.require(\"embed.compat\",function(){function i(e){e.stopPropagation()}function n(e){(e.ctrlKey&&13==e.which||10==e.which)&&H(this.form).trigger(\"submit\")}function d(){var e=H(this);e.height(Math.max(54,e.next(\".ds-hidden-text\").text(this.value).height()+27))}function l(){if(P.authInWin){var e=this.href.match(/\\/(login|bind)\\/(\\w+)\\//i);if(e&&S.serviceNames[e[2]])return!b(e[2],this.href)\n}}function u(){var e,s,a,i,r,n=this,o=0,d=0;t.selection&&(s=t.selection.createRange(),s&&s.parentElement()==n&&(i=n.value.length,e=n.value.replace(/\\r\\n/g,\"\\n\"),a=n.createTextRange(),a.moveToBookmark(s.getBookmark()),r=n.createTextRange(),r.collapse(!1),a.compareEndPoints(\"StartToEnd\",r)>-1?o=d=i:(o=-a.moveStart(\"character\",-i),o+=e.slice(0,o).split(\"\\n\").length-1,a.compareEndPoints(\"EndToEnd\",r)>-1?d=i:(d=-a.moveEnd(\"character\",-i),d+=e.slice(0,d).split(\"\\n\").length-1)))),H(n).data(\"ds-range-start\",o).data(\"ds-range-end\",d)}function p(e){return P.touch&&e.addClass(\"ds-touch\"),o.cssProperty(\"transition\")||e.addClass(\"ds-no-transition\"),P.ie6&&e.addClass(\"ds-ie6\"),P.opacity||e.addClass(\"ds-no-opacity\"),e}function f(e){if(!P.placeholder){var t=e.attr(\"placeholder\");e.val(t).focus(function(){this.value===t&&(this.value=\"\")}).blur(function(){\"\"===this.value&&(this.value=t)})}return e}function g(e){if(\"http://duoshuo.com\"===e.origin)switch(e.data.type){case\"login\":h.href=e.data.redirectUrl}}function b(t,s){var a={weibo:[760,600],renren:[420,322],qq:[504,445],weixin:[450,550],google:[600,440]}[t]||[550,400];return e.open(s+(-1==s.indexOf(\"?\")?\"?\":\"&\")+o.param({origin:h.origin||\"http://\"+h.host}),\"_blank\",\"width=\"+a[0]+\",height=\"+a[1]+\",toolbar=no,menubar=no,location=yes\")}function y(e){var t=Z[r()?\"loginUrl\":\"bindUrl\"](e);P.authInWin&&b(e,t)||(h.href=t)}function w(){var e=E(et[\"dialog-ask-for-auth\"]({})).el.find(\".ds-dialog\").css(\"width\",\"300px\");e.find(\"a.ds-service-link\").click(l)}function x(e,t,s,a){function i(){function e(e){if(s&&a){var t=s.options,i=M(s.postList.el,e.response[a],t);\"asc\"==t.order==(\"top\"==t.formPosition)&&S.scrollTo(i);var r=s.el.find(\".ds-comments-tab-\"+a+\" span.ds-highlight\");r.html(parseInt(r.html())+1)}}return a||l.find(\"[type=checkbox]:checked\")[0]?(R.post(\"posts/repost\",S.toJSON(l),e),o.close(),!1):(alert(\"还没有选发布到哪儿呢\"),!1)}function r(){var e=this.value;return this.checked&&!nt.data.social_uid[\"qqt\"==e?\"qq\":e]?void y(e):void 0}var o=E(et[\"dialog-reposts\"]({post:e.toJSON(),repostMessage:t,service:a})),l=o.el.find(\"form\");return l.submit(i),l.find(\".ds-actions [type=checkbox]\").change(r),f(l.find(\"textarea\")).keyup(n).keyup(d).focus(),!1}function T(e){var t={\"unread-comments\":{title:\"新留言及回复\",apiUrl:\"users/unreadComments\",tmpl:function(e){return e.thread?'<li data-thread-id=\"'+e.thread.thread_id+'\">'+H.map(e.authors,et.userAnchor).join(\"、\")+' 在 <a class=\"ds-read\" href=\"'+e.thread.url+'#comments\" target=\"_blank\">'+_(e.thread.title||\"无标题\")+'</a> 中回复了你 <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\">知道了</a></li>':\"\"},read:function(e){var t=e.attr(\"data-thread-id\");R.post(\"threads/read\",{thread_id:t}),ot.data.comments--}},\"unread-notifications\":{title:\"系统消息\",apiUrl:\"users/unreadNotifications\",tmpl:function(e){return'<li data-notification-id=\"'+e.notification_id+'\" data-notification-type=\"'+e.type+'\">'+e.content+' <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\">知道了</a></li>'},read:function(e){var t=e.attr(\"data-notification-id\");R.post(\"notifications/read\",{notification_id:t}),ot.data.notifications--}}}[e],s=E(\"<h2>\"+t.title+'</h2><ul class=\"ds-unread-list\"></ul>');s.on(\"close\",S.resetNotify);var a=s.el.find(\".ds-unread-list\").delegate(\".ds-delete\",\"click\",function(){return H(this).parent().remove(),0===a.children().length&&s.close(),!1}).delegate(\".ds-read\",\"click\",function(){t.read(H(this).parent())});H(\"#ds-notify\").hide(),R.get(t.apiUrl,{},function(e){s.el.find(\".ds-unread-list\").html(H.map(e.response,t.tmpl).join(\"\\n\"))})}function N(){bubbleOutTimer&&(clearTimeout(bubbleOutTimer),bubbleOutTimer=0)}function I(){bubbleOutTimer=setTimeout(function(){bubbleOutTimer=0,X.detach()},400)}function M(e,t,s){return e.find(\".ds-post[data-post-id=\"+t.data.post_id+\"]\")[0]?void 0:(e.find(\".ds-post-placeholder\").remove(),H(et.post({post:t.toJSON(),options:s})).hide()[\"asc\"==s.order?\"appendTo\":\"prependTo\"](e).slideDown(function(){}))}function U(e,t){function s(){if(r())return w(),!1;var e=H(this).parent(),t=e.hasClass(\"ds-post-liked\"),s=H(this).html().match(/\\((\\d+)\\)/),a=(s?parseInt(s[1]):0)+(t?-1:1);return R.post(\"posts/vote\",{post_id:e.closest(\".ds-ctx-entry, .ds-post-self\").attr(\"data-post-id\"),vote:t?0:1}),H(this).html(H(this).html().replace(/\\(\\d+\\)/,\"\")+(a?\"(\"+a+\")\":\"\")),e[t?\"removeClass\":\"addClass\"](\"ds-post-liked\"),!1}function a(){var e=H(this).closest(\".ds-post-self\"),t=lt[e.attr(\"data-post-id\")];return x(t,\"\"),!1}function i(){if(!confirm(\"确定要删除这条评论吗？\"))return!1;var t=H(this).closest(\".ds-post-self\");return R.post(\"posts/remove\",{post_id:t.attr(\"data-post-id\")}),t.parent().fadeOut(200,function(){e.data.comments--,e.updateCounter(\"duoshuo\"),H(this).remove()}),!1}function n(){if(!confirm(\"确定要举报这条评论吗？\"))return!1;var e=H(this).closest(\".ds-post-self\");return R.post(\"posts/report\",{post_id:e.attr(\"data-post-id\")}),alert(\"感谢您的反馈！\"),!1}function o(){var s=H(this),a=s.closest(\".ds-comment-actions\");if(a.hasClass(\"ds-reply-active\"))h.el.fadeOut(200,function(){H(this).detach()}),a.removeClass(\"ds-reply-active\");else{var i=s.closest(\".ds-ctx-entry, .ds-post-self\");h?h.actionsBar.removeClass(\"ds-reply-active\"):(h=new st.Replybox(e),h.render(!0).el.addClass(\"ds-inline-replybox\").detach()),h.el.find(\"[name=parent_id]\").val(i.attr(\"data-post-id\")),h.el.show().appendTo(s.closest(\".ds-ctx-body, .ds-comment-body\")).find(\"textarea\").focus(),h.actionsBar=a.addClass(\"ds-reply-active\"),t.max_depth<=1?h.postList=e.postList.el:(h.postList=i.siblings(\".ds-children\"),h.postList[0]||(h.postList=H('<ul class=\"ds-children\"></ul>').insertAfter(i)))}return!1}function d(){function e(e){W(e),i.append(H.map(e.response,function(e){return et.post({post:e,options:t})}).join(\"\"))}{var s=H(this).closest(\".ds-post-self\"),a=s.attr(\"data-post-id\");s.data(\"source\")}if(0!=s.attr(\"data-root-id\"))return!1;var i=s.siblings(\".ds-children\");return i[0]?(i.remove(),!1):(i=H('<ul class=\"ds-children\"></ul>').insertAfter(s),R.get(\"posts/listComments\",B({post_id:a}),e),!1)}function l(){var t=H(this).closest(\".ds-post-self\"),s=lt[t.attr(\"data-post-id\")],a=s.data.source;if(!nt.data.social_uid[\"qqt\"==a?\"qq\":a])return void y(a);var i=s.data.root_id,r=\"0\"!=i?lt[i]:s,n=\"\";if(\"0\"!=i){var o=prepatePost(s.data).theAuthor;n=(\"weibo\"==a?\"//@\"+o.name:\"|| @\"+o.qqt_account)+\":\"+s.data.message}return x(r,n,e,a),!1}function c(){var e=H(this).parent();return e.siblings().show(),e.remove(),!1}function u(){function t(){function t(e){var t=e.response;ct[c]?ct[c].set(t):ct[c]=new $(t),X.owner==s&&K.html(et.userInfo(t))}tt=0,X.owner=s,N();var i=a.offset(),r=e.el.offset(),n=a.innerWidth()/2,o=e.el.innerHeight()-(i.top-r.top)+6,d=i.left-r.left-35+(n>35?35:n);try{if(a.hasClass(\"ds-comment-context\"))K.attr(\"id\",\"ds-ctx-bubble\").attr(\"data-post-id\",a.attr(\"data-post-id\")).html('<ul id=\"ds-ctx\">'+et.ctxPost({post:lt[a.attr(\"data-parent-id\")].toJSON()})+'</ul><div class=\"ds-bubble-footer\"><a class=\"ds-ctx-open\" href=\"javascript:void(0);\">查看对话</a></div>');else if(a.hasClass(\"ds-avatar\")||a.hasClass(\"ds-user-name\")){var l={},c=l.user_id=a.attr(\"data-user-id\");if(!c)throw\"no info\";K.attr(\"id\",\"ds-user-card\").attr(\"data-user-id\",c).empty(),ct[c]?K.html(et.userInfo(ct[c].data)):R.get(\"users/profile\",B(l),t)}X.css({bottom:o,left:d}).appendTo(e.innerEl)}catch(u){X.detach()}}var s=this;if(bubbleOutTimer&&X.owner==s)return clearTimeout(bubbleOutTimer),void(bubbleOutTimer=0);var a=H(s);tt=setTimeout(t,200)}function p(){tt?(clearTimeout(tt),tt=0):bubbleOutTimer||I()}var h;this.delegate(\"a.ds-post-likes\",\"click\",s).delegate(\"a.ds-post-repost\",\"click\",a).delegate(\"a.ds-post-delete\",\"click\",i).delegate(\"a.ds-post-report\",\"click\",n).delegate(\"a.ds-post-reply\",\"click\",o).delegate(\"a.ds-weibo-comments\",\"click\",d).delegate(\"a.ds-weibo-reposts\",\"click\",l).delegate(\"a.ds-expand\",\"click\",c),P.touch||this.delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseenter\",u).delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseleave\",p)}function B(e){var s={require:\"site,visitor,nonce,lang\"+(it++?\"\":\",unread,log,extraCss\"),site_ims:D.get(\"ds_site_\"+c.short_name+\":timestamp\"),lang_ims:D.get(\"ds_lang_\"+c.short_name+\":timestamp\"),referer:t.referrer};c.stylePatch&&(s.style_patch=c.stylePatch);for(var a in s)s[a]&&(!P.ie6||encodeURIComponent(s[a]).length<200)&&(e[a]=s[a]);return e}var H=S.jQuery,V=H(e),Y=H(t);e.postMessage&&(e.addEventListener?e.addEventListener(\"message\",g,!1):e.attachEvent&&e.attachEvent(\"onmessage\",g)),S.scrollTo=function(e){var t=e.offset().top;(t<V.scrollTop()||t>V.scrollTop()+V.height())&&H(\"html, body\").animate({scrollTop:t-40},200,\"swing\")},S.toJSON=function(e){var t=/\\r?\\n/g,s=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,a=/^(?:select|textarea)/i,i=e.map(function(){return this.elements?H.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||a.test(this.nodeName)||s.test(this.type))}).map(function(e,s){var a=H(this).val();return null==a?null:H.isArray(a)?H.map(a,function(e){return{name:s.name,value:e.replace(t,\"\\r\\n\")}}):{name:s.name,value:a.replace(t,\"\\r\\n\")}}).toArray(),r={};return H.each(i,function(){r[this.name]=this.value}),r},S.resetNotify=function(){var e=H(\"#ds-notify\"),s=ot.data;e[0]||(e=H('<div id=\"ds-notify\"></div>').css({hidden:{display:\"none\"},\"top-right\":{top:\"24px\",right:\"24px\"},\"bottom-right\":{bottom:\"24px\",right:\"24px\"}}[rt.data.notify_position]).delegate(\".ds-notify-unread a\",\"click\",function(){return T(H(this).data(\"type\")),!1}).appendTo(t.body)),e.html(et.notify(s))[!s.comments&&!s.notifications||\"hidden\"===rt.data.notify_position||H(\".ds-dialog\")[0]?\"hide\":\"show\"]()},ot.on(\"reset\",S.resetNotify),st.Replybox=function(e){this.embedThread=e},st.Replybox.prototype={render:function(e){function s(e){e.data(\"submitting\",!0),e.find(\".ds-post-button\").addClass(\"ds-waiting\").html(z.posting)[0].disabled=!0}function a(e){e.data(\"submitting\",!1),e.find(\".ds-post-button\").removeClass(\"ds-waiting\").html(z.post)[0].disabled=!1}var i=this,o=i.embedThread,c=o.options,p=function(){S.require(\"smilies\",function(){})},h={thread:o,options:c,inline:e,params:{thread_id:o.threadId,parent_id:\"\",nonce:S.nonce},repostArray:[],checked:0};for(var v in nt.data.repostOptions)nt.data.repostOptions[v]&&(h.repostArray.push(v),h.checked=1);var g=i.el=H(et.replybox(h)).click(p),b=g.find(\"form\"),y=b.find(\"input[type=checkbox]\")[0],_=b.find(\"a.ds-service-icon, a.ds-service-icon-grey\"),k=f(b.find(\"textarea\")).focus(p).keyup(n).keyup(d).bind(\"focus mousedown mouseup keyup\",u),w=g.find(\".ds-add-emote\").click(function(e){var s=S.smiliesTooltip;return w.toggleClass(\"ds-expanded\").hasClass(\"ds-expanded\")?(s||(s=S.smiliesTooltip=new st.SmiliesTooltip,s.render(),S.require(\"smilies\",function(){s.reset(\"微博-默认\")})),s.replybox=i,s.el.appendTo(t.body).css({top:i.el.offset().top+i.el.outerHeight()+4+\"px\",left:i.el.find(\".ds-textarea-wrapper\").offset().left+\"px\"}),H(t.body).click(x)):x(e),!1}),x=(g.find(\".ds-add-image\").click(function(e){var s=k[0],a=s.value,i=\"请输入图片地址\",r='<img src=\"'+i+'\" />';if(t.selection){s.value=a.substring(0,k.data(\"ds-range-start\"))+r+a.substring(k.data(\"ds-range-end\"),a.length),s.value=s.value.replace(\"说点什么吧 ...\",\"\"),s.focus();var n=t.selection.createRange();n.collapse(),n.findText(i),n.select()}else{s.value=a.substring(0,s.selectionStart)+r+a.substring(s.selectionEnd);var o=s.value.search(i);s.setSelectionRange(o,o+i.length),s.focus()}e.preventDefault()}),i.hideSmilies=function(){w.removeClass(\"ds-expanded\"),S.smiliesTooltip.el.detach(),H(t.body).unbind(\"click\",x)}),T=function(e,t){var s=E(et[\"dialog-anonymous\"]({services:[\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"],options:c})),a=s.el.find(\".ds-dialog\").css(\"width\",\"320px\");if(a.find(\".ds-icons-32 a\").click(l),!c.deny_anonymous){var i=s.el.find(\"form\");i.submit(function(){var e=i.find(\"input[name=author_email]\").val();return!e&&!c.require_guest_email||e.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)?(t(S.toJSON(i)),s.close(),!1):(alert(\"请输入一个有效的email地址.\"),!1)}),i.find(\"input[name=author_name]\")[0].focus()}};c.deny_anonymous&&k.focus(function(){if(r()){T(b,q);var e=function(t){t.stopPropagation(),k.unbind(\"click\",e)};k.click(e)}return!1});var q=function(e){s(b),R.post(\"posts/create\",H.extend(S.toJSON(b),e),function(e){var t=lt[e.response.post_id]=new F(e.response),s=M(i.postList,t,c);if(\"asc\"==c.order==(\"top\"==c.formPosition)&&S.scrollTo(s),o.data.comments++,o.updateCounter(\"duoshuo\"),k.val(\"\").trigger(\"keyup\"),a(b),g.hasClass(\"ds-inline-replybox\")&&(g.detach(),i.actionsBar.removeClass(\"ds-reply-active\")),m)try{m.removeItem(\"ds_draft_\"+o.threadId)}catch(r){}},function(e){a(b),alert(e.errorMessage)})};b.submit(function(){if(b.data(\"submitting\"))return!1;var e=H.trim(b[0].message.value);return\"\"==e||!P.placeholder&&e==k.attr(\"placeholder\")?(alert(\"您还没写内容呢\"),!1):(r()?T(b,q):q(),!1)});var C=function(e){return H(e).hasClass(\"ds-service-icon-grey\")?null:H(e).attr(\"data-service\")};if(_.click(function(){return H(this).toggleClass(\"ds-service-icon-grey\").toggleClass(\"ds-service-icon\"),y.value=H.map(_,C).join(\",\"),y.checked=\"\"!=y.value,!1}),H(y).change(function(){var e=this.checked;_[e?\"removeClass\":\"addClass\"](\"ds-service-icon-grey\")[e?\"addClass\":\"removeClass\"](\"ds-service-icon\"),this.value=H.map(_,C).join(\",\")}),!e&&m){var j=\"ds_draft_\"+o.threadId;k.bind(\"focus blur keyup\",function(e){var t=H(e.currentTarget).val();try{m[j]=t}catch(e){}}),m[j]&&k.val(m[j])}return this}},st.Dialog=J.extend({init:function(e,t){(this.el=H(\"#ds-wrapper\"))[0]||(this.el=p(H('<div id=\"ds-wrapper\"></div>'))),this.options=H.extend({width:600},t),e!==s&&H(e).attr(\"id\",\"ds-reset\").appendTo(this.el)},open:function(){function e(e){return 27==e.which?(a.close(),!1):void 0}function s(){return a.close(),!1}var a=this;return a.el.hide().appendTo(t.body).fadeIn(200),P.ie6&&a.el.css(\"top\",V.scrollTop()+100),a.el.show().find(\".ds-dialog\").delegate(\"a.ds-dialog-close\",\"click\",function(){return a.close(),!1}).click(i),Y.keydown(e),H(t.body).click(s),a.close=function(){Y.unbind(\"keydown\",e),H(t.body).unbind(\"click\",s),a.el.fadeOut(200,function(){H(this).remove()}),a.trigger(\"close\")},a}}),et.likePanel=function(e){return e.likes?'<span class=\"ds-highlight\">'+e.likes+\"</span> 人喜欢\":\"\"},st.Meta=function(e){this.embedThread=e},st.Meta.prototype={render:function(){function a(a){function r(e){o.set(e),n.resetLikePanel()}function c(){n.tooltip.detach(),H(t.body).unbind(\"click\",c)}function u(t){switch(this.className){case\"ds-like-tooltip-close\":c(t);break;default:if(!e.open(this.href,\"_blank\",\"height=500,width=600,top=0,left=0,toolbar=no,menubar=no,resizable=yes,location=yes,status=no\"))return}return!1}var p=l.hasClass(\"ds-thread-liked\");if(R.post(\"threads/vote\",{thread_id:n.embedThread.threadId,vote:p?0:1},r),l.toggleClass(\"ds-thread-liked\"),l.find(\".ds-thread-like-text\").text(p?\"喜欢\":\"已喜欢\"),p)return n.tooltip&&c(a),!1;if(n.tooltip===s){var h=et.likeTooltip({services:{qzone:\"QQ空间\",weibo:\"新浪微博\",qqt:\"腾讯微博\",renren:\"人人网\",kaixin:\"开心网\",douban:\"豆瓣网\",baidu:\"百度搜藏\"},thread_id:o.data.thread_id});n.tooltip=H(h).click(i).delegate(\"a\",\"click\",u)}var f={};return f.left=0,f.top=d.position().top+d.outerHeight()-4+\"px\",n.tooltip.appendTo(n.embedThread.innerEl).css(f),H(t.body).click(c),!1}var n=this,o=n.embedThread.model,d=n.el=H(et.meta(o.toJSON())),l=d.find(\".ds-like-thread-button\");return l.click(a),n.resetLikePanel(),r()&&d.hide(),n},resetLikePanel:function(){this.el.find(\".ds-like-panel\").html(et.likePanel(this.embedThread.model.toJSON()))}},st.PostListHead=function(e){this.embedThread=e},st.PostListHead.prototype={render:function(){function e(e){r.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.page=1;var t=e.currentTarget;switch(t.className){case\"ds-comments-tab-duoshuo\":a.params.source=\"duoshuo\",s.replybox.el.show();break;case\"ds-comments-tab-repost\":a.params.source=\"repost\",s.replybox.el.hide();break;case\"ds-comments-tab-weibo\":a.params.source=\"weibo\",s.replybox.el.hide();break;case\"ds-comments-tab-qqt\":a.params.source=\"qqt\",s.replybox.el.hide()}return H(t).addClass(\"ds-current\"),a.refetch(),!1}function t(){return n.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.order=s.options.order=this.className.replace(\"ds-order-\",\"\"),a.params.page=1,a.refetch(),H(this).addClass(\"ds-current\"),!1}var s=this.embedThread,a=s.postList,i=this.el=H(et.postListHead({thread:s.model.toJSON(),options:s.options})),r=i.find(\"ul.ds-comments-tabs\");r.delegate(\".ds-tab a\",\"click\",e);var n=i.find(\".ds-sort\");return n.delegate(\"a\",\"click\",t),n.find(\".ds-order-\"+a.params.order).addClass(\"ds-current\"),this}},st.Paginator=function(e){function t(){return i.params.page=parseInt(this.innerHTML),i.refetch(),a.find(\".ds-current\").removeClass(\"ds-current\"),H(this).addClass(\"ds-current\"),!1}e=e||{};var s=this,a=s.el=e.el||H('<div class=\"ds-paginator\"></div>'),i=s.collection=e.collection;a.delegate(\"a\",\"click\",t)},st.Paginator.prototype={reset:function(e){function t(e){i.push('<a data-page=\"'+e+'\" href=\"javascript:void(0);\">'+e+\"</a>\")}var s,a=this.collection.params.page||1,i=[];if(a>1)for(t(1),s=a>4?a-2:2,s>2&&i.push('<span class=\"page-break\">...</span>');a>s;s++)t(s);if(i.push('<a data-page=\"'+a+'\" href=\"javascript:void(0);\" class=\"ds-current\">'+a+\"</a>\"),a<e.pages){for(s=a+1;a+4>=s&&s<e.pages;s++)t(s);s<e.pages&&i.push('<span class=\"page-break\">...</span>'),t(e.pages)}this.el.html('<div class=\"ds-border\"></div>'+i.join(\" \"))[e.pages>1?\"show\":\"hide\"]()}},S.addSmilies=function(e,t){var s=S.smiliesTooltip;s&&s.el.find(\"ul.ds-smilies-tabs\").append(\"<li><a>\"+e+\"</a></li>\"),S.smilies[e]=t},st.SmiliesTooltip=function(){},st.SmiliesTooltip.prototype={render:function(){function e(){var e=s.replybox,a=e.el.find(\"textarea\"),i=a[0],r=i.value;if(t.selection){i.value=r.substring(0,a.data(\"ds-range-start\"))+this.title+r.substring(a.data(\"ds-range-end\"),r.length),i.value=i.value.replace(z.leave_a_message,\"\"),i.focus();var n=t.selection.createRange();n.moveStart(\"character\",a.data(\"ds-range-start\")+this.title.length),n.collapse(),n.select()}else{var o=i.selectionStart+this.title.length;i.value=r.substring(0,i.selectionStart)+this.title+r.substring(i.selectionEnd),i.setSelectionRange(o,o)}e.hideSmilies(),i.focus()}var s=this,a=s.el=H(et.smiliesTooltip(L));return a.click(i).find(\"ul.ds-smilies-tabs\").delegate(\"a\",\"click\",function(){s.reset(this.innerHTML)}),a.find(\".ds-smilies-container\").delegate(\"img\",\"click\",e),this},reset:function(e){function t(t,s){var i=0===e.indexOf(\"微博\")?\"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/\"+s.replace(\"_org\",\"_thumb\"):S.STATIC_URL+\"/images/smilies/\"+s;\"WordPress\"===e&&(t=\" \"+t+\" \"),a+='<li><img src=\"'+i+'\" title=\"'+_(t)+'\" /></li>'}var s=this.el.find(\"ul.ds-smilies-tabs\");s.find(\"a.ds-current\").removeClass(\"ds-current\"),s.find(\"a\").filter(function(){return this.innerHTML==e}).addClass(\"ds-current\");var a=\"<ul>\";return H.each(L[e],t),a+=\"</ul>\",this.el.find(\".ds-smilies-container\").html(a),this}},et.postPlaceholder=function(){return['<li class=\"ds-post ds-post-placeholder\">',z.no_comments_yet,\"</li>\"].join(\"\")};var X=H('<div id=\"ds-bubble\"><div class=\"ds-bubble-content\"></div><div class=\"ds-arrow ds-arrow-down ds-arrow-border\"></div><div class=\"ds-arrow ds-arrow-down\"></div></div>'),K=X.find(\".ds-bubble-content\").delegate(\"a.ds-ctx-open\",\"click\",function(){function e(e){function t(e,t){return et.ctxPost({post:e,index:t})}C.log(H.map(e.response,t).join(\"\\n\"));s.el.find(\"ol\");s.el.find(\"ol\").html(H.map(e.response,t).join(\"\\n\"))}var t={};t.post_id=K.attr(\"data-post-id\"),R.get(\"posts/conversation\",t,e);var s=E('<h2>查看对话</h2><ol id=\"ds-ctx\"></ol>');return s.el.find(\".ds-dialog\").css(\"width\",\"600px\"),s.el.find(\".ds-dialog-body\").css({\"max-height\":\"350px\",_height:\"350px\",\"overflow-y\":\"auto\",\"padding-top\":\"10px\"}),!1}),tt=bubbleOutTimer=0;X.mouseenter(N).mouseleave(I),st.PostList=function(e){e&&(e.params&&(this.params=e.params),e.embedThread&&(this.embedThread=e.embedThread)),this.el=H('<ul class=\"ds-comments\"></ul>')},st.PostList.prototype={url:\"threads/listPosts\",render:function(){return U.call(this.el,this.embedThread,this.embedThread.options),this},reset:function(e){var t=this.embedThread.options;this.el.html(e[0]?H.map(lt.getJSON(e),function(e){return et.post({post:e,options:t})}).join(\"\"):et.postPlaceholder())},refetch:function(){function e(e){lt.set(e.parentPosts||e.relatedPosts),ct.set(e.users),s.reset(e.response),s.embedThread.paginator.reset(e.cursor),s.el.fadeTo(200,1),S.scrollTo(s.el),a.remove()}var s=this,a=H(et.indicator()).appendTo(t.body).fadeIn(200);s.el.fadeTo(200,.5),R.get(s.url,s.params,e)}},st.RelatedRead=function(){this._init()},st.RelatedRead.prototype={_init:function(){this.el=H('<div id=\"ds-related-reads\"></div>')},load:function(s){e.__duoshuo_id__=s,e.readsByToutiao=[],e.readsByToutiao.push({id:\"ds-related-reads\",num:3});var a=\"//s0.pstatp.com/site/reads-sdk/5bf3702b38076207bee1.js\",i=t.createElement(\"script\");i.src=a,i.charset=\"utf-8\",i.crossOrigin=\"anonymous\",t.head.appendChild(i)},mount:function(e){this.el.insertBefore(e)}},st.EmbedThread=Q.extend({uri:\"threads/listPosts\",params:\"thread-id local-thread-id source-thread-id thread-key category channel-key author-key author-id url limit order max-depth form-position container-url\"+(v.match(/MSIE 6\\.0/)?\"\":\" title image thumbnail\"),render:function(){var e=this.el;if(\"请将此处替换成文章在你的站点中的ID\"===e.data(\"thread-key\"))return alert(\"请设置正确的 data-thread-key 属性\"),!1;e.attr(\"id\",\"ds-thread\").append(et.waitingImg());var t=e.width(),s=e.data(\"url\")||!e.attr(\"data-thread-id\")&&H(\"link[rel=canonical]\").attr(\"href\");s?e.data(\"url\",k(s)):e.data(\"container-url\",h.href),t&&400>=t&&e.addClass(\"ds-narrow\").data(\"max-depth\",1)},updateCounter:function(e){function t(e){return e.substr(e.indexOf(\"}\")+1)}var s={duoshuo:[\"comments\",t(z.comments_multiple)||\"评论\"],repost:[\"reposts\",t(z.reposts_multiple)||\"转载\"],weibo:[\"weibo_reposts\",t(z.weibo_reposts_multiple)||\"新浪微博\"],qqt:[\"qqt_reposts\",t(z.qqt_reposts_multiple)||\"腾讯微博\"]};for(var a in s)if(!e||e==a){var i=this.data[s[a][0]];this.el.find(\".ds-comments-tab-\"+a).html(this.el.hasClass(\"ds-narrow\")?'<span class=\"ds-service-icon ds-'+a+'\"></span>'+i:(i?'<span class=\"ds-highlight\">'+i+\"</span>\":\"0\")+s[a][1])}},onError:function(e){this.el.html(\"评论框出错啦(\"+e.code+\"): \"+e.errorMessage)},onload:function(t){var a=this,i=a.threadId=t.thread.thread_id,n=t.cursor,o=a.options=t.options,d=a.innerEl=p(H('<div id=\"ds-reset\"></div>').appendTo(a.el));a.model=new G(a.data=t.thread),lt.set(t.parentPosts||t.relatedPosts),ct.set(t.users),a.el.find(\"#ds-waiting\").remove(),t.options&&t.options.show_recommend&&(a.relatedRead=new st.RelatedRead,a.relatedRead.load(t.thread.site_id),a.relatedRead.mount(d)),o.like_thread_enabled&&(a.meta=new st.Meta(a),d.append(a.meta.render().el)),o.hot_posts&&t.hotPosts&&t.hotPosts.length&&(a.hotPosts=new st.HotPosts(H('<div class=\"ds-rounded\"></div>'),{max_depth:1,show_context:o.show_context}),a.hotPosts.thread=a,d.append(a.hotPosts.el),a.hotPosts.onload({list:lt.getJSON(t.hotPosts)})),a.postListHead=new st.PostListHead(a),a.postList=new st.PostList({embedThread:a,params:{source:\"duoshuo\",thread_id:i,max_depth:o.max_depth,order:o.order,limit:o.limit}}),a.postList.render().reset(t.response),a.paginator=new st.Paginator({collection:a.postList}),a.paginator.reset(n);var c=a.replybox=new st.Replybox(a);c.postList=a.postList.el,r()?a.loginButtons=H(et.loginButtons()).delegate(\"a.ds-more-services\",\"click\",function(){return a.loginButtons.find(\".ds-additional-services\").toggle(),!1}).delegate(\"a.ds-service-link\",\"click\",l):a.toolbar=H(et.toolbar()).delegate(\".ds-account-control\",\"mouseenter\",function(){H(this).addClass(\"ds-active\")}).delegate(\".ds-account-control\",\"mouseleave\",function(){H(this).removeClass(\"ds-active\")}).delegate(\"a.ds-bind-more\",\"click\",function(){var e=E(et[\"dialog-bind-more\"]()).el.find(\".ds-dialog\").addClass(\"ds-dialog-bind-more\").css(\"width\",\"300px\");return e.find(\"a.ds-service-link\").click(l),!1}).delegate(\"a.ds-unread-comments-count\",\"click\",function(){return T(\"unread-comments\"),!1});var u=['<a name=\"respond\"></a>',a.toolbar||a.loginButtons,c.render().el];\"top\"==o.formPosition&&H.fn.append.apply(d,u),d.append(a.postListHead.render().el,a.postList.el,a.paginator.el),\"bottom\"==o.formPosition&&H.fn.append.apply(d,u),d.append(et.poweredBy(o.poweredby_text)),a.updateCounter(),t.alerts&&H.each(t.alerts,function(e,t){H('<div class=\"ds-alert\">'+t+\"</div>\").insertBefore(a.toolbar||loginButtons)}),o.message&&c.el.find(\"textarea\").val(o.message).focus(),ot.on(\"reset\",function(){var e=ot.data.comments||0;d.find(\"a.ds-unread-comments-count\").html(e).attr(\"title\",e?\"你有\"+e+\"条新回复\":\"你没有新回复\").css(\"display\",e?\"inline\":\"none\")}),o.mzadx_id&&(S.require(\"mzadxN\",function(){}),H('<div id=\"MZADX_'+o.mzadx_id+'\" style=\"margin:0 auto;\"></div>').appendTo(d),__mz_rpq=e.__mz_rpq||[],__mz_rpq.push({l:[o.mzadx_id],r:\"1\",_srv:\"MZADX\",_callback:function(){}})),S.thread=a,ot.data!==s&&ot.trigger(\"reset\"),r()||A.send({visit_thread_id:a.threadId})},onMessage:function(e){M(this.postList.el,new F(e),this.options)}}),st.HotPosts=Q.extend({tmpl:\"hotPosts\",params:\"show-quote\",render:function(){return this.el.attr(\"id\",\"ds-hot-posts\"),this},onload:function(e){e.options=H.extend(this.options,e.options),Q.prototype.onload.call(this,e),U.call(this.el.find(\"ul\"),this.thread,this.options)}}),st.RecentComments=Q.extend({tmpl:\"commentList\",uri:\"sites/listRecentPosts\",params:\"show-avatars show-time show-title avatar-size show-admin excerpt-length num-items channel-key\",render:function(){this.el.attr(\"id\",\"ds-recent-comments\")},prepare:function(e){return{list:H.map(e.response,function(e){return new F(e).toJSON()})}}}),st.RecentVisitors=Q.extend({tmpl:\"recentVisitors\",uri:\"sites/listVisitors\",params:\"show-time avatar-size num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-recent-visitors\").append(this.waitingEl=H(et.waitingImg()))}}),st.TopThreads=Q.extend({tmpl:\"topThreads\",uri:\"sites/listTopThreads\",params:\"range num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-top-threads\").append(this.waitingEl=H(et.waitingImg()))}}),st.LoginWidget=Q.extend({tmpl:\"loginWidget\",render:function(){var e=this.el;e.attr(\"id\",\"ds-login\").html(et.loginWidget([\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"])),e.find(\"a\").click(l),e.find(\"a.ds-logout\").attr(\"href\",Z.logoutUrl())}}),st.ThreadCount=Q.extend({onload:function(e){var t=this.el,s=t.data(\"count-type\")||\"comments\",a=e.data[s];t[t.data(\"replace\")?\"replaceWith\":\"html\"](z[s+\"_\"+(a?a>1?\"multiple\":\"one\":\"zero\")].replace(\"{num}\",a))}}),st.ShareWidget=Q.extend({tmpl:\"shareWidget\",render:function(){var e={copyright:\"多说分享插件\",services:[\"weibo\",\"qzone\",\"sohu\",\"renren\",\"netease\",\"qqt\",\"kaixin\",\"douban\",\"qq\",\"meilishuo\",\"mogujie\",\"baidu\",\"taobao\",\"google\",\"wechat\",\"diandian\",\"huaban\",\"duitang\",\"youdao\",\"pengyou\",\"facebook\",\"twitter\",\"linkedin\",\"msn\"]};this.el.attr(\"id\",\"ds-share\"),this.el.children().attr(\"id\",\"ds-reset\"),this.el.find(\".ds-share-aside-inner\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").hide(),this.el.hasClass(\"flat\")&&this.el.find(\"a\").each(function(){H(this).addClass(\"flat\")}),p(this.el),this.delegateEvents()},delegateEvents:function(){var s=this,i=s.el;if(i.children().hasClass(\"ds-share-inline\")){var r=\".ds-share-icons-more\",n=i.find(r),d=\"[data-toggle=ds-share-icons-more]\";i.delegate(d,\"mouseover\",function(){n.show()}),i.delegate(d,\"mouseout\",function(){n.hide()}),i.delegate(r,\"mouseover\",function(){n.show()}),i.delegate(r,\"mouseout\",function(){n.hide()})}else{var l=i.children().hasClass(\"ds-share-aside-left\")?\"slide-to-right\":\"slide-to-left\",c=i.children();if(!o.cssProperty(\"transition\")){var u=i.children().hasClass(\"ds-share-aside-left\")?\"left\":\"right\";i.delegate(\".ds-share-aside-toggle\",\"mouseover\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)-195:e[u]=0,c.animate(e,200)}),i.delegate(\".ds-share-aside-inner\",\"mouseleave\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)+230:e[u]=-229,c.animate(e,200)})}i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseover\",function(){c.addClass(l)}),i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseleave\",function(){c.removeClass(l)})}i.delegate(\"a\",\"click\",function(t){var s=H(this).data(\"service\");if(!i.data(\"url\"))return void alert(\"请设置data-url\");if(\"wechat\"===s){var r=a()+\"/api/qrcode/getImage.png\",n=\"?size=240&text=\"+i.data(\"url\"),d=E(et[\"dialog-qrcode\"]({qrcode_url:r+n,url:i.data(\"url\")}));d.el.find(\".ds-dialog\").css(\"width\",\"320px\")}else{var l=a()+\"/share-proxy/?\"+o.param({service:H(this).data(\"service\"),thread_key:i.data(\"threadKey\"),title:i.data(\"title\"),images:i.data(\"images\"),content:i.data(\"content\"),url:i.data(\"url\")});e.open(l,\"_blank\")}t.preventDefault(),t.stopPropagation()})}});var it=0;S.initSelector=function(e,t){function s(e){W(e),o.extend(z,e.options),dt.set(e.response)}var a=[];!q()||!H.isReady&&j||H(e).each(function(e,s){var i=H(s);if(!i.data(\"initialized\")){i.data(\"initialized\",!0);var r=new st[t.type](i,t);if(at.push(r),\"ThreadCount\"===t.type){var n=i.attr(\"data-thread-key\");i.attr(\"data-channel-key\")&&(n=i.attr(\"data-channel-key\")+\":\"+n),a.push(n),dt[n]||(dt[n]=new G({})),dt[n].on(\"reset\",function(){r.onload(this)})}else if(r.uri){var o={};H.each(r.params.split(\" \"),function(e,t){o[t.replace(/-/g,\"_\")]=i.attr(\"data-\"+t)||i.data(t)}),R.get(r.uri,B(o),function(e){r.load(e)})}}}),a.length&&R.get(\"threads/counts\",B({threads:a.join(\",\")}),s)},(S.initView=function(){H.each(O,S.initSelector)})(),H(function(){if(!c){if(!q())return C.error(\"缺少 duoshuoQuery 的定义\");C.warn(\"请在加载多说 embed.js 之前定义 duoshuoQuery\")}setInterval(function(){H(\".ds-time\").each(function(){var e=H(this).attr(\"datetime\");e&&(this.innerHTML=S.elapsedTime(e))})},2e4),c.ondomready&&c.ondomready(),S.initView(),!it&&c.short_name&&R.get(\"analytics/ping\",B({}),W)})})}}(window,document);","source":"images/embed.js","raw":"!function(e,t,s){function a(){return c.short_name?g+\"//\"+c.short_name+\".\"+S.DOMAIN:S.REMOTE}function i(){function t(){for(var t;t=y.shift();){var a=t.url,i=new s(t.title,{dir:\"auto\",icon:t.iconUrl,body:t.body});try{i.onclick=function(){e.focus(),h.href=a,i.close()}}catch(r){}setTimeout(function(){i.close&&i.close()},8e3)}}var s=e.Notification;\"Notification\"in e&&\"denied\"!==s.permission&&(\"granted\"===s.permission&&t(),s.requestPermission(function(e){\"granted\"===e&&t()}))}function r(){return 0==nt.data.user_id}function n(e){S.theme=e,\"none\"!=e&&o.injectStylesheet(S.STATIC_URL+\"/styles/embed\"+(e?\".\"+e+\".css?\"+M[e]:\".\"+short_name)+\".css\")}var o={},d=t.getElementsByTagName(\"head\")[0]||t.getElementsByTagName(\"body\")[0];if(o.extend=function(e,t){for(var s in t)e[s]=t[s];return e},o.injectScript=function(a,i){var r=t.createElement(\"script\"),n=t.head||t.getElementsByTagName(\"head\")[0]||t.documentElement;r.type=\"text/javascript\",r.src=a,r.async=\"async\",r.charset=\"utf-8\",i&&(r.onload=r.onreadystatechange=function(t,a){var o=a||!r.readyState||/loaded|complete/.test(r.readyState);o&&(r.onload=r.onreadystatechange=null,n&&r.parentNode&&n.removeChild(r),r=s,a||i.call(e))}),n.insertBefore(r,n.firstChild)},o.injectStylesheet=function(e){var s=t.createElement(\"link\");s.type=\"text/css\",s.rel=\"stylesheet\",s.href=e,d.appendChild(s)},o.injectStyle=function(e){var s=t.createElement(\"style\");return s.type=\"text/css\",d.appendChild(s),e=e.replace(/\\}/g,\"}\\n\"),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(t.createTextNode(e)),s},o.getCookie=function(e){for(var a,i,r,n=\" \"+e+\"=\",o=t.cookie.split(\";\"),d=0;d<o.length;d++)if(a=\" \"+o[d],i=a.indexOf(n),i>=0&&i+n.length==(r=a.indexOf(\"=\")+1))return decodeURIComponent(a.substring(r,a.length).replace(/\\+/g,\"\"));return s},o.param=function(e){var t=[];for(var a in e)e[a]!=s&&t.push(a+\"=\"+encodeURIComponent(e[a]));return t.join(\"&\")},o.cssProperty=function(e,s){var a=(t.body||t.documentElement).style;if(\"undefined\"==typeof a)return!1;if(\"string\"==typeof a[e])return s?e:!0;for(var i=[\"Moz\",\"Webkit\",\"ms\"],e=e.charAt(0).toUpperCase()+e.substr(1),r=0;r<i.length;r++)if(\"string\"==typeof a[i[r]+e])return s?i[r]+e:!0},!e.DUOSHUO){for(var l in Object.prototype)return alert(\"Object.prototype 不为空，请不要给 Object.prototype 设置方法\");var c,u,p=e.JSON,h=e.location,f=e.XMLHttpRequest,m=p&&p.stringify&&e.localStorage,v=e.navigator.userAgent,g=\"https:\"==t.location.protocol?\"https:\":\"http:\",b=0,y=[],_=u=function(){function e(e){return t[e]||\"&amp;\"}var t={\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},s=/&(?!\\w+;)|[<>\"'`]/g,a=/[&<>\"'`]/;return function(t){return null==t||t===!1?\"\":a.test(t)?t.replace(s,e):t}}(),k=function(e){if(e.match(/^(http|https):/))return e;var s=t.createElement(\"a\");return s.href=e,P.hrefNormalized?s.href:s.getAttribute(\"href\",4)},w=function(e){return function(){return e}},x=function(){for(var e={},t=0;t<arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var s=o.param(e);return s?\"?\"+s:\"\"},T=function(){var e=o.getCookie(\"duoshuo_token\");return e?{jwt:e}:c.remote_auth?{short_name:c.short_name,remote_auth:c.remote_auth}:s},q=function(){if(!c&&(c=e.duoshuoQuery)){if(!c.short_name||\"your_duoshuo_short_name\"===c.short_name)return c=s,void alert(\"你还没有设置多说域名(duoshuoQuery.short_name)，填入已有域名或创建新站点：http://duoshuo.com/create-site/\");it.trigger(\"queryDefined\")}return c},C=function(e){return e&&e.error&&e.warn?e:{error:function(){},log:function(){},warn:function(){}}}(e.console),S=e.DUOSHUO={sourceName:{weibo:\"新浪微博\",qq:\"QQ\",qzone:\"QQ空间\",qqt:\"腾讯微博\",renren:\"人人网\",douban:\"豆瓣网\",kaixin:\"开心网\",sohu:\"搜狐微博\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},serviceNames:{weibo:\"微博\",qq:\"QQ\",douban:\"豆瓣\",renren:\"人人\",kaixin:\"开心\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},parseDate:function(e){return e.parse(\"2011-10-28T00:00:00+08:00\")&&function(t){return new e(t)}||e.parse(\"2011/10/28T00:00:00+0800\")&&function(t){return new e(t.replace(/-/g,\"/\").replace(/:(\\d\\d)$/,\"$1\"))}||e.parse(\"2011/10/28 00:00:00+0800\")&&function(t){return new e(t.replace(/-/g,\"/\").replace(/:(\\d\\d)$/,\"$1\").replace(\"T\",\" \"))}||function(t){return new e(t)}}(Date),fullTime:function(e){var t=S.parseDate(e);return t.getFullYear()+\"年\"+(t.getMonth()+1)+\"月\"+t.getDate()+\"日 \"+t.toLocaleTimeString()},elapsedTime:function(e){var t=S.parseDate(e),s=new Date,a=(s-b-t)/1e3;return 10>a?\"刚刚\":60>a?Math.round(a)+\"秒前\":3600>a?Math.round(a/60)+\"分钟前\":86400>a?Math.round(a/3600)+\"小时前\":(s.getFullYear()==t.getFullYear()?\"\":t.getFullYear()+\"年\")+(t.getMonth()+1)+\"月\"+t.getDate()+\"日\"},compileStyle:function(e){var t=\"\",s={};if(s.textbox=\"#ds-thread #ds-reset .ds-replybox .ds-textarea-wrapper\",!e)return t;for(var a in e)t+=s[a]+\"{\"+e[a]+\"}\\n\";return t},init:function(e,t){e&&!O[e]&&(O[e]=t||{type:\"EmbedThread\"}),S.initView&&S.initView()}},j=t.all,P=S.support=function(){var s=t.createElement(\"div\");s.innerHTML='<a href=\"/a\" style=\"opacity:.55;\">a</a><input type=\"checkbox\"/>';var a=s.getElementsByTagName(\"a\")[0],i=s.getElementsByTagName(\"input\")[0],r={placeholder:\"placeholder\"in i,touch:\"ontouchstart\"in e||\"onmsgesturechange\"in e,opacity:/^0.55$/.test(a.style.opacity),hrefNormalized:\"/a\"===a.getAttribute(\"href\"),iOS:v.match(/ \\((iPad|iPhone|iPod);( U;)? CPU( iPhone)? OS /),android:v.match(/ \\(Linux; U; Android /)};return r.ie6=!f&&\"undefined\"==typeof s.style.maxHeight,r.authInWin=e.postMessage&&e.screen.width>800&&!r.iOS&&!r.android&&h.origin,r}(),O=S.selectors={\".ds-thread\":{type:\"EmbedThread\"},\".ds-recent-comments\":{type:\"RecentComments\"},\".ds-recent-visitors\":{type:\"RecentVisitors\"},\".ds-top-users\":{type:\"TopUsers\"},\".ds-top-threads\":{type:\"TopThreads\"},\".ds-login\":{type:\"LoginWidget\"},\".ds-thread-count\":{type:\"ThreadCount\"},\".ds-share\":{type:\"ShareWidget\"}},E=S.openDialog=function(e){return S.dialog!==s&&S.dialog.el.remove(),S.dialog=new st.Dialog(et.dialog(e)).open()},L=S.smilies={};S.require=function(){function t(e){var t=U[e]?\"?\"+U[e]+\".js\":\"\";return S.STATIC_URL+\"/libs/\"+e+\".js\"+t}var s={mzadxN:\"undefined\"!=typeof mzadxN};return\"undefined\"!=typeof jQuery&&jQuery.fn.jquery>=\"1.5\"&&(s[\"embed.compat\"]=!0,S.jQuery=e.jQuery),function(e,a){if(\"string\"==typeof e)s[e]?a():o.injectScript(t(e),function(){s[e]=!0,a()});else if(\"object\"==typeof e){var i,r=!0;for(i=0;i<e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectScript(t(n),function(){s[n]=!0;for(var t=0;t<e.length;t++)if(!s[e[t]])return;a()}))})(e[i]);r&&a()}}}();for(var N=0,I=[\"EmbedThread\",\"RecentComments\",\"RecentVisitors\",\"TopUsers\",\"TopThreads\",\"LoginWidget\",\"ThreadCount\"];N<I.length;N++)S[I[N]]=function(e){return function(t,s){s=s||{},s.type=e,t&&!O[t]&&(O[t]=s),S.initSelector&&S.initSelector(t,s)}}(I[N]),S[\"create\"+I[N]]=function(e){return function(s,a){var i=t.createElement(s);for(var r in a)i.setAttribute(\"data-\"+r,a[r]);return S[e](i),i}}(I[N]);S.RecentCommentsWidget=S.RecentComments;var R=S.API={ajax:function(e,t,i,r,n){function d(e){var t=e.getResponseHeader(\"Date\");t&&(b=new Date-new Date(t))}function l(e,t,s){var a,i,o,l=t;if(e>=200&&300>e||304===e)if(304===e)l=\"notmodified\",o=!0;else try{a=p.parse(s),l=\"success\",o=!0}catch(c){l=\"parsererror\",i=c}else{i=l,(!l||e)&&(l=\"error\",0>e&&(e=0));try{a=p.parse(s)}catch(c){l=\"parsererror\",i=c}}o?r&&r(a):\"parseerror\"===l?C.error(\"解析错误: \"+s):(C.error(\"出错啦(\"+a.code+\"): \"+a.errorMessage),n&&n(a),a.errorTrace&&C.error(a.errorTrace)),d(m)}var u=o.getCookie(\"duoshuo_token\");i=i||{},i.v=S.version,u?i.jwt=u:c.remote_auth&&(i.remote_auth=c.remote_auth);var h=f&&p&&p.parse;if(h){var m=new f,v=!!m&&\"withCredentials\"in m;if(v){var g;return m.open(e,a()+\"/api/\"+t+\".json\"+(\"GET\"==e?\"?\"+o.param(i):\"\"),!0),m.withCredentials=!0,m.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=UTF-8\"),m.send(\"GET\"==e?null:o.param(i)),g=function(e,t){var a,i,r,n;try{if(g&&(t||4===m.readyState))if(g=s,t)4!==m.readyState&&m.abort();else{a=m.status,r=m.getAllResponseHeaders();try{n=m.responseText}catch(e){}try{i=m.statusText}catch(o){i=\"\"}}}catch(d){t||l(-1,d)}n&&l(a,i,n,r)},void(4===m.readyState?g():m.onreadystatechange=g)}}\"GET\"!=e&&(i._method=\"POST\");var y=\"cb_\"+Math.round(1e6*Math.random());R[y]=function(e){switch(e.code){case 0:r&&r(e);break;default:n&&n(e),C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}},i.callback=\"DUOSHUO.API['\"+y+\"']\",o.injectScript(a()+\"/api/\"+t+\".jsonp?\"+o.param(i))},get:function(e,t,s,a){return this.ajax(\"GET\",e,t,s,a)},post:function(e,t,s,a){return this.ajax(\"POST\",e,t,s,a)}},A=S.ws={messages:[],send:function(s){if(!(\"WebSocket\"in e&&p))return!1;var a=this;if(a.messages.push(p.stringify(s)),!a.webSocket){var r=\"https:\"===t.location.protocol?\"wss://ws.duoshuo.com:8202/\":\"ws://ws.duoshuo.com:8201/\",n=a.webSocket=new WebSocket(r);n.onopen=function(){var e,t=1===n.readyState;if(t)for(;e=a.messages.shift();)n.send(e)},n.onmessage=function(e){try{var t=p.parse(e.data)}catch(s){return}switch(t.type){case\"post\":for(var a,r=0;r<S.pagelets.length;r++)a=S.pagelets[r],a.threadId==t.thread_id&&a.onMessage(t);break;case\"notification\":y.push(t),i()}},e.addEventListener(\"beforeunload\",function(){n.close()})}a.webSocket.onopen()}};S.DOMAIN=\"duoshuo.com\",S.STATIC_URL=g+\"//static.duoshuo.com\",S.REMOTE=g+\"//duoshuo.com\",S.version=\"16.6.16\";var M={\"default\":\"9b2a46a0\",dark:\"33f3a5ac\",bluebox:\"39a75d50\",newhua:\"706ba4eb\",justflat:\"9d72ec5a\"},U={\"embed.compat\":\"24f8ca3f\",smilies:\"921e8eda\"},z={post:\"发布\",posting:\"正在发布\",settings:\"设置\",reply:\"回复\",like:\"顶\",repost:\"转发\",report:\"举报\",\"delete\":\"删除\",reply_to:\"回复 \",reposts:\"转发\",comments:\"评论\",floor:\"楼\",latest:\"最新\",earliest:\"最早\",hottest:\"最热\",share_to:\"分享到:\",leave_a_message:\"说点什么吧…\",no_comments_yet:\"还没有评论，沙发等你来抢\",repost_reason:\"请输入转发理由\",hot_posts_title:\"被顶起来的评论\",comments_zero:\"暂无评论\",comments_one:\"1条评论\",comments_multiple:\"{num}条评论\",reposts_zero:\"暂无转发\",reposts_one:\"1条转发\",reposts_multiple:\"{num}条转发\",weibo_reposts_zero:\"暂无新浪微博\",weibo_reposts_one:\"1条新浪微博\",weibo_reposts_multiple:\"{num}条新浪微博\",qqt_reposts_zero:\"暂无腾讯微博\",qqt_reposts_one:\"1条腾讯微博\",qqt_reposts_multiple:\"{num}条腾讯微博\"},D={get:function(e){return m?m[e]:void 0},save:function(e,t){if(m)try{m.removeItem(e),m[e]=p.stringify(t),m.removeItem(e+\":timestamp\"),m[e+\":timestamp\"]=Math.floor((new Date-b)/1e3)}catch(s){}}},W=S.loadRequire=function(t){if(t.visitor&&(!nt.data&&t.visitor.user_id&&e.Notification&&A.send({logged_user_id:t.visitor.user_id}),nt.reset(t.visitor)),t.site&&(rt.reset(t.site),D.save(\"ds_site_\"+c.short_name,t.site)),!S.theme&&rt.data.theme&&n(rt.data.theme),t.lang&&(o.extend(z,t.lang),D.save(\"ds_lang_\"+c.short_name,t.lang)),t.stylesheets)for(var s=0;s<t.stylesheets.length;s++)o.injectStylesheet(t.stylesheets[s]);if(t.nonce&&(S.nonce=t.nonce),t.style&&o.injectStyle((t.style||\"\")+S.compileStyle(c.component_style)),t.unread&&ot.reset(t.unread),t.warnings)for(var s=0;s<t.warnings.length;s++)C.warn(t.warnings[s])},B=0,H=S.Class=function(){};H.extend=function(e){function t(){!B&&this.init&&this.init.apply(this,arguments)}B=1;var s=new this;B=0;for(var a in e)s[a]=e[a];return t.prototype=s,t.prototype.constructor=t,t.extend=arguments.callee,t};var J=S.Event=H.extend({on:function(e,t){var a=this.handlers||(this.handlers={});return a[e]===s&&(a[e]=[]),a[e].push(t),this},trigger:function(e,t){var s=(this.handlers||(this.handlers={}))[e];if(s)for(var a=0;a<s.length&&s[a].call(this,t)!==!1;a++);return this}}),Q=S.Widget=J.extend({init:function(e,t){this.el=e,this.options=t||{},this.render()},render:function(){},reset:function(){},load:function(e){switch(e.code){case 0:W(e);var t=this.prepare(e);t.options=o.extend(this.options,e.options),this.onload(t);break;default:this.onError(e)}},onload:function(e){this.el.html(et[this.tmpl](e))},prepare:function(e){return e},onMessage:function(){},onError:function(e){C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}}),V=S.Model=J.extend({init:function(e){this.data=e},reset:function(e){this.data=e,this.trigger(\"reset\")},remove:function(e){this.data.splice(e,1),this.trigger(\"reset\")},set:function(e,t){if(t===s)for(var a in e)this.data[a]=e[a];else this.data[e]=t;return this.trigger(\"reset\"),this},toJSON:function(){return o.extend({},this.data)}}),$=V.extend({toJSON:function(){return o.extend({},this.data)}}),F=V.extend({toJSON:function(){var e=o.extend({},this.data);return e.theAuthor=ct[this.data.author_id]&&ct[this.data.author_id].data||this.data.author,e.parents=this.data.parents||[],e}}),G=V.extend({toJSON:function(){return o.extend({},this.data)}}),Y=function(e){this.model=e};Y.prototype.set=function(e){for(var t in e)e[t]&&(this[t]?this[t].set(e[t]):this[t]=new this.model(e[t]))},Y.prototype.get=function(e){for(var t=0,s=[];t<e.length;t++)s[t]=this[e[t]];return s},Y.prototype.getJSON=function(e){for(var t=0,s=[];t<e.length;t++)this[e[t]]&&s.push(this[e[t]].toJSON());return s};var Z={userUrl:function(e){return e.url},avatarUrl:function(e){return e.avatar_url||rt.data.default_avatar_url},loginUrl:function(e,t){return t||(t={}),c.sso&&c.sso.login&&(t.sso=1,t.redirect_uri=c.sso.login),a()+\"/login/\"+e+\"/\"+x(t)},bindUrl:function(e){return a()+\"/bind/\"+e+\"/\"+x(c.sso&&c.sso.login?{sso:1,redirect_uri:c.sso.login}:null,T())},logoutUrl:function(){return a()+\"/logout/\"+x(c.sso&&c.sso.logout?{sso:1,redirect_uri:c.sso.logout}:null)}},X=[\"weixin\",\"weibo\",\"qq\",\"renren\"],K=[\"douban\",\"kaixin\",\"baidu\",\"google\"],et=S.templates={userAnchor:function(e){return e.url?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(e.url)+'\">'+_(e.name)+\"</a>\":_(e.name)},avatarImg:function(e,t){return'<img src=\"'+_(Z.avatarUrl(e,t))+'\" alt=\"'+_(e.name)+'\"'+(t?' style=\"width:'+t+\"px;height:\"+t+'px\"':\"\")+\"/>\"},avatar:function(e,t){var s=et.avatarImg(e,t),i=Z.userUrl(e);return i?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(i)+'\" '+(e.user_id?\" onclick=\\\"this.href='\"+a()+\"/user-url/?user_id=\"+e.user_id+\"';\\\"\":\"\")+' title=\"'+_(e.name)+'\">'+s+\"</a>\":s},timeText:function(e){return e?'<span class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</span>\":\"\"},timeAnchor:function(e,t){return e?'<a href=\"'+t+'\" target=\"_blank\" rel=\"nofollow\" class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</a>\":\"\"},serviceIcon:function(e,t){return'<a href=\"javascript:void(0)\" class=\"ds-service-icon'+(t?\"-grey\":\"\")+\" ds-\"+e+'\" data-service=\"'+e+'\" title=\"'+S.sourceName[e]+'\"></a>'},poweredBy:function(e){return'<p class=\"ds-powered-by\"><a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"nofollow\">'+_(e)+\"</a></p>\"},indicator:w('<div id=\"ds-indicator\"></div>'),waitingImg:w('<div id=\"ds-waiting\"></div>'),loginItem:function(e,t){var s=Z[t?\"bindUrl\":\"loginUrl\"](e);return'<li>    <a href=\"'+s+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+e+'\">'+S.serviceNames[e]+(nt.data.social_uid[e]?' <span class=\"ds-icon ds-icon-ok\"></span>':\"\")+\"</a></li>\"}},tt=function(e){var t=[];for(var s in e)t.push('<input type=\"hidden\" name=\"'+s+'\" value=\"'+_(e[s])+'\" />');return t.join(\"\\n\")};et.commentList=function(e){var t=\"\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li class=\"ds-comment',e.options.show_avatars&&(t+=\" ds-show-avatars\"),t+='\" data-post-id=\"'+a.post_id+'\">',e.options.show_avatars&&(t+='<div class=\"ds-avatar\">'+et.avatar(a.theAuthor,e.options.avatar_size)+\"</div>\"),t+='<div class=\"ds-meta\">'+et.userAnchor(a.theAuthor),e.options.show_time&&(t+=et.timeText(a.created_at)),t+=\"</div>\",t+=e.options.show_title?'<div class=\"ds-thread-title\">在 <a href=\"'+u(a.thread.url)+'#comments\">'+u(a.thread.title)+'</a> 中评论</div><div class=\"ds-excerpt\">'+a.message+\"</div>\":'<a class=\"ds-excerpt\" title=\"'+a.thread.title+' 中的评论\" href=\"'+u(a.thread.url)+'#comments\">'+a.message+\"</a>\",t+=\"</li>\";return t},et.ctxPost=function(e){var t=\"\";return e.post&&(t+='<li class=\"ds-ctx-entry\"',e.hidden&&(t+=' style=\"display:none\"'),t+=' data-post-id=\"'+e.post.post_id+'\"><div class=\"ds-avatar\">'+et.avatar(e.post.theAuthor||e.post.author)+'</div><div class=\"ds-ctx-body\"><div class=\"ds-ctx-head\">'+et.userAnchor(e.post.theAuthor||e.post.author)+et.timeAnchor(e.post.created_at,e.post.url),e.index>=0&&(t+='<div class=\"ds-ctx-nth\" title=\"'+S.fullTime(e.post.created_at)+'\">'+(e.index+1)+z.floor+\"</div>\"),t+='</div><div class=\"ds-ctx-content\">'+e.post.message,e.index>=0&&(t+='　　　　　　　<div class=\"ds-comment-actions',e.post.vote>0&&(t+=\" ds-post-liked\"),t+='\">'+et.likePost(e.post)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-reply\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a></div>\"),t+=\"</div></div></li>\"),t},et[\"dialog-anonymous\"]=function(e){var t='<h2>社交帐号登录</h2><div class=\"ds-icons-32\">',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\",e.options.deny_anonymous||(t+='<h2>作为游客留言</h2><form><div class=\"ds-control-group\"><input type=\"text\" name=\"author_name\" id=\"ds-dialog-name\" value=\"'+u(nt.data.name)+'\" required /><label for=\"ds-dialog-name\">名字(必填)</label></div>',e.options.require_guest_email&&(t+='<div class=\"ds-control-group\"><input type=\"email\" name=\"author_email\" id=\"ds-dialog-email\" value=\"'+u(nt.data.email)+'\" required /><label for=\"ds-dialog-email\">邮箱(必填)</label></div>'),e.options.require_guest_url&&(t+='<div class=\"ds-control-group\"><input type=\"url\" name=\"author_url\" id=\"ds-dialog-url\" placeholder=\"http://\" value=\"'+u(nt.data.url)+'\" /><label for=\"ds-dialog-url\">网址(可选)</label></div>'),t+='<button type=\"submit\">发布</button></form>'),t},et[\"dialog-ask-for-auth\"]=function(){var e='<h2>社交帐号登录</h2><ul class=\"ds-service-list\">'+et.serviceList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul>\";return e},et[\"dialog-bind-more\"]=function(){var e='<h2>绑定更多帐号</h2><ul class=\"ds-service-list\">'+et.serviceBindList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceBindList(K)+'</ul><div style=\"clear:both\"></div>';return e},et[\"dialog-qrcode\"]=function(e){var t='<h2>微信扫一扫，分享到朋友圈</h2><div class=\"ds-share-qrcode\" style=\"text-align:center;\"><img src=\"'+e.qrcode_url+'\" alt=\"'+e.url+'\"></div>';return t},et[\"dialog-reposts\"]=function(e){var t='<h2>转发到微博</h2><div class=\"ds-quote\"><strong>@'+u(e.post.theAuthor.name)+\"</strong>: \"+e.post.message+\"</div><form>\"+tt({post_id:e.post.post_id})+'<div class=\"ds-textarea-wrapper\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.repost_reason)+'\">'+u(e.repostMessage)+'</textarea><pre class=\"ds-hidden-text\"></pre>';return t+='</div><div class=\"ds-actions\">',e.service?t+=tt({\"service[]\":e.service}):(t+='<label><input type=\"checkbox\" name=\"service[]\" value=\"weibo\"',nt.data.social_uid.weibo&&(t+=' checked=\"checked\"'),t+=' /><span class=\"ds-service-icon ds-weibo\"></span>新浪微博</label><label><input type=\"checkbox\" name=\"service[]\" value=\"qqt\"',nt.data.social_uid.qq&&(t+=' checked=\"checked\"'),t+=' /><span class=\"ds-service-icon ds-qqt\"></span>腾讯微博</label>'),t+='<button type=\"submit\">'+z.repost+\"</button></div></form>\"},et.dialog=function(e){var t='<div class=\"ds-dialog\"><div class=\"ds-dialog-inner ds-rounded\"><div class=\"ds-dialog-body\">'+e+'</div><div class=\"ds-dialog-footer\"><a href=\"http://duoshuo.com/\" target=\"_blank\" class=\"ds-logo\"></a><span>社会化评论框</span></div><a class=\"ds-dialog-close\" href=\"javascript:void(0)\" title=\"关闭\"></a></div></div>';return t},et.hotPosts=function(e){var t='<div class=\"ds-header ds-gradient-bg\">'+u(z.hot_posts_title)+\"</div><ul>\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=et.post({post:a,options:e.options});return t+=\"</ul>\"},et.likePost=function(e){var t='<a class=\"ds-post-likes\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-like\"></span>'+z.like;return e.likes>0&&(t+=\"(\"+e.likes+\")\"),t+=\"</a>\"},et.likeTooltip=function(e){var t='<div class=\"ds-like-tooltip ds-rounded\"><p>很高兴你能喜欢，分享一下吧：</p><ul>';for(var s in e.services)t+='<li><a class=\"ds-share-to-'+s+\" ds-service-link ds-\"+s+'\" href=\"'+a()+\"/share-proxy/?\"+o.param({service:s,thread_id:e.thread_id})+'\">'+e.services[s]+\"</a></li>\";return t+='</ul><p class=\"ds-like-tooltip-footer\"><a class=\"ds-like-tooltip-close\">算了</a></p></div>'},et.loginButtons=function(){var e='<div class=\"ds-login-buttons\"><p>社交帐号登录:</p><div class=\"ds-social-links\"><ul class=\"ds-service-list\">'+et.serviceList(X)+'<li><a class=\"ds-more-services\" href=\"javascript:void(0)\">更多»</a></li></ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul></div></div>\";return e},et.loginWidget=function(e){var t='<div class=\"ds-icons-32\">',s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\"},et.meta=function(e){var t='<div class=\"ds-meta\"><a href=\"javascript:void(0)\" class=\"ds-like-thread-button ds-rounded';return e.user_vote>0&&(t+=\" ds-thread-liked\"),t+='\"><span class=\"ds-icon ds-icon-heart\"></span> <span class=\"ds-thread-like-text\">',t+=e.user_vote>0?\"已喜欢\":\"喜欢\",t+='</span><span class=\"ds-thread-cancel-like\">取消喜欢</span></a><span class=\"ds-like-panel\"></span></div>'},et.notify=function(e){var t='<div id=\"ds-reset\"><a class=\"ds-logo\" href=\"http://duoshuo.com/\" target=\"_blank\" title=\"多说\"></a><ul class=\"ds-notify-unread\"><li';return e.comments||(t+=' style=\"display:none;\"'),t+='><a data-type=\"unread-comments\" href=\"javascript:void(0);\">你有'+e.comments+\"条新回复</a></li><li\",e.notifications||(t+=' style=\"display:none;\"'),t+='><a data-type=\"unread-notifications\" href=\"javascript:void(0);\">你有'+e.notifications+\"条系统消息</a></li></ul></div>\"},et.post=function(e){var t=\"\",s=e.post,i=e.options,r=s.author;if(t+='<li class=\"ds-post\" data-post-id=\"'+s.post_id+'\"><div class=\"ds-post-self\" data-post-id=\"'+s.post_id+'\" data-thread-id=\"'+s.thread_id+'\" data-root-id=\"'+s.root_id+'\" data-source=\"'+s.source+'\"><div class=\"ds-avatar\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=\">\"+et.avatar(r),S.sourceName[s.source]&&(t+=et.serviceIcon(s.source)),t+='</div><div class=\"ds-comment-body\"><div class=\"ds-comment-header\">',r.url?(t+='<a class=\"ds-user-name ds-highlight\" data-qqt-account=\"'+(r.qqt_account||\"\")+'\" href=\"'+u(r.url)+'\" ',r.user_id&&(t+=\" onclick=\\\"this.href='\"+a()+\"/user-url/?user_id=\"+r.user_id+\"';\\\"\"),t+=' rel=\"nofollow\" target=\"_blank\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=\">\"+u(r.name)+\"</a>\"):(t+='<span class=\"ds-user-name\"',r.user_id&&(t+=' data-user-id=\"'+r.user_id+'\"'),t+=' data-qqt-account=\"'+(r.qqt_account||\"\")+'\">'+u(r.name)+\"</span>\"),t+=\"</div>\",1==i.max_depth&&i.show_context&&s.parents.length){t+='<ol id=\"ds-ctx\">';var n=lt.getJSON(s.parents);if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],1==d&&s.parents.length>2&&(t+='<li class=\"ds-ctx-entry\"><a href=\"javascript:void(0);\" class=\"ds-expand\">还有'+(s.parents.length-2)+\"条评论</a></li>\"),t+=et.ctxPost({post:o,index:d,hidden:d&&d<s.parents.length-1});t+=\"</ol>\"}if(t+=\"<p>\",s.parents.length>=i.max_depth&&(!i.show_context||i.max_depth>1)&&s.parent_id&&lt[s.parent_id]&&(t+='<a class=\"ds-comment-context\" data-post-id=\"'+s.post_id+'\" data-parent-id=\"'+s.parent_id+'\">'+z.reply_to+u(lt[s.parent_id].toJSON().author.name)+\": </a>\"),t+=s.message+'</p><div class=\"ds-comment-footer ds-comment-actions',s.vote>0&&(t+=\" ds-post-liked\"),t+='\">',t+=s.url?et.timeAnchor(s.created_at,s.url):et.timeText(s.created_at),\"duoshuo\"==s.source?(t+='<a class=\"ds-post-reply\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a>\"+et.likePost(s)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-report\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-report\"></span>'+z.report+\"</a>\",s.privileges[\"delete\"]&&(t+='<a class=\"ds-post-delete\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-delete\"></span>'+z[\"delete\"]+\"</a>\")):(\"qqt\"==s.source||\"weibo\"==s.source)&&(t+='<a class=\"ds-weibo-comments\" href=\"javascript:void(0);\">'+z.comments,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.comments+\"</span>)\"),t+='</a><a class=\"ds-weibo-reposts\" href=\"javascript:void(0);\">'+z.reposts,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.reposts+\"</span>)\"),t+=\"</a>\"),t+=\"</div></div></div>\",i.max_depth>1&&(s.childrenArray||s.children)&&\"weibo\"!=s.source&&\"qqt\"!=s.source){t+='<ul class=\"ds-children\">';var c=lt.getJSON(s.childrenArray||s.children);if(c)for(var s,d=-1,p=c.length-1;p>d;)s=c[d+=1],t+=et.post({post:s,options:i});t+=\"</ul>\"}return t+=\"</li>\"},et.postListHead=function(e){var t='<div class=\"ds-comments-info\"><div class=\"ds-sort\"><a class=\"ds-order-desc\">'+z.latest+'</a><a class=\"ds-order-asc\">'+z.earliest+'</a><a class=\"ds-order-hot\">'+z.hottest+'</a></div><ul class=\"ds-comments-tabs\"><li class=\"ds-tab\"><a class=\"ds-comments-tab-duoshuo ds-current\" href=\"javascript:void(0);\"></a></li>';return e.options.show_reposts&&e.thread.reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-repost\" href=\"javascript:void(0);\"></a></li>'),t+=\" \",e.options.show_weibo&&e.thread.weibo_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-weibo\" href=\"javascript:void(0);\"></a></li>'),t+=\" \",e.options.show_qqt&&e.thread.qqt_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-qqt\" href=\"javascript:void(0);\"></a></li>'),t+=\"</ul></div>\"},et.recentVisitors=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"</div>\";return t},et[\"related-read\"]=function(e){var t=\"\";if(e&&e.length){t+='<article class=\"ds-reads-expand\"><div class=\"ds-header\">头条推荐</div><section> ';var s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;){if(a=s[i+=1],t+=' <a href=\"'+a.url+'\" class=\"ds-reads-item\"> ',3==a.imgs.length){t+=\" <h2>\"+a.title+'</h2> <div class=\"ds-reads-pics\"> <ul> ';var n=a.imgs;if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],t+=' <li> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+o+');\"></div> </li> ';t+=' </ul> </div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> '}else t+=' <div class=\"ds-reads-desc ',a.imgs.length||(t+=\"ds-reads-only\"),t+='\"> <div class=\"ds-reads-title\">'+a.title+'</div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> </div> ',a.imgs.length&&(t+=' <div class=\"ds-reads-pic-right\"> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+a.imgs[0]+');\"> ',a.hasVideo&&(t+=' <div class=\"ds-reads-vid-info\"><span>'+a.videoDuration+\"</span></div> \"),t+=\" </div> </div> \"),t+=\" \";t+=\" </a> \"}t+=\"</section></article>\"}return t},et.replybox=function(e){var t='<div class=\"ds-replybox\"><a class=\"ds-avatar\"';if(t+=r()?' href=\"javascript:void(0);\" onclick=\"return false\"':' href=\"'+S.REMOTE+\"/settings/avatar/\"+x(T())+'\" target=\"_blank\" title=\"设置头像\"',t+=\">\"+et.avatarImg(nt.data)+'</a><form method=\"post\">'+tt(e.params)+'<div class=\"ds-textarea-wrapper ds-rounded-top\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.leave_a_message)+'\"></textarea><pre class=\"ds-hidden-text\"></pre>',t+=\"</div>\",t+='<div class=\"ds-post-toolbar\"><div class=\"ds-post-options ds-gradient-bg\"><span class=\"ds-sync\">',!r()&&nt.data.repostOptions){t+='<input id=\"ds-sync-checkbox',e.inline&&(t+=\"-inline\"),t+='\" type=\"checkbox\" name=\"repost\" ',e.checked&&(t+='checked=\"checked\" '),t+='value=\"'+e.repostArray.join(\",\")+'\"> <label for=\"ds-sync-checkbox',e.inline&&(t+=\"-inline\"),t+='\">'+z.share_to+\"</label>\";for(var s in nt.data.repostOptions)t+=et.serviceIcon(s,!nt.data.repostOptions[s])}return t+=\"</span>\",t+=\"</div>\",t+='<button class=\"ds-post-button\" type=\"submit\">'+u(z.post)+'</button><div class=\"ds-toolbar-buttons\">',e.options.use_smilies&&(t+='<a class=\"ds-toolbar-button ds-add-emote\" title=\"插入表情\"></a>'),e.options.use_images&&e.options.parse_html_enabled&&(t+='<a class=\"ds-toolbar-button ds-add-image\" title=\"插入图片\"></a>'),t+=\"</div></div>\",t+=\"</form></div>\"},et.serviceBindList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.bindUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a],nt.data.social_uid[a]&&(t+=' <span class=\"ds-icon ds-icon-ok\"></span>'),t+=\"</a></li>\";return t},et.serviceList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.loginUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a]+\"</a></li>\";return t},et.shareWidget=function(e){var t='<div class=\"ds-share-icons\"> <div class=\"ds-share-icons-inner\"> <ul class=\"ds-share-icons-16\"> ',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=' <li> <a class=\"ds-'+a+'\" href=\"javascript:void(0);\" data-service=\"'+a+'\">'+S.sourceName[a]+\"</a> </li> \";return t+=' </ul> </div> <div class=\"ds-share-icons-footer\">'+e.copyright+\"</div></div>\"},et.smiliesTooltip=function(e){var t='<div id=\"ds-smilies-tooltip\"><ul class=\"ds-smilies-tabs\">';for(var s in e)t+=\"<li><a>\"+s+\"</a></li>\";return t+='</ul><div class=\"ds-smilies-container\"></div></div>'},et.toolbar=function(){var e='<div class=\"ds-toolbar\"><div class=\"ds-account-control\"><span class=\"ds-icon ds-icon-settings\"></span> <span>帐号管理</span><ul><li><a class=\"ds-bind-more\" href=\"javascript:void(0);\" style=\"border-top: none\">绑定更多</a></li><li><a target=\"_blank\" href=\"'+S.REMOTE+\"/settings/\"+x(T())+'\">'+u(z.settings)+'</a></li><li><a rel=\"nofollow\" href=\"'+Z.logoutUrl()+'\" style=\"border-bottom: none\">登出</a></li></ul></div><div class=\"ds-visitor\">';return e+=nt.data.url?'<a class=\"ds-visitor-name\" href=\"'+u(nt.data.url)+'\" target=\"_blank\">'+u(nt.data.name)+\"</a>\":'<span class=\"ds-visitor-name\">'+u(nt.data.name)+\"</span>\",e+='<a class=\"ds-unread-comments-count\" href=\"javascript:void(0);\" title=\"新回复\"></a></div></div>'},et.topThreads=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a target=\"_blank\" href=\"'+u(a.url)+'\" title=\"'+u(a.title)+'\">'+u(a.title)+\"</a></li>\";return t},et.topUsers=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"<h4>\"+u(a.name)+\"</h4></div>\";return t},et.userInfo=function(e){var t='<a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\"/user-url/?user_id=\"+e.user_id+'\\';\" class=\"ds-avatar\" target=\"_blank\">'+et.avatarImg(e)+'</a><a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\"/user-url/?user_id=\"+e.user_id+'\\';\" class=\"ds-user-name ds-highlight\" target=\"_blank\">'+u(e.name)+\"</a>\";for(var s in e.social_uid)t+='<a href=\"'+S.REMOTE+\"/user-proxy/\"+s+\"/\"+e.social_uid[s]+'/\" target=\"_blank\" class=\"ds-service-icon ds-'+s+'\" title=\"'+S.sourceName[s]+'\"></a>';return t+='<p class=\"ds-user-card-meta\"><a href=\"'+S.REMOTE+\"/profile/\"+e.user_id+'/\" target=\"_blank\"><span class=\"ds-highlight\">'+e.comments+\"</span>条评论</a></p>\",e.description&&(t+='<p class=\"ds-user-description\">'+u(e.description)+\"</p>\"),t};var st=S.Views={},at=(S.Callbacks={},S.pagelets=[]),it=S.events=new J,rt=S.site=new V,nt=S.visitor=new $,ot=S.unread=new V,dt=S.threadPool=new Y(G),lt=S.postPool=new Y(F),ct=S.userPool=new Y($);it.on(\"queryDefined\",function(){var e=c.short_name;if(c.theme&&n(c.theme),m){var t=m[\"ds_site_\"+e],s=m[\"ds_lang_\"+e];t&&rt.reset(p.parse(t)),s&&o.extend(z,p.parse(s))}}),q(),S.require(\"embed.compat\",function(){function i(e){e.stopPropagation()}function n(e){(e.ctrlKey&&13==e.which||10==e.which)&&H(this.form).trigger(\"submit\")}function d(){var e=H(this);e.height(Math.max(54,e.next(\".ds-hidden-text\").text(this.value).height()+27))}function l(){if(P.authInWin){var e=this.href.match(/\\/(login|bind)\\/(\\w+)\\//i);if(e&&S.serviceNames[e[2]])return!b(e[2],this.href)\n}}function u(){var e,s,a,i,r,n=this,o=0,d=0;t.selection&&(s=t.selection.createRange(),s&&s.parentElement()==n&&(i=n.value.length,e=n.value.replace(/\\r\\n/g,\"\\n\"),a=n.createTextRange(),a.moveToBookmark(s.getBookmark()),r=n.createTextRange(),r.collapse(!1),a.compareEndPoints(\"StartToEnd\",r)>-1?o=d=i:(o=-a.moveStart(\"character\",-i),o+=e.slice(0,o).split(\"\\n\").length-1,a.compareEndPoints(\"EndToEnd\",r)>-1?d=i:(d=-a.moveEnd(\"character\",-i),d+=e.slice(0,d).split(\"\\n\").length-1)))),H(n).data(\"ds-range-start\",o).data(\"ds-range-end\",d)}function p(e){return P.touch&&e.addClass(\"ds-touch\"),o.cssProperty(\"transition\")||e.addClass(\"ds-no-transition\"),P.ie6&&e.addClass(\"ds-ie6\"),P.opacity||e.addClass(\"ds-no-opacity\"),e}function f(e){if(!P.placeholder){var t=e.attr(\"placeholder\");e.val(t).focus(function(){this.value===t&&(this.value=\"\")}).blur(function(){\"\"===this.value&&(this.value=t)})}return e}function g(e){if(\"http://duoshuo.com\"===e.origin)switch(e.data.type){case\"login\":h.href=e.data.redirectUrl}}function b(t,s){var a={weibo:[760,600],renren:[420,322],qq:[504,445],weixin:[450,550],google:[600,440]}[t]||[550,400];return e.open(s+(-1==s.indexOf(\"?\")?\"?\":\"&\")+o.param({origin:h.origin||\"http://\"+h.host}),\"_blank\",\"width=\"+a[0]+\",height=\"+a[1]+\",toolbar=no,menubar=no,location=yes\")}function y(e){var t=Z[r()?\"loginUrl\":\"bindUrl\"](e);P.authInWin&&b(e,t)||(h.href=t)}function w(){var e=E(et[\"dialog-ask-for-auth\"]({})).el.find(\".ds-dialog\").css(\"width\",\"300px\");e.find(\"a.ds-service-link\").click(l)}function x(e,t,s,a){function i(){function e(e){if(s&&a){var t=s.options,i=M(s.postList.el,e.response[a],t);\"asc\"==t.order==(\"top\"==t.formPosition)&&S.scrollTo(i);var r=s.el.find(\".ds-comments-tab-\"+a+\" span.ds-highlight\");r.html(parseInt(r.html())+1)}}return a||l.find(\"[type=checkbox]:checked\")[0]?(R.post(\"posts/repost\",S.toJSON(l),e),o.close(),!1):(alert(\"还没有选发布到哪儿呢\"),!1)}function r(){var e=this.value;return this.checked&&!nt.data.social_uid[\"qqt\"==e?\"qq\":e]?void y(e):void 0}var o=E(et[\"dialog-reposts\"]({post:e.toJSON(),repostMessage:t,service:a})),l=o.el.find(\"form\");return l.submit(i),l.find(\".ds-actions [type=checkbox]\").change(r),f(l.find(\"textarea\")).keyup(n).keyup(d).focus(),!1}function T(e){var t={\"unread-comments\":{title:\"新留言及回复\",apiUrl:\"users/unreadComments\",tmpl:function(e){return e.thread?'<li data-thread-id=\"'+e.thread.thread_id+'\">'+H.map(e.authors,et.userAnchor).join(\"、\")+' 在 <a class=\"ds-read\" href=\"'+e.thread.url+'#comments\" target=\"_blank\">'+_(e.thread.title||\"无标题\")+'</a> 中回复了你 <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\">知道了</a></li>':\"\"},read:function(e){var t=e.attr(\"data-thread-id\");R.post(\"threads/read\",{thread_id:t}),ot.data.comments--}},\"unread-notifications\":{title:\"系统消息\",apiUrl:\"users/unreadNotifications\",tmpl:function(e){return'<li data-notification-id=\"'+e.notification_id+'\" data-notification-type=\"'+e.type+'\">'+e.content+' <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\">知道了</a></li>'},read:function(e){var t=e.attr(\"data-notification-id\");R.post(\"notifications/read\",{notification_id:t}),ot.data.notifications--}}}[e],s=E(\"<h2>\"+t.title+'</h2><ul class=\"ds-unread-list\"></ul>');s.on(\"close\",S.resetNotify);var a=s.el.find(\".ds-unread-list\").delegate(\".ds-delete\",\"click\",function(){return H(this).parent().remove(),0===a.children().length&&s.close(),!1}).delegate(\".ds-read\",\"click\",function(){t.read(H(this).parent())});H(\"#ds-notify\").hide(),R.get(t.apiUrl,{},function(e){s.el.find(\".ds-unread-list\").html(H.map(e.response,t.tmpl).join(\"\\n\"))})}function N(){bubbleOutTimer&&(clearTimeout(bubbleOutTimer),bubbleOutTimer=0)}function I(){bubbleOutTimer=setTimeout(function(){bubbleOutTimer=0,X.detach()},400)}function M(e,t,s){return e.find(\".ds-post[data-post-id=\"+t.data.post_id+\"]\")[0]?void 0:(e.find(\".ds-post-placeholder\").remove(),H(et.post({post:t.toJSON(),options:s})).hide()[\"asc\"==s.order?\"appendTo\":\"prependTo\"](e).slideDown(function(){}))}function U(e,t){function s(){if(r())return w(),!1;var e=H(this).parent(),t=e.hasClass(\"ds-post-liked\"),s=H(this).html().match(/\\((\\d+)\\)/),a=(s?parseInt(s[1]):0)+(t?-1:1);return R.post(\"posts/vote\",{post_id:e.closest(\".ds-ctx-entry, .ds-post-self\").attr(\"data-post-id\"),vote:t?0:1}),H(this).html(H(this).html().replace(/\\(\\d+\\)/,\"\")+(a?\"(\"+a+\")\":\"\")),e[t?\"removeClass\":\"addClass\"](\"ds-post-liked\"),!1}function a(){var e=H(this).closest(\".ds-post-self\"),t=lt[e.attr(\"data-post-id\")];return x(t,\"\"),!1}function i(){if(!confirm(\"确定要删除这条评论吗？\"))return!1;var t=H(this).closest(\".ds-post-self\");return R.post(\"posts/remove\",{post_id:t.attr(\"data-post-id\")}),t.parent().fadeOut(200,function(){e.data.comments--,e.updateCounter(\"duoshuo\"),H(this).remove()}),!1}function n(){if(!confirm(\"确定要举报这条评论吗？\"))return!1;var e=H(this).closest(\".ds-post-self\");return R.post(\"posts/report\",{post_id:e.attr(\"data-post-id\")}),alert(\"感谢您的反馈！\"),!1}function o(){var s=H(this),a=s.closest(\".ds-comment-actions\");if(a.hasClass(\"ds-reply-active\"))h.el.fadeOut(200,function(){H(this).detach()}),a.removeClass(\"ds-reply-active\");else{var i=s.closest(\".ds-ctx-entry, .ds-post-self\");h?h.actionsBar.removeClass(\"ds-reply-active\"):(h=new st.Replybox(e),h.render(!0).el.addClass(\"ds-inline-replybox\").detach()),h.el.find(\"[name=parent_id]\").val(i.attr(\"data-post-id\")),h.el.show().appendTo(s.closest(\".ds-ctx-body, .ds-comment-body\")).find(\"textarea\").focus(),h.actionsBar=a.addClass(\"ds-reply-active\"),t.max_depth<=1?h.postList=e.postList.el:(h.postList=i.siblings(\".ds-children\"),h.postList[0]||(h.postList=H('<ul class=\"ds-children\"></ul>').insertAfter(i)))}return!1}function d(){function e(e){W(e),i.append(H.map(e.response,function(e){return et.post({post:e,options:t})}).join(\"\"))}{var s=H(this).closest(\".ds-post-self\"),a=s.attr(\"data-post-id\");s.data(\"source\")}if(0!=s.attr(\"data-root-id\"))return!1;var i=s.siblings(\".ds-children\");return i[0]?(i.remove(),!1):(i=H('<ul class=\"ds-children\"></ul>').insertAfter(s),R.get(\"posts/listComments\",B({post_id:a}),e),!1)}function l(){var t=H(this).closest(\".ds-post-self\"),s=lt[t.attr(\"data-post-id\")],a=s.data.source;if(!nt.data.social_uid[\"qqt\"==a?\"qq\":a])return void y(a);var i=s.data.root_id,r=\"0\"!=i?lt[i]:s,n=\"\";if(\"0\"!=i){var o=prepatePost(s.data).theAuthor;n=(\"weibo\"==a?\"//@\"+o.name:\"|| @\"+o.qqt_account)+\":\"+s.data.message}return x(r,n,e,a),!1}function c(){var e=H(this).parent();return e.siblings().show(),e.remove(),!1}function u(){function t(){function t(e){var t=e.response;ct[c]?ct[c].set(t):ct[c]=new $(t),X.owner==s&&K.html(et.userInfo(t))}tt=0,X.owner=s,N();var i=a.offset(),r=e.el.offset(),n=a.innerWidth()/2,o=e.el.innerHeight()-(i.top-r.top)+6,d=i.left-r.left-35+(n>35?35:n);try{if(a.hasClass(\"ds-comment-context\"))K.attr(\"id\",\"ds-ctx-bubble\").attr(\"data-post-id\",a.attr(\"data-post-id\")).html('<ul id=\"ds-ctx\">'+et.ctxPost({post:lt[a.attr(\"data-parent-id\")].toJSON()})+'</ul><div class=\"ds-bubble-footer\"><a class=\"ds-ctx-open\" href=\"javascript:void(0);\">查看对话</a></div>');else if(a.hasClass(\"ds-avatar\")||a.hasClass(\"ds-user-name\")){var l={},c=l.user_id=a.attr(\"data-user-id\");if(!c)throw\"no info\";K.attr(\"id\",\"ds-user-card\").attr(\"data-user-id\",c).empty(),ct[c]?K.html(et.userInfo(ct[c].data)):R.get(\"users/profile\",B(l),t)}X.css({bottom:o,left:d}).appendTo(e.innerEl)}catch(u){X.detach()}}var s=this;if(bubbleOutTimer&&X.owner==s)return clearTimeout(bubbleOutTimer),void(bubbleOutTimer=0);var a=H(s);tt=setTimeout(t,200)}function p(){tt?(clearTimeout(tt),tt=0):bubbleOutTimer||I()}var h;this.delegate(\"a.ds-post-likes\",\"click\",s).delegate(\"a.ds-post-repost\",\"click\",a).delegate(\"a.ds-post-delete\",\"click\",i).delegate(\"a.ds-post-report\",\"click\",n).delegate(\"a.ds-post-reply\",\"click\",o).delegate(\"a.ds-weibo-comments\",\"click\",d).delegate(\"a.ds-weibo-reposts\",\"click\",l).delegate(\"a.ds-expand\",\"click\",c),P.touch||this.delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseenter\",u).delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseleave\",p)}function B(e){var s={require:\"site,visitor,nonce,lang\"+(it++?\"\":\",unread,log,extraCss\"),site_ims:D.get(\"ds_site_\"+c.short_name+\":timestamp\"),lang_ims:D.get(\"ds_lang_\"+c.short_name+\":timestamp\"),referer:t.referrer};c.stylePatch&&(s.style_patch=c.stylePatch);for(var a in s)s[a]&&(!P.ie6||encodeURIComponent(s[a]).length<200)&&(e[a]=s[a]);return e}var H=S.jQuery,V=H(e),Y=H(t);e.postMessage&&(e.addEventListener?e.addEventListener(\"message\",g,!1):e.attachEvent&&e.attachEvent(\"onmessage\",g)),S.scrollTo=function(e){var t=e.offset().top;(t<V.scrollTop()||t>V.scrollTop()+V.height())&&H(\"html, body\").animate({scrollTop:t-40},200,\"swing\")},S.toJSON=function(e){var t=/\\r?\\n/g,s=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,a=/^(?:select|textarea)/i,i=e.map(function(){return this.elements?H.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||a.test(this.nodeName)||s.test(this.type))}).map(function(e,s){var a=H(this).val();return null==a?null:H.isArray(a)?H.map(a,function(e){return{name:s.name,value:e.replace(t,\"\\r\\n\")}}):{name:s.name,value:a.replace(t,\"\\r\\n\")}}).toArray(),r={};return H.each(i,function(){r[this.name]=this.value}),r},S.resetNotify=function(){var e=H(\"#ds-notify\"),s=ot.data;e[0]||(e=H('<div id=\"ds-notify\"></div>').css({hidden:{display:\"none\"},\"top-right\":{top:\"24px\",right:\"24px\"},\"bottom-right\":{bottom:\"24px\",right:\"24px\"}}[rt.data.notify_position]).delegate(\".ds-notify-unread a\",\"click\",function(){return T(H(this).data(\"type\")),!1}).appendTo(t.body)),e.html(et.notify(s))[!s.comments&&!s.notifications||\"hidden\"===rt.data.notify_position||H(\".ds-dialog\")[0]?\"hide\":\"show\"]()},ot.on(\"reset\",S.resetNotify),st.Replybox=function(e){this.embedThread=e},st.Replybox.prototype={render:function(e){function s(e){e.data(\"submitting\",!0),e.find(\".ds-post-button\").addClass(\"ds-waiting\").html(z.posting)[0].disabled=!0}function a(e){e.data(\"submitting\",!1),e.find(\".ds-post-button\").removeClass(\"ds-waiting\").html(z.post)[0].disabled=!1}var i=this,o=i.embedThread,c=o.options,p=function(){S.require(\"smilies\",function(){})},h={thread:o,options:c,inline:e,params:{thread_id:o.threadId,parent_id:\"\",nonce:S.nonce},repostArray:[],checked:0};for(var v in nt.data.repostOptions)nt.data.repostOptions[v]&&(h.repostArray.push(v),h.checked=1);var g=i.el=H(et.replybox(h)).click(p),b=g.find(\"form\"),y=b.find(\"input[type=checkbox]\")[0],_=b.find(\"a.ds-service-icon, a.ds-service-icon-grey\"),k=f(b.find(\"textarea\")).focus(p).keyup(n).keyup(d).bind(\"focus mousedown mouseup keyup\",u),w=g.find(\".ds-add-emote\").click(function(e){var s=S.smiliesTooltip;return w.toggleClass(\"ds-expanded\").hasClass(\"ds-expanded\")?(s||(s=S.smiliesTooltip=new st.SmiliesTooltip,s.render(),S.require(\"smilies\",function(){s.reset(\"微博-默认\")})),s.replybox=i,s.el.appendTo(t.body).css({top:i.el.offset().top+i.el.outerHeight()+4+\"px\",left:i.el.find(\".ds-textarea-wrapper\").offset().left+\"px\"}),H(t.body).click(x)):x(e),!1}),x=(g.find(\".ds-add-image\").click(function(e){var s=k[0],a=s.value,i=\"请输入图片地址\",r='<img src=\"'+i+'\" />';if(t.selection){s.value=a.substring(0,k.data(\"ds-range-start\"))+r+a.substring(k.data(\"ds-range-end\"),a.length),s.value=s.value.replace(\"说点什么吧 ...\",\"\"),s.focus();var n=t.selection.createRange();n.collapse(),n.findText(i),n.select()}else{s.value=a.substring(0,s.selectionStart)+r+a.substring(s.selectionEnd);var o=s.value.search(i);s.setSelectionRange(o,o+i.length),s.focus()}e.preventDefault()}),i.hideSmilies=function(){w.removeClass(\"ds-expanded\"),S.smiliesTooltip.el.detach(),H(t.body).unbind(\"click\",x)}),T=function(e,t){var s=E(et[\"dialog-anonymous\"]({services:[\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"],options:c})),a=s.el.find(\".ds-dialog\").css(\"width\",\"320px\");if(a.find(\".ds-icons-32 a\").click(l),!c.deny_anonymous){var i=s.el.find(\"form\");i.submit(function(){var e=i.find(\"input[name=author_email]\").val();return!e&&!c.require_guest_email||e.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)?(t(S.toJSON(i)),s.close(),!1):(alert(\"请输入一个有效的email地址.\"),!1)}),i.find(\"input[name=author_name]\")[0].focus()}};c.deny_anonymous&&k.focus(function(){if(r()){T(b,q);var e=function(t){t.stopPropagation(),k.unbind(\"click\",e)};k.click(e)}return!1});var q=function(e){s(b),R.post(\"posts/create\",H.extend(S.toJSON(b),e),function(e){var t=lt[e.response.post_id]=new F(e.response),s=M(i.postList,t,c);if(\"asc\"==c.order==(\"top\"==c.formPosition)&&S.scrollTo(s),o.data.comments++,o.updateCounter(\"duoshuo\"),k.val(\"\").trigger(\"keyup\"),a(b),g.hasClass(\"ds-inline-replybox\")&&(g.detach(),i.actionsBar.removeClass(\"ds-reply-active\")),m)try{m.removeItem(\"ds_draft_\"+o.threadId)}catch(r){}},function(e){a(b),alert(e.errorMessage)})};b.submit(function(){if(b.data(\"submitting\"))return!1;var e=H.trim(b[0].message.value);return\"\"==e||!P.placeholder&&e==k.attr(\"placeholder\")?(alert(\"您还没写内容呢\"),!1):(r()?T(b,q):q(),!1)});var C=function(e){return H(e).hasClass(\"ds-service-icon-grey\")?null:H(e).attr(\"data-service\")};if(_.click(function(){return H(this).toggleClass(\"ds-service-icon-grey\").toggleClass(\"ds-service-icon\"),y.value=H.map(_,C).join(\",\"),y.checked=\"\"!=y.value,!1}),H(y).change(function(){var e=this.checked;_[e?\"removeClass\":\"addClass\"](\"ds-service-icon-grey\")[e?\"addClass\":\"removeClass\"](\"ds-service-icon\"),this.value=H.map(_,C).join(\",\")}),!e&&m){var j=\"ds_draft_\"+o.threadId;k.bind(\"focus blur keyup\",function(e){var t=H(e.currentTarget).val();try{m[j]=t}catch(e){}}),m[j]&&k.val(m[j])}return this}},st.Dialog=J.extend({init:function(e,t){(this.el=H(\"#ds-wrapper\"))[0]||(this.el=p(H('<div id=\"ds-wrapper\"></div>'))),this.options=H.extend({width:600},t),e!==s&&H(e).attr(\"id\",\"ds-reset\").appendTo(this.el)},open:function(){function e(e){return 27==e.which?(a.close(),!1):void 0}function s(){return a.close(),!1}var a=this;return a.el.hide().appendTo(t.body).fadeIn(200),P.ie6&&a.el.css(\"top\",V.scrollTop()+100),a.el.show().find(\".ds-dialog\").delegate(\"a.ds-dialog-close\",\"click\",function(){return a.close(),!1}).click(i),Y.keydown(e),H(t.body).click(s),a.close=function(){Y.unbind(\"keydown\",e),H(t.body).unbind(\"click\",s),a.el.fadeOut(200,function(){H(this).remove()}),a.trigger(\"close\")},a}}),et.likePanel=function(e){return e.likes?'<span class=\"ds-highlight\">'+e.likes+\"</span> 人喜欢\":\"\"},st.Meta=function(e){this.embedThread=e},st.Meta.prototype={render:function(){function a(a){function r(e){o.set(e),n.resetLikePanel()}function c(){n.tooltip.detach(),H(t.body).unbind(\"click\",c)}function u(t){switch(this.className){case\"ds-like-tooltip-close\":c(t);break;default:if(!e.open(this.href,\"_blank\",\"height=500,width=600,top=0,left=0,toolbar=no,menubar=no,resizable=yes,location=yes,status=no\"))return}return!1}var p=l.hasClass(\"ds-thread-liked\");if(R.post(\"threads/vote\",{thread_id:n.embedThread.threadId,vote:p?0:1},r),l.toggleClass(\"ds-thread-liked\"),l.find(\".ds-thread-like-text\").text(p?\"喜欢\":\"已喜欢\"),p)return n.tooltip&&c(a),!1;if(n.tooltip===s){var h=et.likeTooltip({services:{qzone:\"QQ空间\",weibo:\"新浪微博\",qqt:\"腾讯微博\",renren:\"人人网\",kaixin:\"开心网\",douban:\"豆瓣网\",baidu:\"百度搜藏\"},thread_id:o.data.thread_id});n.tooltip=H(h).click(i).delegate(\"a\",\"click\",u)}var f={};return f.left=0,f.top=d.position().top+d.outerHeight()-4+\"px\",n.tooltip.appendTo(n.embedThread.innerEl).css(f),H(t.body).click(c),!1}var n=this,o=n.embedThread.model,d=n.el=H(et.meta(o.toJSON())),l=d.find(\".ds-like-thread-button\");return l.click(a),n.resetLikePanel(),r()&&d.hide(),n},resetLikePanel:function(){this.el.find(\".ds-like-panel\").html(et.likePanel(this.embedThread.model.toJSON()))}},st.PostListHead=function(e){this.embedThread=e},st.PostListHead.prototype={render:function(){function e(e){r.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.page=1;var t=e.currentTarget;switch(t.className){case\"ds-comments-tab-duoshuo\":a.params.source=\"duoshuo\",s.replybox.el.show();break;case\"ds-comments-tab-repost\":a.params.source=\"repost\",s.replybox.el.hide();break;case\"ds-comments-tab-weibo\":a.params.source=\"weibo\",s.replybox.el.hide();break;case\"ds-comments-tab-qqt\":a.params.source=\"qqt\",s.replybox.el.hide()}return H(t).addClass(\"ds-current\"),a.refetch(),!1}function t(){return n.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.order=s.options.order=this.className.replace(\"ds-order-\",\"\"),a.params.page=1,a.refetch(),H(this).addClass(\"ds-current\"),!1}var s=this.embedThread,a=s.postList,i=this.el=H(et.postListHead({thread:s.model.toJSON(),options:s.options})),r=i.find(\"ul.ds-comments-tabs\");r.delegate(\".ds-tab a\",\"click\",e);var n=i.find(\".ds-sort\");return n.delegate(\"a\",\"click\",t),n.find(\".ds-order-\"+a.params.order).addClass(\"ds-current\"),this}},st.Paginator=function(e){function t(){return i.params.page=parseInt(this.innerHTML),i.refetch(),a.find(\".ds-current\").removeClass(\"ds-current\"),H(this).addClass(\"ds-current\"),!1}e=e||{};var s=this,a=s.el=e.el||H('<div class=\"ds-paginator\"></div>'),i=s.collection=e.collection;a.delegate(\"a\",\"click\",t)},st.Paginator.prototype={reset:function(e){function t(e){i.push('<a data-page=\"'+e+'\" href=\"javascript:void(0);\">'+e+\"</a>\")}var s,a=this.collection.params.page||1,i=[];if(a>1)for(t(1),s=a>4?a-2:2,s>2&&i.push('<span class=\"page-break\">...</span>');a>s;s++)t(s);if(i.push('<a data-page=\"'+a+'\" href=\"javascript:void(0);\" class=\"ds-current\">'+a+\"</a>\"),a<e.pages){for(s=a+1;a+4>=s&&s<e.pages;s++)t(s);s<e.pages&&i.push('<span class=\"page-break\">...</span>'),t(e.pages)}this.el.html('<div class=\"ds-border\"></div>'+i.join(\" \"))[e.pages>1?\"show\":\"hide\"]()}},S.addSmilies=function(e,t){var s=S.smiliesTooltip;s&&s.el.find(\"ul.ds-smilies-tabs\").append(\"<li><a>\"+e+\"</a></li>\"),S.smilies[e]=t},st.SmiliesTooltip=function(){},st.SmiliesTooltip.prototype={render:function(){function e(){var e=s.replybox,a=e.el.find(\"textarea\"),i=a[0],r=i.value;if(t.selection){i.value=r.substring(0,a.data(\"ds-range-start\"))+this.title+r.substring(a.data(\"ds-range-end\"),r.length),i.value=i.value.replace(z.leave_a_message,\"\"),i.focus();var n=t.selection.createRange();n.moveStart(\"character\",a.data(\"ds-range-start\")+this.title.length),n.collapse(),n.select()}else{var o=i.selectionStart+this.title.length;i.value=r.substring(0,i.selectionStart)+this.title+r.substring(i.selectionEnd),i.setSelectionRange(o,o)}e.hideSmilies(),i.focus()}var s=this,a=s.el=H(et.smiliesTooltip(L));return a.click(i).find(\"ul.ds-smilies-tabs\").delegate(\"a\",\"click\",function(){s.reset(this.innerHTML)}),a.find(\".ds-smilies-container\").delegate(\"img\",\"click\",e),this},reset:function(e){function t(t,s){var i=0===e.indexOf(\"微博\")?\"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/\"+s.replace(\"_org\",\"_thumb\"):S.STATIC_URL+\"/images/smilies/\"+s;\"WordPress\"===e&&(t=\" \"+t+\" \"),a+='<li><img src=\"'+i+'\" title=\"'+_(t)+'\" /></li>'}var s=this.el.find(\"ul.ds-smilies-tabs\");s.find(\"a.ds-current\").removeClass(\"ds-current\"),s.find(\"a\").filter(function(){return this.innerHTML==e}).addClass(\"ds-current\");var a=\"<ul>\";return H.each(L[e],t),a+=\"</ul>\",this.el.find(\".ds-smilies-container\").html(a),this}},et.postPlaceholder=function(){return['<li class=\"ds-post ds-post-placeholder\">',z.no_comments_yet,\"</li>\"].join(\"\")};var X=H('<div id=\"ds-bubble\"><div class=\"ds-bubble-content\"></div><div class=\"ds-arrow ds-arrow-down ds-arrow-border\"></div><div class=\"ds-arrow ds-arrow-down\"></div></div>'),K=X.find(\".ds-bubble-content\").delegate(\"a.ds-ctx-open\",\"click\",function(){function e(e){function t(e,t){return et.ctxPost({post:e,index:t})}C.log(H.map(e.response,t).join(\"\\n\"));s.el.find(\"ol\");s.el.find(\"ol\").html(H.map(e.response,t).join(\"\\n\"))}var t={};t.post_id=K.attr(\"data-post-id\"),R.get(\"posts/conversation\",t,e);var s=E('<h2>查看对话</h2><ol id=\"ds-ctx\"></ol>');return s.el.find(\".ds-dialog\").css(\"width\",\"600px\"),s.el.find(\".ds-dialog-body\").css({\"max-height\":\"350px\",_height:\"350px\",\"overflow-y\":\"auto\",\"padding-top\":\"10px\"}),!1}),tt=bubbleOutTimer=0;X.mouseenter(N).mouseleave(I),st.PostList=function(e){e&&(e.params&&(this.params=e.params),e.embedThread&&(this.embedThread=e.embedThread)),this.el=H('<ul class=\"ds-comments\"></ul>')},st.PostList.prototype={url:\"threads/listPosts\",render:function(){return U.call(this.el,this.embedThread,this.embedThread.options),this},reset:function(e){var t=this.embedThread.options;this.el.html(e[0]?H.map(lt.getJSON(e),function(e){return et.post({post:e,options:t})}).join(\"\"):et.postPlaceholder())},refetch:function(){function e(e){lt.set(e.parentPosts||e.relatedPosts),ct.set(e.users),s.reset(e.response),s.embedThread.paginator.reset(e.cursor),s.el.fadeTo(200,1),S.scrollTo(s.el),a.remove()}var s=this,a=H(et.indicator()).appendTo(t.body).fadeIn(200);s.el.fadeTo(200,.5),R.get(s.url,s.params,e)}},st.RelatedRead=function(){this._init()},st.RelatedRead.prototype={_init:function(){this.el=H('<div id=\"ds-related-reads\"></div>')},load:function(s){e.__duoshuo_id__=s,e.readsByToutiao=[],e.readsByToutiao.push({id:\"ds-related-reads\",num:3});var a=\"//s0.pstatp.com/site/reads-sdk/5bf3702b38076207bee1.js\",i=t.createElement(\"script\");i.src=a,i.charset=\"utf-8\",i.crossOrigin=\"anonymous\",t.head.appendChild(i)},mount:function(e){this.el.insertBefore(e)}},st.EmbedThread=Q.extend({uri:\"threads/listPosts\",params:\"thread-id local-thread-id source-thread-id thread-key category channel-key author-key author-id url limit order max-depth form-position container-url\"+(v.match(/MSIE 6\\.0/)?\"\":\" title image thumbnail\"),render:function(){var e=this.el;if(\"请将此处替换成文章在你的站点中的ID\"===e.data(\"thread-key\"))return alert(\"请设置正确的 data-thread-key 属性\"),!1;e.attr(\"id\",\"ds-thread\").append(et.waitingImg());var t=e.width(),s=e.data(\"url\")||!e.attr(\"data-thread-id\")&&H(\"link[rel=canonical]\").attr(\"href\");s?e.data(\"url\",k(s)):e.data(\"container-url\",h.href),t&&400>=t&&e.addClass(\"ds-narrow\").data(\"max-depth\",1)},updateCounter:function(e){function t(e){return e.substr(e.indexOf(\"}\")+1)}var s={duoshuo:[\"comments\",t(z.comments_multiple)||\"评论\"],repost:[\"reposts\",t(z.reposts_multiple)||\"转载\"],weibo:[\"weibo_reposts\",t(z.weibo_reposts_multiple)||\"新浪微博\"],qqt:[\"qqt_reposts\",t(z.qqt_reposts_multiple)||\"腾讯微博\"]};for(var a in s)if(!e||e==a){var i=this.data[s[a][0]];this.el.find(\".ds-comments-tab-\"+a).html(this.el.hasClass(\"ds-narrow\")?'<span class=\"ds-service-icon ds-'+a+'\"></span>'+i:(i?'<span class=\"ds-highlight\">'+i+\"</span>\":\"0\")+s[a][1])}},onError:function(e){this.el.html(\"评论框出错啦(\"+e.code+\"): \"+e.errorMessage)},onload:function(t){var a=this,i=a.threadId=t.thread.thread_id,n=t.cursor,o=a.options=t.options,d=a.innerEl=p(H('<div id=\"ds-reset\"></div>').appendTo(a.el));a.model=new G(a.data=t.thread),lt.set(t.parentPosts||t.relatedPosts),ct.set(t.users),a.el.find(\"#ds-waiting\").remove(),t.options&&t.options.show_recommend&&(a.relatedRead=new st.RelatedRead,a.relatedRead.load(t.thread.site_id),a.relatedRead.mount(d)),o.like_thread_enabled&&(a.meta=new st.Meta(a),d.append(a.meta.render().el)),o.hot_posts&&t.hotPosts&&t.hotPosts.length&&(a.hotPosts=new st.HotPosts(H('<div class=\"ds-rounded\"></div>'),{max_depth:1,show_context:o.show_context}),a.hotPosts.thread=a,d.append(a.hotPosts.el),a.hotPosts.onload({list:lt.getJSON(t.hotPosts)})),a.postListHead=new st.PostListHead(a),a.postList=new st.PostList({embedThread:a,params:{source:\"duoshuo\",thread_id:i,max_depth:o.max_depth,order:o.order,limit:o.limit}}),a.postList.render().reset(t.response),a.paginator=new st.Paginator({collection:a.postList}),a.paginator.reset(n);var c=a.replybox=new st.Replybox(a);c.postList=a.postList.el,r()?a.loginButtons=H(et.loginButtons()).delegate(\"a.ds-more-services\",\"click\",function(){return a.loginButtons.find(\".ds-additional-services\").toggle(),!1}).delegate(\"a.ds-service-link\",\"click\",l):a.toolbar=H(et.toolbar()).delegate(\".ds-account-control\",\"mouseenter\",function(){H(this).addClass(\"ds-active\")}).delegate(\".ds-account-control\",\"mouseleave\",function(){H(this).removeClass(\"ds-active\")}).delegate(\"a.ds-bind-more\",\"click\",function(){var e=E(et[\"dialog-bind-more\"]()).el.find(\".ds-dialog\").addClass(\"ds-dialog-bind-more\").css(\"width\",\"300px\");return e.find(\"a.ds-service-link\").click(l),!1}).delegate(\"a.ds-unread-comments-count\",\"click\",function(){return T(\"unread-comments\"),!1});var u=['<a name=\"respond\"></a>',a.toolbar||a.loginButtons,c.render().el];\"top\"==o.formPosition&&H.fn.append.apply(d,u),d.append(a.postListHead.render().el,a.postList.el,a.paginator.el),\"bottom\"==o.formPosition&&H.fn.append.apply(d,u),d.append(et.poweredBy(o.poweredby_text)),a.updateCounter(),t.alerts&&H.each(t.alerts,function(e,t){H('<div class=\"ds-alert\">'+t+\"</div>\").insertBefore(a.toolbar||loginButtons)}),o.message&&c.el.find(\"textarea\").val(o.message).focus(),ot.on(\"reset\",function(){var e=ot.data.comments||0;d.find(\"a.ds-unread-comments-count\").html(e).attr(\"title\",e?\"你有\"+e+\"条新回复\":\"你没有新回复\").css(\"display\",e?\"inline\":\"none\")}),o.mzadx_id&&(S.require(\"mzadxN\",function(){}),H('<div id=\"MZADX_'+o.mzadx_id+'\" style=\"margin:0 auto;\"></div>').appendTo(d),__mz_rpq=e.__mz_rpq||[],__mz_rpq.push({l:[o.mzadx_id],r:\"1\",_srv:\"MZADX\",_callback:function(){}})),S.thread=a,ot.data!==s&&ot.trigger(\"reset\"),r()||A.send({visit_thread_id:a.threadId})},onMessage:function(e){M(this.postList.el,new F(e),this.options)}}),st.HotPosts=Q.extend({tmpl:\"hotPosts\",params:\"show-quote\",render:function(){return this.el.attr(\"id\",\"ds-hot-posts\"),this},onload:function(e){e.options=H.extend(this.options,e.options),Q.prototype.onload.call(this,e),U.call(this.el.find(\"ul\"),this.thread,this.options)}}),st.RecentComments=Q.extend({tmpl:\"commentList\",uri:\"sites/listRecentPosts\",params:\"show-avatars show-time show-title avatar-size show-admin excerpt-length num-items channel-key\",render:function(){this.el.attr(\"id\",\"ds-recent-comments\")},prepare:function(e){return{list:H.map(e.response,function(e){return new F(e).toJSON()})}}}),st.RecentVisitors=Q.extend({tmpl:\"recentVisitors\",uri:\"sites/listVisitors\",params:\"show-time avatar-size num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-recent-visitors\").append(this.waitingEl=H(et.waitingImg()))}}),st.TopThreads=Q.extend({tmpl:\"topThreads\",uri:\"sites/listTopThreads\",params:\"range num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-top-threads\").append(this.waitingEl=H(et.waitingImg()))}}),st.LoginWidget=Q.extend({tmpl:\"loginWidget\",render:function(){var e=this.el;e.attr(\"id\",\"ds-login\").html(et.loginWidget([\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"])),e.find(\"a\").click(l),e.find(\"a.ds-logout\").attr(\"href\",Z.logoutUrl())}}),st.ThreadCount=Q.extend({onload:function(e){var t=this.el,s=t.data(\"count-type\")||\"comments\",a=e.data[s];t[t.data(\"replace\")?\"replaceWith\":\"html\"](z[s+\"_\"+(a?a>1?\"multiple\":\"one\":\"zero\")].replace(\"{num}\",a))}}),st.ShareWidget=Q.extend({tmpl:\"shareWidget\",render:function(){var e={copyright:\"多说分享插件\",services:[\"weibo\",\"qzone\",\"sohu\",\"renren\",\"netease\",\"qqt\",\"kaixin\",\"douban\",\"qq\",\"meilishuo\",\"mogujie\",\"baidu\",\"taobao\",\"google\",\"wechat\",\"diandian\",\"huaban\",\"duitang\",\"youdao\",\"pengyou\",\"facebook\",\"twitter\",\"linkedin\",\"msn\"]};this.el.attr(\"id\",\"ds-share\"),this.el.children().attr(\"id\",\"ds-reset\"),this.el.find(\".ds-share-aside-inner\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").hide(),this.el.hasClass(\"flat\")&&this.el.find(\"a\").each(function(){H(this).addClass(\"flat\")}),p(this.el),this.delegateEvents()},delegateEvents:function(){var s=this,i=s.el;if(i.children().hasClass(\"ds-share-inline\")){var r=\".ds-share-icons-more\",n=i.find(r),d=\"[data-toggle=ds-share-icons-more]\";i.delegate(d,\"mouseover\",function(){n.show()}),i.delegate(d,\"mouseout\",function(){n.hide()}),i.delegate(r,\"mouseover\",function(){n.show()}),i.delegate(r,\"mouseout\",function(){n.hide()})}else{var l=i.children().hasClass(\"ds-share-aside-left\")?\"slide-to-right\":\"slide-to-left\",c=i.children();if(!o.cssProperty(\"transition\")){var u=i.children().hasClass(\"ds-share-aside-left\")?\"left\":\"right\";i.delegate(\".ds-share-aside-toggle\",\"mouseover\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)-195:e[u]=0,c.animate(e,200)}),i.delegate(\".ds-share-aside-inner\",\"mouseleave\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)+230:e[u]=-229,c.animate(e,200)})}i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseover\",function(){c.addClass(l)}),i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseleave\",function(){c.removeClass(l)})}i.delegate(\"a\",\"click\",function(t){var s=H(this).data(\"service\");if(!i.data(\"url\"))return void alert(\"请设置data-url\");if(\"wechat\"===s){var r=a()+\"/api/qrcode/getImage.png\",n=\"?size=240&text=\"+i.data(\"url\"),d=E(et[\"dialog-qrcode\"]({qrcode_url:r+n,url:i.data(\"url\")}));d.el.find(\".ds-dialog\").css(\"width\",\"320px\")}else{var l=a()+\"/share-proxy/?\"+o.param({service:H(this).data(\"service\"),thread_key:i.data(\"threadKey\"),title:i.data(\"title\"),images:i.data(\"images\"),content:i.data(\"content\"),url:i.data(\"url\")});e.open(l,\"_blank\")}t.preventDefault(),t.stopPropagation()})}});var it=0;S.initSelector=function(e,t){function s(e){W(e),o.extend(z,e.options),dt.set(e.response)}var a=[];!q()||!H.isReady&&j||H(e).each(function(e,s){var i=H(s);if(!i.data(\"initialized\")){i.data(\"initialized\",!0);var r=new st[t.type](i,t);if(at.push(r),\"ThreadCount\"===t.type){var n=i.attr(\"data-thread-key\");i.attr(\"data-channel-key\")&&(n=i.attr(\"data-channel-key\")+\":\"+n),a.push(n),dt[n]||(dt[n]=new G({})),dt[n].on(\"reset\",function(){r.onload(this)})}else if(r.uri){var o={};H.each(r.params.split(\" \"),function(e,t){o[t.replace(/-/g,\"_\")]=i.attr(\"data-\"+t)||i.data(t)}),R.get(r.uri,B(o),function(e){r.load(e)})}}}),a.length&&R.get(\"threads/counts\",B({threads:a.join(\",\")}),s)},(S.initView=function(){H.each(O,S.initSelector)})(),H(function(){if(!c){if(!q())return C.error(\"缺少 duoshuoQuery 的定义\");C.warn(\"请在加载多说 embed.js 之前定义 duoshuoQuery\")}setInterval(function(){H(\".ds-time\").each(function(){var e=H(this).attr(\"datetime\");e&&(this.innerHTML=S.elapsedTime(e))})},2e4),c.ondomready&&c.ondomready(),S.initView(),!it&&c.short_name&&R.get(\"analytics/ping\",B({}),W)})})}}(window,document);","date":"2020-07-27T15:05:02.128Z","updated":"2020-07-20T11:41:24.000Z","path":"images/embed.js","layout":"false","title":"","comments":1,"_id":"cknpirxjp00dpsify10ix9wfu","content":"!function(e,t,s){function a(){return c.short_name?g+\"//\"+c.short_name+\".\"+S.DOMAIN:S.REMOTE}function i(){function t(){for(var t;t=y.shift();){var a=t.url,i=new s(t.title,{dir:\"auto\",icon:t.iconUrl,body:t.body});try{i.onclick=function(){e.focus(),h.href=a,i.close()}}catch(r){}setTimeout(function(){i.close&&i.close()},8e3)}}var s=e.Notification;\"Notification\"in e&&\"denied\"!==s.permission&&(\"granted\"===s.permission&&t(),s.requestPermission(function(e){\"granted\"===e&&t()}))}function r(){return 0==nt.data.user_id}function n(e){S.theme=e,\"none\"!=e&&o.injectStylesheet(S.STATIC_URL+\"/styles/embed\"+(e?\".\"+e+\".css?\"+M[e]:\".\"+short_name)+\".css\")}var o={},d=t.getElementsByTagName(\"head\")[0]||t.getElementsByTagName(\"body\")[0];if(o.extend=function(e,t){for(var s in t)e[s]=t[s];return e},o.injectScript=function(a,i){var r=t.createElement(\"script\"),n=t.head||t.getElementsByTagName(\"head\")[0]||t.documentElement;r.type=\"text/javascript\",r.src=a,r.async=\"async\",r.charset=\"utf-8\",i&&(r.onload=r.onreadystatechange=function(t,a){var o=a||!r.readyState||/loaded|complete/.test(r.readyState);o&&(r.onload=r.onreadystatechange=null,n&&r.parentNode&&n.removeChild(r),r=s,a||i.call(e))}),n.insertBefore(r,n.firstChild)},o.injectStylesheet=function(e){var s=t.createElement(\"link\");s.type=\"text/css\",s.rel=\"stylesheet\",s.href=e,d.appendChild(s)},o.injectStyle=function(e){var s=t.createElement(\"style\");return s.type=\"text/css\",d.appendChild(s),e=e.replace(/\\}/g,\"}\\n\"),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(t.createTextNode(e)),s},o.getCookie=function(e){for(var a,i,r,n=\" \"+e+\"=\",o=t.cookie.split(\";\"),d=0;d<o.length;d++)if(a=\" \"+o[d],i=\"a.indexOf(n),i\">=0&&i+n.length==(r=a.indexOf(\"=\")+1))return decodeURIComponent(a.substring(r,a.length).replace(/\\+/g,\"\"));return s},o.param=function(e){var t=[];for(var a in e)e[a]!=s&&t.push(a+\"=\"+encodeURIComponent(e[a]));return t.join(\"&\")},o.cssProperty=function(e,s){var a=(t.body||t.documentElement).style;if(\"undefined\"==typeof a)return!1;if(\"string\"==typeof a[e])return s?e:!0;for(var i=[\"Moz\",\"Webkit\",\"ms\"],e=e.charAt(0).toUpperCase()+e.substr(1),r=0;r<i.length;r++)if(\"string\"==typeof a[i[r]+e])return s?i[r]+e:!0},!e.duoshuo){for(var l in object.prototype)return alert(\"object.prototype 不为空，请不要给 object.prototype 设置方法\");var c,u,p=\"e.JSON,h=e.location,f=e.XMLHttpRequest,m=p&&p.stringify&&e.localStorage,v=e.navigator.userAgent,g=\"https:\"==t.location.protocol?\"https:\":\"http:\",b=0,y=[],_=u=function(){function\" e(e){return t[e]||\"&amp;\"}var t=\"{\"<\":\"&lt;\",\"\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},s=/&(?!\\w+;)|[<>\"'`]/g,a=/[&<>\"'`]/;return function(t){return null==t||t===!1?\"\":a.test(t)?t.replace(s,e):t}}(),k=function(e){if(e.match(/^(http|https):/))return e;var s=t.createElement(\"a\");return s.href=e,P.hrefNormalized?s.href:s.getAttribute(\"href\",4)},w=function(e){return function(){return e}},x=function(){for(var e={},t=0;t<arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var 10 28 s=\"o.param(e);return\" s?\"?\"+s:\"\"},t=\"function(){var\" e=\"o.getCookie(\"duoshuo_token\");return\" e?{jwt:e}:c.remote_auth?{short_name:c.short_name,remote_auth:c.remote_auth}:s},q=\"function(){if(!c&&(c=e.duoshuoQuery)){if(!c.short_name||\"your_duoshuo_short_name\"===c.short_name)return\" c=\"s,void\" alert(\"你还没有设置多说域名(duoshuoquery.short_name)，填入已有域名或创建新站点：http: duoshuo.com create-site \");it.trigger(\"querydefined\")}return c},c=\"function(e){return\" e&&e.error&&e.warn?e:{error:function(){},log:function(){},warn:function(){}}}(e.console),s=\"e.DUOSHUO={sourceName:{weibo:\"新浪微博\",qq:\"QQ\",qzone:\"QQ空间\",qqt:\"腾讯微博\",renren:\"人人网\",douban:\"豆瓣网\",kaixin:\"开心网\",sohu:\"搜狐微博\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},serviceNames:{weibo:\"微博\",qq:\"QQ\",douban:\"豆瓣\",renren:\"人人\",kaixin:\"开心\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},parseDate:function(e){return\" e.parse(\"2011-10-28t00:00:00+08:00\")&&function(t){return new e(t)}||e.parse(\"2011 28t00:00:00+0800\")&&function(t){return e(t.replace( - g,\" \").replace( :(\\d\\d)$ ,\"$1\"))}||e.parse(\"2011 00:00:00+0800\")&&function(t){return ,\"$1\").replace(\"t\",\" \"))}||function(t){return e(t)}}(date),fulltime:function(e){var t=\"S.parseDate(e);return\" t.getfullyear()+\"年\"+(t.getmonth()+1)+\"月\"+t.getdate()+\"日 \"+t.tolocaletimestring()},elapsedtime:function(e){var date,a=\"(s-b-t)/1e3;return\">a?\"刚刚\":60>a?Math.round(a)+\"秒前\":3600>a?Math.round(a/60)+\"分钟前\":86400>a?Math.round(a/3600)+\"小时前\":(s.getFullYear()==t.getFullYear()?\"\":t.getFullYear()+\"年\")+(t.getMonth()+1)+\"月\"+t.getDate()+\"日\"},compileStyle:function(e){var t=\"\",s={};if(s.textbox=\"#ds-thread #ds-reset .ds-replybox .ds-textarea-wrapper\",!e)return t;for(var a in e)t+=s[a]+\"{\"+e[a]+\"}\\n\";return t},init:function(e,t){e&&!O[e]&&(O[e]=t||{type:\"EmbedThread\"}),S.initView&&S.initView()}},j=t.all,P=S.support=function(){var s=t.createElement(\"div\");s.innerHTML='<a href=\"/a\" style=\"opacity:.55;\">a</a><input type=\"checkbox\">';var a=s.getElementsByTagName(\"a\")[0],i=s.getElementsByTagName(\"input\")[0],r={placeholder:\"placeholder\"in i,touch:\"ontouchstart\"in e||\"onmsgesturechange\"in e,opacity:/^0.55$/.test(a.style.opacity),hrefNormalized:\"/a\"===a.getAttribute(\"href\"),iOS:v.match(/ \\((iPad|iPhone|iPod);( U;)? CPU( iPhone)? OS /),android:v.match(/ \\(Linux; U; Android /)};return r.ie6=!f&&\"undefined\"==typeof s.style.maxHeight,r.authInWin=e.postMessage&&e.screen.width>800&&!r.iOS&&!r.android&&h.origin,r}(),O=S.selectors={\".ds-thread\":{type:\"EmbedThread\"},\".ds-recent-comments\":{type:\"RecentComments\"},\".ds-recent-visitors\":{type:\"RecentVisitors\"},\".ds-top-users\":{type:\"TopUsers\"},\".ds-top-threads\":{type:\"TopThreads\"},\".ds-login\":{type:\"LoginWidget\"},\".ds-thread-count\":{type:\"ThreadCount\"},\".ds-share\":{type:\"ShareWidget\"}},E=S.openDialog=function(e){return S.dialog!==s&&S.dialog.el.remove(),S.dialog=new st.Dialog(et.dialog(e)).open()},L=S.smilies={};S.require=function(){function t(e){var t=U[e]?\"?\"+U[e]+\".js\":\"\";return S.STATIC_URL+\"/libs/\"+e+\".js\"+t}var s={mzadxN:\"undefined\"!=typeof mzadxN};return\"undefined\"!=typeof jQuery&&jQuery.fn.jquery>=\"1.5\"&&(s[\"embed.compat\"]=!0,S.jQuery=e.jQuery),function(e,a){if(\"string\"==typeof e)s[e]?a():o.injectScript(t(e),function(){s[e]=!0,a()});else if(\"object\"==typeof e){var i,r=!0;for(i=0;i<e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectscript(t(n),function(){s[n]=!0;for(var t=\"0;t<e.length;t++)if(!s[e[t]])return;a()}))})(e[i]);r&&a()}}}();for(var\" n=\"0,I=[\"EmbedThread\",\"RecentComments\",\"RecentVisitors\",\"TopUsers\",\"TopThreads\",\"LoginWidget\",\"ThreadCount\"];N<I.length;N++)S[I[N]]=function(e){return\" function(t,s){s=\"s||{},s.type=e,t&&!O[t]&&(O[t]=s),S.initSelector&&S.initSelector(t,s)}}(I[N]),S[\"create\"+I[N]]=function(e){return\" function(s,a){var i=\"t.createElement(s);for(var\" r in a)i.setattribute(\"data-\"+r,a[r]);return s[e](i),i}}(i[n]);s.recentcommentswidget=\"S.RecentComments;var\" d(e){var date-new date(t))}function l(e,t,s){var a,i,o,l=\"t;if(e\">=200&&300>e||304===e)if(304===e)l=\"notmodified\",o=!0;else try{a=p.parse(s),l=\"success\",o=!0}catch(c){l=\"parsererror\",i=c}else{i=l,(!l||e)&&(l=\"error\",0>e&&(e=0));try{a=p.parse(s)}catch(c){l=\"parsererror\",i=c}}o?r&&r(a):\"parseerror\"===l?C.error(\"解析错误: \"+s):(C.error(\"出错啦(\"+a.code+\"): \"+a.errorMessage),n&&n(a),a.errorTrace&&C.error(a.errorTrace)),d(m)}var u=o.getCookie(\"duoshuo_token\");i=i||{},i.v=S.version,u?i.jwt=u:c.remote_auth&&(i.remote_auth=c.remote_auth);var h=f&&p&&p.parse;if(h){var m=new f,v=!!m&&\"withCredentials\"in m;if(v){var g;return m.open(e,a()+\"/api/\"+t+\".json\"+(\"GET\"==e?\"?\"+o.param(i):\"\"),!0),m.withCredentials=!0,m.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=UTF-8\"),m.send(\"GET\"==e?null:o.param(i)),g=function(e,t){var a,i,r,n;try{if(g&&(t||4===m.readyState))if(g=s,t)4!==m.readyState&&m.abort();else{a=m.status,r=m.getAllResponseHeaders();try{n=m.responseText}catch(e){}try{i=m.statusText}catch(o){i=\"\"}}}catch(d){t||l(-1,d)}n&&l(a,i,n,r)},void(4===m.readyState?g():m.onreadystatechange=g)}}\"GET\"!=e&&(i._method=\"POST\");var y=\"cb_\"+Math.round(1e6*Math.random());R[y]=function(e){switch(e.code){case 0:r&&r(e);break;default:n&&n(e),C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}},i.callback=\"DUOSHUO.API['\"+y+\"']\",o.injectScript(a()+\"/api/\"+t+\".jsonp?\"+o.param(i))},get:function(e,t,s,a){return this.ajax(\"GET\",e,t,s,a)},post:function(e,t,s,a){return this.ajax(\"POST\",e,t,s,a)}},A=S.ws={messages:[],send:function(s){if(!(\"WebSocket\"in e&&p))return!1;var a=this;if(a.messages.push(p.stringify(s)),!a.webSocket){var r=\"https:\"===t.location.protocol?\"wss://ws.duoshuo.com:8202/\":\"ws://ws.duoshuo.com:8201/\",n=a.webSocket=new WebSocket(r);n.onopen=function(){var e,t=1===n.readyState;if(t)for(;e=a.messages.shift();)n.send(e)},n.onmessage=function(e){try{var t=p.parse(e.data)}catch(s){return}switch(t.type){case\"post\":for(var a,r=0;r<s.pagelets.length;r++)a=s.pagelets[r],a.threadid==t.thread_id&&a.onmessage(t);break;case\"notification\":y.push(t),i()}},e.addeventlistener(\"beforeunload\",function(){n.close()})}a.websocket.onopen()}};s.domain=\"duoshuo.com\",s.static_url=g+\" static.duoshuo.com\",s.remote=\"g+\"//duoshuo.com\",S.version=\"16.6.16\";var\" m=\"{\"default\":\"9b2a46a0\",dark:\"33f3a5ac\",bluebox:\"39a75d50\",newhua:\"706ba4eb\",justflat:\"9d72ec5a\"},U={\"embed.compat\":\"24f8ca3f\",smilies:\"921e8eda\"},z={post:\"发布\",posting:\"正在发布\",settings:\"设置\",reply:\"回复\",like:\"顶\",repost:\"转发\",report:\"举报\",\"delete\":\"删除\",reply_to:\"回复\" \",reposts:\"转发\",comments:\"评论\",floor:\"楼\",latest:\"最新\",earliest:\"最早\",hottest:\"最热\",share_to:\"分享到:\",leave_a_message:\"说点什么吧…\",no_comments_yet:\"还没有评论，沙发等你来抢\",repost_reason:\"请输入转发理由\",hot_posts_title:\"被顶起来的评论\",comments_zero:\"暂无评论\",comments_one:\"1条评论\",comments_multiple:\"{num}条评论\",reposts_zero:\"暂无转发\",reposts_one:\"1条转发\",reposts_multiple:\"{num}条转发\",weibo_reposts_zero:\"暂无新浪微博\",weibo_reposts_one:\"1条新浪微博\",weibo_reposts_multiple:\"{num}条新浪微博\",qqt_reposts_zero:\"暂无腾讯微博\",qqt_reposts_one:\"1条腾讯微博\",qqt_reposts_multiple:\"{num}条腾讯微博\"},d=\"{get:function(e){return\" m?m[e]:void 0},save:function(e,t){if(m)try{m.removeitem(e),m[e]=\"p.stringify(t),m.removeItem(e+\":timestamp\"),m[e+\":timestamp\"]=Math.floor((new\" date-b) 1e3)}catch(s){}}},w=\"S.loadRequire=function(t){if(t.visitor&&(!nt.data&&t.visitor.user_id&&e.Notification&&A.send({logged_user_id:t.visitor.user_id}),nt.reset(t.visitor)),t.site&&(rt.reset(t.site),D.save(\"ds_site_\"+c.short_name,t.site)),!S.theme&&rt.data.theme&&n(rt.data.theme),t.lang&&(o.extend(z,t.lang),D.save(\"ds_lang_\"+c.short_name,t.lang)),t.stylesheets)for(var\" s=\"0;s<t.stylesheets.length;s++)o.injectStylesheet(t.stylesheets[s]);if(t.nonce&&(S.nonce=t.nonce),t.style&&o.injectStyle((t.style||\"\")+S.compileStyle(c.component_style)),t.unread&&ot.reset(t.unread),t.warnings)for(var\" t(){!b&&this.init&&this.init.apply(this,arguments)}b=\"1;var\" this;b=\"0;for(var\" a in e)s[a]=\"e[a];return\" t.prototype=\"s,t.prototype.constructor=t,t.extend=arguments.callee,t};var\" j=\"S.Event=H.extend({on:function(e,t){var\" a[e]=\"==s&&(a[e]=[]),a[e].push(t),this},trigger:function(e,t){var\" this}}),q=\"S.Widget=J.extend({init:function(e,t){this.el=e,this.options=t||{},this.render()},render:function(){},reset:function(){},load:function(e){switch(e.code){case\" 0:w(e);var t=\"this.prepare(e);t.options=o.extend(this.options,e.options),this.onload(t);break;default:this.onError(e)}},onload:function(e){this.el.html(et[this.tmpl](e))},prepare:function(e){return\" e},onmessage:function(){},onerror:function(e){c.error(\"出错啦(\"+e.code+\"): \"+e.errormessage),e.errortrace&&c.error(e.errortrace)}}),v=\"S.Model=J.extend({init:function(e){this.data=e},reset:function(e){this.data=e,this.trigger(\"reset\")},remove:function(e){this.data.splice(e,1),this.trigger(\"reset\")},set:function(e,t){if(t===s)for(var\" e)this.data[a]=\"e[a];else\" this.data[e]=\"t;return\" this.trigger(\"reset\"),this},tojson:function(){return o.extend({},this.data)}}),$=\"V.extend({toJSON:function(){return\" o.extend({},this.data)}}),f=\"V.extend({toJSON:function(){var\" e=\"o.extend({},this.data);return\" e.theauthor=\"ct[this.data.author_id]&&ct[this.data.author_id].data||this.data.author,e.parents=this.data.parents||[],e}}),G=V.extend({toJSON:function(){return\" o.extend({},this.data)}}),y=\"function(e){this.model=e};Y.prototype.set=function(e){for(var\" e)e[t]&&(this[t]?this[t].set(e[t]):this[t]=\"new\" this.model(e[t]))},y.prototype.get=\"function(e){for(var\" s},y.prototype.getjson=\"function(e){for(var\" s};var z=\"{userUrl:function(e){return\" e.url},avatarurl:function(e){return e.avatar_url||rt.data.default_avatar_url},loginurl:function(e,t){return t||(t=\"{}),c.sso&&c.sso.login&&(t.sso=1,t.redirect_uri=c.sso.login),a()+\"/login/\"+e+\"/\"+x(t)},bindUrl:function(e){return\" a()+\" bind \"+e+\" \"+x(c.sso&&c.sso.login?{sso:1,redirect_uri:c.sso.login}:null,t())},logouturl:function(){return logout \"+x(c.sso&&c.sso.logout?{sso:1,redirect_uri:c.sso.logout}:null)}},x=\"[\"weixin\",\"weibo\",\"qq\",\"renren\"],K=[\"douban\",\"kaixin\",\"baidu\",\"google\"],et=S.templates={userAnchor:function(e){return\" e.url?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(e.url)+'\">'+_(e.name)+\"\":_(e.name)},avatarImg:function(e,t){return'<img src=\"'+_(Z.avatarUrl(e,t))+'\" alt=\"'+_(e.name)+'\" '+(t?' style=\"width:'+t+\" px;height:\"+t+'px\"':\"\")+\">\"},avatar:function(e,t){var s=et.avatarImg(e,t),i=Z.userUrl(e);return i?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(i)+'\" '+(e.user_id?\" onclick=\"\\\"this.href='\"+a()+\"/user-url/?user_id=\"+e.user_id+\"';\\\"\":\"\")+'\" title=\"'+_(e.name)+'\">'+s+\"</a>\":s},timeText:function(e){return e?'<span class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</span>\":\"\"},timeAnchor:function(e,t){return e?'<a href=\"'+t+'\" target=\"_blank\" rel=\"nofollow\" class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</a>\":\"\"},serviceIcon:function(e,t){return'<a href=\"javascript:void(0)\" class=\"ds-service-icon'+(t?\" -grey\":\"\")+\" ds-\"+e+'\" data-service=\"'+e+'\" title=\"'+S.sourceName[e]+'\" target=\"_blank\" rel=\"noopener\"></a>'},poweredBy:function(e){return'<p class=\"ds-powered-by\"><a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"nofollow\">'+_(e)+\"</a></p>\"},indicator:w('<div id=\"ds-indicator\"></div>'),waitingImg:w('<div id=\"ds-waiting\"></div>'),loginItem:function(e,t){var s=Z[t?\"bindUrl\":\"loginUrl\"](e);return'<li>    <a href=\"'+s+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+e+'\">'+S.serviceNames[e]+(nt.data.social_uid[e]?' <span class=\"ds-icon ds-icon-ok\"></span>':\"\")+\"</a></li>\"}},tt=function(e){var t=[];for(var s in e)t.push('<input type=\"hidden\" name=\"'+s+'\" value=\"'+_(e[s])+'\">');return t.join(\"\\n\")};et.commentList=function(e){var t=\"\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li class=\"ds-comment',e.options.show_avatars&&(t+=\" ds-show-avatars\"),t+=\"\" data-post-id=\"\" +a.post_id+'\">',e.options.show_avatars&&(t+='<div class=\"ds-avatar\">'+et.avatar(a.theAuthor,e.options.avatar_size)+\"</div>\"),t+='<div class=\"ds-meta\">'+et.userAnchor(a.theAuthor),e.options.show_time&&(t+=et.timeText(a.created_at)),t+=\"</div>\",t+=e.options.show_title?'<div class=\"ds-thread-title\">在 <a href=\"'+u(a.thread.url)+'#comments\">'+u(a.thread.title)+'</a> 中评论</div><div class=\"ds-excerpt\">'+a.message+\"</div>\":'<a class=\"ds-excerpt\" title=\"'+a.thread.title+' 中的评论\" href=\"'+u(a.thread.url)+'#comments\">'+a.message+\"</a>\",t+=\"</li>\";return t},et.ctxPost=function(e){var t=\"\";return e.post&&(t+='<li class=\"ds-ctx-entry\" ',e.hidden&&(t+=\" style=\"display:none\"\" ),t+=\" data-post-id=\"\" +e.post.post_id+'\"><div class=\"ds-avatar\">'+et.avatar(e.post.theAuthor||e.post.author)+'</div><div class=\"ds-ctx-body\"><div class=\"ds-ctx-head\">'+et.userAnchor(e.post.theAuthor||e.post.author)+et.timeAnchor(e.post.created_at,e.post.url),e.index>=0&&(t+='<div class=\"ds-ctx-nth\" title=\"'+S.fullTime(e.post.created_at)+'\">'+(e.index+1)+z.floor+\"</div>\"),t+='</div><div class=\"ds-ctx-content\">'+e.post.message,e.index>=0&&(t+='　　　　　　　<div class=\"ds-comment-actions',e.post.vote>0&&(t+=\" ds-post-liked\"),t+=\"\">\" +et.likepost(e.post)+'<a href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'<a class=\"ds-post-reply\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a></div>\"),t+=\"</div></div></li>\"),t},et[\"dialog-anonymous\"]=function(e){var t='<h2>社交帐号登录</h2><div class=\"ds-icons-32\">',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\",e.options.deny_anonymous||(t+='<h2>作为游客留言</h2><form><div class=\"ds-control-group\"><input type=\"text\" name=\"author_name\" id=\"ds-dialog-name\" value=\"'+u(nt.data.name)+'\" required><label for=\"ds-dialog-name\">名字(必填)</label></div>',e.options.require_guest_email&&(t+='<div class=\"ds-control-group\"><input type=\"email\" name=\"author_email\" id=\"ds-dialog-email\" value=\"'+u(nt.data.email)+'\" required><label for=\"ds-dialog-email\">邮箱(必填)</label></div>'),e.options.require_guest_url&&(t+='<div class=\"ds-control-group\"><input type=\"url\" name=\"author_url\" id=\"ds-dialog-url\" placeholder=\"http://\" value=\"'+u(nt.data.url)+'\"><label for=\"ds-dialog-url\">网址(可选)</label></div>'),t+='<button type=\"submit\">发布</button></form>'),t},et[\"dialog-ask-for-auth\"]=function(){var e='<h2>社交帐号登录</h2><ul class=\"ds-service-list\">'+et.serviceList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul>\";return e},et[\"dialog-bind-more\"]=function(){var e='<h2>绑定更多帐号</h2><ul class=\"ds-service-list\">'+et.serviceBindList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceBindList(K)+'</ul><div style=\"clear:both\"></div>';return e},et[\"dialog-qrcode\"]=function(e){var t='<h2>微信扫一扫，分享到朋友圈</h2><div class=\"ds-share-qrcode\" style=\"text-align:center;\"><img src=\"'+e.qrcode_url+'\" alt=\"'+e.url+'\"></div>';return t},et[\"dialog-reposts\"]=function(e){var t='<h2>转发到微博</h2><div class=\"ds-quote\"><strong>@'+u(e.post.theAuthor.name)+\"</strong>: \"+e.post.message+\"</div><form>\"+tt({post_id:e.post.post_id})+'<div class=\"ds-textarea-wrapper\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.repost_reason)+'\">'+u(e.repostMessage)+'</textarea><pre class=\"ds-hidden-text\"></pre>';return t+='</div><div class=\"ds-actions\">',e.service?t+=tt({\"service[]\":e.service}):(t+='<label><input type=\"checkbox\" name=\"service[]\" value=\"weibo\" ',nt.data.social_uid.weibo&&(t+=\" checked=\"checked\"\" ),t+=\" /><span class=\"ds-service-icon ds-weibo\"></span>新浪微博</label><label><input type=\"checkbox\" name=\"service[]\" value=\"qqt\"\" ,nt.data.social_uid.qq&&(t+=\" checked=\"checked\"\" +z.repost+\"< button></label></div></form>\"},et.dialog=function(e){var t='<div class=\"ds-dialog\"><div class=\"ds-dialog-inner ds-rounded\"><div class=\"ds-dialog-body\">'+e+'</div><div class=\"ds-dialog-footer\"><a href=\"http://duoshuo.com/\" target=\"_blank\" class=\"ds-logo\"></a><span>社会化评论框</span></div><a class=\"ds-dialog-close\" href=\"javascript:void(0)\" title=\"关闭\" target=\"_blank\" rel=\"noopener\"></a></div></div>';return t},et.hotPosts=function(e){var t='<div class=\"ds-header ds-gradient-bg\">'+u(z.hot_posts_title)+\"</div><ul>\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=et.post({post:a,options:e.options});return t+=\"</ul>\"},et.likePost=function(e){var t='<a class=\"ds-post-likes\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-like\"></span>'+z.like;return e.likes>0&&(t+=\"(\"+e.likes+\")\"),t+=\"</a>\"},et.likeTooltip=function(e){var t='<div class=\"ds-like-tooltip ds-rounded\"><p>很高兴你能喜欢，分享一下吧：</p><ul>';for(var s in e.services)t+='<li><a class=\"ds-share-to-'+s+\" ds-service-link ds-\"+s+'\" href=\"'+a()+\" share-proxy ?\"+o.param({service:s,thread_id:e.thread_id})+'\">'+e.services[s]+\"</a></li>\";return t+='</ul><p class=\"ds-like-tooltip-footer\"><a class=\"ds-like-tooltip-close\">算了</a></p></div>'},et.loginButtons=function(){var e='<div class=\"ds-login-buttons\"><p>社交帐号登录:</p><div class=\"ds-social-links\"><ul class=\"ds-service-list\">'+et.serviceList(X)+'<li><a class=\"ds-more-services\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">更多»</a></li></ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul></div></div>\";return e},et.loginWidget=function(e){var t='<div class=\"ds-icons-32\">',s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\"},et.meta=function(e){var t='<div class=\"ds-meta\"><a href=\"javascript:void(0)\" class=\"ds-like-thread-button ds-rounded';return e.user_vote>0&&(t+=\" ds-thread-liked\"),t+=\"\"><span class=\"ds-icon ds-icon-heart\"></span> <span class=\"ds-thread-like-text\">\" ,t+=\"e.user_vote\" target=\"_blank\" rel=\"noopener\">0?\"已喜欢\":\"喜欢\",t+='<span class=\"ds-thread-cancel-like\">取消喜欢</span></a><span class=\"ds-like-panel\"></span></div>'},et.notify=function(e){var t='<div id=\"ds-reset\"><a class=\"ds-logo\" href=\"http://duoshuo.com/\" target=\"_blank\" title=\"多说\"></a><ul class=\"ds-notify-unread\"><li';return e.comments||(t+=\" style=\"display:none;\"\" ),t+=\"><a data-type=\"unread-comments\" href=\"javascript:void(0);\">你有\" +e.comments+\"条新回复< a><li\",e.notifications||(t+=' style=\"display:none;\" '),t+=\"><a data-type=\"unread-notifications\" href=\"javascript:void(0);\">你有\" +e.notifications+\"条系统消息< a></li\",e.notifications||(t+='></li';return></ul></div>\"},et.post=function(e){var t=\"\",s=e.post,i=e.options,r=s.author;if(t+='<li class=\"ds-post\" data-post-id=\"'+s.post_id+'\"><div class=\"ds-post-self\" data-post-id=\"'+s.post_id+'\" data-thread-id=\"'+s.thread_id+'\" data-root-id=\"'+s.root_id+'\" data-source=\"'+s.source+'\"><div class=\"ds-avatar\" ',r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\">\" +et.avatar(r),s.sourcename[s.source]&&(t+=\"et.serviceIcon(s.source)),t+='</div\"><div class=\"ds-comment-body\"><div class=\"ds-comment-header\">',r.url?(t+='<a class=\"ds-user-name ds-highlight\" data-qqt-account=\"'+(r.qqt_account||\" \")+'\" href=\"'+u(r.url)+'\" ',r.user_id&&(t+=\" onclick=\\\" this.href=\"\"+a()+\"/user-url/?user_id=\"+r.user_id+\"\" ;\\\"\"),t+=\" rel=\"nofollow\" target=\"_blank\"\" ,r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\">\" +u(r.name)+\"< a>\"):(t+='<span class=\"ds-user-name\" ',r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\" data-qqt-account=\"\" +(r.qqt_account||\"\")+'\">'+u(r.name)+\"</span>\"),t+=\"</a></div>\",1==i.max_depth&&i.show_context&&s.parents.length){t+='<ol id=\"ds-ctx\">';var n=lt.getJSON(s.parents);if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],1==d&&s.parents.length>2&&(t+='<li class=\"ds-ctx-entry\"><a href=\"javascript:void(0);\" class=\"ds-expand\" target=\"_blank\" rel=\"noopener\">还有'+(s.parents.length-2)+\"条评论</a></li>\"),t+=et.ctxPost({post:o,index:d,hidden:d&&d<s.parents.length-1});t+=\"< ol>\"}if(t+=\"<p>\",s.parents.length>=i.max_depth&&(!i.show_context||i.max_depth>1)&&s.parent_id&&lt[s.parent_id]&&(t+='<a class=\"ds-comment-context\" data-post-id=\"'+s.post_id+'\" data-parent-id=\"'+s.parent_id+'\">'+z.reply_to+u(lt[s.parent_id].toJSON().author.name)+\": </a>\"),t+=s.message+'</p><div class=\"ds-comment-footer ds-comment-actions',s.vote>0&&(t+=\" ds-post-liked\"),t+=\"\">\" ,t+=\"s.url?et.timeAnchor(s.created_at,s.url):et.timeText(s.created_at),\"duoshuo\"==s.source?(t+='<a\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"\"+et.likePost(s)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-report\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-report\"></span>'+z.report+\"</a>\",s.privileges[\"delete\"]&&(t+='<a class=\"ds-post-delete\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-delete\"></span>'+z[\"delete\"]+\"</a>\")):(\"qqt\"==s.source||\"weibo\"==s.source)&&(t+='<a class=\"ds-weibo-comments\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+z.comments,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.comments+\"</span>)\"),t+='</a><a class=\"ds-weibo-reposts\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+z.reposts,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.reposts+\"</span>)\"),t+=\"</a>\"),t+=\"</div></s.parents.length-1});t+=\"<></ol></div></div>\",i.max_depth>1&&(s.childrenArray||s.children)&&\"weibo\"!=s.source&&\"qqt\"!=s.source){t+='<ul class=\"ds-children\">';var c=lt.getJSON(s.childrenArray||s.children);if(c)for(var s,d=-1,p=c.length-1;p>d;)s=c[d+=1],t+=et.post({post:s,options:i});t+=\"</ul>\"}return t+=\"</div></li>\"},et.postListHead=function(e){var t='<div class=\"ds-comments-info\"><div class=\"ds-sort\"><a class=\"ds-order-desc\">'+z.latest+'</a><a class=\"ds-order-asc\">'+z.earliest+'</a><a class=\"ds-order-hot\">'+z.hottest+'</a></div><ul class=\"ds-comments-tabs\"><li class=\"ds-tab\"><a class=\"ds-comments-tab-duoshuo ds-current\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>';return e.options.show_reposts&&e.thread.reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-repost\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\" \",e.options.show_weibo&&e.thread.weibo_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-weibo\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\" \",e.options.show_qqt&&e.thread.qqt_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-qqt\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\"</ul></div>\"},et.recentVisitors=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"</div>\";return t},et[\"related-read\"]=function(e){var t=\"\";if(e&&e.length){t+='<article class=\"ds-reads-expand\"><div class=\"ds-header\">头条推荐</div><section> ';var s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;){if(a=s[i+=1],t+=' <a href=\"'+a.url+'\" class=\"ds-reads-item\"> ',3==a.imgs.length){t+=\" <h2>\"+a.title+'</h2> <div class=\"ds-reads-pics\"> <ul> ';var n=a.imgs;if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],t+=' <li> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+o+');\"></div> </li> ';t+=' </ul> </div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> '}else t+=' <div class=\"ds-reads-desc ',a.imgs.length||(t+=\" ds-reads-only\"),t+=\"\"> <div class=\"ds-reads-title\">\" +a.title+'< div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> </div> ',a.imgs.length&&(t+=' <div class=\"ds-reads-pic-right\"> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+a.imgs[0]+');\"> ',a.hasVideo&&(t+=' <div class=\"ds-reads-vid-info\"><span>'+a.videoDuration+\"</span></div> \"),t+=\" </div> </div> \"),t+=\" \";t+=\" </a> \"}t+=\"</section></article>\"}return t},et.replybox=function(e){var t='<div class=\"ds-replybox\"><a class=\"ds-avatar\" ';if(t+=\"r()?'\" href=\"javascript:void(0);\" onclick=\"return false\" ':' settings avatar \"+x(t())+'\" target=\"_blank\" title=\"设置头像\" ',t+=\">\" +et.avatarimg(nt.data)+'< a><form method=\"post\">'+tt(e.params)+'<div class=\"ds-textarea-wrapper ds-rounded-top\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.leave_a_message)+'\"></textarea><pre class=\"ds-hidden-text\"></pre>',t+=\"</div>\",t+='<div class=\"ds-post-toolbar\"><div class=\"ds-post-options ds-gradient-bg\"><span class=\"ds-sync\">',!r()&&nt.data.repostOptions){t+='<input id=\"ds-sync-checkbox',e.inline&&(t+=\" -inline\"),t+=\"\" type=\"checkbox\" name=\"repost\" \" ,e.checked&&(t+=\"checked=\"checked\" \" ),t+=\"value=\"\" +e.repostarray.join(\",\")+'\"> <label for=\"ds-sync-checkbox',e.inline&&(t+=\" -inline\"),t+=\"\">\" +z.share_to+\"< label>\";for(var s in nt.data.repostOptions)t+=et.serviceIcon(s,!nt.data.repostOptions[s])}return t+=\"</label></span>\",t+=\"</div>\",t+='<button class=\"ds-post-button\" type=\"submit\">'+u(z.post)+'</button><div class=\"ds-toolbar-buttons\">',e.options.use_smilies&&(t+='<a class=\"ds-toolbar-button ds-add-emote\" title=\"插入表情\"></a>'),e.options.use_images&&e.options.parse_html_enabled&&(t+='<a class=\"ds-toolbar-button ds-add-image\" title=\"插入图片\"></a>'),t+=\"</div></div>\",t+=\"</form></a></div>\"},et.serviceBindList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.bindUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a],nt.data.social_uid[a]&&(t+=' <span class=\"ds-icon ds-icon-ok\"></span>'),t+=\"</a></li>\";return t},et.serviceList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.loginUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a]+\"</a></li>\";return t},et.shareWidget=function(e){var t='<div class=\"ds-share-icons\"> <div class=\"ds-share-icons-inner\"> <ul class=\"ds-share-icons-16\"> ',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=' <li> <a class=\"ds-'+a+'\" href=\"javascript:void(0);\" data-service=\"'+a+'\" target=\"_blank\" rel=\"noopener\">'+S.sourceName[a]+\"</a> </li> \";return t+=' </ul> </div> <div class=\"ds-share-icons-footer\">'+e.copyright+\"</div></div>\"},et.smiliesTooltip=function(e){var t='<div id=\"ds-smilies-tooltip\"><ul class=\"ds-smilies-tabs\">';for(var s in e)t+=\"<li><a>\"+s+\"</a></li>\";return t+='</ul><div class=\"ds-smilies-container\"></div></div>'},et.toolbar=function(){var e='<div class=\"ds-toolbar\"><div class=\"ds-account-control\"><span class=\"ds-icon ds-icon-settings\"></span> <span>帐号管理</span><ul><li><a class=\"ds-bind-more\" href=\"javascript:void(0);\" style=\"border-top: none\" target=\"_blank\" rel=\"noopener\">绑定更多</a></li><li><a target=\"_blank\" href=\"'+S.REMOTE+\" settings \"+x(t())+'\">'+u(z.settings)+'</a></li><li><a rel=\"nofollow\" href=\"'+Z.logoutUrl()+'\" style=\"border-bottom: none\">登出</a></li></ul></div><div class=\"ds-visitor\">';return e+=nt.data.url?'<a class=\"ds-visitor-name\" href=\"'+u(nt.data.url)+'\" target=\"_blank\">'+u(nt.data.name)+\"</a>\":'<span class=\"ds-visitor-name\">'+u(nt.data.name)+\"</span>\",e+='<a class=\"ds-unread-comments-count\" href=\"javascript:void(0);\" title=\"新回复\" target=\"_blank\" rel=\"noopener\"></a></div></div>'},et.topThreads=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a target=\"_blank\" href=\"'+u(a.url)+'\" title=\"'+u(a.title)+'\">'+u(a.title)+\"</a></li>\";return t},et.topUsers=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"<h4>\"+u(a.name)+\"</h4></div>\";return t},et.userInfo=function(e){var t='<a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\" user-url ?user_id=\"+e.user_id+'\\';\" class=\"ds-avatar\" target=\"_blank\">'+et.avatarImg(e)+'</a><a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\" user-url ?user_id=\"+e.user_id+'\\';\" class=\"ds-user-name ds-highlight\" target=\"_blank\">'+u(e.name)+\"</a>\";for(var s in e.social_uid)t+='<a href=\"'+S.REMOTE+\" user-proxy \"+s+\" \"+e.social_uid[s]+' \" target=\"_blank\" class=\"ds-service-icon ds-'+s+'\" title=\"'+S.sourceName[s]+'\"></a>';return t+='<p class=\"ds-user-card-meta\"><a href=\"'+S.REMOTE+\" profile \"+e.user_id+' \" target=\"_blank\"><span class=\"ds-highlight\">'+e.comments+\"</span>条评论</a></p>\",e.description&&(t+='<p class=\"ds-user-description\">'+u(e.description)+\"</p>\"),t};var st=S.Views={},at=(S.Callbacks={},S.pagelets=[]),it=S.events=new J,rt=S.site=new V,nt=S.visitor=new $,ot=S.unread=new V,dt=S.threadPool=new Y(G),lt=S.postPool=new Y(F),ct=S.userPool=new Y($);it.on(\"queryDefined\",function(){var e=c.short_name;if(c.theme&&n(c.theme),m){var t=m[\"ds_site_\"+e],s=m[\"ds_lang_\"+e];t&&rt.reset(p.parse(t)),s&&o.extend(z,p.parse(s))}}),q(),S.require(\"embed.compat\",function(){function i(e){e.stopPropagation()}function n(e){(e.ctrlKey&&13==e.which||10==e.which)&&H(this.form).trigger(\"submit\")}function d(){var e=H(this);e.height(Math.max(54,e.next(\".ds-hidden-text\").text(this.value).height()+27))}function l(){if(P.authInWin){var e=this.href.match(/\\/(login|bind)\\/(\\w+)\\//i);if(e&&S.serviceNames[e[2]])return!b(e[2],this.href)\n}}function u(){var e,s,a,i,r,n=this,o=0,d=0;t.selection&&(s=t.selection.createRange(),s&&s.parentElement()==n&&(i=n.value.length,e=n.value.replace(/\\r\\n/g,\"\\n\"),a=n.createTextRange(),a.moveToBookmark(s.getBookmark()),r=n.createTextRange(),r.collapse(!1),a.compareEndPoints(\"StartToEnd\",r)>-1?o=d=i:(o=-a.moveStart(\"character\",-i),o+=e.slice(0,o).split(\"\\n\").length-1,a.compareEndPoints(\"EndToEnd\",r)>-1?d=i:(d=-a.moveEnd(\"character\",-i),d+=e.slice(0,d).split(\"\\n\").length-1)))),H(n).data(\"ds-range-start\",o).data(\"ds-range-end\",d)}function p(e){return P.touch&&e.addClass(\"ds-touch\"),o.cssProperty(\"transition\")||e.addClass(\"ds-no-transition\"),P.ie6&&e.addClass(\"ds-ie6\"),P.opacity||e.addClass(\"ds-no-opacity\"),e}function f(e){if(!P.placeholder){var t=e.attr(\"placeholder\");e.val(t).focus(function(){this.value===t&&(this.value=\"\")}).blur(function(){\"\"===this.value&&(this.value=t)})}return e}function g(e){if(\"http://duoshuo.com\"===e.origin)switch(e.data.type){case\"login\":h.href=e.data.redirectUrl}}function b(t,s){var a={weibo:[760,600],renren:[420,322],qq:[504,445],weixin:[450,550],google:[600,440]}[t]||[550,400];return e.open(s+(-1==s.indexOf(\"?\")?\"?\":\"&\")+o.param({origin:h.origin||\"http://\"+h.host}),\"_blank\",\"width=\"+a[0]+\",height=\"+a[1]+\",toolbar=no,menubar=no,location=yes\")}function y(e){var t=Z[r()?\"loginUrl\":\"bindUrl\"](e);P.authInWin&&b(e,t)||(h.href=t)}function w(){var e=E(et[\"dialog-ask-for-auth\"]({})).el.find(\".ds-dialog\").css(\"width\",\"300px\");e.find(\"a.ds-service-link\").click(l)}function x(e,t,s,a){function i(){function e(e){if(s&&a){var t=s.options,i=M(s.postList.el,e.response[a],t);\"asc\"==t.order==(\"top\"==t.formPosition)&&S.scrollTo(i);var r=s.el.find(\".ds-comments-tab-\"+a+\" span.ds-highlight\");r.html(parseInt(r.html())+1)}}return a||l.find(\"[type=checkbox]:checked\")[0]?(R.post(\"posts/repost\",S.toJSON(l),e),o.close(),!1):(alert(\"还没有选发布到哪儿呢\"),!1)}function r(){var e=this.value;return this.checked&&!nt.data.social_uid[\"qqt\"==e?\"qq\":e]?void y(e):void 0}var o=E(et[\"dialog-reposts\"]({post:e.toJSON(),repostMessage:t,service:a})),l=o.el.find(\"form\");return l.submit(i),l.find(\".ds-actions [type=checkbox]\").change(r),f(l.find(\"textarea\")).keyup(n).keyup(d).focus(),!1}function T(e){var t={\"unread-comments\":{title:\"新留言及回复\",apiUrl:\"users/unreadComments\",tmpl:function(e){return e.thread?'<li data-thread-id=\"'+e.thread.thread_id+'\">'+H.map(e.authors,et.userAnchor).join(\"、\")+' 在 <a class=\"ds-read\" href=\"'+e.thread.url+'#comments\" target=\"_blank\">'+_(e.thread.title||\"无标题\")+'</a> 中回复了你 <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">知道了</a></li>':\"\"},read:function(e){var t=e.attr(\"data-thread-id\");R.post(\"threads/read\",{thread_id:t}),ot.data.comments--}},\"unread-notifications\":{title:\"系统消息\",apiUrl:\"users/unreadNotifications\",tmpl:function(e){return'<li data-notification-id=\"'+e.notification_id+'\" data-notification-type=\"'+e.type+'\">'+e.content+' <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">知道了</a></li>'},read:function(e){var t=e.attr(\"data-notification-id\");R.post(\"notifications/read\",{notification_id:t}),ot.data.notifications--}}}[e],s=E(\"<h2>\"+t.title+'</h2><ul class=\"ds-unread-list\"></ul>');s.on(\"close\",S.resetNotify);var a=s.el.find(\".ds-unread-list\").delegate(\".ds-delete\",\"click\",function(){return H(this).parent().remove(),0===a.children().length&&s.close(),!1}).delegate(\".ds-read\",\"click\",function(){t.read(H(this).parent())});H(\"#ds-notify\").hide(),R.get(t.apiUrl,{},function(e){s.el.find(\".ds-unread-list\").html(H.map(e.response,t.tmpl).join(\"\\n\"))})}function N(){bubbleOutTimer&&(clearTimeout(bubbleOutTimer),bubbleOutTimer=0)}function I(){bubbleOutTimer=setTimeout(function(){bubbleOutTimer=0,X.detach()},400)}function M(e,t,s){return e.find(\".ds-post[data-post-id=\"+t.data.post_id+\"]\")[0]?void 0:(e.find(\".ds-post-placeholder\").remove(),H(et.post({post:t.toJSON(),options:s})).hide()[\"asc\"==s.order?\"appendTo\":\"prependTo\"](e).slideDown(function(){}))}function U(e,t){function s(){if(r())return w(),!1;var e=H(this).parent(),t=e.hasClass(\"ds-post-liked\"),s=H(this).html().match(/\\((\\d+)\\)/),a=(s?parseInt(s[1]):0)+(t?-1:1);return R.post(\"posts/vote\",{post_id:e.closest(\".ds-ctx-entry, .ds-post-self\").attr(\"data-post-id\"),vote:t?0:1}),H(this).html(H(this).html().replace(/\\(\\d+\\)/,\"\")+(a?\"(\"+a+\")\":\"\")),e[t?\"removeClass\":\"addClass\"](\"ds-post-liked\"),!1}function a(){var e=H(this).closest(\".ds-post-self\"),t=lt[e.attr(\"data-post-id\")];return x(t,\"\"),!1}function i(){if(!confirm(\"确定要删除这条评论吗？\"))return!1;var t=H(this).closest(\".ds-post-self\");return R.post(\"posts/remove\",{post_id:t.attr(\"data-post-id\")}),t.parent().fadeOut(200,function(){e.data.comments--,e.updateCounter(\"duoshuo\"),H(this).remove()}),!1}function n(){if(!confirm(\"确定要举报这条评论吗？\"))return!1;var e=H(this).closest(\".ds-post-self\");return R.post(\"posts/report\",{post_id:e.attr(\"data-post-id\")}),alert(\"感谢您的反馈！\"),!1}function o(){var s=H(this),a=s.closest(\".ds-comment-actions\");if(a.hasClass(\"ds-reply-active\"))h.el.fadeOut(200,function(){H(this).detach()}),a.removeClass(\"ds-reply-active\");else{var i=s.closest(\".ds-ctx-entry, .ds-post-self\");h?h.actionsBar.removeClass(\"ds-reply-active\"):(h=new st.Replybox(e),h.render(!0).el.addClass(\"ds-inline-replybox\").detach()),h.el.find(\"[name=parent_id]\").val(i.attr(\"data-post-id\")),h.el.show().appendTo(s.closest(\".ds-ctx-body, .ds-comment-body\")).find(\"textarea\").focus(),h.actionsBar=a.addClass(\"ds-reply-active\"),t.max_depth<=1?h.postlist=e.postlist.el:(h.postlist=i.siblings(\".ds-children\"),h.postlist[0]||(h.postlist=h('<ul class=\"ds-children\">').insertAfter(i)))}return!1}function d(){function e(e){W(e),i.append(H.map(e.response,function(e){return et.post({post:e,options:t})}).join(\"\"))}{var s=H(this).closest(\".ds-post-self\"),a=s.attr(\"data-post-id\");s.data(\"source\")}if(0!=s.attr(\"data-root-id\"))return!1;var i=s.siblings(\".ds-children\");return i[0]?(i.remove(),!1):(i=H('<ul class=\"ds-children\"></ul>').insertAfter(s),R.get(\"posts/listComments\",B({post_id:a}),e),!1)}function l(){var t=H(this).closest(\".ds-post-self\"),s=lt[t.attr(\"data-post-id\")],a=s.data.source;if(!nt.data.social_uid[\"qqt\"==a?\"qq\":a])return void y(a);var i=s.data.root_id,r=\"0\"!=i?lt[i]:s,n=\"\";if(\"0\"!=i){var o=prepatePost(s.data).theAuthor;n=(\"weibo\"==a?\"//@\"+o.name:\"|| @\"+o.qqt_account)+\":\"+s.data.message}return x(r,n,e,a),!1}function c(){var e=H(this).parent();return e.siblings().show(),e.remove(),!1}function u(){function t(){function t(e){var t=e.response;ct[c]?ct[c].set(t):ct[c]=new $(t),X.owner==s&&K.html(et.userInfo(t))}tt=0,X.owner=s,N();var i=a.offset(),r=e.el.offset(),n=a.innerWidth()/2,o=e.el.innerHeight()-(i.top-r.top)+6,d=i.left-r.left-35+(n>35?35:n);try{if(a.hasClass(\"ds-comment-context\"))K.attr(\"id\",\"ds-ctx-bubble\").attr(\"data-post-id\",a.attr(\"data-post-id\")).html('<ul id=\"ds-ctx\">'+et.ctxPost({post:lt[a.attr(\"data-parent-id\")].toJSON()})+'</ul><div class=\"ds-bubble-footer\"><a class=\"ds-ctx-open\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">查看对话</a></div>');else if(a.hasClass(\"ds-avatar\")||a.hasClass(\"ds-user-name\")){var l={},c=l.user_id=a.attr(\"data-user-id\");if(!c)throw\"no info\";K.attr(\"id\",\"ds-user-card\").attr(\"data-user-id\",c).empty(),ct[c]?K.html(et.userInfo(ct[c].data)):R.get(\"users/profile\",B(l),t)}X.css({bottom:o,left:d}).appendTo(e.innerEl)}catch(u){X.detach()}}var s=this;if(bubbleOutTimer&&X.owner==s)return clearTimeout(bubbleOutTimer),void(bubbleOutTimer=0);var a=H(s);tt=setTimeout(t,200)}function p(){tt?(clearTimeout(tt),tt=0):bubbleOutTimer||I()}var h;this.delegate(\"a.ds-post-likes\",\"click\",s).delegate(\"a.ds-post-repost\",\"click\",a).delegate(\"a.ds-post-delete\",\"click\",i).delegate(\"a.ds-post-report\",\"click\",n).delegate(\"a.ds-post-reply\",\"click\",o).delegate(\"a.ds-weibo-comments\",\"click\",d).delegate(\"a.ds-weibo-reposts\",\"click\",l).delegate(\"a.ds-expand\",\"click\",c),P.touch||this.delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseenter\",u).delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseleave\",p)}function B(e){var s={require:\"site,visitor,nonce,lang\"+(it++?\"\":\",unread,log,extraCss\"),site_ims:D.get(\"ds_site_\"+c.short_name+\":timestamp\"),lang_ims:D.get(\"ds_lang_\"+c.short_name+\":timestamp\"),referer:t.referrer};c.stylePatch&&(s.style_patch=c.stylePatch);for(var a in s)s[a]&&(!P.ie6||encodeURIComponent(s[a]).length<200)&&(e[a]=s[a]);return e}var h=\"S.jQuery,V=H(e),Y=H(t);e.postMessage&&(e.addEventListener?e.addEventListener(\"message\",g,!1):e.attachEvent&&e.attachEvent(\"onmessage\",g)),S.scrollTo=function(e){var\" t=\"e.offset().top;(t<V.scrollTop()||t\">V.scrollTop()+V.height())&&H(\"html, body\").animate({scrollTop:t-40},200,\"swing\")},S.toJSON=function(e){var t=/\\r?\\n/g,s=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,a=/^(?:select|textarea)/i,i=e.map(function(){return this.elements?H.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||a.test(this.nodeName)||s.test(this.type))}).map(function(e,s){var a=H(this).val();return null==a?null:H.isArray(a)?H.map(a,function(e){return{name:s.name,value:e.replace(t,\"\\r\\n\")}}):{name:s.name,value:a.replace(t,\"\\r\\n\")}}).toArray(),r={};return H.each(i,function(){r[this.name]=this.value}),r},S.resetNotify=function(){var e=H(\"#ds-notify\"),s=ot.data;e[0]||(e=H('<div id=\"ds-notify\"></div>').css({hidden:{display:\"none\"},\"top-right\":{top:\"24px\",right:\"24px\"},\"bottom-right\":{bottom:\"24px\",right:\"24px\"}}[rt.data.notify_position]).delegate(\".ds-notify-unread a\",\"click\",function(){return T(H(this).data(\"type\")),!1}).appendTo(t.body)),e.html(et.notify(s))[!s.comments&&!s.notifications||\"hidden\"===rt.data.notify_position||H(\".ds-dialog\")[0]?\"hide\":\"show\"]()},ot.on(\"reset\",S.resetNotify),st.Replybox=function(e){this.embedThread=e},st.Replybox.prototype={render:function(e){function s(e){e.data(\"submitting\",!0),e.find(\".ds-post-button\").addClass(\"ds-waiting\").html(z.posting)[0].disabled=!0}function a(e){e.data(\"submitting\",!1),e.find(\".ds-post-button\").removeClass(\"ds-waiting\").html(z.post)[0].disabled=!1}var i=this,o=i.embedThread,c=o.options,p=function(){S.require(\"smilies\",function(){})},h={thread:o,options:c,inline:e,params:{thread_id:o.threadId,parent_id:\"\",nonce:S.nonce},repostArray:[],checked:0};for(var v in nt.data.repostOptions)nt.data.repostOptions[v]&&(h.repostArray.push(v),h.checked=1);var g=i.el=H(et.replybox(h)).click(p),b=g.find(\"form\"),y=b.find(\"input[type=checkbox]\")[0],_=b.find(\"a.ds-service-icon, a.ds-service-icon-grey\"),k=f(b.find(\"textarea\")).focus(p).keyup(n).keyup(d).bind(\"focus mousedown mouseup keyup\",u),w=g.find(\".ds-add-emote\").click(function(e){var s=S.smiliesTooltip;return w.toggleClass(\"ds-expanded\").hasClass(\"ds-expanded\")?(s||(s=S.smiliesTooltip=new st.SmiliesTooltip,s.render(),S.require(\"smilies\",function(){s.reset(\"微博-默认\")})),s.replybox=i,s.el.appendTo(t.body).css({top:i.el.offset().top+i.el.outerHeight()+4+\"px\",left:i.el.find(\".ds-textarea-wrapper\").offset().left+\"px\"}),H(t.body).click(x)):x(e),!1}),x=(g.find(\".ds-add-image\").click(function(e){var s=k[0],a=s.value,i=\"请输入图片地址\",r='<img src=\"'+i+'\">';if(t.selection){s.value=a.substring(0,k.data(\"ds-range-start\"))+r+a.substring(k.data(\"ds-range-end\"),a.length),s.value=s.value.replace(\"说点什么吧 ...\",\"\"),s.focus();var n=t.selection.createRange();n.collapse(),n.findText(i),n.select()}else{s.value=a.substring(0,s.selectionStart)+r+a.substring(s.selectionEnd);var o=s.value.search(i);s.setSelectionRange(o,o+i.length),s.focus()}e.preventDefault()}),i.hideSmilies=function(){w.removeClass(\"ds-expanded\"),S.smiliesTooltip.el.detach(),H(t.body).unbind(\"click\",x)}),T=function(e,t){var s=E(et[\"dialog-anonymous\"]({services:[\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"],options:c})),a=s.el.find(\".ds-dialog\").css(\"width\",\"320px\");if(a.find(\".ds-icons-32 a\").click(l),!c.deny_anonymous){var i=s.el.find(\"form\");i.submit(function(){var e=i.find(\"input[name=author_email]\").val();return!e&&!c.require_guest_email||e.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)?(t(S.toJSON(i)),s.close(),!1):(alert(\"请输入一个有效的email地址.\"),!1)}),i.find(\"input[name=author_name]\")[0].focus()}};c.deny_anonymous&&k.focus(function(){if(r()){T(b,q);var e=function(t){t.stopPropagation(),k.unbind(\"click\",e)};k.click(e)}return!1});var q=function(e){s(b),R.post(\"posts/create\",H.extend(S.toJSON(b),e),function(e){var t=lt[e.response.post_id]=new F(e.response),s=M(i.postList,t,c);if(\"asc\"==c.order==(\"top\"==c.formPosition)&&S.scrollTo(s),o.data.comments++,o.updateCounter(\"duoshuo\"),k.val(\"\").trigger(\"keyup\"),a(b),g.hasClass(\"ds-inline-replybox\")&&(g.detach(),i.actionsBar.removeClass(\"ds-reply-active\")),m)try{m.removeItem(\"ds_draft_\"+o.threadId)}catch(r){}},function(e){a(b),alert(e.errorMessage)})};b.submit(function(){if(b.data(\"submitting\"))return!1;var e=H.trim(b[0].message.value);return\"\"==e||!P.placeholder&&e==k.attr(\"placeholder\")?(alert(\"您还没写内容呢\"),!1):(r()?T(b,q):q(),!1)});var C=function(e){return H(e).hasClass(\"ds-service-icon-grey\")?null:H(e).attr(\"data-service\")};if(_.click(function(){return H(this).toggleClass(\"ds-service-icon-grey\").toggleClass(\"ds-service-icon\"),y.value=H.map(_,C).join(\",\"),y.checked=\"\"!=y.value,!1}),H(y).change(function(){var e=this.checked;_[e?\"removeClass\":\"addClass\"](\"ds-service-icon-grey\")[e?\"addClass\":\"removeClass\"](\"ds-service-icon\"),this.value=H.map(_,C).join(\",\")}),!e&&m){var j=\"ds_draft_\"+o.threadId;k.bind(\"focus blur keyup\",function(e){var t=H(e.currentTarget).val();try{m[j]=t}catch(e){}}),m[j]&&k.val(m[j])}return this}},st.Dialog=J.extend({init:function(e,t){(this.el=H(\"#ds-wrapper\"))[0]||(this.el=p(H('<div id=\"ds-wrapper\"></div>'))),this.options=H.extend({width:600},t),e!==s&&H(e).attr(\"id\",\"ds-reset\").appendTo(this.el)},open:function(){function e(e){return 27==e.which?(a.close(),!1):void 0}function s(){return a.close(),!1}var a=this;return a.el.hide().appendTo(t.body).fadeIn(200),P.ie6&&a.el.css(\"top\",V.scrollTop()+100),a.el.show().find(\".ds-dialog\").delegate(\"a.ds-dialog-close\",\"click\",function(){return a.close(),!1}).click(i),Y.keydown(e),H(t.body).click(s),a.close=function(){Y.unbind(\"keydown\",e),H(t.body).unbind(\"click\",s),a.el.fadeOut(200,function(){H(this).remove()}),a.trigger(\"close\")},a}}),et.likePanel=function(e){return e.likes?'<span class=\"ds-highlight\">'+e.likes+\"</span> 人喜欢\":\"\"},st.Meta=function(e){this.embedThread=e},st.Meta.prototype={render:function(){function a(a){function r(e){o.set(e),n.resetLikePanel()}function c(){n.tooltip.detach(),H(t.body).unbind(\"click\",c)}function u(t){switch(this.className){case\"ds-like-tooltip-close\":c(t);break;default:if(!e.open(this.href,\"_blank\",\"height=500,width=600,top=0,left=0,toolbar=no,menubar=no,resizable=yes,location=yes,status=no\"))return}return!1}var p=l.hasClass(\"ds-thread-liked\");if(R.post(\"threads/vote\",{thread_id:n.embedThread.threadId,vote:p?0:1},r),l.toggleClass(\"ds-thread-liked\"),l.find(\".ds-thread-like-text\").text(p?\"喜欢\":\"已喜欢\"),p)return n.tooltip&&c(a),!1;if(n.tooltip===s){var h=et.likeTooltip({services:{qzone:\"QQ空间\",weibo:\"新浪微博\",qqt:\"腾讯微博\",renren:\"人人网\",kaixin:\"开心网\",douban:\"豆瓣网\",baidu:\"百度搜藏\"},thread_id:o.data.thread_id});n.tooltip=H(h).click(i).delegate(\"a\",\"click\",u)}var f={};return f.left=0,f.top=d.position().top+d.outerHeight()-4+\"px\",n.tooltip.appendTo(n.embedThread.innerEl).css(f),H(t.body).click(c),!1}var n=this,o=n.embedThread.model,d=n.el=H(et.meta(o.toJSON())),l=d.find(\".ds-like-thread-button\");return l.click(a),n.resetLikePanel(),r()&&d.hide(),n},resetLikePanel:function(){this.el.find(\".ds-like-panel\").html(et.likePanel(this.embedThread.model.toJSON()))}},st.PostListHead=function(e){this.embedThread=e},st.PostListHead.prototype={render:function(){function e(e){r.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.page=1;var t=e.currentTarget;switch(t.className){case\"ds-comments-tab-duoshuo\":a.params.source=\"duoshuo\",s.replybox.el.show();break;case\"ds-comments-tab-repost\":a.params.source=\"repost\",s.replybox.el.hide();break;case\"ds-comments-tab-weibo\":a.params.source=\"weibo\",s.replybox.el.hide();break;case\"ds-comments-tab-qqt\":a.params.source=\"qqt\",s.replybox.el.hide()}return H(t).addClass(\"ds-current\"),a.refetch(),!1}function t(){return n.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.order=s.options.order=this.className.replace(\"ds-order-\",\"\"),a.params.page=1,a.refetch(),H(this).addClass(\"ds-current\"),!1}var s=this.embedThread,a=s.postList,i=this.el=H(et.postListHead({thread:s.model.toJSON(),options:s.options})),r=i.find(\"ul.ds-comments-tabs\");r.delegate(\".ds-tab a\",\"click\",e);var n=i.find(\".ds-sort\");return n.delegate(\"a\",\"click\",t),n.find(\".ds-order-\"+a.params.order).addClass(\"ds-current\"),this}},st.Paginator=function(e){function t(){return i.params.page=parseInt(this.innerHTML),i.refetch(),a.find(\".ds-current\").removeClass(\"ds-current\"),H(this).addClass(\"ds-current\"),!1}e=e||{};var s=this,a=s.el=e.el||H('<div class=\"ds-paginator\"></div>'),i=s.collection=e.collection;a.delegate(\"a\",\"click\",t)},st.Paginator.prototype={reset:function(e){function t(e){i.push('<a data-page=\"'+e+'\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+e+\"</a>\")}var s,a=this.collection.params.page||1,i=[];if(a>1)for(t(1),s=a>4?a-2:2,s>2&&i.push('<span class=\"page-break\">...</span>');a>s;s++)t(s);if(i.push('<a data-page=\"'+a+'\" href=\"javascript:void(0);\" class=\"ds-current\" target=\"_blank\" rel=\"noopener\">'+a+\"</a>\"),a<e.pages){for(s=a+1;a+4>=s&&s<e.pages;s++)t(s);s<e.pages&&i.push('<span class=\"page-break\">...'),t(e.pages)}this.el.html('<div class=\"ds-border\"></div>'+i.join(\" \"))[e.pages>1?\"show\":\"hide\"]()}},S.addSmilies=function(e,t){var s=S.smiliesTooltip;s&&s.el.find(\"ul.ds-smilies-tabs\").append(\"<li><a>\"+e+\"</a></li>\"),S.smilies[e]=t},st.SmiliesTooltip=function(){},st.SmiliesTooltip.prototype={render:function(){function e(){var e=s.replybox,a=e.el.find(\"textarea\"),i=a[0],r=i.value;if(t.selection){i.value=r.substring(0,a.data(\"ds-range-start\"))+this.title+r.substring(a.data(\"ds-range-end\"),r.length),i.value=i.value.replace(z.leave_a_message,\"\"),i.focus();var n=t.selection.createRange();n.moveStart(\"character\",a.data(\"ds-range-start\")+this.title.length),n.collapse(),n.select()}else{var o=i.selectionStart+this.title.length;i.value=r.substring(0,i.selectionStart)+this.title+r.substring(i.selectionEnd),i.setSelectionRange(o,o)}e.hideSmilies(),i.focus()}var s=this,a=s.el=H(et.smiliesTooltip(L));return a.click(i).find(\"ul.ds-smilies-tabs\").delegate(\"a\",\"click\",function(){s.reset(this.innerHTML)}),a.find(\".ds-smilies-container\").delegate(\"img\",\"click\",e),this},reset:function(e){function t(t,s){var i=0===e.indexOf(\"微博\")?\"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/\"+s.replace(\"_org\",\"_thumb\"):S.STATIC_URL+\"/images/smilies/\"+s;\"WordPress\"===e&&(t=\" \"+t+\" \"),a+='<li><img src=\"'+i+'\" title=\"'+_(t)+'\"></li>'}var s=this.el.find(\"ul.ds-smilies-tabs\");s.find(\"a.ds-current\").removeClass(\"ds-current\"),s.find(\"a\").filter(function(){return this.innerHTML==e}).addClass(\"ds-current\");var a=\"<ul>\";return H.each(L[e],t),a+=\"</ul>\",this.el.find(\".ds-smilies-container\").html(a),this}},et.postPlaceholder=function(){return['<li class=\"ds-post ds-post-placeholder\">',z.no_comments_yet,\"</li>\"].join(\"\")};var X=H('<div id=\"ds-bubble\"><div class=\"ds-bubble-content\"></div><div class=\"ds-arrow ds-arrow-down ds-arrow-border\"></div><div class=\"ds-arrow ds-arrow-down\"></div></div>'),K=X.find(\".ds-bubble-content\").delegate(\"a.ds-ctx-open\",\"click\",function(){function e(e){function t(e,t){return et.ctxPost({post:e,index:t})}C.log(H.map(e.response,t).join(\"\\n\"));s.el.find(\"ol\");s.el.find(\"ol\").html(H.map(e.response,t).join(\"\\n\"))}var t={};t.post_id=K.attr(\"data-post-id\"),R.get(\"posts/conversation\",t,e);var s=E('<h2>查看对话</h2><ol id=\"ds-ctx\"></ol>');return s.el.find(\".ds-dialog\").css(\"width\",\"600px\"),s.el.find(\".ds-dialog-body\").css({\"max-height\":\"350px\",_height:\"350px\",\"overflow-y\":\"auto\",\"padding-top\":\"10px\"}),!1}),tt=bubbleOutTimer=0;X.mouseenter(N).mouseleave(I),st.PostList=function(e){e&&(e.params&&(this.params=e.params),e.embedThread&&(this.embedThread=e.embedThread)),this.el=H('<ul class=\"ds-comments\"></ul>')},st.PostList.prototype={url:\"threads/listPosts\",render:function(){return U.call(this.el,this.embedThread,this.embedThread.options),this},reset:function(e){var t=this.embedThread.options;this.el.html(e[0]?H.map(lt.getJSON(e),function(e){return et.post({post:e,options:t})}).join(\"\"):et.postPlaceholder())},refetch:function(){function e(e){lt.set(e.parentPosts||e.relatedPosts),ct.set(e.users),s.reset(e.response),s.embedThread.paginator.reset(e.cursor),s.el.fadeTo(200,1),S.scrollTo(s.el),a.remove()}var s=this,a=H(et.indicator()).appendTo(t.body).fadeIn(200);s.el.fadeTo(200,.5),R.get(s.url,s.params,e)}},st.RelatedRead=function(){this._init()},st.RelatedRead.prototype={_init:function(){this.el=H('<div id=\"ds-related-reads\"></div>')},load:function(s){e.__duoshuo_id__=s,e.readsByToutiao=[],e.readsByToutiao.push({id:\"ds-related-reads\",num:3});var a=\"//s0.pstatp.com/site/reads-sdk/5bf3702b38076207bee1.js\",i=t.createElement(\"script\");i.src=a,i.charset=\"utf-8\",i.crossOrigin=\"anonymous\",t.head.appendChild(i)},mount:function(e){this.el.insertBefore(e)}},st.EmbedThread=Q.extend({uri:\"threads/listPosts\",params:\"thread-id local-thread-id source-thread-id thread-key category channel-key author-key author-id url limit order max-depth form-position container-url\"+(v.match(/MSIE 6\\.0/)?\"\":\" title image thumbnail\"),render:function(){var e=this.el;if(\"请将此处替换成文章在你的站点中的ID\"===e.data(\"thread-key\"))return alert(\"请设置正确的 data-thread-key 属性\"),!1;e.attr(\"id\",\"ds-thread\").append(et.waitingImg());var t=e.width(),s=e.data(\"url\")||!e.attr(\"data-thread-id\")&&H(\"link[rel=canonical]\").attr(\"href\");s?e.data(\"url\",k(s)):e.data(\"container-url\",h.href),t&&400>=t&&e.addClass(\"ds-narrow\").data(\"max-depth\",1)},updateCounter:function(e){function t(e){return e.substr(e.indexOf(\"}\")+1)}var s={duoshuo:[\"comments\",t(z.comments_multiple)||\"评论\"],repost:[\"reposts\",t(z.reposts_multiple)||\"转载\"],weibo:[\"weibo_reposts\",t(z.weibo_reposts_multiple)||\"新浪微博\"],qqt:[\"qqt_reposts\",t(z.qqt_reposts_multiple)||\"腾讯微博\"]};for(var a in s)if(!e||e==a){var i=this.data[s[a][0]];this.el.find(\".ds-comments-tab-\"+a).html(this.el.hasClass(\"ds-narrow\")?'<span class=\"ds-service-icon ds-'+a+'\"></span>'+i:(i?'<span class=\"ds-highlight\">'+i+\"</span>\":\"0\")+s[a][1])}},onError:function(e){this.el.html(\"评论框出错啦(\"+e.code+\"): \"+e.errorMessage)},onload:function(t){var a=this,i=a.threadId=t.thread.thread_id,n=t.cursor,o=a.options=t.options,d=a.innerEl=p(H('<div id=\"ds-reset\"></div>').appendTo(a.el));a.model=new G(a.data=t.thread),lt.set(t.parentPosts||t.relatedPosts),ct.set(t.users),a.el.find(\"#ds-waiting\").remove(),t.options&&t.options.show_recommend&&(a.relatedRead=new st.RelatedRead,a.relatedRead.load(t.thread.site_id),a.relatedRead.mount(d)),o.like_thread_enabled&&(a.meta=new st.Meta(a),d.append(a.meta.render().el)),o.hot_posts&&t.hotPosts&&t.hotPosts.length&&(a.hotPosts=new st.HotPosts(H('<div class=\"ds-rounded\"></div>'),{max_depth:1,show_context:o.show_context}),a.hotPosts.thread=a,d.append(a.hotPosts.el),a.hotPosts.onload({list:lt.getJSON(t.hotPosts)})),a.postListHead=new st.PostListHead(a),a.postList=new st.PostList({embedThread:a,params:{source:\"duoshuo\",thread_id:i,max_depth:o.max_depth,order:o.order,limit:o.limit}}),a.postList.render().reset(t.response),a.paginator=new st.Paginator({collection:a.postList}),a.paginator.reset(n);var c=a.replybox=new st.Replybox(a);c.postList=a.postList.el,r()?a.loginButtons=H(et.loginButtons()).delegate(\"a.ds-more-services\",\"click\",function(){return a.loginButtons.find(\".ds-additional-services\").toggle(),!1}).delegate(\"a.ds-service-link\",\"click\",l):a.toolbar=H(et.toolbar()).delegate(\".ds-account-control\",\"mouseenter\",function(){H(this).addClass(\"ds-active\")}).delegate(\".ds-account-control\",\"mouseleave\",function(){H(this).removeClass(\"ds-active\")}).delegate(\"a.ds-bind-more\",\"click\",function(){var e=E(et[\"dialog-bind-more\"]()).el.find(\".ds-dialog\").addClass(\"ds-dialog-bind-more\").css(\"width\",\"300px\");return e.find(\"a.ds-service-link\").click(l),!1}).delegate(\"a.ds-unread-comments-count\",\"click\",function(){return T(\"unread-comments\"),!1});var u=['<a name=\"respond\"></a>',a.toolbar||a.loginButtons,c.render().el];\"top\"==o.formPosition&&H.fn.append.apply(d,u),d.append(a.postListHead.render().el,a.postList.el,a.paginator.el),\"bottom\"==o.formPosition&&H.fn.append.apply(d,u),d.append(et.poweredBy(o.poweredby_text)),a.updateCounter(),t.alerts&&H.each(t.alerts,function(e,t){H('<div class=\"ds-alert\">'+t+\"</div>\").insertBefore(a.toolbar||loginButtons)}),o.message&&c.el.find(\"textarea\").val(o.message).focus(),ot.on(\"reset\",function(){var e=ot.data.comments||0;d.find(\"a.ds-unread-comments-count\").html(e).attr(\"title\",e?\"你有\"+e+\"条新回复\":\"你没有新回复\").css(\"display\",e?\"inline\":\"none\")}),o.mzadx_id&&(S.require(\"mzadxN\",function(){}),H('<div id=\"MZADX_'+o.mzadx_id+'\" style=\"margin:0 auto;\"></div>').appendTo(d),__mz_rpq=e.__mz_rpq||[],__mz_rpq.push({l:[o.mzadx_id],r:\"1\",_srv:\"MZADX\",_callback:function(){}})),S.thread=a,ot.data!==s&&ot.trigger(\"reset\"),r()||A.send({visit_thread_id:a.threadId})},onMessage:function(e){M(this.postList.el,new F(e),this.options)}}),st.HotPosts=Q.extend({tmpl:\"hotPosts\",params:\"show-quote\",render:function(){return this.el.attr(\"id\",\"ds-hot-posts\"),this},onload:function(e){e.options=H.extend(this.options,e.options),Q.prototype.onload.call(this,e),U.call(this.el.find(\"ul\"),this.thread,this.options)}}),st.RecentComments=Q.extend({tmpl:\"commentList\",uri:\"sites/listRecentPosts\",params:\"show-avatars show-time show-title avatar-size show-admin excerpt-length num-items channel-key\",render:function(){this.el.attr(\"id\",\"ds-recent-comments\")},prepare:function(e){return{list:H.map(e.response,function(e){return new F(e).toJSON()})}}}),st.RecentVisitors=Q.extend({tmpl:\"recentVisitors\",uri:\"sites/listVisitors\",params:\"show-time avatar-size num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-recent-visitors\").append(this.waitingEl=H(et.waitingImg()))}}),st.TopThreads=Q.extend({tmpl:\"topThreads\",uri:\"sites/listTopThreads\",params:\"range num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-top-threads\").append(this.waitingEl=H(et.waitingImg()))}}),st.LoginWidget=Q.extend({tmpl:\"loginWidget\",render:function(){var e=this.el;e.attr(\"id\",\"ds-login\").html(et.loginWidget([\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"])),e.find(\"a\").click(l),e.find(\"a.ds-logout\").attr(\"href\",Z.logoutUrl())}}),st.ThreadCount=Q.extend({onload:function(e){var t=this.el,s=t.data(\"count-type\")||\"comments\",a=e.data[s];t[t.data(\"replace\")?\"replaceWith\":\"html\"](z[s+\"_\"+(a?a>1?\"multiple\":\"one\":\"zero\")].replace(\"{num}\",a))}}),st.ShareWidget=Q.extend({tmpl:\"shareWidget\",render:function(){var e={copyright:\"多说分享插件\",services:[\"weibo\",\"qzone\",\"sohu\",\"renren\",\"netease\",\"qqt\",\"kaixin\",\"douban\",\"qq\",\"meilishuo\",\"mogujie\",\"baidu\",\"taobao\",\"google\",\"wechat\",\"diandian\",\"huaban\",\"duitang\",\"youdao\",\"pengyou\",\"facebook\",\"twitter\",\"linkedin\",\"msn\"]};this.el.attr(\"id\",\"ds-share\"),this.el.children().attr(\"id\",\"ds-reset\"),this.el.find(\".ds-share-aside-inner\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").hide(),this.el.hasClass(\"flat\")&&this.el.find(\"a\").each(function(){H(this).addClass(\"flat\")}),p(this.el),this.delegateEvents()},delegateEvents:function(){var s=this,i=s.el;if(i.children().hasClass(\"ds-share-inline\")){var r=\".ds-share-icons-more\",n=i.find(r),d=\"[data-toggle=ds-share-icons-more]\";i.delegate(d,\"mouseover\",function(){n.show()}),i.delegate(d,\"mouseout\",function(){n.hide()}),i.delegate(r,\"mouseover\",function(){n.show()}),i.delegate(r,\"mouseout\",function(){n.hide()})}else{var l=i.children().hasClass(\"ds-share-aside-left\")?\"slide-to-right\":\"slide-to-left\",c=i.children();if(!o.cssProperty(\"transition\")){var u=i.children().hasClass(\"ds-share-aside-left\")?\"left\":\"right\";i.delegate(\".ds-share-aside-toggle\",\"mouseover\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)-195:e[u]=0,c.animate(e,200)}),i.delegate(\".ds-share-aside-inner\",\"mouseleave\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)+230:e[u]=-229,c.animate(e,200)})}i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseover\",function(){c.addClass(l)}),i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseleave\",function(){c.removeClass(l)})}i.delegate(\"a\",\"click\",function(t){var s=H(this).data(\"service\");if(!i.data(\"url\"))return void alert(\"请设置data-url\");if(\"wechat\"===s){var r=a()+\"/api/qrcode/getImage.png\",n=\"?size=240&text=\"+i.data(\"url\"),d=E(et[\"dialog-qrcode\"]({qrcode_url:r+n,url:i.data(\"url\")}));d.el.find(\".ds-dialog\").css(\"width\",\"320px\")}else{var l=a()+\"/share-proxy/?\"+o.param({service:H(this).data(\"service\"),thread_key:i.data(\"threadKey\"),title:i.data(\"title\"),images:i.data(\"images\"),content:i.data(\"content\"),url:i.data(\"url\")});e.open(l,\"_blank\")}t.preventDefault(),t.stopPropagation()})}});var it=0;S.initSelector=function(e,t){function s(e){W(e),o.extend(z,e.options),dt.set(e.response)}var a=[];!q()||!H.isReady&&j||H(e).each(function(e,s){var i=H(s);if(!i.data(\"initialized\")){i.data(\"initialized\",!0);var r=new st[t.type](i,t);if(at.push(r),\"ThreadCount\"===t.type){var n=i.attr(\"data-thread-key\");i.attr(\"data-channel-key\")&&(n=i.attr(\"data-channel-key\")+\":\"+n),a.push(n),dt[n]||(dt[n]=new G({})),dt[n].on(\"reset\",function(){r.onload(this)})}else if(r.uri){var o={};H.each(r.params.split(\" \"),function(e,t){o[t.replace(/-/g,\"_\")]=i.attr(\"data-\"+t)||i.data(t)}),R.get(r.uri,B(o),function(e){r.load(e)})}}}),a.length&&R.get(\"threads/counts\",B({threads:a.join(\",\")}),s)},(S.initView=function(){H.each(O,S.initSelector)})(),H(function(){if(!c){if(!q())return C.error(\"缺少 duoshuoQuery 的定义\");C.warn(\"请在加载多说 embed.js 之前定义 duoshuoQuery\")}setInterval(function(){H(\".ds-time\").each(function(){var e=H(this).attr(\"datetime\");e&&(this.innerHTML=S.elapsedTime(e))})},2e4),c.ondomready&&c.ondomready(),S.initView(),!it&&c.short_name&&R.get(\"analytics/ping\",B({}),W)})})}}(window,document);</e.pages;s++)t(s);s<e.pages&&i.push('<span></e.pages){for(s=a+1;a+4></200)&&(e[a]=s[a]);return></=1?h.postlist=e.postlist.el:(h.postlist=i.siblings(\".ds-children\"),h.postlist[0]||(h.postlist=h('<ul></s.pagelets.length;r++)a=s.pagelets[r],a.threadid==t.thread_id&&a.onmessage(t);break;case\"notification\":y.push(t),i()}},e.addeventlistener(\"beforeunload\",function(){n.close()})}a.websocket.onopen()}};s.domain=\"duoshuo.com\",s.static_url=g+\"></e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectscript(t(n),function(){s[n]=!0;for(var></arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var></i.length;r++)if(\"string\"==typeof></o.length;d++)if(a=\">","site":{"data":{}},"excerpt":"","more":"!function(e,t,s){function a(){return c.short_name?g+\"//\"+c.short_name+\".\"+S.DOMAIN:S.REMOTE}function i(){function t(){for(var t;t=y.shift();){var a=t.url,i=new s(t.title,{dir:\"auto\",icon:t.iconUrl,body:t.body});try{i.onclick=function(){e.focus(),h.href=a,i.close()}}catch(r){}setTimeout(function(){i.close&&i.close()},8e3)}}var s=e.Notification;\"Notification\"in e&&\"denied\"!==s.permission&&(\"granted\"===s.permission&&t(),s.requestPermission(function(e){\"granted\"===e&&t()}))}function r(){return 0==nt.data.user_id}function n(e){S.theme=e,\"none\"!=e&&o.injectStylesheet(S.STATIC_URL+\"/styles/embed\"+(e?\".\"+e+\".css?\"+M[e]:\".\"+short_name)+\".css\")}var o={},d=t.getElementsByTagName(\"head\")[0]||t.getElementsByTagName(\"body\")[0];if(o.extend=function(e,t){for(var s in t)e[s]=t[s];return e},o.injectScript=function(a,i){var r=t.createElement(\"script\"),n=t.head||t.getElementsByTagName(\"head\")[0]||t.documentElement;r.type=\"text/javascript\",r.src=a,r.async=\"async\",r.charset=\"utf-8\",i&&(r.onload=r.onreadystatechange=function(t,a){var o=a||!r.readyState||/loaded|complete/.test(r.readyState);o&&(r.onload=r.onreadystatechange=null,n&&r.parentNode&&n.removeChild(r),r=s,a||i.call(e))}),n.insertBefore(r,n.firstChild)},o.injectStylesheet=function(e){var s=t.createElement(\"link\");s.type=\"text/css\",s.rel=\"stylesheet\",s.href=e,d.appendChild(s)},o.injectStyle=function(e){var s=t.createElement(\"style\");return s.type=\"text/css\",d.appendChild(s),e=e.replace(/\\}/g,\"}\\n\"),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(t.createTextNode(e)),s},o.getCookie=function(e){for(var a,i,r,n=\" \"+e+\"=\",o=t.cookie.split(\";\"),d=0;d<o.length;d++)if(a=\" \"+o[d],i=\"a.indexOf(n),i\">=0&&i+n.length==(r=a.indexOf(\"=\")+1))return decodeURIComponent(a.substring(r,a.length).replace(/\\+/g,\"\"));return s},o.param=function(e){var t=[];for(var a in e)e[a]!=s&&t.push(a+\"=\"+encodeURIComponent(e[a]));return t.join(\"&\")},o.cssProperty=function(e,s){var a=(t.body||t.documentElement).style;if(\"undefined\"==typeof a)return!1;if(\"string\"==typeof a[e])return s?e:!0;for(var i=[\"Moz\",\"Webkit\",\"ms\"],e=e.charAt(0).toUpperCase()+e.substr(1),r=0;r<i.length;r++)if(\"string\"==typeof a[i[r]+e])return s?i[r]+e:!0},!e.duoshuo){for(var l in object.prototype)return alert(\"object.prototype 不为空，请不要给 object.prototype 设置方法\");var c,u,p=\"e.JSON,h=e.location,f=e.XMLHttpRequest,m=p&&p.stringify&&e.localStorage,v=e.navigator.userAgent,g=\"https:\"==t.location.protocol?\"https:\":\"http:\",b=0,y=[],_=u=function(){function\" e(e){return t[e]||\"&amp;\"}var t=\"{\"<\":\"&lt;\",\"\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\"},s=/&(?!\\w+;)|[<>\"'`]/g,a=/[&<>\"'`]/;return function(t){return null==t||t===!1?\"\":a.test(t)?t.replace(s,e):t}}(),k=function(e){if(e.match(/^(http|https):/))return e;var s=t.createElement(\"a\");return s.href=e,P.hrefNormalized?s.href:s.getAttribute(\"href\",4)},w=function(e){return function(){return e}},x=function(){for(var e={},t=0;t<arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var 10 28 s=\"o.param(e);return\" s?\"?\"+s:\"\"},t=\"function(){var\" e=\"o.getCookie(\"duoshuo_token\");return\" e?{jwt:e}:c.remote_auth?{short_name:c.short_name,remote_auth:c.remote_auth}:s},q=\"function(){if(!c&&(c=e.duoshuoQuery)){if(!c.short_name||\"your_duoshuo_short_name\"===c.short_name)return\" c=\"s,void\" alert(\"你还没有设置多说域名(duoshuoquery.short_name)，填入已有域名或创建新站点：http: duoshuo.com create-site \");it.trigger(\"querydefined\")}return c},c=\"function(e){return\" e&&e.error&&e.warn?e:{error:function(){},log:function(){},warn:function(){}}}(e.console),s=\"e.DUOSHUO={sourceName:{weibo:\"新浪微博\",qq:\"QQ\",qzone:\"QQ空间\",qqt:\"腾讯微博\",renren:\"人人网\",douban:\"豆瓣网\",kaixin:\"开心网\",sohu:\"搜狐微博\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},serviceNames:{weibo:\"微博\",qq:\"QQ\",douban:\"豆瓣\",renren:\"人人\",kaixin:\"开心\",baidu:\"百度\",google:\"谷歌\",wechat:\"微信\",weixin:\"微信\",facebook:\"Facebook\",twitter:\"Twitter\",linkedin:\"Linkedin\"},parseDate:function(e){return\" e.parse(\"2011-10-28t00:00:00+08:00\")&&function(t){return new e(t)}||e.parse(\"2011 28t00:00:00+0800\")&&function(t){return e(t.replace( - g,\" \").replace( :(\\d\\d)$ ,\"$1\"))}||e.parse(\"2011 00:00:00+0800\")&&function(t){return ,\"$1\").replace(\"t\",\" \"))}||function(t){return e(t)}}(date),fulltime:function(e){var t=\"S.parseDate(e);return\" t.getfullyear()+\"年\"+(t.getmonth()+1)+\"月\"+t.getdate()+\"日 \"+t.tolocaletimestring()},elapsedtime:function(e){var date,a=\"(s-b-t)/1e3;return\">a?\"刚刚\":60>a?Math.round(a)+\"秒前\":3600>a?Math.round(a/60)+\"分钟前\":86400>a?Math.round(a/3600)+\"小时前\":(s.getFullYear()==t.getFullYear()?\"\":t.getFullYear()+\"年\")+(t.getMonth()+1)+\"月\"+t.getDate()+\"日\"},compileStyle:function(e){var t=\"\",s={};if(s.textbox=\"#ds-thread #ds-reset .ds-replybox .ds-textarea-wrapper\",!e)return t;for(var a in e)t+=s[a]+\"{\"+e[a]+\"}\\n\";return t},init:function(e,t){e&&!O[e]&&(O[e]=t||{type:\"EmbedThread\"}),S.initView&&S.initView()}},j=t.all,P=S.support=function(){var s=t.createElement(\"div\");s.innerHTML='<a href=\"/a\" style=\"opacity:.55;\">a</a><input type=\"checkbox\">';var a=s.getElementsByTagName(\"a\")[0],i=s.getElementsByTagName(\"input\")[0],r={placeholder:\"placeholder\"in i,touch:\"ontouchstart\"in e||\"onmsgesturechange\"in e,opacity:/^0.55$/.test(a.style.opacity),hrefNormalized:\"/a\"===a.getAttribute(\"href\"),iOS:v.match(/ \\((iPad|iPhone|iPod);( U;)? CPU( iPhone)? OS /),android:v.match(/ \\(Linux; U; Android /)};return r.ie6=!f&&\"undefined\"==typeof s.style.maxHeight,r.authInWin=e.postMessage&&e.screen.width>800&&!r.iOS&&!r.android&&h.origin,r}(),O=S.selectors={\".ds-thread\":{type:\"EmbedThread\"},\".ds-recent-comments\":{type:\"RecentComments\"},\".ds-recent-visitors\":{type:\"RecentVisitors\"},\".ds-top-users\":{type:\"TopUsers\"},\".ds-top-threads\":{type:\"TopThreads\"},\".ds-login\":{type:\"LoginWidget\"},\".ds-thread-count\":{type:\"ThreadCount\"},\".ds-share\":{type:\"ShareWidget\"}},E=S.openDialog=function(e){return S.dialog!==s&&S.dialog.el.remove(),S.dialog=new st.Dialog(et.dialog(e)).open()},L=S.smilies={};S.require=function(){function t(e){var t=U[e]?\"?\"+U[e]+\".js\":\"\";return S.STATIC_URL+\"/libs/\"+e+\".js\"+t}var s={mzadxN:\"undefined\"!=typeof mzadxN};return\"undefined\"!=typeof jQuery&&jQuery.fn.jquery>=\"1.5\"&&(s[\"embed.compat\"]=!0,S.jQuery=e.jQuery),function(e,a){if(\"string\"==typeof e)s[e]?a():o.injectScript(t(e),function(){s[e]=!0,a()});else if(\"object\"==typeof e){var i,r=!0;for(i=0;i<e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectscript(t(n),function(){s[n]=!0;for(var t=\"0;t<e.length;t++)if(!s[e[t]])return;a()}))})(e[i]);r&&a()}}}();for(var\" n=\"0,I=[\"EmbedThread\",\"RecentComments\",\"RecentVisitors\",\"TopUsers\",\"TopThreads\",\"LoginWidget\",\"ThreadCount\"];N<I.length;N++)S[I[N]]=function(e){return\" function(t,s){s=\"s||{},s.type=e,t&&!O[t]&&(O[t]=s),S.initSelector&&S.initSelector(t,s)}}(I[N]),S[\"create\"+I[N]]=function(e){return\" function(s,a){var i=\"t.createElement(s);for(var\" r in a)i.setattribute(\"data-\"+r,a[r]);return s[e](i),i}}(i[n]);s.recentcommentswidget=\"S.RecentComments;var\" d(e){var date-new date(t))}function l(e,t,s){var a,i,o,l=\"t;if(e\">=200&&300>e||304===e)if(304===e)l=\"notmodified\",o=!0;else try{a=p.parse(s),l=\"success\",o=!0}catch(c){l=\"parsererror\",i=c}else{i=l,(!l||e)&&(l=\"error\",0>e&&(e=0));try{a=p.parse(s)}catch(c){l=\"parsererror\",i=c}}o?r&&r(a):\"parseerror\"===l?C.error(\"解析错误: \"+s):(C.error(\"出错啦(\"+a.code+\"): \"+a.errorMessage),n&&n(a),a.errorTrace&&C.error(a.errorTrace)),d(m)}var u=o.getCookie(\"duoshuo_token\");i=i||{},i.v=S.version,u?i.jwt=u:c.remote_auth&&(i.remote_auth=c.remote_auth);var h=f&&p&&p.parse;if(h){var m=new f,v=!!m&&\"withCredentials\"in m;if(v){var g;return m.open(e,a()+\"/api/\"+t+\".json\"+(\"GET\"==e?\"?\"+o.param(i):\"\"),!0),m.withCredentials=!0,m.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=UTF-8\"),m.send(\"GET\"==e?null:o.param(i)),g=function(e,t){var a,i,r,n;try{if(g&&(t||4===m.readyState))if(g=s,t)4!==m.readyState&&m.abort();else{a=m.status,r=m.getAllResponseHeaders();try{n=m.responseText}catch(e){}try{i=m.statusText}catch(o){i=\"\"}}}catch(d){t||l(-1,d)}n&&l(a,i,n,r)},void(4===m.readyState?g():m.onreadystatechange=g)}}\"GET\"!=e&&(i._method=\"POST\");var y=\"cb_\"+Math.round(1e6*Math.random());R[y]=function(e){switch(e.code){case 0:r&&r(e);break;default:n&&n(e),C.error(\"出错啦(\"+e.code+\"): \"+e.errorMessage),e.errorTrace&&C.error(e.errorTrace)}},i.callback=\"DUOSHUO.API['\"+y+\"']\",o.injectScript(a()+\"/api/\"+t+\".jsonp?\"+o.param(i))},get:function(e,t,s,a){return this.ajax(\"GET\",e,t,s,a)},post:function(e,t,s,a){return this.ajax(\"POST\",e,t,s,a)}},A=S.ws={messages:[],send:function(s){if(!(\"WebSocket\"in e&&p))return!1;var a=this;if(a.messages.push(p.stringify(s)),!a.webSocket){var r=\"https:\"===t.location.protocol?\"wss://ws.duoshuo.com:8202/\":\"ws://ws.duoshuo.com:8201/\",n=a.webSocket=new WebSocket(r);n.onopen=function(){var e,t=1===n.readyState;if(t)for(;e=a.messages.shift();)n.send(e)},n.onmessage=function(e){try{var t=p.parse(e.data)}catch(s){return}switch(t.type){case\"post\":for(var a,r=0;r<s.pagelets.length;r++)a=s.pagelets[r],a.threadid==t.thread_id&&a.onmessage(t);break;case\"notification\":y.push(t),i()}},e.addeventlistener(\"beforeunload\",function(){n.close()})}a.websocket.onopen()}};s.domain=\"duoshuo.com\",s.static_url=g+\" static.duoshuo.com\",s.remote=\"g+\"//duoshuo.com\",S.version=\"16.6.16\";var\" m=\"{\"default\":\"9b2a46a0\",dark:\"33f3a5ac\",bluebox:\"39a75d50\",newhua:\"706ba4eb\",justflat:\"9d72ec5a\"},U={\"embed.compat\":\"24f8ca3f\",smilies:\"921e8eda\"},z={post:\"发布\",posting:\"正在发布\",settings:\"设置\",reply:\"回复\",like:\"顶\",repost:\"转发\",report:\"举报\",\"delete\":\"删除\",reply_to:\"回复\" \",reposts:\"转发\",comments:\"评论\",floor:\"楼\",latest:\"最新\",earliest:\"最早\",hottest:\"最热\",share_to:\"分享到:\",leave_a_message:\"说点什么吧…\",no_comments_yet:\"还没有评论，沙发等你来抢\",repost_reason:\"请输入转发理由\",hot_posts_title:\"被顶起来的评论\",comments_zero:\"暂无评论\",comments_one:\"1条评论\",comments_multiple:\"{num}条评论\",reposts_zero:\"暂无转发\",reposts_one:\"1条转发\",reposts_multiple:\"{num}条转发\",weibo_reposts_zero:\"暂无新浪微博\",weibo_reposts_one:\"1条新浪微博\",weibo_reposts_multiple:\"{num}条新浪微博\",qqt_reposts_zero:\"暂无腾讯微博\",qqt_reposts_one:\"1条腾讯微博\",qqt_reposts_multiple:\"{num}条腾讯微博\"},d=\"{get:function(e){return\" m?m[e]:void 0},save:function(e,t){if(m)try{m.removeitem(e),m[e]=\"p.stringify(t),m.removeItem(e+\":timestamp\"),m[e+\":timestamp\"]=Math.floor((new\" date-b) 1e3)}catch(s){}}},w=\"S.loadRequire=function(t){if(t.visitor&&(!nt.data&&t.visitor.user_id&&e.Notification&&A.send({logged_user_id:t.visitor.user_id}),nt.reset(t.visitor)),t.site&&(rt.reset(t.site),D.save(\"ds_site_\"+c.short_name,t.site)),!S.theme&&rt.data.theme&&n(rt.data.theme),t.lang&&(o.extend(z,t.lang),D.save(\"ds_lang_\"+c.short_name,t.lang)),t.stylesheets)for(var\" s=\"0;s<t.stylesheets.length;s++)o.injectStylesheet(t.stylesheets[s]);if(t.nonce&&(S.nonce=t.nonce),t.style&&o.injectStyle((t.style||\"\")+S.compileStyle(c.component_style)),t.unread&&ot.reset(t.unread),t.warnings)for(var\" t(){!b&&this.init&&this.init.apply(this,arguments)}b=\"1;var\" this;b=\"0;for(var\" a in e)s[a]=\"e[a];return\" t.prototype=\"s,t.prototype.constructor=t,t.extend=arguments.callee,t};var\" j=\"S.Event=H.extend({on:function(e,t){var\" a[e]=\"==s&&(a[e]=[]),a[e].push(t),this},trigger:function(e,t){var\" this}}),q=\"S.Widget=J.extend({init:function(e,t){this.el=e,this.options=t||{},this.render()},render:function(){},reset:function(){},load:function(e){switch(e.code){case\" 0:w(e);var t=\"this.prepare(e);t.options=o.extend(this.options,e.options),this.onload(t);break;default:this.onError(e)}},onload:function(e){this.el.html(et[this.tmpl](e))},prepare:function(e){return\" e},onmessage:function(){},onerror:function(e){c.error(\"出错啦(\"+e.code+\"): \"+e.errormessage),e.errortrace&&c.error(e.errortrace)}}),v=\"S.Model=J.extend({init:function(e){this.data=e},reset:function(e){this.data=e,this.trigger(\"reset\")},remove:function(e){this.data.splice(e,1),this.trigger(\"reset\")},set:function(e,t){if(t===s)for(var\" e)this.data[a]=\"e[a];else\" this.data[e]=\"t;return\" this.trigger(\"reset\"),this},tojson:function(){return o.extend({},this.data)}}),$=\"V.extend({toJSON:function(){return\" o.extend({},this.data)}}),f=\"V.extend({toJSON:function(){var\" e=\"o.extend({},this.data);return\" e.theauthor=\"ct[this.data.author_id]&&ct[this.data.author_id].data||this.data.author,e.parents=this.data.parents||[],e}}),G=V.extend({toJSON:function(){return\" o.extend({},this.data)}}),y=\"function(e){this.model=e};Y.prototype.set=function(e){for(var\" e)e[t]&&(this[t]?this[t].set(e[t]):this[t]=\"new\" this.model(e[t]))},y.prototype.get=\"function(e){for(var\" s},y.prototype.getjson=\"function(e){for(var\" s};var z=\"{userUrl:function(e){return\" e.url},avatarurl:function(e){return e.avatar_url||rt.data.default_avatar_url},loginurl:function(e,t){return t||(t=\"{}),c.sso&&c.sso.login&&(t.sso=1,t.redirect_uri=c.sso.login),a()+\"/login/\"+e+\"/\"+x(t)},bindUrl:function(e){return\" a()+\" bind \"+e+\" \"+x(c.sso&&c.sso.login?{sso:1,redirect_uri:c.sso.login}:null,t())},logouturl:function(){return logout \"+x(c.sso&&c.sso.logout?{sso:1,redirect_uri:c.sso.logout}:null)}},x=\"[\"weixin\",\"weibo\",\"qq\",\"renren\"],K=[\"douban\",\"kaixin\",\"baidu\",\"google\"],et=S.templates={userAnchor:function(e){return\" e.url?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(e.url)+'\">'+_(e.name)+\"\":_(e.name)},avatarImg:function(e,t){return'<img src=\"'+_(Z.avatarUrl(e,t))+'\" alt=\"'+_(e.name)+'\" '+(t?' style=\"width:'+t+\" px;height:\"+t+'px\"':\"\")+\">\"},avatar:function(e,t){var s=et.avatarImg(e,t),i=Z.userUrl(e);return i?'<a rel=\"nofollow author\" target=\"_blank\" href=\"'+_(i)+'\" '+(e.user_id?\" onclick=\"\\\"this.href='\"+a()+\"/user-url/?user_id=\"+e.user_id+\"';\\\"\":\"\")+'\" title=\"'+_(e.name)+'\">'+s+\"</a>\":s},timeText:function(e){return e?'<span class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</span>\":\"\"},timeAnchor:function(e,t){return e?'<a href=\"'+t+'\" target=\"_blank\" rel=\"nofollow\" class=\"ds-time\" datetime=\"'+e+'\" title=\"'+S.fullTime(e)+'\">'+S.elapsedTime(e)+\"</a>\":\"\"},serviceIcon:function(e,t){return'<a href=\"javascript:void(0)\" class=\"ds-service-icon'+(t?\" -grey\":\"\")+\" ds-\"+e+'\" data-service=\"'+e+'\" title=\"'+S.sourceName[e]+'\" target=\"_blank\" rel=\"noopener\"></a>'},poweredBy:function(e){return'<p class=\"ds-powered-by\"><a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"nofollow\">'+_(e)+\"</a></p>\"},indicator:w('<div id=\"ds-indicator\"></div>'),waitingImg:w('<div id=\"ds-waiting\"></div>'),loginItem:function(e,t){var s=Z[t?\"bindUrl\":\"loginUrl\"](e);return'<li>    <a href=\"'+s+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+e+'\">'+S.serviceNames[e]+(nt.data.social_uid[e]?' <span class=\"ds-icon ds-icon-ok\"></span>':\"\")+\"</a></li>\"}},tt=function(e){var t=[];for(var s in e)t.push('<input type=\"hidden\" name=\"'+s+'\" value=\"'+_(e[s])+'\">');return t.join(\"\\n\")};et.commentList=function(e){var t=\"\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li class=\"ds-comment',e.options.show_avatars&&(t+=\" ds-show-avatars\"),t+=\"\" data-post-id=\"\" +a.post_id+'\">',e.options.show_avatars&&(t+='<div class=\"ds-avatar\">'+et.avatar(a.theAuthor,e.options.avatar_size)+\"</div>\"),t+='<div class=\"ds-meta\">'+et.userAnchor(a.theAuthor),e.options.show_time&&(t+=et.timeText(a.created_at)),t+=\"</div>\",t+=e.options.show_title?'<div class=\"ds-thread-title\">在 <a href=\"'+u(a.thread.url)+'#comments\">'+u(a.thread.title)+'</a> 中评论</div><div class=\"ds-excerpt\">'+a.message+\"</div>\":'<a class=\"ds-excerpt\" title=\"'+a.thread.title+' 中的评论\" href=\"'+u(a.thread.url)+'#comments\">'+a.message+\"</a>\",t+=\"</li>\";return t},et.ctxPost=function(e){var t=\"\";return e.post&&(t+='<li class=\"ds-ctx-entry\" ',e.hidden&&(t+=\" style=\"display:none\"\" ),t+=\" data-post-id=\"\" +e.post.post_id+'\"><div class=\"ds-avatar\">'+et.avatar(e.post.theAuthor||e.post.author)+'</div><div class=\"ds-ctx-body\"><div class=\"ds-ctx-head\">'+et.userAnchor(e.post.theAuthor||e.post.author)+et.timeAnchor(e.post.created_at,e.post.url),e.index>=0&&(t+='<div class=\"ds-ctx-nth\" title=\"'+S.fullTime(e.post.created_at)+'\">'+(e.index+1)+z.floor+\"</div>\"),t+='</div><div class=\"ds-ctx-content\">'+e.post.message,e.index>=0&&(t+='　　　　　　　<div class=\"ds-comment-actions',e.post.vote>0&&(t+=\" ds-post-liked\"),t+=\"\">\" +et.likepost(e.post)+'<a href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'<a class=\"ds-post-reply\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"</a></div>\"),t+=\"</div></div></li>\"),t},et[\"dialog-anonymous\"]=function(e){var t='<h2>社交帐号登录</h2><div class=\"ds-icons-32\">',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\",e.options.deny_anonymous||(t+='<h2>作为游客留言</h2><form><div class=\"ds-control-group\"><input type=\"text\" name=\"author_name\" id=\"ds-dialog-name\" value=\"'+u(nt.data.name)+'\" required><label for=\"ds-dialog-name\">名字(必填)</label></div>',e.options.require_guest_email&&(t+='<div class=\"ds-control-group\"><input type=\"email\" name=\"author_email\" id=\"ds-dialog-email\" value=\"'+u(nt.data.email)+'\" required><label for=\"ds-dialog-email\">邮箱(必填)</label></div>'),e.options.require_guest_url&&(t+='<div class=\"ds-control-group\"><input type=\"url\" name=\"author_url\" id=\"ds-dialog-url\" placeholder=\"http://\" value=\"'+u(nt.data.url)+'\"><label for=\"ds-dialog-url\">网址(可选)</label></div>'),t+='<button type=\"submit\">发布</button></form>'),t},et[\"dialog-ask-for-auth\"]=function(){var e='<h2>社交帐号登录</h2><ul class=\"ds-service-list\">'+et.serviceList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul>\";return e},et[\"dialog-bind-more\"]=function(){var e='<h2>绑定更多帐号</h2><ul class=\"ds-service-list\">'+et.serviceBindList(X)+'</ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceBindList(K)+'</ul><div style=\"clear:both\"></div>';return e},et[\"dialog-qrcode\"]=function(e){var t='<h2>微信扫一扫，分享到朋友圈</h2><div class=\"ds-share-qrcode\" style=\"text-align:center;\"><img src=\"'+e.qrcode_url+'\" alt=\"'+e.url+'\"></div>';return t},et[\"dialog-reposts\"]=function(e){var t='<h2>转发到微博</h2><div class=\"ds-quote\"><strong>@'+u(e.post.theAuthor.name)+\"</strong>: \"+e.post.message+\"</div><form>\"+tt({post_id:e.post.post_id})+'<div class=\"ds-textarea-wrapper\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.repost_reason)+'\">'+u(e.repostMessage)+'</textarea><pre class=\"ds-hidden-text\"></pre>';return t+='</div><div class=\"ds-actions\">',e.service?t+=tt({\"service[]\":e.service}):(t+='<label><input type=\"checkbox\" name=\"service[]\" value=\"weibo\" ',nt.data.social_uid.weibo&&(t+=\" checked=\"checked\"\" ),t+=\" /><span class=\"ds-service-icon ds-weibo\"></span>新浪微博</label><label><input type=\"checkbox\" name=\"service[]\" value=\"qqt\"\" ,nt.data.social_uid.qq&&(t+=\" checked=\"checked\"\" +z.repost+\"< button></label></div></form>\"},et.dialog=function(e){var t='<div class=\"ds-dialog\"><div class=\"ds-dialog-inner ds-rounded\"><div class=\"ds-dialog-body\">'+e+'</div><div class=\"ds-dialog-footer\"><a href=\"http://duoshuo.com/\" target=\"_blank\" class=\"ds-logo\"></a><span>社会化评论框</span></div><a class=\"ds-dialog-close\" href=\"javascript:void(0)\" title=\"关闭\" target=\"_blank\" rel=\"noopener\"></a></div></div>';return t},et.hotPosts=function(e){var t='<div class=\"ds-header ds-gradient-bg\">'+u(z.hot_posts_title)+\"</div><ul>\",s=e.list;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=et.post({post:a,options:e.options});return t+=\"</ul>\"},et.likePost=function(e){var t='<a class=\"ds-post-likes\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-like\"></span>'+z.like;return e.likes>0&&(t+=\"(\"+e.likes+\")\"),t+=\"</a>\"},et.likeTooltip=function(e){var t='<div class=\"ds-like-tooltip ds-rounded\"><p>很高兴你能喜欢，分享一下吧：</p><ul>';for(var s in e.services)t+='<li><a class=\"ds-share-to-'+s+\" ds-service-link ds-\"+s+'\" href=\"'+a()+\" share-proxy ?\"+o.param({service:s,thread_id:e.thread_id})+'\">'+e.services[s]+\"</a></li>\";return t+='</ul><p class=\"ds-like-tooltip-footer\"><a class=\"ds-like-tooltip-close\">算了</a></p></div>'},et.loginButtons=function(){var e='<div class=\"ds-login-buttons\"><p>社交帐号登录:</p><div class=\"ds-social-links\"><ul class=\"ds-service-list\">'+et.serviceList(X)+'<li><a class=\"ds-more-services\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">更多»</a></li></ul><ul class=\"ds-service-list ds-additional-services\">'+et.serviceList(K)+\"</ul></div></div>\";return e},et.loginWidget=function(e){var t='<div class=\"ds-icons-32\">',s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<a class=\"ds-'+a+'\" href=\"'+Z.loginUrl(a)+'\">'+S.sourceName[a]+\"</a>\";return t+=\"</div>\"},et.meta=function(e){var t='<div class=\"ds-meta\"><a href=\"javascript:void(0)\" class=\"ds-like-thread-button ds-rounded';return e.user_vote>0&&(t+=\" ds-thread-liked\"),t+=\"\"><span class=\"ds-icon ds-icon-heart\"></span> <span class=\"ds-thread-like-text\">\" ,t+=\"e.user_vote\" target=\"_blank\" rel=\"noopener\">0?\"已喜欢\":\"喜欢\",t+='<span class=\"ds-thread-cancel-like\">取消喜欢</span></a><span class=\"ds-like-panel\"></span></div>'},et.notify=function(e){var t='<div id=\"ds-reset\"><a class=\"ds-logo\" href=\"http://duoshuo.com/\" target=\"_blank\" title=\"多说\"></a><ul class=\"ds-notify-unread\"><li';return e.comments||(t+=\" style=\"display:none;\"\" ),t+=\"><a data-type=\"unread-comments\" href=\"javascript:void(0);\">你有\" +e.comments+\"条新回复< a><li\",e.notifications||(t+=' style=\"display:none;\" '),t+=\"><a data-type=\"unread-notifications\" href=\"javascript:void(0);\">你有\" +e.notifications+\"条系统消息< a></li\",e.notifications||(t+='></li';return></ul></div>\"},et.post=function(e){var t=\"\",s=e.post,i=e.options,r=s.author;if(t+='<li class=\"ds-post\" data-post-id=\"'+s.post_id+'\"><div class=\"ds-post-self\" data-post-id=\"'+s.post_id+'\" data-thread-id=\"'+s.thread_id+'\" data-root-id=\"'+s.root_id+'\" data-source=\"'+s.source+'\"><div class=\"ds-avatar\" ',r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\">\" +et.avatar(r),s.sourcename[s.source]&&(t+=\"et.serviceIcon(s.source)),t+='</div\"><div class=\"ds-comment-body\"><div class=\"ds-comment-header\">',r.url?(t+='<a class=\"ds-user-name ds-highlight\" data-qqt-account=\"'+(r.qqt_account||\" \")+'\" href=\"'+u(r.url)+'\" ',r.user_id&&(t+=\" onclick=\\\" this.href=\"\"+a()+\"/user-url/?user_id=\"+r.user_id+\"\" ;\\\"\"),t+=\" rel=\"nofollow\" target=\"_blank\"\" ,r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\">\" +u(r.name)+\"< a>\"):(t+='<span class=\"ds-user-name\" ',r.user_id&&(t+=\" data-user-id=\"\" +r.user_id+'\"'),t+=\" data-qqt-account=\"\" +(r.qqt_account||\"\")+'\">'+u(r.name)+\"</span>\"),t+=\"</a></div>\",1==i.max_depth&&i.show_context&&s.parents.length){t+='<ol id=\"ds-ctx\">';var n=lt.getJSON(s.parents);if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],1==d&&s.parents.length>2&&(t+='<li class=\"ds-ctx-entry\"><a href=\"javascript:void(0);\" class=\"ds-expand\" target=\"_blank\" rel=\"noopener\">还有'+(s.parents.length-2)+\"条评论</a></li>\"),t+=et.ctxPost({post:o,index:d,hidden:d&&d<s.parents.length-1});t+=\"< ol>\"}if(t+=\"<p>\",s.parents.length>=i.max_depth&&(!i.show_context||i.max_depth>1)&&s.parent_id&&lt[s.parent_id]&&(t+='<a class=\"ds-comment-context\" data-post-id=\"'+s.post_id+'\" data-parent-id=\"'+s.parent_id+'\">'+z.reply_to+u(lt[s.parent_id].toJSON().author.name)+\": </a>\"),t+=s.message+'</p><div class=\"ds-comment-footer ds-comment-actions',s.vote>0&&(t+=\" ds-post-liked\"),t+=\"\">\" ,t+=\"s.url?et.timeAnchor(s.created_at,s.url):et.timeText(s.created_at),\"duoshuo\"==s.source?(t+='<a\" href=\"javascript:void(0);\"><span class=\"ds-icon ds-icon-reply\"></span>'+z.reply+\"\"+et.likePost(s)+'<a class=\"ds-post-repost\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-share\"></span>'+z.repost+'</a><a class=\"ds-post-report\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-report\"></span>'+z.report+\"</a>\",s.privileges[\"delete\"]&&(t+='<a class=\"ds-post-delete\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"><span class=\"ds-icon ds-icon-delete\"></span>'+z[\"delete\"]+\"</a>\")):(\"qqt\"==s.source||\"weibo\"==s.source)&&(t+='<a class=\"ds-weibo-comments\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+z.comments,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.comments+\"</span>)\"),t+='</a><a class=\"ds-weibo-reposts\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+z.reposts,s.type.match(/\\-comment$/)||(t+='(<span class=\"ds-count\">'+s.reposts+\"</span>)\"),t+=\"</a>\"),t+=\"</div></s.parents.length-1});t+=\"<></ol></div></div>\",i.max_depth>1&&(s.childrenArray||s.children)&&\"weibo\"!=s.source&&\"qqt\"!=s.source){t+='<ul class=\"ds-children\">';var c=lt.getJSON(s.childrenArray||s.children);if(c)for(var s,d=-1,p=c.length-1;p>d;)s=c[d+=1],t+=et.post({post:s,options:i});t+=\"</ul>\"}return t+=\"</div></li>\"},et.postListHead=function(e){var t='<div class=\"ds-comments-info\"><div class=\"ds-sort\"><a class=\"ds-order-desc\">'+z.latest+'</a><a class=\"ds-order-asc\">'+z.earliest+'</a><a class=\"ds-order-hot\">'+z.hottest+'</a></div><ul class=\"ds-comments-tabs\"><li class=\"ds-tab\"><a class=\"ds-comments-tab-duoshuo ds-current\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>';return e.options.show_reposts&&e.thread.reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-repost\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\" \",e.options.show_weibo&&e.thread.weibo_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-weibo\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\" \",e.options.show_qqt&&e.thread.qqt_reposts&&(t+='<li class=\"ds-tab\"><a class=\"ds-comments-tab-qqt\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\"></a></li>'),t+=\"</ul></div>\"},et.recentVisitors=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"</div>\";return t},et[\"related-read\"]=function(e){var t=\"\";if(e&&e.length){t+='<article class=\"ds-reads-expand\"><div class=\"ds-header\">头条推荐</div><section> ';var s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;){if(a=s[i+=1],t+=' <a href=\"'+a.url+'\" class=\"ds-reads-item\"> ',3==a.imgs.length){t+=\" <h2>\"+a.title+'</h2> <div class=\"ds-reads-pics\"> <ul> ';var n=a.imgs;if(n)for(var o,d=-1,l=n.length-1;l>d;)o=n[d+=1],t+=' <li> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+o+');\"></div> </li> ';t+=' </ul> </div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> '}else t+=' <div class=\"ds-reads-desc ',a.imgs.length||(t+=\" ds-reads-only\"),t+=\"\"> <div class=\"ds-reads-title\">\" +a.title+'< div> <div class=\"ds-reads-info\"> ',1==a.type&&(t+=' <span class=\"ds-reads-app-special\">打开头条阅读</span> '),t+=' <span class=\"ds-reads-date\" data-date=\"'+a.timeStamp+'\"></span> </div> </div> ',a.imgs.length&&(t+=' <div class=\"ds-reads-pic-right\"> <div class=\"ds-reads-dumb\"></div> <div class=\"ds-reads-pic-wrap\" style=\"background-image:url('+a.imgs[0]+');\"> ',a.hasVideo&&(t+=' <div class=\"ds-reads-vid-info\"><span>'+a.videoDuration+\"</span></div> \"),t+=\" </div> </div> \"),t+=\" \";t+=\" </a> \"}t+=\"</section></article>\"}return t},et.replybox=function(e){var t='<div class=\"ds-replybox\"><a class=\"ds-avatar\" ';if(t+=\"r()?'\" href=\"javascript:void(0);\" onclick=\"return false\" ':' settings avatar \"+x(t())+'\" target=\"_blank\" title=\"设置头像\" ',t+=\">\" +et.avatarimg(nt.data)+'< a><form method=\"post\">'+tt(e.params)+'<div class=\"ds-textarea-wrapper ds-rounded-top\"><textarea name=\"message\" title=\"Ctrl+Enter快捷提交\" placeholder=\"'+u(z.leave_a_message)+'\"></textarea><pre class=\"ds-hidden-text\"></pre>',t+=\"</div>\",t+='<div class=\"ds-post-toolbar\"><div class=\"ds-post-options ds-gradient-bg\"><span class=\"ds-sync\">',!r()&&nt.data.repostOptions){t+='<input id=\"ds-sync-checkbox',e.inline&&(t+=\" -inline\"),t+=\"\" type=\"checkbox\" name=\"repost\" \" ,e.checked&&(t+=\"checked=\"checked\" \" ),t+=\"value=\"\" +e.repostarray.join(\",\")+'\"> <label for=\"ds-sync-checkbox',e.inline&&(t+=\" -inline\"),t+=\"\">\" +z.share_to+\"< label>\";for(var s in nt.data.repostOptions)t+=et.serviceIcon(s,!nt.data.repostOptions[s])}return t+=\"</label></span>\",t+=\"</div>\",t+='<button class=\"ds-post-button\" type=\"submit\">'+u(z.post)+'</button><div class=\"ds-toolbar-buttons\">',e.options.use_smilies&&(t+='<a class=\"ds-toolbar-button ds-add-emote\" title=\"插入表情\"></a>'),e.options.use_images&&e.options.parse_html_enabled&&(t+='<a class=\"ds-toolbar-button ds-add-image\" title=\"插入图片\"></a>'),t+=\"</div></div>\",t+=\"</form></a></div>\"},et.serviceBindList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.bindUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a],nt.data.social_uid[a]&&(t+=' <span class=\"ds-icon ds-icon-ok\"></span>'),t+=\"</a></li>\";return t},et.serviceList=function(e){var t=\"\",s=e;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a href=\"'+Z.loginUrl(a)+'\" rel=\"nofollow\" class=\"ds-service-link ds-'+a+'\">'+S.serviceNames[a]+\"</a></li>\";return t},et.shareWidget=function(e){var t='<div class=\"ds-share-icons\"> <div class=\"ds-share-icons-inner\"> <ul class=\"ds-share-icons-16\"> ',s=e.services;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+=' <li> <a class=\"ds-'+a+'\" href=\"javascript:void(0);\" data-service=\"'+a+'\" target=\"_blank\" rel=\"noopener\">'+S.sourceName[a]+\"</a> </li> \";return t+=' </ul> </div> <div class=\"ds-share-icons-footer\">'+e.copyright+\"</div></div>\"},et.smiliesTooltip=function(e){var t='<div id=\"ds-smilies-tooltip\"><ul class=\"ds-smilies-tabs\">';for(var s in e)t+=\"<li><a>\"+s+\"</a></li>\";return t+='</ul><div class=\"ds-smilies-container\"></div></div>'},et.toolbar=function(){var e='<div class=\"ds-toolbar\"><div class=\"ds-account-control\"><span class=\"ds-icon ds-icon-settings\"></span> <span>帐号管理</span><ul><li><a class=\"ds-bind-more\" href=\"javascript:void(0);\" style=\"border-top: none\" target=\"_blank\" rel=\"noopener\">绑定更多</a></li><li><a target=\"_blank\" href=\"'+S.REMOTE+\" settings \"+x(t())+'\">'+u(z.settings)+'</a></li><li><a rel=\"nofollow\" href=\"'+Z.logoutUrl()+'\" style=\"border-bottom: none\">登出</a></li></ul></div><div class=\"ds-visitor\">';return e+=nt.data.url?'<a class=\"ds-visitor-name\" href=\"'+u(nt.data.url)+'\" target=\"_blank\">'+u(nt.data.name)+\"</a>\":'<span class=\"ds-visitor-name\">'+u(nt.data.name)+\"</span>\",e+='<a class=\"ds-unread-comments-count\" href=\"javascript:void(0);\" title=\"新回复\" target=\"_blank\" rel=\"noopener\"></a></div></div>'},et.topThreads=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<li><a target=\"_blank\" href=\"'+u(a.url)+'\" title=\"'+u(a.title)+'\">'+u(a.title)+\"</a></li>\";return t},et.topUsers=function(e){var t=\"\",s=e.response;if(s)for(var a,i=-1,r=s.length-1;r>i;)a=s[i+=1],t+='<div class=\"ds-avatar\">'+et.avatar(a,e.options.avatar_size)+\"<h4>\"+u(a.name)+\"</h4></div>\";return t},et.userInfo=function(e){var t='<a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\" user-url ?user_id=\"+e.user_id+'\\';\" class=\"ds-avatar\" target=\"_blank\">'+et.avatarImg(e)+'</a><a href=\"'+u(e.url)+'\" onclick=\"this.href=\\''+a()+\" user-url ?user_id=\"+e.user_id+'\\';\" class=\"ds-user-name ds-highlight\" target=\"_blank\">'+u(e.name)+\"</a>\";for(var s in e.social_uid)t+='<a href=\"'+S.REMOTE+\" user-proxy \"+s+\" \"+e.social_uid[s]+' \" target=\"_blank\" class=\"ds-service-icon ds-'+s+'\" title=\"'+S.sourceName[s]+'\"></a>';return t+='<p class=\"ds-user-card-meta\"><a href=\"'+S.REMOTE+\" profile \"+e.user_id+' \" target=\"_blank\"><span class=\"ds-highlight\">'+e.comments+\"</span>条评论</a></p>\",e.description&&(t+='<p class=\"ds-user-description\">'+u(e.description)+\"</p>\"),t};var st=S.Views={},at=(S.Callbacks={},S.pagelets=[]),it=S.events=new J,rt=S.site=new V,nt=S.visitor=new $,ot=S.unread=new V,dt=S.threadPool=new Y(G),lt=S.postPool=new Y(F),ct=S.userPool=new Y($);it.on(\"queryDefined\",function(){var e=c.short_name;if(c.theme&&n(c.theme),m){var t=m[\"ds_site_\"+e],s=m[\"ds_lang_\"+e];t&&rt.reset(p.parse(t)),s&&o.extend(z,p.parse(s))}}),q(),S.require(\"embed.compat\",function(){function i(e){e.stopPropagation()}function n(e){(e.ctrlKey&&13==e.which||10==e.which)&&H(this.form).trigger(\"submit\")}function d(){var e=H(this);e.height(Math.max(54,e.next(\".ds-hidden-text\").text(this.value).height()+27))}function l(){if(P.authInWin){var e=this.href.match(/\\/(login|bind)\\/(\\w+)\\//i);if(e&&S.serviceNames[e[2]])return!b(e[2],this.href)\n}}function u(){var e,s,a,i,r,n=this,o=0,d=0;t.selection&&(s=t.selection.createRange(),s&&s.parentElement()==n&&(i=n.value.length,e=n.value.replace(/\\r\\n/g,\"\\n\"),a=n.createTextRange(),a.moveToBookmark(s.getBookmark()),r=n.createTextRange(),r.collapse(!1),a.compareEndPoints(\"StartToEnd\",r)>-1?o=d=i:(o=-a.moveStart(\"character\",-i),o+=e.slice(0,o).split(\"\\n\").length-1,a.compareEndPoints(\"EndToEnd\",r)>-1?d=i:(d=-a.moveEnd(\"character\",-i),d+=e.slice(0,d).split(\"\\n\").length-1)))),H(n).data(\"ds-range-start\",o).data(\"ds-range-end\",d)}function p(e){return P.touch&&e.addClass(\"ds-touch\"),o.cssProperty(\"transition\")||e.addClass(\"ds-no-transition\"),P.ie6&&e.addClass(\"ds-ie6\"),P.opacity||e.addClass(\"ds-no-opacity\"),e}function f(e){if(!P.placeholder){var t=e.attr(\"placeholder\");e.val(t).focus(function(){this.value===t&&(this.value=\"\")}).blur(function(){\"\"===this.value&&(this.value=t)})}return e}function g(e){if(\"http://duoshuo.com\"===e.origin)switch(e.data.type){case\"login\":h.href=e.data.redirectUrl}}function b(t,s){var a={weibo:[760,600],renren:[420,322],qq:[504,445],weixin:[450,550],google:[600,440]}[t]||[550,400];return e.open(s+(-1==s.indexOf(\"?\")?\"?\":\"&\")+o.param({origin:h.origin||\"http://\"+h.host}),\"_blank\",\"width=\"+a[0]+\",height=\"+a[1]+\",toolbar=no,menubar=no,location=yes\")}function y(e){var t=Z[r()?\"loginUrl\":\"bindUrl\"](e);P.authInWin&&b(e,t)||(h.href=t)}function w(){var e=E(et[\"dialog-ask-for-auth\"]({})).el.find(\".ds-dialog\").css(\"width\",\"300px\");e.find(\"a.ds-service-link\").click(l)}function x(e,t,s,a){function i(){function e(e){if(s&&a){var t=s.options,i=M(s.postList.el,e.response[a],t);\"asc\"==t.order==(\"top\"==t.formPosition)&&S.scrollTo(i);var r=s.el.find(\".ds-comments-tab-\"+a+\" span.ds-highlight\");r.html(parseInt(r.html())+1)}}return a||l.find(\"[type=checkbox]:checked\")[0]?(R.post(\"posts/repost\",S.toJSON(l),e),o.close(),!1):(alert(\"还没有选发布到哪儿呢\"),!1)}function r(){var e=this.value;return this.checked&&!nt.data.social_uid[\"qqt\"==e?\"qq\":e]?void y(e):void 0}var o=E(et[\"dialog-reposts\"]({post:e.toJSON(),repostMessage:t,service:a})),l=o.el.find(\"form\");return l.submit(i),l.find(\".ds-actions [type=checkbox]\").change(r),f(l.find(\"textarea\")).keyup(n).keyup(d).focus(),!1}function T(e){var t={\"unread-comments\":{title:\"新留言及回复\",apiUrl:\"users/unreadComments\",tmpl:function(e){return e.thread?'<li data-thread-id=\"'+e.thread.thread_id+'\">'+H.map(e.authors,et.userAnchor).join(\"、\")+' 在 <a class=\"ds-read\" href=\"'+e.thread.url+'#comments\" target=\"_blank\">'+_(e.thread.title||\"无标题\")+'</a> 中回复了你 <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">知道了</a></li>':\"\"},read:function(e){var t=e.attr(\"data-thread-id\");R.post(\"threads/read\",{thread_id:t}),ot.data.comments--}},\"unread-notifications\":{title:\"系统消息\",apiUrl:\"users/unreadNotifications\",tmpl:function(e){return'<li data-notification-id=\"'+e.notification_id+'\" data-notification-type=\"'+e.type+'\">'+e.content+' <a class=\"ds-delete ds-read\" title=\"知道了\" href=\"javascript:void(0)\" target=\"_blank\" rel=\"noopener\">知道了</a></li>'},read:function(e){var t=e.attr(\"data-notification-id\");R.post(\"notifications/read\",{notification_id:t}),ot.data.notifications--}}}[e],s=E(\"<h2>\"+t.title+'</h2><ul class=\"ds-unread-list\"></ul>');s.on(\"close\",S.resetNotify);var a=s.el.find(\".ds-unread-list\").delegate(\".ds-delete\",\"click\",function(){return H(this).parent().remove(),0===a.children().length&&s.close(),!1}).delegate(\".ds-read\",\"click\",function(){t.read(H(this).parent())});H(\"#ds-notify\").hide(),R.get(t.apiUrl,{},function(e){s.el.find(\".ds-unread-list\").html(H.map(e.response,t.tmpl).join(\"\\n\"))})}function N(){bubbleOutTimer&&(clearTimeout(bubbleOutTimer),bubbleOutTimer=0)}function I(){bubbleOutTimer=setTimeout(function(){bubbleOutTimer=0,X.detach()},400)}function M(e,t,s){return e.find(\".ds-post[data-post-id=\"+t.data.post_id+\"]\")[0]?void 0:(e.find(\".ds-post-placeholder\").remove(),H(et.post({post:t.toJSON(),options:s})).hide()[\"asc\"==s.order?\"appendTo\":\"prependTo\"](e).slideDown(function(){}))}function U(e,t){function s(){if(r())return w(),!1;var e=H(this).parent(),t=e.hasClass(\"ds-post-liked\"),s=H(this).html().match(/\\((\\d+)\\)/),a=(s?parseInt(s[1]):0)+(t?-1:1);return R.post(\"posts/vote\",{post_id:e.closest(\".ds-ctx-entry, .ds-post-self\").attr(\"data-post-id\"),vote:t?0:1}),H(this).html(H(this).html().replace(/\\(\\d+\\)/,\"\")+(a?\"(\"+a+\")\":\"\")),e[t?\"removeClass\":\"addClass\"](\"ds-post-liked\"),!1}function a(){var e=H(this).closest(\".ds-post-self\"),t=lt[e.attr(\"data-post-id\")];return x(t,\"\"),!1}function i(){if(!confirm(\"确定要删除这条评论吗？\"))return!1;var t=H(this).closest(\".ds-post-self\");return R.post(\"posts/remove\",{post_id:t.attr(\"data-post-id\")}),t.parent().fadeOut(200,function(){e.data.comments--,e.updateCounter(\"duoshuo\"),H(this).remove()}),!1}function n(){if(!confirm(\"确定要举报这条评论吗？\"))return!1;var e=H(this).closest(\".ds-post-self\");return R.post(\"posts/report\",{post_id:e.attr(\"data-post-id\")}),alert(\"感谢您的反馈！\"),!1}function o(){var s=H(this),a=s.closest(\".ds-comment-actions\");if(a.hasClass(\"ds-reply-active\"))h.el.fadeOut(200,function(){H(this).detach()}),a.removeClass(\"ds-reply-active\");else{var i=s.closest(\".ds-ctx-entry, .ds-post-self\");h?h.actionsBar.removeClass(\"ds-reply-active\"):(h=new st.Replybox(e),h.render(!0).el.addClass(\"ds-inline-replybox\").detach()),h.el.find(\"[name=parent_id]\").val(i.attr(\"data-post-id\")),h.el.show().appendTo(s.closest(\".ds-ctx-body, .ds-comment-body\")).find(\"textarea\").focus(),h.actionsBar=a.addClass(\"ds-reply-active\"),t.max_depth<=1?h.postlist=e.postlist.el:(h.postlist=i.siblings(\".ds-children\"),h.postlist[0]||(h.postlist=h('<ul class=\"ds-children\">').insertAfter(i)))}return!1}function d(){function e(e){W(e),i.append(H.map(e.response,function(e){return et.post({post:e,options:t})}).join(\"\"))}{var s=H(this).closest(\".ds-post-self\"),a=s.attr(\"data-post-id\");s.data(\"source\")}if(0!=s.attr(\"data-root-id\"))return!1;var i=s.siblings(\".ds-children\");return i[0]?(i.remove(),!1):(i=H('<ul class=\"ds-children\"></ul>').insertAfter(s),R.get(\"posts/listComments\",B({post_id:a}),e),!1)}function l(){var t=H(this).closest(\".ds-post-self\"),s=lt[t.attr(\"data-post-id\")],a=s.data.source;if(!nt.data.social_uid[\"qqt\"==a?\"qq\":a])return void y(a);var i=s.data.root_id,r=\"0\"!=i?lt[i]:s,n=\"\";if(\"0\"!=i){var o=prepatePost(s.data).theAuthor;n=(\"weibo\"==a?\"//@\"+o.name:\"|| @\"+o.qqt_account)+\":\"+s.data.message}return x(r,n,e,a),!1}function c(){var e=H(this).parent();return e.siblings().show(),e.remove(),!1}function u(){function t(){function t(e){var t=e.response;ct[c]?ct[c].set(t):ct[c]=new $(t),X.owner==s&&K.html(et.userInfo(t))}tt=0,X.owner=s,N();var i=a.offset(),r=e.el.offset(),n=a.innerWidth()/2,o=e.el.innerHeight()-(i.top-r.top)+6,d=i.left-r.left-35+(n>35?35:n);try{if(a.hasClass(\"ds-comment-context\"))K.attr(\"id\",\"ds-ctx-bubble\").attr(\"data-post-id\",a.attr(\"data-post-id\")).html('<ul id=\"ds-ctx\">'+et.ctxPost({post:lt[a.attr(\"data-parent-id\")].toJSON()})+'</ul><div class=\"ds-bubble-footer\"><a class=\"ds-ctx-open\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">查看对话</a></div>');else if(a.hasClass(\"ds-avatar\")||a.hasClass(\"ds-user-name\")){var l={},c=l.user_id=a.attr(\"data-user-id\");if(!c)throw\"no info\";K.attr(\"id\",\"ds-user-card\").attr(\"data-user-id\",c).empty(),ct[c]?K.html(et.userInfo(ct[c].data)):R.get(\"users/profile\",B(l),t)}X.css({bottom:o,left:d}).appendTo(e.innerEl)}catch(u){X.detach()}}var s=this;if(bubbleOutTimer&&X.owner==s)return clearTimeout(bubbleOutTimer),void(bubbleOutTimer=0);var a=H(s);tt=setTimeout(t,200)}function p(){tt?(clearTimeout(tt),tt=0):bubbleOutTimer||I()}var h;this.delegate(\"a.ds-post-likes\",\"click\",s).delegate(\"a.ds-post-repost\",\"click\",a).delegate(\"a.ds-post-delete\",\"click\",i).delegate(\"a.ds-post-report\",\"click\",n).delegate(\"a.ds-post-reply\",\"click\",o).delegate(\"a.ds-weibo-comments\",\"click\",d).delegate(\"a.ds-weibo-reposts\",\"click\",l).delegate(\"a.ds-expand\",\"click\",c),P.touch||this.delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseenter\",u).delegate(\"a.ds-comment-context, .ds-avatar, .ds-user-name\",\"mouseleave\",p)}function B(e){var s={require:\"site,visitor,nonce,lang\"+(it++?\"\":\",unread,log,extraCss\"),site_ims:D.get(\"ds_site_\"+c.short_name+\":timestamp\"),lang_ims:D.get(\"ds_lang_\"+c.short_name+\":timestamp\"),referer:t.referrer};c.stylePatch&&(s.style_patch=c.stylePatch);for(var a in s)s[a]&&(!P.ie6||encodeURIComponent(s[a]).length<200)&&(e[a]=s[a]);return e}var h=\"S.jQuery,V=H(e),Y=H(t);e.postMessage&&(e.addEventListener?e.addEventListener(\"message\",g,!1):e.attachEvent&&e.attachEvent(\"onmessage\",g)),S.scrollTo=function(e){var\" t=\"e.offset().top;(t<V.scrollTop()||t\">V.scrollTop()+V.height())&&H(\"html, body\").animate({scrollTop:t-40},200,\"swing\")},S.toJSON=function(e){var t=/\\r?\\n/g,s=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,a=/^(?:select|textarea)/i,i=e.map(function(){return this.elements?H.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||a.test(this.nodeName)||s.test(this.type))}).map(function(e,s){var a=H(this).val();return null==a?null:H.isArray(a)?H.map(a,function(e){return{name:s.name,value:e.replace(t,\"\\r\\n\")}}):{name:s.name,value:a.replace(t,\"\\r\\n\")}}).toArray(),r={};return H.each(i,function(){r[this.name]=this.value}),r},S.resetNotify=function(){var e=H(\"#ds-notify\"),s=ot.data;e[0]||(e=H('<div id=\"ds-notify\"></div>').css({hidden:{display:\"none\"},\"top-right\":{top:\"24px\",right:\"24px\"},\"bottom-right\":{bottom:\"24px\",right:\"24px\"}}[rt.data.notify_position]).delegate(\".ds-notify-unread a\",\"click\",function(){return T(H(this).data(\"type\")),!1}).appendTo(t.body)),e.html(et.notify(s))[!s.comments&&!s.notifications||\"hidden\"===rt.data.notify_position||H(\".ds-dialog\")[0]?\"hide\":\"show\"]()},ot.on(\"reset\",S.resetNotify),st.Replybox=function(e){this.embedThread=e},st.Replybox.prototype={render:function(e){function s(e){e.data(\"submitting\",!0),e.find(\".ds-post-button\").addClass(\"ds-waiting\").html(z.posting)[0].disabled=!0}function a(e){e.data(\"submitting\",!1),e.find(\".ds-post-button\").removeClass(\"ds-waiting\").html(z.post)[0].disabled=!1}var i=this,o=i.embedThread,c=o.options,p=function(){S.require(\"smilies\",function(){})},h={thread:o,options:c,inline:e,params:{thread_id:o.threadId,parent_id:\"\",nonce:S.nonce},repostArray:[],checked:0};for(var v in nt.data.repostOptions)nt.data.repostOptions[v]&&(h.repostArray.push(v),h.checked=1);var g=i.el=H(et.replybox(h)).click(p),b=g.find(\"form\"),y=b.find(\"input[type=checkbox]\")[0],_=b.find(\"a.ds-service-icon, a.ds-service-icon-grey\"),k=f(b.find(\"textarea\")).focus(p).keyup(n).keyup(d).bind(\"focus mousedown mouseup keyup\",u),w=g.find(\".ds-add-emote\").click(function(e){var s=S.smiliesTooltip;return w.toggleClass(\"ds-expanded\").hasClass(\"ds-expanded\")?(s||(s=S.smiliesTooltip=new st.SmiliesTooltip,s.render(),S.require(\"smilies\",function(){s.reset(\"微博-默认\")})),s.replybox=i,s.el.appendTo(t.body).css({top:i.el.offset().top+i.el.outerHeight()+4+\"px\",left:i.el.find(\".ds-textarea-wrapper\").offset().left+\"px\"}),H(t.body).click(x)):x(e),!1}),x=(g.find(\".ds-add-image\").click(function(e){var s=k[0],a=s.value,i=\"请输入图片地址\",r='<img src=\"'+i+'\">';if(t.selection){s.value=a.substring(0,k.data(\"ds-range-start\"))+r+a.substring(k.data(\"ds-range-end\"),a.length),s.value=s.value.replace(\"说点什么吧 ...\",\"\"),s.focus();var n=t.selection.createRange();n.collapse(),n.findText(i),n.select()}else{s.value=a.substring(0,s.selectionStart)+r+a.substring(s.selectionEnd);var o=s.value.search(i);s.setSelectionRange(o,o+i.length),s.focus()}e.preventDefault()}),i.hideSmilies=function(){w.removeClass(\"ds-expanded\"),S.smiliesTooltip.el.detach(),H(t.body).unbind(\"click\",x)}),T=function(e,t){var s=E(et[\"dialog-anonymous\"]({services:[\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"],options:c})),a=s.el.find(\".ds-dialog\").css(\"width\",\"320px\");if(a.find(\".ds-icons-32 a\").click(l),!c.deny_anonymous){var i=s.el.find(\"form\");i.submit(function(){var e=i.find(\"input[name=author_email]\").val();return!e&&!c.require_guest_email||e.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)?(t(S.toJSON(i)),s.close(),!1):(alert(\"请输入一个有效的email地址.\"),!1)}),i.find(\"input[name=author_name]\")[0].focus()}};c.deny_anonymous&&k.focus(function(){if(r()){T(b,q);var e=function(t){t.stopPropagation(),k.unbind(\"click\",e)};k.click(e)}return!1});var q=function(e){s(b),R.post(\"posts/create\",H.extend(S.toJSON(b),e),function(e){var t=lt[e.response.post_id]=new F(e.response),s=M(i.postList,t,c);if(\"asc\"==c.order==(\"top\"==c.formPosition)&&S.scrollTo(s),o.data.comments++,o.updateCounter(\"duoshuo\"),k.val(\"\").trigger(\"keyup\"),a(b),g.hasClass(\"ds-inline-replybox\")&&(g.detach(),i.actionsBar.removeClass(\"ds-reply-active\")),m)try{m.removeItem(\"ds_draft_\"+o.threadId)}catch(r){}},function(e){a(b),alert(e.errorMessage)})};b.submit(function(){if(b.data(\"submitting\"))return!1;var e=H.trim(b[0].message.value);return\"\"==e||!P.placeholder&&e==k.attr(\"placeholder\")?(alert(\"您还没写内容呢\"),!1):(r()?T(b,q):q(),!1)});var C=function(e){return H(e).hasClass(\"ds-service-icon-grey\")?null:H(e).attr(\"data-service\")};if(_.click(function(){return H(this).toggleClass(\"ds-service-icon-grey\").toggleClass(\"ds-service-icon\"),y.value=H.map(_,C).join(\",\"),y.checked=\"\"!=y.value,!1}),H(y).change(function(){var e=this.checked;_[e?\"removeClass\":\"addClass\"](\"ds-service-icon-grey\")[e?\"addClass\":\"removeClass\"](\"ds-service-icon\"),this.value=H.map(_,C).join(\",\")}),!e&&m){var j=\"ds_draft_\"+o.threadId;k.bind(\"focus blur keyup\",function(e){var t=H(e.currentTarget).val();try{m[j]=t}catch(e){}}),m[j]&&k.val(m[j])}return this}},st.Dialog=J.extend({init:function(e,t){(this.el=H(\"#ds-wrapper\"))[0]||(this.el=p(H('<div id=\"ds-wrapper\"></div>'))),this.options=H.extend({width:600},t),e!==s&&H(e).attr(\"id\",\"ds-reset\").appendTo(this.el)},open:function(){function e(e){return 27==e.which?(a.close(),!1):void 0}function s(){return a.close(),!1}var a=this;return a.el.hide().appendTo(t.body).fadeIn(200),P.ie6&&a.el.css(\"top\",V.scrollTop()+100),a.el.show().find(\".ds-dialog\").delegate(\"a.ds-dialog-close\",\"click\",function(){return a.close(),!1}).click(i),Y.keydown(e),H(t.body).click(s),a.close=function(){Y.unbind(\"keydown\",e),H(t.body).unbind(\"click\",s),a.el.fadeOut(200,function(){H(this).remove()}),a.trigger(\"close\")},a}}),et.likePanel=function(e){return e.likes?'<span class=\"ds-highlight\">'+e.likes+\"</span> 人喜欢\":\"\"},st.Meta=function(e){this.embedThread=e},st.Meta.prototype={render:function(){function a(a){function r(e){o.set(e),n.resetLikePanel()}function c(){n.tooltip.detach(),H(t.body).unbind(\"click\",c)}function u(t){switch(this.className){case\"ds-like-tooltip-close\":c(t);break;default:if(!e.open(this.href,\"_blank\",\"height=500,width=600,top=0,left=0,toolbar=no,menubar=no,resizable=yes,location=yes,status=no\"))return}return!1}var p=l.hasClass(\"ds-thread-liked\");if(R.post(\"threads/vote\",{thread_id:n.embedThread.threadId,vote:p?0:1},r),l.toggleClass(\"ds-thread-liked\"),l.find(\".ds-thread-like-text\").text(p?\"喜欢\":\"已喜欢\"),p)return n.tooltip&&c(a),!1;if(n.tooltip===s){var h=et.likeTooltip({services:{qzone:\"QQ空间\",weibo:\"新浪微博\",qqt:\"腾讯微博\",renren:\"人人网\",kaixin:\"开心网\",douban:\"豆瓣网\",baidu:\"百度搜藏\"},thread_id:o.data.thread_id});n.tooltip=H(h).click(i).delegate(\"a\",\"click\",u)}var f={};return f.left=0,f.top=d.position().top+d.outerHeight()-4+\"px\",n.tooltip.appendTo(n.embedThread.innerEl).css(f),H(t.body).click(c),!1}var n=this,o=n.embedThread.model,d=n.el=H(et.meta(o.toJSON())),l=d.find(\".ds-like-thread-button\");return l.click(a),n.resetLikePanel(),r()&&d.hide(),n},resetLikePanel:function(){this.el.find(\".ds-like-panel\").html(et.likePanel(this.embedThread.model.toJSON()))}},st.PostListHead=function(e){this.embedThread=e},st.PostListHead.prototype={render:function(){function e(e){r.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.page=1;var t=e.currentTarget;switch(t.className){case\"ds-comments-tab-duoshuo\":a.params.source=\"duoshuo\",s.replybox.el.show();break;case\"ds-comments-tab-repost\":a.params.source=\"repost\",s.replybox.el.hide();break;case\"ds-comments-tab-weibo\":a.params.source=\"weibo\",s.replybox.el.hide();break;case\"ds-comments-tab-qqt\":a.params.source=\"qqt\",s.replybox.el.hide()}return H(t).addClass(\"ds-current\"),a.refetch(),!1}function t(){return n.find(\"a.ds-current\").removeClass(\"ds-current\"),a.params.order=s.options.order=this.className.replace(\"ds-order-\",\"\"),a.params.page=1,a.refetch(),H(this).addClass(\"ds-current\"),!1}var s=this.embedThread,a=s.postList,i=this.el=H(et.postListHead({thread:s.model.toJSON(),options:s.options})),r=i.find(\"ul.ds-comments-tabs\");r.delegate(\".ds-tab a\",\"click\",e);var n=i.find(\".ds-sort\");return n.delegate(\"a\",\"click\",t),n.find(\".ds-order-\"+a.params.order).addClass(\"ds-current\"),this}},st.Paginator=function(e){function t(){return i.params.page=parseInt(this.innerHTML),i.refetch(),a.find(\".ds-current\").removeClass(\"ds-current\"),H(this).addClass(\"ds-current\"),!1}e=e||{};var s=this,a=s.el=e.el||H('<div class=\"ds-paginator\"></div>'),i=s.collection=e.collection;a.delegate(\"a\",\"click\",t)},st.Paginator.prototype={reset:function(e){function t(e){i.push('<a data-page=\"'+e+'\" href=\"javascript:void(0);\" target=\"_blank\" rel=\"noopener\">'+e+\"</a>\")}var s,a=this.collection.params.page||1,i=[];if(a>1)for(t(1),s=a>4?a-2:2,s>2&&i.push('<span class=\"page-break\">...</span>');a>s;s++)t(s);if(i.push('<a data-page=\"'+a+'\" href=\"javascript:void(0);\" class=\"ds-current\" target=\"_blank\" rel=\"noopener\">'+a+\"</a>\"),a<e.pages){for(s=a+1;a+4>=s&&s<e.pages;s++)t(s);s<e.pages&&i.push('<span class=\"page-break\">...'),t(e.pages)}this.el.html('<div class=\"ds-border\"></div>'+i.join(\" \"))[e.pages>1?\"show\":\"hide\"]()}},S.addSmilies=function(e,t){var s=S.smiliesTooltip;s&&s.el.find(\"ul.ds-smilies-tabs\").append(\"<li><a>\"+e+\"</a></li>\"),S.smilies[e]=t},st.SmiliesTooltip=function(){},st.SmiliesTooltip.prototype={render:function(){function e(){var e=s.replybox,a=e.el.find(\"textarea\"),i=a[0],r=i.value;if(t.selection){i.value=r.substring(0,a.data(\"ds-range-start\"))+this.title+r.substring(a.data(\"ds-range-end\"),r.length),i.value=i.value.replace(z.leave_a_message,\"\"),i.focus();var n=t.selection.createRange();n.moveStart(\"character\",a.data(\"ds-range-start\")+this.title.length),n.collapse(),n.select()}else{var o=i.selectionStart+this.title.length;i.value=r.substring(0,i.selectionStart)+this.title+r.substring(i.selectionEnd),i.setSelectionRange(o,o)}e.hideSmilies(),i.focus()}var s=this,a=s.el=H(et.smiliesTooltip(L));return a.click(i).find(\"ul.ds-smilies-tabs\").delegate(\"a\",\"click\",function(){s.reset(this.innerHTML)}),a.find(\".ds-smilies-container\").delegate(\"img\",\"click\",e),this},reset:function(e){function t(t,s){var i=0===e.indexOf(\"微博\")?\"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/\"+s.replace(\"_org\",\"_thumb\"):S.STATIC_URL+\"/images/smilies/\"+s;\"WordPress\"===e&&(t=\" \"+t+\" \"),a+='<li><img src=\"'+i+'\" title=\"'+_(t)+'\"></li>'}var s=this.el.find(\"ul.ds-smilies-tabs\");s.find(\"a.ds-current\").removeClass(\"ds-current\"),s.find(\"a\").filter(function(){return this.innerHTML==e}).addClass(\"ds-current\");var a=\"<ul>\";return H.each(L[e],t),a+=\"</ul>\",this.el.find(\".ds-smilies-container\").html(a),this}},et.postPlaceholder=function(){return['<li class=\"ds-post ds-post-placeholder\">',z.no_comments_yet,\"</li>\"].join(\"\")};var X=H('<div id=\"ds-bubble\"><div class=\"ds-bubble-content\"></div><div class=\"ds-arrow ds-arrow-down ds-arrow-border\"></div><div class=\"ds-arrow ds-arrow-down\"></div></div>'),K=X.find(\".ds-bubble-content\").delegate(\"a.ds-ctx-open\",\"click\",function(){function e(e){function t(e,t){return et.ctxPost({post:e,index:t})}C.log(H.map(e.response,t).join(\"\\n\"));s.el.find(\"ol\");s.el.find(\"ol\").html(H.map(e.response,t).join(\"\\n\"))}var t={};t.post_id=K.attr(\"data-post-id\"),R.get(\"posts/conversation\",t,e);var s=E('<h2>查看对话</h2><ol id=\"ds-ctx\"></ol>');return s.el.find(\".ds-dialog\").css(\"width\",\"600px\"),s.el.find(\".ds-dialog-body\").css({\"max-height\":\"350px\",_height:\"350px\",\"overflow-y\":\"auto\",\"padding-top\":\"10px\"}),!1}),tt=bubbleOutTimer=0;X.mouseenter(N).mouseleave(I),st.PostList=function(e){e&&(e.params&&(this.params=e.params),e.embedThread&&(this.embedThread=e.embedThread)),this.el=H('<ul class=\"ds-comments\"></ul>')},st.PostList.prototype={url:\"threads/listPosts\",render:function(){return U.call(this.el,this.embedThread,this.embedThread.options),this},reset:function(e){var t=this.embedThread.options;this.el.html(e[0]?H.map(lt.getJSON(e),function(e){return et.post({post:e,options:t})}).join(\"\"):et.postPlaceholder())},refetch:function(){function e(e){lt.set(e.parentPosts||e.relatedPosts),ct.set(e.users),s.reset(e.response),s.embedThread.paginator.reset(e.cursor),s.el.fadeTo(200,1),S.scrollTo(s.el),a.remove()}var s=this,a=H(et.indicator()).appendTo(t.body).fadeIn(200);s.el.fadeTo(200,.5),R.get(s.url,s.params,e)}},st.RelatedRead=function(){this._init()},st.RelatedRead.prototype={_init:function(){this.el=H('<div id=\"ds-related-reads\"></div>')},load:function(s){e.__duoshuo_id__=s,e.readsByToutiao=[],e.readsByToutiao.push({id:\"ds-related-reads\",num:3});var a=\"//s0.pstatp.com/site/reads-sdk/5bf3702b38076207bee1.js\",i=t.createElement(\"script\");i.src=a,i.charset=\"utf-8\",i.crossOrigin=\"anonymous\",t.head.appendChild(i)},mount:function(e){this.el.insertBefore(e)}},st.EmbedThread=Q.extend({uri:\"threads/listPosts\",params:\"thread-id local-thread-id source-thread-id thread-key category channel-key author-key author-id url limit order max-depth form-position container-url\"+(v.match(/MSIE 6\\.0/)?\"\":\" title image thumbnail\"),render:function(){var e=this.el;if(\"请将此处替换成文章在你的站点中的ID\"===e.data(\"thread-key\"))return alert(\"请设置正确的 data-thread-key 属性\"),!1;e.attr(\"id\",\"ds-thread\").append(et.waitingImg());var t=e.width(),s=e.data(\"url\")||!e.attr(\"data-thread-id\")&&H(\"link[rel=canonical]\").attr(\"href\");s?e.data(\"url\",k(s)):e.data(\"container-url\",h.href),t&&400>=t&&e.addClass(\"ds-narrow\").data(\"max-depth\",1)},updateCounter:function(e){function t(e){return e.substr(e.indexOf(\"}\")+1)}var s={duoshuo:[\"comments\",t(z.comments_multiple)||\"评论\"],repost:[\"reposts\",t(z.reposts_multiple)||\"转载\"],weibo:[\"weibo_reposts\",t(z.weibo_reposts_multiple)||\"新浪微博\"],qqt:[\"qqt_reposts\",t(z.qqt_reposts_multiple)||\"腾讯微博\"]};for(var a in s)if(!e||e==a){var i=this.data[s[a][0]];this.el.find(\".ds-comments-tab-\"+a).html(this.el.hasClass(\"ds-narrow\")?'<span class=\"ds-service-icon ds-'+a+'\"></span>'+i:(i?'<span class=\"ds-highlight\">'+i+\"</span>\":\"0\")+s[a][1])}},onError:function(e){this.el.html(\"评论框出错啦(\"+e.code+\"): \"+e.errorMessage)},onload:function(t){var a=this,i=a.threadId=t.thread.thread_id,n=t.cursor,o=a.options=t.options,d=a.innerEl=p(H('<div id=\"ds-reset\"></div>').appendTo(a.el));a.model=new G(a.data=t.thread),lt.set(t.parentPosts||t.relatedPosts),ct.set(t.users),a.el.find(\"#ds-waiting\").remove(),t.options&&t.options.show_recommend&&(a.relatedRead=new st.RelatedRead,a.relatedRead.load(t.thread.site_id),a.relatedRead.mount(d)),o.like_thread_enabled&&(a.meta=new st.Meta(a),d.append(a.meta.render().el)),o.hot_posts&&t.hotPosts&&t.hotPosts.length&&(a.hotPosts=new st.HotPosts(H('<div class=\"ds-rounded\"></div>'),{max_depth:1,show_context:o.show_context}),a.hotPosts.thread=a,d.append(a.hotPosts.el),a.hotPosts.onload({list:lt.getJSON(t.hotPosts)})),a.postListHead=new st.PostListHead(a),a.postList=new st.PostList({embedThread:a,params:{source:\"duoshuo\",thread_id:i,max_depth:o.max_depth,order:o.order,limit:o.limit}}),a.postList.render().reset(t.response),a.paginator=new st.Paginator({collection:a.postList}),a.paginator.reset(n);var c=a.replybox=new st.Replybox(a);c.postList=a.postList.el,r()?a.loginButtons=H(et.loginButtons()).delegate(\"a.ds-more-services\",\"click\",function(){return a.loginButtons.find(\".ds-additional-services\").toggle(),!1}).delegate(\"a.ds-service-link\",\"click\",l):a.toolbar=H(et.toolbar()).delegate(\".ds-account-control\",\"mouseenter\",function(){H(this).addClass(\"ds-active\")}).delegate(\".ds-account-control\",\"mouseleave\",function(){H(this).removeClass(\"ds-active\")}).delegate(\"a.ds-bind-more\",\"click\",function(){var e=E(et[\"dialog-bind-more\"]()).el.find(\".ds-dialog\").addClass(\"ds-dialog-bind-more\").css(\"width\",\"300px\");return e.find(\"a.ds-service-link\").click(l),!1}).delegate(\"a.ds-unread-comments-count\",\"click\",function(){return T(\"unread-comments\"),!1});var u=['<a name=\"respond\"></a>',a.toolbar||a.loginButtons,c.render().el];\"top\"==o.formPosition&&H.fn.append.apply(d,u),d.append(a.postListHead.render().el,a.postList.el,a.paginator.el),\"bottom\"==o.formPosition&&H.fn.append.apply(d,u),d.append(et.poweredBy(o.poweredby_text)),a.updateCounter(),t.alerts&&H.each(t.alerts,function(e,t){H('<div class=\"ds-alert\">'+t+\"</div>\").insertBefore(a.toolbar||loginButtons)}),o.message&&c.el.find(\"textarea\").val(o.message).focus(),ot.on(\"reset\",function(){var e=ot.data.comments||0;d.find(\"a.ds-unread-comments-count\").html(e).attr(\"title\",e?\"你有\"+e+\"条新回复\":\"你没有新回复\").css(\"display\",e?\"inline\":\"none\")}),o.mzadx_id&&(S.require(\"mzadxN\",function(){}),H('<div id=\"MZADX_'+o.mzadx_id+'\" style=\"margin:0 auto;\"></div>').appendTo(d),__mz_rpq=e.__mz_rpq||[],__mz_rpq.push({l:[o.mzadx_id],r:\"1\",_srv:\"MZADX\",_callback:function(){}})),S.thread=a,ot.data!==s&&ot.trigger(\"reset\"),r()||A.send({visit_thread_id:a.threadId})},onMessage:function(e){M(this.postList.el,new F(e),this.options)}}),st.HotPosts=Q.extend({tmpl:\"hotPosts\",params:\"show-quote\",render:function(){return this.el.attr(\"id\",\"ds-hot-posts\"),this},onload:function(e){e.options=H.extend(this.options,e.options),Q.prototype.onload.call(this,e),U.call(this.el.find(\"ul\"),this.thread,this.options)}}),st.RecentComments=Q.extend({tmpl:\"commentList\",uri:\"sites/listRecentPosts\",params:\"show-avatars show-time show-title avatar-size show-admin excerpt-length num-items channel-key\",render:function(){this.el.attr(\"id\",\"ds-recent-comments\")},prepare:function(e){return{list:H.map(e.response,function(e){return new F(e).toJSON()})}}}),st.RecentVisitors=Q.extend({tmpl:\"recentVisitors\",uri:\"sites/listVisitors\",params:\"show-time avatar-size num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-recent-visitors\").append(this.waitingEl=H(et.waitingImg()))}}),st.TopThreads=Q.extend({tmpl:\"topThreads\",uri:\"sites/listTopThreads\",params:\"range num-items channel-key\",render:function(){this.el.children().detach(),this.el.attr(\"id\",\"ds-top-threads\").append(this.waitingEl=H(et.waitingImg()))}}),st.LoginWidget=Q.extend({tmpl:\"loginWidget\",render:function(){var e=this.el;e.attr(\"id\",\"ds-login\").html(et.loginWidget([\"weixin\",\"weibo\",\"qq\",\"renren\",\"kaixin\",\"douban\"])),e.find(\"a\").click(l),e.find(\"a.ds-logout\").attr(\"href\",Z.logoutUrl())}}),st.ThreadCount=Q.extend({onload:function(e){var t=this.el,s=t.data(\"count-type\")||\"comments\",a=e.data[s];t[t.data(\"replace\")?\"replaceWith\":\"html\"](z[s+\"_\"+(a?a>1?\"multiple\":\"one\":\"zero\")].replace(\"{num}\",a))}}),st.ShareWidget=Q.extend({tmpl:\"shareWidget\",render:function(){var e={copyright:\"多说分享插件\",services:[\"weibo\",\"qzone\",\"sohu\",\"renren\",\"netease\",\"qqt\",\"kaixin\",\"douban\",\"qq\",\"meilishuo\",\"mogujie\",\"baidu\",\"taobao\",\"google\",\"wechat\",\"diandian\",\"huaban\",\"duitang\",\"youdao\",\"pengyou\",\"facebook\",\"twitter\",\"linkedin\",\"msn\"]};this.el.attr(\"id\",\"ds-share\"),this.el.children().attr(\"id\",\"ds-reset\"),this.el.find(\".ds-share-aside-inner\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").html(et.shareWidget(e)),this.el.find(\".ds-share-icons-more\").hide(),this.el.hasClass(\"flat\")&&this.el.find(\"a\").each(function(){H(this).addClass(\"flat\")}),p(this.el),this.delegateEvents()},delegateEvents:function(){var s=this,i=s.el;if(i.children().hasClass(\"ds-share-inline\")){var r=\".ds-share-icons-more\",n=i.find(r),d=\"[data-toggle=ds-share-icons-more]\";i.delegate(d,\"mouseover\",function(){n.show()}),i.delegate(d,\"mouseout\",function(){n.hide()}),i.delegate(r,\"mouseover\",function(){n.show()}),i.delegate(r,\"mouseout\",function(){n.hide()})}else{var l=i.children().hasClass(\"ds-share-aside-left\")?\"slide-to-right\":\"slide-to-left\",c=i.children();if(!o.cssProperty(\"transition\")){var u=i.children().hasClass(\"ds-share-aside-left\")?\"left\":\"right\";i.delegate(\".ds-share-aside-toggle\",\"mouseover\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)-195:e[u]=0,c.animate(e,200)}),i.delegate(\".ds-share-aside-inner\",\"mouseleave\",function(){var e={},s=P.ie6&&\"right\"===u;s?e.left=(t.documentElement.scrollLeft+t.documentElement.clientWidth-this.offsetWidth-(parseInt(this.currentStyle.marginLeft,10)||0)-parseInt(this.currentStyle.marginRight,10)||0)+230:e[u]=-229,c.animate(e,200)})}i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseover\",function(){c.addClass(l)}),i.delegate(\".ds-share-aside-toggle,.ds-share-aside-inner\",\"mouseleave\",function(){c.removeClass(l)})}i.delegate(\"a\",\"click\",function(t){var s=H(this).data(\"service\");if(!i.data(\"url\"))return void alert(\"请设置data-url\");if(\"wechat\"===s){var r=a()+\"/api/qrcode/getImage.png\",n=\"?size=240&text=\"+i.data(\"url\"),d=E(et[\"dialog-qrcode\"]({qrcode_url:r+n,url:i.data(\"url\")}));d.el.find(\".ds-dialog\").css(\"width\",\"320px\")}else{var l=a()+\"/share-proxy/?\"+o.param({service:H(this).data(\"service\"),thread_key:i.data(\"threadKey\"),title:i.data(\"title\"),images:i.data(\"images\"),content:i.data(\"content\"),url:i.data(\"url\")});e.open(l,\"_blank\")}t.preventDefault(),t.stopPropagation()})}});var it=0;S.initSelector=function(e,t){function s(e){W(e),o.extend(z,e.options),dt.set(e.response)}var a=[];!q()||!H.isReady&&j||H(e).each(function(e,s){var i=H(s);if(!i.data(\"initialized\")){i.data(\"initialized\",!0);var r=new st[t.type](i,t);if(at.push(r),\"ThreadCount\"===t.type){var n=i.attr(\"data-thread-key\");i.attr(\"data-channel-key\")&&(n=i.attr(\"data-channel-key\")+\":\"+n),a.push(n),dt[n]||(dt[n]=new G({})),dt[n].on(\"reset\",function(){r.onload(this)})}else if(r.uri){var o={};H.each(r.params.split(\" \"),function(e,t){o[t.replace(/-/g,\"_\")]=i.attr(\"data-\"+t)||i.data(t)}),R.get(r.uri,B(o),function(e){r.load(e)})}}}),a.length&&R.get(\"threads/counts\",B({threads:a.join(\",\")}),s)},(S.initView=function(){H.each(O,S.initSelector)})(),H(function(){if(!c){if(!q())return C.error(\"缺少 duoshuoQuery 的定义\");C.warn(\"请在加载多说 embed.js 之前定义 duoshuoQuery\")}setInterval(function(){H(\".ds-time\").each(function(){var e=H(this).attr(\"datetime\");e&&(this.innerHTML=S.elapsedTime(e))})},2e4),c.ondomready&&c.ondomready(),S.initView(),!it&&c.short_name&&R.get(\"analytics/ping\",B({}),W)})})}}(window,document);</e.pages;s++)t(s);s<e.pages&&i.push('<span></e.pages){for(s=a+1;a+4></200)&&(e[a]=s[a]);return></=1?h.postlist=e.postlist.el:(h.postlist=i.siblings(\".ds-children\"),h.postlist[0]||(h.postlist=h('<ul></s.pagelets.length;r++)a=s.pagelets[r],a.threadid==t.thread_id&&a.onmessage(t);break;case\"notification\":y.push(t),i()}},e.addeventlistener(\"beforeunload\",function(){n.close()})}a.websocket.onopen()}};s.domain=\"duoshuo.com\",s.static_url=g+\"></e.length;i++)(function(n){s[e[i]]||(r=!1,o.injectscript(t(n),function(){s[n]=!0;for(var></arguments.length;t++)arguments[t]&&o.extend(e,arguments[t]);var></i.length;r++)if(\"string\"==typeof></o.length;d++)if(a=\">"}],"Post":[{"title":"Android,iOS打开手机QQ与指定聊天界面","date":"2016-04-15T02:45:20.000Z","_content":"\n ### Android，iOS打开手机QQ与指定聊天界面\n \n > 在浏览器中可以通过JS代码打开QQ并弹出聊天界面，一般作为客服QQ使用。\n > 在移动端可以使用schema模式来启动手机QQ。\n \n <!-- more -->\n \n#### Android:\n\n```\nString url=\"mqqwpa://im/chat?chat_type=wpa&uin=123456\";  \nstartActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));  \n```\n\n#### iOS:\n\n```\nUIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectZero];  \nNSURL *url = [NSURL URLWithString:@\"mqq://im/chat?chat_type=wpa&uin=123456&version=1&src_type=web\"];  \nNSURLRequest *request = [NSURLRequest requestWithURL:url];  \nwebView.delegate = self;  \n[webView loadRequest:request];  \n[self.view addSubview:webView];  \n\n```\n \n#### 浏览器：\n\n```\n<a target=\"_blank\" href=\"http://wpa.qq.com/msgrd?v=3&uin=123456&site=qq&menu=yes\">click here</a>  \n``` \n \n","source":"_posts/Android-iOS打开手机QQ与指定聊天界面.md","raw":"---\ntitle: 'Android,iOS打开手机QQ与指定聊天界面'\ndate: 2016-04-15 10:45:20\ntags: [android, qq, intent]\ncategories: android\n---\n\n ### Android，iOS打开手机QQ与指定聊天界面\n \n > 在浏览器中可以通过JS代码打开QQ并弹出聊天界面，一般作为客服QQ使用。\n > 在移动端可以使用schema模式来启动手机QQ。\n \n <!-- more -->\n \n#### Android:\n\n```\nString url=\"mqqwpa://im/chat?chat_type=wpa&uin=123456\";  \nstartActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));  \n```\n\n#### iOS:\n\n```\nUIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectZero];  \nNSURL *url = [NSURL URLWithString:@\"mqq://im/chat?chat_type=wpa&uin=123456&version=1&src_type=web\"];  \nNSURLRequest *request = [NSURLRequest requestWithURL:url];  \nwebView.delegate = self;  \n[webView loadRequest:request];  \n[self.view addSubview:webView];  \n\n```\n \n#### 浏览器：\n\n```\n<a target=\"_blank\" href=\"http://wpa.qq.com/msgrd?v=3&uin=123456&site=qq&menu=yes\">click here</a>  \n``` \n \n","slug":"Android-iOS打开手机QQ与指定聊天界面","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxea0001sifylgmb7d0z","content":"<h3 id=\"androidios打开手机qq与指定聊天界面\"><a class=\"markdownIt-Anchor\" href=\"#androidios打开手机qq与指定聊天界面\"></a> Android，iOS打开手机QQ与指定聊天界面</h3>\n<blockquote>\n<p>在浏览器中可以通过JS代码打开QQ并弹出聊天界面，一般作为客服QQ使用。<br>\n在移动端可以使用schema模式来启动手机QQ。</p>\n</blockquote>\n <a id=\"more\"></a>\n<h4 id=\"android\"><a class=\"markdownIt-Anchor\" href=\"#android\"></a> Android:</h4>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url=<span class=\"string\">\"mqqwpa://im/chat?chat_type=wpa&amp;uin=123456\"</span><span class=\"comment\">;  </span></span><br><span class=\"line\">startActivity(<span class=\"name\">new</span> Intent(<span class=\"name\">Intent</span>.ACTION_VIEW, Uri.parse(<span class=\"name\">url</span>)))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ios\"><a class=\"markdownIt-Anchor\" href=\"#ios\"></a> iOS:</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span>];  </span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"mqq://im/chat?chat_type=wpa&amp;uin=123456&amp;version=1&amp;src_type=web\"</span>];  </span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];  </span><br><span class=\"line\">webView.delegate = <span class=\"keyword\">self</span>;  </span><br><span class=\"line\">[webView loadRequest:request];  </span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:webView];</span><br></pre></td></tr></table></figure>\n<h4 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\"></a> 浏览器：</h4>\n<pre class=\"highlight\"><code class>&lt;a target=&quot;_blank&quot; href=&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=123456&amp;site=qq&amp;menu=yes&quot;&gt;click here&lt;/a&gt;  \n</code></pre>\n","site":{"data":{}},"excerpt":"<h3 id=\"androidios打开手机qq与指定聊天界面\"><a class=\"markdownIt-Anchor\" href=\"#androidios打开手机qq与指定聊天界面\"></a> Android，iOS打开手机QQ与指定聊天界面</h3>\n<blockquote>\n<p>在浏览器中可以通过JS代码打开QQ并弹出聊天界面，一般作为客服QQ使用。<br>\n在移动端可以使用schema模式来启动手机QQ。</p>\n</blockquote>","more":"<h4 id=\"android\"><a class=\"markdownIt-Anchor\" href=\"#android\"></a> Android:</h4>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String url=<span class=\"string\">\"mqqwpa://im/chat?chat_type=wpa&amp;uin=123456\"</span><span class=\"comment\">;  </span></span><br><span class=\"line\">startActivity(<span class=\"name\">new</span> Intent(<span class=\"name\">Intent</span>.ACTION_VIEW, Uri.parse(<span class=\"name\">url</span>)))<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"ios\"><a class=\"markdownIt-Anchor\" href=\"#ios\"></a> iOS:</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectZero</span>];  </span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"mqq://im/chat?chat_type=wpa&amp;uin=123456&amp;version=1&amp;src_type=web\"</span>];  </span><br><span class=\"line\"><span class=\"built_in\">NSURLRequest</span> *request = [<span class=\"built_in\">NSURLRequest</span> requestWithURL:url];  </span><br><span class=\"line\">webView.delegate = <span class=\"keyword\">self</span>;  </span><br><span class=\"line\">[webView loadRequest:request];  </span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:webView];</span><br></pre></td></tr></table></figure>\n<h4 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\"></a> 浏览器：</h4>\n<pre class=\"highlight\"><code class>&lt;a target=&quot;_blank&quot; href=&quot;http://wpa.qq.com/msgrd?v=3&amp;uin=123456&amp;site=qq&amp;menu=yes&quot;&gt;click here&lt;/a&gt;  \n</code></pre>"},{"title":"Android TextView 部分字体设置颜色或大小","date":"2016-03-10T13:06:03.000Z","_content":"### Android TextView 部分字体设置颜色或大小 \n>在某些情况下，会遇到某些关键字需要**高亮**显示，可Android自带的TextView支持很困难。\n\n>背景来自：今天一同学问我怎么实现，给他举例两种方式，他感觉不方便，因此我才写此文章，简单介绍下。\n\n#### 支持方式一\n可以通过HTML的方式，因为TextView可以加载HTML，因此可以简单的实现，缺点是和Android自带的字体看起来有点别扭。\n\n`````\ntextView4.setText(Html.fromHtml(\"北京市发布霾黄色预警，<font color='#ff0000'><small><small>外出携带好</small></small></font>口罩\"));\n`````\n<!--more-->\n\n#### 支持方式二\n可以通过代码的方式，对TextView设置部分字体的颜色。\n\n`````\nSpannable span = new SpannableString(textView3.getText());\nspan.setSpan(new AbsoluteSizeSpan(58), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\nspan.setSpan(new ForegroundColorSpan(Color.RED), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\nspan.setSpan(new BackgroundColorSpan(Color.YELLOW), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\ntextView3.setText(span);\n`````\n\n\n----\n以上两种方式，我感觉就可以了，不过有些同学感觉就是用起来比较麻烦，因此我们可以封装下第二种方法，变为第三种方法，也就是我要写的。\n\n#### 支持方式三\n\n通过自定义View的方式来封装这些代码。\n\n##### 首先是CTextView extends TextView,当然名称无所谓，自己喜欢就好\n\n`````\npublic class CTextView extends TextView {\n    private float normalTextSize;\n    private float highlightTextSize;\n    private int normalTextColor;\n    private int highlightTextColor;\n\n    public CTextView(Context context) {\n        super(context);\n    }\n\n    public CTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        TypedArray typedArray = null;\n        try {\n            typedArray = context.obtainStyledAttributes(attrs, R.styleable.CTextView, 0, 0);\n            normalTextSize = typedArray.getDimension(R.styleable.CTextView_normal_textsize, 14);\n            highlightTextSize = typedArray.getDimension(R.styleable.CTextView_highlight_textsize, 14);\n            normalTextColor = typedArray.getColor(R.styleable.CTextView_normal_textcolor, Color.BLACK);\n            highlightTextColor = typedArray.getColor(R.styleable.CTextView_highlight_textcolor, Color.BLACK);\n\n        } finally {\n            if (typedArray != null) {\n                typedArray.recycle();\n            }\n        }\n    }\n\n    public void setText(String allString, String highlightString) {\n        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();\n        spannableStringBuilder.append(allString);\n        spannableStringBuilder.setSpan(new AbsoluteSizeSpan((int) normalTextSize, true), 0, allString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        spannableStringBuilder.setSpan(new ForegroundColorSpan(normalTextColor), 0, allString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        List<Integer> list = getSubIndex(0, allString, highlightString);\n        for (int i = 0; i < list.size(); i++) {\n            int index = list.get(i);\n            spannableStringBuilder.setSpan(new StyleSpan(Typeface.BOLD), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            spannableStringBuilder.setSpan(new AbsoluteSizeSpan((int) highlightTextSize, true), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            spannableStringBuilder.setSpan(new ForegroundColorSpan(highlightTextColor), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        }\n        setMovementMethod(LinkMovementMethod.getInstance());\n        setText(spannableStringBuilder);\n    }\n\n    private List<Integer> getSubIndex(int startIndex, String allString, String highlightString) {\n        List<Integer> list = new ArrayList<Integer>();\n        int index = -1;\n        if (startIndex == 0) {\n            index = allString.indexOf(highlightString);\n        } else {\n            index = allString.indexOf(highlightString, startIndex);\n        }\n        if (index != -1) {\n            list.add(index);\n            list.addAll(getSubIndex(index + highlightString.length(), allString, highlightString));\n        }\n        return list;\n    }\n\n}\n\n`````\n\n##### 定义上面类中用到的attrs.xml\n\n`````\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CTextView\">\n        <attr name=\"normal_textsize\" format=\"dimension\"/>\n        <attr name=\"highlight_textsize\" format=\"dimension\"/>\n        <attr name=\"normal_textcolor\" format=\"color\"/>\n        <attr name=\"highlight_textcolor\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n`````\n\n##### 在xml中的TextView的用法\n\n`````\n<LinearLayout \n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:orientation=\"vertical\">\n\t<!-- 此处是包名+类名，请写自己的包名 -->\n<com.easemob.ctextview.CTextView\n    android:id=\"@+id/c_textview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    app:normal_textsize=\"12sp\"\n    app:highlight_textsize=\"20sp\"\n    app:normal_textcolor=\"#000\"\n    app:highlight_textcolor=\"#f00\" />\n</LinearLayout>\n`````\n\n##### 在Activity中的用法\n\n`````\nCTextView cTextView = (CTextView) findViewById(R.id.c_textview);\ncTextView.setText(\"欢迎大家看我说了这么久，大家辛苦了！\",\"大家\");\n`````\n\n##### 结果如下：\n![result ctextview](http://7xpj58.com1.z0.glb.clouddn.com/img_20160310202020.png)\n\n\n\n","source":"_posts/Android-TextView-部分字体设置颜色或大小.md","raw":"---\ntitle: Android TextView 部分字体设置颜色或大小\ndate: 2016-03-10 21:06:03\ntags: [android]\ncategories: android\n---\n### Android TextView 部分字体设置颜色或大小 \n>在某些情况下，会遇到某些关键字需要**高亮**显示，可Android自带的TextView支持很困难。\n\n>背景来自：今天一同学问我怎么实现，给他举例两种方式，他感觉不方便，因此我才写此文章，简单介绍下。\n\n#### 支持方式一\n可以通过HTML的方式，因为TextView可以加载HTML，因此可以简单的实现，缺点是和Android自带的字体看起来有点别扭。\n\n`````\ntextView4.setText(Html.fromHtml(\"北京市发布霾黄色预警，<font color='#ff0000'><small><small>外出携带好</small></small></font>口罩\"));\n`````\n<!--more-->\n\n#### 支持方式二\n可以通过代码的方式，对TextView设置部分字体的颜色。\n\n`````\nSpannable span = new SpannableString(textView3.getText());\nspan.setSpan(new AbsoluteSizeSpan(58), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\nspan.setSpan(new ForegroundColorSpan(Color.RED), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\nspan.setSpan(new BackgroundColorSpan(Color.YELLOW), 11, 16, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\ntextView3.setText(span);\n`````\n\n\n----\n以上两种方式，我感觉就可以了，不过有些同学感觉就是用起来比较麻烦，因此我们可以封装下第二种方法，变为第三种方法，也就是我要写的。\n\n#### 支持方式三\n\n通过自定义View的方式来封装这些代码。\n\n##### 首先是CTextView extends TextView,当然名称无所谓，自己喜欢就好\n\n`````\npublic class CTextView extends TextView {\n    private float normalTextSize;\n    private float highlightTextSize;\n    private int normalTextColor;\n    private int highlightTextColor;\n\n    public CTextView(Context context) {\n        super(context);\n    }\n\n    public CTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        TypedArray typedArray = null;\n        try {\n            typedArray = context.obtainStyledAttributes(attrs, R.styleable.CTextView, 0, 0);\n            normalTextSize = typedArray.getDimension(R.styleable.CTextView_normal_textsize, 14);\n            highlightTextSize = typedArray.getDimension(R.styleable.CTextView_highlight_textsize, 14);\n            normalTextColor = typedArray.getColor(R.styleable.CTextView_normal_textcolor, Color.BLACK);\n            highlightTextColor = typedArray.getColor(R.styleable.CTextView_highlight_textcolor, Color.BLACK);\n\n        } finally {\n            if (typedArray != null) {\n                typedArray.recycle();\n            }\n        }\n    }\n\n    public void setText(String allString, String highlightString) {\n        SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder();\n        spannableStringBuilder.append(allString);\n        spannableStringBuilder.setSpan(new AbsoluteSizeSpan((int) normalTextSize, true), 0, allString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        spannableStringBuilder.setSpan(new ForegroundColorSpan(normalTextColor), 0, allString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        List<Integer> list = getSubIndex(0, allString, highlightString);\n        for (int i = 0; i < list.size(); i++) {\n            int index = list.get(i);\n            spannableStringBuilder.setSpan(new StyleSpan(Typeface.BOLD), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            spannableStringBuilder.setSpan(new AbsoluteSizeSpan((int) highlightTextSize, true), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n            spannableStringBuilder.setSpan(new ForegroundColorSpan(highlightTextColor), index, index + highlightString.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);\n        }\n        setMovementMethod(LinkMovementMethod.getInstance());\n        setText(spannableStringBuilder);\n    }\n\n    private List<Integer> getSubIndex(int startIndex, String allString, String highlightString) {\n        List<Integer> list = new ArrayList<Integer>();\n        int index = -1;\n        if (startIndex == 0) {\n            index = allString.indexOf(highlightString);\n        } else {\n            index = allString.indexOf(highlightString, startIndex);\n        }\n        if (index != -1) {\n            list.add(index);\n            list.addAll(getSubIndex(index + highlightString.length(), allString, highlightString));\n        }\n        return list;\n    }\n\n}\n\n`````\n\n##### 定义上面类中用到的attrs.xml\n\n`````\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CTextView\">\n        <attr name=\"normal_textsize\" format=\"dimension\"/>\n        <attr name=\"highlight_textsize\" format=\"dimension\"/>\n        <attr name=\"normal_textcolor\" format=\"color\"/>\n        <attr name=\"highlight_textcolor\" format=\"color\"/>\n    </declare-styleable>\n</resources>\n`````\n\n##### 在xml中的TextView的用法\n\n`````\n<LinearLayout \n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:orientation=\"vertical\">\n\t<!-- 此处是包名+类名，请写自己的包名 -->\n<com.easemob.ctextview.CTextView\n    android:id=\"@+id/c_textview\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    app:normal_textsize=\"12sp\"\n    app:highlight_textsize=\"20sp\"\n    app:normal_textcolor=\"#000\"\n    app:highlight_textcolor=\"#f00\" />\n</LinearLayout>\n`````\n\n##### 在Activity中的用法\n\n`````\nCTextView cTextView = (CTextView) findViewById(R.id.c_textview);\ncTextView.setText(\"欢迎大家看我说了这么久，大家辛苦了！\",\"大家\");\n`````\n\n##### 结果如下：\n![result ctextview](http://7xpj58.com1.z0.glb.clouddn.com/img_20160310202020.png)\n\n\n\n","slug":"Android-TextView-部分字体设置颜色或大小","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxee0003sifymfpq3foe","content":"<h3 id=\"android-textview-部分字体设置颜色或大小\"><a class=\"markdownIt-Anchor\" href=\"#android-textview-部分字体设置颜色或大小\"></a> Android TextView 部分字体设置颜色或大小</h3>\n<blockquote>\n<p>在某些情况下，会遇到某些关键字需要<strong>高亮</strong>显示，可Android自带的TextView支持很困难。</p>\n</blockquote>\n<blockquote>\n<p>背景来自：今天一同学问我怎么实现，给他举例两种方式，他感觉不方便，因此我才写此文章，简单介绍下。</p>\n</blockquote>\n<h4 id=\"支持方式一\"><a class=\"markdownIt-Anchor\" href=\"#支持方式一\"></a> 支持方式一</h4>\n<p>可以通过HTML的方式，因为TextView可以加载HTML，因此可以简单的实现，缺点是和Android自带的字体看起来有点别扭。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textView4.setText(Html.fromHtml(\"北京市发布霾黄色预警，<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">'#ff0000'</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>外出携带好<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span>口罩\"));</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"支持方式二\"><a class=\"markdownIt-Anchor\" href=\"#支持方式二\"></a> 支持方式二</h4>\n<p>可以通过代码的方式，对TextView设置部分字体的颜色。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spannable span = <span class=\"keyword\">new</span> <span class=\"constructor\">SpannableString(<span class=\"params\">textView3</span>.<span class=\"params\">getText</span>()</span>);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan(58)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(Color.RED)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> BackgroundColorSpan(Color.YELLOW)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">textView3.set<span class=\"constructor\">Text(<span class=\"params\">span</span>)</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上两种方式，我感觉就可以了，不过有些同学感觉就是用起来比较麻烦，因此我们可以封装下第二种方法，变为第三种方法，也就是我要写的。</p>\n<h4 id=\"支持方式三\"><a class=\"markdownIt-Anchor\" href=\"#支持方式三\"></a> 支持方式三</h4>\n<p>通过自定义View的方式来封装这些代码。</p>\n<h5 id=\"首先是ctextview-extends-textview当然名称无所谓自己喜欢就好\"><a class=\"markdownIt-Anchor\" href=\"#首先是ctextview-extends-textview当然名称无所谓自己喜欢就好\"></a> 首先是CTextView extends TextView,当然名称无所谓，自己喜欢就好</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> CTextView extends TextView &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> normalTextSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> highlightTextSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> normalTextColor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> highlightTextColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">CTextView(Context <span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">CTextView(Context <span class=\"params\">context</span>, AttributeSet <span class=\"params\">attrs</span>)</span> &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        TypedArray typedArray = null;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            typedArray = context.obtain<span class=\"constructor\">StyledAttributes(<span class=\"params\">attrs</span>, R.<span class=\"params\">styleable</span>.CTextView, 0, 0)</span>;</span><br><span class=\"line\">            normalTextSize = typedArray.get<span class=\"constructor\">Dimension(R.<span class=\"params\">styleable</span>.CTextView_normal_textsize, 14)</span>;</span><br><span class=\"line\">            highlightTextSize = typedArray.get<span class=\"constructor\">Dimension(R.<span class=\"params\">styleable</span>.CTextView_highlight_textsize, 14)</span>;</span><br><span class=\"line\">            normalTextColor = typedArray.get<span class=\"constructor\">Color(R.<span class=\"params\">styleable</span>.CTextView_normal_textcolor, Color.BLACK)</span>;</span><br><span class=\"line\">            highlightTextColor = typedArray.get<span class=\"constructor\">Color(R.<span class=\"params\">styleable</span>.CTextView_highlight_textcolor, Color.BLACK)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (typedArray != null) &#123;</span><br><span class=\"line\">                typedArray.recycle<span class=\"literal\">()</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void set<span class=\"constructor\">Text(String <span class=\"params\">allString</span>, String <span class=\"params\">highlightString</span>)</span> &#123;</span><br><span class=\"line\">        SpannableStringBuilder spannableStringBuilder = <span class=\"keyword\">new</span> <span class=\"constructor\">SpannableStringBuilder()</span>;</span><br><span class=\"line\">        spannableStringBuilder.append(allString);</span><br><span class=\"line\">        spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan((<span class=\"params\">int</span>)</span> normalTextSize, <span class=\"literal\">true</span>), <span class=\"number\">0</span>, allString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(<span class=\"params\">normalTextColor</span>)</span>, <span class=\"number\">0</span>, allString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        List&lt;Integer&gt; <span class=\"built_in\">list</span> = get<span class=\"constructor\">SubIndex(0, <span class=\"params\">allString</span>, <span class=\"params\">highlightString</span>)</span>;</span><br><span class=\"line\">        for (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.size<span class=\"literal\">()</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> index = <span class=\"built_in\">list</span>.get(i);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> StyleSpan(Typeface.BOLD)</span>, index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan((<span class=\"params\">int</span>)</span> highlightTextSize, <span class=\"literal\">true</span>), index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(<span class=\"params\">highlightTextColor</span>)</span>, index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set<span class=\"constructor\">MovementMethod(LinkMovementMethod.<span class=\"params\">getInstance</span>()</span>);</span><br><span class=\"line\">        set<span class=\"constructor\">Text(<span class=\"params\">spannableStringBuilder</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; get<span class=\"constructor\">SubIndex(<span class=\"params\">int</span> <span class=\"params\">startIndex</span>, String <span class=\"params\">allString</span>, String <span class=\"params\">highlightString</span>)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;<span class=\"literal\">()</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startIndex<span class=\"operator\"> == </span><span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            index = allString.index<span class=\"constructor\">Of(<span class=\"params\">highlightString</span>)</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            index = allString.index<span class=\"constructor\">Of(<span class=\"params\">highlightString</span>, <span class=\"params\">startIndex</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>.add(index);</span><br><span class=\"line\">            <span class=\"built_in\">list</span>.add<span class=\"constructor\">All(<span class=\"params\">getSubIndex</span>(<span class=\"params\">index</span> + <span class=\"params\">highlightString</span>.<span class=\"params\">length</span>()</span>, allString, highlightString));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"定义上面类中用到的attrsxml\"><a class=\"markdownIt-Anchor\" href=\"#定义上面类中用到的attrsxml\"></a> 定义上面类中用到的attrs.xml</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CTextView\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"normal_textsize\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"highlight_textsize\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"normal_textcolor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"highlight_textcolor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在xml中的textview的用法\"><a class=\"markdownIt-Anchor\" href=\"#在xml中的textview的用法\"></a> 在xml中的TextView的用法</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 此处是包名+类名，请写自己的包名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.easemob.ctextview.CTextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/c_textview\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:normal_textsize</span>=<span class=\"string\">\"12sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:highlight_textsize</span>=<span class=\"string\">\"20sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:normal_textcolor</span>=<span class=\"string\">\"#000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:highlight_textcolor</span>=<span class=\"string\">\"#f00\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在activity中的用法\"><a class=\"markdownIt-Anchor\" href=\"#在activity中的用法\"></a> 在Activity中的用法</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTextView cTextView = (CTextView) find<span class=\"constructor\">ViewById(R.<span class=\"params\">id</span>.<span class=\"params\">c_textview</span>)</span>;</span><br><span class=\"line\">cTextView.set<span class=\"constructor\">Text(<span class=\"string\">\"欢迎大家看我说了这么久，大家辛苦了！\"</span>,<span class=\"string\">\"大家\"</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"结果如下\"><a class=\"markdownIt-Anchor\" href=\"#结果如下\"></a> 结果如下：</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/img_20160310202020.png\" alt=\"result ctextview\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"android-textview-部分字体设置颜色或大小\"><a class=\"markdownIt-Anchor\" href=\"#android-textview-部分字体设置颜色或大小\"></a> Android TextView 部分字体设置颜色或大小</h3>\n<blockquote>\n<p>在某些情况下，会遇到某些关键字需要<strong>高亮</strong>显示，可Android自带的TextView支持很困难。</p>\n</blockquote>\n<blockquote>\n<p>背景来自：今天一同学问我怎么实现，给他举例两种方式，他感觉不方便，因此我才写此文章，简单介绍下。</p>\n</blockquote>\n<h4 id=\"支持方式一\"><a class=\"markdownIt-Anchor\" href=\"#支持方式一\"></a> 支持方式一</h4>\n<p>可以通过HTML的方式，因为TextView可以加载HTML，因此可以简单的实现，缺点是和Android自带的字体看起来有点别扭。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textView4.setText(Html.fromHtml(\"北京市发布霾黄色预警，<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">'#ff0000'</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">small</span>&gt;</span>外出携带好<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span>口罩\"));</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"支持方式二\"><a class=\"markdownIt-Anchor\" href=\"#支持方式二\"></a> 支持方式二</h4>\n<p>可以通过代码的方式，对TextView设置部分字体的颜色。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Spannable span = <span class=\"keyword\">new</span> <span class=\"constructor\">SpannableString(<span class=\"params\">textView3</span>.<span class=\"params\">getText</span>()</span>);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan(58)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(Color.RED)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">span.set<span class=\"constructor\">Span(<span class=\"params\">new</span> BackgroundColorSpan(Color.YELLOW)</span>, <span class=\"number\">11</span>, <span class=\"number\">16</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">textView3.set<span class=\"constructor\">Text(<span class=\"params\">span</span>)</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>以上两种方式，我感觉就可以了，不过有些同学感觉就是用起来比较麻烦，因此我们可以封装下第二种方法，变为第三种方法，也就是我要写的。</p>\n<h4 id=\"支持方式三\"><a class=\"markdownIt-Anchor\" href=\"#支持方式三\"></a> 支持方式三</h4>\n<p>通过自定义View的方式来封装这些代码。</p>\n<h5 id=\"首先是ctextview-extends-textview当然名称无所谓自己喜欢就好\"><a class=\"markdownIt-Anchor\" href=\"#首先是ctextview-extends-textview当然名称无所谓自己喜欢就好\"></a> 首先是CTextView extends TextView,当然名称无所谓，自己喜欢就好</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> CTextView extends TextView &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> normalTextSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> highlightTextSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> normalTextColor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> highlightTextColor;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">CTextView(Context <span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        super(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"constructor\">CTextView(Context <span class=\"params\">context</span>, AttributeSet <span class=\"params\">attrs</span>)</span> &#123;</span><br><span class=\"line\">        super(context, attrs);</span><br><span class=\"line\">        TypedArray typedArray = null;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            typedArray = context.obtain<span class=\"constructor\">StyledAttributes(<span class=\"params\">attrs</span>, R.<span class=\"params\">styleable</span>.CTextView, 0, 0)</span>;</span><br><span class=\"line\">            normalTextSize = typedArray.get<span class=\"constructor\">Dimension(R.<span class=\"params\">styleable</span>.CTextView_normal_textsize, 14)</span>;</span><br><span class=\"line\">            highlightTextSize = typedArray.get<span class=\"constructor\">Dimension(R.<span class=\"params\">styleable</span>.CTextView_highlight_textsize, 14)</span>;</span><br><span class=\"line\">            normalTextColor = typedArray.get<span class=\"constructor\">Color(R.<span class=\"params\">styleable</span>.CTextView_normal_textcolor, Color.BLACK)</span>;</span><br><span class=\"line\">            highlightTextColor = typedArray.get<span class=\"constructor\">Color(R.<span class=\"params\">styleable</span>.CTextView_highlight_textcolor, Color.BLACK)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (typedArray != null) &#123;</span><br><span class=\"line\">                typedArray.recycle<span class=\"literal\">()</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void set<span class=\"constructor\">Text(String <span class=\"params\">allString</span>, String <span class=\"params\">highlightString</span>)</span> &#123;</span><br><span class=\"line\">        SpannableStringBuilder spannableStringBuilder = <span class=\"keyword\">new</span> <span class=\"constructor\">SpannableStringBuilder()</span>;</span><br><span class=\"line\">        spannableStringBuilder.append(allString);</span><br><span class=\"line\">        spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan((<span class=\"params\">int</span>)</span> normalTextSize, <span class=\"literal\">true</span>), <span class=\"number\">0</span>, allString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(<span class=\"params\">normalTextColor</span>)</span>, <span class=\"number\">0</span>, allString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        List&lt;Integer&gt; <span class=\"built_in\">list</span> = get<span class=\"constructor\">SubIndex(0, <span class=\"params\">allString</span>, <span class=\"params\">highlightString</span>)</span>;</span><br><span class=\"line\">        for (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>.size<span class=\"literal\">()</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> index = <span class=\"built_in\">list</span>.get(i);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> StyleSpan(Typeface.BOLD)</span>, index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> AbsoluteSizeSpan((<span class=\"params\">int</span>)</span> highlightTextSize, <span class=\"literal\">true</span>), index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">            spannableStringBuilder.set<span class=\"constructor\">Span(<span class=\"params\">new</span> ForegroundColorSpan(<span class=\"params\">highlightTextColor</span>)</span>, index, index + highlightString.length<span class=\"literal\">()</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set<span class=\"constructor\">MovementMethod(LinkMovementMethod.<span class=\"params\">getInstance</span>()</span>);</span><br><span class=\"line\">        set<span class=\"constructor\">Text(<span class=\"params\">spannableStringBuilder</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; get<span class=\"constructor\">SubIndex(<span class=\"params\">int</span> <span class=\"params\">startIndex</span>, String <span class=\"params\">allString</span>, String <span class=\"params\">highlightString</span>)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; <span class=\"built_in\">list</span> = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;<span class=\"literal\">()</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (startIndex<span class=\"operator\"> == </span><span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            index = allString.index<span class=\"constructor\">Of(<span class=\"params\">highlightString</span>)</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            index = allString.index<span class=\"constructor\">Of(<span class=\"params\">highlightString</span>, <span class=\"params\">startIndex</span>)</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>.add(index);</span><br><span class=\"line\">            <span class=\"built_in\">list</span>.add<span class=\"constructor\">All(<span class=\"params\">getSubIndex</span>(<span class=\"params\">index</span> + <span class=\"params\">highlightString</span>.<span class=\"params\">length</span>()</span>, allString, highlightString));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return <span class=\"built_in\">list</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"定义上面类中用到的attrsxml\"><a class=\"markdownIt-Anchor\" href=\"#定义上面类中用到的attrsxml\"></a> 定义上面类中用到的attrs.xml</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CTextView\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"normal_textsize\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"highlight_textsize\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"normal_textcolor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"highlight_textcolor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在xml中的textview的用法\"><a class=\"markdownIt-Anchor\" href=\"#在xml中的textview的用法\"></a> 在xml中的TextView的用法</h5>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 此处是包名+类名，请写自己的包名 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.easemob.ctextview.CTextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/c_textview\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:normal_textsize</span>=<span class=\"string\">\"12sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:highlight_textsize</span>=<span class=\"string\">\"20sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:normal_textcolor</span>=<span class=\"string\">\"#000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:highlight_textcolor</span>=<span class=\"string\">\"#f00\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"在activity中的用法\"><a class=\"markdownIt-Anchor\" href=\"#在activity中的用法\"></a> 在Activity中的用法</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTextView cTextView = (CTextView) find<span class=\"constructor\">ViewById(R.<span class=\"params\">id</span>.<span class=\"params\">c_textview</span>)</span>;</span><br><span class=\"line\">cTextView.set<span class=\"constructor\">Text(<span class=\"string\">\"欢迎大家看我说了这么久，大家辛苦了！\"</span>,<span class=\"string\">\"大家\"</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"结果如下\"><a class=\"markdownIt-Anchor\" href=\"#结果如下\"></a> 结果如下：</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/img_20160310202020.png\" alt=\"result ctextview\"></p>"},{"title":"Android.mk、Application.mk","date":"2016-03-14T03:42:27.000Z","_content":"\n# Android.mk、Application.mk\n\n### Application.mk\nApplication.mk 目的是描述在你的应用程序中所需要的模块(即静态库或动态库)，如下是表示编译出所有对应的平台。\n\n`````\nAPP_ABI := all\n`````\n### Android.mk\nAndroid.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等\n\n`````\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hello-jni\nLOCAL_SRC_FILES := hello-jni.c\n\ninclude $(BUILD_SHARED_LIBRARY)\n`````\n<!-- more -->\n\n#### LOCAL_PATH := $(call my-dir)\n每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。\n宏 my-dir 则由Build System提供。返回包含Android.mk的目录路径。\n\n#### include $(CLEAR_VARS)\nCLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.\n例如：LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH.\n这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响。\n\n#### LOCAL_MODULE := hello-jni\nLOCAL_MODULE 模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。\nBuild System会自动添加适当的前缀和后缀。例如, foo, 要产生动态库，则生成libfoo.so。但请注意：如果模块名被定为：libfoo。则生成libfoo.so。不再加前缀。\n\n#### LOCAL_SRC_FILES := hello-jni.c\nLOCAL_SRC_FILES变量必须包含将要打包入模块的C/C++源码。\n不必列出头文件，Build System会自动帮我们找到依赖文件。\n缺省的C++源码的扩展名为.cpp。也可以修改，通过LOCAL_CPP_EXTENSION。\n\n#### include $(BUILD_SHARED_LIBRARY)\nBUILD_SHARED_LIBRARY: 是Build System提供的一个变量，指向一个GNU Makefile Script。\n它负责收集自从上次调用`include $(CLEAR_VARS)`后的所有LOCAL_xxx信息。并决定编译什么。\n\n##### BUILD_STATIC_LIBRARY: 编译为静态库。\n##### BUILD_SHARED_LIBRARY: 编译为动态库。\n##### BUILD_EXECUTABLE: 编译为Native C可执行程序\n\n### 多文件编译\n\n`````\nLOCAL_PATH:= $(call my-dir)\n\n# first lib, which will be built statically\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := libtwolib-first\nLOCAL_SRC_FILES := first.c\n\ninclude $(BUILD_STATIC_LIBRARY)\n\n# second lib, which will depend on and include the first one\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := libtwolib-second\nLOCAL_SRC_FILES := second.c\n\nLOCAL_STATIC_LIBRARIES := libtwolib-first\n\ninclude $(BUILD_SHARED_LIBRARY)\n`````\n\n### 语法详解\n\n[android.mk](http://android.mk/)\n\n> 作者：ben_speed \n> 文章源自：http://www.jianshu.com/p/46089c2276f3\n\n","source":"_posts/Android-mk、Application-mk.md","raw":"---\ntitle: Android.mk、Application.mk\ndate: 2016-03-14 11:42:27\ntags: [ndk, android]\ncategories: android\n---\n\n# Android.mk、Application.mk\n\n### Application.mk\nApplication.mk 目的是描述在你的应用程序中所需要的模块(即静态库或动态库)，如下是表示编译出所有对应的平台。\n\n`````\nAPP_ABI := all\n`````\n### Android.mk\nAndroid.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等\n\n`````\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hello-jni\nLOCAL_SRC_FILES := hello-jni.c\n\ninclude $(BUILD_SHARED_LIBRARY)\n`````\n<!-- more -->\n\n#### LOCAL_PATH := $(call my-dir)\n每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。\n宏 my-dir 则由Build System提供。返回包含Android.mk的目录路径。\n\n#### include $(CLEAR_VARS)\nCLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.\n例如：LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH.\n这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响。\n\n#### LOCAL_MODULE := hello-jni\nLOCAL_MODULE 模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。\nBuild System会自动添加适当的前缀和后缀。例如, foo, 要产生动态库，则生成libfoo.so。但请注意：如果模块名被定为：libfoo。则生成libfoo.so。不再加前缀。\n\n#### LOCAL_SRC_FILES := hello-jni.c\nLOCAL_SRC_FILES变量必须包含将要打包入模块的C/C++源码。\n不必列出头文件，Build System会自动帮我们找到依赖文件。\n缺省的C++源码的扩展名为.cpp。也可以修改，通过LOCAL_CPP_EXTENSION。\n\n#### include $(BUILD_SHARED_LIBRARY)\nBUILD_SHARED_LIBRARY: 是Build System提供的一个变量，指向一个GNU Makefile Script。\n它负责收集自从上次调用`include $(CLEAR_VARS)`后的所有LOCAL_xxx信息。并决定编译什么。\n\n##### BUILD_STATIC_LIBRARY: 编译为静态库。\n##### BUILD_SHARED_LIBRARY: 编译为动态库。\n##### BUILD_EXECUTABLE: 编译为Native C可执行程序\n\n### 多文件编译\n\n`````\nLOCAL_PATH:= $(call my-dir)\n\n# first lib, which will be built statically\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := libtwolib-first\nLOCAL_SRC_FILES := first.c\n\ninclude $(BUILD_STATIC_LIBRARY)\n\n# second lib, which will depend on and include the first one\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE    := libtwolib-second\nLOCAL_SRC_FILES := second.c\n\nLOCAL_STATIC_LIBRARIES := libtwolib-first\n\ninclude $(BUILD_SHARED_LIBRARY)\n`````\n\n### 语法详解\n\n[android.mk](http://android.mk/)\n\n> 作者：ben_speed \n> 文章源自：http://www.jianshu.com/p/46089c2276f3\n\n","slug":"Android-mk、Application-mk","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxeh0007sifyc48tnq6t","content":"<h1 id=\"androidmk\"><a class=\"markdownIt-Anchor\" href=\"#androidmk\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a>、<a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h1>\n<h3 id=\"applicationmk\"><a class=\"markdownIt-Anchor\" href=\"#applicationmk\"></a> <a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h3>\n<p><a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a> 目的是描述在你的应用程序中所需要的模块(即静态库或动态库)，如下是表示编译出所有对应的平台。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_ABI := all</span><br></pre></td></tr></table></figure>\n<h3 id=\"androidmk-2\"><a class=\"markdownIt-Anchor\" href=\"#androidmk-2\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></h3>\n<p>Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">LOCAL_SRC_FILES := hello-jni.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"local_path-call-my-dir\"><a class=\"markdownIt-Anchor\" href=\"#local_path-call-my-dir\"></a> LOCAL_PATH := $(call my-dir)</h4>\n<p>每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。<br>\n宏 my-dir 则由Build System提供。返回包含Android.mk的目录路径。</p>\n<h4 id=\"include-clear_vars\"><a class=\"markdownIt-Anchor\" href=\"#include-clear_vars\"></a> include $(CLEAR_VARS)</h4>\n<p>CLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.<br>\n例如：LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH.<br>\n这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响。</p>\n<h4 id=\"local_module-hello-jni\"><a class=\"markdownIt-Anchor\" href=\"#local_module-hello-jni\"></a> LOCAL_MODULE := hello-jni</h4>\n<p>LOCAL_MODULE 模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。<br>\nBuild System会自动添加适当的前缀和后缀。例如, foo, 要产生动态库，<a href=\"http://xn--libfoo-2m3jw86hu39a.so\" target=\"_blank\" rel=\"noopener\">则生成libfoo.so</a>。但请注意：如果模块名被定为：libfoo。<a href=\"http://xn--libfoo-2m3jw86hu39a.so\" target=\"_blank\" rel=\"noopener\">则生成libfoo.so</a>。不再加前缀。</p>\n<h4 id=\"local_src_files-hello-jnic\"><a class=\"markdownIt-Anchor\" href=\"#local_src_files-hello-jnic\"></a> LOCAL_SRC_FILES := hello-jni.c</h4>\n<p>LOCAL_SRC_FILES变量必须包含将要打包入模块的C/C<ins>源码。<br>\n不必列出头文件，Build System会自动帮我们找到依赖文件。<br>\n缺省的C</ins>源码的扩展名为.cpp。也可以修改，通过LOCAL_CPP_EXTENSION。</p>\n<h4 id=\"include-build_shared_library\"><a class=\"markdownIt-Anchor\" href=\"#include-build_shared_library\"></a> include $(BUILD_SHARED_LIBRARY)</h4>\n<p>BUILD_SHARED_LIBRARY: 是Build System提供的一个变量，指向一个GNU Makefile Script。<br>\n它负责收集自从上次调用<code>include $(CLEAR_VARS)</code>后的所有LOCAL_xxx信息。并决定编译什么。</p>\n<h5 id=\"build_static_library-编译为静态库\"><a class=\"markdownIt-Anchor\" href=\"#build_static_library-编译为静态库\"></a> BUILD_STATIC_LIBRARY: 编译为静态库。</h5>\n<h5 id=\"build_shared_library-编译为动态库\"><a class=\"markdownIt-Anchor\" href=\"#build_shared_library-编译为动态库\"></a> BUILD_SHARED_LIBRARY: 编译为动态库。</h5>\n<h5 id=\"build_executable-编译为native-c可执行程序\"><a class=\"markdownIt-Anchor\" href=\"#build_executable-编译为native-c可执行程序\"></a> BUILD_EXECUTABLE: 编译为Native C可执行程序</h5>\n<h3 id=\"多文件编译\"><a class=\"markdownIt-Anchor\" href=\"#多文件编译\"></a> 多文件编译</h3>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH:= <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># first lib, which will be built statically</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := libtwolib-first</span><br><span class=\"line\">LOCAL_SRC_FILES := first.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_STATIC_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># second lib, which will depend on and include the first one</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := libtwolib-second</span><br><span class=\"line\">LOCAL_SRC_FILES := second.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := libtwolib-first</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语法详解\"><a class=\"markdownIt-Anchor\" href=\"#语法详解\"></a> 语法详解</h3>\n<p><a href=\"http://android.mk/\" target=\"_blank\" rel=\"noopener\">android.mk</a></p>\n<blockquote>\n<p>作者：ben_speed<br>\n文章源自：<a href=\"http://www.jianshu.com/p/46089c2276f3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/46089c2276f3</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"androidmk\"><a class=\"markdownIt-Anchor\" href=\"#androidmk\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a>、<a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h1>\n<h3 id=\"applicationmk\"><a class=\"markdownIt-Anchor\" href=\"#applicationmk\"></a> <a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h3>\n<p><a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a> 目的是描述在你的应用程序中所需要的模块(即静态库或动态库)，如下是表示编译出所有对应的平台。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_ABI := all</span><br></pre></td></tr></table></figure>\n<h3 id=\"androidmk-2\"><a class=\"markdownIt-Anchor\" href=\"#androidmk-2\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></h3>\n<p>Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">LOCAL_SRC_FILES := hello-jni.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>","more":"<h4 id=\"local_path-call-my-dir\"><a class=\"markdownIt-Anchor\" href=\"#local_path-call-my-dir\"></a> LOCAL_PATH := $(call my-dir)</h4>\n<p>每个Android.mk文件必须以定义LOCAL_PATH为开始。它用于在开发tree中查找源文件。<br>\n宏 my-dir 则由Build System提供。返回包含Android.mk的目录路径。</p>\n<h4 id=\"include-clear_vars\"><a class=\"markdownIt-Anchor\" href=\"#include-clear_vars\"></a> include $(CLEAR_VARS)</h4>\n<p>CLEAR_VARS 变量由Build System提供。并指向一个指定的GNU Makefile，由它负责清理很多LOCAL_xxx.<br>\n例如：LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等等。但不清理LOCAL_PATH.<br>\n这个清理动作是必须的，因为所有的编译控制文件由同一个GNU Make解析和执行，其变量是全局的。所以清理后才能避免相互影响。</p>\n<h4 id=\"local_module-hello-jni\"><a class=\"markdownIt-Anchor\" href=\"#local_module-hello-jni\"></a> LOCAL_MODULE := hello-jni</h4>\n<p>LOCAL_MODULE 模块必须定义，以表示Android.mk中的每一个模块。名字必须唯一且不包含空格。<br>\nBuild System会自动添加适当的前缀和后缀。例如, foo, 要产生动态库，<a href=\"http://xn--libfoo-2m3jw86hu39a.so\" target=\"_blank\" rel=\"noopener\">则生成libfoo.so</a>。但请注意：如果模块名被定为：libfoo。<a href=\"http://xn--libfoo-2m3jw86hu39a.so\" target=\"_blank\" rel=\"noopener\">则生成libfoo.so</a>。不再加前缀。</p>\n<h4 id=\"local_src_files-hello-jnic\"><a class=\"markdownIt-Anchor\" href=\"#local_src_files-hello-jnic\"></a> LOCAL_SRC_FILES := hello-jni.c</h4>\n<p>LOCAL_SRC_FILES变量必须包含将要打包入模块的C/C<ins>源码。<br>\n不必列出头文件，Build System会自动帮我们找到依赖文件。<br>\n缺省的C</ins>源码的扩展名为.cpp。也可以修改，通过LOCAL_CPP_EXTENSION。</p>\n<h4 id=\"include-build_shared_library\"><a class=\"markdownIt-Anchor\" href=\"#include-build_shared_library\"></a> include $(BUILD_SHARED_LIBRARY)</h4>\n<p>BUILD_SHARED_LIBRARY: 是Build System提供的一个变量，指向一个GNU Makefile Script。<br>\n它负责收集自从上次调用<code>include $(CLEAR_VARS)</code>后的所有LOCAL_xxx信息。并决定编译什么。</p>\n<h5 id=\"build_static_library-编译为静态库\"><a class=\"markdownIt-Anchor\" href=\"#build_static_library-编译为静态库\"></a> BUILD_STATIC_LIBRARY: 编译为静态库。</h5>\n<h5 id=\"build_shared_library-编译为动态库\"><a class=\"markdownIt-Anchor\" href=\"#build_shared_library-编译为动态库\"></a> BUILD_SHARED_LIBRARY: 编译为动态库。</h5>\n<h5 id=\"build_executable-编译为native-c可执行程序\"><a class=\"markdownIt-Anchor\" href=\"#build_executable-编译为native-c可执行程序\"></a> BUILD_EXECUTABLE: 编译为Native C可执行程序</h5>\n<h3 id=\"多文件编译\"><a class=\"markdownIt-Anchor\" href=\"#多文件编译\"></a> 多文件编译</h3>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH:= <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># first lib, which will be built statically</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := libtwolib-first</span><br><span class=\"line\">LOCAL_SRC_FILES := first.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_STATIC_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># second lib, which will depend on and include the first one</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE    := libtwolib-second</span><br><span class=\"line\">LOCAL_SRC_FILES := second.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := libtwolib-first</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"语法详解\"><a class=\"markdownIt-Anchor\" href=\"#语法详解\"></a> 语法详解</h3>\n<p><a href=\"http://android.mk/\" target=\"_blank\" rel=\"noopener\">android.mk</a></p>\n<blockquote>\n<p>作者：ben_speed<br>\n文章源自：<a href=\"http://www.jianshu.com/p/46089c2276f3\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/46089c2276f3</a></p>\n</blockquote>"},{"title":"Android中通过反射获取资源ID","date":"2017-12-05T09:19:32.000Z","_content":"\n某些时候，自己把代码打包成工具jar包，但jar包中可能引用到res中的资源，这时候不能将资源一起打包，只能通过反射机制动态获取\n\n```\n/**\n * 通过反射获取组件的id号\n */\npublic static int getCompentID(String packageName, String className,String idName) {\n\tint id = 0;\n\ttry {\n\t\tClass<?> cls = Class.forName(packageName + \".R$\" + className);\n\t\tid = cls.getField(idName).getInt(cls);\n\t} catch (Exception e) {\n\t\tLogUtil.LogPrint(LogUtil.LOG_ERROR, \"缺少\" + idName + \"文件!\");\n\t\te.printStackTrace();\n\t}\n\treturn id;\n}\n\n```","source":"_posts/Android中通过反射获取资源ID.md","raw":"---\ntitle: Android中通过反射获取资源ID\ndate: 2017-12-05 17:19:32\ntags: [android]\ncategories: android\n---\n\n某些时候，自己把代码打包成工具jar包，但jar包中可能引用到res中的资源，这时候不能将资源一起打包，只能通过反射机制动态获取\n\n```\n/**\n * 通过反射获取组件的id号\n */\npublic static int getCompentID(String packageName, String className,String idName) {\n\tint id = 0;\n\ttry {\n\t\tClass<?> cls = Class.forName(packageName + \".R$\" + className);\n\t\tid = cls.getField(idName).getInt(cls);\n\t} catch (Exception e) {\n\t\tLogUtil.LogPrint(LogUtil.LOG_ERROR, \"缺少\" + idName + \"文件!\");\n\t\te.printStackTrace();\n\t}\n\treturn id;\n}\n\n```","slug":"Android中通过反射获取资源ID","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxei0008sifycbtslosx","content":"<p>某些时候，自己把代码打包成工具jar包，但jar包中可能引用到res中的资源，这时候不能将资源一起打包，只能通过反射机制动态获取</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过反射获取组件的id号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public static <span class=\"built_in\">int</span> get<span class=\"constructor\">CompentID(String <span class=\"params\">packageName</span>, String <span class=\"params\">className</span>,String <span class=\"params\">idName</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; cls = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Class</span>.</span></span>for<span class=\"constructor\">Name(<span class=\"params\">packageName</span> + <span class=\"string\">\".R$\"</span> + <span class=\"params\">className</span>)</span>;</span><br><span class=\"line\">\t\tid = cls.get<span class=\"constructor\">Field(<span class=\"params\">idName</span>)</span>.get<span class=\"constructor\">Int(<span class=\"params\">cls</span>)</span>;</span><br><span class=\"line\">\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\tLogUtil.<span class=\"constructor\">LogPrint(LogUtil.LOG_ERROR, <span class=\"string\">\"缺少\"</span> + <span class=\"params\">idName</span> + <span class=\"string\">\"文件!\"</span>)</span>;</span><br><span class=\"line\">\t\te.print<span class=\"constructor\">StackTrace()</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>某些时候，自己把代码打包成工具jar包，但jar包中可能引用到res中的资源，这时候不能将资源一起打包，只能通过反射机制动态获取</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过反射获取组件的id号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">public static <span class=\"built_in\">int</span> get<span class=\"constructor\">CompentID(String <span class=\"params\">packageName</span>, String <span class=\"params\">className</span>,String <span class=\"params\">idName</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tClass&lt;?&gt; cls = <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Class</span>.</span></span>for<span class=\"constructor\">Name(<span class=\"params\">packageName</span> + <span class=\"string\">\".R$\"</span> + <span class=\"params\">className</span>)</span>;</span><br><span class=\"line\">\t\tid = cls.get<span class=\"constructor\">Field(<span class=\"params\">idName</span>)</span>.get<span class=\"constructor\">Int(<span class=\"params\">cls</span>)</span>;</span><br><span class=\"line\">\t&#125; catch (Exception e) &#123;</span><br><span class=\"line\">\t\tLogUtil.<span class=\"constructor\">LogPrint(LogUtil.LOG_ERROR, <span class=\"string\">\"缺少\"</span> + <span class=\"params\">idName</span> + <span class=\"string\">\"文件!\"</span>)</span>;</span><br><span class=\"line\">\t\te.print<span class=\"constructor\">StackTrace()</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Android.mk简介","date":"2018-12-07T11:50:25.000Z","_content":"\n## Android.mk简介\n\n[跳转链接](https://blog.csdn.net/fyfcauc/article/details/27545507)\n","source":"_posts/Android-mk简介.md","raw":"---\ntitle: Android.mk简介\ndate: 2018-12-07 19:50:25\ntags: [jni]\ncategories: android\n---\n\n## Android.mk简介\n\n[跳转链接](https://blog.csdn.net/fyfcauc/article/details/27545507)\n","slug":"Android-mk简介","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxej0009sifysr023nxt","content":"<h2 id=\"androidmk简介\"><a class=\"markdownIt-Anchor\" href=\"#androidmk简介\"></a> Android.mk简介</h2>\n<p><a href=\"https://blog.csdn.net/fyfcauc/article/details/27545507\" target=\"_blank\" rel=\"noopener\">跳转链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"androidmk简介\"><a class=\"markdownIt-Anchor\" href=\"#androidmk简介\"></a> Android.mk简介</h2>\n<p><a href=\"https://blog.csdn.net/fyfcauc/article/details/27545507\" target=\"_blank\" rel=\"noopener\">跳转链接</a></p>\n"},{"title":"Apktool反编译","date":"2018-04-08T05:41:44.000Z","_content":"\nAndroid的反编译，一般需要用到apktool，这里记录下当用到apktool时，基本的用法\n\n<!-- more -->\n\nApktool反编译和回编为apk，主要是apktool.jar出力，在mac或linux上一般会有个apktool，来执行apktool.jar。如果没有的话，把如下代码保存为apktool即可\n\n```\n#!/bin/bash\n#\n# Copyright (C) 2007 The Android Open Source Project\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script is a wrapper for smali.jar, so you can simply call \"smali\",\n# instead of java -jar smali.jar. It is heavily based on the \"dx\" script\n# from the Android SDK\n\n# Set up prog to be the path of this script, including following symlinks,\n# and set up progdir to be the fully-qualified pathname of its directory.\nprog=\"$0\"\nwhile [ -h \"${prog}\" ]; do\n    newProg=`/bin/ls -ld \"${prog}\"`\n\n    newProg=`expr \"${newProg}\" : \".* -> \\(.*\\)$\"`\n    if expr \"x${newProg}\" : 'x/' >/dev/null; then\n        prog=\"${newProg}\"\n    else\n        progdir=`dirname \"${prog}\"`\n        prog=\"${progdir}/${newProg}\"\n    fi\ndone\noldwd=`pwd`\nprogdir=`dirname \"${prog}\"`\ncd \"${progdir}\"\nprogdir=`pwd`\nprog=\"${progdir}\"/`basename \"${prog}\"`\ncd \"${oldwd}\"\n\njarfile=apktool.jar\nlibdir=\"$progdir\"\nif [ ! -r \"$libdir/$jarfile\" ]\nthen\n    echo `basename \"$prog\"`\": can't find $jarfile\"\n    exit 1\nfi\n\njavaOpts=\"\"\n\n# If you want DX to have more memory when executing, uncomment the following\n# line and adjust the value accordingly. Use \"java -X\" for a list of options\n# you can pass here.\n# \njavaOpts=\"-Xmx512M\"\n\n# Alternatively, this will extract any parameter \"-Jxxx\" from the command line\n# and pass them to Java (instead of to dx). This makes it possible for you to\n# add a command-line parameter such as \"-JXmx256M\" in your ant scripts, for\n# example.\nwhile expr \"x$1\" : 'x-J' >/dev/null; do\n    opt=`expr \"$1\" : '-J\\(.*\\)'`\n    javaOpts=\"${javaOpts} -${opt}\"\n    shift\ndone\n\nif [ \"$OSTYPE\" = \"cygwin\" ] ; then\n\tjarpath=`cygpath -w  \"$libdir/$jarfile\"`\nelse\n\tjarpath=\"$libdir/$jarfile\"\nfi\n\n# add current location to path for aapt\nPATH=$PATH:`pwd`;\nexport PATH;\nexec java $javaOpts -Djava.awt.headless=true -jar \"$jarpath\" \"$@\"\n```\n\n#### 反编译apk\n\n常用命令行为：\n\n```\n$ apktool d app-release.apk\nI: Using Apktool 2.3.2 on app-release.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: $HOME/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n$\n\n```\n\n它的其他语法还有：\n\n```\n$ apktool d foo.jar\n// decodes foo.jar to foo.jar.out folder\n\n$ apktool decode foo.jar\n// decodes foo.jar to foo.jar.out folder\n\n$ apktool d bar.apk\n// decodes bar.apk to bar folder\n\n$ apktool decode bar.apk\n// decodes bar.apk to bar folder\n\n$ apktool d bar.apk -o baz\n// decodes bar.apk to baz folder\n```\n\n#### 回编译为apk\n\n常用语法为：\n\n```\napktool b app-release/ -o app-release_unsigned.apk\n\nI: Using Apktool 2.3.2\nI: Checking whether sources has changed...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\nI: Built apk...\n\n```\n它的其他语法还有：\n\n```\n$ apktool b foo.jar.out\n// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file\n\n$ apktool build foo.jar.out\n// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file\n\n$ apktool b bar\n// builds bar folder into bar/dist/bar.apk file\n\n$ apktool b .\n// builds current directory into ./dist\n\n$ apktool b bar -o new_bar.apk\n// builds bar folder into new_bar.apk\n\n$ apktool b bar.apk\n// WRONG: brut.androlib.AndrolibException: brut.directory.PathNotExist: apktool.yml\n// Must use folder, not apk/jar file\n\n```\n\n#### Frameworks\n\n当回编译为apk时，可能会有找不到资源的问题，例如：\n\n```\n/app-release/res/layout-v26/abc_screen_toolbar.xml:5: error: No resource identifier found for attribute 'keyboardNavigationCluster' in package 'android'\n```\n当出现如上问题时，应该为framework-res.apk过期了，换句话说，是这个apk有点老了。\n\n`framework-res.apk` 可以从最新版本的手机或模拟器中拿到。具体位置在：\n`/system/framework/framework-res.apk` 可以通过adb命令取出：\n\n```\nadb pull /system/framework/framework-res.apk\n```\n在得到framework-res.apk后，即可安装到电脑中。\n\n一般为（其中: **if** 为 install-framework的缩写）：\n\n```\nsudo apktool if framework-res.apk\n\n```\n\n安装后，即不再报上面找不到资源的问题了。\n\n\n#### 签名\n\n千万不要忘记最后一步，签名。\n如果不签名的话，是安装不到手机的，会报未签名错误，自己签名后即可啦。\n\n如下命令为签名：相关参数自己修改\n\n```\njarsigner -verbose -keystore /opt/workspace/testkeystore -signedjar app-release_signed.apk app-release_unsigned.apk testkeystore\n\n```\n\n","source":"_posts/Apktool反编译.md","raw":"---\ntitle: Apktool反编译\ndate: 2018-04-08 13:41:44\ntags: [apktool]\ncategories: android\n---\n\nAndroid的反编译，一般需要用到apktool，这里记录下当用到apktool时，基本的用法\n\n<!-- more -->\n\nApktool反编译和回编为apk，主要是apktool.jar出力，在mac或linux上一般会有个apktool，来执行apktool.jar。如果没有的话，把如下代码保存为apktool即可\n\n```\n#!/bin/bash\n#\n# Copyright (C) 2007 The Android Open Source Project\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script is a wrapper for smali.jar, so you can simply call \"smali\",\n# instead of java -jar smali.jar. It is heavily based on the \"dx\" script\n# from the Android SDK\n\n# Set up prog to be the path of this script, including following symlinks,\n# and set up progdir to be the fully-qualified pathname of its directory.\nprog=\"$0\"\nwhile [ -h \"${prog}\" ]; do\n    newProg=`/bin/ls -ld \"${prog}\"`\n\n    newProg=`expr \"${newProg}\" : \".* -> \\(.*\\)$\"`\n    if expr \"x${newProg}\" : 'x/' >/dev/null; then\n        prog=\"${newProg}\"\n    else\n        progdir=`dirname \"${prog}\"`\n        prog=\"${progdir}/${newProg}\"\n    fi\ndone\noldwd=`pwd`\nprogdir=`dirname \"${prog}\"`\ncd \"${progdir}\"\nprogdir=`pwd`\nprog=\"${progdir}\"/`basename \"${prog}\"`\ncd \"${oldwd}\"\n\njarfile=apktool.jar\nlibdir=\"$progdir\"\nif [ ! -r \"$libdir/$jarfile\" ]\nthen\n    echo `basename \"$prog\"`\": can't find $jarfile\"\n    exit 1\nfi\n\njavaOpts=\"\"\n\n# If you want DX to have more memory when executing, uncomment the following\n# line and adjust the value accordingly. Use \"java -X\" for a list of options\n# you can pass here.\n# \njavaOpts=\"-Xmx512M\"\n\n# Alternatively, this will extract any parameter \"-Jxxx\" from the command line\n# and pass them to Java (instead of to dx). This makes it possible for you to\n# add a command-line parameter such as \"-JXmx256M\" in your ant scripts, for\n# example.\nwhile expr \"x$1\" : 'x-J' >/dev/null; do\n    opt=`expr \"$1\" : '-J\\(.*\\)'`\n    javaOpts=\"${javaOpts} -${opt}\"\n    shift\ndone\n\nif [ \"$OSTYPE\" = \"cygwin\" ] ; then\n\tjarpath=`cygpath -w  \"$libdir/$jarfile\"`\nelse\n\tjarpath=\"$libdir/$jarfile\"\nfi\n\n# add current location to path for aapt\nPATH=$PATH:`pwd`;\nexport PATH;\nexec java $javaOpts -Djava.awt.headless=true -jar \"$jarpath\" \"$@\"\n```\n\n#### 反编译apk\n\n常用命令行为：\n\n```\n$ apktool d app-release.apk\nI: Using Apktool 2.3.2 on app-release.apk\nI: Loading resource table...\nI: Decoding AndroidManifest.xml with resources...\nI: Loading resource table from file: $HOME/Library/apktool/framework/1.apk\nI: Regular manifest package...\nI: Decoding file-resources...\nI: Decoding values */* XMLs...\nI: Baksmaling classes.dex...\nI: Copying assets and libs...\nI: Copying unknown files...\nI: Copying original files...\n$\n\n```\n\n它的其他语法还有：\n\n```\n$ apktool d foo.jar\n// decodes foo.jar to foo.jar.out folder\n\n$ apktool decode foo.jar\n// decodes foo.jar to foo.jar.out folder\n\n$ apktool d bar.apk\n// decodes bar.apk to bar folder\n\n$ apktool decode bar.apk\n// decodes bar.apk to bar folder\n\n$ apktool d bar.apk -o baz\n// decodes bar.apk to baz folder\n```\n\n#### 回编译为apk\n\n常用语法为：\n\n```\napktool b app-release/ -o app-release_unsigned.apk\n\nI: Using Apktool 2.3.2\nI: Checking whether sources has changed...\nI: Checking whether resources has changed...\nI: Building resources...\nI: Building apk file...\nI: Copying unknown files/dir...\nI: Built apk...\n\n```\n它的其他语法还有：\n\n```\n$ apktool b foo.jar.out\n// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file\n\n$ apktool build foo.jar.out\n// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file\n\n$ apktool b bar\n// builds bar folder into bar/dist/bar.apk file\n\n$ apktool b .\n// builds current directory into ./dist\n\n$ apktool b bar -o new_bar.apk\n// builds bar folder into new_bar.apk\n\n$ apktool b bar.apk\n// WRONG: brut.androlib.AndrolibException: brut.directory.PathNotExist: apktool.yml\n// Must use folder, not apk/jar file\n\n```\n\n#### Frameworks\n\n当回编译为apk时，可能会有找不到资源的问题，例如：\n\n```\n/app-release/res/layout-v26/abc_screen_toolbar.xml:5: error: No resource identifier found for attribute 'keyboardNavigationCluster' in package 'android'\n```\n当出现如上问题时，应该为framework-res.apk过期了，换句话说，是这个apk有点老了。\n\n`framework-res.apk` 可以从最新版本的手机或模拟器中拿到。具体位置在：\n`/system/framework/framework-res.apk` 可以通过adb命令取出：\n\n```\nadb pull /system/framework/framework-res.apk\n```\n在得到framework-res.apk后，即可安装到电脑中。\n\n一般为（其中: **if** 为 install-framework的缩写）：\n\n```\nsudo apktool if framework-res.apk\n\n```\n\n安装后，即不再报上面找不到资源的问题了。\n\n\n#### 签名\n\n千万不要忘记最后一步，签名。\n如果不签名的话，是安装不到手机的，会报未签名错误，自己签名后即可啦。\n\n如下命令为签名：相关参数自己修改\n\n```\njarsigner -verbose -keystore /opt/workspace/testkeystore -signedjar app-release_signed.apk app-release_unsigned.apk testkeystore\n\n```\n\n","slug":"Apktool反编译","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxem000dsifyvahbe7rd","content":"<p>Android的反编译，一般需要用到apktool，这里记录下当用到apktool时，基本的用法</p>\n<a id=\"more\"></a>\n<p>Apktool反编译和回编为apk，主要是apktool.jar出力，在mac或linux上一般会有个apktool，来执行apktool.jar。如果没有的话，把如下代码保存为apktool即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Copyright (C) 2007 The Android Open Source Project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span></span><br><span class=\"line\"><span class=\"comment\"># you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"># You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"># distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"># See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"># limitations under the License.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This script is a wrapper for smali.jar, so you can simply call \"smali\",</span></span><br><span class=\"line\"><span class=\"comment\"># instead of java -jar smali.jar. It is heavily based on the \"dx\" script</span></span><br><span class=\"line\"><span class=\"comment\"># from the Android SDK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set up prog to be the path of this script, including following symlinks,</span></span><br><span class=\"line\"><span class=\"comment\"># and set up progdir to be the fully-qualified pathname of its directory.</span></span><br><span class=\"line\">prog=<span class=\"string\">\"<span class=\"variable\">$0</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ -h <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span> ]; <span class=\"keyword\">do</span></span><br><span class=\"line\">    newProg=`/bin/ls -ld <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">    newProg=`expr <span class=\"string\">\"<span class=\"variable\">$&#123;newProg&#125;</span>\"</span> : <span class=\"string\">\".* -&gt; \\(.*\\)$\"</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> expr <span class=\"string\">\"x<span class=\"variable\">$&#123;newProg&#125;</span>\"</span> : <span class=\"string\">'x/'</span> &gt;/dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">        prog=<span class=\"string\">\"<span class=\"variable\">$&#123;newProg&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        progdir=`dirname <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\">        prog=<span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>/<span class=\"variable\">$&#123;newProg&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">oldwd=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">progdir=`dirname <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>\"</span></span><br><span class=\"line\">progdir=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">prog=<span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>\"</span>/`basename <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$&#123;oldwd&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">jarfile=apktool.jar</span><br><span class=\"line\">libdir=<span class=\"string\">\"<span class=\"variable\">$progdir</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -r <span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `basename <span class=\"string\">\"<span class=\"variable\">$prog</span>\"</span>`<span class=\"string\">\": can't find <span class=\"variable\">$jarfile</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">javaOpts=<span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you want DX to have more memory when executing, uncomment the following</span></span><br><span class=\"line\"><span class=\"comment\"># line and adjust the value accordingly. Use \"java -X\" for a list of options</span></span><br><span class=\"line\"><span class=\"comment\"># you can pass here.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">javaOpts=<span class=\"string\">\"-Xmx512M\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alternatively, this will extract any parameter \"-Jxxx\" from the command line</span></span><br><span class=\"line\"><span class=\"comment\"># and pass them to Java (instead of to dx). This makes it possible for you to</span></span><br><span class=\"line\"><span class=\"comment\"># add a command-line parameter such as \"-JXmx256M\" in your ant scripts, for</span></span><br><span class=\"line\"><span class=\"comment\"># example.</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> expr <span class=\"string\">\"x<span class=\"variable\">$1</span>\"</span> : <span class=\"string\">'x-J'</span> &gt;/dev/null; <span class=\"keyword\">do</span></span><br><span class=\"line\">    opt=`expr <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> : <span class=\"string\">'-J\\(.*\\)'</span>`</span><br><span class=\"line\">    javaOpts=<span class=\"string\">\"<span class=\"variable\">$&#123;javaOpts&#125;</span> -<span class=\"variable\">$&#123;opt&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$OSTYPE</span>\"</span> = <span class=\"string\">\"cygwin\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\tjarpath=`cygpath -w  <span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tjarpath=<span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add current location to path for aapt</span></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:`<span class=\"built_in\">pwd</span>`;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH;</span><br><span class=\"line\"><span class=\"built_in\">exec</span> java <span class=\"variable\">$javaOpts</span> -Djava.awt.headless=<span class=\"literal\">true</span> -jar <span class=\"string\">\"<span class=\"variable\">$jarpath</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"反编译apk\"><a class=\"markdownIt-Anchor\" href=\"#反编译apk\"></a> 反编译apk</h4>\n<p>常用命令行为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool d app-release.apk</span><br><span class=\"line\">I: Using Apktool <span class=\"number\">2.3</span>.<span class=\"number\">2</span> on app-release.apk</span><br><span class=\"line\">I: Loading resource <span class=\"selector-tag\">table</span>...</span><br><span class=\"line\">I: Decoding AndroidManifest<span class=\"selector-class\">.xml</span> with resources...</span><br><span class=\"line\">I: Loading resource <span class=\"selector-tag\">table</span> from file: <span class=\"variable\">$HOME</span>/Library/apktool/framework/<span class=\"number\">1</span>.apk</span><br><span class=\"line\">I: Regular manifest package...</span><br><span class=\"line\">I: Decoding file-resources...</span><br><span class=\"line\">I: Decoding values *<span class=\"comment\">/* XMLs...</span></span><br><span class=\"line\"><span class=\"comment\">I: Baksmaling classes.dex...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying assets and libs...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying unknown files...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying original files...</span></span><br><span class=\"line\"><span class=\"comment\">$</span></span><br></pre></td></tr></table></figure>\n<p>它的其他语法还有：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool d foo.jar</span><br><span class=\"line\"><span class=\"comment\">// decodes foo.jar to foo.jar.out folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool decode foo.jar</span><br><span class=\"line\"><span class=\"comment\">// decodes foo.jar to foo.jar.out folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool d bar.apk</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to bar folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool decode bar.apk</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to bar folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool d bar<span class=\"selector-class\">.apk</span> -o baz</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to baz folder</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回编译为apk\"><a class=\"markdownIt-Anchor\" href=\"#回编译为apk\"></a> 回编译为apk</h4>\n<p>常用语法为：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b app-release/ -o app-release_unsigned.apk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">I</span>: <span class=\"keyword\">Using</span> Apktool <span class=\"number\">2.3</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"keyword\">I</span>: Checking whether sources has changed...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Checking whether resources has changed...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Building resources...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Building apk file...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Copying unknown files/dir...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Built apk...</span><br></pre></td></tr></table></figure>\n<p>它的其他语法还有：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> foo<span class=\"selector-class\">.jar</span><span class=\"selector-class\">.out</span></span><br><span class=\"line\"><span class=\"comment\">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool build foo<span class=\"selector-class\">.jar</span><span class=\"selector-class\">.out</span></span><br><span class=\"line\"><span class=\"comment\">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar</span><br><span class=\"line\"><span class=\"comment\">// builds bar folder into bar/dist/bar.apk file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> .</span><br><span class=\"line\"><span class=\"comment\">// builds current directory into ./dist</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar -o new_bar.apk</span><br><span class=\"line\"><span class=\"comment\">// builds bar folder into new_bar.apk</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar.apk</span><br><span class=\"line\"><span class=\"comment\">// WRONG: brut.androlib.AndrolibException: brut.directory.PathNotExist: apktool.yml</span></span><br><span class=\"line\"><span class=\"comment\">// Must use folder, not apk/jar file</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"frameworks\"><a class=\"markdownIt-Anchor\" href=\"#frameworks\"></a> Frameworks</h4>\n<p>当回编译为apk时，可能会有找不到资源的问题，例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app-<span class=\"keyword\">release</span>/res/layout-v26/abc_screen_toolbar.xml:<span class=\"number\">5</span>: <span class=\"keyword\">error</span>: <span class=\"keyword\">No</span> <span class=\"keyword\">resource</span> identifier <span class=\"keyword\">found</span> <span class=\"keyword\">for</span> <span class=\"keyword\">attribute</span> <span class=\"string\">'keyboardNavigationCluster'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">package</span> <span class=\"string\">'android'</span></span><br></pre></td></tr></table></figure>\n<p>当出现如上问题时，应该为framework-res.apk过期了，换句话说，是这个apk有点老了。</p>\n<p><code>framework-res.apk</code> 可以从最新版本的手机或模拟器中拿到。具体位置在：<br>\n<code>/system/framework/framework-res.apk</code> 可以通过adb命令取出：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb pull /<span class=\"built_in\">system</span>/framework/framework-<span class=\"keyword\">res</span>.apk</span><br></pre></td></tr></table></figure>\n<p>在得到framework-res.apk后，即可安装到电脑中。</p>\n<p>一般为（其中: <strong>if</strong> 为 install-framework的缩写）：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apktool <span class=\"keyword\">if</span> framework-<span class=\"keyword\">res</span>.apk</span><br></pre></td></tr></table></figure>\n<p>安装后，即不再报上面找不到资源的问题了。</p>\n<h4 id=\"签名\"><a class=\"markdownIt-Anchor\" href=\"#签名\"></a> 签名</h4>\n<p>千万不要忘记最后一步，签名。<br>\n如果不签名的话，是安装不到手机的，会报未签名错误，自己签名后即可啦。</p>\n<p>如下命令为签名：相关参数自己修改</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore /opt/workspace/testkeystore -signedjar app-release_signed<span class=\"selector-class\">.apk</span> app-release_unsigned<span class=\"selector-class\">.apk</span> testkeystore</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Android的反编译，一般需要用到apktool，这里记录下当用到apktool时，基本的用法</p>","more":"<p>Apktool反编译和回编为apk，主要是apktool.jar出力，在mac或linux上一般会有个apktool，来执行apktool.jar。如果没有的话，把如下代码保存为apktool即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Copyright (C) 2007 The Android Open Source Project</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span></span><br><span class=\"line\"><span class=\"comment\"># you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\"># You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\"># distributed under the License is distributed on an \"AS IS\" BASIS,</span></span><br><span class=\"line\"><span class=\"comment\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\"># See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\"># limitations under the License.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This script is a wrapper for smali.jar, so you can simply call \"smali\",</span></span><br><span class=\"line\"><span class=\"comment\"># instead of java -jar smali.jar. It is heavily based on the \"dx\" script</span></span><br><span class=\"line\"><span class=\"comment\"># from the Android SDK</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set up prog to be the path of this script, including following symlinks,</span></span><br><span class=\"line\"><span class=\"comment\"># and set up progdir to be the fully-qualified pathname of its directory.</span></span><br><span class=\"line\">prog=<span class=\"string\">\"<span class=\"variable\">$0</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ -h <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span> ]; <span class=\"keyword\">do</span></span><br><span class=\"line\">    newProg=`/bin/ls -ld <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">    newProg=`expr <span class=\"string\">\"<span class=\"variable\">$&#123;newProg&#125;</span>\"</span> : <span class=\"string\">\".* -&gt; \\(.*\\)$\"</span>`</span><br><span class=\"line\">    <span class=\"keyword\">if</span> expr <span class=\"string\">\"x<span class=\"variable\">$&#123;newProg&#125;</span>\"</span> : <span class=\"string\">'x/'</span> &gt;/dev/null; <span class=\"keyword\">then</span></span><br><span class=\"line\">        prog=<span class=\"string\">\"<span class=\"variable\">$&#123;newProg&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        progdir=`dirname <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\">        prog=<span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>/<span class=\"variable\">$&#123;newProg&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">oldwd=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">progdir=`dirname <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>\"</span></span><br><span class=\"line\">progdir=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">prog=<span class=\"string\">\"<span class=\"variable\">$&#123;progdir&#125;</span>\"</span>/`basename <span class=\"string\">\"<span class=\"variable\">$&#123;prog&#125;</span>\"</span>`</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$&#123;oldwd&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">jarfile=apktool.jar</span><br><span class=\"line\">libdir=<span class=\"string\">\"<span class=\"variable\">$progdir</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -r <span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> `basename <span class=\"string\">\"<span class=\"variable\">$prog</span>\"</span>`<span class=\"string\">\": can't find <span class=\"variable\">$jarfile</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">javaOpts=<span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you want DX to have more memory when executing, uncomment the following</span></span><br><span class=\"line\"><span class=\"comment\"># line and adjust the value accordingly. Use \"java -X\" for a list of options</span></span><br><span class=\"line\"><span class=\"comment\"># you can pass here.</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">javaOpts=<span class=\"string\">\"-Xmx512M\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alternatively, this will extract any parameter \"-Jxxx\" from the command line</span></span><br><span class=\"line\"><span class=\"comment\"># and pass them to Java (instead of to dx). This makes it possible for you to</span></span><br><span class=\"line\"><span class=\"comment\"># add a command-line parameter such as \"-JXmx256M\" in your ant scripts, for</span></span><br><span class=\"line\"><span class=\"comment\"># example.</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> expr <span class=\"string\">\"x<span class=\"variable\">$1</span>\"</span> : <span class=\"string\">'x-J'</span> &gt;/dev/null; <span class=\"keyword\">do</span></span><br><span class=\"line\">    opt=`expr <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> : <span class=\"string\">'-J\\(.*\\)'</span>`</span><br><span class=\"line\">    javaOpts=<span class=\"string\">\"<span class=\"variable\">$&#123;javaOpts&#125;</span> -<span class=\"variable\">$&#123;opt&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$OSTYPE</span>\"</span> = <span class=\"string\">\"cygwin\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">\tjarpath=`cygpath -w  <span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span>`</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tjarpath=<span class=\"string\">\"<span class=\"variable\">$libdir</span>/<span class=\"variable\">$jarfile</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add current location to path for aapt</span></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:`<span class=\"built_in\">pwd</span>`;</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH;</span><br><span class=\"line\"><span class=\"built_in\">exec</span> java <span class=\"variable\">$javaOpts</span> -Djava.awt.headless=<span class=\"literal\">true</span> -jar <span class=\"string\">\"<span class=\"variable\">$jarpath</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"反编译apk\"><a class=\"markdownIt-Anchor\" href=\"#反编译apk\"></a> 反编译apk</h4>\n<p>常用命令行为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool d app-release.apk</span><br><span class=\"line\">I: Using Apktool <span class=\"number\">2.3</span>.<span class=\"number\">2</span> on app-release.apk</span><br><span class=\"line\">I: Loading resource <span class=\"selector-tag\">table</span>...</span><br><span class=\"line\">I: Decoding AndroidManifest<span class=\"selector-class\">.xml</span> with resources...</span><br><span class=\"line\">I: Loading resource <span class=\"selector-tag\">table</span> from file: <span class=\"variable\">$HOME</span>/Library/apktool/framework/<span class=\"number\">1</span>.apk</span><br><span class=\"line\">I: Regular manifest package...</span><br><span class=\"line\">I: Decoding file-resources...</span><br><span class=\"line\">I: Decoding values *<span class=\"comment\">/* XMLs...</span></span><br><span class=\"line\"><span class=\"comment\">I: Baksmaling classes.dex...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying assets and libs...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying unknown files...</span></span><br><span class=\"line\"><span class=\"comment\">I: Copying original files...</span></span><br><span class=\"line\"><span class=\"comment\">$</span></span><br></pre></td></tr></table></figure>\n<p>它的其他语法还有：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool d foo.jar</span><br><span class=\"line\"><span class=\"comment\">// decodes foo.jar to foo.jar.out folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool decode foo.jar</span><br><span class=\"line\"><span class=\"comment\">// decodes foo.jar to foo.jar.out folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool d bar.apk</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to bar folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool decode bar.apk</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to bar folder</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool d bar<span class=\"selector-class\">.apk</span> -o baz</span><br><span class=\"line\"><span class=\"comment\">// decodes bar.apk to baz folder</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回编译为apk\"><a class=\"markdownIt-Anchor\" href=\"#回编译为apk\"></a> 回编译为apk</h4>\n<p>常用语法为：</p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apktool b app-release/ -o app-release_unsigned.apk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">I</span>: <span class=\"keyword\">Using</span> Apktool <span class=\"number\">2.3</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"keyword\">I</span>: Checking whether sources has changed...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Checking whether resources has changed...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Building resources...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Building apk file...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Copying unknown files/dir...</span><br><span class=\"line\"><span class=\"keyword\">I</span>: Built apk...</span><br></pre></td></tr></table></figure>\n<p>它的其他语法还有：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> foo<span class=\"selector-class\">.jar</span><span class=\"selector-class\">.out</span></span><br><span class=\"line\"><span class=\"comment\">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool build foo<span class=\"selector-class\">.jar</span><span class=\"selector-class\">.out</span></span><br><span class=\"line\"><span class=\"comment\">// builds foo.jar.out folder into foo.jar.out/dist/foo.jar file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar</span><br><span class=\"line\"><span class=\"comment\">// builds bar folder into bar/dist/bar.apk file</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> .</span><br><span class=\"line\"><span class=\"comment\">// builds current directory into ./dist</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar -o new_bar.apk</span><br><span class=\"line\"><span class=\"comment\">// builds bar folder into new_bar.apk</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ apktool <span class=\"selector-tag\">b</span> bar.apk</span><br><span class=\"line\"><span class=\"comment\">// WRONG: brut.androlib.AndrolibException: brut.directory.PathNotExist: apktool.yml</span></span><br><span class=\"line\"><span class=\"comment\">// Must use folder, not apk/jar file</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"frameworks\"><a class=\"markdownIt-Anchor\" href=\"#frameworks\"></a> Frameworks</h4>\n<p>当回编译为apk时，可能会有找不到资源的问题，例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/app-<span class=\"keyword\">release</span>/res/layout-v26/abc_screen_toolbar.xml:<span class=\"number\">5</span>: <span class=\"keyword\">error</span>: <span class=\"keyword\">No</span> <span class=\"keyword\">resource</span> identifier <span class=\"keyword\">found</span> <span class=\"keyword\">for</span> <span class=\"keyword\">attribute</span> <span class=\"string\">'keyboardNavigationCluster'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">package</span> <span class=\"string\">'android'</span></span><br></pre></td></tr></table></figure>\n<p>当出现如上问题时，应该为framework-res.apk过期了，换句话说，是这个apk有点老了。</p>\n<p><code>framework-res.apk</code> 可以从最新版本的手机或模拟器中拿到。具体位置在：<br>\n<code>/system/framework/framework-res.apk</code> 可以通过adb命令取出：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb pull /<span class=\"built_in\">system</span>/framework/framework-<span class=\"keyword\">res</span>.apk</span><br></pre></td></tr></table></figure>\n<p>在得到framework-res.apk后，即可安装到电脑中。</p>\n<p>一般为（其中: <strong>if</strong> 为 install-framework的缩写）：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apktool <span class=\"keyword\">if</span> framework-<span class=\"keyword\">res</span>.apk</span><br></pre></td></tr></table></figure>\n<p>安装后，即不再报上面找不到资源的问题了。</p>\n<h4 id=\"签名\"><a class=\"markdownIt-Anchor\" href=\"#签名\"></a> 签名</h4>\n<p>千万不要忘记最后一步，签名。<br>\n如果不签名的话，是安装不到手机的，会报未签名错误，自己签名后即可啦。</p>\n<p>如下命令为签名：相关参数自己修改</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verbose -keystore /opt/workspace/testkeystore -signedjar app-release_signed<span class=\"selector-class\">.apk</span> app-release_unsigned<span class=\"selector-class\">.apk</span> testkeystore</span><br></pre></td></tr></table></figure>"},{"title":"AndroidStudio打包Jar","date":"2018-03-13T06:49:21.000Z","_content":"\n## Android Studio 打包Jar\n\n<!-- more -->\n##### 需要在module的gradle中配置如下task\n```\n//Copy类型\ntask makeJar(type: Copy) {\n    //删除存在的\n    delete 'build/libs/myjar.jar'\n    //设置拷贝的文件\n    from('build/intermediates/bundles/release/')\n    //打进jar包后的文件目录\n    into('build/libs/')\n    //将classes.jar放入build/libs/目录下\n    //include ,exclude参数来设置过滤\n    //（我们只关心classes.jar这个文件）\n    include('classes.jar')\n    //重命名\n    rename('classes.jar', 'myjar.jar')\n}\n\nmakeJar.dependsOn(build)\n\n```\n\n##### 在终端执行\n\n```\ngradlew markJar\n\n```\n\n##### 打包后的位置：module的/build/libs/下\n具体位置自己可以修改\n\n##### 可能的报错\n\n>Fix the issues identified by lint, or add the following to your build script to proceed with errors\n \n \n```\nandroid {\n\tlintOptions {\n\t\tabortOnError false\n\t}\n}\n\n```","source":"_posts/AndroidStudio打包Jar.md","raw":"---\ntitle: AndroidStudio打包Jar\ndate: 2018-03-13 14:49:21\ntags: [android, jar]\ncategories: [android]\n---\n\n## Android Studio 打包Jar\n\n<!-- more -->\n##### 需要在module的gradle中配置如下task\n```\n//Copy类型\ntask makeJar(type: Copy) {\n    //删除存在的\n    delete 'build/libs/myjar.jar'\n    //设置拷贝的文件\n    from('build/intermediates/bundles/release/')\n    //打进jar包后的文件目录\n    into('build/libs/')\n    //将classes.jar放入build/libs/目录下\n    //include ,exclude参数来设置过滤\n    //（我们只关心classes.jar这个文件）\n    include('classes.jar')\n    //重命名\n    rename('classes.jar', 'myjar.jar')\n}\n\nmakeJar.dependsOn(build)\n\n```\n\n##### 在终端执行\n\n```\ngradlew markJar\n\n```\n\n##### 打包后的位置：module的/build/libs/下\n具体位置自己可以修改\n\n##### 可能的报错\n\n>Fix the issues identified by lint, or add the following to your build script to proceed with errors\n \n \n```\nandroid {\n\tlintOptions {\n\t\tabortOnError false\n\t}\n}\n\n```","slug":"AndroidStudio打包Jar","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxen000esifyutmh17r4","content":"<h2 id=\"android-studio-打包jar\"><a class=\"markdownIt-Anchor\" href=\"#android-studio-打包jar\"></a> Android Studio 打包Jar</h2>\n<a id=\"more\"></a>\n<h5 id=\"需要在module的gradle中配置如下task\"><a class=\"markdownIt-Anchor\" href=\"#需要在module的gradle中配置如下task\"></a> 需要在module的gradle中配置如下task</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Copy类型</span></span><br><span class=\"line\"><span class=\"keyword\">task</span> makeJar(type: <span class=\"keyword\">Copy</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//删除存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">'build/libs/myjar.jar'</span></span><br><span class=\"line\">    <span class=\"comment\">//设置拷贝的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/bundles/release/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//打进jar包后的文件目录</span></span><br><span class=\"line\">    <span class=\"keyword\">into</span>(<span class=\"string\">'build/libs/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//将classes.jar放入build/libs/目录下</span></span><br><span class=\"line\">    <span class=\"comment\">//include ,exclude参数来设置过滤</span></span><br><span class=\"line\">    <span class=\"comment\">//（我们只关心classes.jar这个文件）</span></span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'classes.jar'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//重命名</span></span><br><span class=\"line\">    rename(<span class=\"string\">'classes.jar'</span>, <span class=\"string\">'myjar.jar'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeJar.dependsOn(build)</span><br></pre></td></tr></table></figure>\n<h5 id=\"在终端执行\"><a class=\"markdownIt-Anchor\" href=\"#在终端执行\"></a> 在终端执行</h5>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradlew markJar</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"打包后的位置module的buildlibs下\"><a class=\"markdownIt-Anchor\" href=\"#打包后的位置module的buildlibs下\"></a> 打包后的位置：module的/build/libs/下</h5>\n<p>具体位置自己可以修改</p>\n<h5 id=\"可能的报错\"><a class=\"markdownIt-Anchor\" href=\"#可能的报错\"></a> 可能的报错</h5>\n<blockquote>\n<p>Fix the issues identified by lint, or add the following to your build script to proceed with errors</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">\t<span class=\"section\">lintOptions</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">abortOnError</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"android-studio-打包jar\"><a class=\"markdownIt-Anchor\" href=\"#android-studio-打包jar\"></a> Android Studio 打包Jar</h2>","more":"<h5 id=\"需要在module的gradle中配置如下task\"><a class=\"markdownIt-Anchor\" href=\"#需要在module的gradle中配置如下task\"></a> 需要在module的gradle中配置如下task</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Copy类型</span></span><br><span class=\"line\"><span class=\"keyword\">task</span> makeJar(type: <span class=\"keyword\">Copy</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//删除存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"string\">'build/libs/myjar.jar'</span></span><br><span class=\"line\">    <span class=\"comment\">//设置拷贝的文件</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span>(<span class=\"string\">'build/intermediates/bundles/release/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//打进jar包后的文件目录</span></span><br><span class=\"line\">    <span class=\"keyword\">into</span>(<span class=\"string\">'build/libs/'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//将classes.jar放入build/libs/目录下</span></span><br><span class=\"line\">    <span class=\"comment\">//include ,exclude参数来设置过滤</span></span><br><span class=\"line\">    <span class=\"comment\">//（我们只关心classes.jar这个文件）</span></span><br><span class=\"line\">    <span class=\"keyword\">include</span>(<span class=\"string\">'classes.jar'</span>)</span><br><span class=\"line\">    <span class=\"comment\">//重命名</span></span><br><span class=\"line\">    rename(<span class=\"string\">'classes.jar'</span>, <span class=\"string\">'myjar.jar'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">makeJar.dependsOn(build)</span><br></pre></td></tr></table></figure>\n<h5 id=\"在终端执行\"><a class=\"markdownIt-Anchor\" href=\"#在终端执行\"></a> 在终端执行</h5>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gradlew markJar</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"打包后的位置module的buildlibs下\"><a class=\"markdownIt-Anchor\" href=\"#打包后的位置module的buildlibs下\"></a> 打包后的位置：module的/build/libs/下</h5>\n<p>具体位置自己可以修改</p>\n<h5 id=\"可能的报错\"><a class=\"markdownIt-Anchor\" href=\"#可能的报错\"></a> 可能的报错</h5>\n<blockquote>\n<p>Fix the issues identified by lint, or add the following to your build script to proceed with errors</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">android</span> &#123;</span><br><span class=\"line\">\t<span class=\"section\">lintOptions</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">abortOnError</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"C++常用的程序库","date":"2019-03-22T02:20:54.000Z","_content":"\n- 合适的程序库，可以带来方便。\n- 代码有深度且可读性高。\n\n<!-- more -->\n\n#### 强烈推荐的库\nprintf 不好用，ostream 也不好用，format 好用 [fmtlib/fmt](https://github.com/fmtlib/fmt)\n\n超高效级的 json 解析 [Tencent/rapidjson](https://github.com/Tencent/rapidjson)\n\n\n#### 其他库\n\n3D模型解析 [assimp/assimp](https://github.com/assimp/assimp)\n\n物理模拟 [bulletphysics/bullet3](https://github.com/bulletphysics/bullet3)\n\n渲染中间层 [bkaradzic/bgfx](https://github.com/bkaradzic/bgfx)\n\n3D灵感宣泄场所 [cinder/Cinder](https://github.com/cinder/Cinder) \n\n命令行帮助既是命令行解析 [https://github.com/docopt/docopt.cpp](https://github.com/docopt/docopt.cpp)\n\n\n\n3D 数学运算 [g-truc/glm](https://link.zhihu.com/?target=https%3A//github.com/g-truc/glm)\n\n拿来就能用的 UI [ocornut/imgui](https://github.com/ocornut/imgui)\n\njson 结构用在 C++ 里面就像在 JS 里面一样自然 [nlohmann/json](https://github.com/nlohmann/json)\n\n用过都知道它的好的性能分析工具 [jonasmr/microprofile](https://github.com/jonasmr/microprofile)\n\n又快又不折腾的 xml 解析 [zeux/pugixml](https://github.com/zeux/pugixml)\n\n专注寻路 [recastnavigation/recastnavigation](https://github.com/recastnavigation/recastnavigation) \n\n什么都能放到头文件中 [nothings/stb](https://github.com/nothings/stb)\n\n一键生成 C/C++ 对各种其他语言的接口 [swig/swig](https://github.com/swig/swig)\n\n最快的哈希算法 [Cyan4973/xxHash](https://github.com/Cyan4973/xxHash)\n\n包含大量计算几何算法的 [Geometric Tools](https://www.geometrictools.com/)\n\n包含最经典渲染算法的 [mmp/pbrt-v3](https://github.com/mmp/pbrt-v3)\n\n又小又快又方便的单元测试库 [onqtam/doctest](https://github.com/onqtam/doctest)\n\n高精度浮点数运算库 [LibBF Library](https://bellard.org/libbf/)\n\n#### 线程\n\n- [C++ Threads](http://threads.sourceforge.net/)：这个库的目标是给程序员提供易于使用的类，这些类被继承以提供在Linux环境中很难看到的大量的线程方面的功能。\n- [ZThreads](http://zthread.sourceforge.net/)：跨平台的C++线程和同步库。\n\n\n#### 字符串\n\n- [C++ Str Library](http://www.utilitycode.com/str/)：操作字符串和字符的库，支持Windows和支持gcc的多种平台。\n- [Common Text Transformation Library](http://cttl.sourceforge.net/)：解析和修改STL字符串的库。\n- [GRETA](http://research.microsoft.com/projects/greta/)：由微软研究院的研究人员开发的处理正则表达式的库，在小型匹配的情况下有非常优秀的表现。\n\n\n#### C语言开源项目：\n\n- [Webbench](http://home.tiscali.cz/~cz210552/webbench.html)：在Linux下使用的非常简单的网站压测工具，使用C语言编写, 代码超级简洁，源码加起来几乎不到600行。\n- [Tinyhttpd](http://sourceforge.net/projects/tinyhttpd/)：超轻量型Http Server，C语言开发，附带简单的Client，可通过阅读这段代码理解一个 Http Server 的本质。\n- [cJSON](http://sourceforge.net/projects/cjson/)：C语言中的一个JSON编解码器，非常轻量级，速度非常理想。结构简单易懂，可以作为一个非常好的C语言项目进行学习。\n- [CMockery](http://code.google.com/p/cmockery/downloads/list)：Google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。\n- [Libev](http://software.schmorp.de/pkg/libev.html)：基于Reactor模式，效率较高，并且代码精简，是学习事件驱动编程的很好的资源。\n- [Memcached](http://memcached.org/)：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。\n- [Lua](http://www.lua.org/)：在任何支持ANSI C编译器的平台上都可以轻松编译通过。\n- [SQLite](http://www.sqlite.org/)：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。\n- [NETBSD](http://www.netbsd.org/)：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统。\n\n\n\n- 应用开发框架Qt，优雅的信号与槽，强大的界面类库，跨平台。\n- CEF（Chromium Embedded Framework），使用网页做富客户端的绝佳选择，基于Chromium，可以方便嵌入到你的应用中。类似的还有 Electron 。\n- WebRTC，非常赞的框架，做音视频通信绕不开的。\n- TinyXml，小巧的C++ XML库，几个源文件，直接加入到项目中就可以用\n- Protobuf，Google的，网络通信，非常赞，方便序列化和结构化，流量又小\n- FreeImage，强大好用的图形库\n- Libevent，轻量级的基于事件驱动的高性能的开源网络库\n- ffmpeg，多媒体开发类库的无冕之王\n\n---\n- 一个非常容易上手的 C++ gui 库 [nana](http://nanapro.org/en-us/)\n- http客户端curl\n- http服务器 crow\n- gzip压缩zlib\n- json序列化nlohmann/json\n- 二进制序列化protobuf\n- 嵌入式数据库sqlite\n- 日志库glog\n- 参数解析库gflags\n- 消息队列zmq\n- rpc库brpc\n- tcp网络库evpp\n- 3d仿真osg\n- 图形图像opencv\n- stl,boost,qt就不用说了。","source":"_posts/C-常用的程序库.md","raw":"---\ntitle: C++常用的程序库\ndate: 2019-03-22 10:20:54\ntags: [c++]\ncategories: cpp\n---\n\n- 合适的程序库，可以带来方便。\n- 代码有深度且可读性高。\n\n<!-- more -->\n\n#### 强烈推荐的库\nprintf 不好用，ostream 也不好用，format 好用 [fmtlib/fmt](https://github.com/fmtlib/fmt)\n\n超高效级的 json 解析 [Tencent/rapidjson](https://github.com/Tencent/rapidjson)\n\n\n#### 其他库\n\n3D模型解析 [assimp/assimp](https://github.com/assimp/assimp)\n\n物理模拟 [bulletphysics/bullet3](https://github.com/bulletphysics/bullet3)\n\n渲染中间层 [bkaradzic/bgfx](https://github.com/bkaradzic/bgfx)\n\n3D灵感宣泄场所 [cinder/Cinder](https://github.com/cinder/Cinder) \n\n命令行帮助既是命令行解析 [https://github.com/docopt/docopt.cpp](https://github.com/docopt/docopt.cpp)\n\n\n\n3D 数学运算 [g-truc/glm](https://link.zhihu.com/?target=https%3A//github.com/g-truc/glm)\n\n拿来就能用的 UI [ocornut/imgui](https://github.com/ocornut/imgui)\n\njson 结构用在 C++ 里面就像在 JS 里面一样自然 [nlohmann/json](https://github.com/nlohmann/json)\n\n用过都知道它的好的性能分析工具 [jonasmr/microprofile](https://github.com/jonasmr/microprofile)\n\n又快又不折腾的 xml 解析 [zeux/pugixml](https://github.com/zeux/pugixml)\n\n专注寻路 [recastnavigation/recastnavigation](https://github.com/recastnavigation/recastnavigation) \n\n什么都能放到头文件中 [nothings/stb](https://github.com/nothings/stb)\n\n一键生成 C/C++ 对各种其他语言的接口 [swig/swig](https://github.com/swig/swig)\n\n最快的哈希算法 [Cyan4973/xxHash](https://github.com/Cyan4973/xxHash)\n\n包含大量计算几何算法的 [Geometric Tools](https://www.geometrictools.com/)\n\n包含最经典渲染算法的 [mmp/pbrt-v3](https://github.com/mmp/pbrt-v3)\n\n又小又快又方便的单元测试库 [onqtam/doctest](https://github.com/onqtam/doctest)\n\n高精度浮点数运算库 [LibBF Library](https://bellard.org/libbf/)\n\n#### 线程\n\n- [C++ Threads](http://threads.sourceforge.net/)：这个库的目标是给程序员提供易于使用的类，这些类被继承以提供在Linux环境中很难看到的大量的线程方面的功能。\n- [ZThreads](http://zthread.sourceforge.net/)：跨平台的C++线程和同步库。\n\n\n#### 字符串\n\n- [C++ Str Library](http://www.utilitycode.com/str/)：操作字符串和字符的库，支持Windows和支持gcc的多种平台。\n- [Common Text Transformation Library](http://cttl.sourceforge.net/)：解析和修改STL字符串的库。\n- [GRETA](http://research.microsoft.com/projects/greta/)：由微软研究院的研究人员开发的处理正则表达式的库，在小型匹配的情况下有非常优秀的表现。\n\n\n#### C语言开源项目：\n\n- [Webbench](http://home.tiscali.cz/~cz210552/webbench.html)：在Linux下使用的非常简单的网站压测工具，使用C语言编写, 代码超级简洁，源码加起来几乎不到600行。\n- [Tinyhttpd](http://sourceforge.net/projects/tinyhttpd/)：超轻量型Http Server，C语言开发，附带简单的Client，可通过阅读这段代码理解一个 Http Server 的本质。\n- [cJSON](http://sourceforge.net/projects/cjson/)：C语言中的一个JSON编解码器，非常轻量级，速度非常理想。结构简单易懂，可以作为一个非常好的C语言项目进行学习。\n- [CMockery](http://code.google.com/p/cmockery/downloads/list)：Google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。\n- [Libev](http://software.schmorp.de/pkg/libev.html)：基于Reactor模式，效率较高，并且代码精简，是学习事件驱动编程的很好的资源。\n- [Memcached](http://memcached.org/)：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。\n- [Lua](http://www.lua.org/)：在任何支持ANSI C编译器的平台上都可以轻松编译通过。\n- [SQLite](http://www.sqlite.org/)：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。\n- [NETBSD](http://www.netbsd.org/)：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统。\n\n\n\n- 应用开发框架Qt，优雅的信号与槽，强大的界面类库，跨平台。\n- CEF（Chromium Embedded Framework），使用网页做富客户端的绝佳选择，基于Chromium，可以方便嵌入到你的应用中。类似的还有 Electron 。\n- WebRTC，非常赞的框架，做音视频通信绕不开的。\n- TinyXml，小巧的C++ XML库，几个源文件，直接加入到项目中就可以用\n- Protobuf，Google的，网络通信，非常赞，方便序列化和结构化，流量又小\n- FreeImage，强大好用的图形库\n- Libevent，轻量级的基于事件驱动的高性能的开源网络库\n- ffmpeg，多媒体开发类库的无冕之王\n\n---\n- 一个非常容易上手的 C++ gui 库 [nana](http://nanapro.org/en-us/)\n- http客户端curl\n- http服务器 crow\n- gzip压缩zlib\n- json序列化nlohmann/json\n- 二进制序列化protobuf\n- 嵌入式数据库sqlite\n- 日志库glog\n- 参数解析库gflags\n- 消息队列zmq\n- rpc库brpc\n- tcp网络库evpp\n- 3d仿真osg\n- 图形图像opencv\n- stl,boost,qt就不用说了。","slug":"C-常用的程序库","published":1,"updated":"2021-04-19T04:53:28.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxeo000isify8okpshop","content":"<ul>\n<li>合适的程序库，可以带来方便。</li>\n<li>代码有深度且可读性高。</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"强烈推荐的库\"><a class=\"markdownIt-Anchor\" href=\"#强烈推荐的库\"></a> 强烈推荐的库</h4>\n<p>printf 不好用，ostream 也不好用，format 好用 <a href=\"https://github.com/fmtlib/fmt\" target=\"_blank\" rel=\"noopener\">fmtlib/fmt</a></p>\n<p>超高效级的 json 解析 <a href=\"https://github.com/Tencent/rapidjson\" target=\"_blank\" rel=\"noopener\">Tencent/rapidjson</a></p>\n<h4 id=\"其他库\"><a class=\"markdownIt-Anchor\" href=\"#其他库\"></a> 其他库</h4>\n<p>3D模型解析 <a href=\"https://github.com/assimp/assimp\" target=\"_blank\" rel=\"noopener\">assimp/assimp</a></p>\n<p>物理模拟 <a href=\"https://github.com/bulletphysics/bullet3\" target=\"_blank\" rel=\"noopener\">bulletphysics/bullet3</a></p>\n<p>渲染中间层 <a href=\"https://github.com/bkaradzic/bgfx\" target=\"_blank\" rel=\"noopener\">bkaradzic/bgfx</a></p>\n<p>3D灵感宣泄场所 <a href=\"https://github.com/cinder/Cinder\" target=\"_blank\" rel=\"noopener\">cinder/Cinder</a></p>\n<p>命令行帮助既是命令行解析 <a href=\"https://github.com/docopt/docopt.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/docopt/docopt.cpp</a></p>\n<p>3D 数学运算 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/g-truc/glm\" target=\"_blank\" rel=\"noopener\">g-truc/glm</a></p>\n<p>拿来就能用的 UI <a href=\"https://github.com/ocornut/imgui\" target=\"_blank\" rel=\"noopener\">ocornut/imgui</a></p>\n<p>json 结构用在 C++ 里面就像在 JS 里面一样自然 <a href=\"https://github.com/nlohmann/json\" target=\"_blank\" rel=\"noopener\">nlohmann/json</a></p>\n<p>用过都知道它的好的性能分析工具 <a href=\"https://github.com/jonasmr/microprofile\" target=\"_blank\" rel=\"noopener\">jonasmr/microprofile</a></p>\n<p>又快又不折腾的 xml 解析 <a href=\"https://github.com/zeux/pugixml\" target=\"_blank\" rel=\"noopener\">zeux/pugixml</a></p>\n<p>专注寻路 <a href=\"https://github.com/recastnavigation/recastnavigation\" target=\"_blank\" rel=\"noopener\">recastnavigation/recastnavigation</a></p>\n<p>什么都能放到头文件中 <a href=\"https://github.com/nothings/stb\" target=\"_blank\" rel=\"noopener\">nothings/stb</a></p>\n<p>一键生成 C/C++ 对各种其他语言的接口 <a href=\"https://github.com/swig/swig\" target=\"_blank\" rel=\"noopener\">swig/swig</a></p>\n<p>最快的哈希算法 <a href=\"https://github.com/Cyan4973/xxHash\" target=\"_blank\" rel=\"noopener\">Cyan4973/xxHash</a></p>\n<p>包含大量计算几何算法的 <a href=\"https://www.geometrictools.com/\" target=\"_blank\" rel=\"noopener\">Geometric Tools</a></p>\n<p>包含最经典渲染算法的 <a href=\"https://github.com/mmp/pbrt-v3\" target=\"_blank\" rel=\"noopener\">mmp/pbrt-v3</a></p>\n<p>又小又快又方便的单元测试库 <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">onqtam/doctest</a></p>\n<p>高精度浮点数运算库 <a href=\"https://bellard.org/libbf/\" target=\"_blank\" rel=\"noopener\">LibBF Library</a></p>\n<h4 id=\"线程\"><a class=\"markdownIt-Anchor\" href=\"#线程\"></a> 线程</h4>\n<ul>\n<li><a href=\"http://threads.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">C++ Threads</a>：这个库的目标是给程序员提供易于使用的类，这些类被继承以提供在Linux环境中很难看到的大量的线程方面的功能。</li>\n<li><a href=\"http://zthread.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">ZThreads</a>：跨平台的C++线程和同步库。</li>\n</ul>\n<h4 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h4>\n<ul>\n<li><a href=\"http://www.utilitycode.com/str/\" target=\"_blank\" rel=\"noopener\">C++ Str Library</a>：操作字符串和字符的库，支持Windows和支持gcc的多种平台。</li>\n<li><a href=\"http://cttl.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Common Text Transformation Library</a>：解析和修改STL字符串的库。</li>\n<li><a href=\"http://research.microsoft.com/projects/greta/\" target=\"_blank\" rel=\"noopener\">GRETA</a>：由微软研究院的研究人员开发的处理正则表达式的库，在小型匹配的情况下有非常优秀的表现。</li>\n</ul>\n<h4 id=\"c语言开源项目\"><a class=\"markdownIt-Anchor\" href=\"#c语言开源项目\"></a> C语言开源项目：</h4>\n<ul>\n<li>\n<p><a href=\"http://home.tiscali.cz/~cz210552/webbench.html\" target=\"_blank\" rel=\"noopener\">Webbench</a>：在Linux下使用的非常简单的网站压测工具，使用C语言编写, 代码超级简洁，源码加起来几乎不到600行。</p>\n</li>\n<li>\n<p><a href=\"http://sourceforge.net/projects/tinyhttpd/\" target=\"_blank\" rel=\"noopener\">Tinyhttpd</a>：超轻量型Http Server，C语言开发，附带简单的Client，可通过阅读这段代码理解一个 Http Server 的本质。</p>\n</li>\n<li>\n<p><a href=\"http://sourceforge.net/projects/cjson/\" target=\"_blank\" rel=\"noopener\">cJSON</a>：C语言中的一个JSON编解码器，非常轻量级，速度非常理想。结构简单易懂，可以作为一个非常好的C语言项目进行学习。</p>\n</li>\n<li>\n<p><a href=\"http://code.google.com/p/cmockery/downloads/list\" target=\"_blank\" rel=\"noopener\">CMockery</a>：Google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。</p>\n</li>\n<li>\n<p><a href=\"http://software.schmorp.de/pkg/libev.html\" target=\"_blank\" rel=\"noopener\">Libev</a>：基于Reactor模式，效率较高，并且代码精简，是学习事件驱动编程的很好的资源。</p>\n</li>\n<li>\n<p><a href=\"http://memcached.org/\" target=\"_blank\" rel=\"noopener\">Memcached</a>：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。</p>\n</li>\n<li>\n<p><a href=\"http://www.lua.org/\" target=\"_blank\" rel=\"noopener\">Lua</a>：在任何支持ANSI C编译器的平台上都可以轻松编译通过。</p>\n</li>\n<li>\n<p><a href=\"http://www.sqlite.org/\" target=\"_blank\" rel=\"noopener\">SQLite</a>：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。</p>\n</li>\n<li>\n<p><a href=\"http://www.netbsd.org/\" target=\"_blank\" rel=\"noopener\">NETBSD</a>：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统。</p>\n</li>\n<li>\n<p>应用开发框架Qt，优雅的信号与槽，强大的界面类库，跨平台。</p>\n</li>\n<li>\n<p>CEF（Chromium Embedded Framework），使用网页做富客户端的绝佳选择，基于Chromium，可以方便嵌入到你的应用中。类似的还有 Electron 。</p>\n</li>\n<li>\n<p>WebRTC，非常赞的框架，做音视频通信绕不开的。</p>\n</li>\n<li>\n<p>TinyXml，小巧的C++ XML库，几个源文件，直接加入到项目中就可以用</p>\n</li>\n<li>\n<p>Protobuf，Google的，网络通信，非常赞，方便序列化和结构化，流量又小</p>\n</li>\n<li>\n<p>FreeImage，强大好用的图形库</p>\n</li>\n<li>\n<p>Libevent，轻量级的基于事件驱动的高性能的开源网络库</p>\n</li>\n<li>\n<p>ffmpeg，多媒体开发类库的无冕之王</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>一个非常容易上手的 C++ gui 库 <a href=\"http://nanapro.org/en-us/\" target=\"_blank\" rel=\"noopener\">nana</a></li>\n<li>http客户端curl</li>\n<li>http服务器 crow</li>\n<li>gzip压缩zlib</li>\n<li>json序列化nlohmann/json</li>\n<li>二进制序列化protobuf</li>\n<li>嵌入式数据库sqlite</li>\n<li>日志库glog</li>\n<li>参数解析库gflags</li>\n<li>消息队列zmq</li>\n<li>rpc库brpc</li>\n<li>tcp网络库evpp</li>\n<li>3d仿真osg</li>\n<li>图形图像opencv</li>\n<li>stl,boost,qt就不用说了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li>合适的程序库，可以带来方便。</li>\n<li>代码有深度且可读性高。</li>\n</ul>","more":"<h4 id=\"强烈推荐的库\"><a class=\"markdownIt-Anchor\" href=\"#强烈推荐的库\"></a> 强烈推荐的库</h4>\n<p>printf 不好用，ostream 也不好用，format 好用 <a href=\"https://github.com/fmtlib/fmt\" target=\"_blank\" rel=\"noopener\">fmtlib/fmt</a></p>\n<p>超高效级的 json 解析 <a href=\"https://github.com/Tencent/rapidjson\" target=\"_blank\" rel=\"noopener\">Tencent/rapidjson</a></p>\n<h4 id=\"其他库\"><a class=\"markdownIt-Anchor\" href=\"#其他库\"></a> 其他库</h4>\n<p>3D模型解析 <a href=\"https://github.com/assimp/assimp\" target=\"_blank\" rel=\"noopener\">assimp/assimp</a></p>\n<p>物理模拟 <a href=\"https://github.com/bulletphysics/bullet3\" target=\"_blank\" rel=\"noopener\">bulletphysics/bullet3</a></p>\n<p>渲染中间层 <a href=\"https://github.com/bkaradzic/bgfx\" target=\"_blank\" rel=\"noopener\">bkaradzic/bgfx</a></p>\n<p>3D灵感宣泄场所 <a href=\"https://github.com/cinder/Cinder\" target=\"_blank\" rel=\"noopener\">cinder/Cinder</a></p>\n<p>命令行帮助既是命令行解析 <a href=\"https://github.com/docopt/docopt.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/docopt/docopt.cpp</a></p>\n<p>3D 数学运算 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/g-truc/glm\" target=\"_blank\" rel=\"noopener\">g-truc/glm</a></p>\n<p>拿来就能用的 UI <a href=\"https://github.com/ocornut/imgui\" target=\"_blank\" rel=\"noopener\">ocornut/imgui</a></p>\n<p>json 结构用在 C++ 里面就像在 JS 里面一样自然 <a href=\"https://github.com/nlohmann/json\" target=\"_blank\" rel=\"noopener\">nlohmann/json</a></p>\n<p>用过都知道它的好的性能分析工具 <a href=\"https://github.com/jonasmr/microprofile\" target=\"_blank\" rel=\"noopener\">jonasmr/microprofile</a></p>\n<p>又快又不折腾的 xml 解析 <a href=\"https://github.com/zeux/pugixml\" target=\"_blank\" rel=\"noopener\">zeux/pugixml</a></p>\n<p>专注寻路 <a href=\"https://github.com/recastnavigation/recastnavigation\" target=\"_blank\" rel=\"noopener\">recastnavigation/recastnavigation</a></p>\n<p>什么都能放到头文件中 <a href=\"https://github.com/nothings/stb\" target=\"_blank\" rel=\"noopener\">nothings/stb</a></p>\n<p>一键生成 C/C++ 对各种其他语言的接口 <a href=\"https://github.com/swig/swig\" target=\"_blank\" rel=\"noopener\">swig/swig</a></p>\n<p>最快的哈希算法 <a href=\"https://github.com/Cyan4973/xxHash\" target=\"_blank\" rel=\"noopener\">Cyan4973/xxHash</a></p>\n<p>包含大量计算几何算法的 <a href=\"https://www.geometrictools.com/\" target=\"_blank\" rel=\"noopener\">Geometric Tools</a></p>\n<p>包含最经典渲染算法的 <a href=\"https://github.com/mmp/pbrt-v3\" target=\"_blank\" rel=\"noopener\">mmp/pbrt-v3</a></p>\n<p>又小又快又方便的单元测试库 <a href=\"https://github.com/onqtam/doctest\" target=\"_blank\" rel=\"noopener\">onqtam/doctest</a></p>\n<p>高精度浮点数运算库 <a href=\"https://bellard.org/libbf/\" target=\"_blank\" rel=\"noopener\">LibBF Library</a></p>\n<h4 id=\"线程\"><a class=\"markdownIt-Anchor\" href=\"#线程\"></a> 线程</h4>\n<ul>\n<li><a href=\"http://threads.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">C++ Threads</a>：这个库的目标是给程序员提供易于使用的类，这些类被继承以提供在Linux环境中很难看到的大量的线程方面的功能。</li>\n<li><a href=\"http://zthread.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">ZThreads</a>：跨平台的C++线程和同步库。</li>\n</ul>\n<h4 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h4>\n<ul>\n<li><a href=\"http://www.utilitycode.com/str/\" target=\"_blank\" rel=\"noopener\">C++ Str Library</a>：操作字符串和字符的库，支持Windows和支持gcc的多种平台。</li>\n<li><a href=\"http://cttl.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Common Text Transformation Library</a>：解析和修改STL字符串的库。</li>\n<li><a href=\"http://research.microsoft.com/projects/greta/\" target=\"_blank\" rel=\"noopener\">GRETA</a>：由微软研究院的研究人员开发的处理正则表达式的库，在小型匹配的情况下有非常优秀的表现。</li>\n</ul>\n<h4 id=\"c语言开源项目\"><a class=\"markdownIt-Anchor\" href=\"#c语言开源项目\"></a> C语言开源项目：</h4>\n<ul>\n<li>\n<p><a href=\"http://home.tiscali.cz/~cz210552/webbench.html\" target=\"_blank\" rel=\"noopener\">Webbench</a>：在Linux下使用的非常简单的网站压测工具，使用C语言编写, 代码超级简洁，源码加起来几乎不到600行。</p>\n</li>\n<li>\n<p><a href=\"http://sourceforge.net/projects/tinyhttpd/\" target=\"_blank\" rel=\"noopener\">Tinyhttpd</a>：超轻量型Http Server，C语言开发，附带简单的Client，可通过阅读这段代码理解一个 Http Server 的本质。</p>\n</li>\n<li>\n<p><a href=\"http://sourceforge.net/projects/cjson/\" target=\"_blank\" rel=\"noopener\">cJSON</a>：C语言中的一个JSON编解码器，非常轻量级，速度非常理想。结构简单易懂，可以作为一个非常好的C语言项目进行学习。</p>\n</li>\n<li>\n<p><a href=\"http://code.google.com/p/cmockery/downloads/list\" target=\"_blank\" rel=\"noopener\">CMockery</a>：Google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。</p>\n</li>\n<li>\n<p><a href=\"http://software.schmorp.de/pkg/libev.html\" target=\"_blank\" rel=\"noopener\">Libev</a>：基于Reactor模式，效率较高，并且代码精简，是学习事件驱动编程的很好的资源。</p>\n</li>\n<li>\n<p><a href=\"http://memcached.org/\" target=\"_blank\" rel=\"noopener\">Memcached</a>：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。</p>\n</li>\n<li>\n<p><a href=\"http://www.lua.org/\" target=\"_blank\" rel=\"noopener\">Lua</a>：在任何支持ANSI C编译器的平台上都可以轻松编译通过。</p>\n</li>\n<li>\n<p><a href=\"http://www.sqlite.org/\" target=\"_blank\" rel=\"noopener\">SQLite</a>：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。</p>\n</li>\n<li>\n<p><a href=\"http://www.netbsd.org/\" target=\"_blank\" rel=\"noopener\">NETBSD</a>：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统。</p>\n</li>\n<li>\n<p>应用开发框架Qt，优雅的信号与槽，强大的界面类库，跨平台。</p>\n</li>\n<li>\n<p>CEF（Chromium Embedded Framework），使用网页做富客户端的绝佳选择，基于Chromium，可以方便嵌入到你的应用中。类似的还有 Electron 。</p>\n</li>\n<li>\n<p>WebRTC，非常赞的框架，做音视频通信绕不开的。</p>\n</li>\n<li>\n<p>TinyXml，小巧的C++ XML库，几个源文件，直接加入到项目中就可以用</p>\n</li>\n<li>\n<p>Protobuf，Google的，网络通信，非常赞，方便序列化和结构化，流量又小</p>\n</li>\n<li>\n<p>FreeImage，强大好用的图形库</p>\n</li>\n<li>\n<p>Libevent，轻量级的基于事件驱动的高性能的开源网络库</p>\n</li>\n<li>\n<p>ffmpeg，多媒体开发类库的无冕之王</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>一个非常容易上手的 C++ gui 库 <a href=\"http://nanapro.org/en-us/\" target=\"_blank\" rel=\"noopener\">nana</a></li>\n<li>http客户端curl</li>\n<li>http服务器 crow</li>\n<li>gzip压缩zlib</li>\n<li>json序列化nlohmann/json</li>\n<li>二进制序列化protobuf</li>\n<li>嵌入式数据库sqlite</li>\n<li>日志库glog</li>\n<li>参数解析库gflags</li>\n<li>消息队列zmq</li>\n<li>rpc库brpc</li>\n<li>tcp网络库evpp</li>\n<li>3d仿真osg</li>\n<li>图形图像opencv</li>\n<li>stl,boost,qt就不用说了。</li>\n</ul>"},{"title":"C++-OSI参考模型","date":"2019-04-16T10:13:56.000Z","_content":"\n### OSI参考模型\n\n开发式系统互联（Open System Interconnection）简称OSI, 是国际标准化组织(ISO)为了实现计算机网络的标准化而颁布的参考模型。OSI 参考模型采用分层的划分原则，将网络中的数据传输划分为7层，每一层使用下层的服务，并向上层提供服务。\n\n<!-- more -->\n\nOSI参考模型\n\n|层 次|名 称|功 能 描 述|\n|:--:|:--:|:--:|\n|第7层|应用层（Application）|应用层负责网络中应用程序与网络操作系统之间的联系。例如，建立和结束使用者之间的连接，管理建立相互连接使用的应用资源|\n|第6层|表示层（Presentation）|表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，并负责设备之间所需要的字符集和数据的转换|\n|第5层|会话层（Session）|会话层是用户应用程序与网络层的接口，它能够建立与其他设备的连接，即会话。并且它能够对会话进行有效的管理|\n|第4层|传输层（Tansport）|传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层|\n|第3层|网络层（Network）|网络层能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备|\n|第2层|数据链路层（Data Link）|数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过物理介质传输数据的方法|\n|第1层|物理层（Physical）|利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度|\n\nOSI参考模型的建立不仅创建了通信设备之间的物理通道，还规划了各层之间的功能，为标准化组合和生产厂家定制协议提供了基本原则，它有助于用户了解复杂的协议，例如TCP/IP、X.25协议等。用户可以将这些协议与OSI参考模型对比，进而了解这些协议的工作原理。\n\n---\n### TCP/IP 参考模型\n\nTCP/IP(Transmission Control Protocal/Internet Protocal, 传输控制协议/网际协议)协议是互联网上最流行的协议，但它并不完全符合 OSI 的7层参考模型。传统的开放式系统互联参考模型，是一种通信协议的 7 层抽象的参考模型，其中每一层执行某一特定任务，该模型的目的是使各种硬件在相同的层次上相互通信，这7层是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。而TCP/IP通信协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为：\n\n☑ 应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。\n\n☑ 传输层：在此层中提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据包协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中。这一层负责传送数据，并且确定数据已被送达并接收。\n\n☑ 互联网络层： 负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网络协议（IP）。\n\n☑ 网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。\n\n","source":"_posts/C-OSI参考模型.md","raw":"---\ntitle: C++-OSI参考模型\ndate: 2019-04-16 18:13:56\ntags: [c++]\ncategories: cpp\n---\n\n### OSI参考模型\n\n开发式系统互联（Open System Interconnection）简称OSI, 是国际标准化组织(ISO)为了实现计算机网络的标准化而颁布的参考模型。OSI 参考模型采用分层的划分原则，将网络中的数据传输划分为7层，每一层使用下层的服务，并向上层提供服务。\n\n<!-- more -->\n\nOSI参考模型\n\n|层 次|名 称|功 能 描 述|\n|:--:|:--:|:--:|\n|第7层|应用层（Application）|应用层负责网络中应用程序与网络操作系统之间的联系。例如，建立和结束使用者之间的连接，管理建立相互连接使用的应用资源|\n|第6层|表示层（Presentation）|表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，并负责设备之间所需要的字符集和数据的转换|\n|第5层|会话层（Session）|会话层是用户应用程序与网络层的接口，它能够建立与其他设备的连接，即会话。并且它能够对会话进行有效的管理|\n|第4层|传输层（Tansport）|传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层|\n|第3层|网络层（Network）|网络层能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备|\n|第2层|数据链路层（Data Link）|数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过物理介质传输数据的方法|\n|第1层|物理层（Physical）|利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度|\n\nOSI参考模型的建立不仅创建了通信设备之间的物理通道，还规划了各层之间的功能，为标准化组合和生产厂家定制协议提供了基本原则，它有助于用户了解复杂的协议，例如TCP/IP、X.25协议等。用户可以将这些协议与OSI参考模型对比，进而了解这些协议的工作原理。\n\n---\n### TCP/IP 参考模型\n\nTCP/IP(Transmission Control Protocal/Internet Protocal, 传输控制协议/网际协议)协议是互联网上最流行的协议，但它并不完全符合 OSI 的7层参考模型。传统的开放式系统互联参考模型，是一种通信协议的 7 层抽象的参考模型，其中每一层执行某一特定任务，该模型的目的是使各种硬件在相同的层次上相互通信，这7层是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。而TCP/IP通信协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为：\n\n☑ 应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。\n\n☑ 传输层：在此层中提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据包协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中。这一层负责传送数据，并且确定数据已被送达并接收。\n\n☑ 互联网络层： 负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网络协议（IP）。\n\n☑ 网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。\n\n","slug":"C-OSI参考模型","published":1,"updated":"2021-04-19T04:53:11.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxep000ksifymoy4d27l","content":"<h3 id=\"osi参考模型\"><a class=\"markdownIt-Anchor\" href=\"#osi参考模型\"></a> OSI参考模型</h3>\n<p>开发式系统互联（Open System Interconnection）简称OSI, 是国际标准化组织(ISO)为了实现计算机网络的标准化而颁布的参考模型。OSI 参考模型采用分层的划分原则，将网络中的数据传输划分为7层，每一层使用下层的服务，并向上层提供服务。</p>\n<a id=\"more\"></a>\n<p>OSI参考模型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层 次</th>\n<th style=\"text-align:center\">名 称</th>\n<th style=\"text-align:center\">功 能 描 述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第7层</td>\n<td style=\"text-align:center\">应用层（Application）</td>\n<td style=\"text-align:center\">应用层负责网络中应用程序与网络操作系统之间的联系。例如，建立和结束使用者之间的连接，管理建立相互连接使用的应用资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6层</td>\n<td style=\"text-align:center\">表示层（Presentation）</td>\n<td style=\"text-align:center\">表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，并负责设备之间所需要的字符集和数据的转换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5层</td>\n<td style=\"text-align:center\">会话层（Session）</td>\n<td style=\"text-align:center\">会话层是用户应用程序与网络层的接口，它能够建立与其他设备的连接，即会话。并且它能够对会话进行有效的管理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4层</td>\n<td style=\"text-align:center\">传输层（Tansport）</td>\n<td style=\"text-align:center\">传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3层</td>\n<td style=\"text-align:center\">网络层（Network）</td>\n<td style=\"text-align:center\">网络层能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2层</td>\n<td style=\"text-align:center\">数据链路层（Data Link）</td>\n<td style=\"text-align:center\">数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过物理介质传输数据的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第1层</td>\n<td style=\"text-align:center\">物理层（Physical）</td>\n<td style=\"text-align:center\">利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度</td>\n</tr>\n</tbody>\n</table>\n<p>OSI参考模型的建立不仅创建了通信设备之间的物理通道，还规划了各层之间的功能，为标准化组合和生产厂家定制协议提供了基本原则，它有助于用户了解复杂的协议，例如TCP/IP、X.25协议等。用户可以将这些协议与OSI参考模型对比，进而了解这些协议的工作原理。</p>\n<hr>\n<h3 id=\"tcpip-参考模型\"><a class=\"markdownIt-Anchor\" href=\"#tcpip-参考模型\"></a> TCP/IP 参考模型</h3>\n<p>TCP/IP(Transmission Control Protocal/Internet Protocal, 传输控制协议/网际协议)协议是互联网上最流行的协议，但它并不完全符合 OSI 的7层参考模型。传统的开放式系统互联参考模型，是一种通信协议的 7 层抽象的参考模型，其中每一层执行某一特定任务，该模型的目的是使各种硬件在相同的层次上相互通信，这7层是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。而TCP/IP通信协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为：</p>\n<p>☑ 应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。</p>\n<p>☑ 传输层：在此层中提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据包协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中。这一层负责传送数据，并且确定数据已被送达并接收。</p>\n<p>☑ 互联网络层： 负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网络协议（IP）。</p>\n<p>☑ 网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"osi参考模型\"><a class=\"markdownIt-Anchor\" href=\"#osi参考模型\"></a> OSI参考模型</h3>\n<p>开发式系统互联（Open System Interconnection）简称OSI, 是国际标准化组织(ISO)为了实现计算机网络的标准化而颁布的参考模型。OSI 参考模型采用分层的划分原则，将网络中的数据传输划分为7层，每一层使用下层的服务，并向上层提供服务。</p>","more":"<p>OSI参考模型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">层 次</th>\n<th style=\"text-align:center\">名 称</th>\n<th style=\"text-align:center\">功 能 描 述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">第7层</td>\n<td style=\"text-align:center\">应用层（Application）</td>\n<td style=\"text-align:center\">应用层负责网络中应用程序与网络操作系统之间的联系。例如，建立和结束使用者之间的连接，管理建立相互连接使用的应用资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第6层</td>\n<td style=\"text-align:center\">表示层（Presentation）</td>\n<td style=\"text-align:center\">表示层用于确定数据交换的格式，它能够解决应用程序之间在数据格式上的差异，并负责设备之间所需要的字符集和数据的转换</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第5层</td>\n<td style=\"text-align:center\">会话层（Session）</td>\n<td style=\"text-align:center\">会话层是用户应用程序与网络层的接口，它能够建立与其他设备的连接，即会话。并且它能够对会话进行有效的管理</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第4层</td>\n<td style=\"text-align:center\">传输层（Tansport）</td>\n<td style=\"text-align:center\">传输层提供会话层和网络层之间的传输服务，该服务从会话层获得数据，必要时对数据进行分割，然后传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第3层</td>\n<td style=\"text-align:center\">网络层（Network）</td>\n<td style=\"text-align:center\">网络层能够将传输的数据封包，然后通过路由选择、分段组合等控制，将信息从源设备传送到目标设备</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第2层</td>\n<td style=\"text-align:center\">数据链路层（Data Link）</td>\n<td style=\"text-align:center\">数据链路层主要是修正传输过程中的错误信号，它能够提供可靠的通过物理介质传输数据的方法</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">第1层</td>\n<td style=\"text-align:center\">物理层（Physical）</td>\n<td style=\"text-align:center\">利用传输介质为数据链路层提供物理连接，它规范了网络硬件的特性、规格和传输速度</td>\n</tr>\n</tbody>\n</table>\n<p>OSI参考模型的建立不仅创建了通信设备之间的物理通道，还规划了各层之间的功能，为标准化组合和生产厂家定制协议提供了基本原则，它有助于用户了解复杂的协议，例如TCP/IP、X.25协议等。用户可以将这些协议与OSI参考模型对比，进而了解这些协议的工作原理。</p>\n<hr>\n<h3 id=\"tcpip-参考模型\"><a class=\"markdownIt-Anchor\" href=\"#tcpip-参考模型\"></a> TCP/IP 参考模型</h3>\n<p>TCP/IP(Transmission Control Protocal/Internet Protocal, 传输控制协议/网际协议)协议是互联网上最流行的协议，但它并不完全符合 OSI 的7层参考模型。传统的开放式系统互联参考模型，是一种通信协议的 7 层抽象的参考模型，其中每一层执行某一特定任务，该模型的目的是使各种硬件在相同的层次上相互通信，这7层是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。而TCP/IP通信协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。这4层分别为：</p>\n<p>☑ 应用层：应用程序间沟通的层，如简单电子邮件传输（SMTP）、文件传输协议（FTP）、网络远程访问协议（Telnet）等。</p>\n<p>☑ 传输层：在此层中提供了节点间的数据传送服务，如传输控制协议（TCP）、用户数据包协议（UDP）等，TCP和UDP给数据包加入传输数据并把它传输到下一层中。这一层负责传送数据，并且确定数据已被送达并接收。</p>\n<p>☑ 互联网络层： 负责提供基本的数据封包传送功能，让每一块数据包都能够到达目的主机（但不检查是否被正确接收），如网络协议（IP）。</p>\n<p>☑ 网络接口层：对实际的网络媒体的管理，定义如何使用实际网络（如Ethernet、Serial Line等）来传送数据。</p>"},{"title":"C++流操作的控制","date":"2019-04-16T04:14:44.000Z","_content":"\n在头文件 `iomainip.h` 中定义了一些控制流输出格式的函数，默认情况下整型数按十进制形式输出，也可以通过 hex 将其设置为十六进制输出。\n\n流操作的控制具体函数如下。\n<!-- more -->\n\n##### (1) long setf(long f);\n\n根据参数 f 设置相应的格式标志，返回此前的设置。该参数 f 所对应的实参为无名枚举类型中的枚举常量(又称格式化常量)，可以同时使用一个或多个常量，每两个常量之间要用按位或操作符连接。\n如需要左对齐输出，并使数值中的字母大写时，则调用该函数的实参为 `ios::left|ios::uppercase`。\n\n##### (2) long unsetf(long f);\n\n根据参数 f 清除相应的格式化标志，返回此前的设置。 如果要清除此前左对齐输出设置，恢复默认的右对齐输出设置，则调用该函数的实参为 `ios::left`。\n\n##### (3) int width();\n\n返回当前的输出域宽。若返回数值为0，则表明没为刚才输出的数值设置输出域宽。输出域宽是指输出的值在流中所占有的字节数。\n\n##### (4) int width(int w);\n\n设置下一个数据值的输出域宽为w, 返回为输出上一个数据值所规定的域宽，若无规定则返回0.注意，此设置不是一直有效，而只是对下一个输出数据有效。\n\n##### (5) setiosflags(long f);\n\n设置f所对应的格式标志，功能与setf(long f)成员函数相同，当然，在输出该操作符后返回的是一个输出流。如果采用标准输出流 cout 输出它时，则返回 cout。输出每个操作符后都是如此，即返回输出它的流，以便向流中继续插入下一个数据。\n\n##### (6) resetiosflags(long f);\n\n清除 f 所对应的格式化标志，功能与 unsetf(long f)成员函数相同。输出后返回一个流。\n\n##### (7) setfill(int c);\n\n设置填充字符的 ASCⅡ 码为 c 的字符。\n\n##### (8) setprecision(int n);\n\n设置浮点数的输出精度为 n 。\n\n##### (9) setw(int w);\n\n设置下一个数据的输出域宽为 w 。\n\n数据输入/输出的格式控制还有更简便的形式，就是使用头文件 iomainip.h 中提供的操作符。使用这些操作符不需要调用成员函数，只要把它们作为插入操作符 \"\" 的输出对象即可。\n\n☑ dec: 转换为按十进制输出整数，是默认的输出格式。\n\n☑ oct: 转换为按八进制输出整数。\n\n☑ hex: 转换为按十六进制输出整数。\n\n☑ ws: 从输出流中读取空白字符。\n\n☑ endl: 输出换行符\\n 并刷新流。刷新流是指把流缓冲区的内容立即写入到对应的物理设备上。\n\n☑ ends: 输出一个空字符\\0。\n\n☑ flush: 只刷新一个输出流。\n\n例如 (控制打印程序)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nvoid main()\n{\n\tdouble a = 123.456789012345;\n\tcout << a << endl;\n\tcout << setprecision(9) << a << endl;\n\tcout << setprecision(6); // 恢复默认格式（精度为6）\n\tcout << setiosflags(ios::fixed);\n\tcout << setiosflags(ios::fixed) << setprecision(8) << a << endl;\n\tcout << setiosflags(ios::scientific) << a << endl;\n\tcout << setiosflags(ios::scientific) << setprecision(4) << a << endl;\n\n}\n``` \n\n\n例如 (整数输出的例子)：\n\n```c++\n\n#include <iostream>\n#include <iomainip>\nusing namespace std;\nvoid main()\n{\n\tint b = 123456;\t// 对b赋初值\n\tcout << b << endl;\t// 输出: 123456\n\tcout << hex << b << endl; // 输出：1e240\n\tcout << setiosflags(ios::uppercase) << b << endl;  // 输出：1E240\n\tcout << setw(10) << b << ',' << b << endl; // 输出：    123456， 123456\n\tcout << setfill('*') << setw(10) << b << endl; // 输出： **** 123456\n\tcout << setiosflags(ios::showpos) << b << endl; // 输出：+123456\n\n}\n```\n\n例如(输出大写的十六进制)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\nvoid main()\n{\n\tint i=0x2F,j=255;\n\tcout << i << endl;\n\tcout << hex << i << endl;\n\tcout << hex << j << endl;\n\tcout << hex << setiosflags(ios::uppercase)<<j<<endl;\n}\n```\n\n例如(控制输出精度)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\nvoid main()\n{\n\tint x = 123;\n\tdouble y = 3.1415;\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << y << endl;\n\tcout.setf(ios::left);\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << x;\n\tcout << \"y=\";\n\tcout << y << endl;\n\tcout.fill('*');\n\tcout.precision(4);\n\tcout.setf(ios:showpos);\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << x;\n\tcout << \"y=\";\n\tcout.width(10);\n\tcout << y << endl;\n}\n```\n\n例如（流输出小数点控制）：\n\n```c++\n\n#include <iostream>\nusing namespace std;\nvoid main()\n{\n\tfloat x = 20, y = -400;\n\tcout << x << '' << y << endl;\n\tcout.setf(ios::showpoint); // 强制显示小数点和无效0\n\tcout << x << '' << y << endl;\n\tcout.unsetf(ios::showpoint); \n\tcout.setf(ios::scientific); // 设置按科学表示法输出\n\tcout << x << '' << y << endl;\n\tcout.setf(ios::fixed); // 设置按定点表示法输出\n\tcout << x << '' << y << endl;\n}\n```","source":"_posts/C-流操作的控制.md","raw":"---\ntitle: C++流操作的控制\ndate: 2019-04-16 12:14:44\ntags: [c++]\ncategories: cpp\n---\n\n在头文件 `iomainip.h` 中定义了一些控制流输出格式的函数，默认情况下整型数按十进制形式输出，也可以通过 hex 将其设置为十六进制输出。\n\n流操作的控制具体函数如下。\n<!-- more -->\n\n##### (1) long setf(long f);\n\n根据参数 f 设置相应的格式标志，返回此前的设置。该参数 f 所对应的实参为无名枚举类型中的枚举常量(又称格式化常量)，可以同时使用一个或多个常量，每两个常量之间要用按位或操作符连接。\n如需要左对齐输出，并使数值中的字母大写时，则调用该函数的实参为 `ios::left|ios::uppercase`。\n\n##### (2) long unsetf(long f);\n\n根据参数 f 清除相应的格式化标志，返回此前的设置。 如果要清除此前左对齐输出设置，恢复默认的右对齐输出设置，则调用该函数的实参为 `ios::left`。\n\n##### (3) int width();\n\n返回当前的输出域宽。若返回数值为0，则表明没为刚才输出的数值设置输出域宽。输出域宽是指输出的值在流中所占有的字节数。\n\n##### (4) int width(int w);\n\n设置下一个数据值的输出域宽为w, 返回为输出上一个数据值所规定的域宽，若无规定则返回0.注意，此设置不是一直有效，而只是对下一个输出数据有效。\n\n##### (5) setiosflags(long f);\n\n设置f所对应的格式标志，功能与setf(long f)成员函数相同，当然，在输出该操作符后返回的是一个输出流。如果采用标准输出流 cout 输出它时，则返回 cout。输出每个操作符后都是如此，即返回输出它的流，以便向流中继续插入下一个数据。\n\n##### (6) resetiosflags(long f);\n\n清除 f 所对应的格式化标志，功能与 unsetf(long f)成员函数相同。输出后返回一个流。\n\n##### (7) setfill(int c);\n\n设置填充字符的 ASCⅡ 码为 c 的字符。\n\n##### (8) setprecision(int n);\n\n设置浮点数的输出精度为 n 。\n\n##### (9) setw(int w);\n\n设置下一个数据的输出域宽为 w 。\n\n数据输入/输出的格式控制还有更简便的形式，就是使用头文件 iomainip.h 中提供的操作符。使用这些操作符不需要调用成员函数，只要把它们作为插入操作符 \"\" 的输出对象即可。\n\n☑ dec: 转换为按十进制输出整数，是默认的输出格式。\n\n☑ oct: 转换为按八进制输出整数。\n\n☑ hex: 转换为按十六进制输出整数。\n\n☑ ws: 从输出流中读取空白字符。\n\n☑ endl: 输出换行符\\n 并刷新流。刷新流是指把流缓冲区的内容立即写入到对应的物理设备上。\n\n☑ ends: 输出一个空字符\\0。\n\n☑ flush: 只刷新一个输出流。\n\n例如 (控制打印程序)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\n\nvoid main()\n{\n\tdouble a = 123.456789012345;\n\tcout << a << endl;\n\tcout << setprecision(9) << a << endl;\n\tcout << setprecision(6); // 恢复默认格式（精度为6）\n\tcout << setiosflags(ios::fixed);\n\tcout << setiosflags(ios::fixed) << setprecision(8) << a << endl;\n\tcout << setiosflags(ios::scientific) << a << endl;\n\tcout << setiosflags(ios::scientific) << setprecision(4) << a << endl;\n\n}\n``` \n\n\n例如 (整数输出的例子)：\n\n```c++\n\n#include <iostream>\n#include <iomainip>\nusing namespace std;\nvoid main()\n{\n\tint b = 123456;\t// 对b赋初值\n\tcout << b << endl;\t// 输出: 123456\n\tcout << hex << b << endl; // 输出：1e240\n\tcout << setiosflags(ios::uppercase) << b << endl;  // 输出：1E240\n\tcout << setw(10) << b << ',' << b << endl; // 输出：    123456， 123456\n\tcout << setfill('*') << setw(10) << b << endl; // 输出： **** 123456\n\tcout << setiosflags(ios::showpos) << b << endl; // 输出：+123456\n\n}\n```\n\n例如(输出大写的十六进制)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\nvoid main()\n{\n\tint i=0x2F,j=255;\n\tcout << i << endl;\n\tcout << hex << i << endl;\n\tcout << hex << j << endl;\n\tcout << hex << setiosflags(ios::uppercase)<<j<<endl;\n}\n```\n\n例如(控制输出精度)：\n\n```c++\n\n#include <iostream>\n#include <iomanip>\nusing namespace std;\nvoid main()\n{\n\tint x = 123;\n\tdouble y = 3.1415;\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << y << endl;\n\tcout.setf(ios::left);\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << x;\n\tcout << \"y=\";\n\tcout << y << endl;\n\tcout.fill('*');\n\tcout.precision(4);\n\tcout.setf(ios:showpos);\n\tcout << \"x=\";\n\tcout.width(10);\n\tcout << x;\n\tcout << \"y=\";\n\tcout.width(10);\n\tcout << y << endl;\n}\n```\n\n例如（流输出小数点控制）：\n\n```c++\n\n#include <iostream>\nusing namespace std;\nvoid main()\n{\n\tfloat x = 20, y = -400;\n\tcout << x << '' << y << endl;\n\tcout.setf(ios::showpoint); // 强制显示小数点和无效0\n\tcout << x << '' << y << endl;\n\tcout.unsetf(ios::showpoint); \n\tcout.setf(ios::scientific); // 设置按科学表示法输出\n\tcout << x << '' << y << endl;\n\tcout.setf(ios::fixed); // 设置按定点表示法输出\n\tcout << x << '' << y << endl;\n}\n```","slug":"C-流操作的控制","published":1,"updated":"2021-04-19T04:54:00.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxeq000osify0mxeqs6r","content":"<p>在头文件 <code>iomainip.h</code> 中定义了一些控制流输出格式的函数，默认情况下整型数按十进制形式输出，也可以通过 hex 将其设置为十六进制输出。</p>\n<p>流操作的控制具体函数如下。</p>\n<a id=\"more\"></a>\n<h5 id=\"1-long-setflong-f\"><a class=\"markdownIt-Anchor\" href=\"#1-long-setflong-f\"></a> (1) long setf(long f);</h5>\n<p>根据参数 f 设置相应的格式标志，返回此前的设置。该参数 f 所对应的实参为无名枚举类型中的枚举常量(又称格式化常量)，可以同时使用一个或多个常量，每两个常量之间要用按位或操作符连接。<br>\n如需要左对齐输出，并使数值中的字母大写时，则调用该函数的实参为 <code>ios::left|ios::uppercase</code>。</p>\n<h5 id=\"2-long-unsetflong-f\"><a class=\"markdownIt-Anchor\" href=\"#2-long-unsetflong-f\"></a> (2) long unsetf(long f);</h5>\n<p>根据参数 f 清除相应的格式化标志，返回此前的设置。 如果要清除此前左对齐输出设置，恢复默认的右对齐输出设置，则调用该函数的实参为 <code>ios::left</code>。</p>\n<h5 id=\"3-int-width\"><a class=\"markdownIt-Anchor\" href=\"#3-int-width\"></a> (3) int width();</h5>\n<p>返回当前的输出域宽。若返回数值为0，则表明没为刚才输出的数值设置输出域宽。输出域宽是指输出的值在流中所占有的字节数。</p>\n<h5 id=\"4-int-widthint-w\"><a class=\"markdownIt-Anchor\" href=\"#4-int-widthint-w\"></a> (4) int width(int w);</h5>\n<p>设置下一个数据值的输出域宽为w, 返回为输出上一个数据值所规定的域宽，若无规定则返回0.注意，此设置不是一直有效，而只是对下一个输出数据有效。</p>\n<h5 id=\"5-setiosflagslong-f\"><a class=\"markdownIt-Anchor\" href=\"#5-setiosflagslong-f\"></a> (5) setiosflags(long f);</h5>\n<p>设置f所对应的格式标志，功能与setf(long f)成员函数相同，当然，在输出该操作符后返回的是一个输出流。如果采用标准输出流 cout 输出它时，则返回 cout。输出每个操作符后都是如此，即返回输出它的流，以便向流中继续插入下一个数据。</p>\n<h5 id=\"6-resetiosflagslong-f\"><a class=\"markdownIt-Anchor\" href=\"#6-resetiosflagslong-f\"></a> (6) resetiosflags(long f);</h5>\n<p>清除 f 所对应的格式化标志，功能与 unsetf(long f)成员函数相同。输出后返回一个流。</p>\n<h5 id=\"7-setfillint-c\"><a class=\"markdownIt-Anchor\" href=\"#7-setfillint-c\"></a> (7) setfill(int c);</h5>\n<p>设置填充字符的 ASCⅡ 码为 c 的字符。</p>\n<h5 id=\"8-setprecisionint-n\"><a class=\"markdownIt-Anchor\" href=\"#8-setprecisionint-n\"></a> (8) setprecision(int n);</h5>\n<p>设置浮点数的输出精度为 n 。</p>\n<h5 id=\"9-setwint-w\"><a class=\"markdownIt-Anchor\" href=\"#9-setwint-w\"></a> (9) setw(int w);</h5>\n<p>设置下一个数据的输出域宽为 w 。</p>\n<p>数据输入/输出的格式控制还有更简便的形式，就是使用头文件 iomainip.h 中提供的操作符。使用这些操作符不需要调用成员函数，只要把它们作为插入操作符 “” 的输出对象即可。</p>\n<p>☑ dec: 转换为按十进制输出整数，是默认的输出格式。</p>\n<p>☑ oct: 转换为按八进制输出整数。</p>\n<p>☑ hex: 转换为按十六进制输出整数。</p>\n<p>☑ ws: 从输出流中读取空白字符。</p>\n<p>☑ endl: 输出换行符\\n 并刷新流。刷新流是指把流缓冲区的内容立即写入到对应的物理设备上。</p>\n<p>☑ ends: 输出一个空字符\\0。</p>\n<p>☑ flush: 只刷新一个输出流。</p>\n<p>例如 (控制打印程序)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> a = <span class=\"number\">123.456789012345</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setprecision(<span class=\"number\">9</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setprecision(<span class=\"number\">6</span>); <span class=\"comment\">// 恢复默认格式（精度为6）</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::fixed);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class=\"number\">8</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; setprecision(<span class=\"number\">4</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例如 (整数输出的例子)：</span><br><span class=\"line\"></span><br><span class=\"line\">```c++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomainip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">123456</span>;\t<span class=\"comment\">// 对b赋初值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;\t<span class=\"comment\">// 输出: 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：1e240</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::uppercase) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 输出：1E240</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; b &lt;&lt; <span class=\"string\">','</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：    123456， 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'*'</span>) &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出： **** 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::showpos) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：+123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如(输出大写的十六进制)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0x2F</span>,j=<span class=\"number\">255</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; j &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; setiosflags(ios::uppercase)&lt;&lt;j&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如(控制输出精度)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">123</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> y = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::left);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"y=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.fill(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.precision(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios:showpos);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"y=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如（流输出小数点控制）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> x = <span class=\"number\">20</span>, y = <span class=\"number\">-400</span>;</span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::showpoint); <span class=\"comment\">// 强制显示小数点和无效0</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.unsetf(ios::showpoint); </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::scientific); <span class=\"comment\">// 设置按科学表示法输出</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::fixed); <span class=\"comment\">// 设置按定点表示法输出</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在头文件 <code>iomainip.h</code> 中定义了一些控制流输出格式的函数，默认情况下整型数按十进制形式输出，也可以通过 hex 将其设置为十六进制输出。</p>\n<p>流操作的控制具体函数如下。</p>","more":"<h5 id=\"1-long-setflong-f\"><a class=\"markdownIt-Anchor\" href=\"#1-long-setflong-f\"></a> (1) long setf(long f);</h5>\n<p>根据参数 f 设置相应的格式标志，返回此前的设置。该参数 f 所对应的实参为无名枚举类型中的枚举常量(又称格式化常量)，可以同时使用一个或多个常量，每两个常量之间要用按位或操作符连接。<br>\n如需要左对齐输出，并使数值中的字母大写时，则调用该函数的实参为 <code>ios::left|ios::uppercase</code>。</p>\n<h5 id=\"2-long-unsetflong-f\"><a class=\"markdownIt-Anchor\" href=\"#2-long-unsetflong-f\"></a> (2) long unsetf(long f);</h5>\n<p>根据参数 f 清除相应的格式化标志，返回此前的设置。 如果要清除此前左对齐输出设置，恢复默认的右对齐输出设置，则调用该函数的实参为 <code>ios::left</code>。</p>\n<h5 id=\"3-int-width\"><a class=\"markdownIt-Anchor\" href=\"#3-int-width\"></a> (3) int width();</h5>\n<p>返回当前的输出域宽。若返回数值为0，则表明没为刚才输出的数值设置输出域宽。输出域宽是指输出的值在流中所占有的字节数。</p>\n<h5 id=\"4-int-widthint-w\"><a class=\"markdownIt-Anchor\" href=\"#4-int-widthint-w\"></a> (4) int width(int w);</h5>\n<p>设置下一个数据值的输出域宽为w, 返回为输出上一个数据值所规定的域宽，若无规定则返回0.注意，此设置不是一直有效，而只是对下一个输出数据有效。</p>\n<h5 id=\"5-setiosflagslong-f\"><a class=\"markdownIt-Anchor\" href=\"#5-setiosflagslong-f\"></a> (5) setiosflags(long f);</h5>\n<p>设置f所对应的格式标志，功能与setf(long f)成员函数相同，当然，在输出该操作符后返回的是一个输出流。如果采用标准输出流 cout 输出它时，则返回 cout。输出每个操作符后都是如此，即返回输出它的流，以便向流中继续插入下一个数据。</p>\n<h5 id=\"6-resetiosflagslong-f\"><a class=\"markdownIt-Anchor\" href=\"#6-resetiosflagslong-f\"></a> (6) resetiosflags(long f);</h5>\n<p>清除 f 所对应的格式化标志，功能与 unsetf(long f)成员函数相同。输出后返回一个流。</p>\n<h5 id=\"7-setfillint-c\"><a class=\"markdownIt-Anchor\" href=\"#7-setfillint-c\"></a> (7) setfill(int c);</h5>\n<p>设置填充字符的 ASCⅡ 码为 c 的字符。</p>\n<h5 id=\"8-setprecisionint-n\"><a class=\"markdownIt-Anchor\" href=\"#8-setprecisionint-n\"></a> (8) setprecision(int n);</h5>\n<p>设置浮点数的输出精度为 n 。</p>\n<h5 id=\"9-setwint-w\"><a class=\"markdownIt-Anchor\" href=\"#9-setwint-w\"></a> (9) setw(int w);</h5>\n<p>设置下一个数据的输出域宽为 w 。</p>\n<p>数据输入/输出的格式控制还有更简便的形式，就是使用头文件 iomainip.h 中提供的操作符。使用这些操作符不需要调用成员函数，只要把它们作为插入操作符 “” 的输出对象即可。</p>\n<p>☑ dec: 转换为按十进制输出整数，是默认的输出格式。</p>\n<p>☑ oct: 转换为按八进制输出整数。</p>\n<p>☑ hex: 转换为按十六进制输出整数。</p>\n<p>☑ ws: 从输出流中读取空白字符。</p>\n<p>☑ endl: 输出换行符\\n 并刷新流。刷新流是指把流缓冲区的内容立即写入到对应的物理设备上。</p>\n<p>☑ ends: 输出一个空字符\\0。</p>\n<p>☑ flush: 只刷新一个输出流。</p>\n<p>例如 (控制打印程序)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> a = <span class=\"number\">123.456789012345</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setprecision(<span class=\"number\">9</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setprecision(<span class=\"number\">6</span>); <span class=\"comment\">// 恢复默认格式（精度为6）</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::fixed);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class=\"number\">8</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::scientific) &lt;&lt; setprecision(<span class=\"number\">4</span>) &lt;&lt; a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">``` </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">例如 (整数输出的例子)：</span><br><span class=\"line\"></span><br><span class=\"line\">```c++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomainip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">123456</span>;\t<span class=\"comment\">// 对b赋初值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;\t<span class=\"comment\">// 输出: 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：1e240</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::uppercase) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// 输出：1E240</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; b &lt;&lt; <span class=\"string\">','</span> &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：    123456， 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setfill(<span class=\"string\">'*'</span>) &lt;&lt; setw(<span class=\"number\">10</span>) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出： **** 123456</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; setiosflags(ios::showpos) &lt;&lt; b &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 输出：+123456</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如(输出大写的十六进制)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">0x2F</span>,j=<span class=\"number\">255</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; j &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; hex &lt;&lt; setiosflags(ios::uppercase)&lt;&lt;j&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如(控制输出精度)：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">123</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> y = <span class=\"number\">3.1415</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::left);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"y=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.fill(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.precision(<span class=\"number\">4</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios:showpos);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"x=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; x;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"y=\"</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.width(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; y &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例如（流输出小数点控制）：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> x = <span class=\"number\">20</span>, y = <span class=\"number\">-400</span>;</span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::showpoint); <span class=\"comment\">// 强制显示小数点和无效0</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.unsetf(ios::showpoint); </span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::scientific); <span class=\"comment\">// 设置按科学表示法输出</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>.setf(ios::fixed); <span class=\"comment\">// 设置按定点表示法输出</span></span><br><span class=\"line\">\tcout &lt;&lt; x &lt;&lt; '' &lt;&lt; y &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Atom 编辑器快捷键列表汇总整理","date":"2016-03-28T04:00:27.000Z","_content":"# Atom 编辑器快捷键列表汇总整理\n来自Github的Atom 编辑器已经更新到1.0版本了，由于有着 Github  的光环，很多人都在用，下面是网友总结的一些**Atom 快捷键列表**，喜欢高效键盘操作的朋友可以看下。\n\n<!-- more -->\n\n## 文件切换\n\nctrl-shift-s 保存所有打开的文件\nctrl-shift-o 打开目录\ncmd-\\ 显示或隐藏目录树\nctrl-0 焦点移到目录树\n目录树下，使用a, m, delete来增加，修改和删除\ncmd-t或cmd-p 查找文件\ncmd-b 在打开的文件之间切换\ncmd-shift-b 只搜索从上次git commit 修改或者新增的文件\n\n## 导航\n\n(等价于上下左右)\nctrl-p 前一行\nctrl-n 后一行\nctrl-f 前一个字符\nctrl-b 后一个字符\n\nalt-B, alt-left 移动到单词开始\nalt-F, alt-right 移动到单词末尾\n\ncmd-right, ctrl-E 移动到一行结束\ncmd-left, ctrl-A 移动到一行开始\n\ncmd-up 移动到文件开始\ncmd-down 移动到文件结束\n\nctrl-g 移到到指定行 row:column 处\n\ncmd-r 在方法之间跳转\n\n## 书签\n\ncmd-F2 在本行增加书签\nF2 跳到当前文件的下一条书签\nshift-F2 跳到当前文件的上一条书签\nctrl-F2 列出当前工程所有书签\n\n## 选取\n\n大部分和导航一致，只不过加上shift\nctrl-shift-P 选取至上一行\nctrl-shift-N 选取至下一行\nctrl-shift-B 选取至前一个字符\nctrl-shift-F 选取至后一个字符\n\nalt-shift-B, alt-shift-left 选取至字符开始\nalt-shift-F, alt-shift-right 选取至字符结束\nctrl-shift-E, cmd-shift-right 选取至本行结束\nctrl-shift-A, cmd-shift-left 选取至本行开始\n\ncmd-shift-up 选取至文本开始\ncmd-shift-down 选取至文件结尾\n\ncmd-A 全选\ncmd-L 选取一行， 继续按回选取下一行\nctrl-shift-W 选取当前单词\n\n## 编辑和删除文本\n\n> 基本操作\n---\n\nctrl-T 使光标前后字符交换\ncmd-J 将下一行与当前行合并\nctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动\ncmd-shift-D 复制当前行到下一行\ncmd-K, cmd-U 使当前字符大写\ncmd-K, cmd-L 使当前字符小写\n\n\n>删除和剪切\n---\n\nctrl-shift-K 删除当前行\ncmd-backspace 删除到当前行开始\ncmd-fn-backspace 删除到当前行结束\nctrl-K 剪切到当前行结束\nalt-backspace 或 alt-H 删除到当前单词开始\nalt-delete 或 alt-D 删除到当前单词结束\n\n>多光标和多处选取\n---\n\ncmd-click 增加新光标\ncmd-shift-L 将多行选取改为多行光标\nctrl-shift-up, ctrl-shift-down 增加上（下）一行光标\ncmd-D 选取文档中和当前单词相同的下一处\nctrl-cmd-G 选取文档中所有和当前光标单词相同的位置\n\n>括号跳转\n---\n\nctrl-m 相应括号之间， html tag 之间等跳转\nctrl-cmd-m 括号(tag)之间文件选取\nalt-cmd-. 关闭当前XML/HTML tag\n\n>编码方式\n---\n\nctrl-shift-U 调出切换编码选项\n\n## 查找和切换\n\ncmd-F 在 buffer 中查找\ncmd-shift-f 在整个工程中查找\n\n## 代码片段\n\nalt-shift-S 查看当前可用代码片段\n在~/.atom 目录下snippets.cson文件中存放了你定制的snippets\n[定制说明](http://flight-manual.atom.io)\n\n## 自动补全\n\nctrl-space 提示补全信息\n\n## 折叠\n\nalt-cmd-[ 折叠\nalt-cmd-] 展开\nalt-cmd-shift-{ 折叠全部\nalt-cmd-shift-} 展开全部\ncmd-k cmd-N 指定折叠层级 N为层级数\n\n## 文件语法高亮\n\nctrl-shift-L 选择文本类型\n\n## 使用Atom进行写作\n\nctrl-shift-M Markdown预览\n可用代码片段 b, legal, img, l, i, code, t, table\n\n\n\n\n","source":"_posts/Atom-编辑器快捷键列表汇总整理.md","raw":"---\ntitle: Atom 编辑器快捷键列表汇总整理\ndate: 2016-03-28 12:00:27\ntags: [atom, tools, mac, RAML]\ncategories: [mac, atom]\n---\n# Atom 编辑器快捷键列表汇总整理\n来自Github的Atom 编辑器已经更新到1.0版本了，由于有着 Github  的光环，很多人都在用，下面是网友总结的一些**Atom 快捷键列表**，喜欢高效键盘操作的朋友可以看下。\n\n<!-- more -->\n\n## 文件切换\n\nctrl-shift-s 保存所有打开的文件\nctrl-shift-o 打开目录\ncmd-\\ 显示或隐藏目录树\nctrl-0 焦点移到目录树\n目录树下，使用a, m, delete来增加，修改和删除\ncmd-t或cmd-p 查找文件\ncmd-b 在打开的文件之间切换\ncmd-shift-b 只搜索从上次git commit 修改或者新增的文件\n\n## 导航\n\n(等价于上下左右)\nctrl-p 前一行\nctrl-n 后一行\nctrl-f 前一个字符\nctrl-b 后一个字符\n\nalt-B, alt-left 移动到单词开始\nalt-F, alt-right 移动到单词末尾\n\ncmd-right, ctrl-E 移动到一行结束\ncmd-left, ctrl-A 移动到一行开始\n\ncmd-up 移动到文件开始\ncmd-down 移动到文件结束\n\nctrl-g 移到到指定行 row:column 处\n\ncmd-r 在方法之间跳转\n\n## 书签\n\ncmd-F2 在本行增加书签\nF2 跳到当前文件的下一条书签\nshift-F2 跳到当前文件的上一条书签\nctrl-F2 列出当前工程所有书签\n\n## 选取\n\n大部分和导航一致，只不过加上shift\nctrl-shift-P 选取至上一行\nctrl-shift-N 选取至下一行\nctrl-shift-B 选取至前一个字符\nctrl-shift-F 选取至后一个字符\n\nalt-shift-B, alt-shift-left 选取至字符开始\nalt-shift-F, alt-shift-right 选取至字符结束\nctrl-shift-E, cmd-shift-right 选取至本行结束\nctrl-shift-A, cmd-shift-left 选取至本行开始\n\ncmd-shift-up 选取至文本开始\ncmd-shift-down 选取至文件结尾\n\ncmd-A 全选\ncmd-L 选取一行， 继续按回选取下一行\nctrl-shift-W 选取当前单词\n\n## 编辑和删除文本\n\n> 基本操作\n---\n\nctrl-T 使光标前后字符交换\ncmd-J 将下一行与当前行合并\nctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动\ncmd-shift-D 复制当前行到下一行\ncmd-K, cmd-U 使当前字符大写\ncmd-K, cmd-L 使当前字符小写\n\n\n>删除和剪切\n---\n\nctrl-shift-K 删除当前行\ncmd-backspace 删除到当前行开始\ncmd-fn-backspace 删除到当前行结束\nctrl-K 剪切到当前行结束\nalt-backspace 或 alt-H 删除到当前单词开始\nalt-delete 或 alt-D 删除到当前单词结束\n\n>多光标和多处选取\n---\n\ncmd-click 增加新光标\ncmd-shift-L 将多行选取改为多行光标\nctrl-shift-up, ctrl-shift-down 增加上（下）一行光标\ncmd-D 选取文档中和当前单词相同的下一处\nctrl-cmd-G 选取文档中所有和当前光标单词相同的位置\n\n>括号跳转\n---\n\nctrl-m 相应括号之间， html tag 之间等跳转\nctrl-cmd-m 括号(tag)之间文件选取\nalt-cmd-. 关闭当前XML/HTML tag\n\n>编码方式\n---\n\nctrl-shift-U 调出切换编码选项\n\n## 查找和切换\n\ncmd-F 在 buffer 中查找\ncmd-shift-f 在整个工程中查找\n\n## 代码片段\n\nalt-shift-S 查看当前可用代码片段\n在~/.atom 目录下snippets.cson文件中存放了你定制的snippets\n[定制说明](http://flight-manual.atom.io)\n\n## 自动补全\n\nctrl-space 提示补全信息\n\n## 折叠\n\nalt-cmd-[ 折叠\nalt-cmd-] 展开\nalt-cmd-shift-{ 折叠全部\nalt-cmd-shift-} 展开全部\ncmd-k cmd-N 指定折叠层级 N为层级数\n\n## 文件语法高亮\n\nctrl-shift-L 选择文本类型\n\n## 使用Atom进行写作\n\nctrl-shift-M Markdown预览\n可用代码片段 b, legal, img, l, i, code, t, table\n\n\n\n\n","slug":"Atom-编辑器快捷键列表汇总整理","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxer000rsify0p6dzvdq","content":"<h1 id=\"atom-编辑器快捷键列表汇总整理\"><a class=\"markdownIt-Anchor\" href=\"#atom-编辑器快捷键列表汇总整理\"></a> Atom 编辑器快捷键列表汇总整理</h1>\n<p>来自Github的Atom 编辑器已经更新到1.0版本了，由于有着 Github  的光环，很多人都在用，下面是网友总结的一些<strong>Atom 快捷键列表</strong>，喜欢高效键盘操作的朋友可以看下。</p>\n<a id=\"more\"></a>\n<h2 id=\"文件切换\"><a class=\"markdownIt-Anchor\" href=\"#文件切换\"></a> 文件切换</h2>\n<p>ctrl-shift-s 保存所有打开的文件<br>\nctrl-shift-o 打开目录<br>\ncmd-\\ 显示或隐藏目录树<br>\nctrl-0 焦点移到目录树<br>\n目录树下，使用a, m, delete来增加，修改和删除<br>\ncmd-t或cmd-p 查找文件<br>\ncmd-b 在打开的文件之间切换<br>\ncmd-shift-b 只搜索从上次git commit 修改或者新增的文件</p>\n<h2 id=\"导航\"><a class=\"markdownIt-Anchor\" href=\"#导航\"></a> 导航</h2>\n<p>(等价于上下左右)<br>\nctrl-p 前一行<br>\nctrl-n 后一行<br>\nctrl-f 前一个字符<br>\nctrl-b 后一个字符</p>\n<p>alt-B, alt-left 移动到单词开始<br>\nalt-F, alt-right 移动到单词末尾</p>\n<p>cmd-right, ctrl-E 移动到一行结束<br>\ncmd-left, ctrl-A 移动到一行开始</p>\n<p>cmd-up 移动到文件开始<br>\ncmd-down 移动到文件结束</p>\n<p>ctrl-g 移到到指定行 row:column 处</p>\n<p>cmd-r 在方法之间跳转</p>\n<h2 id=\"书签\"><a class=\"markdownIt-Anchor\" href=\"#书签\"></a> 书签</h2>\n<p>cmd-F2 在本行增加书签<br>\nF2 跳到当前文件的下一条书签<br>\nshift-F2 跳到当前文件的上一条书签<br>\nctrl-F2 列出当前工程所有书签</p>\n<h2 id=\"选取\"><a class=\"markdownIt-Anchor\" href=\"#选取\"></a> 选取</h2>\n<p>大部分和导航一致，只不过加上shift<br>\nctrl-shift-P 选取至上一行<br>\nctrl-shift-N 选取至下一行<br>\nctrl-shift-B 选取至前一个字符<br>\nctrl-shift-F 选取至后一个字符</p>\n<p>alt-shift-B, alt-shift-left 选取至字符开始<br>\nalt-shift-F, alt-shift-right 选取至字符结束<br>\nctrl-shift-E, cmd-shift-right 选取至本行结束<br>\nctrl-shift-A, cmd-shift-left 选取至本行开始</p>\n<p>cmd-shift-up 选取至文本开始<br>\ncmd-shift-down 选取至文件结尾</p>\n<p>cmd-A 全选<br>\ncmd-L 选取一行， 继续按回选取下一行<br>\nctrl-shift-W 选取当前单词</p>\n<h2 id=\"编辑和删除文本\"><a class=\"markdownIt-Anchor\" href=\"#编辑和删除文本\"></a> 编辑和删除文本</h2>\n<blockquote>\n<p>基本操作</p>\n</blockquote>\n<hr>\n<p>ctrl-T 使光标前后字符交换<br>\ncmd-J 将下一行与当前行合并<br>\nctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动<br>\ncmd-shift-D 复制当前行到下一行<br>\ncmd-K, cmd-U 使当前字符大写<br>\ncmd-K, cmd-L 使当前字符小写</p>\n<blockquote>\n<p>删除和剪切</p>\n</blockquote>\n<hr>\n<p>ctrl-shift-K 删除当前行<br>\ncmd-backspace 删除到当前行开始<br>\ncmd-fn-backspace 删除到当前行结束<br>\nctrl-K 剪切到当前行结束<br>\nalt-backspace 或 alt-H 删除到当前单词开始<br>\nalt-delete 或 alt-D 删除到当前单词结束</p>\n<blockquote>\n<p>多光标和多处选取</p>\n</blockquote>\n<hr>\n<p>cmd-click 增加新光标<br>\ncmd-shift-L 将多行选取改为多行光标<br>\nctrl-shift-up, ctrl-shift-down 增加上（下）一行光标<br>\ncmd-D 选取文档中和当前单词相同的下一处<br>\nctrl-cmd-G 选取文档中所有和当前光标单词相同的位置</p>\n<blockquote>\n<p>括号跳转</p>\n</blockquote>\n<hr>\n<p>ctrl-m 相应括号之间， html tag 之间等跳转<br>\nctrl-cmd-m 括号(tag)之间文件选取<br>\nalt-cmd-. 关闭当前XML/HTML tag</p>\n<blockquote>\n<p>编码方式</p>\n</blockquote>\n<hr>\n<p>ctrl-shift-U 调出切换编码选项</p>\n<h2 id=\"查找和切换\"><a class=\"markdownIt-Anchor\" href=\"#查找和切换\"></a> 查找和切换</h2>\n<p>cmd-F 在 buffer 中查找<br>\ncmd-shift-f 在整个工程中查找</p>\n<h2 id=\"代码片段\"><a class=\"markdownIt-Anchor\" href=\"#代码片段\"></a> 代码片段</h2>\n<p>alt-shift-S 查看当前可用代码片段<br>\n在~/.atom 目录下snippets.cson文件中存放了你定制的snippets<br>\n<a href=\"http://flight-manual.atom.io\" target=\"_blank\" rel=\"noopener\">定制说明</a></p>\n<h2 id=\"自动补全\"><a class=\"markdownIt-Anchor\" href=\"#自动补全\"></a> 自动补全</h2>\n<p>ctrl-space 提示补全信息</p>\n<h2 id=\"折叠\"><a class=\"markdownIt-Anchor\" href=\"#折叠\"></a> 折叠</h2>\n<p>alt-cmd-[ 折叠<br>\nalt-cmd-] 展开<br>\nalt-cmd-shift-{ 折叠全部<br>\nalt-cmd-shift-} 展开全部<br>\ncmd-k cmd-N 指定折叠层级 N为层级数</p>\n<h2 id=\"文件语法高亮\"><a class=\"markdownIt-Anchor\" href=\"#文件语法高亮\"></a> 文件语法高亮</h2>\n<p>ctrl-shift-L 选择文本类型</p>\n<h2 id=\"使用atom进行写作\"><a class=\"markdownIt-Anchor\" href=\"#使用atom进行写作\"></a> 使用Atom进行写作</h2>\n<p>ctrl-shift-M Markdown预览<br>\n可用代码片段 b, legal, img, l, i, code, t, table</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"atom-编辑器快捷键列表汇总整理\"><a class=\"markdownIt-Anchor\" href=\"#atom-编辑器快捷键列表汇总整理\"></a> Atom 编辑器快捷键列表汇总整理</h1>\n<p>来自Github的Atom 编辑器已经更新到1.0版本了，由于有着 Github  的光环，很多人都在用，下面是网友总结的一些<strong>Atom 快捷键列表</strong>，喜欢高效键盘操作的朋友可以看下。</p>","more":"<h2 id=\"文件切换\"><a class=\"markdownIt-Anchor\" href=\"#文件切换\"></a> 文件切换</h2>\n<p>ctrl-shift-s 保存所有打开的文件<br>\nctrl-shift-o 打开目录<br>\ncmd-\\ 显示或隐藏目录树<br>\nctrl-0 焦点移到目录树<br>\n目录树下，使用a, m, delete来增加，修改和删除<br>\ncmd-t或cmd-p 查找文件<br>\ncmd-b 在打开的文件之间切换<br>\ncmd-shift-b 只搜索从上次git commit 修改或者新增的文件</p>\n<h2 id=\"导航\"><a class=\"markdownIt-Anchor\" href=\"#导航\"></a> 导航</h2>\n<p>(等价于上下左右)<br>\nctrl-p 前一行<br>\nctrl-n 后一行<br>\nctrl-f 前一个字符<br>\nctrl-b 后一个字符</p>\n<p>alt-B, alt-left 移动到单词开始<br>\nalt-F, alt-right 移动到单词末尾</p>\n<p>cmd-right, ctrl-E 移动到一行结束<br>\ncmd-left, ctrl-A 移动到一行开始</p>\n<p>cmd-up 移动到文件开始<br>\ncmd-down 移动到文件结束</p>\n<p>ctrl-g 移到到指定行 row:column 处</p>\n<p>cmd-r 在方法之间跳转</p>\n<h2 id=\"书签\"><a class=\"markdownIt-Anchor\" href=\"#书签\"></a> 书签</h2>\n<p>cmd-F2 在本行增加书签<br>\nF2 跳到当前文件的下一条书签<br>\nshift-F2 跳到当前文件的上一条书签<br>\nctrl-F2 列出当前工程所有书签</p>\n<h2 id=\"选取\"><a class=\"markdownIt-Anchor\" href=\"#选取\"></a> 选取</h2>\n<p>大部分和导航一致，只不过加上shift<br>\nctrl-shift-P 选取至上一行<br>\nctrl-shift-N 选取至下一行<br>\nctrl-shift-B 选取至前一个字符<br>\nctrl-shift-F 选取至后一个字符</p>\n<p>alt-shift-B, alt-shift-left 选取至字符开始<br>\nalt-shift-F, alt-shift-right 选取至字符结束<br>\nctrl-shift-E, cmd-shift-right 选取至本行结束<br>\nctrl-shift-A, cmd-shift-left 选取至本行开始</p>\n<p>cmd-shift-up 选取至文本开始<br>\ncmd-shift-down 选取至文件结尾</p>\n<p>cmd-A 全选<br>\ncmd-L 选取一行， 继续按回选取下一行<br>\nctrl-shift-W 选取当前单词</p>\n<h2 id=\"编辑和删除文本\"><a class=\"markdownIt-Anchor\" href=\"#编辑和删除文本\"></a> 编辑和删除文本</h2>\n<blockquote>\n<p>基本操作</p>\n</blockquote>\n<hr>\n<p>ctrl-T 使光标前后字符交换<br>\ncmd-J 将下一行与当前行合并<br>\nctrl-cmd-up, ctrl-cmd-down 使当前行向上或者向下移动<br>\ncmd-shift-D 复制当前行到下一行<br>\ncmd-K, cmd-U 使当前字符大写<br>\ncmd-K, cmd-L 使当前字符小写</p>\n<blockquote>\n<p>删除和剪切</p>\n</blockquote>\n<hr>\n<p>ctrl-shift-K 删除当前行<br>\ncmd-backspace 删除到当前行开始<br>\ncmd-fn-backspace 删除到当前行结束<br>\nctrl-K 剪切到当前行结束<br>\nalt-backspace 或 alt-H 删除到当前单词开始<br>\nalt-delete 或 alt-D 删除到当前单词结束</p>\n<blockquote>\n<p>多光标和多处选取</p>\n</blockquote>\n<hr>\n<p>cmd-click 增加新光标<br>\ncmd-shift-L 将多行选取改为多行光标<br>\nctrl-shift-up, ctrl-shift-down 增加上（下）一行光标<br>\ncmd-D 选取文档中和当前单词相同的下一处<br>\nctrl-cmd-G 选取文档中所有和当前光标单词相同的位置</p>\n<blockquote>\n<p>括号跳转</p>\n</blockquote>\n<hr>\n<p>ctrl-m 相应括号之间， html tag 之间等跳转<br>\nctrl-cmd-m 括号(tag)之间文件选取<br>\nalt-cmd-. 关闭当前XML/HTML tag</p>\n<blockquote>\n<p>编码方式</p>\n</blockquote>\n<hr>\n<p>ctrl-shift-U 调出切换编码选项</p>\n<h2 id=\"查找和切换\"><a class=\"markdownIt-Anchor\" href=\"#查找和切换\"></a> 查找和切换</h2>\n<p>cmd-F 在 buffer 中查找<br>\ncmd-shift-f 在整个工程中查找</p>\n<h2 id=\"代码片段\"><a class=\"markdownIt-Anchor\" href=\"#代码片段\"></a> 代码片段</h2>\n<p>alt-shift-S 查看当前可用代码片段<br>\n在~/.atom 目录下snippets.cson文件中存放了你定制的snippets<br>\n<a href=\"http://flight-manual.atom.io\" target=\"_blank\" rel=\"noopener\">定制说明</a></p>\n<h2 id=\"自动补全\"><a class=\"markdownIt-Anchor\" href=\"#自动补全\"></a> 自动补全</h2>\n<p>ctrl-space 提示补全信息</p>\n<h2 id=\"折叠\"><a class=\"markdownIt-Anchor\" href=\"#折叠\"></a> 折叠</h2>\n<p>alt-cmd-[ 折叠<br>\nalt-cmd-] 展开<br>\nalt-cmd-shift-{ 折叠全部<br>\nalt-cmd-shift-} 展开全部<br>\ncmd-k cmd-N 指定折叠层级 N为层级数</p>\n<h2 id=\"文件语法高亮\"><a class=\"markdownIt-Anchor\" href=\"#文件语法高亮\"></a> 文件语法高亮</h2>\n<p>ctrl-shift-L 选择文本类型</p>\n<h2 id=\"使用atom进行写作\"><a class=\"markdownIt-Anchor\" href=\"#使用atom进行写作\"></a> 使用Atom进行写作</h2>\n<p>ctrl-shift-M Markdown预览<br>\n可用代码片段 b, legal, img, l, i, code, t, table</p>"},{"title":"C++语言ctime库","date":"2021-04-19T09:44:04.000Z","_content":"\nC++语言ctime库\n\n<!--  more -->\n\n### 类型\n\n`clock_t`: 是个long型，用来记录一段时间内的时钟计时单元数，即CPU的运行单元时间。\n\n`size_t`:标准C库中定义的，应为unsigned int, 在64位系统中为long unsigned int。\n\n`time_t`:从1970年1月1日0时0分0秒到该时间点所经过的秒数。\n\n```\nstruct tm {\n\tint tm_sec; /* 秒 - 取值区间为[0,59] */\n\tint tm_min; /* 分 - 取值区间为[0,59] */\n\tint tm_hour; /* 时 - 取值区间为[0,23] */\n\tint tm_mday; /* 一个月中的日期 - 取值区间为[1,31] */\n\tint tm_mon; /* 月份(从一月开始，0代表一月) - 取值区间为[0,11] */\n\tint tm_year; /* 年份，其值等于实际年份减去1900 */\n\tint tm_wday; /* 星期 - 取值区间为[0,6]，其中0代表星期日，1代表星期一，以此类推。 */\n\tint tm_yday; /* 从每年的1月1日开始的天数 - 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推。 */\n\tint tm_isdst; /* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的时候，tm_isdst为0；不了解情况时，tm_isdst()为负。 */\n};\n\n```\n\n### 时间的操作\n\nclock: 返回时钟计时单元数，自从这个程序开始运行。\n\ntime: 返回当前的time_t。\n\ndifftime: 计算time_t两个之间的时间差。\n\n### 转换\nmktime: 转换tm structure成time_t\n\nasctime: 转换tm structure成字符串\n\nctime: 转换time_t成字符串\n\ngmtime: 转换time_t 成tm as UTC time\n\nlocaltime: 转换time_t 成tm as local time\n\nstrftime: 格式时间成字符串\n\n转换成字符串的几个函数：asctime, ctime, strftime\n\n### 宏\n\n`CLOCKS_PER_SEC`: 它用来表示一秒钟会有多少个时钟计时单元。\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\n// 测量事件的持续时间\nvoid test_clock_t()\n{\n\tlong i = 100000000L;\n\tclock_t start, finish;\n\tdouble duration;\n\tstart = clock();\n\n\twhile(i--){}\n\n\tfinish = clock();\n\tduration = (double)(finish - start)/CLOCKS_PER_SEC;\n\n\tprintf(\"Time to do 100000000 empty loops is %f seconds\\n\", duration);\n\n}\n\nvoid test_time_t() {\n\ttime_t t = time(NULL);\n\n\tprintf(\"The Calendar time now is %ld \\n\", t);\n}\n\nvoid test_difftime()\n{\n\ttime_t start, end;\n\tstart = time(NULL);\n\t\n\tlong i = 100000000L;\n\twhile(i--){}\n\n\n\tend = time(NULL);\n\n\tprintf(\"Time pause used %5.4f seconds.\\n\", difftime(end, start));\n}\n\n// 下面都是一些转换函数的应用\n// mktime: tm --> time_t\nvoid test_mktime()\n{\n\tstruct tm t;\n\ttime_t t_of_day;\n\tt.tm_year = 1997 - 1990;\n\tt.tm_mon = 6;\n\tt.tm_mday = 1;\n\tt.tm_hour = 0;\n\tt.tm_sec = 1;\n\tt.tm_wday = 4; /* Day of the week */\n\tt.tm_yday = 0; /* Does not show in asctime  */\n\tt.tm_isdst = 0;\n\n\tt_of_day = mktime(&t);\n\tprintf(\"%s\",ctime(&t_of_day));\n\n}\n\n// localtime: time_t --> tm\nvoid test_localtime()\n{\n\ttime_t rawtime;\n\tstruct tm* timeinfo;\n\n\ttime(&rawtime);\n\n\ttimeinfo = localtime(&rawtime);\n\n\tprintf(\"Current local time and date: %s\", asctime(timeinfo));\n\n}\n\n// gmtime: time_t --> tm\nvoid test_gmtime()\n{\n\ttime_t rawtime;\n\tstruct tm* timeinfo;\n\n\ttime(&rawtime);\n\ttimeinfo = gmtime(&rawtime);\n\n\tprintf(\"UTC time and date: %s\", asctime(timeinfo));\n}\n\n// ctime: time_t --> string\nvoid test_ctime()\n{\n\ttime_t t = time(NULL);\n\tstd::string str = ctime(&t);\n\tstd::cout << str << std::endl;\n\n}\n\nint main()\n{\n\ntest_clock_t();\ncout << \"==========================\" << endl;\ntest_time_t();\ncout << \"==========================\" << endl;\ntest_difftime();\ncout << \"==========================\" << endl;\ntest_mktime();\ncout << \"==========================\" << endl;\ntest_localtime();\ncout << \"==========================\" << endl;\ntest_gmtime();\ncout << \"==========================\" << endl;\ntest_ctime();\n\treturn 0;\n}\n```\n我们可以使用strftime()函数将时间格式化为我们想要的格式。它的原型如下：\n\n```\nsize_t strftime(\n\tchar *strDest,\n\tsize_t maxsize,\n\tconst char *format,\n\tconst struct tm *timeptr\n);\n```\n我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。\n\n函数strftime()的操作有些类似于sprintf():识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方式。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。\n\n```\n%a\t星期几的简写\n%A\t星期几的全称\n%b\t月份的简写\n%B\t月份的全称\n%c\t标准的日期的时间串\n%C\t年份的后两位数字\n%d\t十进制表示的每月的第几天\n%D\t月/天/年\n%e\t在两字符域中，十进制表示的每月的第几天\n%F\t年-月-日\n%g\t年份的后两位数字，使用基于周的年\n%G\t年份，使用基于周的年\n%h\t简写的月份名\n%H\t24小时制的小时\n%I\t12小时制的小时\n%j\t十进制表示的每年的第几天\n%m\t十进制表示的月份\n%M\t十进制表示的分钟数\n%n\t新行符\n%p\t本地的AM或PM的等价显示\n%r\t12小时的时间\n%R\t显示小时和分钟：hh:mm\n%S\t十进制的秒数\n%t\t水平制表符\n%T\t显示时分秒：hh:mm:ss\n%u\t每周的第几天，星期一为第一天（值从0到6，星期一为0）\n%U\t每年的第几周，把星期日作为第一天（值从0到53）\n%V\t每年的第几周，使用基于周的年\n%w\t十进制表示的星期几（值从0到6，星期天为0）\n%W\t每年的第几周，把星期一作为第一天（值从0到53）\n%x\t标准的日期串\n%X\t标准的时间串\n%y\t不带世纪的十进制年份（值从0到99）\n%Y\t带世纪部分的十进制年份\n%z\t%Z时区名称，如果不能得到时区则返回空字符。\n%%\t百分号\n```\n\n\n#### strftime()函数的声明\n\n```\nsize_t strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr)\n```\n\n- str -- 这是指向目标数组的指针，用来复制产生的 C 字符串。\n- maxsize -- 这是被复制到 str 的最大字符数。\n- format -- 这是 C 字符串，包含了普通字符和特殊格式说明符的任何组合。这些格式说明符由函数替换为表示 tm 中所指定时间的相对应值。格式说明符是：\n\n```\n#include <stdio.h>\n#include <time.h>\n \nint main ()\n{\n   time_t rawtime;\n   struct tm *info;\n   char buffer[80];\n \n   time( &rawtime );\n \n   info = localtime( &rawtime );\n \n   strftime(buffer, 80, \"%Y-%m-%d %H:%M:%S\", info);\n   printf(\"格式化的日期 & 时间 : |%s|\\n\", buffer );\n  \n   return(0);\n}\n\n```\n","source":"_posts/C-语言ctime库.md","raw":"---\ntitle: C++语言ctime库\ndate: 2021-04-19 17:44:04\ntags: [c++]\ncategories: cpp\n---\n\nC++语言ctime库\n\n<!--  more -->\n\n### 类型\n\n`clock_t`: 是个long型，用来记录一段时间内的时钟计时单元数，即CPU的运行单元时间。\n\n`size_t`:标准C库中定义的，应为unsigned int, 在64位系统中为long unsigned int。\n\n`time_t`:从1970年1月1日0时0分0秒到该时间点所经过的秒数。\n\n```\nstruct tm {\n\tint tm_sec; /* 秒 - 取值区间为[0,59] */\n\tint tm_min; /* 分 - 取值区间为[0,59] */\n\tint tm_hour; /* 时 - 取值区间为[0,23] */\n\tint tm_mday; /* 一个月中的日期 - 取值区间为[1,31] */\n\tint tm_mon; /* 月份(从一月开始，0代表一月) - 取值区间为[0,11] */\n\tint tm_year; /* 年份，其值等于实际年份减去1900 */\n\tint tm_wday; /* 星期 - 取值区间为[0,6]，其中0代表星期日，1代表星期一，以此类推。 */\n\tint tm_yday; /* 从每年的1月1日开始的天数 - 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推。 */\n\tint tm_isdst; /* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的时候，tm_isdst为0；不了解情况时，tm_isdst()为负。 */\n};\n\n```\n\n### 时间的操作\n\nclock: 返回时钟计时单元数，自从这个程序开始运行。\n\ntime: 返回当前的time_t。\n\ndifftime: 计算time_t两个之间的时间差。\n\n### 转换\nmktime: 转换tm structure成time_t\n\nasctime: 转换tm structure成字符串\n\nctime: 转换time_t成字符串\n\ngmtime: 转换time_t 成tm as UTC time\n\nlocaltime: 转换time_t 成tm as local time\n\nstrftime: 格式时间成字符串\n\n转换成字符串的几个函数：asctime, ctime, strftime\n\n### 宏\n\n`CLOCKS_PER_SEC`: 它用来表示一秒钟会有多少个时钟计时单元。\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\n// 测量事件的持续时间\nvoid test_clock_t()\n{\n\tlong i = 100000000L;\n\tclock_t start, finish;\n\tdouble duration;\n\tstart = clock();\n\n\twhile(i--){}\n\n\tfinish = clock();\n\tduration = (double)(finish - start)/CLOCKS_PER_SEC;\n\n\tprintf(\"Time to do 100000000 empty loops is %f seconds\\n\", duration);\n\n}\n\nvoid test_time_t() {\n\ttime_t t = time(NULL);\n\n\tprintf(\"The Calendar time now is %ld \\n\", t);\n}\n\nvoid test_difftime()\n{\n\ttime_t start, end;\n\tstart = time(NULL);\n\t\n\tlong i = 100000000L;\n\twhile(i--){}\n\n\n\tend = time(NULL);\n\n\tprintf(\"Time pause used %5.4f seconds.\\n\", difftime(end, start));\n}\n\n// 下面都是一些转换函数的应用\n// mktime: tm --> time_t\nvoid test_mktime()\n{\n\tstruct tm t;\n\ttime_t t_of_day;\n\tt.tm_year = 1997 - 1990;\n\tt.tm_mon = 6;\n\tt.tm_mday = 1;\n\tt.tm_hour = 0;\n\tt.tm_sec = 1;\n\tt.tm_wday = 4; /* Day of the week */\n\tt.tm_yday = 0; /* Does not show in asctime  */\n\tt.tm_isdst = 0;\n\n\tt_of_day = mktime(&t);\n\tprintf(\"%s\",ctime(&t_of_day));\n\n}\n\n// localtime: time_t --> tm\nvoid test_localtime()\n{\n\ttime_t rawtime;\n\tstruct tm* timeinfo;\n\n\ttime(&rawtime);\n\n\ttimeinfo = localtime(&rawtime);\n\n\tprintf(\"Current local time and date: %s\", asctime(timeinfo));\n\n}\n\n// gmtime: time_t --> tm\nvoid test_gmtime()\n{\n\ttime_t rawtime;\n\tstruct tm* timeinfo;\n\n\ttime(&rawtime);\n\ttimeinfo = gmtime(&rawtime);\n\n\tprintf(\"UTC time and date: %s\", asctime(timeinfo));\n}\n\n// ctime: time_t --> string\nvoid test_ctime()\n{\n\ttime_t t = time(NULL);\n\tstd::string str = ctime(&t);\n\tstd::cout << str << std::endl;\n\n}\n\nint main()\n{\n\ntest_clock_t();\ncout << \"==========================\" << endl;\ntest_time_t();\ncout << \"==========================\" << endl;\ntest_difftime();\ncout << \"==========================\" << endl;\ntest_mktime();\ncout << \"==========================\" << endl;\ntest_localtime();\ncout << \"==========================\" << endl;\ntest_gmtime();\ncout << \"==========================\" << endl;\ntest_ctime();\n\treturn 0;\n}\n```\n我们可以使用strftime()函数将时间格式化为我们想要的格式。它的原型如下：\n\n```\nsize_t strftime(\n\tchar *strDest,\n\tsize_t maxsize,\n\tconst char *format,\n\tconst struct tm *timeptr\n);\n```\n我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。\n\n函数strftime()的操作有些类似于sprintf():识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方式。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。\n\n```\n%a\t星期几的简写\n%A\t星期几的全称\n%b\t月份的简写\n%B\t月份的全称\n%c\t标准的日期的时间串\n%C\t年份的后两位数字\n%d\t十进制表示的每月的第几天\n%D\t月/天/年\n%e\t在两字符域中，十进制表示的每月的第几天\n%F\t年-月-日\n%g\t年份的后两位数字，使用基于周的年\n%G\t年份，使用基于周的年\n%h\t简写的月份名\n%H\t24小时制的小时\n%I\t12小时制的小时\n%j\t十进制表示的每年的第几天\n%m\t十进制表示的月份\n%M\t十进制表示的分钟数\n%n\t新行符\n%p\t本地的AM或PM的等价显示\n%r\t12小时的时间\n%R\t显示小时和分钟：hh:mm\n%S\t十进制的秒数\n%t\t水平制表符\n%T\t显示时分秒：hh:mm:ss\n%u\t每周的第几天，星期一为第一天（值从0到6，星期一为0）\n%U\t每年的第几周，把星期日作为第一天（值从0到53）\n%V\t每年的第几周，使用基于周的年\n%w\t十进制表示的星期几（值从0到6，星期天为0）\n%W\t每年的第几周，把星期一作为第一天（值从0到53）\n%x\t标准的日期串\n%X\t标准的时间串\n%y\t不带世纪的十进制年份（值从0到99）\n%Y\t带世纪部分的十进制年份\n%z\t%Z时区名称，如果不能得到时区则返回空字符。\n%%\t百分号\n```\n\n\n#### strftime()函数的声明\n\n```\nsize_t strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr)\n```\n\n- str -- 这是指向目标数组的指针，用来复制产生的 C 字符串。\n- maxsize -- 这是被复制到 str 的最大字符数。\n- format -- 这是 C 字符串，包含了普通字符和特殊格式说明符的任何组合。这些格式说明符由函数替换为表示 tm 中所指定时间的相对应值。格式说明符是：\n\n```\n#include <stdio.h>\n#include <time.h>\n \nint main ()\n{\n   time_t rawtime;\n   struct tm *info;\n   char buffer[80];\n \n   time( &rawtime );\n \n   info = localtime( &rawtime );\n \n   strftime(buffer, 80, \"%Y-%m-%d %H:%M:%S\", info);\n   printf(\"格式化的日期 & 时间 : |%s|\\n\", buffer );\n  \n   return(0);\n}\n\n```\n","slug":"C-语言ctime库","published":1,"updated":"2021-04-20T04:20:50.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxes000vsifyfus6r6up","content":"<p>C++语言ctime库</p>\n<a id=\"more\"></a>\n<h3 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\"></a> 类型</h3>\n<p><code>clock_t</code>: 是个long型，用来记录一段时间内的时钟计时单元数，即CPU的运行单元时间。</p>\n<p><code>size_t</code>:标准C库中定义的，应为unsigned int, 在64位系统中为long unsigned int。</p>\n<p><code>time_t</code>:从1970年1月1日0时0分0秒到该时间点所经过的秒数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_sec; <span class=\"comment\">/* 秒 - 取值区间为[0,59] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_min; <span class=\"comment\">/* 分 - 取值区间为[0,59] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_hour; <span class=\"comment\">/* 时 - 取值区间为[0,23] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mday; <span class=\"comment\">/* 一个月中的日期 - 取值区间为[1,31] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mon; <span class=\"comment\">/* 月份(从一月开始，0代表一月) - 取值区间为[0,11] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_year; <span class=\"comment\">/* 年份，其值等于实际年份减去1900 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_wday; <span class=\"comment\">/* 星期 - 取值区间为[0,6]，其中0代表星期日，1代表星期一，以此类推。 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_yday; <span class=\"comment\">/* 从每年的1月1日开始的天数 - 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推。 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_isdst; <span class=\"comment\">/* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的时候，tm_isdst为0；不了解情况时，tm_isdst()为负。 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"时间的操作\"><a class=\"markdownIt-Anchor\" href=\"#时间的操作\"></a> 时间的操作</h3>\n<p>clock: 返回时钟计时单元数，自从这个程序开始运行。</p>\n<p>time: 返回当前的time_t。</p>\n<p>difftime: 计算time_t两个之间的时间差。</p>\n<h3 id=\"转换\"><a class=\"markdownIt-Anchor\" href=\"#转换\"></a> 转换</h3>\n<p>mktime: 转换tm structure成time_t</p>\n<p>asctime: 转换tm structure成字符串</p>\n<p>ctime: 转换time_t成字符串</p>\n<p>gmtime: 转换time_t 成tm as UTC time</p>\n<p>localtime: 转换time_t 成tm as local time</p>\n<p>strftime: 格式时间成字符串</p>\n<p>转换成字符串的几个函数：asctime, ctime, strftime</p>\n<h3 id=\"宏\"><a class=\"markdownIt-Anchor\" href=\"#宏\"></a> 宏</h3>\n<p><code>CLOCKS_PER_SEC</code>: 它用来表示一秒钟会有多少个时钟计时单元。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测量事件的持续时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_clock_t</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> i = <span class=\"number\">100000000L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> start, finish;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> duration;</span><br><span class=\"line\">\tstart = clock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i--)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfinish = clock();</span><br><span class=\"line\">\tduration = (<span class=\"keyword\">double</span>)(finish - start)/CLOCKS_PER_SEC;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Time to do 100000000 empty loops is %f seconds\\n\"</span>, duration);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_time_t</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The Calendar time now is %ld \\n\"</span>, t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_difftime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> start, end;</span><br><span class=\"line\">\tstart = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> i = <span class=\"number\">100000000L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i--)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tend = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Time pause used %5.4f seconds.\\n\"</span>, difftime(end, start));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面都是一些转换函数的应用</span></span><br><span class=\"line\"><span class=\"comment\">// mktime: tm --&gt; time_t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_mktime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> <span class=\"title\">t</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t_of_day;</span><br><span class=\"line\">\tt.tm_year = <span class=\"number\">1997</span> - <span class=\"number\">1990</span>;</span><br><span class=\"line\">\tt.tm_mon = <span class=\"number\">6</span>;</span><br><span class=\"line\">\tt.tm_mday = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tt.tm_hour = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tt.tm_sec = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tt.tm_wday = <span class=\"number\">4</span>; <span class=\"comment\">/* Day of the week */</span></span><br><span class=\"line\">\tt.tm_yday = <span class=\"number\">0</span>; <span class=\"comment\">/* Does not show in asctime  */</span></span><br><span class=\"line\">\tt.tm_isdst = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt_of_day = mktime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,ctime(&amp;t_of_day));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// localtime: time_t --&gt; tm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_localtime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span>* <span class=\"title\">timeinfo</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttimeinfo = localtime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Current local time and date: %s\"</span>, asctime(timeinfo));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gmtime: time_t --&gt; tm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_gmtime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span>* <span class=\"title\">timeinfo</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;rawtime);</span><br><span class=\"line\">\ttimeinfo = gmtime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"UTC time and date: %s\"</span>, asctime(timeinfo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ctime: time_t --&gt; string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_ctime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str = ctime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">test_clock_t</span>();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"keyword\">test_time_t</span>();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_difftime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_mktime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_localtime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_gmtime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_ctime();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以使用strftime()函数将时间格式化为我们想要的格式。它的原型如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> strftime(</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *strDest,</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> maxsize,</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> struct tm *timeptr</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。</p>\n<p>函数strftime()的操作有些类似于sprintf():识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方式。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">a</span></span>\t星期几的简写</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">A</span></span>\t星期几的全称</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">b</span></span>\t月份的简写</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">B</span></span>\t月份的全称</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">c</span></span>\t标准的日期的时间串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">C</span></span>\t年份的后两位数字</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">d</span></span>\t十进制表示的每月的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">D</span></span>\t月/天/年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">e</span></span>\t在两字符域中，十进制表示的每月的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">F</span></span>\t年-月-日</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">g</span></span>\t年份的后两位数字，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">G</span></span>\t年份，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">h</span></span>\t简写的月份名</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">H</span></span>\t24小时制的小时</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">I</span></span>\t12小时制的小时</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">j</span></span>\t十进制表示的每年的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">m</span></span>\t十进制表示的月份</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">M</span></span>\t十进制表示的分钟数</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">n</span></span>\t新行符</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">p</span></span>\t本地的AM或PM的等价显示</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">r</span></span>\t12小时的时间</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">R</span></span>\t显示小时和分钟：hh:mm</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">S</span></span>\t十进制的秒数</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">t</span></span>\t水平制表符</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">T</span></span>\t显示时分秒：hh:mm:ss</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">u</span></span>\t每周的第几天，星期一为第一天（值从0到6，星期一为0）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">U</span></span>\t每年的第几周，把星期日作为第一天（值从0到53）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">V</span></span>\t每年的第几周，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">w</span></span>\t十进制表示的星期几（值从0到6，星期天为0）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">W</span></span>\t每年的第几周，把星期一作为第一天（值从0到53）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">x</span></span>\t标准的日期串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">X</span></span>\t标准的时间串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">y</span></span>\t不带世纪的十进制年份（值从0到99）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">Y</span></span>\t带世纪部分的十进制年份</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">z</span></span>\t%Z时区名称，如果不能得到时区则返回空字符。</span><br><span class=\"line\"><span class=\"tag\">%</span>%\t百分号</span><br></pre></td></tr></table></figure>\n<h4 id=\"strftime函数的声明\"><a class=\"markdownIt-Anchor\" href=\"#strftime函数的声明\"></a> strftime()函数的声明</h4>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t strftime(<span class=\"built_in\">char</span> *<span class=\"built_in\">str</span>, size_t maxsize, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *format, <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span></span> *timeptr)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>str – 这是指向目标数组的指针，用来复制产生的 C 字符串。</li>\n<li>maxsize – 这是被复制到 str 的最大字符数。</li>\n<li>format – 这是 C 字符串，包含了普通字符和特殊格式说明符的任何组合。这些格式说明符由函数替换为表示 tm 中所指定时间的相对应值。格式说明符是：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> *<span class=\"title\">info</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> buffer[<span class=\"number\">80</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">   time( &amp;rawtime );</span><br><span class=\"line\"> </span><br><span class=\"line\">   info = localtime( &amp;rawtime );</span><br><span class=\"line\"> </span><br><span class=\"line\">   strftime(buffer, <span class=\"number\">80</span>, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, info);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"格式化的日期 &amp; 时间 : |%s|\\n\"</span>, buffer );</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>C++语言ctime库</p>","more":"<h3 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\"></a> 类型</h3>\n<p><code>clock_t</code>: 是个long型，用来记录一段时间内的时钟计时单元数，即CPU的运行单元时间。</p>\n<p><code>size_t</code>:标准C库中定义的，应为unsigned int, 在64位系统中为long unsigned int。</p>\n<p><code>time_t</code>:从1970年1月1日0时0分0秒到该时间点所经过的秒数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_sec; <span class=\"comment\">/* 秒 - 取值区间为[0,59] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_min; <span class=\"comment\">/* 分 - 取值区间为[0,59] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_hour; <span class=\"comment\">/* 时 - 取值区间为[0,23] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mday; <span class=\"comment\">/* 一个月中的日期 - 取值区间为[1,31] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_mon; <span class=\"comment\">/* 月份(从一月开始，0代表一月) - 取值区间为[0,11] */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_year; <span class=\"comment\">/* 年份，其值等于实际年份减去1900 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_wday; <span class=\"comment\">/* 星期 - 取值区间为[0,6]，其中0代表星期日，1代表星期一，以此类推。 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_yday; <span class=\"comment\">/* 从每年的1月1日开始的天数 - 取值区间为[0,365]，其中0代表1月1日，1代表1月2日，以此类推。 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tm_isdst; <span class=\"comment\">/* 夏令时标识符，实行夏令时的时候，tm_isdst为正。不实行夏令时的时候，tm_isdst为0；不了解情况时，tm_isdst()为负。 */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"时间的操作\"><a class=\"markdownIt-Anchor\" href=\"#时间的操作\"></a> 时间的操作</h3>\n<p>clock: 返回时钟计时单元数，自从这个程序开始运行。</p>\n<p>time: 返回当前的time_t。</p>\n<p>difftime: 计算time_t两个之间的时间差。</p>\n<h3 id=\"转换\"><a class=\"markdownIt-Anchor\" href=\"#转换\"></a> 转换</h3>\n<p>mktime: 转换tm structure成time_t</p>\n<p>asctime: 转换tm structure成字符串</p>\n<p>ctime: 转换time_t成字符串</p>\n<p>gmtime: 转换time_t 成tm as UTC time</p>\n<p>localtime: 转换time_t 成tm as local time</p>\n<p>strftime: 格式时间成字符串</p>\n<p>转换成字符串的几个函数：asctime, ctime, strftime</p>\n<h3 id=\"宏\"><a class=\"markdownIt-Anchor\" href=\"#宏\"></a> 宏</h3>\n<p><code>CLOCKS_PER_SEC</code>: 它用来表示一秒钟会有多少个时钟计时单元。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测量事件的持续时间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_clock_t</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> i = <span class=\"number\">100000000L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> start, finish;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> duration;</span><br><span class=\"line\">\tstart = clock();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i--)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfinish = clock();</span><br><span class=\"line\">\tduration = (<span class=\"keyword\">double</span>)(finish - start)/CLOCKS_PER_SEC;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Time to do 100000000 empty loops is %f seconds\\n\"</span>, duration);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_time_t</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"The Calendar time now is %ld \\n\"</span>, t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_difftime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> start, end;</span><br><span class=\"line\">\tstart = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> i = <span class=\"number\">100000000L</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i--)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tend = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Time pause used %5.4f seconds.\\n\"</span>, difftime(end, start));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面都是一些转换函数的应用</span></span><br><span class=\"line\"><span class=\"comment\">// mktime: tm --&gt; time_t</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_mktime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> <span class=\"title\">t</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t_of_day;</span><br><span class=\"line\">\tt.tm_year = <span class=\"number\">1997</span> - <span class=\"number\">1990</span>;</span><br><span class=\"line\">\tt.tm_mon = <span class=\"number\">6</span>;</span><br><span class=\"line\">\tt.tm_mday = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tt.tm_hour = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tt.tm_sec = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tt.tm_wday = <span class=\"number\">4</span>; <span class=\"comment\">/* Day of the week */</span></span><br><span class=\"line\">\tt.tm_yday = <span class=\"number\">0</span>; <span class=\"comment\">/* Does not show in asctime  */</span></span><br><span class=\"line\">\tt.tm_isdst = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt_of_day = mktime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>,ctime(&amp;t_of_day));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// localtime: time_t --&gt; tm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_localtime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span>* <span class=\"title\">timeinfo</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttimeinfo = localtime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Current local time and date: %s\"</span>, asctime(timeinfo));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// gmtime: time_t --&gt; tm</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_gmtime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span>* <span class=\"title\">timeinfo</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ttime(&amp;rawtime);</span><br><span class=\"line\">\ttimeinfo = gmtime(&amp;rawtime);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"UTC time and date: %s\"</span>, asctime(timeinfo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ctime: time_t --&gt; string</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test_ctime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">time_t</span> t = time(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> str = ctime(&amp;t);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; str &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">test_clock_t</span>();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"keyword\">test_time_t</span>();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_difftime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_mktime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_localtime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_gmtime();</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"==========================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">test_ctime();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以使用strftime()函数将时间格式化为我们想要的格式。它的原型如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> strftime(</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *strDest,</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> maxsize,</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *format,</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> struct tm *timeptr</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>我们可以根据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。</p>\n<p>函数strftime()的操作有些类似于sprintf():识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串strDest中各种日期和时间信息的确切表示方式。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">a</span></span>\t星期几的简写</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">A</span></span>\t星期几的全称</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">b</span></span>\t月份的简写</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">B</span></span>\t月份的全称</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">c</span></span>\t标准的日期的时间串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">C</span></span>\t年份的后两位数字</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">d</span></span>\t十进制表示的每月的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">D</span></span>\t月/天/年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">e</span></span>\t在两字符域中，十进制表示的每月的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">F</span></span>\t年-月-日</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">g</span></span>\t年份的后两位数字，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">G</span></span>\t年份，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">h</span></span>\t简写的月份名</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">H</span></span>\t24小时制的小时</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">I</span></span>\t12小时制的小时</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">j</span></span>\t十进制表示的每年的第几天</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">m</span></span>\t十进制表示的月份</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">M</span></span>\t十进制表示的分钟数</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">n</span></span>\t新行符</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">p</span></span>\t本地的AM或PM的等价显示</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">r</span></span>\t12小时的时间</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">R</span></span>\t显示小时和分钟：hh:mm</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">S</span></span>\t十进制的秒数</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">t</span></span>\t水平制表符</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">T</span></span>\t显示时分秒：hh:mm:ss</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">u</span></span>\t每周的第几天，星期一为第一天（值从0到6，星期一为0）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">U</span></span>\t每年的第几周，把星期日作为第一天（值从0到53）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">V</span></span>\t每年的第几周，使用基于周的年</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">w</span></span>\t十进制表示的星期几（值从0到6，星期天为0）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">W</span></span>\t每年的第几周，把星期一作为第一天（值从0到53）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">x</span></span>\t标准的日期串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">X</span></span>\t标准的时间串</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">y</span></span>\t不带世纪的十进制年份（值从0到99）</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">Y</span></span>\t带世纪部分的十进制年份</span><br><span class=\"line\"><span class=\"tag\">%<span class=\"selector-tag\">z</span></span>\t%Z时区名称，如果不能得到时区则返回空字符。</span><br><span class=\"line\"><span class=\"tag\">%</span>%\t百分号</span><br></pre></td></tr></table></figure>\n<h4 id=\"strftime函数的声明\"><a class=\"markdownIt-Anchor\" href=\"#strftime函数的声明\"></a> strftime()函数的声明</h4>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t strftime(<span class=\"built_in\">char</span> *<span class=\"built_in\">str</span>, size_t maxsize, <span class=\"keyword\">const</span> <span class=\"built_in\">char</span> *format, <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span></span> *timeptr)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>str – 这是指向目标数组的指针，用来复制产生的 C 字符串。</li>\n<li>maxsize – 这是被复制到 str 的最大字符数。</li>\n<li>format – 这是 C 字符串，包含了普通字符和特殊格式说明符的任何组合。这些格式说明符由函数替换为表示 tm 中所指定时间的相对应值。格式说明符是：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">time_t</span> rawtime;</span><br><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tm</span> *<span class=\"title\">info</span>;</span></span><br><span class=\"line\">   <span class=\"keyword\">char</span> buffer[<span class=\"number\">80</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">   time( &amp;rawtime );</span><br><span class=\"line\"> </span><br><span class=\"line\">   info = localtime( &amp;rawtime );</span><br><span class=\"line\"> </span><br><span class=\"line\">   strftime(buffer, <span class=\"number\">80</span>, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, info);</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">\"格式化的日期 &amp; 时间 : |%s|\\n\"</span>, buffer );</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"C++调试技巧","date":"2019-03-21T02:20:44.000Z","_content":"\n### 1、常用调试技巧\n\n1) **代码检查**，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。\n\n```\ngcc -Wall -pedantic -ansi 表示以ansi/iso生成所有的警告西信息。\n```\n\n<!-- more -->\n\n2) **取样法：** 在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。\n\n例如：\n\n```\n#ifdef DEBUG\nstd::cout << x :\n#endif\n```\n\n程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。\n\n3) **程序的受控执行**。用调试器来控制代码的运行，随时查看这些变量的状态\n\n为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息向用户显示程序已经执行到的源代码的位置。-g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。\n\n\n### 2、使用gdb进行程序调试\n\n#### 常用功能命令：\n\n```\ng++ -g -o test test.cpp // 编译时加上-g参数\n```\n\n1. 启动gdb: `gdb test`\n2. help\n3. 具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行最近执行过的那条命令。单步调试非常有用。\n4. quit: 退出\n5. run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。\n6. backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。\n7. print：run 后检查变量，注意变量的生命期。\n8. 打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。\n9. 设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，end，display，disable breakpoint number，clear，commands breakpointNumber.\n10. 设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。\n\n### 3、valgrind 内存调试\n\n动态内存分配很容易出现程序漏洞，必须清楚自己分配的每一块内存，而且要确定没有使用已经释放的内存块，非常重要。内存调试的工具有很多，这里使用的是valgrind工具。在centos 7中直接使用 yum install valgrind 安装。\n\n```\n#include <iostream>\n\nint main()\n{\n    int *ptr = new int [3];\n    ptr[3]=1;\n\n    delete [] ptr;\n    std::cout << ptr[1];\n    return 0;\n}\n```\n\n上面简单的代码编译运行不会发生错误，但是实际上发生了很严重的内存问题。ptr[3]访问越界，std::cout <<ptr[i]，读已经释放过的内存。\n\n**通过valgrind工具可以检查出来：**\n\n```\n[xgwang@localhost Desktop]$ g++ -g -o test2 test2.cpp\n\n[xgwang@localhost Desktop]$ valgrind ./test2\n\n==21739== Memcheck, a memory error detector\n==21739== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==21739== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info\n==21739== Command: ./test2\n==21739== \n==21739== Invalid write of size 4\n==21739== at 0x40081E: main (test2.cpp:8)\n==21739== Address 0x5a1504c is 0 bytes after a block of size 12 alloc'd\n==21739== at 0x4C2A7AA: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==21739== by 0x400811: main (test2.cpp:7)\n==21739== \n==21739== Invalid read of size 4\n==21739== at 0x40083F: main (test2.cpp:11)\n==21739== Address 0x5a15044 is 4 bytes inside a block of size 12 free'd\n==21739== at 0x4C2B5E1: operator delete[](void*) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==21739== by 0x400836: main (test2.cpp:10)\n==21739== \n0==21739== \n==21739== HEAP SUMMARY:\n==21739== in use at exit: 0 bytes in 0 blocks\n==21739== total heap usage: 1 allocs, 1 frees, 12 bytes allocated\n==21739== \n==21739== All heap blocks were freed -- no leaks are possible\n==21739== \n==21739== For counts of detected and suppressed errors, rerun with: -v\n==21739== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 2 from 2)\n\n```\n\n\n\n>转载自：知乎\n>\n>[代码人生](https://www.zhihu.com/people/dai-ma-ren-sheng-5)","source":"_posts/C-调试技巧.md","raw":"---\ntitle: C++调试技巧\ndate: 2019-03-21 10:20:44\ntags: [c++, debug, gdb]\ncategories: cpp\n---\n\n### 1、常用调试技巧\n\n1) **代码检查**，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。\n\n```\ngcc -Wall -pedantic -ansi 表示以ansi/iso生成所有的警告西信息。\n```\n\n<!-- more -->\n\n2) **取样法：** 在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。\n\n例如：\n\n```\n#ifdef DEBUG\nstd::cout << x :\n#endif\n```\n\n程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。\n\n3) **程序的受控执行**。用调试器来控制代码的运行，随时查看这些变量的状态\n\n为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息向用户显示程序已经执行到的源代码的位置。-g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。\n\n\n### 2、使用gdb进行程序调试\n\n#### 常用功能命令：\n\n```\ng++ -g -o test test.cpp // 编译时加上-g参数\n```\n\n1. 启动gdb: `gdb test`\n2. help\n3. 具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行最近执行过的那条命令。单步调试非常有用。\n4. quit: 退出\n5. run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。\n6. backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。\n7. print：run 后检查变量，注意变量的生命期。\n8. 打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。\n9. 设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，end，display，disable breakpoint number，clear，commands breakpointNumber.\n10. 设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。\n\n### 3、valgrind 内存调试\n\n动态内存分配很容易出现程序漏洞，必须清楚自己分配的每一块内存，而且要确定没有使用已经释放的内存块，非常重要。内存调试的工具有很多，这里使用的是valgrind工具。在centos 7中直接使用 yum install valgrind 安装。\n\n```\n#include <iostream>\n\nint main()\n{\n    int *ptr = new int [3];\n    ptr[3]=1;\n\n    delete [] ptr;\n    std::cout << ptr[1];\n    return 0;\n}\n```\n\n上面简单的代码编译运行不会发生错误，但是实际上发生了很严重的内存问题。ptr[3]访问越界，std::cout <<ptr[i]，读已经释放过的内存。\n\n**通过valgrind工具可以检查出来：**\n\n```\n[xgwang@localhost Desktop]$ g++ -g -o test2 test2.cpp\n\n[xgwang@localhost Desktop]$ valgrind ./test2\n\n==21739== Memcheck, a memory error detector\n==21739== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==21739== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info\n==21739== Command: ./test2\n==21739== \n==21739== Invalid write of size 4\n==21739== at 0x40081E: main (test2.cpp:8)\n==21739== Address 0x5a1504c is 0 bytes after a block of size 12 alloc'd\n==21739== at 0x4C2A7AA: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==21739== by 0x400811: main (test2.cpp:7)\n==21739== \n==21739== Invalid read of size 4\n==21739== at 0x40083F: main (test2.cpp:11)\n==21739== Address 0x5a15044 is 4 bytes inside a block of size 12 free'd\n==21739== at 0x4C2B5E1: operator delete[](void*) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==21739== by 0x400836: main (test2.cpp:10)\n==21739== \n0==21739== \n==21739== HEAP SUMMARY:\n==21739== in use at exit: 0 bytes in 0 blocks\n==21739== total heap usage: 1 allocs, 1 frees, 12 bytes allocated\n==21739== \n==21739== All heap blocks were freed -- no leaks are possible\n==21739== \n==21739== For counts of detected and suppressed errors, rerun with: -v\n==21739== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 2 from 2)\n\n```\n\n\n\n>转载自：知乎\n>\n>[代码人生](https://www.zhihu.com/people/dai-ma-ren-sheng-5)","slug":"C-调试技巧","published":1,"updated":"2021-04-19T04:54:11.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxet000zsifyxqaqjajg","content":"<h3 id=\"1-常用调试技巧\"><a class=\"markdownIt-Anchor\" href=\"#1-常用调试技巧\"></a> 1、常用调试技巧</h3>\n<ol>\n<li><strong>代码检查</strong>，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。</li>\n</ol>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -Wall -pedantic -<span class=\"keyword\">ansi</span> 表示以<span class=\"keyword\">ansi</span>/iso生成所有的警告西信息。</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li><strong>取样法：</strong> 在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; x :</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。</p>\n<ol start=\"3\">\n<li><strong>程序的受控执行</strong>。用调试器来控制代码的运行，随时查看这些变量的状态</li>\n</ol>\n<p>为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息向用户显示程序已经执行到的源代码的位置。-g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。</p>\n<h3 id=\"2-使用gdb进行程序调试\"><a class=\"markdownIt-Anchor\" href=\"#2-使用gdb进行程序调试\"></a> 2、使用gdb进行程序调试</h3>\n<h4 id=\"常用功能命令\"><a class=\"markdownIt-Anchor\" href=\"#常用功能命令\"></a> 常用功能命令：</h4>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">g</span>++ -<span class=\"keyword\">g</span> -o <span class=\"keyword\">test</span> <span class=\"keyword\">test</span>.cpp <span class=\"comment\">// 编译时加上-g参数</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动gdb: <code>gdb test</code></li>\n<li>help</li>\n<li>具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行最近执行过的那条命令。单步调试非常有用。</li>\n<li>quit: 退出</li>\n<li>run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。</li>\n<li>backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。</li>\n<li>print：run 后检查变量，注意变量的生命期。</li>\n<li>打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。</li>\n<li>设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，end，display，disable breakpoint number，clear，commands breakpointNumber.</li>\n<li>设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。</li>\n</ol>\n<h3 id=\"3-valgrind-内存调试\"><a class=\"markdownIt-Anchor\" href=\"#3-valgrind-内存调试\"></a> 3、valgrind 内存调试</h3>\n<p>动态内存分配很容易出现程序漏洞，必须清楚自己分配的每一块内存，而且要确定没有使用已经释放的内存块，非常重要。内存调试的工具有很多，这里使用的是valgrind工具。在centos 7中直接使用 yum install valgrind 安装。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *ptr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">3</span>];</span><br><span class=\"line\">    ptr[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] ptr;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ptr[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面简单的代码编译运行不会发生错误，但是实际上发生了很严重的内存问题。ptr[3]访问越界，std::cout &lt;&lt;ptr[i]，读已经释放过的内存。</p>\n<p><strong>通过valgrind工具可以检查出来：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xgwang@localhost Desktop]$ g++ -g -o test2 test2.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">[xgwang@localhost Desktop]$ valgrind ./test2</span><br><span class=\"line\"></span><br><span class=\"line\">==21739== Memcheck, a memory error detector</span><br><span class=\"line\">==21739== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</span><br><span class=\"line\">==21739== Using Valgrind-3.10.0 and LibVEX; rerun <span class=\"keyword\">with</span> -h <span class=\"keyword\">for</span> copyright info</span><br><span class=\"line\">==<span class=\"number\">21739</span>== Command: ./test2</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== Invalid write <span class=\"keyword\">of</span> <span class=\"keyword\">size</span> <span class=\"number\">4</span></span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">at</span> <span class=\"number\">0x40081E</span>: <span class=\"keyword\">main</span> (test2.cpp:<span class=\"number\">8</span>)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== Address <span class=\"number\">0x5a1504c</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">after</span> a <span class=\"keyword\">block</span> <span class=\"keyword\">of</span> <span class=\"keyword\">size</span> <span class=\"number\">12</span> alloc<span class=\"string\">'d</span></span><br><span class=\"line\"><span class=\"string\">==21739== at 0x4C2A7AA: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class=\"line\"><span class=\"string\">==21739== by 0x400811: main (test2.cpp:7)</span></span><br><span class=\"line\"><span class=\"string\">==21739== </span></span><br><span class=\"line\"><span class=\"string\">==21739== Invalid read of size 4</span></span><br><span class=\"line\"><span class=\"string\">==21739== at 0x40083F: main (test2.cpp:11)</span></span><br><span class=\"line\"><span class=\"string\">==21739== Address 0x5a15044 is 4 bytes inside a block of size 12 free'</span>d</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">at</span> <span class=\"number\">0x4C2B5E1</span>: <span class=\"keyword\">operator</span> <span class=\"keyword\">delete</span>[](<span class=\"built_in\">void</span>*) (<span class=\"keyword\">in</span> /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">by</span> <span class=\"number\">0x400836</span>: <span class=\"keyword\">main</span> (test2.cpp:<span class=\"number\">10</span>)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\"><span class=\"number\">0</span>==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">HEAP</span> SUMMARY:</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">in</span> <span class=\"keyword\">use</span> <span class=\"keyword\">at</span> <span class=\"keyword\">exit</span>: <span class=\"number\">0</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> blocks</span><br><span class=\"line\">==<span class=\"number\">21739</span>== total <span class=\"keyword\">heap</span> <span class=\"keyword\">usage</span>: <span class=\"number\">1</span> allocs, <span class=\"number\">1</span> frees, <span class=\"number\">12</span> <span class=\"keyword\">bytes</span> allocated</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">All</span> <span class=\"keyword\">heap</span> blocks were freed <span class=\"comment\">-- no leaks are possible</span></span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">For</span> counts <span class=\"keyword\">of</span> detected <span class=\"keyword\">and</span> suppressed <span class=\"keyword\">errors</span>, rerun <span class=\"keyword\">with</span>: -v</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">ERROR</span> SUMMARY: <span class=\"number\">2</span> <span class=\"keyword\">errors</span> <span class=\"keyword\">from</span> <span class=\"number\">2</span> contexts (suppressed: <span class=\"number\">2</span> <span class=\"keyword\">from</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载自：知乎</p>\n<p><a href=\"https://www.zhihu.com/people/dai-ma-ren-sheng-5\" target=\"_blank\" rel=\"noopener\">代码人生</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-常用调试技巧\"><a class=\"markdownIt-Anchor\" href=\"#1-常用调试技巧\"></a> 1、常用调试技巧</h3>\n<ol>\n<li><strong>代码检查</strong>，重新阅读程序，排除比较明显的错误。编译时带上-Wall参数，生成所有的警告信息。</li>\n</ol>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -Wall -pedantic -<span class=\"keyword\">ansi</span> 表示以<span class=\"keyword\">ansi</span>/iso生成所有的警告西信息。</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li><strong>取样法：</strong> 在程序中增加一些代码，收集更多与程序运行时的行为相关的信息。使用条件编译，可以清楚的辨别哪些是调试代码，有利于调试后的代码整理。</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> DEBUG</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; x :</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>程序编译时可以选择性的加上-DDEBUG。如果加上这个标志，就定义了DEBUG这个符号，从而在程序中包含调试用的额外代码，没有加上该标志，这些调试代码将删除。</p>\n<ol start=\"3\">\n<li><strong>程序的受控执行</strong>。用调试器来控制代码的运行，随时查看这些变量的状态</li>\n</ol>\n<p>为了能够调试程序，需要在编译和链接时为每个源文件加上编译选项参数。这些选项的作用是让编译器在程序中添加额外的调试信息。这些信息包括符号和源代码行号，调试器将利用这些信息向用户显示程序已经执行到的源代码的位置。-g标志是对程序调试性编译时常用的一个选项。调试信息的加入使可执行程序的长度成倍的增长、容量增加，程序运行时的内存数量还是和原来一样，程序调试结束后，最好还是将调试信息从程序的发行版中删除。</p>\n<h3 id=\"2-使用gdb进行程序调试\"><a class=\"markdownIt-Anchor\" href=\"#2-使用gdb进行程序调试\"></a> 2、使用gdb进行程序调试</h3>\n<h4 id=\"常用功能命令\"><a class=\"markdownIt-Anchor\" href=\"#常用功能命令\"></a> 常用功能命令：</h4>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">g</span>++ -<span class=\"keyword\">g</span> -o <span class=\"keyword\">test</span> <span class=\"keyword\">test</span>.cpp <span class=\"comment\">// 编译时加上-g参数</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>启动gdb: <code>gdb test</code></li>\n<li>help</li>\n<li>具备带有历史记录的命令行编辑功能，方向键选择之前执行过的命令，直接回车键再次执行最近执行过的那条命令。单步调试非常有用。</li>\n<li>quit: 退出</li>\n<li>run:执行这个程序，程序运行失败时gdb会报告失败的原因和位置。</li>\n<li>backtrace(bt):栈跟踪，失败时停止的位置，帮助我们找到程序到达错误地点的路径。</li>\n<li>print：run 后检查变量，注意变量的生命期。</li>\n<li>打印围绕当前位置前后的一段代码，继续使用list可以显示更多的代码。</li>\n<li>设置断点，停止程序的运行，查看变量。help breakpoint，break lineNumber，cont，end，display，disable breakpoint number，clear，commands breakpointNumber.</li>\n<li>设置断点后经常使用单步调试命令next(n)，查看程序运行的细节。</li>\n</ol>\n<h3 id=\"3-valgrind-内存调试\"><a class=\"markdownIt-Anchor\" href=\"#3-valgrind-内存调试\"></a> 3、valgrind 内存调试</h3>\n<p>动态内存分配很容易出现程序漏洞，必须清楚自己分配的每一块内存，而且要确定没有使用已经释放的内存块，非常重要。内存调试的工具有很多，这里使用的是valgrind工具。在centos 7中直接使用 yum install valgrind 安装。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *ptr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">3</span>];</span><br><span class=\"line\">    ptr[<span class=\"number\">3</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> [] ptr;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; ptr[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面简单的代码编译运行不会发生错误，但是实际上发生了很严重的内存问题。ptr[3]访问越界，std::cout &lt;&lt;ptr[i]，读已经释放过的内存。</p>\n<p><strong>通过valgrind工具可以检查出来：</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xgwang@localhost Desktop]$ g++ -g -o test2 test2.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">[xgwang@localhost Desktop]$ valgrind ./test2</span><br><span class=\"line\"></span><br><span class=\"line\">==21739== Memcheck, a memory error detector</span><br><span class=\"line\">==21739== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.</span><br><span class=\"line\">==21739== Using Valgrind-3.10.0 and LibVEX; rerun <span class=\"keyword\">with</span> -h <span class=\"keyword\">for</span> copyright info</span><br><span class=\"line\">==<span class=\"number\">21739</span>== Command: ./test2</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== Invalid write <span class=\"keyword\">of</span> <span class=\"keyword\">size</span> <span class=\"number\">4</span></span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">at</span> <span class=\"number\">0x40081E</span>: <span class=\"keyword\">main</span> (test2.cpp:<span class=\"number\">8</span>)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== Address <span class=\"number\">0x5a1504c</span> <span class=\"keyword\">is</span> <span class=\"number\">0</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">after</span> a <span class=\"keyword\">block</span> <span class=\"keyword\">of</span> <span class=\"keyword\">size</span> <span class=\"number\">12</span> alloc<span class=\"string\">'d</span></span><br><span class=\"line\"><span class=\"string\">==21739== at 0x4C2A7AA: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span></span><br><span class=\"line\"><span class=\"string\">==21739== by 0x400811: main (test2.cpp:7)</span></span><br><span class=\"line\"><span class=\"string\">==21739== </span></span><br><span class=\"line\"><span class=\"string\">==21739== Invalid read of size 4</span></span><br><span class=\"line\"><span class=\"string\">==21739== at 0x40083F: main (test2.cpp:11)</span></span><br><span class=\"line\"><span class=\"string\">==21739== Address 0x5a15044 is 4 bytes inside a block of size 12 free'</span>d</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">at</span> <span class=\"number\">0x4C2B5E1</span>: <span class=\"keyword\">operator</span> <span class=\"keyword\">delete</span>[](<span class=\"built_in\">void</span>*) (<span class=\"keyword\">in</span> /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">by</span> <span class=\"number\">0x400836</span>: <span class=\"keyword\">main</span> (test2.cpp:<span class=\"number\">10</span>)</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\"><span class=\"number\">0</span>==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">HEAP</span> SUMMARY:</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">in</span> <span class=\"keyword\">use</span> <span class=\"keyword\">at</span> <span class=\"keyword\">exit</span>: <span class=\"number\">0</span> <span class=\"keyword\">bytes</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> blocks</span><br><span class=\"line\">==<span class=\"number\">21739</span>== total <span class=\"keyword\">heap</span> <span class=\"keyword\">usage</span>: <span class=\"number\">1</span> allocs, <span class=\"number\">1</span> frees, <span class=\"number\">12</span> <span class=\"keyword\">bytes</span> allocated</span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">All</span> <span class=\"keyword\">heap</span> blocks were freed <span class=\"comment\">-- no leaks are possible</span></span><br><span class=\"line\">==<span class=\"number\">21739</span>== </span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">For</span> counts <span class=\"keyword\">of</span> detected <span class=\"keyword\">and</span> suppressed <span class=\"keyword\">errors</span>, rerun <span class=\"keyword\">with</span>: -v</span><br><span class=\"line\">==<span class=\"number\">21739</span>== <span class=\"keyword\">ERROR</span> SUMMARY: <span class=\"number\">2</span> <span class=\"keyword\">errors</span> <span class=\"keyword\">from</span> <span class=\"number\">2</span> contexts (suppressed: <span class=\"number\">2</span> <span class=\"keyword\">from</span> <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>转载自：知乎</p>\n<p><a href=\"https://www.zhihu.com/people/dai-ma-ren-sheng-5\" target=\"_blank\" rel=\"noopener\">代码人生</a></p>\n</blockquote>"},{"title":"C++整型变量范围","date":"2019-04-16T04:02:07.000Z","_content":"\n\n整型变量范围\n\n|关键字|类型|数的范围|字节数|\n|:--:|:--:|:--:|:--:|\n|short|短整型|-32768~32767,即-2<sup>15</sup>~2<sup>15</sup>-1|2|\n|unsigned short|无符号短整型|0~65535,即0~2<sup>16</sup>-1|2|\n|int|整型|-2147483648~2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1|4|\n|unsigned int|无符号整型|0~4294967295,即0~2<sup>32</sup>-1|4|\n|long int|长整型|-2147483648-2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1|4|\n|unsigned long|无符号长整型|0~4294967295,即0~2<sup>32</sup>-1|4|\n\n\n\n\n\n\n","source":"_posts/C-整型变量范围.md","raw":"---\ntitle: C++整型变量范围\ndate: 2019-04-16 12:02:07\ntags: [c++, 变量]\ncategories: cpp\n---\n\n\n整型变量范围\n\n|关键字|类型|数的范围|字节数|\n|:--:|:--:|:--:|:--:|\n|short|短整型|-32768~32767,即-2<sup>15</sup>~2<sup>15</sup>-1|2|\n|unsigned short|无符号短整型|0~65535,即0~2<sup>16</sup>-1|2|\n|int|整型|-2147483648~2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1|4|\n|unsigned int|无符号整型|0~4294967295,即0~2<sup>32</sup>-1|4|\n|long int|长整型|-2147483648-2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1|4|\n|unsigned long|无符号长整型|0~4294967295,即0~2<sup>32</sup>-1|4|\n\n\n\n\n\n\n","slug":"C-整型变量范围","published":1,"updated":"2021-04-19T04:53:38.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxeu0013sifyue8rfulv","content":"<p>整型变量范围</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关键字</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">数的范围</th>\n<th style=\"text-align:center\">字节数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">短整型</td>\n<td style=\"text-align:center\">-32768<sub>32767,即-2&lt;sup&gt;15&lt;/sup&gt;</sub>2<sup>15</sup>-1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned short</td>\n<td style=\"text-align:center\">无符号短整型</td>\n<td style=\"text-align:center\">0<sub>65535,即0</sub>2<sup>16</sup>-1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">整型</td>\n<td style=\"text-align:center\">-2147483648<sub>2147483647,即-2&lt;sup&gt;31&lt;/sup&gt;</sub>2<sup>31</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned int</td>\n<td style=\"text-align:center\">无符号整型</td>\n<td style=\"text-align:center\">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long int</td>\n<td style=\"text-align:center\">长整型</td>\n<td style=\"text-align:center\">-2147483648-2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned long</td>\n<td style=\"text-align:center\">无符号长整型</td>\n<td style=\"text-align:center\">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>整型变量范围</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">关键字</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">数的范围</th>\n<th style=\"text-align:center\">字节数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">短整型</td>\n<td style=\"text-align:center\">-32768<sub>32767,即-2&lt;sup&gt;15&lt;/sup&gt;</sub>2<sup>15</sup>-1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned short</td>\n<td style=\"text-align:center\">无符号短整型</td>\n<td style=\"text-align:center\">0<sub>65535,即0</sub>2<sup>16</sup>-1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">整型</td>\n<td style=\"text-align:center\">-2147483648<sub>2147483647,即-2&lt;sup&gt;31&lt;/sup&gt;</sub>2<sup>31</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned int</td>\n<td style=\"text-align:center\">无符号整型</td>\n<td style=\"text-align:center\">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long int</td>\n<td style=\"text-align:center\">长整型</td>\n<td style=\"text-align:center\">-2147483648-2147483647,即-2<sup>31</sup>~2<sup>31</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unsigned long</td>\n<td style=\"text-align:center\">无符号长整型</td>\n<td style=\"text-align:center\">0<sub>4294967295,即0</sub>2<sup>32</sup>-1</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Chrome访问Https无法继续","date":"2020-01-08T07:45:26.000Z","_content":"\n今天更新了Chrome版本，发现请求自签名证书的https网站，无法不安全继续访问。\n\n<!-- more -->\n\nChrome当请求https网站时，如检测不到证书，则会报不安全访问。\n在旧版本中，可以点击“高级”按钮，选择不安全访问，即可继续访问。\n\n----\n\n但在新版本的Chrome访问https网站时，点击“高级”按钮，并没有显示不安全继续访问，那这种情况下，怎样不影响继续访问呢？\n\n在Chrome的新Tab中，输入如下：\n\n```\nchrome://net-internals/#hsts\n```\n\n在打开的界面中，选择`Domain Security Policy` 选项， 在最下面的Delete Domain security policies中的Domain文本框中，输入对应的IP/域名，点击“Delete”按钮后，刷新访问的页面，在“高级”选项中，可以看到继续按照不安全访问的按钮。\n\n\n\n\n","source":"_posts/Chrome访问Https无法继续.md","raw":"---\ntitle: Chrome访问Https无法继续\ndate: 2020-01-08 15:45:26\ntags: [mac, chrome]\ncategories: chrome\n---\n\n今天更新了Chrome版本，发现请求自签名证书的https网站，无法不安全继续访问。\n\n<!-- more -->\n\nChrome当请求https网站时，如检测不到证书，则会报不安全访问。\n在旧版本中，可以点击“高级”按钮，选择不安全访问，即可继续访问。\n\n----\n\n但在新版本的Chrome访问https网站时，点击“高级”按钮，并没有显示不安全继续访问，那这种情况下，怎样不影响继续访问呢？\n\n在Chrome的新Tab中，输入如下：\n\n```\nchrome://net-internals/#hsts\n```\n\n在打开的界面中，选择`Domain Security Policy` 选项， 在最下面的Delete Domain security policies中的Domain文本框中，输入对应的IP/域名，点击“Delete”按钮后，刷新访问的页面，在“高级”选项中，可以看到继续按照不安全访问的按钮。\n\n\n\n\n","slug":"Chrome访问Https无法继续","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxev0016sify3u9xpu8b","content":"<p>今天更新了Chrome版本，发现请求自签名证书的https网站，无法不安全继续访问。</p>\n<a id=\"more\"></a>\n<p>Chrome当请求https网站时，如检测不到证书，则会报不安全访问。<br>\n在旧版本中，可以点击“高级”按钮，选择不安全访问，即可继续访问。</p>\n<hr>\n<p>但在新版本的Chrome访问https网站时，点击“高级”按钮，并没有显示不安全继续访问，那这种情况下，怎样不影响继续访问呢？</p>\n<p>在Chrome的新Tab中，输入如下：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">chrome:</span>//net-internals/<span class=\"meta\">#hsts</span></span><br></pre></td></tr></table></figure>\n<p>在打开的界面中，选择<code>Domain Security Policy</code> 选项， 在最下面的Delete Domain security policies中的Domain文本框中，输入对应的IP/域名，点击“Delete”按钮后，刷新访问的页面，在“高级”选项中，可以看到继续按照不安全访问的按钮。</p>\n","site":{"data":{}},"excerpt":"<p>今天更新了Chrome版本，发现请求自签名证书的https网站，无法不安全继续访问。</p>","more":"<p>Chrome当请求https网站时，如检测不到证书，则会报不安全访问。<br>\n在旧版本中，可以点击“高级”按钮，选择不安全访问，即可继续访问。</p>\n<hr>\n<p>但在新版本的Chrome访问https网站时，点击“高级”按钮，并没有显示不安全继续访问，那这种情况下，怎样不影响继续访问呢？</p>\n<p>在Chrome的新Tab中，输入如下：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">chrome:</span>//net-internals/<span class=\"meta\">#hsts</span></span><br></pre></td></tr></table></figure>\n<p>在打开的界面中，选择<code>Domain Security Policy</code> 选项， 在最下面的Delete Domain security policies中的Domain文本框中，输入对应的IP/域名，点击“Delete”按钮后，刷新访问的页面，在“高级”选项中，可以看到继续按照不安全访问的按钮。</p>"},{"title":"C语言-排序与查找","date":"2019-02-21T04:42:43.000Z","_content":"\n排序与查找\n\n<!-- more -->\n\n### 排序\n\n常见排序有：冒泡排序、选择排序、插入排序、快速排序。\n\n\n```c\n#include <stdio.h>\n\nvoid swap(int *a, int *b)\n{\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid bubble(int *array, int n) // 冒泡排序\n{\n\tint i;\n\tint j;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tfor(j = 1; j < n - i; j++)\n\t\t{\n\t\t\tif(array[j - 1] > array[j])\n\t\t\t{\n\t\t\t\tswap(&array[j - 1], &array[j]);\n\t\t\t}\n\n\t\t}\n\t}\n}\n\n// 查找指定范围的最小值\nint  minkey(int *array, int low, int high)\n// 第一个参数是一个数组，第二个参数是数组的开始下标，第三个参数是数组的终止下标\n// 返回值是最小元素的下标\n{\n\tint min = low;\n\tint key = array[low]; // 在没有查找最小元素之前，第一个元素是最小值\n\tint i;\n\tfor(i = low + 1; i < high; i++)\n\t{\n\t\tif(key > array[i]){\n\t\t\tkey = array[i];\n\t\t\tmin = i;\n\t\t}\n\t}\n\treturn min;\n}\n\n// 在一个集合里面找最小的数，将最小的数放到集合的最前面\nvoid select(int * array, int n) // 选择排序法\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tint j = minkey(array, i, n);\n\t\tif(i != j) // 证明范围内的第一个成员不是最小的\n\t\t{\n\t\t\tswap(&array[i], &array[j]);\n\t\t}\n\t}\n\n}\n\nvoid print(int *array, int n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%d\\n\", array[i]);\n\t}\n}\n\nint main(){\n\tint array[10] = {32,  45, 76, 21, 2 , 5, 11,  33, 9, 10};\n\n\t// bubble(array, 10);\n\t// printf(\"min = %d\\n\", minkey(array, 0, 10));\n\tselect(array, 10);\n\t\n\tprint(array, 10);\n\n\treturn 0;\n}\n```\n\n### 查找\n\n常见查找方法有：顺序查找，二分查找。\n\n```c\n#include <stdio.h>\n\nint count = 0;\n\nvoid swap(int *a, int *b)\n{\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nint partition(int *array, int low, int high)\n{\n\tint base = array[low]; // 用子表的第一个记录做枢轴(分水岭)记录\n\twhile(low < high)\n\t{\n\t\twhile(array[high] >= base && low < high)\n\t\t{\n\t\t\thigh--;\n\t\t}\n\t\tswap(&array[high], &array[low]);\n\t\twhile(array[low] <= base && low < high)\n\t\t{\n\t\t\tlow++;\n\t\t}\n\t\tswap(&array[high], &array[low]);\n\t}\n\treturn low;\n}\n\nvoid quick_sort(int *array, int low, int high)\n{\n\tif(low < high)\n\t{\n\t\tint part = partition(array, low, high);\n\t\tquick_sort(array, low, part - 1);\n\t\tquick_sort(array, part + 1, high);\n\t}\n}\n\nvoid print(int *array, int n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%d\\n\", array[i]);\n\t}\n}\n\n// 顺序查找\nint seq(int *array, int low, int high, int key)\n{// 在指定范围内寻找和key相同的值，找到返回下标，找不到返回-1\n\tint i;\n\tfor(i = low; i < high; i++)\n\t{\n\t\tcount++;\n\t\tif(array[i] == key)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n//二分查找，在已经排序的列表中查找\nint bin(int *array, int low, int high, int key)\n{\n\twhile(low <= high)\n\t{\n\t\tint mid = (low + high) / 2;\t\n\t\tif(key == array[mid])// 中间切一刀，正好和要查找的数相等\n\t\t\treturn mid;\n\t\telse if (key > array[mid]) // 如果要找的数大于array[mid]， 那么就在下半部分切刀\n\t\t\tlow = mid + 1;\n\t\telse // 如果要找到的数小于array[mid], 那么就在上半部分继续切刀\n\t\t\thigh = mid - 1;\n\t}\n\treturn -1; // 没有找到数据\n}\n\nint bin_rec(int *array, int low, int high, int key)\n{\n\tif(low <= high)\n\t{\n\t\tint mid = (low + high) / 2;\n\t\tif(key == array[mid])\n\t\t\treturn mid;\n\t\telse if (key > array[mid])\n\t\t\treturn bin_rec(array, mid + 1, high, key);\n\t\telse \n\t\t\treturn bin_rec(array, low, mid - 1, key);\n\t} else{\n\t\treturn -1;\n\t}\n}\n\nint main(){\n\n\tint array[10] = {32, 45, 76, 21, 56, 85, 23, 89, 15, 49};\n\t// int array[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n\t// printf(\"%d\\n\", seq(array, 0, 10, 32));\n\tquick_sort(array, 0, 9);\n\t\n\n\tprintf(\"%d\\n\", bin(array, 0, 10, 56));\n\n\tprintf(\"%d\\n\", bin_rec(array, 0, 10, 56));\n\n\tprintf(\"--------------------------------------\\n\");\n\tprint(array, 10);\n\t// printf(\"count = %d\\n\", count);\n\n\treturn 0;\n}\n\n```\n","source":"_posts/C语言-排序与查找.md","raw":"---\ntitle: C语言-排序与查找\ndate: 2019-02-21 12:42:43\ntags: [排序, 查找, c]\ncategories: c\n---\n\n排序与查找\n\n<!-- more -->\n\n### 排序\n\n常见排序有：冒泡排序、选择排序、插入排序、快速排序。\n\n\n```c\n#include <stdio.h>\n\nvoid swap(int *a, int *b)\n{\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nvoid bubble(int *array, int n) // 冒泡排序\n{\n\tint i;\n\tint j;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tfor(j = 1; j < n - i; j++)\n\t\t{\n\t\t\tif(array[j - 1] > array[j])\n\t\t\t{\n\t\t\t\tswap(&array[j - 1], &array[j]);\n\t\t\t}\n\n\t\t}\n\t}\n}\n\n// 查找指定范围的最小值\nint  minkey(int *array, int low, int high)\n// 第一个参数是一个数组，第二个参数是数组的开始下标，第三个参数是数组的终止下标\n// 返回值是最小元素的下标\n{\n\tint min = low;\n\tint key = array[low]; // 在没有查找最小元素之前，第一个元素是最小值\n\tint i;\n\tfor(i = low + 1; i < high; i++)\n\t{\n\t\tif(key > array[i]){\n\t\t\tkey = array[i];\n\t\t\tmin = i;\n\t\t}\n\t}\n\treturn min;\n}\n\n// 在一个集合里面找最小的数，将最小的数放到集合的最前面\nvoid select(int * array, int n) // 选择排序法\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tint j = minkey(array, i, n);\n\t\tif(i != j) // 证明范围内的第一个成员不是最小的\n\t\t{\n\t\t\tswap(&array[i], &array[j]);\n\t\t}\n\t}\n\n}\n\nvoid print(int *array, int n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%d\\n\", array[i]);\n\t}\n}\n\nint main(){\n\tint array[10] = {32,  45, 76, 21, 2 , 5, 11,  33, 9, 10};\n\n\t// bubble(array, 10);\n\t// printf(\"min = %d\\n\", minkey(array, 0, 10));\n\tselect(array, 10);\n\t\n\tprint(array, 10);\n\n\treturn 0;\n}\n```\n\n### 查找\n\n常见查找方法有：顺序查找，二分查找。\n\n```c\n#include <stdio.h>\n\nint count = 0;\n\nvoid swap(int *a, int *b)\n{\n\tint tmp = *a;\n\t*a = *b;\n\t*b = tmp;\n}\n\nint partition(int *array, int low, int high)\n{\n\tint base = array[low]; // 用子表的第一个记录做枢轴(分水岭)记录\n\twhile(low < high)\n\t{\n\t\twhile(array[high] >= base && low < high)\n\t\t{\n\t\t\thigh--;\n\t\t}\n\t\tswap(&array[high], &array[low]);\n\t\twhile(array[low] <= base && low < high)\n\t\t{\n\t\t\tlow++;\n\t\t}\n\t\tswap(&array[high], &array[low]);\n\t}\n\treturn low;\n}\n\nvoid quick_sort(int *array, int low, int high)\n{\n\tif(low < high)\n\t{\n\t\tint part = partition(array, low, high);\n\t\tquick_sort(array, low, part - 1);\n\t\tquick_sort(array, part + 1, high);\n\t}\n}\n\nvoid print(int *array, int n)\n{\n\tint i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tprintf(\"%d\\n\", array[i]);\n\t}\n}\n\n// 顺序查找\nint seq(int *array, int low, int high, int key)\n{// 在指定范围内寻找和key相同的值，找到返回下标，找不到返回-1\n\tint i;\n\tfor(i = low; i < high; i++)\n\t{\n\t\tcount++;\n\t\tif(array[i] == key)\n\t\t{\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n//二分查找，在已经排序的列表中查找\nint bin(int *array, int low, int high, int key)\n{\n\twhile(low <= high)\n\t{\n\t\tint mid = (low + high) / 2;\t\n\t\tif(key == array[mid])// 中间切一刀，正好和要查找的数相等\n\t\t\treturn mid;\n\t\telse if (key > array[mid]) // 如果要找的数大于array[mid]， 那么就在下半部分切刀\n\t\t\tlow = mid + 1;\n\t\telse // 如果要找到的数小于array[mid], 那么就在上半部分继续切刀\n\t\t\thigh = mid - 1;\n\t}\n\treturn -1; // 没有找到数据\n}\n\nint bin_rec(int *array, int low, int high, int key)\n{\n\tif(low <= high)\n\t{\n\t\tint mid = (low + high) / 2;\n\t\tif(key == array[mid])\n\t\t\treturn mid;\n\t\telse if (key > array[mid])\n\t\t\treturn bin_rec(array, mid + 1, high, key);\n\t\telse \n\t\t\treturn bin_rec(array, low, mid - 1, key);\n\t} else{\n\t\treturn -1;\n\t}\n}\n\nint main(){\n\n\tint array[10] = {32, 45, 76, 21, 56, 85, 23, 89, 15, 49};\n\t// int array[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\n\t// printf(\"%d\\n\", seq(array, 0, 10, 32));\n\tquick_sort(array, 0, 9);\n\t\n\n\tprintf(\"%d\\n\", bin(array, 0, 10, 56));\n\n\tprintf(\"%d\\n\", bin_rec(array, 0, 10, 56));\n\n\tprintf(\"--------------------------------------\\n\");\n\tprint(array, 10);\n\t// printf(\"count = %d\\n\", count);\n\n\treturn 0;\n}\n\n```\n","slug":"C语言-排序与查找","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxev0019sifyq5rjwwl5","content":"<p>排序与查找</p>\n<a id=\"more\"></a>\n<h3 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h3>\n<p>常见排序有：冒泡排序、选择排序、插入排序、快速排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 冒泡排序</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt; n - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[j - <span class=\"number\">1</span>] &gt; <span class=\"built_in\">array</span>[j])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tswap(&amp;<span class=\"built_in\">array</span>[j - <span class=\"number\">1</span>], &amp;<span class=\"built_in\">array</span>[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找指定范围的最小值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">minkey</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第一个参数是一个数组，第二个参数是数组的开始下标，第三个参数是数组的终止下标</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 返回值是最小元素的下标</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min = low;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> key = <span class=\"built_in\">array</span>[low]; <span class=\"comment\">// 在没有查找最小元素之前，第一个元素是最小值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = low + <span class=\"number\">1</span>; i &lt; high; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key &gt; <span class=\"built_in\">array</span>[i])&#123;</span><br><span class=\"line\">\t\t\tkey = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tmin = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在一个集合里面找最小的数，将最小的数放到集合的最前面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> * <span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 选择排序法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = minkey(<span class=\"built_in\">array</span>, i, n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i != j) <span class=\"comment\">// 证明范围内的第一个成员不是最小的</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tswap(&amp;<span class=\"built_in\">array</span>[i], &amp;<span class=\"built_in\">array</span>[j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>] = &#123;<span class=\"number\">32</span>,  <span class=\"number\">45</span>, <span class=\"number\">76</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span> , <span class=\"number\">5</span>, <span class=\"number\">11</span>,  <span class=\"number\">33</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bubble(array, 10);</span></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"min = %d\\n\", minkey(array, 0, 10));</span></span><br><span class=\"line\">\tselect(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprint(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h3>\n<p>常见查找方法有：顺序查找，二分查找。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = <span class=\"built_in\">array</span>[low]; <span class=\"comment\">// 用子表的第一个记录做枢轴(分水岭)记录</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt; high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[high] &gt;= base &amp;&amp; low &lt; high)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\thigh--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswap(&amp;<span class=\"built_in\">array</span>[high], &amp;<span class=\"built_in\">array</span>[low]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[low] &lt;= base &amp;&amp; low &lt; high)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswap(&amp;<span class=\"built_in\">array</span>[high], &amp;<span class=\"built_in\">array</span>[low]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &lt; high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> part = partition(<span class=\"built_in\">array</span>, low, high);</span><br><span class=\"line\">\t\tquick_sort(<span class=\"built_in\">array</span>, low, part - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tquick_sort(<span class=\"built_in\">array</span>, part + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">seq</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">// 在指定范围内寻找和key相同的值，找到返回下标，找不到返回-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = low; i &lt; high; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] == key)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找，在已经排序的列表中查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bin</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key == <span class=\"built_in\">array</span>[mid])<span class=\"comment\">// 中间切一刀，正好和要查找的数相等</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; <span class=\"built_in\">array</span>[mid]) <span class=\"comment\">// 如果要找的数大于array[mid]， 那么就在下半部分切刀</span></span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"comment\">// 如果要找到的数小于array[mid], 那么就在上半部分继续切刀</span></span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 没有找到数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bin_rec</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key == <span class=\"built_in\">array</span>[mid])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; <span class=\"built_in\">array</span>[mid])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bin_rec(<span class=\"built_in\">array</span>, mid + <span class=\"number\">1</span>, high, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bin_rec(<span class=\"built_in\">array</span>, low, mid - <span class=\"number\">1</span>, key);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>] = &#123;<span class=\"number\">32</span>, <span class=\"number\">45</span>, <span class=\"number\">76</span>, <span class=\"number\">21</span>, <span class=\"number\">56</span>, <span class=\"number\">85</span>, <span class=\"number\">23</span>, <span class=\"number\">89</span>, <span class=\"number\">15</span>, <span class=\"number\">49</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// int array[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"%d\\n\", seq(array, 0, 10, 32));</span></span><br><span class=\"line\">\tquick_sort(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bin(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">56</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bin_rec(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">56</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------------------------------\\n\"</span>);</span><br><span class=\"line\">\tprint(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"count = %d\\n\", count);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>排序与查找</p>","more":"<h3 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h3>\n<p>常见排序有：冒泡排序、选择排序、插入排序、快速排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubble</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 冒泡排序</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt; n - i; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[j - <span class=\"number\">1</span>] &gt; <span class=\"built_in\">array</span>[j])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tswap(&amp;<span class=\"built_in\">array</span>[j - <span class=\"number\">1</span>], &amp;<span class=\"built_in\">array</span>[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查找指定范围的最小值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">minkey</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 第一个参数是一个数组，第二个参数是数组的开始下标，第三个参数是数组的终止下标</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// 返回值是最小元素的下标</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> min = low;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> key = <span class=\"built_in\">array</span>[low]; <span class=\"comment\">// 在没有查找最小元素之前，第一个元素是最小值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = low + <span class=\"number\">1</span>; i &lt; high; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key &gt; <span class=\"built_in\">array</span>[i])&#123;</span><br><span class=\"line\">\t\t\tkey = <span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t\tmin = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在一个集合里面找最小的数，将最小的数放到集合的最前面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">select</span><span class=\"params\">(<span class=\"keyword\">int</span> * <span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 选择排序法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = minkey(<span class=\"built_in\">array</span>, i, n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i != j) <span class=\"comment\">// 证明范围内的第一个成员不是最小的</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tswap(&amp;<span class=\"built_in\">array</span>[i], &amp;<span class=\"built_in\">array</span>[j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>] = &#123;<span class=\"number\">32</span>,  <span class=\"number\">45</span>, <span class=\"number\">76</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span> , <span class=\"number\">5</span>, <span class=\"number\">11</span>,  <span class=\"number\">33</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// bubble(array, 10);</span></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"min = %d\\n\", minkey(array, 0, 10));</span></span><br><span class=\"line\">\tselect(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprint(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h3>\n<p>常见查找方法有：顺序查找，二分查找。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tmp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = <span class=\"built_in\">array</span>[low]; <span class=\"comment\">// 用子表的第一个记录做枢轴(分水岭)记录</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt; high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[high] &gt;= base &amp;&amp; low &lt; high)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\thigh--;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswap(&amp;<span class=\"built_in\">array</span>[high], &amp;<span class=\"built_in\">array</span>[low]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[low] &lt;= base &amp;&amp; low &lt; high)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tswap(&amp;<span class=\"built_in\">array</span>[high], &amp;<span class=\"built_in\">array</span>[low]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &lt; high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> part = partition(<span class=\"built_in\">array</span>, low, high);</span><br><span class=\"line\">\t\tquick_sort(<span class=\"built_in\">array</span>, low, part - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tquick_sort(<span class=\"built_in\">array</span>, part + <span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 顺序查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">seq</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">// 在指定范围内寻找和key相同的值，找到返回下标，找不到返回-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = low; i &lt; high; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">array</span>[i] == key)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找，在已经排序的列表中查找</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bin</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key == <span class=\"built_in\">array</span>[mid])<span class=\"comment\">// 中间切一刀，正好和要查找的数相等</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; <span class=\"built_in\">array</span>[mid]) <span class=\"comment\">// 如果要找的数大于array[mid]， 那么就在下半部分切刀</span></span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"comment\">// 如果要找到的数小于array[mid], 那么就在上半部分继续切刀</span></span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 没有找到数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bin_rec</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high, <span class=\"keyword\">int</span> key)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(low &lt;= high)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(key == <span class=\"built_in\">array</span>[mid])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; <span class=\"built_in\">array</span>[mid])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bin_rec(<span class=\"built_in\">array</span>, mid + <span class=\"number\">1</span>, high, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bin_rec(<span class=\"built_in\">array</span>, low, mid - <span class=\"number\">1</span>, key);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>] = &#123;<span class=\"number\">32</span>, <span class=\"number\">45</span>, <span class=\"number\">76</span>, <span class=\"number\">21</span>, <span class=\"number\">56</span>, <span class=\"number\">85</span>, <span class=\"number\">23</span>, <span class=\"number\">89</span>, <span class=\"number\">15</span>, <span class=\"number\">49</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// int array[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"%d\\n\", seq(array, 0, 10, 32));</span></span><br><span class=\"line\">\tquick_sort(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bin(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">56</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, bin_rec(<span class=\"built_in\">array</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">56</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"--------------------------------------\\n\"</span>);</span><br><span class=\"line\">\tprint(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"count = %d\\n\", count);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CURL状态码列表","date":"2020-12-28T05:43:12.000Z","_content":"\nCURL状态码列表\n\n<!-- more -->\n\n|状态码|状态原因|解释|\n|:--:|:--:|:--:|\n|0|正常访问||\n|1|错误的协议|未支持的协议。此版cURL 不支持这一协议。|\n|2|初始化代码失败|初始化失败。|\n|3|URL格式不正确|URL 格式错误。语法不正确。|\n|4|请求协议错误||\n|5|无法解析代理|无法解析代理。无法解析给定代理主机。|\n|6|无法解析主机地址|无法解析主机。无法解析给定的远程主机。|\n|7|无法连接到主机|无法连接到主机。|\n|8|远程服务器不可用|FTP 非正常的服务器应答。cURL 无法解析服务器发送的数据。|\n|9|访问资源错误|FTP 访问被拒绝。服务器拒绝登入或无法获取您想要的特定资源或目录。最有可能的是您试图进入一个在此服务器上不存在的目录。|\n|11|FTP密码错误|FTP 非正常的PASS 回复。cURL 无法解析发送到PASS 请求的应答。|\n|13|结果错误|FTP 非正常的的PASV 应答，cURL 无法解析发送到PASV 请求的应答。|\n|14|FTP回应PASV命令|FTP 非正常的227格式。cURL 无法解析服务器发送的227行。|\n|15|内部故障|FTP 无法连接到主机。无法解析在227行中获取的主机IP|\n|17|设置传输模式为二进制|FTP 无法设定为二进制传输。无法改变传输方式到二进制。|\n|18|文件传输短或大于预期|部分文件。只有部分文件被传输。|\n|19|RETR命令传输完成|FTP 不能下载/访问给定的文件， RETR (或类似)命令失败。|\n|21|命令成功完成|FTP quote 错误。quote 命令从服务器返回错误。|\n|22| 返回正常 |HTTP 找不到网页。找不到所请求的URL 或返回另一个HTTP 400或以上错误。此返回代码只出现在使用了-f/--fail 选项以后。|\n|23|数据写入失败|写入错误。cURL 无法向本地文件系统或类似目的写入数据。|\n|25|无法启动上传|FTP 无法STOR 文件。服务器拒绝了用于FTP 上传的STOR 操作。|\n|26|回调错误|读错误。各类读取问题。|\n|27|内存分配请求失败|内存不足。内存分配请求失败。|\n|28|访问超时|操作超时。到达指定的超时期限条件。|\n|30|FTP端口错误|FTP PORT 失败。PORT 命令失败。并非所有的FTP 服务器支持PORT 命令，请尝试使用被动(PASV)传输代替！|\n|31|FTP错误|FTP 无法使用REST 命令。REST 命令失败。此命令用来恢复的FTP 传输。|\n|33|不支持请求|HTTP range 错误。range \"命令\"不起作用。|\n|34|内部发生错误|HTTP POST 错误。内部POST 请求产生错误。|\n|35|SSL/TLS握手失败|SSL 连接错误。SSL 握手失败。|\n|36|下载无法恢复|FTP 续传损坏。不能继续早些时候被中止的下载。|\n|37|文件权限错误|文件无法读取。无法打开文件。权限问题？|\n|38|LDAP可没有约束力|LDAP 无法绑定。LDAP 绑定(bind)操作失败。|\n|39|LDAP搜索失败|LDAP 搜索失败。|\n|41|函数没有找到|功能无法找到。无法找到必要的LDAP 功能。|\n|42|中止的回调|由回调终止。应用程序告知cURL 终止运作。|\n|43|内部错误|内部错误。由一个不正确参数调用了功能。|\n|45|接口错误|接口错误。指定的外发接口无法使用。|\n|47|过多的重定向|过多的重定向。cURL 达到了跟随重定向设定的最大限额跟|\n|48|无法识别选项|指定了未知TELNET 选项。|\n|49|TELNET格式错误|不合式的telnet 选项。|\n|51|远程服务器的SSL证书|peer 的SSL 证书或SSH 的MD5指纹没有确定。|\n|52|服务器无返回内容|服务器无任何应答，该情况在此处被认为是一个错误。|\n|53|加密引擎未找到|找不到SSL 加密引擎。|\n|54|设定默认SSL加密失败|无法将SSL 加密引擎设置为默认。|\n|55|无法发送网络数据|发送网络数据失败。|\n|56|衰竭接收网络数据|在接收网络数据时失败。|\n|57|||\n|58|本地客户端证书|本地证书有问题。|\n|59|无法使用密码|无法使用指定的SSL 密码。|\n|60|凭证无法验证|peer 证书无法被已知的CA 证书验证。|\n|61|无法识别的传输编码|无法辨识的传输编码。|\n|62|无效的LDAP URL|无效的LDAP URL。|\n|63|文件超过最大大小|超过最大文件尺寸。|\n|64|FTP失败|要求的FTP 的SSL 水平失败。|\n|65|倒带操作失败|发送此数据需要的回卷(rewind)失败。|\n|66|SSL引擎失败|初始化SSL 引擎失败。|\n|67|服务器拒绝登录|用户名、密码或类似的信息未被接受，cURL 登录失败。|\n|68|未找到文件|在TFTP 服务器上找不到文件。|\n|69|无权限|TFTP 服务器权限有问题。|\n|70|超出服务器磁盘空间|TFTP 服务器磁盘空间不足。|\n|71|非法TFTP操作|非法的TFTP 操作。|\n|72|未知TFTP传输的ID|未知TFTP 传输编号(ID)。|\n|73|文件已经存在|文件已存在(TFTP) 。|\n|74|错误TFTP服务器|无此用户(TFTP) 。|\n|75|字符转换失败|字符转换失败。|\n|76|必须记录回调|\t需要字符转换功能。|\n|77|CA证书权限|读SSL 证书出现问题(路径？访问权限？ ) 。|\n|78|URL中引用资源不存在|URL 中引用的资源不存在。|\n|79|错误发生在SSH会话|\tSSH 会话期间发生一个未知错误。|\n|80|无法关闭SSL连接|未能关闭SSL 连接。|\n|81|服务未准备||\n|82|无法载入CRL文件|\t无法加载CRL 文件，丢失或格式不正确(在7.19.0版中增加) 。|\n|83|发行人检查失败|签发检查失败(在7.19.0版中增加) 。|\n\n\n\n","source":"_posts/CURL状态码列表.md","raw":"---\ntitle: CURL状态码列表\ndate: 2020-12-28 13:43:12\ntags: [curl, android, linux]\ncategories: curl\n---\n\nCURL状态码列表\n\n<!-- more -->\n\n|状态码|状态原因|解释|\n|:--:|:--:|:--:|\n|0|正常访问||\n|1|错误的协议|未支持的协议。此版cURL 不支持这一协议。|\n|2|初始化代码失败|初始化失败。|\n|3|URL格式不正确|URL 格式错误。语法不正确。|\n|4|请求协议错误||\n|5|无法解析代理|无法解析代理。无法解析给定代理主机。|\n|6|无法解析主机地址|无法解析主机。无法解析给定的远程主机。|\n|7|无法连接到主机|无法连接到主机。|\n|8|远程服务器不可用|FTP 非正常的服务器应答。cURL 无法解析服务器发送的数据。|\n|9|访问资源错误|FTP 访问被拒绝。服务器拒绝登入或无法获取您想要的特定资源或目录。最有可能的是您试图进入一个在此服务器上不存在的目录。|\n|11|FTP密码错误|FTP 非正常的PASS 回复。cURL 无法解析发送到PASS 请求的应答。|\n|13|结果错误|FTP 非正常的的PASV 应答，cURL 无法解析发送到PASV 请求的应答。|\n|14|FTP回应PASV命令|FTP 非正常的227格式。cURL 无法解析服务器发送的227行。|\n|15|内部故障|FTP 无法连接到主机。无法解析在227行中获取的主机IP|\n|17|设置传输模式为二进制|FTP 无法设定为二进制传输。无法改变传输方式到二进制。|\n|18|文件传输短或大于预期|部分文件。只有部分文件被传输。|\n|19|RETR命令传输完成|FTP 不能下载/访问给定的文件， RETR (或类似)命令失败。|\n|21|命令成功完成|FTP quote 错误。quote 命令从服务器返回错误。|\n|22| 返回正常 |HTTP 找不到网页。找不到所请求的URL 或返回另一个HTTP 400或以上错误。此返回代码只出现在使用了-f/--fail 选项以后。|\n|23|数据写入失败|写入错误。cURL 无法向本地文件系统或类似目的写入数据。|\n|25|无法启动上传|FTP 无法STOR 文件。服务器拒绝了用于FTP 上传的STOR 操作。|\n|26|回调错误|读错误。各类读取问题。|\n|27|内存分配请求失败|内存不足。内存分配请求失败。|\n|28|访问超时|操作超时。到达指定的超时期限条件。|\n|30|FTP端口错误|FTP PORT 失败。PORT 命令失败。并非所有的FTP 服务器支持PORT 命令，请尝试使用被动(PASV)传输代替！|\n|31|FTP错误|FTP 无法使用REST 命令。REST 命令失败。此命令用来恢复的FTP 传输。|\n|33|不支持请求|HTTP range 错误。range \"命令\"不起作用。|\n|34|内部发生错误|HTTP POST 错误。内部POST 请求产生错误。|\n|35|SSL/TLS握手失败|SSL 连接错误。SSL 握手失败。|\n|36|下载无法恢复|FTP 续传损坏。不能继续早些时候被中止的下载。|\n|37|文件权限错误|文件无法读取。无法打开文件。权限问题？|\n|38|LDAP可没有约束力|LDAP 无法绑定。LDAP 绑定(bind)操作失败。|\n|39|LDAP搜索失败|LDAP 搜索失败。|\n|41|函数没有找到|功能无法找到。无法找到必要的LDAP 功能。|\n|42|中止的回调|由回调终止。应用程序告知cURL 终止运作。|\n|43|内部错误|内部错误。由一个不正确参数调用了功能。|\n|45|接口错误|接口错误。指定的外发接口无法使用。|\n|47|过多的重定向|过多的重定向。cURL 达到了跟随重定向设定的最大限额跟|\n|48|无法识别选项|指定了未知TELNET 选项。|\n|49|TELNET格式错误|不合式的telnet 选项。|\n|51|远程服务器的SSL证书|peer 的SSL 证书或SSH 的MD5指纹没有确定。|\n|52|服务器无返回内容|服务器无任何应答，该情况在此处被认为是一个错误。|\n|53|加密引擎未找到|找不到SSL 加密引擎。|\n|54|设定默认SSL加密失败|无法将SSL 加密引擎设置为默认。|\n|55|无法发送网络数据|发送网络数据失败。|\n|56|衰竭接收网络数据|在接收网络数据时失败。|\n|57|||\n|58|本地客户端证书|本地证书有问题。|\n|59|无法使用密码|无法使用指定的SSL 密码。|\n|60|凭证无法验证|peer 证书无法被已知的CA 证书验证。|\n|61|无法识别的传输编码|无法辨识的传输编码。|\n|62|无效的LDAP URL|无效的LDAP URL。|\n|63|文件超过最大大小|超过最大文件尺寸。|\n|64|FTP失败|要求的FTP 的SSL 水平失败。|\n|65|倒带操作失败|发送此数据需要的回卷(rewind)失败。|\n|66|SSL引擎失败|初始化SSL 引擎失败。|\n|67|服务器拒绝登录|用户名、密码或类似的信息未被接受，cURL 登录失败。|\n|68|未找到文件|在TFTP 服务器上找不到文件。|\n|69|无权限|TFTP 服务器权限有问题。|\n|70|超出服务器磁盘空间|TFTP 服务器磁盘空间不足。|\n|71|非法TFTP操作|非法的TFTP 操作。|\n|72|未知TFTP传输的ID|未知TFTP 传输编号(ID)。|\n|73|文件已经存在|文件已存在(TFTP) 。|\n|74|错误TFTP服务器|无此用户(TFTP) 。|\n|75|字符转换失败|字符转换失败。|\n|76|必须记录回调|\t需要字符转换功能。|\n|77|CA证书权限|读SSL 证书出现问题(路径？访问权限？ ) 。|\n|78|URL中引用资源不存在|URL 中引用的资源不存在。|\n|79|错误发生在SSH会话|\tSSH 会话期间发生一个未知错误。|\n|80|无法关闭SSL连接|未能关闭SSL 连接。|\n|81|服务未准备||\n|82|无法载入CRL文件|\t无法加载CRL 文件，丢失或格式不正确(在7.19.0版中增加) 。|\n|83|发行人检查失败|签发检查失败(在7.19.0版中增加) 。|\n\n\n\n","slug":"CURL状态码列表","published":1,"updated":"2020-12-28T06:06:21.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxew001dsifyggqg6ln7","content":"<p>CURL状态码列表</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">状态原因</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">正常访问</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">错误的协议</td>\n<td style=\"text-align:center\">未支持的协议。此版cURL 不支持这一协议。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">初始化代码失败</td>\n<td style=\"text-align:center\">初始化失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">URL格式不正确</td>\n<td style=\"text-align:center\">URL 格式错误。语法不正确。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">请求协议错误</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">无法解析代理</td>\n<td style=\"text-align:center\">无法解析代理。无法解析给定代理主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">无法解析主机地址</td>\n<td style=\"text-align:center\">无法解析主机。无法解析给定的远程主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">无法连接到主机</td>\n<td style=\"text-align:center\">无法连接到主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">远程服务器不可用</td>\n<td style=\"text-align:center\">FTP 非正常的服务器应答。cURL 无法解析服务器发送的数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">访问资源错误</td>\n<td style=\"text-align:center\">FTP 访问被拒绝。服务器拒绝登入或无法获取您想要的特定资源或目录。最有可能的是您试图进入一个在此服务器上不存在的目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">FTP密码错误</td>\n<td style=\"text-align:center\">FTP 非正常的PASS 回复。cURL 无法解析发送到PASS 请求的应答。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">结果错误</td>\n<td style=\"text-align:center\">FTP 非正常的的PASV 应答，cURL 无法解析发送到PASV 请求的应答。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">FTP回应PASV命令</td>\n<td style=\"text-align:center\">FTP 非正常的227格式。cURL 无法解析服务器发送的227行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">内部故障</td>\n<td style=\"text-align:center\">FTP 无法连接到主机。无法解析在227行中获取的主机IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\">设置传输模式为二进制</td>\n<td style=\"text-align:center\">FTP 无法设定为二进制传输。无法改变传输方式到二进制。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">文件传输短或大于预期</td>\n<td style=\"text-align:center\">部分文件。只有部分文件被传输。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\">RETR命令传输完成</td>\n<td style=\"text-align:center\">FTP 不能下载/访问给定的文件， RETR (或类似)命令失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">命令成功完成</td>\n<td style=\"text-align:center\">FTP quote 错误。quote 命令从服务器返回错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">返回正常</td>\n<td style=\"text-align:center\">HTTP 找不到网页。找不到所请求的URL 或返回另一个HTTP 400或以上错误。此返回代码只出现在使用了-f/–fail 选项以后。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">数据写入失败</td>\n<td style=\"text-align:center\">写入错误。cURL 无法向本地文件系统或类似目的写入数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">无法启动上传</td>\n<td style=\"text-align:center\">FTP 无法STOR 文件。服务器拒绝了用于FTP 上传的STOR 操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">回调错误</td>\n<td style=\"text-align:center\">读错误。各类读取问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">内存分配请求失败</td>\n<td style=\"text-align:center\">内存不足。内存分配请求失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:center\">访问超时</td>\n<td style=\"text-align:center\">操作超时。到达指定的超时期限条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">FTP端口错误</td>\n<td style=\"text-align:center\">FTP PORT 失败。PORT 命令失败。并非所有的FTP 服务器支持PORT 命令，请尝试使用被动(PASV)传输代替！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:center\">FTP错误</td>\n<td style=\"text-align:center\">FTP 无法使用REST 命令。REST 命令失败。此命令用来恢复的FTP 传输。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:center\">不支持请求</td>\n<td style=\"text-align:center\">HTTP range 错误。range &quot;命令&quot;不起作用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">内部发生错误</td>\n<td style=\"text-align:center\">HTTP POST 错误。内部POST 请求产生错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:center\">SSL/TLS握手失败</td>\n<td style=\"text-align:center\">SSL 连接错误。SSL 握手失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:center\">下载无法恢复</td>\n<td style=\"text-align:center\">FTP 续传损坏。不能继续早些时候被中止的下载。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">文件权限错误</td>\n<td style=\"text-align:center\">文件无法读取。无法打开文件。权限问题？</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:center\">LDAP可没有约束力</td>\n<td style=\"text-align:center\">LDAP 无法绑定。LDAP 绑定(bind)操作失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:center\">LDAP搜索失败</td>\n<td style=\"text-align:center\">LDAP 搜索失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:center\">函数没有找到</td>\n<td style=\"text-align:center\">功能无法找到。无法找到必要的LDAP 功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:center\">中止的回调</td>\n<td style=\"text-align:center\">由回调终止。应用程序告知cURL 终止运作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:center\">内部错误</td>\n<td style=\"text-align:center\">内部错误。由一个不正确参数调用了功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">45</td>\n<td style=\"text-align:center\">接口错误</td>\n<td style=\"text-align:center\">接口错误。指定的外发接口无法使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">47</td>\n<td style=\"text-align:center\">过多的重定向</td>\n<td style=\"text-align:center\">过多的重定向。cURL 达到了跟随重定向设定的最大限额跟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">48</td>\n<td style=\"text-align:center\">无法识别选项</td>\n<td style=\"text-align:center\">指定了未知TELNET 选项。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">49</td>\n<td style=\"text-align:center\">TELNET格式错误</td>\n<td style=\"text-align:center\">不合式的telnet 选项。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">51</td>\n<td style=\"text-align:center\">远程服务器的SSL证书</td>\n<td style=\"text-align:center\">peer 的SSL 证书或SSH 的MD5指纹没有确定。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">52</td>\n<td style=\"text-align:center\">服务器无返回内容</td>\n<td style=\"text-align:center\">服务器无任何应答，该情况在此处被认为是一个错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">加密引擎未找到</td>\n<td style=\"text-align:center\">找不到SSL 加密引擎。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">54</td>\n<td style=\"text-align:center\">设定默认SSL加密失败</td>\n<td style=\"text-align:center\">无法将SSL 加密引擎设置为默认。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">无法发送网络数据</td>\n<td style=\"text-align:center\">发送网络数据失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">衰竭接收网络数据</td>\n<td style=\"text-align:center\">在接收网络数据时失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">57</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">58</td>\n<td style=\"text-align:center\">本地客户端证书</td>\n<td style=\"text-align:center\">本地证书有问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">59</td>\n<td style=\"text-align:center\">无法使用密码</td>\n<td style=\"text-align:center\">无法使用指定的SSL 密码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:center\">凭证无法验证</td>\n<td style=\"text-align:center\">peer 证书无法被已知的CA 证书验证。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">61</td>\n<td style=\"text-align:center\">无法识别的传输编码</td>\n<td style=\"text-align:center\">无法辨识的传输编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">62</td>\n<td style=\"text-align:center\">无效的LDAP URL</td>\n<td style=\"text-align:center\">无效的LDAP URL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">63</td>\n<td style=\"text-align:center\">文件超过最大大小</td>\n<td style=\"text-align:center\">超过最大文件尺寸。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">FTP失败</td>\n<td style=\"text-align:center\">要求的FTP 的SSL 水平失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">65</td>\n<td style=\"text-align:center\">倒带操作失败</td>\n<td style=\"text-align:center\">发送此数据需要的回卷(rewind)失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">66</td>\n<td style=\"text-align:center\">SSL引擎失败</td>\n<td style=\"text-align:center\">初始化SSL 引擎失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td style=\"text-align:center\">服务器拒绝登录</td>\n<td style=\"text-align:center\">用户名、密码或类似的信息未被接受，cURL 登录失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">68</td>\n<td style=\"text-align:center\">未找到文件</td>\n<td style=\"text-align:center\">在TFTP 服务器上找不到文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">69</td>\n<td style=\"text-align:center\">无权限</td>\n<td style=\"text-align:center\">TFTP 服务器权限有问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:center\">超出服务器磁盘空间</td>\n<td style=\"text-align:center\">TFTP 服务器磁盘空间不足。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">71</td>\n<td style=\"text-align:center\">非法TFTP操作</td>\n<td style=\"text-align:center\">非法的TFTP 操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">72</td>\n<td style=\"text-align:center\">未知TFTP传输的ID</td>\n<td style=\"text-align:center\">未知TFTP 传输编号(ID)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">73</td>\n<td style=\"text-align:center\">文件已经存在</td>\n<td style=\"text-align:center\">文件已存在(TFTP) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">74</td>\n<td style=\"text-align:center\">错误TFTP服务器</td>\n<td style=\"text-align:center\">无此用户(TFTP) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">75</td>\n<td style=\"text-align:center\">字符转换失败</td>\n<td style=\"text-align:center\">字符转换失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">76</td>\n<td style=\"text-align:center\">必须记录回调</td>\n<td style=\"text-align:center\">需要字符转换功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">77</td>\n<td style=\"text-align:center\">CA证书权限</td>\n<td style=\"text-align:center\">读SSL 证书出现问题(路径？访问权限？ ) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">78</td>\n<td style=\"text-align:center\">URL中引用资源不存在</td>\n<td style=\"text-align:center\">URL 中引用的资源不存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">79</td>\n<td style=\"text-align:center\">错误发生在SSH会话</td>\n<td style=\"text-align:center\">SSH 会话期间发生一个未知错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">无法关闭SSL连接</td>\n<td style=\"text-align:center\">未能关闭SSL 连接。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">81</td>\n<td style=\"text-align:center\">服务未准备</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">无法载入CRL文件</td>\n<td style=\"text-align:center\">无法加载CRL 文件，丢失或格式不正确(在7.19.0版中增加) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">83</td>\n<td style=\"text-align:center\">发行人检查失败</td>\n<td style=\"text-align:center\">签发检查失败(在7.19.0版中增加) 。</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>CURL状态码列表</p>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">状态原因</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">正常访问</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">错误的协议</td>\n<td style=\"text-align:center\">未支持的协议。此版cURL 不支持这一协议。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">初始化代码失败</td>\n<td style=\"text-align:center\">初始化失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">URL格式不正确</td>\n<td style=\"text-align:center\">URL 格式错误。语法不正确。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">请求协议错误</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">无法解析代理</td>\n<td style=\"text-align:center\">无法解析代理。无法解析给定代理主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:center\">无法解析主机地址</td>\n<td style=\"text-align:center\">无法解析主机。无法解析给定的远程主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">无法连接到主机</td>\n<td style=\"text-align:center\">无法连接到主机。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:center\">远程服务器不可用</td>\n<td style=\"text-align:center\">FTP 非正常的服务器应答。cURL 无法解析服务器发送的数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:center\">访问资源错误</td>\n<td style=\"text-align:center\">FTP 访问被拒绝。服务器拒绝登入或无法获取您想要的特定资源或目录。最有可能的是您试图进入一个在此服务器上不存在的目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">FTP密码错误</td>\n<td style=\"text-align:center\">FTP 非正常的PASS 回复。cURL 无法解析发送到PASS 请求的应答。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:center\">结果错误</td>\n<td style=\"text-align:center\">FTP 非正常的的PASV 应答，cURL 无法解析发送到PASV 请求的应答。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:center\">FTP回应PASV命令</td>\n<td style=\"text-align:center\">FTP 非正常的227格式。cURL 无法解析服务器发送的227行。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">内部故障</td>\n<td style=\"text-align:center\">FTP 无法连接到主机。无法解析在227行中获取的主机IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:center\">设置传输模式为二进制</td>\n<td style=\"text-align:center\">FTP 无法设定为二进制传输。无法改变传输方式到二进制。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">文件传输短或大于预期</td>\n<td style=\"text-align:center\">部分文件。只有部分文件被传输。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:center\">RETR命令传输完成</td>\n<td style=\"text-align:center\">FTP 不能下载/访问给定的文件， RETR (或类似)命令失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">命令成功完成</td>\n<td style=\"text-align:center\">FTP quote 错误。quote 命令从服务器返回错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:center\">返回正常</td>\n<td style=\"text-align:center\">HTTP 找不到网页。找不到所请求的URL 或返回另一个HTTP 400或以上错误。此返回代码只出现在使用了-f/–fail 选项以后。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:center\">数据写入失败</td>\n<td style=\"text-align:center\">写入错误。cURL 无法向本地文件系统或类似目的写入数据。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:center\">无法启动上传</td>\n<td style=\"text-align:center\">FTP 无法STOR 文件。服务器拒绝了用于FTP 上传的STOR 操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:center\">回调错误</td>\n<td style=\"text-align:center\">读错误。各类读取问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:center\">内存分配请求失败</td>\n<td style=\"text-align:center\">内存不足。内存分配请求失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:center\">访问超时</td>\n<td style=\"text-align:center\">操作超时。到达指定的超时期限条件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:center\">FTP端口错误</td>\n<td style=\"text-align:center\">FTP PORT 失败。PORT 命令失败。并非所有的FTP 服务器支持PORT 命令，请尝试使用被动(PASV)传输代替！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:center\">FTP错误</td>\n<td style=\"text-align:center\">FTP 无法使用REST 命令。REST 命令失败。此命令用来恢复的FTP 传输。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:center\">不支持请求</td>\n<td style=\"text-align:center\">HTTP range 错误。range &quot;命令&quot;不起作用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:center\">内部发生错误</td>\n<td style=\"text-align:center\">HTTP POST 错误。内部POST 请求产生错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:center\">SSL/TLS握手失败</td>\n<td style=\"text-align:center\">SSL 连接错误。SSL 握手失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:center\">下载无法恢复</td>\n<td style=\"text-align:center\">FTP 续传损坏。不能继续早些时候被中止的下载。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:center\">文件权限错误</td>\n<td style=\"text-align:center\">文件无法读取。无法打开文件。权限问题？</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:center\">LDAP可没有约束力</td>\n<td style=\"text-align:center\">LDAP 无法绑定。LDAP 绑定(bind)操作失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:center\">LDAP搜索失败</td>\n<td style=\"text-align:center\">LDAP 搜索失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:center\">函数没有找到</td>\n<td style=\"text-align:center\">功能无法找到。无法找到必要的LDAP 功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:center\">中止的回调</td>\n<td style=\"text-align:center\">由回调终止。应用程序告知cURL 终止运作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:center\">内部错误</td>\n<td style=\"text-align:center\">内部错误。由一个不正确参数调用了功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">45</td>\n<td style=\"text-align:center\">接口错误</td>\n<td style=\"text-align:center\">接口错误。指定的外发接口无法使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">47</td>\n<td style=\"text-align:center\">过多的重定向</td>\n<td style=\"text-align:center\">过多的重定向。cURL 达到了跟随重定向设定的最大限额跟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">48</td>\n<td style=\"text-align:center\">无法识别选项</td>\n<td style=\"text-align:center\">指定了未知TELNET 选项。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">49</td>\n<td style=\"text-align:center\">TELNET格式错误</td>\n<td style=\"text-align:center\">不合式的telnet 选项。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">51</td>\n<td style=\"text-align:center\">远程服务器的SSL证书</td>\n<td style=\"text-align:center\">peer 的SSL 证书或SSH 的MD5指纹没有确定。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">52</td>\n<td style=\"text-align:center\">服务器无返回内容</td>\n<td style=\"text-align:center\">服务器无任何应答，该情况在此处被认为是一个错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">53</td>\n<td style=\"text-align:center\">加密引擎未找到</td>\n<td style=\"text-align:center\">找不到SSL 加密引擎。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">54</td>\n<td style=\"text-align:center\">设定默认SSL加密失败</td>\n<td style=\"text-align:center\">无法将SSL 加密引擎设置为默认。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">55</td>\n<td style=\"text-align:center\">无法发送网络数据</td>\n<td style=\"text-align:center\">发送网络数据失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">56</td>\n<td style=\"text-align:center\">衰竭接收网络数据</td>\n<td style=\"text-align:center\">在接收网络数据时失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">57</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">58</td>\n<td style=\"text-align:center\">本地客户端证书</td>\n<td style=\"text-align:center\">本地证书有问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">59</td>\n<td style=\"text-align:center\">无法使用密码</td>\n<td style=\"text-align:center\">无法使用指定的SSL 密码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">60</td>\n<td style=\"text-align:center\">凭证无法验证</td>\n<td style=\"text-align:center\">peer 证书无法被已知的CA 证书验证。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">61</td>\n<td style=\"text-align:center\">无法识别的传输编码</td>\n<td style=\"text-align:center\">无法辨识的传输编码。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">62</td>\n<td style=\"text-align:center\">无效的LDAP URL</td>\n<td style=\"text-align:center\">无效的LDAP URL。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">63</td>\n<td style=\"text-align:center\">文件超过最大大小</td>\n<td style=\"text-align:center\">超过最大文件尺寸。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">64</td>\n<td style=\"text-align:center\">FTP失败</td>\n<td style=\"text-align:center\">要求的FTP 的SSL 水平失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">65</td>\n<td style=\"text-align:center\">倒带操作失败</td>\n<td style=\"text-align:center\">发送此数据需要的回卷(rewind)失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">66</td>\n<td style=\"text-align:center\">SSL引擎失败</td>\n<td style=\"text-align:center\">初始化SSL 引擎失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">67</td>\n<td style=\"text-align:center\">服务器拒绝登录</td>\n<td style=\"text-align:center\">用户名、密码或类似的信息未被接受，cURL 登录失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">68</td>\n<td style=\"text-align:center\">未找到文件</td>\n<td style=\"text-align:center\">在TFTP 服务器上找不到文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">69</td>\n<td style=\"text-align:center\">无权限</td>\n<td style=\"text-align:center\">TFTP 服务器权限有问题。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">70</td>\n<td style=\"text-align:center\">超出服务器磁盘空间</td>\n<td style=\"text-align:center\">TFTP 服务器磁盘空间不足。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">71</td>\n<td style=\"text-align:center\">非法TFTP操作</td>\n<td style=\"text-align:center\">非法的TFTP 操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">72</td>\n<td style=\"text-align:center\">未知TFTP传输的ID</td>\n<td style=\"text-align:center\">未知TFTP 传输编号(ID)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">73</td>\n<td style=\"text-align:center\">文件已经存在</td>\n<td style=\"text-align:center\">文件已存在(TFTP) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">74</td>\n<td style=\"text-align:center\">错误TFTP服务器</td>\n<td style=\"text-align:center\">无此用户(TFTP) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">75</td>\n<td style=\"text-align:center\">字符转换失败</td>\n<td style=\"text-align:center\">字符转换失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">76</td>\n<td style=\"text-align:center\">必须记录回调</td>\n<td style=\"text-align:center\">需要字符转换功能。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">77</td>\n<td style=\"text-align:center\">CA证书权限</td>\n<td style=\"text-align:center\">读SSL 证书出现问题(路径？访问权限？ ) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">78</td>\n<td style=\"text-align:center\">URL中引用资源不存在</td>\n<td style=\"text-align:center\">URL 中引用的资源不存在。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">79</td>\n<td style=\"text-align:center\">错误发生在SSH会话</td>\n<td style=\"text-align:center\">SSH 会话期间发生一个未知错误。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">无法关闭SSL连接</td>\n<td style=\"text-align:center\">未能关闭SSL 连接。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">81</td>\n<td style=\"text-align:center\">服务未准备</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">82</td>\n<td style=\"text-align:center\">无法载入CRL文件</td>\n<td style=\"text-align:center\">无法加载CRL 文件，丢失或格式不正确(在7.19.0版中增加) 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">83</td>\n<td style=\"text-align:center\">发行人检查失败</td>\n<td style=\"text-align:center\">签发检查失败(在7.19.0版中增加) 。</td>\n</tr>\n</tbody>\n</table>"},{"title":"C语言-单向链表","date":"2019-02-21T07:10:22.000Z","_content":"\n### 单向链表：\n\n单向链表的组成包括一个链表头(head)和若干链表元素(node),对链表的基本操作其实就是增、删、改、查。 首先说说单向链表的C语言实现方法\n\n<!-- more -->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct list\n{\n\tint data; // 数据域\n\tstruct list *next;//指针域\n};\n\nstruct list *create_list() // 建立一个节点\n{\n\treturn calloc(sizeof(struct list), 1);// 在堆中创建一个节点\n}\n\n\nvoid traverse(struct list *ls) // 循环遍历链表\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tprintf(\"%d\\n\", p->data);\n\t\tp = p->next; // p指向他对应的下一个节点\n\t}\n\n}\n\nstruct list *insert_list(struct list *ls, int n, int data) // 在指定位置插入元素\n{\n\tstruct list *p = ls;\n\twhile(p && n--)\n\t{\n\t\tp = p->next;\n\t}\n\tif(p == NULL)\n\t{\n\t\treturn NULL; // n的位置大于链表节点数\n\t}\n\n\tstruct list *node = create_list();//建立新的节点\n\tnode->data = data;\n\tnode->next = p->next;\n\tp->next = node;\n\treturn node;\n}\n\nint delete_list(struct list *ls, int n) // 删除指定位置元素\n{\n\tstruct list * p = ls;\n\tstruct list *pre = p;\n\twhile(p && n--)\n\t{\n\t\tpre = p;\n\t\tp= p->next;\n\t}\n\tif(p == NULL)\n\t{\n\t\treturn -1; //n的位置不合适\n\t}\n\t\n\tpre->next = p->next;\n\n\tfree(p);\n\treturn 1;\n}\n\nint count_list(struct list *ls)// 返回链表元素个数\n{\n\tstruct list *p = ls;\n\tint count = 0;\n\twhile(p)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\treturn count;\n}\n\nvoid clear_list(struct list *ls) // 清空链表，只保留首节点\n{\n\tstruct list *p = ls->next;\n\twhile(p)\n\t{\n\t\tstruct list *tmp = p;\n\t\tp = p->next;\n\t\tfree(tmp);\n\t}\n\tls->next = NULL;\n}\n\nint empty_list(struct list *ls)// 返回链表是否为空\n{\n\tif(ls->next)\n\t{\n\t\treturn 0;\n\t}else{\n\t\treturn -1;\n\t}\n\n}\n\nstruct list *locale_list(struct list *ls, int n)// 返回链表指定位置节点\n{\n\tstruct list *p = ls;\n\twhile(p && n--)\n\t{\n\t\tp = p->next;\n\t}\n\tif (p == NULL)\n\t\treturn NULL;\n\treturn p;\n}\n\nstruct list *elem_locale(struct list *ls, int data) // 返回数据域等于data的节点\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tif(p->data == data)\n\t\t\treturn p;\n\n\t\tp = p->next;\n\t}\n\treturn NULL;\n}\n\n\nint elem_pos(struct list *ls, int data) //返回数据域等于data的节点位置\n{\n\tstruct list *p = ls;\n\tint index = 0;\n\twhile(p)\n\t{\n\t\tindex++;\n\t\tif(p->data == data)\n\t\t\treturn index;\n\t\tp = p->next;\n\t}\n\treturn -1;\n}\n\nstruct list *last_list(struct list *ls) //得到链表最后一个节点\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tif(p->next == NULL)\n\t\t\treturn p;\n\t\tp = p->next;\n\t}\n\treturn NULL;\n}\n\nvoid merge_list(struct list *ls1, struct list *ls2)//合并两个链表，结果放入ls1中\n{\n\t// 只合并链表的节点，不合并链表头\n\tlast_list(ls1)->next = ls2->next;\n\tfree(ls2);\n}\n\nvoid reverse(struct list *ls) // 链表的逆置\n{\n\tif(ls->next == NULL) \n\t\treturn; // 只有一个首节点，不需要逆置\n\tif(ls->next->next == NULL)\n\t\treturn; // 只有两个节点，也不需要逆置\n\n\tstruct list * last = ls->next; //逆置后ls->next\n\n\tstruct list * pre = ls; // 上一个节点的指针\n\tstruct list * cur = ls->next; // 当前节点的指针\n\tstruct list * next = NULL; // 下一个节点的指针\n\twhile(cur)\n\t{\n\t\tnext = cur->next;\n\t\tcur->next = pre;\n\t\tpre = cur;\n\t\tcur = next;\n\t}\n\tls->next = pre;\n\tlast->next = NULL;\n}\n\n\nint main(){\n\n\tstruct list *first = create_list(); \n\tstruct list *second = create_list();\n\tstruct list *third = create_list();\n\n\tfirst->next = second;\n\tsecond->next = third;\n\tthird->next = NULL;\n\tfirst->data = 1;\n\tsecond->data = 2;\n\tthird->data = 3;\n\n\ttraverse(first);\n\tinsert_list(first, 1, 10);\n\n\ttraverse(first);\n\n\tprintf(\"count = %d\\n\", count_list(first));\n\n\tdelete_list(first, 1);\n\n\ttraverse(first);\n\n\t// clear_list(first);\n\n\tprintf(\"count = %d\\n\", count_list(first));\n\n\tprintf(\"locale_list(%d)->data = %d\\n\", 2,  locale_list(first, 2)->data);\n\n\tprintf(\"last_list->data = %d\\n\", last_list(first)->data);\n\n\tprintf(\"---------------------------\\n\");\n\t\n\tstruct list *first1 = create_list();\n\tint i;\n\tfor(i = 0; i < 10; i++)\n\t{\n\t\tinsert_list(first1, 0, i);\n\t}\n\ttraverse(first1);\n\tprintf(\"---------------------------\\n\");\n\t// merge_list(first, first1);\n\ttraverse(first);\n\treverse(first);\n\tprintf(\"---------------逆置------------\\n\");\n\ttraverse(first);\n\n\n\n\treturn 0;\n}\n\n```","source":"_posts/C语言-单向链表.md","raw":"---\ntitle: C语言-单向链表\ndate: 2019-02-21 15:10:22\ntags: [c, 单向链表]\ncategories: c\n---\n\n### 单向链表：\n\n单向链表的组成包括一个链表头(head)和若干链表元素(node),对链表的基本操作其实就是增、删、改、查。 首先说说单向链表的C语言实现方法\n\n<!-- more -->\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct list\n{\n\tint data; // 数据域\n\tstruct list *next;//指针域\n};\n\nstruct list *create_list() // 建立一个节点\n{\n\treturn calloc(sizeof(struct list), 1);// 在堆中创建一个节点\n}\n\n\nvoid traverse(struct list *ls) // 循环遍历链表\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tprintf(\"%d\\n\", p->data);\n\t\tp = p->next; // p指向他对应的下一个节点\n\t}\n\n}\n\nstruct list *insert_list(struct list *ls, int n, int data) // 在指定位置插入元素\n{\n\tstruct list *p = ls;\n\twhile(p && n--)\n\t{\n\t\tp = p->next;\n\t}\n\tif(p == NULL)\n\t{\n\t\treturn NULL; // n的位置大于链表节点数\n\t}\n\n\tstruct list *node = create_list();//建立新的节点\n\tnode->data = data;\n\tnode->next = p->next;\n\tp->next = node;\n\treturn node;\n}\n\nint delete_list(struct list *ls, int n) // 删除指定位置元素\n{\n\tstruct list * p = ls;\n\tstruct list *pre = p;\n\twhile(p && n--)\n\t{\n\t\tpre = p;\n\t\tp= p->next;\n\t}\n\tif(p == NULL)\n\t{\n\t\treturn -1; //n的位置不合适\n\t}\n\t\n\tpre->next = p->next;\n\n\tfree(p);\n\treturn 1;\n}\n\nint count_list(struct list *ls)// 返回链表元素个数\n{\n\tstruct list *p = ls;\n\tint count = 0;\n\twhile(p)\n\t{\n\t\tcount++;\n\t\tp = p->next;\n\t}\n\treturn count;\n}\n\nvoid clear_list(struct list *ls) // 清空链表，只保留首节点\n{\n\tstruct list *p = ls->next;\n\twhile(p)\n\t{\n\t\tstruct list *tmp = p;\n\t\tp = p->next;\n\t\tfree(tmp);\n\t}\n\tls->next = NULL;\n}\n\nint empty_list(struct list *ls)// 返回链表是否为空\n{\n\tif(ls->next)\n\t{\n\t\treturn 0;\n\t}else{\n\t\treturn -1;\n\t}\n\n}\n\nstruct list *locale_list(struct list *ls, int n)// 返回链表指定位置节点\n{\n\tstruct list *p = ls;\n\twhile(p && n--)\n\t{\n\t\tp = p->next;\n\t}\n\tif (p == NULL)\n\t\treturn NULL;\n\treturn p;\n}\n\nstruct list *elem_locale(struct list *ls, int data) // 返回数据域等于data的节点\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tif(p->data == data)\n\t\t\treturn p;\n\n\t\tp = p->next;\n\t}\n\treturn NULL;\n}\n\n\nint elem_pos(struct list *ls, int data) //返回数据域等于data的节点位置\n{\n\tstruct list *p = ls;\n\tint index = 0;\n\twhile(p)\n\t{\n\t\tindex++;\n\t\tif(p->data == data)\n\t\t\treturn index;\n\t\tp = p->next;\n\t}\n\treturn -1;\n}\n\nstruct list *last_list(struct list *ls) //得到链表最后一个节点\n{\n\tstruct list *p = ls;\n\twhile(p)\n\t{\n\t\tif(p->next == NULL)\n\t\t\treturn p;\n\t\tp = p->next;\n\t}\n\treturn NULL;\n}\n\nvoid merge_list(struct list *ls1, struct list *ls2)//合并两个链表，结果放入ls1中\n{\n\t// 只合并链表的节点，不合并链表头\n\tlast_list(ls1)->next = ls2->next;\n\tfree(ls2);\n}\n\nvoid reverse(struct list *ls) // 链表的逆置\n{\n\tif(ls->next == NULL) \n\t\treturn; // 只有一个首节点，不需要逆置\n\tif(ls->next->next == NULL)\n\t\treturn; // 只有两个节点，也不需要逆置\n\n\tstruct list * last = ls->next; //逆置后ls->next\n\n\tstruct list * pre = ls; // 上一个节点的指针\n\tstruct list * cur = ls->next; // 当前节点的指针\n\tstruct list * next = NULL; // 下一个节点的指针\n\twhile(cur)\n\t{\n\t\tnext = cur->next;\n\t\tcur->next = pre;\n\t\tpre = cur;\n\t\tcur = next;\n\t}\n\tls->next = pre;\n\tlast->next = NULL;\n}\n\n\nint main(){\n\n\tstruct list *first = create_list(); \n\tstruct list *second = create_list();\n\tstruct list *third = create_list();\n\n\tfirst->next = second;\n\tsecond->next = third;\n\tthird->next = NULL;\n\tfirst->data = 1;\n\tsecond->data = 2;\n\tthird->data = 3;\n\n\ttraverse(first);\n\tinsert_list(first, 1, 10);\n\n\ttraverse(first);\n\n\tprintf(\"count = %d\\n\", count_list(first));\n\n\tdelete_list(first, 1);\n\n\ttraverse(first);\n\n\t// clear_list(first);\n\n\tprintf(\"count = %d\\n\", count_list(first));\n\n\tprintf(\"locale_list(%d)->data = %d\\n\", 2,  locale_list(first, 2)->data);\n\n\tprintf(\"last_list->data = %d\\n\", last_list(first)->data);\n\n\tprintf(\"---------------------------\\n\");\n\t\n\tstruct list *first1 = create_list();\n\tint i;\n\tfor(i = 0; i < 10; i++)\n\t{\n\t\tinsert_list(first1, 0, i);\n\t}\n\ttraverse(first1);\n\tprintf(\"---------------------------\\n\");\n\t// merge_list(first, first1);\n\ttraverse(first);\n\treverse(first);\n\tprintf(\"---------------逆置------------\\n\");\n\ttraverse(first);\n\n\n\n\treturn 0;\n}\n\n```","slug":"C语言-单向链表","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxex001gsifygas47y7c","content":"<h3 id=\"单向链表\"><a class=\"markdownIt-Anchor\" href=\"#单向链表\"></a> 单向链表：</h3>\n<p>单向链表的组成包括一个链表头(head)和若干链表元素(node),对链表的基本操作其实就是增、删、改、查。 首先说说单向链表的C语言实现方法</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data; <span class=\"comment\">// 数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">create_list</span><span class=\"params\">()</span> <span class=\"comment\">// 建立一个节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">calloc</span>(<span class=\"keyword\">sizeof</span>(struct <span class=\"built_in\">list</span>), <span class=\"number\">1</span>);<span class=\"comment\">// 在堆中创建一个节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 循环遍历链表</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p-&gt;data);</span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// p指向他对应的下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">insert_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">// 在指定位置插入元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// n的位置大于链表节点数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">node</span> = <span class=\"title\">create_list</span>();</span><span class=\"comment\">//建立新的节点</span></span><br><span class=\"line\">\tnode-&gt;data = data;</span><br><span class=\"line\">\tnode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">delete_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 删除指定位置元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">pre</span> = <span class=\"title\">p</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp= p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">//n的位置不合适</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpre-&gt;next = p-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span><span class=\"comment\">// 返回链表元素个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 清空链表，只保留首节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">tmp</span> = <span class=\"title\">p</span>;</span></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tls-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">empty_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span><span class=\"comment\">// 返回链表是否为空</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">locale_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n)</span><span class=\"comment\">// 返回链表指定位置节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">elem_locale</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">// 返回数据域等于data的节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;data == data)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">elem_pos</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">//返回数据域等于data的节点位置</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;data == data)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">last_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">//得到链表最后一个节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls1, struct <span class=\"built_in\">list</span> *ls2)</span><span class=\"comment\">//合并两个链表，结果放入ls1中</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 只合并链表的节点，不合并链表头</span></span><br><span class=\"line\">\tlast_list(ls1)-&gt;next = ls2-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(ls2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 链表的逆置</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next == <span class=\"literal\">NULL</span>) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 只有一个首节点，不需要逆置</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 只有两个节点，也不需要逆置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">last</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span> <span class=\"comment\">//逆置后ls-&gt;next</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">pre</span> = <span class=\"title\">ls</span>;</span> <span class=\"comment\">// 上一个节点的指针</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">cur</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span> <span class=\"comment\">// 当前节点的指针</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">next</span> = <span class=\"title\">NULL</span>;</span> <span class=\"comment\">// 下一个节点的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext = cur-&gt;next;</span><br><span class=\"line\">\t\tcur-&gt;next = pre;</span><br><span class=\"line\">\t\tpre = cur;</span><br><span class=\"line\">\t\tcur = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tls-&gt;next = pre;</span><br><span class=\"line\">\tlast-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">first</span> = <span class=\"title\">create_list</span>();</span> </span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">second</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">third</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfirst-&gt;next = second;</span><br><span class=\"line\">\tsecond-&gt;next = third;</span><br><span class=\"line\">\tthird-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tfirst-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsecond-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tthird-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\">\tinsert_list(first, <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"count = %d\\n\"</span>, count_list(first));</span><br><span class=\"line\"></span><br><span class=\"line\">\tdelete_list(first, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// clear_list(first);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"count = %d\\n\"</span>, count_list(first));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"locale_list(%d)-&gt;data = %d\\n\"</span>, <span class=\"number\">2</span>,  locale_list(first, <span class=\"number\">2</span>)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"last_list-&gt;data = %d\\n\"</span>, last_list(first)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------------------\\n\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">first1</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tinsert_list(first1, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttraverse(first1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------------------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// merge_list(first, first1);</span></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\">\treverse(first);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------逆置------------\\n\"</span>);</span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"单向链表\"><a class=\"markdownIt-Anchor\" href=\"#单向链表\"></a> 单向链表：</h3>\n<p>单向链表的组成包括一个链表头(head)和若干链表元素(node),对链表的基本操作其实就是增、删、改、查。 首先说说单向链表的C语言实现方法</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> data; <span class=\"comment\">// 数据域</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">next</span>;</span><span class=\"comment\">//指针域</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">create_list</span><span class=\"params\">()</span> <span class=\"comment\">// 建立一个节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">calloc</span>(<span class=\"keyword\">sizeof</span>(struct <span class=\"built_in\">list</span>), <span class=\"number\">1</span>);<span class=\"comment\">// 在堆中创建一个节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 循环遍历链表</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, p-&gt;data);</span><br><span class=\"line\">\t\tp = p-&gt;next; <span class=\"comment\">// p指向他对应的下一个节点</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">insert_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">// 在指定位置插入元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>; <span class=\"comment\">// n的位置大于链表节点数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">node</span> = <span class=\"title\">create_list</span>();</span><span class=\"comment\">//建立新的节点</span></span><br><span class=\"line\">\tnode-&gt;data = data;</span><br><span class=\"line\">\tnode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\tp-&gt;next = node;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">delete_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n)</span> <span class=\"comment\">// 删除指定位置元素</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">pre</span> = <span class=\"title\">p</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpre = p;</span><br><span class=\"line\">\t\tp= p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">//n的位置不合适</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpre-&gt;next = p-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">count_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span><span class=\"comment\">// 返回链表元素个数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 清空链表，只保留首节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">tmp</span> = <span class=\"title\">p</span>;</span></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tls-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">empty_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span><span class=\"comment\">// 返回链表是否为空</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">locale_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> n)</span><span class=\"comment\">// 返回链表指定位置节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p &amp;&amp; n--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">elem_locale</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">// 返回数据域等于data的节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;data == data)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">elem_pos</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls, <span class=\"keyword\">int</span> data)</span> <span class=\"comment\">//返回数据域等于data的节点位置</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;data == data)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> index;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">struct <span class=\"built_in\">list</span> *<span class=\"title\">last_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">//得到链表最后一个节点</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">p</span> = <span class=\"title\">ls</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">\t\tp = p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_list</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls1, struct <span class=\"built_in\">list</span> *ls2)</span><span class=\"comment\">//合并两个链表，结果放入ls1中</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 只合并链表的节点，不合并链表头</span></span><br><span class=\"line\">\tlast_list(ls1)-&gt;next = ls2-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(ls2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(struct <span class=\"built_in\">list</span> *ls)</span> <span class=\"comment\">// 链表的逆置</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next == <span class=\"literal\">NULL</span>) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 只有一个首节点，不需要逆置</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ls-&gt;next-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; <span class=\"comment\">// 只有两个节点，也不需要逆置</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">last</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span> <span class=\"comment\">//逆置后ls-&gt;next</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">pre</span> = <span class=\"title\">ls</span>;</span> <span class=\"comment\">// 上一个节点的指针</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">cur</span> = <span class=\"title\">ls</span>-&gt;<span class=\"title\">next</span>;</span> <span class=\"comment\">// 当前节点的指针</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> * <span class=\"title\">next</span> = <span class=\"title\">NULL</span>;</span> <span class=\"comment\">// 下一个节点的指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(cur)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tnext = cur-&gt;next;</span><br><span class=\"line\">\t\tcur-&gt;next = pre;</span><br><span class=\"line\">\t\tpre = cur;</span><br><span class=\"line\">\t\tcur = next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tls-&gt;next = pre;</span><br><span class=\"line\">\tlast-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">first</span> = <span class=\"title\">create_list</span>();</span> </span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">second</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">third</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfirst-&gt;next = second;</span><br><span class=\"line\">\tsecond-&gt;next = third;</span><br><span class=\"line\">\tthird-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tfirst-&gt;data = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tsecond-&gt;data = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tthird-&gt;data = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\">\tinsert_list(first, <span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"count = %d\\n\"</span>, count_list(first));</span><br><span class=\"line\"></span><br><span class=\"line\">\tdelete_list(first, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// clear_list(first);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"count = %d\\n\"</span>, count_list(first));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"locale_list(%d)-&gt;data = %d\\n\"</span>, <span class=\"number\">2</span>,  locale_list(first, <span class=\"number\">2</span>)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"last_list-&gt;data = %d\\n\"</span>, last_list(first)-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------------------\\n\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list</span> *<span class=\"title\">first1</span> = <span class=\"title\">create_list</span>();</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tinsert_list(first1, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttraverse(first1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------------------\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// merge_list(first, first1);</span></span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\">\treverse(first);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"---------------逆置------------\\n\"</span>);</span><br><span class=\"line\">\ttraverse(first);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Git命令生成Patch和打补丁","date":"2019-07-26T11:34:29.000Z","_content":"\n推荐大家使用git的format-patch和am命令进行生成patch和打patch，用此方法获得的patch其实就是commit里提交的code修改以及commit信息。有如下好处：\n\n1. 对于git这种以project为单位的修改，尤其是涉及到多个文件夹下的多个文件的改动时，非常方便，能够记录所有的改动（添加，修改，删除文件等）\n\n2. 可以保存commit信息。\n\n3. 能够灵活的获取patch。可以获取任意两个commit之间的patch集。\n\n<!-- more -->\n\n使用方法（直接给一些examples）：\n\n### git format-patch\n\n$ git format-patch HEAD^ 　　　　　　　　　　　　　   #生成最近的1次commit的patch\n\n$ git format-patch HEAD^^　　　　　　　　　　　　　  #生成最近的2次commit的patch\n\n$ git format-patch HEAD^^^ 　　　　　　　　　　　　　#生成最近的3次commit的patch\n\n$ git format-patch HEAD^^^^ 　　　　　　　　　　　      #生成最近的4次commit的patch\n\n$ git format-patch <r1>..<r2>            #生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>都是具体的commit号)\n\n$ git format-patch -1 <r1>               #生成单个commit的patch\n\n$ git format-patch <r1>               #生成某commit以来的修改patch（不包含该commit）\n\n$ git format-patch --root <r1>　　　　　　　　　　　　   #生成从根到r1提交的所有patch\n \n### git am\n\n$ git apply --stat 0001-limit-log-function.patch   　　　　  # 查看patch的情况\n\n$ git apply --check 0001-limit-log-function.patch   　　　  # 检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上\n\n(注：git apply是另外一种打patch的命令，其与git am的区别是，git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人)\n\n$ git am 0001-limit-log-function.patch                                # 将名字为0001-limit-log-function.patch的patch打上\n\n$ git am --signoff 0001-limit-log-function.patch                  # 添加-s或者--signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者\n\n$ git am ~/patch-set/\\*.patch　　　　　　　　　　　　　# 将路径~/patch-set/*.patch 按照先后顺序打上\n\n$ git am --abort                                                                   # \n\n当git am失败时，用以将已经在am过程中打上的patch废弃掉(比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态)\n\n$ git am --resolved                   #当git am失败，解决完冲突后，这条命令会接着打patch\n \n\n如果打Patch的过程中发生了冲突（conflicts），怎么办？\n\n解决patch冲突的过程是：\n\n如果不想打这一系列patch了，直接：git am --abort。\n\n如果还想打, 有两种解决方案：\n\n方案一（个人推荐）：\n\n(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject <patch_name>，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch\n\n(2) 根据.rej文件，通过编辑该patch文件的方式解决冲突。\n\n(3) 废弃上一条am命令已经打了的patch：git am --abort\n\n(4) 重新打patch：git am ~/patch-set/*.patchpatch\n\n方案二：\n\n(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject <patch_name>，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch\n\n(2) 根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。\n\n(3) 将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令git add <file_name>添加到工作区中\n\n(4) 告诉git冲突已经解决，继续打patch: git am --resolved (git am --resolved 和 git am --continue是一样的)\n \n分析：方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二十通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。\n","source":"_posts/Git命令生成Patch和打补丁.md","raw":"---\ntitle: Git命令生成Patch和打补丁\ndate: 2019-07-26 19:34:29\ntags: [git, linux]\ncategories: git\n---\n\n推荐大家使用git的format-patch和am命令进行生成patch和打patch，用此方法获得的patch其实就是commit里提交的code修改以及commit信息。有如下好处：\n\n1. 对于git这种以project为单位的修改，尤其是涉及到多个文件夹下的多个文件的改动时，非常方便，能够记录所有的改动（添加，修改，删除文件等）\n\n2. 可以保存commit信息。\n\n3. 能够灵活的获取patch。可以获取任意两个commit之间的patch集。\n\n<!-- more -->\n\n使用方法（直接给一些examples）：\n\n### git format-patch\n\n$ git format-patch HEAD^ 　　　　　　　　　　　　　   #生成最近的1次commit的patch\n\n$ git format-patch HEAD^^　　　　　　　　　　　　　  #生成最近的2次commit的patch\n\n$ git format-patch HEAD^^^ 　　　　　　　　　　　　　#生成最近的3次commit的patch\n\n$ git format-patch HEAD^^^^ 　　　　　　　　　　　      #生成最近的4次commit的patch\n\n$ git format-patch <r1>..<r2>            #生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>都是具体的commit号)\n\n$ git format-patch -1 <r1>               #生成单个commit的patch\n\n$ git format-patch <r1>               #生成某commit以来的修改patch（不包含该commit）\n\n$ git format-patch --root <r1>　　　　　　　　　　　　   #生成从根到r1提交的所有patch\n \n### git am\n\n$ git apply --stat 0001-limit-log-function.patch   　　　　  # 查看patch的情况\n\n$ git apply --check 0001-limit-log-function.patch   　　　  # 检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上\n\n(注：git apply是另外一种打patch的命令，其与git am的区别是，git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人)\n\n$ git am 0001-limit-log-function.patch                                # 将名字为0001-limit-log-function.patch的patch打上\n\n$ git am --signoff 0001-limit-log-function.patch                  # 添加-s或者--signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者\n\n$ git am ~/patch-set/\\*.patch　　　　　　　　　　　　　# 将路径~/patch-set/*.patch 按照先后顺序打上\n\n$ git am --abort                                                                   # \n\n当git am失败时，用以将已经在am过程中打上的patch废弃掉(比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态)\n\n$ git am --resolved                   #当git am失败，解决完冲突后，这条命令会接着打patch\n \n\n如果打Patch的过程中发生了冲突（conflicts），怎么办？\n\n解决patch冲突的过程是：\n\n如果不想打这一系列patch了，直接：git am --abort。\n\n如果还想打, 有两种解决方案：\n\n方案一（个人推荐）：\n\n(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject <patch_name>，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch\n\n(2) 根据.rej文件，通过编辑该patch文件的方式解决冲突。\n\n(3) 废弃上一条am命令已经打了的patch：git am --abort\n\n(4) 重新打patch：git am ~/patch-set/*.patchpatch\n\n方案二：\n\n(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject <patch_name>，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch\n\n(2) 根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。\n\n(3) 将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令git add <file_name>添加到工作区中\n\n(4) 告诉git冲突已经解决，继续打patch: git am --resolved (git am --resolved 和 git am --continue是一样的)\n \n分析：方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二十通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。\n","slug":"Git命令生成Patch和打补丁","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxex001lsifyk9opad4r","content":"<p>推荐大家使用git的format-patch和am命令进行生成patch和打patch，用此方法获得的patch其实就是commit里提交的code修改以及commit信息。有如下好处：</p>\n<ol>\n<li>\n<p>对于git这种以project为单位的修改，尤其是涉及到多个文件夹下的多个文件的改动时，非常方便，能够记录所有的改动（添加，修改，删除文件等）</p>\n</li>\n<li>\n<p>可以保存commit信息。</p>\n</li>\n<li>\n<p>能够灵活的获取patch。可以获取任意两个commit之间的patch集。</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p>使用方法（直接给一些examples）：</p>\n<h3 id=\"git-format-patch\"><a class=\"markdownIt-Anchor\" href=\"#git-format-patch\"></a> git format-patch</h3>\n<p>$ git format-patch HEAD^ 　　　　　　　　　　　　　   #生成最近的1次commit的patch</p>\n<p>$ git format-patch HEAD^^　　　　　　　　　　　　　  #生成最近的2次commit的patch</p>\n<p>$ git format-patch HEAD^^^ 　　　　　　　　　　　　　#生成最近的3次commit的patch</p>\n<p>$ git format-patch HEAD^^^^ 　　　　　　　　　　　      #生成最近的4次commit的patch</p>\n<p>$ git format-patch <r1>…<r2>            #生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>都是具体的commit号)</r2></r1></r2></r1></p>\n<p>$ git format-patch -1 <r1>               #生成单个commit的patch</r1></p>\n<p>$ git format-patch <r1>               #生成某commit以来的修改patch（不包含该commit）</r1></p>\n<p>$ git format-patch --root <r1>　　　　　　　　　　　　   #生成从根到r1提交的所有patch</r1></p>\n<h3 id=\"git-am\"><a class=\"markdownIt-Anchor\" href=\"#git-am\"></a> git am</h3>\n<p>$ git apply --stat 0001-limit-log-function.patch   　　　　  # 查看patch的情况</p>\n<p>$ git apply --check 0001-limit-log-function.patch   　　　  # 检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上</p>\n<p>(注：git apply是另外一种打patch的命令，其与git am的区别是，git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人)</p>\n<p>$ git am 0001-limit-log-function.patch                                # 将名字为0001-limit-log-function.patch的patch打上</p>\n<p>$ git am --signoff 0001-limit-log-function.patch                  # 添加-s或者–signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者</p>\n<p>$ git am ~/patch-set/*.patch　　　　　　　　　　　　　# 将路径~/patch-set/*.patch 按照先后顺序打上</p>\n<p>$ git am --abort                                                                   #</p>\n<p>当git am失败时，用以将已经在am过程中打上的patch废弃掉(比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态)</p>\n<p>$ git am --resolved                   #当git am失败，解决完冲突后，这条命令会接着打patch</p>\n<p>如果打Patch的过程中发生了冲突（conflicts），怎么办？</p>\n<p>解决patch冲突的过程是：</p>\n<p>如果不想打这一系列patch了，直接：git am --abort。</p>\n<p>如果还想打, 有两种解决方案：</p>\n<p>方案一（个人推荐）：</p>\n<p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p>\n<p>(2) 根据.rej文件，通过编辑该patch文件的方式解决冲突。</p>\n<p>(3) 废弃上一条am命令已经打了的patch：git am --abort</p>\n<p>(4) 重新打patch：git am ~/patch-set/*.patchpatch</p>\n<p>方案二：</p>\n<p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p>\n<p>(2) 根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。</p>\n<p>(3) 将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令git add &lt;file_name&gt;添加到工作区中</p>\n<p>(4) 告诉git冲突已经解决，继续打patch: git am --resolved (git am --resolved 和 git am --continue是一样的)</p>\n<p>分析：方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二十通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。</p>\n","site":{"data":{}},"excerpt":"<p>推荐大家使用git的format-patch和am命令进行生成patch和打patch，用此方法获得的patch其实就是commit里提交的code修改以及commit信息。有如下好处：</p>\n<ol>\n<li>\n<p>对于git这种以project为单位的修改，尤其是涉及到多个文件夹下的多个文件的改动时，非常方便，能够记录所有的改动（添加，修改，删除文件等）</p>\n</li>\n<li>\n<p>可以保存commit信息。</p>\n</li>\n<li>\n<p>能够灵活的获取patch。可以获取任意两个commit之间的patch集。</p>\n</li>\n</ol>","more":"<p>使用方法（直接给一些examples）：</p>\n<h3 id=\"git-format-patch\"><a class=\"markdownIt-Anchor\" href=\"#git-format-patch\"></a> git format-patch</h3>\n<p>$ git format-patch HEAD^ 　　　　　　　　　　　　　   #生成最近的1次commit的patch</p>\n<p>$ git format-patch HEAD^^　　　　　　　　　　　　　  #生成最近的2次commit的patch</p>\n<p>$ git format-patch HEAD^^^ 　　　　　　　　　　　　　#生成最近的3次commit的patch</p>\n<p>$ git format-patch HEAD^^^^ 　　　　　　　　　　　      #生成最近的4次commit的patch</p>\n<p>$ git format-patch <r1>…<r2>            #生成两个commit间的修改的patch（包含两个commit. <r1>和<r2>都是具体的commit号)</r2></r1></r2></r1></p>\n<p>$ git format-patch -1 <r1>               #生成单个commit的patch</r1></p>\n<p>$ git format-patch <r1>               #生成某commit以来的修改patch（不包含该commit）</r1></p>\n<p>$ git format-patch --root <r1>　　　　　　　　　　　　   #生成从根到r1提交的所有patch</r1></p>\n<h3 id=\"git-am\"><a class=\"markdownIt-Anchor\" href=\"#git-am\"></a> git am</h3>\n<p>$ git apply --stat 0001-limit-log-function.patch   　　　　  # 查看patch的情况</p>\n<p>$ git apply --check 0001-limit-log-function.patch   　　　  # 检查patch是否能够打上，如果没有任何输出，则说明无冲突，可以打上</p>\n<p>(注：git apply是另外一种打patch的命令，其与git am的区别是，git apply并不会将commit message等打上去，打完patch后需要重新git add和git commit，而git am会直接将patch的所有信息打上去，而且不用重新git add和git commit,author也是patch的author而不是打patch的人)</p>\n<p>$ git am 0001-limit-log-function.patch                                # 将名字为0001-limit-log-function.patch的patch打上</p>\n<p>$ git am --signoff 0001-limit-log-function.patch                  # 添加-s或者–signoff，还可以把自己的名字添加为signed off by信息，作用是注明打patch的人是谁，因为有时打patch的人并不是patch的作者</p>\n<p>$ git am ~/patch-set/*.patch　　　　　　　　　　　　　# 将路径~/patch-set/*.patch 按照先后顺序打上</p>\n<p>$ git am --abort                                                                   #</p>\n<p>当git am失败时，用以将已经在am过程中打上的patch废弃掉(比如有三个patch，打到第三个patch时有冲突，那么这条命令会把打上的前两个patch丢弃掉，返回没有打patch的状态)</p>\n<p>$ git am --resolved                   #当git am失败，解决完冲突后，这条命令会接着打patch</p>\n<p>如果打Patch的过程中发生了冲突（conflicts），怎么办？</p>\n<p>解决patch冲突的过程是：</p>\n<p>如果不想打这一系列patch了，直接：git am --abort。</p>\n<p>如果还想打, 有两种解决方案：</p>\n<p>方案一（个人推荐）：</p>\n<p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p>\n<p>(2) 根据.rej文件，通过编辑该patch文件的方式解决冲突。</p>\n<p>(3) 废弃上一条am命令已经打了的patch：git am --abort</p>\n<p>(4) 重新打patch：git am ~/patch-set/*.patchpatch</p>\n<p>方案二：</p>\n<p>(1) 根据git am失败的信息，找到发生冲突的具体patch文件，然后用命令git apply --reject &lt;patch_name&gt;，强行打这个patch，发生冲突的部分会保存为.rej文件（例如发生冲突的文件是a.txt，那么运行完这个命令后，发生conflict的部分会保存为a.txt.rej），未发生冲突的部分会成功打上patch</p>\n<p>(2) 根据.rej文件，通过编辑发生冲突的code文件的方式解决冲突。</p>\n<p>(3) 将该patch涉及到的所有文件（不仅仅是发生冲突的文件）通过命令git add &lt;file_name&gt;添加到工作区中</p>\n<p>(4) 告诉git冲突已经解决，继续打patch: git am --resolved (git am --resolved 和 git am --continue是一样的)</p>\n<p>分析：方案一和方案二主要区别是解决冲突的方法不一样。方案一是通过编辑patch文件的方式解决冲突，方案二十通过编辑冲突code文件的方式解决冲突。这两种方案区别比较大：经过实验，核心区别在于，方案二无法验证冲突有没有切实的解决。即使你在方案二的第二步乱改一通，也能“打完”发生冲突的patch（并没有检测修改后的code文件跟patch期望的是否相同）。因此，如果采用方案二，那么再解决code文件冲突后，需要人工去确认修改的正确性。</p>"},{"title":"Git忽略文件.ignore模板（Android Studio）","date":"2016-08-29T12:06:21.000Z","_content":"\n#### Git忽略文件.ignore模板（Android Studio）\n<!-- more -->\n````\n#built application files  \n    *.apk  \n    *.ap_  \n\n    # files for the dex VM  \n    *.dex  \n\n    # Java class files  \n    *.class  \n\n    # generated files  \n    bin/  \n    gen/  \n    out/  \n    build/  \n    #  build/  忽略所有的 build/ 目录下文件  \n    #  /build  只忽略此目录下build文件，子目录的build不忽略  \n\n    # Local configuration file (sdk path, etc)  \n    local.properties  \n\n    # Windows thumbnail db  \n    Thumbs.db  \n    # OSX files  \n    .DS_Store  \n\n    # Eclipse project files  \n    .classpath  \n    .project  \n\n    # Android Studio  \n    *.iml  \n    .idea  \n\n    # Local IDEA workspace  \n    .idea/workspace.xml  \n\n    # Gradle cache  \n    .gradle  \n\n    #NDK  \n    obj/  \n\n    .settings/  \n    *.properties  \n\n    # Log Files\n    *.log\n\n````\n","source":"_posts/Git忽略文件-ignore模板（Android-Studio）.md","raw":"---\ntitle: Git忽略文件.ignore模板（Android Studio）\ndate: 2016-08-29 20:06:21\ntags: [git]\ncategories: git\n---\n\n#### Git忽略文件.ignore模板（Android Studio）\n<!-- more -->\n````\n#built application files  \n    *.apk  \n    *.ap_  \n\n    # files for the dex VM  \n    *.dex  \n\n    # Java class files  \n    *.class  \n\n    # generated files  \n    bin/  \n    gen/  \n    out/  \n    build/  \n    #  build/  忽略所有的 build/ 目录下文件  \n    #  /build  只忽略此目录下build文件，子目录的build不忽略  \n\n    # Local configuration file (sdk path, etc)  \n    local.properties  \n\n    # Windows thumbnail db  \n    Thumbs.db  \n    # OSX files  \n    .DS_Store  \n\n    # Eclipse project files  \n    .classpath  \n    .project  \n\n    # Android Studio  \n    *.iml  \n    .idea  \n\n    # Local IDEA workspace  \n    .idea/workspace.xml  \n\n    # Gradle cache  \n    .gradle  \n\n    #NDK  \n    obj/  \n\n    .settings/  \n    *.properties  \n\n    # Log Files\n    *.log\n\n````\n","slug":"Git忽略文件-ignore模板（Android-Studio）","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxey001nsifyv11qbzfd","content":"<h4 id=\"git忽略文件ignore模板android-studio\"><a class=\"markdownIt-Anchor\" href=\"#git忽略文件ignore模板android-studio\"></a> Git忽略文件.ignore模板（Android Studio）</h4>\n<a id=\"more\"></a>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#built application files  </span></span><br><span class=\"line\">    *<span class=\"string\">.apk</span>  </span><br><span class=\"line\">    *<span class=\"string\">.ap_</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># files for the dex VM  </span></span><br><span class=\"line\">    *<span class=\"string\">.dex</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Java class files  </span></span><br><span class=\"line\">    *<span class=\"string\">.class</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># generated files  </span></span><br><span class=\"line\">    bin/  </span><br><span class=\"line\">    gen/  </span><br><span class=\"line\">    out/  </span><br><span class=\"line\">    build/  </span><br><span class=\"line\">    <span class=\"comment\">#  build/  忽略所有的 build/ 目录下文件  </span></span><br><span class=\"line\">    <span class=\"comment\">#  /build  只忽略此目录下build文件，子目录的build不忽略  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Local configuration file (sdk path, etc)  </span></span><br><span class=\"line\">    local.properties  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Windows thumbnail db  </span></span><br><span class=\"line\">    Thumbs.db  </span><br><span class=\"line\">    <span class=\"comment\"># OSX files  </span></span><br><span class=\"line\">    <span class=\"string\">.DS_Store</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Eclipse project files  </span></span><br><span class=\"line\">    <span class=\"string\">.classpath</span>  </span><br><span class=\"line\">    <span class=\"string\">.project</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Android Studio  </span></span><br><span class=\"line\">    *<span class=\"string\">.iml</span>  </span><br><span class=\"line\">    <span class=\"string\">.idea</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Local IDEA workspace  </span></span><br><span class=\"line\">    <span class=\"string\">.idea/workspace.xml</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Gradle cache  </span></span><br><span class=\"line\">    <span class=\"string\">.gradle</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#NDK  </span></span><br><span class=\"line\">    obj/  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">.settings/</span>  </span><br><span class=\"line\">    *<span class=\"string\">.properties</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Log Files</span></span><br><span class=\"line\">    *<span class=\"string\">.log</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"git忽略文件ignore模板android-studio\"><a class=\"markdownIt-Anchor\" href=\"#git忽略文件ignore模板android-studio\"></a> Git忽略文件.ignore模板（Android Studio）</h4>","more":"<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#built application files  </span></span><br><span class=\"line\">    *<span class=\"string\">.apk</span>  </span><br><span class=\"line\">    *<span class=\"string\">.ap_</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># files for the dex VM  </span></span><br><span class=\"line\">    *<span class=\"string\">.dex</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Java class files  </span></span><br><span class=\"line\">    *<span class=\"string\">.class</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># generated files  </span></span><br><span class=\"line\">    bin/  </span><br><span class=\"line\">    gen/  </span><br><span class=\"line\">    out/  </span><br><span class=\"line\">    build/  </span><br><span class=\"line\">    <span class=\"comment\">#  build/  忽略所有的 build/ 目录下文件  </span></span><br><span class=\"line\">    <span class=\"comment\">#  /build  只忽略此目录下build文件，子目录的build不忽略  </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Local configuration file (sdk path, etc)  </span></span><br><span class=\"line\">    local.properties  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Windows thumbnail db  </span></span><br><span class=\"line\">    Thumbs.db  </span><br><span class=\"line\">    <span class=\"comment\"># OSX files  </span></span><br><span class=\"line\">    <span class=\"string\">.DS_Store</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Eclipse project files  </span></span><br><span class=\"line\">    <span class=\"string\">.classpath</span>  </span><br><span class=\"line\">    <span class=\"string\">.project</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Android Studio  </span></span><br><span class=\"line\">    *<span class=\"string\">.iml</span>  </span><br><span class=\"line\">    <span class=\"string\">.idea</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Local IDEA workspace  </span></span><br><span class=\"line\">    <span class=\"string\">.idea/workspace.xml</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Gradle cache  </span></span><br><span class=\"line\">    <span class=\"string\">.gradle</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#NDK  </span></span><br><span class=\"line\">    obj/  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">.settings/</span>  </span><br><span class=\"line\">    *<span class=\"string\">.properties</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Log Files</span></span><br><span class=\"line\">    *<span class=\"string\">.log</span></span><br></pre></td></tr></table></figure>"},{"title":"JNI-异常处理","date":"2019-01-04T04:22:10.000Z","_content":"\n### 异常处理\n\n#### 捕获异常\n\nJNIEnv 接口提供了一组与异常相关的函数集，在运行过程中可以使用Java类查看这些函数。\n<!-- more -->\n\n```\n抛出异常的 Java 例子\npublic class JavaClass {\n\t/**\n\t * 抛出方法.\n\t */\n\t private void throwingMethod() throws NullPointerException {\n\t \tthrow new NullPointerException(\"Null pointer\");\n\t }\n\t /**\n\t  * 访问方法(原生方法).\n\t  */\n\t private native void accessMethods();\n}\n```\n调用 throwingMethod 方法时， accessMethods 原生方法需要显示地做异常处理。 JNI提供了 ExceptionOccurred 函数查询虚拟机中是否有挂起的异常。在使用完之后，异常处理程序需要用 ExceptionClear 函数显式地清除异常。\n\n```\n原生代码中的异常处理\njthrowable ex;\n...\n(*env)->CallVoidMethod(env, instance, throwingMethodId);\nex = (*env)->ExceptionOccurred(env);\nif (0 != ex) {\n\t(*env)->ExceptionClear(env);\n\t/* Exception handler. */\n}\n```\n\n#### 抛出异常\n\nJNI 也允许原生代码抛出异常。因为异常是Java类，应该先用FindClass函数找到异常类，用ThrowNew 函数可以初始化且抛出新的异常。\n\n```\n原生代码中抛出异常\njclass clazz;\n...\nclazz = (*env)->FindClass(env, \"java/lang/NullPointerException\");\nif (0 != clazz) {\n\t(*env)->ThrowNew(env, clazz, \"Exception message.\");\n}\n```\n因为原生函数的代码执行不受虚拟机的控制，因此抛出异常并不会停止原生函数的执行并把控制权转交给异常处理程序。到抛出异常时，原生函数应该释放所有已分配的原生资源，例如内存及合适的返回值等。通过 JNIEnv 接口获得的引用是局部引用且一旦返回原生函数，它们自动地被虚拟机释放。\n\n","source":"_posts/JNI-异常处理.md","raw":"---\ntitle: JNI-异常处理\ndate: 2019-01-04 12:22:10\ntags: [java, jni, android]\ncategories: android\n---\n\n### 异常处理\n\n#### 捕获异常\n\nJNIEnv 接口提供了一组与异常相关的函数集，在运行过程中可以使用Java类查看这些函数。\n<!-- more -->\n\n```\n抛出异常的 Java 例子\npublic class JavaClass {\n\t/**\n\t * 抛出方法.\n\t */\n\t private void throwingMethod() throws NullPointerException {\n\t \tthrow new NullPointerException(\"Null pointer\");\n\t }\n\t /**\n\t  * 访问方法(原生方法).\n\t  */\n\t private native void accessMethods();\n}\n```\n调用 throwingMethod 方法时， accessMethods 原生方法需要显示地做异常处理。 JNI提供了 ExceptionOccurred 函数查询虚拟机中是否有挂起的异常。在使用完之后，异常处理程序需要用 ExceptionClear 函数显式地清除异常。\n\n```\n原生代码中的异常处理\njthrowable ex;\n...\n(*env)->CallVoidMethod(env, instance, throwingMethodId);\nex = (*env)->ExceptionOccurred(env);\nif (0 != ex) {\n\t(*env)->ExceptionClear(env);\n\t/* Exception handler. */\n}\n```\n\n#### 抛出异常\n\nJNI 也允许原生代码抛出异常。因为异常是Java类，应该先用FindClass函数找到异常类，用ThrowNew 函数可以初始化且抛出新的异常。\n\n```\n原生代码中抛出异常\njclass clazz;\n...\nclazz = (*env)->FindClass(env, \"java/lang/NullPointerException\");\nif (0 != clazz) {\n\t(*env)->ThrowNew(env, clazz, \"Exception message.\");\n}\n```\n因为原生函数的代码执行不受虚拟机的控制，因此抛出异常并不会停止原生函数的执行并把控制权转交给异常处理程序。到抛出异常时，原生函数应该释放所有已分配的原生资源，例如内存及合适的返回值等。通过 JNIEnv 接口获得的引用是局部引用且一旦返回原生函数，它们自动地被虚拟机释放。\n\n","slug":"JNI-异常处理","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf0001qsifyie397hj3","content":"<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h3>\n<h4 id=\"捕获异常\"><a class=\"markdownIt-Anchor\" href=\"#捕获异常\"></a> 捕获异常</h4>\n<p>JNIEnv 接口提供了一组与异常相关的函数集，在运行过程中可以使用Java类查看这些函数。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">抛出异常的 Java 例子</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 抛出方法.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">throwingMethod</span><span class=\"params\">()</span> throws NullPointerException </span>&#123;</span><br><span class=\"line\">\t \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"Null pointer\"</span>);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t  * 访问方法(原生方法).</span></span><br><span class=\"line\"><span class=\"comment\">\t  */</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">private</span> native <span class=\"keyword\">void</span> <span class=\"title\">accessMethods</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 throwingMethod 方法时， accessMethods 原生方法需要显示地做异常处理。 JNI提供了 ExceptionOccurred 函数查询虚拟机中是否有挂起的异常。在使用完之后，异常处理程序需要用 ExceptionClear 函数显式地清除异常。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生代码中的异常处理</span><br><span class=\"line\">jthrowable ex;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>CallVoidMethod(env, instance, throwingMethodId);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ex</span> = <span class=\"params\">(*env)</span>-&gt;</span>ExceptionOccurred(env);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> != ex) &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>ExceptionClear(env);</span><br><span class=\"line\">\t<span class=\"comment\">/* Exception handler. */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常\"></a> 抛出异常</h4>\n<p>JNI 也允许原生代码抛出异常。因为异常是Java类，应该先用FindClass函数找到异常类，用ThrowNew 函数可以初始化且抛出新的异常。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生代码中抛出异常</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/NullPointerException\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> != clazz) &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>ThrowNew(env, clazz, <span class=\"string\">\"Exception message.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为原生函数的代码执行不受虚拟机的控制，因此抛出异常并不会停止原生函数的执行并把控制权转交给异常处理程序。到抛出异常时，原生函数应该释放所有已分配的原生资源，例如内存及合适的返回值等。通过 JNIEnv 接口获得的引用是局部引用且一旦返回原生函数，它们自动地被虚拟机释放。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"异常处理\"><a class=\"markdownIt-Anchor\" href=\"#异常处理\"></a> 异常处理</h3>\n<h4 id=\"捕获异常\"><a class=\"markdownIt-Anchor\" href=\"#捕获异常\"></a> 捕获异常</h4>\n<p>JNIEnv 接口提供了一组与异常相关的函数集，在运行过程中可以使用Java类查看这些函数。</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">抛出异常的 Java 例子</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 抛出方法.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">throwingMethod</span><span class=\"params\">()</span> throws NullPointerException </span>&#123;</span><br><span class=\"line\">\t \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"Null pointer\"</span>);</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t  * 访问方法(原生方法).</span></span><br><span class=\"line\"><span class=\"comment\">\t  */</span></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"keyword\">private</span> native <span class=\"keyword\">void</span> <span class=\"title\">accessMethods</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用 throwingMethod 方法时， accessMethods 原生方法需要显示地做异常处理。 JNI提供了 ExceptionOccurred 函数查询虚拟机中是否有挂起的异常。在使用完之后，异常处理程序需要用 ExceptionClear 函数显式地清除异常。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生代码中的异常处理</span><br><span class=\"line\">jthrowable ex;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>CallVoidMethod(env, instance, throwingMethodId);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ex</span> = <span class=\"params\">(*env)</span>-&gt;</span>ExceptionOccurred(env);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> != ex) &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>ExceptionClear(env);</span><br><span class=\"line\">\t<span class=\"comment\">/* Exception handler. */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"抛出异常\"><a class=\"markdownIt-Anchor\" href=\"#抛出异常\"></a> 抛出异常</h4>\n<p>JNI 也允许原生代码抛出异常。因为异常是Java类，应该先用FindClass函数找到异常类，用ThrowNew 函数可以初始化且抛出新的异常。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生代码中抛出异常</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/NullPointerException\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span> != clazz) &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>ThrowNew(env, clazz, <span class=\"string\">\"Exception message.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为原生函数的代码执行不受虚拟机的控制，因此抛出异常并不会停止原生函数的执行并把控制权转交给异常处理程序。到抛出异常时，原生函数应该释放所有已分配的原生资源，例如内存及合适的返回值等。通过 JNIEnv 接口获得的引用是局部引用且一旦返回原生函数，它们自动地被虚拟机释放。</p>"},{"title":"Integer比较的误区","date":"2018-03-13T06:57:21.000Z","_content":"\n## Integer比较时不准确的原因\n\n<!-- more -->\n\n首先理解的是：Java的装箱和拆箱\n \n##### 什么时候会进行装箱\n>装箱用到的方法：Integer.valueOf()\n\n>Integer i = 100;\n\n##### 什么是会进行拆箱\n>如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)，例如：a + b\n\n##### Integer.valueOf()中的cache问题\n\n```\npublic static Integer valueOf(int i){\n\tif(i >= - 128 && i <= IntegerCache.high)\n\t\treturn IntegerCache.cache[i + 128];\n\telse\n\t\treturn new Integer(i);\n}\n\n\n```\n> 如果数值在[-128, 127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用\n\n##### == 的比较问题\n> 当“==”运算符的两个操作数都是包装类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)。\n\n例如：\n\n```\n\tInteger a = 1;\n\tInteger b = 2;\n\tInteger c = 3;\n\tInteger d = 3;\n\tInteger e = 321;\n\tInteger f = 321;\n\tLong g = 3L;\n\tLong h = 2L;\n\t\n\tSystem.out.println(c == d); ----true  在[-128, 127]区间，对象相同\n\tSystem.out.println(e == f); ---- false 不在[-128, 127]区间，对象不同\n\tSystem.out.println(c == (a + b)); ---- true 包含运算符，拆箱比较值\n\tSystem.out.println(c.equals(a + b)); --- true 先拆箱(a + b),再装箱\n\tSystem.out.println(g == (a + b)); --- true 区间缓存\n\tSystem.out.println(g.equals(a + b)); --- false  对象类型不同\n\tSystem.out.println(g.equals(a + h)); --- true a+h 向上转换成long类型，再装箱 \n\n```","source":"_posts/Integer比较的误区.md","raw":"---\ntitle: Integer比较的误区\ndate: 2018-03-13 14:57:21\ntags: [integer, java]\ncategories: [java]\n---\n\n## Integer比较时不准确的原因\n\n<!-- more -->\n\n首先理解的是：Java的装箱和拆箱\n \n##### 什么时候会进行装箱\n>装箱用到的方法：Integer.valueOf()\n\n>Integer i = 100;\n\n##### 什么是会进行拆箱\n>如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)，例如：a + b\n\n##### Integer.valueOf()中的cache问题\n\n```\npublic static Integer valueOf(int i){\n\tif(i >= - 128 && i <= IntegerCache.high)\n\t\treturn IntegerCache.cache[i + 128];\n\telse\n\t\treturn new Integer(i);\n}\n\n\n```\n> 如果数值在[-128, 127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用\n\n##### == 的比较问题\n> 当“==”运算符的两个操作数都是包装类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)。\n\n例如：\n\n```\n\tInteger a = 1;\n\tInteger b = 2;\n\tInteger c = 3;\n\tInteger d = 3;\n\tInteger e = 321;\n\tInteger f = 321;\n\tLong g = 3L;\n\tLong h = 2L;\n\t\n\tSystem.out.println(c == d); ----true  在[-128, 127]区间，对象相同\n\tSystem.out.println(e == f); ---- false 不在[-128, 127]区间，对象不同\n\tSystem.out.println(c == (a + b)); ---- true 包含运算符，拆箱比较值\n\tSystem.out.println(c.equals(a + b)); --- true 先拆箱(a + b),再装箱\n\tSystem.out.println(g == (a + b)); --- true 区间缓存\n\tSystem.out.println(g.equals(a + b)); --- false  对象类型不同\n\tSystem.out.println(g.equals(a + h)); --- true a+h 向上转换成long类型，再装箱 \n\n```","slug":"Integer比较的误区","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf1001ssify98huvgnk","content":"<h2 id=\"integer比较时不准确的原因\"><a class=\"markdownIt-Anchor\" href=\"#integer比较时不准确的原因\"></a> Integer比较时不准确的原因</h2>\n<a id=\"more\"></a>\n<p>首先理解的是：Java的装箱和拆箱</p>\n<h5 id=\"什么时候会进行装箱\"><a class=\"markdownIt-Anchor\" href=\"#什么时候会进行装箱\"></a> 什么时候会进行装箱</h5>\n<blockquote>\n<p>装箱用到的方法：Integer.valueOf()</p>\n</blockquote>\n<blockquote>\n<p>Integer i = 100;</p>\n</blockquote>\n<h5 id=\"什么是会进行拆箱\"><a class=\"markdownIt-Anchor\" href=\"#什么是会进行拆箱\"></a> 什么是会进行拆箱</h5>\n<blockquote>\n<p>如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)，例如：a + b</p>\n</blockquote>\n<h5 id=\"integervalueof中的cache问题\"><a class=\"markdownIt-Anchor\" href=\"#integervalueof中的cache问题\"></a> Integer.valueOf()中的cache问题</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer value<span class=\"constructor\">Of(<span class=\"params\">int</span> <span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i &gt;= - <span class=\"number\">128</span><span class=\"operator\"> &amp;&amp; </span>i &lt;= <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">IntegerCache</span>.</span></span>high)</span><br><span class=\"line\">\t\treturn <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">IntegerCache</span>.</span></span>cache<span class=\"literal\">[<span class=\"identifier\">i</span> + <span class=\"number\">128</span>]</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\treturn <span class=\"keyword\">new</span> <span class=\"constructor\">Integer(<span class=\"params\">i</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果数值在[-128, 127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用</p>\n</blockquote>\n<h5 id=\"的比较问题\"><a class=\"markdownIt-Anchor\" href=\"#的比较问题\"></a> == 的比较问题</h5>\n<blockquote>\n<p>当“==”运算符的两个操作数都是包装类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">a</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">b</span> <span class=\"string\">=</span> <span class=\"number\">2</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">c</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">d</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">e</span> <span class=\"string\">=</span> <span class=\"number\">321</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">f</span> <span class=\"string\">=</span> <span class=\"number\">321</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Long</span> <span class=\"string\">g</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">L;</span></span><br><span class=\"line\"><span class=\"string\">Long</span> <span class=\"string\">h</span> <span class=\"string\">=</span> <span class=\"number\">2</span><span class=\"string\">L;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">System.out.println(c</span> <span class=\"string\">==</span> <span class=\"string\">d);</span> <span class=\"bullet\">----true</span>  <span class=\"string\">在[-128,</span> <span class=\"number\">127</span><span class=\"string\">]区间，对象相同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(e</span> <span class=\"string\">==</span> <span class=\"string\">f);</span> <span class=\"bullet\">----</span> <span class=\"literal\">false</span> <span class=\"string\">不在[-128,</span> <span class=\"number\">127</span><span class=\"string\">]区间，对象不同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(c</span> <span class=\"string\">==</span> <span class=\"string\">(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"bullet\">----</span> <span class=\"literal\">true</span> <span class=\"string\">包含运算符，拆箱比较值</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(c.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">先拆箱(a</span> <span class=\"string\">+</span> <span class=\"string\">b),再装箱</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g</span> <span class=\"string\">==</span> <span class=\"string\">(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">区间缓存</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">false</span>  <span class=\"string\">对象类型不同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">h));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">a+h</span> <span class=\"string\">向上转换成long类型，再装箱</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"integer比较时不准确的原因\"><a class=\"markdownIt-Anchor\" href=\"#integer比较时不准确的原因\"></a> Integer比较时不准确的原因</h2>","more":"<p>首先理解的是：Java的装箱和拆箱</p>\n<h5 id=\"什么时候会进行装箱\"><a class=\"markdownIt-Anchor\" href=\"#什么时候会进行装箱\"></a> 什么时候会进行装箱</h5>\n<blockquote>\n<p>装箱用到的方法：Integer.valueOf()</p>\n</blockquote>\n<blockquote>\n<p>Integer i = 100;</p>\n</blockquote>\n<h5 id=\"什么是会进行拆箱\"><a class=\"markdownIt-Anchor\" href=\"#什么是会进行拆箱\"></a> 什么是会进行拆箱</h5>\n<blockquote>\n<p>如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)，例如：a + b</p>\n</blockquote>\n<h5 id=\"integervalueof中的cache问题\"><a class=\"markdownIt-Anchor\" href=\"#integervalueof中的cache问题\"></a> Integer.valueOf()中的cache问题</h5>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static Integer value<span class=\"constructor\">Of(<span class=\"params\">int</span> <span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i &gt;= - <span class=\"number\">128</span><span class=\"operator\"> &amp;&amp; </span>i &lt;= <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">IntegerCache</span>.</span></span>high)</span><br><span class=\"line\">\t\treturn <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">IntegerCache</span>.</span></span>cache<span class=\"literal\">[<span class=\"identifier\">i</span> + <span class=\"number\">128</span>]</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\treturn <span class=\"keyword\">new</span> <span class=\"constructor\">Integer(<span class=\"params\">i</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果数值在[-128, 127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用</p>\n</blockquote>\n<h5 id=\"的比较问题\"><a class=\"markdownIt-Anchor\" href=\"#的比较问题\"></a> == 的比较问题</h5>\n<blockquote>\n<p>当“==”运算符的两个操作数都是包装类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式(即包含算术运算)则比较的是数值(即会触发自动拆箱的过程)。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">a</span> <span class=\"string\">=</span> <span class=\"number\">1</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">b</span> <span class=\"string\">=</span> <span class=\"number\">2</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">c</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">d</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">e</span> <span class=\"string\">=</span> <span class=\"number\">321</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Integer</span> <span class=\"string\">f</span> <span class=\"string\">=</span> <span class=\"number\">321</span><span class=\"string\">;</span></span><br><span class=\"line\"><span class=\"string\">Long</span> <span class=\"string\">g</span> <span class=\"string\">=</span> <span class=\"number\">3</span><span class=\"string\">L;</span></span><br><span class=\"line\"><span class=\"string\">Long</span> <span class=\"string\">h</span> <span class=\"string\">=</span> <span class=\"number\">2</span><span class=\"string\">L;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">System.out.println(c</span> <span class=\"string\">==</span> <span class=\"string\">d);</span> <span class=\"bullet\">----true</span>  <span class=\"string\">在[-128,</span> <span class=\"number\">127</span><span class=\"string\">]区间，对象相同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(e</span> <span class=\"string\">==</span> <span class=\"string\">f);</span> <span class=\"bullet\">----</span> <span class=\"literal\">false</span> <span class=\"string\">不在[-128,</span> <span class=\"number\">127</span><span class=\"string\">]区间，对象不同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(c</span> <span class=\"string\">==</span> <span class=\"string\">(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"bullet\">----</span> <span class=\"literal\">true</span> <span class=\"string\">包含运算符，拆箱比较值</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(c.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">先拆箱(a</span> <span class=\"string\">+</span> <span class=\"string\">b),再装箱</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g</span> <span class=\"string\">==</span> <span class=\"string\">(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">区间缓存</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">b));</span> <span class=\"meta\">---</span> <span class=\"literal\">false</span>  <span class=\"string\">对象类型不同</span></span><br><span class=\"line\"><span class=\"string\">System.out.println(g.equals(a</span> <span class=\"string\">+</span> <span class=\"string\">h));</span> <span class=\"meta\">---</span> <span class=\"literal\">true</span> <span class=\"string\">a+h</span> <span class=\"string\">向上转换成long类型，再装箱</span></span><br></pre></td></tr></table></figure>"},{"title":"JNI-局部和全局引用","date":"2019-01-04T04:44:53.000Z","_content":"\n### 局部引用和全局引用\n\nJNI支持三种引用：局部引用、全局引用和弱全局引用。\n\n#### 局部引用\n\n大多数JNI函数返回局部应用。局部引用不能在后续的调用中被缓存及重用，主要因为它们的使用期限仅限于原生方法，一旦原生函数返回，局部引用即被释放。例如：FindClass 函数返回一个局部引用，当原生方法返回时，它被自动释放，也可以用DeleteLocalRef 函数显式的是否原生代码。\n\n```\n删除一个局部引用\njclass clazz;\nclazz = (*env)->FindClass(env, \"java/lang/String\");\n...\n(*env)->DeleteLocalRef(env, clazz);\n```\n根据JNI的规范，虚拟机应该允许原生代码创建最少16个局部引用。在单个方法调用时进行多个内存密集型操作的最佳实践是删除未用的局部引用。如果不可能，原生代码可以在使用之前用 EnsureLocalCapacity 方法请求更多的局部引用槽。\n\n#### 全局引用\n\n全局引用在原生方法的后续调用过程中依然有效，除非它们被原生代码显式释放。\n\n* 1.创建全局引用\n\n可以用 NewGlobalRef 函数将局部引用初始化为全局引用。\n\n```\n用给定的局部引用创建全局引用\njclass localClazz;\njclass globalClazz;\n...\nlocalClazz = (*env)->FindClass(env, \"java/lang/String\");\nglobalClazz = (*env)->NewGlobalRef(env, localClazz);\n...\n(*env)->DeleteLocalRef(env, localClazz);\n```\n\n* 2.删除全局引用\n\n当原生代码不再需要一个全局引用时，可以随时用 DeleteGlobalRef 函数释放它，如下：\n\n```\n//删除一个全局应用\n(*env)->DeleteGlobalRef(env, globalClazz);\n```\n\n#### 弱全局引用\n\n全局引用的另一种类型是弱全局引用。与全局引用一样，弱全局引用在原生方法的后续调用过程中依然有效，与全局引用不同，弱全局引用并不阻止潜在的对象被垃圾收回。\n\n* 1.创建弱全局引用\n\n可以用 NewWeakGlobalRef 函数对弱全局引用进行初始化。\n\n```\n\tjclass weakGlobalClazz;\n\tweakGlobalClazz = (*env)->NewWeakGlobalRef(env, localClazz);\n```\n\n* 2.弱全局引用的有效性检验\n\n可以用 IsSameObject 函数检验一个弱全局引用是否仍然指向活动的类实例。\n\n```\n\t检验弱全局变量是否仍然有效\n\tif(JNI_FALSE == (*env)->IsSameObject(env, weakGlobalClazz, NULL)){\n\t\t/** 对象仍然处于活动状态且可以使用 */\n\t} else {\n\t\t/** 对象被垃圾回收器收回，不能使用 */\n\t}\n```\n\n* 3.删除弱全局引用\n\n可以随时用 DeleteWeakGlobalRef 函数是否弱全局引用。\n\n```\n删除一个弱全局引用\n\n(*env)->DeleteWeakGlobalRef(env, weakGlobalClazz);\n\n```\n全局引用显式释放前一直有效，他们可以被其他原生函数及原生线程使用。\n","source":"_posts/JNI-局部和全局引用.md","raw":"---\ntitle: JNI-局部和全局引用\ndate: 2019-01-04 12:44:53\ntags: [java, jni, android]\ncategories: android\n---\n\n### 局部引用和全局引用\n\nJNI支持三种引用：局部引用、全局引用和弱全局引用。\n\n#### 局部引用\n\n大多数JNI函数返回局部应用。局部引用不能在后续的调用中被缓存及重用，主要因为它们的使用期限仅限于原生方法，一旦原生函数返回，局部引用即被释放。例如：FindClass 函数返回一个局部引用，当原生方法返回时，它被自动释放，也可以用DeleteLocalRef 函数显式的是否原生代码。\n\n```\n删除一个局部引用\njclass clazz;\nclazz = (*env)->FindClass(env, \"java/lang/String\");\n...\n(*env)->DeleteLocalRef(env, clazz);\n```\n根据JNI的规范，虚拟机应该允许原生代码创建最少16个局部引用。在单个方法调用时进行多个内存密集型操作的最佳实践是删除未用的局部引用。如果不可能，原生代码可以在使用之前用 EnsureLocalCapacity 方法请求更多的局部引用槽。\n\n#### 全局引用\n\n全局引用在原生方法的后续调用过程中依然有效，除非它们被原生代码显式释放。\n\n* 1.创建全局引用\n\n可以用 NewGlobalRef 函数将局部引用初始化为全局引用。\n\n```\n用给定的局部引用创建全局引用\njclass localClazz;\njclass globalClazz;\n...\nlocalClazz = (*env)->FindClass(env, \"java/lang/String\");\nglobalClazz = (*env)->NewGlobalRef(env, localClazz);\n...\n(*env)->DeleteLocalRef(env, localClazz);\n```\n\n* 2.删除全局引用\n\n当原生代码不再需要一个全局引用时，可以随时用 DeleteGlobalRef 函数释放它，如下：\n\n```\n//删除一个全局应用\n(*env)->DeleteGlobalRef(env, globalClazz);\n```\n\n#### 弱全局引用\n\n全局引用的另一种类型是弱全局引用。与全局引用一样，弱全局引用在原生方法的后续调用过程中依然有效，与全局引用不同，弱全局引用并不阻止潜在的对象被垃圾收回。\n\n* 1.创建弱全局引用\n\n可以用 NewWeakGlobalRef 函数对弱全局引用进行初始化。\n\n```\n\tjclass weakGlobalClazz;\n\tweakGlobalClazz = (*env)->NewWeakGlobalRef(env, localClazz);\n```\n\n* 2.弱全局引用的有效性检验\n\n可以用 IsSameObject 函数检验一个弱全局引用是否仍然指向活动的类实例。\n\n```\n\t检验弱全局变量是否仍然有效\n\tif(JNI_FALSE == (*env)->IsSameObject(env, weakGlobalClazz, NULL)){\n\t\t/** 对象仍然处于活动状态且可以使用 */\n\t} else {\n\t\t/** 对象被垃圾回收器收回，不能使用 */\n\t}\n```\n\n* 3.删除弱全局引用\n\n可以随时用 DeleteWeakGlobalRef 函数是否弱全局引用。\n\n```\n删除一个弱全局引用\n\n(*env)->DeleteWeakGlobalRef(env, weakGlobalClazz);\n\n```\n全局引用显式释放前一直有效，他们可以被其他原生函数及原生线程使用。\n","slug":"JNI-局部和全局引用","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf2001wsifytli363k9","content":"<h3 id=\"局部引用和全局引用\"><a class=\"markdownIt-Anchor\" href=\"#局部引用和全局引用\"></a> 局部引用和全局引用</h3>\n<p>JNI支持三种引用：局部引用、全局引用和弱全局引用。</p>\n<h4 id=\"局部引用\"><a class=\"markdownIt-Anchor\" href=\"#局部引用\"></a> 局部引用</h4>\n<p>大多数JNI函数返回局部应用。局部引用不能在后续的调用中被缓存及重用，主要因为它们的使用期限仅限于原生方法，一旦原生函数返回，局部引用即被释放。例如：FindClass 函数返回一个局部引用，当原生方法返回时，它被自动释放，也可以用DeleteLocalRef 函数显式的是否原生代码。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除一个局部引用</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteLocalRef(env, clazz);</span><br></pre></td></tr></table></figure>\n<p>根据JNI的规范，虚拟机应该允许原生代码创建最少16个局部引用。在单个方法调用时进行多个内存密集型操作的最佳实践是删除未用的局部引用。如果不可能，原生代码可以在使用之前用 EnsureLocalCapacity 方法请求更多的局部引用槽。</p>\n<h4 id=\"全局引用\"><a class=\"markdownIt-Anchor\" href=\"#全局引用\"></a> 全局引用</h4>\n<p>全局引用在原生方法的后续调用过程中依然有效，除非它们被原生代码显式释放。</p>\n<ul>\n<li>1.创建全局引用</li>\n</ul>\n<p>可以用 NewGlobalRef 函数将局部引用初始化为全局引用。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用给定的局部引用创建全局引用</span><br><span class=\"line\">jclass localClazz;</span><br><span class=\"line\">jclass globalClazz;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">localClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">globalClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>NewGlobalRef(env, localClazz);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteLocalRef(env, localClazz);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.删除全局引用</li>\n</ul>\n<p>当原生代码不再需要一个全局引用时，可以随时用 DeleteGlobalRef 函数释放它，如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除一个全局应用</span></span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">DeleteGlobalRef(<span class=\"params\">env</span>, <span class=\"params\">globalClazz</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"弱全局引用\"><a class=\"markdownIt-Anchor\" href=\"#弱全局引用\"></a> 弱全局引用</h4>\n<p>全局引用的另一种类型是弱全局引用。与全局引用一样，弱全局引用在原生方法的后续调用过程中依然有效，与全局引用不同，弱全局引用并不阻止潜在的对象被垃圾收回。</p>\n<ul>\n<li>1.创建弱全局引用</li>\n</ul>\n<p>可以用 NewWeakGlobalRef 函数对弱全局引用进行初始化。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jclass weakGlobalClazz<span class=\"comment\">;</span></span><br><span class=\"line\">weakGlobalClazz = (<span class=\"name\">*env</span>)-&gt;NewWeakGlobalRef(<span class=\"name\">env</span>, localClazz)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.弱全局引用的有效性检验</li>\n</ul>\n<p>可以用 IsSameObject 函数检验一个弱全局引用是否仍然指向活动的类实例。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">检验弱全局变量是否仍然有效</span><br><span class=\"line\"><span class=\"keyword\">if</span>(JNI_FALSE<span class=\"operator\"> == </span>(*env)-&gt;<span class=\"constructor\">IsSameObject(<span class=\"params\">env</span>, <span class=\"params\">weakGlobalClazz</span>, NULL)</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 对象仍然处于活动状态且可以使用 */</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 对象被垃圾回收器收回，不能使用 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.删除弱全局引用</li>\n</ul>\n<p>可以随时用 DeleteWeakGlobalRef 函数是否弱全局引用。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除一个弱全局引用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteWeakGlobalRef(env, weakGlobalClazz);</span><br></pre></td></tr></table></figure>\n<p>全局引用显式释放前一直有效，他们可以被其他原生函数及原生线程使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"局部引用和全局引用\"><a class=\"markdownIt-Anchor\" href=\"#局部引用和全局引用\"></a> 局部引用和全局引用</h3>\n<p>JNI支持三种引用：局部引用、全局引用和弱全局引用。</p>\n<h4 id=\"局部引用\"><a class=\"markdownIt-Anchor\" href=\"#局部引用\"></a> 局部引用</h4>\n<p>大多数JNI函数返回局部应用。局部引用不能在后续的调用中被缓存及重用，主要因为它们的使用期限仅限于原生方法，一旦原生函数返回，局部引用即被释放。例如：FindClass 函数返回一个局部引用，当原生方法返回时，它被自动释放，也可以用DeleteLocalRef 函数显式的是否原生代码。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除一个局部引用</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteLocalRef(env, clazz);</span><br></pre></td></tr></table></figure>\n<p>根据JNI的规范，虚拟机应该允许原生代码创建最少16个局部引用。在单个方法调用时进行多个内存密集型操作的最佳实践是删除未用的局部引用。如果不可能，原生代码可以在使用之前用 EnsureLocalCapacity 方法请求更多的局部引用槽。</p>\n<h4 id=\"全局引用\"><a class=\"markdownIt-Anchor\" href=\"#全局引用\"></a> 全局引用</h4>\n<p>全局引用在原生方法的后续调用过程中依然有效，除非它们被原生代码显式释放。</p>\n<ul>\n<li>1.创建全局引用</li>\n</ul>\n<p>可以用 NewGlobalRef 函数将局部引用初始化为全局引用。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用给定的局部引用创建全局引用</span><br><span class=\"line\">jclass localClazz;</span><br><span class=\"line\">jclass globalClazz;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">localClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>FindClass(env, <span class=\"string\">\"java/lang/String\"</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">globalClazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>NewGlobalRef(env, localClazz);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteLocalRef(env, localClazz);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.删除全局引用</li>\n</ul>\n<p>当原生代码不再需要一个全局引用时，可以随时用 DeleteGlobalRef 函数释放它，如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//删除一个全局应用</span></span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">DeleteGlobalRef(<span class=\"params\">env</span>, <span class=\"params\">globalClazz</span>)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"弱全局引用\"><a class=\"markdownIt-Anchor\" href=\"#弱全局引用\"></a> 弱全局引用</h4>\n<p>全局引用的另一种类型是弱全局引用。与全局引用一样，弱全局引用在原生方法的后续调用过程中依然有效，与全局引用不同，弱全局引用并不阻止潜在的对象被垃圾收回。</p>\n<ul>\n<li>1.创建弱全局引用</li>\n</ul>\n<p>可以用 NewWeakGlobalRef 函数对弱全局引用进行初始化。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jclass weakGlobalClazz<span class=\"comment\">;</span></span><br><span class=\"line\">weakGlobalClazz = (<span class=\"name\">*env</span>)-&gt;NewWeakGlobalRef(<span class=\"name\">env</span>, localClazz)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.弱全局引用的有效性检验</li>\n</ul>\n<p>可以用 IsSameObject 函数检验一个弱全局引用是否仍然指向活动的类实例。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">检验弱全局变量是否仍然有效</span><br><span class=\"line\"><span class=\"keyword\">if</span>(JNI_FALSE<span class=\"operator\"> == </span>(*env)-&gt;<span class=\"constructor\">IsSameObject(<span class=\"params\">env</span>, <span class=\"params\">weakGlobalClazz</span>, NULL)</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 对象仍然处于活动状态且可以使用 */</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 对象被垃圾回收器收回，不能使用 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.删除弱全局引用</li>\n</ul>\n<p>可以随时用 DeleteWeakGlobalRef 函数是否弱全局引用。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除一个弱全局引用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">(*env)</span>-&gt;</span>DeleteWeakGlobalRef(env, weakGlobalClazz);</span><br></pre></td></tr></table></figure>\n<p>全局引用显式释放前一直有效，他们可以被其他原生函数及原生线程使用。</p>\n"},{"title":"Hexo常用命令记录","date":"2016-05-18T10:24:43.000Z","_content":"\n# Hexo常用命令记录\n\n由于博客是用的hexo, 方便以后忘记来此查询\n\n```\n  hexo new \"postName\" #新建文章\n  hexo new page \"pageName\" #新建页面\n  hexo new draft \"draftName\" #新建草稿\n  hexo publish draft \"draftName\" #草稿变成正文\n  hexo generate #生成静态页面至public目录\n  hexo server #开启预览(可以访问localhost:4000)\n  hexo deploy #部署到github, gitcafe等\n\n```\n\n简写命令\n\n```\n\n  hexo n #新生成\n  hexo g #生成静态页面至public目录\n  hexo s #开启预览(可以访问localhost:4000)\n  hexo d #部署\n\n  hexo d -g #重新生成并发布\n\n```\n[Hexo官方文档](http://hexo.io/zh-cn/)\n","source":"_posts/Hexo常用命令记录.md","raw":"---\ntitle: Hexo常用命令记录\ndate: 2016-05-18 18:24:43\ntags: [hexo]\ncategories: hexo\n---\n\n# Hexo常用命令记录\n\n由于博客是用的hexo, 方便以后忘记来此查询\n\n```\n  hexo new \"postName\" #新建文章\n  hexo new page \"pageName\" #新建页面\n  hexo new draft \"draftName\" #新建草稿\n  hexo publish draft \"draftName\" #草稿变成正文\n  hexo generate #生成静态页面至public目录\n  hexo server #开启预览(可以访问localhost:4000)\n  hexo deploy #部署到github, gitcafe等\n\n```\n\n简写命令\n\n```\n\n  hexo n #新生成\n  hexo g #生成静态页面至public目录\n  hexo s #开启预览(可以访问localhost:4000)\n  hexo d #部署\n\n  hexo d -g #重新生成并发布\n\n```\n[Hexo官方文档](http://hexo.io/zh-cn/)\n","slug":"Hexo常用命令记录","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf3001ysifylue7cjun","content":"<h1 id=\"hexo常用命令记录\"><a class=\"markdownIt-Anchor\" href=\"#hexo常用命令记录\"></a> Hexo常用命令记录</h1>\n<p>由于博客是用的hexo, 方便以后忘记来此查询</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> #新建文章</span><br><span class=\"line\">hexo new<span class=\"built_in\"> page </span><span class=\"string\">\"pageName\"</span> #新建页面</span><br><span class=\"line\">hexo new draft <span class=\"string\">\"draftName\"</span> #新建草稿</span><br><span class=\"line\">hexo publish draft <span class=\"string\">\"draftName\"</span> #草稿变成正文</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>#开启预览(可以访问localhost:4000)</span><br><span class=\"line\">hexo deploy #部署到github, gitcafe等</span><br></pre></td></tr></table></figure>\n<p>简写命令</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">hexo</span> n <span class=\"comment\">#新生成</span></span><br><span class=\"line\">hexo g <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo s <span class=\"comment\">#开启预览(可以访问localhost:4000)</span></span><br><span class=\"line\">hexo d <span class=\"comment\">#部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo d -g <span class=\"comment\">#重新生成并发布</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo常用命令记录\"><a class=\"markdownIt-Anchor\" href=\"#hexo常用命令记录\"></a> Hexo常用命令记录</h1>\n<p>由于博客是用的hexo, 方便以后忘记来此查询</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span> #新建文章</span><br><span class=\"line\">hexo new<span class=\"built_in\"> page </span><span class=\"string\">\"pageName\"</span> #新建页面</span><br><span class=\"line\">hexo new draft <span class=\"string\">\"draftName\"</span> #新建草稿</span><br><span class=\"line\">hexo publish draft <span class=\"string\">\"draftName\"</span> #草稿变成正文</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo<span class=\"built_in\"> server </span>#开启预览(可以访问localhost:4000)</span><br><span class=\"line\">hexo deploy #部署到github, gitcafe等</span><br></pre></td></tr></table></figure>\n<p>简写命令</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">hexo</span> n <span class=\"comment\">#新生成</span></span><br><span class=\"line\">hexo g <span class=\"comment\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo s <span class=\"comment\">#开启预览(可以访问localhost:4000)</span></span><br><span class=\"line\">hexo d <span class=\"comment\">#部署</span></span><br><span class=\"line\"></span><br><span class=\"line\">hexo d -g <span class=\"comment\">#重新生成并发布</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></p>\n"},{"title":"Java中Math类的一些常用方法","date":"2016-03-30T11:55:31.000Z","_content":"# Java中Math类的一些常用方法\n\n<!-- more -->\n```\npublic class MathTest{\n  public static void main(String args[]){\n\n            /** \n             * abs求绝对值 \n             */  \n            System.out.println(Math.abs(-10.4));    //10.4  \n            System.out.println(Math.abs(10.1));     //10.1  \n              \n            /** \n             * ceil天花板的意思，就是返回大的值，注意一些特殊值 \n             */  \n            System.out.println(Math.ceil(-10.1));   //-10.0  \n            System.out.println(Math.ceil(10.7));    //11.0  \n            System.out.println(Math.ceil(-0.7));    //-0.0  \n            System.out.println(Math.ceil(0.0));     //0.0  \n            System.out.println(Math.ceil(-0.0));    //-0.0  \n              \n            /** \n             * floor地板的意思，就是返回小的值 \n             */  \n            System.out.println(Math.floor(-10.1));  //-11.0  \n            System.out.println(Math.floor(10.7));   //10.0  \n            System.out.println(Math.floor(-0.7));   //-1.0  \n            System.out.println(Math.floor(0.0));    //0.0  \n            System.out.println(Math.floor(-0.0));   //-0.0  \n              \n            /** \n             * max 两个中返回大的值,min和它相反，就不举例了 \n             */  \n            System.out.println(Math.max(-10.1, -10));   //-10.0  \n            System.out.println(Math.max(10.7, 10));     //10.7  \n            System.out.println(Math.max(0.0, -0.0));    //0.0  \n              \n            /** \n             * random 取得一个大于或者等于0.0小于不等于1.0的随机数 \n             */  \n            System.out.println(Math.random());  //0.08417657924317234  \n            System.out.println(Math.random());  //0.43527904004403717  \n              \n            /** \n             * rint 四舍五入，返回double值 \n             * 注意.5的时候会取偶数 \n             */  \n            System.out.println(Math.rint(10.1));    //10.0  \n            System.out.println(Math.rint(10.7));    //11.0  \n            System.out.println(Math.rint(11.5));    //12.0  \n            System.out.println(Math.rint(10.5));    //10.0  \n            System.out.println(Math.rint(10.51));   //11.0  \n            System.out.println(Math.rint(-10.5));   //-10.0  \n            System.out.println(Math.rint(-11.5));   //-12.0  \n            System.out.println(Math.rint(-10.51));  //-11.0  \n            System.out.println(Math.rint(-10.6));   //-11.0  \n            System.out.println(Math.rint(-10.2));   //-10.0  \n              \n            /** \n             * round 四舍五入，float时返回int值，double时返回long值 \n             */  \n            System.out.println(Math.round(10.1));   //10  \n            System.out.println(Math.round(10.7));   //11  \n            System.out.println(Math.round(10.5));   //11  \n            System.out.println(Math.round(10.51));  //11  \n            System.out.println(Math.round(-10.5));  //-10  \n            System.out.println(Math.round(-10.51)); //-11  \n            System.out.println(Math.round(-10.6));  //-11  \n            System.out.println(Math.round(-10.2));  //-10  \n  }\n\n}\n\n```","source":"_posts/Java中Math类的一些常用方法.md","raw":"---\ntitle: Java中Math类的一些常用方法\ndate: 2016-03-30 19:55:31\ntags: [java, math, round]\ncategories: java\n\n---\n# Java中Math类的一些常用方法\n\n<!-- more -->\n```\npublic class MathTest{\n  public static void main(String args[]){\n\n            /** \n             * abs求绝对值 \n             */  \n            System.out.println(Math.abs(-10.4));    //10.4  \n            System.out.println(Math.abs(10.1));     //10.1  \n              \n            /** \n             * ceil天花板的意思，就是返回大的值，注意一些特殊值 \n             */  \n            System.out.println(Math.ceil(-10.1));   //-10.0  \n            System.out.println(Math.ceil(10.7));    //11.0  \n            System.out.println(Math.ceil(-0.7));    //-0.0  \n            System.out.println(Math.ceil(0.0));     //0.0  \n            System.out.println(Math.ceil(-0.0));    //-0.0  \n              \n            /** \n             * floor地板的意思，就是返回小的值 \n             */  \n            System.out.println(Math.floor(-10.1));  //-11.0  \n            System.out.println(Math.floor(10.7));   //10.0  \n            System.out.println(Math.floor(-0.7));   //-1.0  \n            System.out.println(Math.floor(0.0));    //0.0  \n            System.out.println(Math.floor(-0.0));   //-0.0  \n              \n            /** \n             * max 两个中返回大的值,min和它相反，就不举例了 \n             */  \n            System.out.println(Math.max(-10.1, -10));   //-10.0  \n            System.out.println(Math.max(10.7, 10));     //10.7  \n            System.out.println(Math.max(0.0, -0.0));    //0.0  \n              \n            /** \n             * random 取得一个大于或者等于0.0小于不等于1.0的随机数 \n             */  \n            System.out.println(Math.random());  //0.08417657924317234  \n            System.out.println(Math.random());  //0.43527904004403717  \n              \n            /** \n             * rint 四舍五入，返回double值 \n             * 注意.5的时候会取偶数 \n             */  \n            System.out.println(Math.rint(10.1));    //10.0  \n            System.out.println(Math.rint(10.7));    //11.0  \n            System.out.println(Math.rint(11.5));    //12.0  \n            System.out.println(Math.rint(10.5));    //10.0  \n            System.out.println(Math.rint(10.51));   //11.0  \n            System.out.println(Math.rint(-10.5));   //-10.0  \n            System.out.println(Math.rint(-11.5));   //-12.0  \n            System.out.println(Math.rint(-10.51));  //-11.0  \n            System.out.println(Math.rint(-10.6));   //-11.0  \n            System.out.println(Math.rint(-10.2));   //-10.0  \n              \n            /** \n             * round 四舍五入，float时返回int值，double时返回long值 \n             */  \n            System.out.println(Math.round(10.1));   //10  \n            System.out.println(Math.round(10.7));   //11  \n            System.out.println(Math.round(10.5));   //11  \n            System.out.println(Math.round(10.51));  //11  \n            System.out.println(Math.round(-10.5));  //-10  \n            System.out.println(Math.round(-10.51)); //-11  \n            System.out.println(Math.round(-10.6));  //-11  \n            System.out.println(Math.round(-10.2));  //-10  \n  }\n\n}\n\n```","slug":"Java中Math类的一些常用方法","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf40022sifyi4sl2q4q","content":"<h1 id=\"java中math类的一些常用方法\"><a class=\"markdownIt-Anchor\" href=\"#java中math类的一些常用方法\"></a> Java中Math类的一些常用方法</h1>\n<a id=\"more\"></a>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> MathTest&#123;</span><br><span class=\"line\">  public static void main(String args<span class=\"literal\">[]</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * abs求绝对值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>abs<span class=\"number\">(-10.4)</span>);    <span class=\"comment\">//10.4  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>abs(<span class=\"number\">10.1</span>));     <span class=\"comment\">//10.1  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * ceil天花板的意思，就是返回大的值，注意一些特殊值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-10.1)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil(<span class=\"number\">10.7</span>));    <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-0.7)</span>);    <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil(<span class=\"number\">0.0</span>));     <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-0.0)</span>);    <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * floor地板的意思，就是返回小的值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-10.1)</span>);  <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor(<span class=\"number\">10.7</span>));   <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-0.7)</span>);   <span class=\"comment\">//-1.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor(<span class=\"number\">0.0</span>));    <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-0.0)</span>);   <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * max 两个中返回大的值,min和它相反，就不举例了 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(-<span class=\"number\">10.1</span>, -<span class=\"number\">10</span>));   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(<span class=\"number\">10.7</span>, <span class=\"number\">10</span>));     <span class=\"comment\">//10.7  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(<span class=\"number\">0.0</span>, -<span class=\"number\">0.0</span>));    <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * random 取得一个大于或者等于0.0小于不等于1.0的随机数 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>random<span class=\"literal\">()</span>);  <span class=\"comment\">//0.08417657924317234  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>random<span class=\"literal\">()</span>);  <span class=\"comment\">//0.43527904004403717  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * rint 四舍五入，返回double值 </span></span><br><span class=\"line\"><span class=\"comment\">             * 注意.5的时候会取偶数 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.1</span>));    <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.7</span>));    <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">11.5</span>));    <span class=\"comment\">//12.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.5</span>));    <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.51</span>));   <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.5)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-11.5)</span>);   <span class=\"comment\">//-12.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.51)</span>);  <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.6)</span>);   <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.2)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * round 四舍五入，float时返回int值，double时返回long值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.7</span>));   <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.51</span>));  <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.5)</span>);  <span class=\"comment\">//-10  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.51)</span>); <span class=\"comment\">//-11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.6)</span>);  <span class=\"comment\">//-11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.2)</span>);  <span class=\"comment\">//-10  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"java中math类的一些常用方法\"><a class=\"markdownIt-Anchor\" href=\"#java中math类的一些常用方法\"></a> Java中Math类的一些常用方法</h1>","more":"<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> MathTest&#123;</span><br><span class=\"line\">  public static void main(String args<span class=\"literal\">[]</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * abs求绝对值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>abs<span class=\"number\">(-10.4)</span>);    <span class=\"comment\">//10.4  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>abs(<span class=\"number\">10.1</span>));     <span class=\"comment\">//10.1  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * ceil天花板的意思，就是返回大的值，注意一些特殊值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-10.1)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil(<span class=\"number\">10.7</span>));    <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-0.7)</span>);    <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil(<span class=\"number\">0.0</span>));     <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>ceil<span class=\"number\">(-0.0)</span>);    <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * floor地板的意思，就是返回小的值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-10.1)</span>);  <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor(<span class=\"number\">10.7</span>));   <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-0.7)</span>);   <span class=\"comment\">//-1.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor(<span class=\"number\">0.0</span>));    <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>floor<span class=\"number\">(-0.0)</span>);   <span class=\"comment\">//-0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * max 两个中返回大的值,min和它相反，就不举例了 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(-<span class=\"number\">10.1</span>, -<span class=\"number\">10</span>));   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(<span class=\"number\">10.7</span>, <span class=\"number\">10</span>));     <span class=\"comment\">//10.7  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>max(<span class=\"number\">0.0</span>, -<span class=\"number\">0.0</span>));    <span class=\"comment\">//0.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * random 取得一个大于或者等于0.0小于不等于1.0的随机数 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>random<span class=\"literal\">()</span>);  <span class=\"comment\">//0.08417657924317234  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>random<span class=\"literal\">()</span>);  <span class=\"comment\">//0.43527904004403717  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * rint 四舍五入，返回double值 </span></span><br><span class=\"line\"><span class=\"comment\">             * 注意.5的时候会取偶数 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.1</span>));    <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.7</span>));    <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">11.5</span>));    <span class=\"comment\">//12.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.5</span>));    <span class=\"comment\">//10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint(<span class=\"number\">10.51</span>));   <span class=\"comment\">//11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.5)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-11.5)</span>);   <span class=\"comment\">//-12.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.51)</span>);  <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.6)</span>);   <span class=\"comment\">//-11.0  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>rint<span class=\"number\">(-10.2)</span>);   <span class=\"comment\">//-10.0  </span></span><br><span class=\"line\">              </span><br><span class=\"line\">            <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">             * round 四舍五入，float时返回int值，double时返回long值 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span>  </span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.1</span>));   <span class=\"comment\">//10  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.7</span>));   <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.5</span>));   <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round(<span class=\"number\">10.51</span>));  <span class=\"comment\">//11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.5)</span>);  <span class=\"comment\">//-10  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.51)</span>); <span class=\"comment\">//-11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.6)</span>);  <span class=\"comment\">//-11  </span></span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Math</span>.</span></span>round<span class=\"number\">(-10.2)</span>);  <span class=\"comment\">//-10  </span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Linux 禁用账户","date":"2020-09-11T10:12:09.000Z","_content":"\n1、可直接修改/etc/passwd相关项来禁用账户：\n/etc/passwd username:x:uid:gid:explain:home:shell\n\nx-用户的密码原来直接存储在第二字段，但是为了安全，最后专门有了/etc/shadow文件，现在默认用x替代\n\nuid-用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始\n\n<!-- more -->\n\ngid-用户的gid,linux的用户都会有两个ID,一个是用户uid，一个是用户组id，在我们登录的时候，输入用户名和密码，其实会先到/etc/passwd查看是否有你输入的账号或者用户名，有的话将该账号与对应的UID和GID(在/etc/group中)读出来。然后读出主文件夹与shell的设置，然后再去检验密码是否正确，正确的话正常登录。\n\nexplain-用户的账号说明解释\n\nhome-用户的家目录文件夹\n\nshell-用户使用的shell，如果换成/sbin/nologin/就是默认没有登录环境的\n\n2、可直接修改/etc/shadow相关项来禁用账户：\n\n/etc/shadow username:passwd:lastchg:min:max:warn:inactive:expire:\n\nusername–用户名\n\npasswd–密码\n\nlastchg–从1970年1月1日起到上次修改密码所经过的天数\n\nmin–密码再过几天可以被变更(0表示随时可以改变)\n\nmax–密码再过几天必须被变更(99999表示永不过期)\n\nwarn–密码过期前几天提醒用户(默认为一周)\n\ninactive–密码过期几天后帐号被禁用\n\nexpire–从1970年1月1日算起，多少天后账号失效\n\n\n3、禁止所有的用户登录\n\necho \"hehe\" >> /etc/nologin\n\n这种方法设置后，只是禁止了从外部ssh登陆本机时有效！但是在本机上，无论是从root用户还是其他普通用户使用su命令切换到锁定用户下都不受影响。\n\n4、使用命令 passwd    (锁定后，做了ssh无密码信任的机器之间登录不受影响)\n\npasswd -l 用户            //锁定账号，-l:lock\n\npasswd -u 用户            //解禁用户，-u:unlock\n\n5、使用命令 usermod\n\nusermod -L 用户            //锁定帐号，-L:lock\n\nusermod -U 用户            //解锁帐号，-U:unlock\n\nusermod -e 1970-01-02 用户            //该账号的密码自1970年1月1日起，过一天后立即过期\n\nusermod 用户 -s /sbin/nologin        //修改用户的shell类型\n用usermod -s禁用的用户，禁用的提示信息可加在 /etc/nologin.txt ，若没有此文件可新建\n\n","source":"_posts/Linux-禁用账户.md","raw":"---\ntitle: Linux 禁用账户\ndate: 2020-09-11 18:12:09\ntags: [linux]\ncategories: linux\n---\n\n1、可直接修改/etc/passwd相关项来禁用账户：\n/etc/passwd username:x:uid:gid:explain:home:shell\n\nx-用户的密码原来直接存储在第二字段，但是为了安全，最后专门有了/etc/shadow文件，现在默认用x替代\n\nuid-用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始\n\n<!-- more -->\n\ngid-用户的gid,linux的用户都会有两个ID,一个是用户uid，一个是用户组id，在我们登录的时候，输入用户名和密码，其实会先到/etc/passwd查看是否有你输入的账号或者用户名，有的话将该账号与对应的UID和GID(在/etc/group中)读出来。然后读出主文件夹与shell的设置，然后再去检验密码是否正确，正确的话正常登录。\n\nexplain-用户的账号说明解释\n\nhome-用户的家目录文件夹\n\nshell-用户使用的shell，如果换成/sbin/nologin/就是默认没有登录环境的\n\n2、可直接修改/etc/shadow相关项来禁用账户：\n\n/etc/shadow username:passwd:lastchg:min:max:warn:inactive:expire:\n\nusername–用户名\n\npasswd–密码\n\nlastchg–从1970年1月1日起到上次修改密码所经过的天数\n\nmin–密码再过几天可以被变更(0表示随时可以改变)\n\nmax–密码再过几天必须被变更(99999表示永不过期)\n\nwarn–密码过期前几天提醒用户(默认为一周)\n\ninactive–密码过期几天后帐号被禁用\n\nexpire–从1970年1月1日算起，多少天后账号失效\n\n\n3、禁止所有的用户登录\n\necho \"hehe\" >> /etc/nologin\n\n这种方法设置后，只是禁止了从外部ssh登陆本机时有效！但是在本机上，无论是从root用户还是其他普通用户使用su命令切换到锁定用户下都不受影响。\n\n4、使用命令 passwd    (锁定后，做了ssh无密码信任的机器之间登录不受影响)\n\npasswd -l 用户            //锁定账号，-l:lock\n\npasswd -u 用户            //解禁用户，-u:unlock\n\n5、使用命令 usermod\n\nusermod -L 用户            //锁定帐号，-L:lock\n\nusermod -U 用户            //解锁帐号，-U:unlock\n\nusermod -e 1970-01-02 用户            //该账号的密码自1970年1月1日起，过一天后立即过期\n\nusermod 用户 -s /sbin/nologin        //修改用户的shell类型\n用usermod -s禁用的用户，禁用的提示信息可加在 /etc/nologin.txt ，若没有此文件可新建\n\n","slug":"Linux-禁用账户","published":1,"updated":"2020-09-11T10:15:32.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf50026sify4pfg8r1v","content":"<p>1、可直接修改/etc/passwd相关项来禁用账户：<br>\n/etc/passwd username❌uid:gid:explain:home:shell</p>\n<p>x-用户的密码原来直接存储在第二字段，但是为了安全，最后专门有了/etc/shadow文件，现在默认用x替代</p>\n<p>uid-用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始</p>\n<a id=\"more\"></a>\n<p>gid-用户的gid,linux的用户都会有两个ID,一个是用户uid，一个是用户组id，在我们登录的时候，输入用户名和密码，其实会先到/etc/passwd查看是否有你输入的账号或者用户名，有的话将该账号与对应的UID和GID(在/etc/group中)读出来。然后读出主文件夹与shell的设置，然后再去检验密码是否正确，正确的话正常登录。</p>\n<p>explain-用户的账号说明解释</p>\n<p>home-用户的家目录文件夹</p>\n<p>shell-用户使用的shell，如果换成/sbin/nologin/就是默认没有登录环境的</p>\n<p>2、可直接修改/etc/shadow相关项来禁用账户：</p>\n<p>/etc/shadow username:passwd:lastchg:min:max:warn:inactive:expire:</p>\n<p>username–用户名</p>\n<p>passwd–密码</p>\n<p>lastchg–从1970年1月1日起到上次修改密码所经过的天数</p>\n<p>min–密码再过几天可以被变更(0表示随时可以改变)</p>\n<p>max–密码再过几天必须被变更(99999表示永不过期)</p>\n<p>warn–密码过期前几天提醒用户(默认为一周)</p>\n<p>inactive–密码过期几天后帐号被禁用</p>\n<p>expire–从1970年1月1日算起，多少天后账号失效</p>\n<p>3、禁止所有的用户登录</p>\n<p>echo “hehe” &gt;&gt; /etc/nologin</p>\n<p>这种方法设置后，只是禁止了从外部ssh登陆本机时有效！但是在本机上，无论是从root用户还是其他普通用户使用su命令切换到锁定用户下都不受影响。</p>\n<p>4、使用命令 passwd    (锁定后，做了ssh无密码信任的机器之间登录不受影响)</p>\n<p>passwd -l 用户            //锁定账号，-l:lock</p>\n<p>passwd -u 用户            //解禁用户，-u:unlock</p>\n<p>5、使用命令 usermod</p>\n<p>usermod -L 用户            //锁定帐号，-L:lock</p>\n<p>usermod -U 用户            //解锁帐号，-U:unlock</p>\n<p>usermod -e 1970-01-02 用户            //该账号的密码自1970年1月1日起，过一天后立即过期</p>\n<p>usermod 用户 -s /sbin/nologin        //修改用户的shell类型<br>\n用usermod -s禁用的用户，禁用的提示信息可加在 /etc/nologin.txt ，若没有此文件可新建</p>\n","site":{"data":{}},"excerpt":"<p>1、可直接修改/etc/passwd相关项来禁用账户：<br>\n/etc/passwd username❌uid:gid:explain:home:shell</p>\n<p>x-用户的密码原来直接存储在第二字段，但是为了安全，最后专门有了/etc/shadow文件，现在默认用x替代</p>\n<p>uid-用户的uid,一般情况下root为0，1-499默认为系统账号，有的更大些到1000，500-65535为用户的可登录账号，有的系统从1000开始</p>","more":"<p>gid-用户的gid,linux的用户都会有两个ID,一个是用户uid，一个是用户组id，在我们登录的时候，输入用户名和密码，其实会先到/etc/passwd查看是否有你输入的账号或者用户名，有的话将该账号与对应的UID和GID(在/etc/group中)读出来。然后读出主文件夹与shell的设置，然后再去检验密码是否正确，正确的话正常登录。</p>\n<p>explain-用户的账号说明解释</p>\n<p>home-用户的家目录文件夹</p>\n<p>shell-用户使用的shell，如果换成/sbin/nologin/就是默认没有登录环境的</p>\n<p>2、可直接修改/etc/shadow相关项来禁用账户：</p>\n<p>/etc/shadow username:passwd:lastchg:min:max:warn:inactive:expire:</p>\n<p>username–用户名</p>\n<p>passwd–密码</p>\n<p>lastchg–从1970年1月1日起到上次修改密码所经过的天数</p>\n<p>min–密码再过几天可以被变更(0表示随时可以改变)</p>\n<p>max–密码再过几天必须被变更(99999表示永不过期)</p>\n<p>warn–密码过期前几天提醒用户(默认为一周)</p>\n<p>inactive–密码过期几天后帐号被禁用</p>\n<p>expire–从1970年1月1日算起，多少天后账号失效</p>\n<p>3、禁止所有的用户登录</p>\n<p>echo “hehe” &gt;&gt; /etc/nologin</p>\n<p>这种方法设置后，只是禁止了从外部ssh登陆本机时有效！但是在本机上，无论是从root用户还是其他普通用户使用su命令切换到锁定用户下都不受影响。</p>\n<p>4、使用命令 passwd    (锁定后，做了ssh无密码信任的机器之间登录不受影响)</p>\n<p>passwd -l 用户            //锁定账号，-l:lock</p>\n<p>passwd -u 用户            //解禁用户，-u:unlock</p>\n<p>5、使用命令 usermod</p>\n<p>usermod -L 用户            //锁定帐号，-L:lock</p>\n<p>usermod -U 用户            //解锁帐号，-U:unlock</p>\n<p>usermod -e 1970-01-02 用户            //该账号的密码自1970年1月1日起，过一天后立即过期</p>\n<p>usermod 用户 -s /sbin/nologin        //修改用户的shell类型<br>\n用usermod -s禁用的用户，禁用的提示信息可加在 /etc/nologin.txt ，若没有此文件可新建</p>"},{"title":"Linux命令wc的详细用法","date":"2016-08-29T08:59:48.000Z","_content":"\nwc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）。在Windows的Word中有个“字数统计”的工具，可以帮我们把选中范围的字数、字符数统计出来。Linux下的wc命令可以实现这个 功能。使用vi打开文件的时候，底下的信息也会显示行数和字节数。\n\n<!-- more -->\n\n## 常用参数\n\n格式：wc -l <file>\n打印指定文件的文本行数。（l=小写L）\n以下参数可组合使用。\n参数：-c, --bytes\n打印字节数（print the byte counts）\n\n参数：-m, --chars\n打印字符数（print the character counts）\n\n参数：-l, --lines\n打印行数（print the newline counts）\n\n参数：-L, --max-line-length\n打印最长行的长度（print the length of the longest line）\n\n参数：-w, --words\n打印单词数（print the word counts）\n\n## 使用示例\n### 示例一\n[root@jfht ~]# wc /etc/passwd\n  46   66 2027 /etc/passwd\n行数 单词数 字节数 文件名\n[root@jfht ~]#\n[root@jfht ~]# wc -l /etc/passwd\n46 /etc/passwd\n[root@jfht ~]# wc -cmlwL /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]# wc -cmlLw /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]# wc -wcmlL /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]#\n问题来了：从上面的命令行执行结果来看，wc的输出数据的顺序与的几个参数的顺序好像没有关系？！\n### 示例二 用wc命令怎么做到只打印统计数字不打印文件名\n使用管道线。这在编写shell脚本时特别有用。\n[root@jfht ~]# wc -l /etc/passwd\n46 /etc/passwd\n[root@jfht ~]# cat /etc/passwd | wc -l\n46\n[root@jfht ~]#\n### 示例三 中文编码的问题\n执行环境是中文编码的。\n[root@jfht ~]# echo $LANG\nzh_CN.GB18030\n中文编码文件ehr_object.gv，UTF8编码的文件ehr_object_utf8.gv。\n[root@jfht ~]# file ehr_object.gv ehr_object_utf8.gv\nehr_object.gv:      ISO-8859 text\nehr_object_utf8.gv: UTF-8 Unicode text\n[root@jfht ~]#\n[root@jfht ~]# wc ehr_object.gv ehr_object_utf8.gv\n  11  105  830 ehr_object.gv\nwc: ehr_object_utf8.gv:4: 无效或不完整的多字节字符或宽字符\n  11  105  866 ehr_object_utf8.gv\n  22  210 1696 总计\n[root@jfht ~]#\n### 示例四 中文单词数的计算\n[root@jfht ~]# cat test.txt\n你好Word\nLinux\n\n[root@jfht ~]# wc test.txt\n 3  2 16 test.txt\n行数 单词数 字节数 文件名\n[root@jfht ~]#\n","source":"_posts/Linux命令wc的详细用法.md","raw":"---\ntitle: Linux命令wc的详细用法\ndate: 2016-08-29 16:59:48\ntags: [linux]\ncategories: linux\n---\n\nwc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）。在Windows的Word中有个“字数统计”的工具，可以帮我们把选中范围的字数、字符数统计出来。Linux下的wc命令可以实现这个 功能。使用vi打开文件的时候，底下的信息也会显示行数和字节数。\n\n<!-- more -->\n\n## 常用参数\n\n格式：wc -l <file>\n打印指定文件的文本行数。（l=小写L）\n以下参数可组合使用。\n参数：-c, --bytes\n打印字节数（print the byte counts）\n\n参数：-m, --chars\n打印字符数（print the character counts）\n\n参数：-l, --lines\n打印行数（print the newline counts）\n\n参数：-L, --max-line-length\n打印最长行的长度（print the length of the longest line）\n\n参数：-w, --words\n打印单词数（print the word counts）\n\n## 使用示例\n### 示例一\n[root@jfht ~]# wc /etc/passwd\n  46   66 2027 /etc/passwd\n行数 单词数 字节数 文件名\n[root@jfht ~]#\n[root@jfht ~]# wc -l /etc/passwd\n46 /etc/passwd\n[root@jfht ~]# wc -cmlwL /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]# wc -cmlLw /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]# wc -wcmlL /etc/passwd\n  46   66 2027 2027   74 /etc/passwd\n[root@jfht ~]#\n问题来了：从上面的命令行执行结果来看，wc的输出数据的顺序与的几个参数的顺序好像没有关系？！\n### 示例二 用wc命令怎么做到只打印统计数字不打印文件名\n使用管道线。这在编写shell脚本时特别有用。\n[root@jfht ~]# wc -l /etc/passwd\n46 /etc/passwd\n[root@jfht ~]# cat /etc/passwd | wc -l\n46\n[root@jfht ~]#\n### 示例三 中文编码的问题\n执行环境是中文编码的。\n[root@jfht ~]# echo $LANG\nzh_CN.GB18030\n中文编码文件ehr_object.gv，UTF8编码的文件ehr_object_utf8.gv。\n[root@jfht ~]# file ehr_object.gv ehr_object_utf8.gv\nehr_object.gv:      ISO-8859 text\nehr_object_utf8.gv: UTF-8 Unicode text\n[root@jfht ~]#\n[root@jfht ~]# wc ehr_object.gv ehr_object_utf8.gv\n  11  105  830 ehr_object.gv\nwc: ehr_object_utf8.gv:4: 无效或不完整的多字节字符或宽字符\n  11  105  866 ehr_object_utf8.gv\n  22  210 1696 总计\n[root@jfht ~]#\n### 示例四 中文单词数的计算\n[root@jfht ~]# cat test.txt\n你好Word\nLinux\n\n[root@jfht ~]# wc test.txt\n 3  2 16 test.txt\n行数 单词数 字节数 文件名\n[root@jfht ~]#\n","slug":"Linux命令wc的详细用法","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf60029sify0cqqyhds","content":"<p>wc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）。在Windows的Word中有个“字数统计”的工具，可以帮我们把选中范围的字数、字符数统计出来。Linux下的wc命令可以实现这个 功能。使用vi打开文件的时候，底下的信息也会显示行数和字节数。</p>\n<a id=\"more\"></a>\n<h2 id=\"常用参数\"><a class=\"markdownIt-Anchor\" href=\"#常用参数\"></a> 常用参数</h2>\n<p>格式：wc -l <file><br>\n打印指定文件的文本行数。（l=小写L）<br>\n以下参数可组合使用。<br>\n参数：-c, --bytes<br>\n打印字节数（print the byte counts）</file></p>\n<p>参数：-m, --chars<br>\n打印字符数（print the character counts）</p>\n<p>参数：-l, --lines<br>\n打印行数（print the newline counts）</p>\n<p>参数：-L, --max-line-length<br>\n打印最长行的长度（print the length of the longest line）</p>\n<p>参数：-w, --words<br>\n打印单词数（print the word counts）</p>\n<h2 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\"></a> 使用示例</h2>\n<h3 id=\"示例一\"><a class=\"markdownIt-Anchor\" href=\"#示例一\"></a> 示例一</h3>\n<p>[root@jfht ~]# wc /etc/passwd<br>\n46   66 2027 /etc/passwd<br>\n行数 单词数 字节数 文件名<br>\n[root@jfht ~]#<br>\n[root@jfht ~]# wc -l /etc/passwd<br>\n46 /etc/passwd<br>\n[root@jfht ~]# wc -cmlwL /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]# wc -cmlLw /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]# wc -wcmlL /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]#<br>\n问题来了：从上面的命令行执行结果来看，wc的输出数据的顺序与的几个参数的顺序好像没有关系？！</p>\n<h3 id=\"示例二-用wc命令怎么做到只打印统计数字不打印文件名\"><a class=\"markdownIt-Anchor\" href=\"#示例二-用wc命令怎么做到只打印统计数字不打印文件名\"></a> 示例二 用wc命令怎么做到只打印统计数字不打印文件名</h3>\n<p>使用管道线。这在编写shell脚本时特别有用。<br>\n[root@jfht ~]# wc -l /etc/passwd<br>\n46 /etc/passwd<br>\n[root@jfht ~]# cat /etc/passwd | wc -l<br>\n46<br>\n[root@jfht ~]#</p>\n<h3 id=\"示例三-中文编码的问题\"><a class=\"markdownIt-Anchor\" href=\"#示例三-中文编码的问题\"></a> 示例三 中文编码的问题</h3>\n<p>执行环境是中文编码的。<br>\n[root@jfht ~]# echo $LANG<br>\nzh_CN.GB18030<br>\n中文编码文件ehr_object.gv，UTF8编码的文件ehr_object_utf8.gv。<br>\n[root@jfht ~]# file ehr_object.gv ehr_object_utf8.gv<br>\nehr_object.gv:      ISO-8859 text<br>\nehr_object_utf8.gv: UTF-8 Unicode text<br>\n[root@jfht ~]#<br>\n[root@jfht ~]# wc ehr_object.gv ehr_object_utf8.gv<br>\n11  105  830 ehr_object.gv<br>\nwc: ehr_object_utf8.gv:4: 无效或不完整的多字节字符或宽字符<br>\n11  105  866 ehr_object_utf8.gv<br>\n22  210 1696 总计<br>\n[root@jfht ~]#</p>\n<h3 id=\"示例四-中文单词数的计算\"><a class=\"markdownIt-Anchor\" href=\"#示例四-中文单词数的计算\"></a> 示例四 中文单词数的计算</h3>\n<p>[root@jfht ~]# cat test.txt<br>\n你好Word<br>\nLinux</p>\n<p>[root@jfht ~]# wc test.txt<br>\n3  2 16 test.txt<br>\n行数 单词数 字节数 文件名<br>\n[root@jfht ~]#</p>\n","site":{"data":{}},"excerpt":"<p>wc命令用来打印文件的文本行数、单词数、字节数等（print the number of newlines, words, and bytes in files）。在Windows的Word中有个“字数统计”的工具，可以帮我们把选中范围的字数、字符数统计出来。Linux下的wc命令可以实现这个 功能。使用vi打开文件的时候，底下的信息也会显示行数和字节数。</p>","more":"<h2 id=\"常用参数\"><a class=\"markdownIt-Anchor\" href=\"#常用参数\"></a> 常用参数</h2>\n<p>格式：wc -l <file><br>\n打印指定文件的文本行数。（l=小写L）<br>\n以下参数可组合使用。<br>\n参数：-c, --bytes<br>\n打印字节数（print the byte counts）</file></p>\n<p>参数：-m, --chars<br>\n打印字符数（print the character counts）</p>\n<p>参数：-l, --lines<br>\n打印行数（print the newline counts）</p>\n<p>参数：-L, --max-line-length<br>\n打印最长行的长度（print the length of the longest line）</p>\n<p>参数：-w, --words<br>\n打印单词数（print the word counts）</p>\n<h2 id=\"使用示例\"><a class=\"markdownIt-Anchor\" href=\"#使用示例\"></a> 使用示例</h2>\n<h3 id=\"示例一\"><a class=\"markdownIt-Anchor\" href=\"#示例一\"></a> 示例一</h3>\n<p>[root@jfht ~]# wc /etc/passwd<br>\n46   66 2027 /etc/passwd<br>\n行数 单词数 字节数 文件名<br>\n[root@jfht ~]#<br>\n[root@jfht ~]# wc -l /etc/passwd<br>\n46 /etc/passwd<br>\n[root@jfht ~]# wc -cmlwL /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]# wc -cmlLw /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]# wc -wcmlL /etc/passwd<br>\n46   66 2027 2027   74 /etc/passwd<br>\n[root@jfht ~]#<br>\n问题来了：从上面的命令行执行结果来看，wc的输出数据的顺序与的几个参数的顺序好像没有关系？！</p>\n<h3 id=\"示例二-用wc命令怎么做到只打印统计数字不打印文件名\"><a class=\"markdownIt-Anchor\" href=\"#示例二-用wc命令怎么做到只打印统计数字不打印文件名\"></a> 示例二 用wc命令怎么做到只打印统计数字不打印文件名</h3>\n<p>使用管道线。这在编写shell脚本时特别有用。<br>\n[root@jfht ~]# wc -l /etc/passwd<br>\n46 /etc/passwd<br>\n[root@jfht ~]# cat /etc/passwd | wc -l<br>\n46<br>\n[root@jfht ~]#</p>\n<h3 id=\"示例三-中文编码的问题\"><a class=\"markdownIt-Anchor\" href=\"#示例三-中文编码的问题\"></a> 示例三 中文编码的问题</h3>\n<p>执行环境是中文编码的。<br>\n[root@jfht ~]# echo $LANG<br>\nzh_CN.GB18030<br>\n中文编码文件ehr_object.gv，UTF8编码的文件ehr_object_utf8.gv。<br>\n[root@jfht ~]# file ehr_object.gv ehr_object_utf8.gv<br>\nehr_object.gv:      ISO-8859 text<br>\nehr_object_utf8.gv: UTF-8 Unicode text<br>\n[root@jfht ~]#<br>\n[root@jfht ~]# wc ehr_object.gv ehr_object_utf8.gv<br>\n11  105  830 ehr_object.gv<br>\nwc: ehr_object_utf8.gv:4: 无效或不完整的多字节字符或宽字符<br>\n11  105  866 ehr_object_utf8.gv<br>\n22  210 1696 总计<br>\n[root@jfht ~]#</p>\n<h3 id=\"示例四-中文单词数的计算\"><a class=\"markdownIt-Anchor\" href=\"#示例四-中文单词数的计算\"></a> 示例四 中文单词数的计算</h3>\n<p>[root@jfht ~]# cat test.txt<br>\n你好Word<br>\nLinux</p>\n<p>[root@jfht ~]# wc test.txt<br>\n3  2 16 test.txt<br>\n行数 单词数 字节数 文件名<br>\n[root@jfht ~]#</p>"},{"title":"Linux搜索命令ag","date":"2019-09-24T02:25:34.000Z","_content":"\nag的the\\_silver\\_searcher介绍，搜索代码神器\n\n<!-- more -->\n\nthe\\_silver\\_searcher是什么？ ag又是什么？\n\n作者主页关于the\\_silver\\_searcher的说明：[http://geoff.greer.fm/ag/](http://geoff.greer.fm/ag/)\n\nThe Silver Searcher is a tool for searching code. It started off as a clone of Ack, but their feature sets have since diverged slightly. In typical usage, Ag is 5-10x faster than Ack. See the GitHub page for more info.\n\n源代码：[https://github.com/ggreer/the\\_silver\\_searcher](https://github.com/ggreer/the_silver_searcher)\n\n\nMac 下安装：\n\n``` \nbrew install the_silver_searcher\n```\n\nMac 下卸载：\n\n```\nbrew uninstall the_silver_searcher\n```\n\n使用方法\n\n```\nag 'hx' /www/t086.com\n\n```\n\n常用参数\n-i 忽略大小写\n-l 只列出文件名\n-g 文件名匹配\n--php 只搜索php文件\n--ignore-dir 忽略目录\n\n如：\n\n```\nag --ignore-dir sitedata --php hx /www/9enjoy.com\n```\n\n更多\n\n-h 看帮助吧","source":"_posts/Linux搜索命令ag.md","raw":"---\ntitle: Linux搜索命令ag\ndate: 2019-09-24 10:25:34\ntags: [linux, ag]\ncategories: linux\n---\n\nag的the\\_silver\\_searcher介绍，搜索代码神器\n\n<!-- more -->\n\nthe\\_silver\\_searcher是什么？ ag又是什么？\n\n作者主页关于the\\_silver\\_searcher的说明：[http://geoff.greer.fm/ag/](http://geoff.greer.fm/ag/)\n\nThe Silver Searcher is a tool for searching code. It started off as a clone of Ack, but their feature sets have since diverged slightly. In typical usage, Ag is 5-10x faster than Ack. See the GitHub page for more info.\n\n源代码：[https://github.com/ggreer/the\\_silver\\_searcher](https://github.com/ggreer/the_silver_searcher)\n\n\nMac 下安装：\n\n``` \nbrew install the_silver_searcher\n```\n\nMac 下卸载：\n\n```\nbrew uninstall the_silver_searcher\n```\n\n使用方法\n\n```\nag 'hx' /www/t086.com\n\n```\n\n常用参数\n-i 忽略大小写\n-l 只列出文件名\n-g 文件名匹配\n--php 只搜索php文件\n--ignore-dir 忽略目录\n\n如：\n\n```\nag --ignore-dir sitedata --php hx /www/9enjoy.com\n```\n\n更多\n\n-h 看帮助吧","slug":"Linux搜索命令ag","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf7002dsifytf4pxstt","content":"<p>ag的the_silver_searcher介绍，搜索代码神器</p>\n<a id=\"more\"></a>\n<p>the_silver_searcher是什么？ ag又是什么？</p>\n<p>作者主页关于the_silver_searcher的说明：<a href=\"http://geoff.greer.fm/ag/\" target=\"_blank\" rel=\"noopener\">http://geoff.greer.fm/ag/</a></p>\n<p>The Silver Searcher is a tool for searching code. It started off as a clone of Ack, but their feature sets have since diverged slightly. In typical usage, Ag is 5-10x faster than Ack. See the GitHub page for more info.</p>\n<p>源代码：<a href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\" rel=\"noopener\">https://github.com/ggreer/the_silver_searcher</a></p>\n<p>Mac 下安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>the_silver_searcher</span><br></pre></td></tr></table></figure>\n<p>Mac 下卸载：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span>uninstall the_silver_searcher</span><br></pre></td></tr></table></figure>\n<p>使用方法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ag <span class=\"string\">'hx'</span> <span class=\"regexp\">/www/</span>t086.com</span><br></pre></td></tr></table></figure>\n<p>常用参数<br>\n-i 忽略大小写<br>\n-l 只列出文件名<br>\n-g 文件名匹配<br>\n–php 只搜索php文件<br>\n–ignore-dir 忽略目录</p>\n<p>如：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ag <span class=\"params\">--ignore-dir</span> sitedata <span class=\"params\">--php</span> hx <span class=\"string\">/www/9enjoy.com</span></span><br></pre></td></tr></table></figure>\n<p>更多</p>\n<p>-h 看帮助吧</p>\n","site":{"data":{}},"excerpt":"<p>ag的the_silver_searcher介绍，搜索代码神器</p>","more":"<p>the_silver_searcher是什么？ ag又是什么？</p>\n<p>作者主页关于the_silver_searcher的说明：<a href=\"http://geoff.greer.fm/ag/\" target=\"_blank\" rel=\"noopener\">http://geoff.greer.fm/ag/</a></p>\n<p>The Silver Searcher is a tool for searching code. It started off as a clone of Ack, but their feature sets have since diverged slightly. In typical usage, Ag is 5-10x faster than Ack. See the GitHub page for more info.</p>\n<p>源代码：<a href=\"https://github.com/ggreer/the_silver_searcher\" target=\"_blank\" rel=\"noopener\">https://github.com/ggreer/the_silver_searcher</a></p>\n<p>Mac 下安装：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>the_silver_searcher</span><br></pre></td></tr></table></figure>\n<p>Mac 下卸载：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span>uninstall the_silver_searcher</span><br></pre></td></tr></table></figure>\n<p>使用方法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ag <span class=\"string\">'hx'</span> <span class=\"regexp\">/www/</span>t086.com</span><br></pre></td></tr></table></figure>\n<p>常用参数<br>\n-i 忽略大小写<br>\n-l 只列出文件名<br>\n-g 文件名匹配<br>\n–php 只搜索php文件<br>\n–ignore-dir 忽略目录</p>\n<p>如：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ag <span class=\"params\">--ignore-dir</span> sitedata <span class=\"params\">--php</span> hx <span class=\"string\">/www/9enjoy.com</span></span><br></pre></td></tr></table></figure>\n<p>更多</p>\n<p>-h 看帮助吧</p>"},{"title":"Mac下，添加Android adb命令","date":"2016-03-09T15:58:48.000Z","_content":"\n1 在用户目录下 ~/.bash_profile 如果存在打开，不存在则创建\n\n``` \nvim ~/.bash_profile\n```\n2 加入我们需要的添加的环境变量，例如：Android需要添加platform-tools 和 tools\n\n<!--more-->\n``` \nexport PATH=${PATH}:/Users/user/android-sdks/platform-tools:/Users/user/android-sdks/tools \n\n或者\nexport PATH=/Users/user/android-sdks/platform-tools:$PATH \nexport PATH=/Users/user/android-sdks/tools:$PATH \n\n其中 :$PATH 不能少，表示加入系统的环境变量\n```\n\n3 进行验证 \n\n> 重新打开一个终端：输入adb,即可验证。\n\n\n\n","source":"_posts/Mac下，添加Android-adb命令.md","raw":"---\ntitle: Mac下，添加Android adb命令\ndate: 2016-03-09 23:58:48\ntags: [mac]\ncategories: mac\n---\n\n1 在用户目录下 ~/.bash_profile 如果存在打开，不存在则创建\n\n``` \nvim ~/.bash_profile\n```\n2 加入我们需要的添加的环境变量，例如：Android需要添加platform-tools 和 tools\n\n<!--more-->\n``` \nexport PATH=${PATH}:/Users/user/android-sdks/platform-tools:/Users/user/android-sdks/tools \n\n或者\nexport PATH=/Users/user/android-sdks/platform-tools:$PATH \nexport PATH=/Users/user/android-sdks/tools:$PATH \n\n其中 :$PATH 不能少，表示加入系统的环境变量\n```\n\n3 进行验证 \n\n> 重新打开一个终端：输入adb,即可验证。\n\n\n\n","slug":"Mac下，添加Android-adb命令","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf8002fsifyrc7fnuq8","content":"<p>1 在用户目录下 ~/.bash_profile 如果存在打开，不存在则创建</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~<span class=\"string\">/.bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>2 加入我们需要的添加的环境变量，例如：Android需要添加platform-tools 和 tools</p>\n<a id=\"more\"></a>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=<span class=\"variable\">$&#123;</span>PATH&#125;<span class=\"symbol\">:/Users/user/android-sdks/platform-tools</span><span class=\"symbol\">:/Users/user/android-sdks/tools</span> </span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">export PATH=<span class=\"regexp\">/Users/user</span><span class=\"regexp\">/android-sdks/platform</span>-<span class=\"symbol\">tools:</span><span class=\"variable\">$PATH</span> </span><br><span class=\"line\">export PATH=<span class=\"regexp\">/Users/user</span><span class=\"regexp\">/android-sdks/tools</span><span class=\"symbol\">:</span><span class=\"variable\">$PATH</span> </span><br><span class=\"line\"></span><br><span class=\"line\">其中 <span class=\"symbol\">:</span><span class=\"variable\">$PATH</span> 不能少，表示加入系统的环境变量</span><br></pre></td></tr></table></figure>\n<p>3 进行验证</p>\n<blockquote>\n<p>重新打开一个终端：输入adb,即可验证。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>1 在用户目录下 ~/.bash_profile 如果存在打开，不存在则创建</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~<span class=\"string\">/.bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>2 加入我们需要的添加的环境变量，例如：Android需要添加platform-tools 和 tools</p>","more":"<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=<span class=\"variable\">$&#123;</span>PATH&#125;<span class=\"symbol\">:/Users/user/android-sdks/platform-tools</span><span class=\"symbol\">:/Users/user/android-sdks/tools</span> </span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\">export PATH=<span class=\"regexp\">/Users/user</span><span class=\"regexp\">/android-sdks/platform</span>-<span class=\"symbol\">tools:</span><span class=\"variable\">$PATH</span> </span><br><span class=\"line\">export PATH=<span class=\"regexp\">/Users/user</span><span class=\"regexp\">/android-sdks/tools</span><span class=\"symbol\">:</span><span class=\"variable\">$PATH</span> </span><br><span class=\"line\"></span><br><span class=\"line\">其中 <span class=\"symbol\">:</span><span class=\"variable\">$PATH</span> 不能少，表示加入系统的环境变量</span><br></pre></td></tr></table></figure>\n<p>3 进行验证</p>\n<blockquote>\n<p>重新打开一个终端：输入adb,即可验证。</p>\n</blockquote>"},{"title":"Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7","date":"2016-03-20T04:15:20.000Z","_content":"\n# Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7\n\n### 与 MySQL 5.6 相比, 5.7 版本在安装时有两处不同:\n> 初始化方式改变，从`scripts/mysql_install_db --user=mysql` 初始化方式变成了`bin/mysqld --initialize --user=mysql`方式；\n> 初始密码生成改变, 5.6 的版本在 tar gz 方式初始化完成后默认 root 密码为空, 5.7 版本在初始化完成后会生成一个临时的 root 密码。\n\n<!-- more -->\n```\n系统环境: OS X El Capitan 10.11.1\n登录用户: wid (有 sudo 权限)\nMySQL 版本: 5.7.9 (mysql-5.7.9-osx10.10-x86_64.tar.gz)\nMySQL下载: http://dev.mysql.com/downloads/mysql/\n```\n### 和 MySQL 5.6 tar gz 安装方式一样, 解压并移动到指定安装目录中并执行初始化:\n\n```\n# 解压\ncd /Users/<YourName>/Downloads\ntar zxvf mysql-5.7.9-osx10.10-x86_64.tar.gz\n\n# 移动解压后的二进制包到安装目录\nsudo mv mysql-5.7.9-osx10.10-x86_64 /usr/local/mysql\n\n# 更改 mysql 安装目录所属用户与用户组\ncd /usr/local\nsudo chown -R root:wheel mysql\n\n# 切换到 mysql 安装目录并执行初始化命令并记录生成的临时 root 密码\ncd /usr/local/mysql\nsudo bin/mysqld --initialize --user=mysql\n```\n **注意**:需要记录在初始化完成后命令行窗口中显示的临时 root 密码, 如图:\n ![mysql-pwd-pic](http://7xpj58.com1.z0.glb.clouddn.com/20160320mysql.png)\n\n### 测试启动、重启与停止:\n\n```\ncd /usr/local/mysql\n\n# 启动\nsudo support-files/mysql.server start\n\n# 重启\nsudo support-files/mysql.server restart\n\n# 停止\nsudo support-files/mysql.server stop\n\n# 检查 MySQL 运行状态\nsudo support-files/mysql.server status\n```\n### 修改 MySQL root 初始密码\n\n```\n# 需要 MySQL 服务在运行状态执行\ncd /usr/local/mysql/bin\n./mysqladmin -u root -p password 新密码\n输入生成的临时密码↵\n```\n\n\n","source":"_posts/Mac-OS-X-下-TAR-GZ-方式安装-MySQL-5-7.md","raw":"---\ntitle: Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7\ndate: 2016-03-20 12:15:20\ntags: [mysql, 数据库, mac]\ncategories: mac\n---\n\n# Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7\n\n### 与 MySQL 5.6 相比, 5.7 版本在安装时有两处不同:\n> 初始化方式改变，从`scripts/mysql_install_db --user=mysql` 初始化方式变成了`bin/mysqld --initialize --user=mysql`方式；\n> 初始密码生成改变, 5.6 的版本在 tar gz 方式初始化完成后默认 root 密码为空, 5.7 版本在初始化完成后会生成一个临时的 root 密码。\n\n<!-- more -->\n```\n系统环境: OS X El Capitan 10.11.1\n登录用户: wid (有 sudo 权限)\nMySQL 版本: 5.7.9 (mysql-5.7.9-osx10.10-x86_64.tar.gz)\nMySQL下载: http://dev.mysql.com/downloads/mysql/\n```\n### 和 MySQL 5.6 tar gz 安装方式一样, 解压并移动到指定安装目录中并执行初始化:\n\n```\n# 解压\ncd /Users/<YourName>/Downloads\ntar zxvf mysql-5.7.9-osx10.10-x86_64.tar.gz\n\n# 移动解压后的二进制包到安装目录\nsudo mv mysql-5.7.9-osx10.10-x86_64 /usr/local/mysql\n\n# 更改 mysql 安装目录所属用户与用户组\ncd /usr/local\nsudo chown -R root:wheel mysql\n\n# 切换到 mysql 安装目录并执行初始化命令并记录生成的临时 root 密码\ncd /usr/local/mysql\nsudo bin/mysqld --initialize --user=mysql\n```\n **注意**:需要记录在初始化完成后命令行窗口中显示的临时 root 密码, 如图:\n ![mysql-pwd-pic](http://7xpj58.com1.z0.glb.clouddn.com/20160320mysql.png)\n\n### 测试启动、重启与停止:\n\n```\ncd /usr/local/mysql\n\n# 启动\nsudo support-files/mysql.server start\n\n# 重启\nsudo support-files/mysql.server restart\n\n# 停止\nsudo support-files/mysql.server stop\n\n# 检查 MySQL 运行状态\nsudo support-files/mysql.server status\n```\n### 修改 MySQL root 初始密码\n\n```\n# 需要 MySQL 服务在运行状态执行\ncd /usr/local/mysql/bin\n./mysqladmin -u root -p password 新密码\n输入生成的临时密码↵\n```\n\n\n","slug":"Mac-OS-X-下-TAR-GZ-方式安装-MySQL-5-7","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxf9002jsifyws1bc285","content":"<h1 id=\"mac-os-x-下-targz-方式安装-mysql-57\"><a class=\"markdownIt-Anchor\" href=\"#mac-os-x-下-targz-方式安装-mysql-57\"></a> Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7</h1>\n<h3 id=\"与-mysql-56-相比-57-版本在安装时有两处不同\"><a class=\"markdownIt-Anchor\" href=\"#与-mysql-56-相比-57-版本在安装时有两处不同\"></a> 与 MySQL 5.6 相比, 5.7 版本在安装时有两处不同:</h3>\n<blockquote>\n<p>初始化方式改变，从<code>scripts/mysql_install_db --user=mysql</code> 初始化方式变成了<code>bin/mysqld --initialize --user=mysql</code>方式；<br>\n初始密码生成改变, 5.6 的版本在 tar gz 方式初始化完成后默认 root 密码为空, 5.7 版本在初始化完成后会生成一个临时的 root 密码。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统环境: OS X El Capitan <span class=\"number\">10.11</span><span class=\"number\">.1</span></span><br><span class=\"line\">登录用户: wid (有 sudo 权限)</span><br><span class=\"line\">MySQL 版本: <span class=\"number\">5.7</span><span class=\"number\">.9</span> (mysql<span class=\"number\">-5.7</span><span class=\"number\">.9</span>-osx10<span class=\"number\">.10</span>-x86_64.tar.gz)</span><br><span class=\"line\">MySQL下载: http:<span class=\"comment\">//dev.mysql.com/downloads/mysql/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化\"><a class=\"markdownIt-Anchor\" href=\"#和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化\"></a> 和 MySQL 5.6 tar gz 安装方式一样, 解压并移动到指定安装目录中并执行初始化:</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/Users/</span>&lt;YourName&gt;<span class=\"string\">/Downloads</span></span><br><span class=\"line\">tar zxvf mysql-5.7.9-osx10.10-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动解压后的二进制包到安装目录</span></span><br><span class=\"line\">sudo mv mysql-5.7.9-osx10.10-x86_64 <span class=\"string\">/usr/local/mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改 mysql 安装目录所属用户与用户组</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">sudo chown -R root<span class=\"function\">:wheel</span> mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到 mysql 安装目录并执行初始化命令并记录生成的临时 root 密码</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/mysql</span></span><br><span class=\"line\">sudo bin/mysqld <span class=\"params\">--initialize</span> <span class=\"params\">--user=mysql</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:需要记录在初始化完成后命令行窗口中显示的临时 root 密码, 如图:<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160320mysql.png\" alt=\"mysql-pwd-pic\"></p>\n<h3 id=\"测试启动-重启与停止\"><a class=\"markdownIt-Anchor\" href=\"#测试启动-重启与停止\"></a> 测试启动、重启与停止:</h3>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">stop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查 MySQL 运行状态</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server status</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-mysql-root-初始密码\"><a class=\"markdownIt-Anchor\" href=\"#修改-mysql-root-初始密码\"></a> 修改 MySQL root 初始密码</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要 MySQL 服务在运行状态执行</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/mysql/bin</span></span><br><span class=\"line\"><span class=\"string\">./mysqladmin</span> -u root -p password 新密码</span><br><span class=\"line\">输入生成的临时密码↵</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"mac-os-x-下-targz-方式安装-mysql-57\"><a class=\"markdownIt-Anchor\" href=\"#mac-os-x-下-targz-方式安装-mysql-57\"></a> Mac OS X 下 TAR.GZ 方式安装 MySQL 5.7</h1>\n<h3 id=\"与-mysql-56-相比-57-版本在安装时有两处不同\"><a class=\"markdownIt-Anchor\" href=\"#与-mysql-56-相比-57-版本在安装时有两处不同\"></a> 与 MySQL 5.6 相比, 5.7 版本在安装时有两处不同:</h3>\n<blockquote>\n<p>初始化方式改变，从<code>scripts/mysql_install_db --user=mysql</code> 初始化方式变成了<code>bin/mysqld --initialize --user=mysql</code>方式；<br>\n初始密码生成改变, 5.6 的版本在 tar gz 方式初始化完成后默认 root 密码为空, 5.7 版本在初始化完成后会生成一个临时的 root 密码。</p>\n</blockquote>","more":"<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统环境: OS X El Capitan <span class=\"number\">10.11</span><span class=\"number\">.1</span></span><br><span class=\"line\">登录用户: wid (有 sudo 权限)</span><br><span class=\"line\">MySQL 版本: <span class=\"number\">5.7</span><span class=\"number\">.9</span> (mysql<span class=\"number\">-5.7</span><span class=\"number\">.9</span>-osx10<span class=\"number\">.10</span>-x86_64.tar.gz)</span><br><span class=\"line\">MySQL下载: http:<span class=\"comment\">//dev.mysql.com/downloads/mysql/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化\"><a class=\"markdownIt-Anchor\" href=\"#和-mysql-56-tar-gz-安装方式一样-解压并移动到指定安装目录中并执行初始化\"></a> 和 MySQL 5.6 tar gz 安装方式一样, 解压并移动到指定安装目录中并执行初始化:</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/Users/</span>&lt;YourName&gt;<span class=\"string\">/Downloads</span></span><br><span class=\"line\">tar zxvf mysql-5.7.9-osx10.10-x86_64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动解压后的二进制包到安装目录</span></span><br><span class=\"line\">sudo mv mysql-5.7.9-osx10.10-x86_64 <span class=\"string\">/usr/local/mysql</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 更改 mysql 安装目录所属用户与用户组</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local</span></span><br><span class=\"line\">sudo chown -R root<span class=\"function\">:wheel</span> mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换到 mysql 安装目录并执行初始化命令并记录生成的临时 root 密码</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/mysql</span></span><br><span class=\"line\">sudo bin/mysqld <span class=\"params\">--initialize</span> <span class=\"params\">--user=mysql</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:需要记录在初始化完成后命令行窗口中显示的临时 root 密码, 如图:<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160320mysql.png\" alt=\"mysql-pwd-pic\"></p>\n<h3 id=\"测试启动-重启与停止\"><a class=\"markdownIt-Anchor\" href=\"#测试启动-重启与停止\"></a> 测试启动、重启与停止:</h3>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/<span class=\"built_in\">local</span>/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">start</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server restart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server <span class=\"built_in\">stop</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查 MySQL 运行状态</span></span><br><span class=\"line\">sudo support-<span class=\"built_in\">files</span>/mysql.server status</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-mysql-root-初始密码\"><a class=\"markdownIt-Anchor\" href=\"#修改-mysql-root-初始密码\"></a> 修改 MySQL root 初始密码</h3>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 需要 MySQL 服务在运行状态执行</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/mysql/bin</span></span><br><span class=\"line\"><span class=\"string\">./mysqladmin</span> -u root -p password 新密码</span><br><span class=\"line\">输入生成的临时密码↵</span><br></pre></td></tr></table></figure>"},{"title":"Mac 清除 DNS 缓存","date":"2016-03-18T11:28:30.000Z","_content":"\n# Mac 清除 DNS 缓存\n\n<!-- more -->\n打开 Terminal，根据你的系统版本运行对应的命令：\n\nMac OSX 10.11\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.10.4以上\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.10.0 - 10.10.3\n> sudo discoveryutil mdnsflushcache\n\nMac OSX 10.7 & 10.8 & 10.9\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.6\n> dscacheutil -flushcache\n\n\n","source":"_posts/Mac-清除-DNS-缓存.md","raw":"---\ntitle: Mac 清除 DNS 缓存\ndate: 2016-03-18 19:28:30\ntags: [mac, dns, 缓存]\ncategories: mac\n---\n\n# Mac 清除 DNS 缓存\n\n<!-- more -->\n打开 Terminal，根据你的系统版本运行对应的命令：\n\nMac OSX 10.11\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.10.4以上\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.10.0 - 10.10.3\n> sudo discoveryutil mdnsflushcache\n\nMac OSX 10.7 & 10.8 & 10.9\n> sudo killall -HUP mDNSResponder\n\nMac OSX 10.6\n> dscacheutil -flushcache\n\n\n","slug":"Mac-清除-DNS-缓存","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfa002lsifyo1h194p7","content":"<h1 id=\"mac-清除-dns-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mac-清除-dns-缓存\"></a> Mac 清除 DNS 缓存</h1>\n<a id=\"more\"></a>\n<p>打开 Terminal，根据你的系统版本运行对应的命令：</p>\n<p>Mac OSX 10.11</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.10.4以上</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.10.0 - 10.10.3</p>\n<blockquote>\n<p>sudo discoveryutil mdnsflushcache</p>\n</blockquote>\n<p>Mac OSX 10.7 &amp; 10.8 &amp; 10.9</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.6</p>\n<blockquote>\n<p>dscacheutil -flushcache</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"mac-清除-dns-缓存\"><a class=\"markdownIt-Anchor\" href=\"#mac-清除-dns-缓存\"></a> Mac 清除 DNS 缓存</h1>","more":"<p>打开 Terminal，根据你的系统版本运行对应的命令：</p>\n<p>Mac OSX 10.11</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.10.4以上</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.10.0 - 10.10.3</p>\n<blockquote>\n<p>sudo discoveryutil mdnsflushcache</p>\n</blockquote>\n<p>Mac OSX 10.7 &amp; 10.8 &amp; 10.9</p>\n<blockquote>\n<p>sudo killall -HUP mDNSResponder</p>\n</blockquote>\n<p>Mac OSX 10.6</p>\n<blockquote>\n<p>dscacheutil -flushcache</p>\n</blockquote>"},{"title":"Makefile经典教程","date":"2019-05-22T04:12:31.000Z","_content":"\n[Makefile经典教程(掌握这些足够)](https://blog.csdn.net/u011857683/article/details/82049589)\n","source":"_posts/Makefile经典教程.md","raw":"---\ntitle: Makefile经典教程\ndate: 2019-05-22 12:12:31\ntags: [makefile, c]\ncategories: linux\n---\n\n[Makefile经典教程(掌握这些足够)](https://blog.csdn.net/u011857683/article/details/82049589)\n","slug":"Makefile经典教程","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfb002psifyscd7d69f","content":"<p><a href=\"https://blog.csdn.net/u011857683/article/details/82049589\" target=\"_blank\" rel=\"noopener\">Makefile经典教程(掌握这些足够)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://blog.csdn.net/u011857683/article/details/82049589\" target=\"_blank\" rel=\"noopener\">Makefile经典教程(掌握这些足够)</a></p>\n"},{"title":"Sublime快捷键","date":"2018-08-15T14:42:55.000Z","_content":"\n# Sublime快捷键\n\n<!-- more -->\n\n----\nAlt+R : 开启正则表达式功能 \n\nAlt+Enter: 找到匹配目标后全部选择 \n\nCtrl+R：前往 method（mac下⌘R） \n\nCtrl+M：跳转到对应括号 \n\n按Ctrl+Shift+上下键，可替换行 \n\nCtrl+D：选择单词，重复可增加选择下一个相同的单词 \n\nCtrl+L：选择行，重复可依次增加选择下一行 \n\nCtrl+Shift+P：打开命令面板 \n\nCtrl+P：搜索项目中的文件（mac下⌘P），在里面输入： \n\nadmi@auto 可以定位到相应文件夹(admin.html)下的相应方法（auto）。 \n\nCtrl+G：跳转到第几行 \n\nCtrl+W：关闭当前打开文件 \n\nCtrl+Shift+W：关闭所有打开文件 \n\nCtrl+Shift+V：粘贴并格式化 \n\nCtrl+Shift+L：选择多行 \n\nCtrl+Shift+Enter：在当前行前插入新行 \n\nCtrl+X：删除当前行 \n\nCtrl+U：软撤销，撤销光标位置 \n\nCtrl+J：选择标签内容 \n\nCtrl+F：查找内容 \n\nCtrl+Shift+F：查找并替换 \n\nCtrl+H：替换 \n\nCtrl+N：新建窗口 \n\nCtrl+K+B：开关侧栏 \n\nCtrl+Shift+M：选中当前括号内容，重复可选着括号本身 \n\nCtrl+F2：设置/删除标记 \n\nCtrl+/：注释当前行 \n\nCtrl+Shift+/：当前位置插入注释 \n\nCtrl+Alt+/：块注释，并Focus到首行，写注释说明用的 \n\nCtrl+Shift+A：选择当前标签前后，修改标签用的 \n\nF11：全屏 \n\nShift+F11：全屏免打扰模式，只编辑当前文件 \n\nAlt+F3：选择所有相同的词 \n\nAlt+.：闭合标签 \n\nAlt+Shift+数字：分屏显示 \n\nAlt+数字：切换打开第N个文件 \n\nShift+右键拖动：光标多不，用来更改或插入列内容 \n\n鼠标的前进后退键可切换Tab文件 \n\n按Ctrl，依次点击或选取，可需要编辑的多个位置 \n\nCtrl+shift+D: 备份多个当前行 \n\nCtrl+shift+T: 恢复已经关闭的标签\n\n## 编辑\n\nCtrl + X 删除某行\n\nCtrl + shift+ ↑ 将某行上移 \n\nCtrl + shift + ↓ 将某行下移 \n\nCtrl + L 选择一行 \n\nCtrl + D 选择一个字符，可以连续选择‘button’‘a’….\n\nCtrl + KK 删除从游标到该行末尾的字符 \n\nCtrl + K + ⌫ 删除从游标到该行最前的字符 \n\nCtrl + ] 缩进该行 \n\nCtrl + [ 取消缩进该行 \n\nCtrl + shift + D 复制该行 \n\nCtrl + J 将多行合并 \n\nCtrl + / 将该行注释 \n\nCtrl + shift + / 将整段注释 \n\nCtrl + Alt + Up 向上连续选中 \n\nCtrl + Alt + Down 向下连续选中\n\n## 快速定位\n\nCtrl + P 快速打开文件（根据文件名） \n\nCtrl + R 快速找到标识charset id style…. \n\nCtrl + ; 找word \n\nCtrl + G 迅速到某一行\n\n## 一般命令\n\nCtrl + shift + P 打开控制面板 \n\nCtrl + KB 隐藏侧边栏 \n\nCtrl + shift + Alt + P Show scope in status bar\n\n## 查找/替换\n\nCtrl + F 查找 \n\nCtrl + H 替换 \n\nCtrl + shift + F 在文件中查找\n\n## 标签组\n\nCtrl + shift + t 打开最近关闭的标签 \n\nCtrl + PgUp 标签之间逆向切换 \n\nCtrl + PgDn 标签之间正向切换 \n\nAlt + [NUM] 跳到第NUM个标签\n\n## 分离窗口\n\nAlt + shift + 2/3 窗口分为两/三列 \n\nAlt + shift + 1 合并窗口 \n\nCtrl + [NUM] 跳到第NUM个窗口\n\n## 书签\n\nCtrl + F2 转换书签 \n\nF2 下一个书签 \n\nshift + F2 上一个书签 \n\nCtrl +shift + F2 清除书签\n\n## 大小写转换\n\nCtrl + KU 转换为大写 \nCtrl + KL 转换为小写\n\n\n","source":"_posts/Sublime快捷键.md","raw":"---\ntitle: Sublime快捷键\ndate: 2018-08-15 22:42:55\ntags: [sublime]\ncategories: mac\n---\n\n# Sublime快捷键\n\n<!-- more -->\n\n----\nAlt+R : 开启正则表达式功能 \n\nAlt+Enter: 找到匹配目标后全部选择 \n\nCtrl+R：前往 method（mac下⌘R） \n\nCtrl+M：跳转到对应括号 \n\n按Ctrl+Shift+上下键，可替换行 \n\nCtrl+D：选择单词，重复可增加选择下一个相同的单词 \n\nCtrl+L：选择行，重复可依次增加选择下一行 \n\nCtrl+Shift+P：打开命令面板 \n\nCtrl+P：搜索项目中的文件（mac下⌘P），在里面输入： \n\nadmi@auto 可以定位到相应文件夹(admin.html)下的相应方法（auto）。 \n\nCtrl+G：跳转到第几行 \n\nCtrl+W：关闭当前打开文件 \n\nCtrl+Shift+W：关闭所有打开文件 \n\nCtrl+Shift+V：粘贴并格式化 \n\nCtrl+Shift+L：选择多行 \n\nCtrl+Shift+Enter：在当前行前插入新行 \n\nCtrl+X：删除当前行 \n\nCtrl+U：软撤销，撤销光标位置 \n\nCtrl+J：选择标签内容 \n\nCtrl+F：查找内容 \n\nCtrl+Shift+F：查找并替换 \n\nCtrl+H：替换 \n\nCtrl+N：新建窗口 \n\nCtrl+K+B：开关侧栏 \n\nCtrl+Shift+M：选中当前括号内容，重复可选着括号本身 \n\nCtrl+F2：设置/删除标记 \n\nCtrl+/：注释当前行 \n\nCtrl+Shift+/：当前位置插入注释 \n\nCtrl+Alt+/：块注释，并Focus到首行，写注释说明用的 \n\nCtrl+Shift+A：选择当前标签前后，修改标签用的 \n\nF11：全屏 \n\nShift+F11：全屏免打扰模式，只编辑当前文件 \n\nAlt+F3：选择所有相同的词 \n\nAlt+.：闭合标签 \n\nAlt+Shift+数字：分屏显示 \n\nAlt+数字：切换打开第N个文件 \n\nShift+右键拖动：光标多不，用来更改或插入列内容 \n\n鼠标的前进后退键可切换Tab文件 \n\n按Ctrl，依次点击或选取，可需要编辑的多个位置 \n\nCtrl+shift+D: 备份多个当前行 \n\nCtrl+shift+T: 恢复已经关闭的标签\n\n## 编辑\n\nCtrl + X 删除某行\n\nCtrl + shift+ ↑ 将某行上移 \n\nCtrl + shift + ↓ 将某行下移 \n\nCtrl + L 选择一行 \n\nCtrl + D 选择一个字符，可以连续选择‘button’‘a’….\n\nCtrl + KK 删除从游标到该行末尾的字符 \n\nCtrl + K + ⌫ 删除从游标到该行最前的字符 \n\nCtrl + ] 缩进该行 \n\nCtrl + [ 取消缩进该行 \n\nCtrl + shift + D 复制该行 \n\nCtrl + J 将多行合并 \n\nCtrl + / 将该行注释 \n\nCtrl + shift + / 将整段注释 \n\nCtrl + Alt + Up 向上连续选中 \n\nCtrl + Alt + Down 向下连续选中\n\n## 快速定位\n\nCtrl + P 快速打开文件（根据文件名） \n\nCtrl + R 快速找到标识charset id style…. \n\nCtrl + ; 找word \n\nCtrl + G 迅速到某一行\n\n## 一般命令\n\nCtrl + shift + P 打开控制面板 \n\nCtrl + KB 隐藏侧边栏 \n\nCtrl + shift + Alt + P Show scope in status bar\n\n## 查找/替换\n\nCtrl + F 查找 \n\nCtrl + H 替换 \n\nCtrl + shift + F 在文件中查找\n\n## 标签组\n\nCtrl + shift + t 打开最近关闭的标签 \n\nCtrl + PgUp 标签之间逆向切换 \n\nCtrl + PgDn 标签之间正向切换 \n\nAlt + [NUM] 跳到第NUM个标签\n\n## 分离窗口\n\nAlt + shift + 2/3 窗口分为两/三列 \n\nAlt + shift + 1 合并窗口 \n\nCtrl + [NUM] 跳到第NUM个窗口\n\n## 书签\n\nCtrl + F2 转换书签 \n\nF2 下一个书签 \n\nshift + F2 上一个书签 \n\nCtrl +shift + F2 清除书签\n\n## 大小写转换\n\nCtrl + KU 转换为大写 \nCtrl + KL 转换为小写\n\n\n","slug":"Sublime快捷键","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfc002rsifykoi7t1lf","content":"<h1 id=\"sublime快捷键\"><a class=\"markdownIt-Anchor\" href=\"#sublime快捷键\"></a> Sublime快捷键</h1>\n<a id=\"more\"></a>\n<hr>\n<p>Alt+R : 开启正则表达式功能</p>\n<p>Alt+Enter: 找到匹配目标后全部选择</p>\n<p>Ctrl+R：前往 method（mac下⌘R）</p>\n<p>Ctrl+M：跳转到对应括号</p>\n<p>按Ctrl+Shift+上下键，可替换行</p>\n<p>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</p>\n<p>Ctrl+L：选择行，重复可依次增加选择下一行</p>\n<p>Ctrl+Shift+P：打开命令面板</p>\n<p>Ctrl+P：搜索项目中的文件（mac下⌘P），在里面输入：</p>\n<p>admi@auto 可以定位到相应文件夹(admin.html)下的相应方法（auto）。</p>\n<p>Ctrl+G：跳转到第几行</p>\n<p>Ctrl+W：关闭当前打开文件</p>\n<p>Ctrl+Shift+W：关闭所有打开文件</p>\n<p>Ctrl+Shift+V：粘贴并格式化</p>\n<p>Ctrl+Shift+L：选择多行</p>\n<p>Ctrl+Shift+Enter：在当前行前插入新行</p>\n<p>Ctrl+X：删除当前行</p>\n<p>Ctrl+U：软撤销，撤销光标位置</p>\n<p>Ctrl+J：选择标签内容</p>\n<p>Ctrl+F：查找内容</p>\n<p>Ctrl+Shift+F：查找并替换</p>\n<p>Ctrl+H：替换</p>\n<p>Ctrl+N：新建窗口</p>\n<p>Ctrl+K+B：开关侧栏</p>\n<p>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p>\n<p>Ctrl+F2：设置/删除标记</p>\n<p>Ctrl+/：注释当前行</p>\n<p>Ctrl+Shift+/：当前位置插入注释</p>\n<p>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</p>\n<p>Ctrl+Shift+A：选择当前标签前后，修改标签用的</p>\n<p>F11：全屏</p>\n<p>Shift+F11：全屏免打扰模式，只编辑当前文件</p>\n<p>Alt+F3：选择所有相同的词</p>\n<p>Alt+.：闭合标签</p>\n<p>Alt+Shift+数字：分屏显示</p>\n<p>Alt+数字：切换打开第N个文件</p>\n<p>Shift+右键拖动：光标多不，用来更改或插入列内容</p>\n<p>鼠标的前进后退键可切换Tab文件</p>\n<p>按Ctrl，依次点击或选取，可需要编辑的多个位置</p>\n<p>Ctrl+shift+D: 备份多个当前行</p>\n<p>Ctrl+shift+T: 恢复已经关闭的标签</p>\n<h2 id=\"编辑\"><a class=\"markdownIt-Anchor\" href=\"#编辑\"></a> 编辑</h2>\n<p>Ctrl + X 删除某行</p>\n<p>Ctrl + shift+ ↑ 将某行上移</p>\n<p>Ctrl + shift + ↓ 将某行下移</p>\n<p>Ctrl + L 选择一行</p>\n<p>Ctrl + D 选择一个字符，可以连续选择‘button’‘a’….</p>\n<p>Ctrl + KK 删除从游标到该行末尾的字符</p>\n<p>Ctrl + K + ⌫ 删除从游标到该行最前的字符</p>\n<p>Ctrl + ] 缩进该行</p>\n<p>Ctrl + [ 取消缩进该行</p>\n<p>Ctrl + shift + D 复制该行</p>\n<p>Ctrl + J 将多行合并</p>\n<p>Ctrl + / 将该行注释</p>\n<p>Ctrl + shift + / 将整段注释</p>\n<p>Ctrl + Alt + Up 向上连续选中</p>\n<p>Ctrl + Alt + Down 向下连续选中</p>\n<h2 id=\"快速定位\"><a class=\"markdownIt-Anchor\" href=\"#快速定位\"></a> 快速定位</h2>\n<p>Ctrl + P 快速打开文件（根据文件名）</p>\n<p>Ctrl + R 快速找到标识charset id style….</p>\n<p>Ctrl + ; 找word</p>\n<p>Ctrl + G 迅速到某一行</p>\n<h2 id=\"一般命令\"><a class=\"markdownIt-Anchor\" href=\"#一般命令\"></a> 一般命令</h2>\n<p>Ctrl + shift + P 打开控制面板</p>\n<p>Ctrl + KB 隐藏侧边栏</p>\n<p>Ctrl + shift + Alt + P Show scope in status bar</p>\n<h2 id=\"查找替换\"><a class=\"markdownIt-Anchor\" href=\"#查找替换\"></a> 查找/替换</h2>\n<p>Ctrl + F 查找</p>\n<p>Ctrl + H 替换</p>\n<p>Ctrl + shift + F 在文件中查找</p>\n<h2 id=\"标签组\"><a class=\"markdownIt-Anchor\" href=\"#标签组\"></a> 标签组</h2>\n<p>Ctrl + shift + t 打开最近关闭的标签</p>\n<p>Ctrl + PgUp 标签之间逆向切换</p>\n<p>Ctrl + PgDn 标签之间正向切换</p>\n<p>Alt + [NUM] 跳到第NUM个标签</p>\n<h2 id=\"分离窗口\"><a class=\"markdownIt-Anchor\" href=\"#分离窗口\"></a> 分离窗口</h2>\n<p>Alt + shift + 2/3 窗口分为两/三列</p>\n<p>Alt + shift + 1 合并窗口</p>\n<p>Ctrl + [NUM] 跳到第NUM个窗口</p>\n<h2 id=\"书签\"><a class=\"markdownIt-Anchor\" href=\"#书签\"></a> 书签</h2>\n<p>Ctrl + F2 转换书签</p>\n<p>F2 下一个书签</p>\n<p>shift + F2 上一个书签</p>\n<p>Ctrl +shift + F2 清除书签</p>\n<h2 id=\"大小写转换\"><a class=\"markdownIt-Anchor\" href=\"#大小写转换\"></a> 大小写转换</h2>\n<p>Ctrl + KU 转换为大写<br>\nCtrl + KL 转换为小写</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"sublime快捷键\"><a class=\"markdownIt-Anchor\" href=\"#sublime快捷键\"></a> Sublime快捷键</h1>","more":"<hr>\n<p>Alt+R : 开启正则表达式功能</p>\n<p>Alt+Enter: 找到匹配目标后全部选择</p>\n<p>Ctrl+R：前往 method（mac下⌘R）</p>\n<p>Ctrl+M：跳转到对应括号</p>\n<p>按Ctrl+Shift+上下键，可替换行</p>\n<p>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</p>\n<p>Ctrl+L：选择行，重复可依次增加选择下一行</p>\n<p>Ctrl+Shift+P：打开命令面板</p>\n<p>Ctrl+P：搜索项目中的文件（mac下⌘P），在里面输入：</p>\n<p>admi@auto 可以定位到相应文件夹(admin.html)下的相应方法（auto）。</p>\n<p>Ctrl+G：跳转到第几行</p>\n<p>Ctrl+W：关闭当前打开文件</p>\n<p>Ctrl+Shift+W：关闭所有打开文件</p>\n<p>Ctrl+Shift+V：粘贴并格式化</p>\n<p>Ctrl+Shift+L：选择多行</p>\n<p>Ctrl+Shift+Enter：在当前行前插入新行</p>\n<p>Ctrl+X：删除当前行</p>\n<p>Ctrl+U：软撤销，撤销光标位置</p>\n<p>Ctrl+J：选择标签内容</p>\n<p>Ctrl+F：查找内容</p>\n<p>Ctrl+Shift+F：查找并替换</p>\n<p>Ctrl+H：替换</p>\n<p>Ctrl+N：新建窗口</p>\n<p>Ctrl+K+B：开关侧栏</p>\n<p>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p>\n<p>Ctrl+F2：设置/删除标记</p>\n<p>Ctrl+/：注释当前行</p>\n<p>Ctrl+Shift+/：当前位置插入注释</p>\n<p>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</p>\n<p>Ctrl+Shift+A：选择当前标签前后，修改标签用的</p>\n<p>F11：全屏</p>\n<p>Shift+F11：全屏免打扰模式，只编辑当前文件</p>\n<p>Alt+F3：选择所有相同的词</p>\n<p>Alt+.：闭合标签</p>\n<p>Alt+Shift+数字：分屏显示</p>\n<p>Alt+数字：切换打开第N个文件</p>\n<p>Shift+右键拖动：光标多不，用来更改或插入列内容</p>\n<p>鼠标的前进后退键可切换Tab文件</p>\n<p>按Ctrl，依次点击或选取，可需要编辑的多个位置</p>\n<p>Ctrl+shift+D: 备份多个当前行</p>\n<p>Ctrl+shift+T: 恢复已经关闭的标签</p>\n<h2 id=\"编辑\"><a class=\"markdownIt-Anchor\" href=\"#编辑\"></a> 编辑</h2>\n<p>Ctrl + X 删除某行</p>\n<p>Ctrl + shift+ ↑ 将某行上移</p>\n<p>Ctrl + shift + ↓ 将某行下移</p>\n<p>Ctrl + L 选择一行</p>\n<p>Ctrl + D 选择一个字符，可以连续选择‘button’‘a’….</p>\n<p>Ctrl + KK 删除从游标到该行末尾的字符</p>\n<p>Ctrl + K + ⌫ 删除从游标到该行最前的字符</p>\n<p>Ctrl + ] 缩进该行</p>\n<p>Ctrl + [ 取消缩进该行</p>\n<p>Ctrl + shift + D 复制该行</p>\n<p>Ctrl + J 将多行合并</p>\n<p>Ctrl + / 将该行注释</p>\n<p>Ctrl + shift + / 将整段注释</p>\n<p>Ctrl + Alt + Up 向上连续选中</p>\n<p>Ctrl + Alt + Down 向下连续选中</p>\n<h2 id=\"快速定位\"><a class=\"markdownIt-Anchor\" href=\"#快速定位\"></a> 快速定位</h2>\n<p>Ctrl + P 快速打开文件（根据文件名）</p>\n<p>Ctrl + R 快速找到标识charset id style….</p>\n<p>Ctrl + ; 找word</p>\n<p>Ctrl + G 迅速到某一行</p>\n<h2 id=\"一般命令\"><a class=\"markdownIt-Anchor\" href=\"#一般命令\"></a> 一般命令</h2>\n<p>Ctrl + shift + P 打开控制面板</p>\n<p>Ctrl + KB 隐藏侧边栏</p>\n<p>Ctrl + shift + Alt + P Show scope in status bar</p>\n<h2 id=\"查找替换\"><a class=\"markdownIt-Anchor\" href=\"#查找替换\"></a> 查找/替换</h2>\n<p>Ctrl + F 查找</p>\n<p>Ctrl + H 替换</p>\n<p>Ctrl + shift + F 在文件中查找</p>\n<h2 id=\"标签组\"><a class=\"markdownIt-Anchor\" href=\"#标签组\"></a> 标签组</h2>\n<p>Ctrl + shift + t 打开最近关闭的标签</p>\n<p>Ctrl + PgUp 标签之间逆向切换</p>\n<p>Ctrl + PgDn 标签之间正向切换</p>\n<p>Alt + [NUM] 跳到第NUM个标签</p>\n<h2 id=\"分离窗口\"><a class=\"markdownIt-Anchor\" href=\"#分离窗口\"></a> 分离窗口</h2>\n<p>Alt + shift + 2/3 窗口分为两/三列</p>\n<p>Alt + shift + 1 合并窗口</p>\n<p>Ctrl + [NUM] 跳到第NUM个窗口</p>\n<h2 id=\"书签\"><a class=\"markdownIt-Anchor\" href=\"#书签\"></a> 书签</h2>\n<p>Ctrl + F2 转换书签</p>\n<p>F2 下一个书签</p>\n<p>shift + F2 上一个书签</p>\n<p>Ctrl +shift + F2 清除书签</p>\n<h2 id=\"大小写转换\"><a class=\"markdownIt-Anchor\" href=\"#大小写转换\"></a> 大小写转换</h2>\n<p>Ctrl + KU 转换为大写<br>\nCtrl + KL 转换为小写</p>"},{"title":"USB数据线和充电线有什么不同","date":"2019-09-24T03:18:26.000Z","_content":"\n从X宝上买了两根快充线，当连接手机和电脑后，怎样也无法检测到设备，无法进行传输数据，难道我买了个假的线？还是版本不兼容？但手机有显示在充电啊~\n\n<!-- more -->\n\n原来，USB数据线与充电线是不同的，购买时，千万要注意。\n\n#### 区别：\n\n1. 数据线在USB接口那跟线里有四条线，而电源线在USB那个线里有两条线。\n2. 充电线用到时电源的VCC和GND这两个线，而数据线是用到VCC，GND，和两个通信线。\n3. 充电线只能拿来给手机充电，数据线除了能给移动设备充电外，还能用来于手机与电脑之间的数据传输，也就是说，数据线可以当充电线用，但充电线不一定能当数据线用。\n\n#### 扩展资料\n\n##### 手机数据线的接线方式\n\n**红线**：电源正极（接线上的标识为：+5V或VCC）\n\n**白线**：负电压数据线（标识为：Data-或USB Port -）\n\n**绿线**：正电压数据线（标识为：Data+或USB Port +）\n\n**黑线**：接地（标识为：GROUND或GND）\n\n##### 手机充电线的接线方式\n\n**红线**：电源正极（接线上的标识为：+5V或VCC）\n\n**黑线**：接地（标识为：GROUND或GND）\n","source":"_posts/USB数据线和充电线有什么不同.md","raw":"---\ntitle: USB数据线和充电线有什么不同\ndate: 2019-09-24 11:18:26\ntags: [usb, 常识]\ncategories: 常识\n---\n\n从X宝上买了两根快充线，当连接手机和电脑后，怎样也无法检测到设备，无法进行传输数据，难道我买了个假的线？还是版本不兼容？但手机有显示在充电啊~\n\n<!-- more -->\n\n原来，USB数据线与充电线是不同的，购买时，千万要注意。\n\n#### 区别：\n\n1. 数据线在USB接口那跟线里有四条线，而电源线在USB那个线里有两条线。\n2. 充电线用到时电源的VCC和GND这两个线，而数据线是用到VCC，GND，和两个通信线。\n3. 充电线只能拿来给手机充电，数据线除了能给移动设备充电外，还能用来于手机与电脑之间的数据传输，也就是说，数据线可以当充电线用，但充电线不一定能当数据线用。\n\n#### 扩展资料\n\n##### 手机数据线的接线方式\n\n**红线**：电源正极（接线上的标识为：+5V或VCC）\n\n**白线**：负电压数据线（标识为：Data-或USB Port -）\n\n**绿线**：正电压数据线（标识为：Data+或USB Port +）\n\n**黑线**：接地（标识为：GROUND或GND）\n\n##### 手机充电线的接线方式\n\n**红线**：电源正极（接线上的标识为：+5V或VCC）\n\n**黑线**：接地（标识为：GROUND或GND）\n","slug":"USB数据线和充电线有什么不同","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfd002vsifyd7pzfrg6","content":"<p>从X宝上买了两根快充线，当连接手机和电脑后，怎样也无法检测到设备，无法进行传输数据，难道我买了个假的线？还是版本不兼容？但手机有显示在充电啊~</p>\n<a id=\"more\"></a>\n<p>原来，USB数据线与充电线是不同的，购买时，千万要注意。</p>\n<h4 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\"></a> 区别：</h4>\n<ol>\n<li>数据线在USB接口那跟线里有四条线，而电源线在USB那个线里有两条线。</li>\n<li>充电线用到时电源的VCC和GND这两个线，而数据线是用到VCC，GND，和两个通信线。</li>\n<li>充电线只能拿来给手机充电，数据线除了能给移动设备充电外，还能用来于手机与电脑之间的数据传输，也就是说，数据线可以当充电线用，但充电线不一定能当数据线用。</li>\n</ol>\n<h4 id=\"扩展资料\"><a class=\"markdownIt-Anchor\" href=\"#扩展资料\"></a> 扩展资料</h4>\n<h5 id=\"手机数据线的接线方式\"><a class=\"markdownIt-Anchor\" href=\"#手机数据线的接线方式\"></a> 手机数据线的接线方式</h5>\n<p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p>\n<p><strong>白线</strong>：负电压数据线（标识为：Data-或USB Port -）</p>\n<p><strong>绿线</strong>：正电压数据线（标识为：Data+或USB Port +）</p>\n<p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p>\n<h5 id=\"手机充电线的接线方式\"><a class=\"markdownIt-Anchor\" href=\"#手机充电线的接线方式\"></a> 手机充电线的接线方式</h5>\n<p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p>\n<p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p>\n","site":{"data":{}},"excerpt":"<p>从X宝上买了两根快充线，当连接手机和电脑后，怎样也无法检测到设备，无法进行传输数据，难道我买了个假的线？还是版本不兼容？但手机有显示在充电啊~</p>","more":"<p>原来，USB数据线与充电线是不同的，购买时，千万要注意。</p>\n<h4 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\"></a> 区别：</h4>\n<ol>\n<li>数据线在USB接口那跟线里有四条线，而电源线在USB那个线里有两条线。</li>\n<li>充电线用到时电源的VCC和GND这两个线，而数据线是用到VCC，GND，和两个通信线。</li>\n<li>充电线只能拿来给手机充电，数据线除了能给移动设备充电外，还能用来于手机与电脑之间的数据传输，也就是说，数据线可以当充电线用，但充电线不一定能当数据线用。</li>\n</ol>\n<h4 id=\"扩展资料\"><a class=\"markdownIt-Anchor\" href=\"#扩展资料\"></a> 扩展资料</h4>\n<h5 id=\"手机数据线的接线方式\"><a class=\"markdownIt-Anchor\" href=\"#手机数据线的接线方式\"></a> 手机数据线的接线方式</h5>\n<p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p>\n<p><strong>白线</strong>：负电压数据线（标识为：Data-或USB Port -）</p>\n<p><strong>绿线</strong>：正电压数据线（标识为：Data+或USB Port +）</p>\n<p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p>\n<h5 id=\"手机充电线的接线方式\"><a class=\"markdownIt-Anchor\" href=\"#手机充电线的接线方式\"></a> 手机充电线的接线方式</h5>\n<p><strong>红线</strong>：电源正极（接线上的标识为：+5V或VCC）</p>\n<p><strong>黑线</strong>：接地（标识为：GROUND或GND）</p>"},{"title":"STL Algorithm 整理","date":"2021-04-19T04:17:16.000Z","_content":"\nSTL Algorithm 整理\n\n<!-- more -->\n\n|非修改性序列操作(12个)|||\n|:--|:--|:--|\n|循环|对序列中的每个元素执行某操作|`for_each()`|\n|查找|在序列中找出某个值的第一次出现的位置|find()|\n||在序列中找出符合某谓词的第一个元素|\t`find_if()`|\n||在序列中找出一子序列的最后一次出现的位置|find_end()|\n||在序列中找出第一次出现指定值集中之值的位置|`find_first_of()`|\n||在序列中找出相邻的一对值|\tadjacent_find()|\n|计数|在序列中统计某个值出现的次数|\tcount()|\n||在序列中统计与某谓词匹配的次数|count_if()|\n|比较|找出两个序列相异的第一个元素|\tmismatch()|\n||两个序列中的对应元素都相同时为真|equal()|\n|搜索|在序列中找出一子序列的第一次出现的位置|search()|\n||在序列中找出一值的连续n次出现的位置|search_n()|\n|修改性序列操作（27个）|||\n|复制|从序列的第一个元素起进行复制|copy()|\n||从序列的最后一个元素起进行复制|copy_backward()|\n|交换|交换两个元素|swap()|\n||交换指定范围的元素|\tswap_ranges()|\n||交换由迭代器所指的两个元素|iter_swap()|\n|变换|将某操作应用于指定范围的每个元素|transform()|\n|替换|用一个给定值替换一些值|replace()|\n||替换满足谓词的一些元素|replace_if()|\n||复制序列时用一给定值替换元素|replace_copy()|\n||复制序列时替换满足谓词的元素|`replace_copy_if()`|\n|填充|用一给定值取代所有元素|fill()|\n||用一给定值取代前n个元素|fill_n()|\n|生成|用一操作的结果取代所有元素|generate()|\n||用一操作的结果取代前n个元素|generate_n()|\n|删除|删除具有给定值的元素|remove()|\n||删除满足谓词的元素|remove_if()|\n||复制序列时删除具有给定值的元素|\tremove_copy()|\n||复制序列时删除满足谓词的元素|`remove_copy_if()`|\n|唯一|删除相邻的重复元素|unique()|\n||复制序列时删除相邻的重复元素|unique_copy()|\n|反转|反转元素的次序|reverse()|\n||复制序列时反转元素的次序|reverse_copy()|\n|环移|循环移动元素|rotate()|\n||复制序列时循环移动元素|\trotate_copy()|\n|随机|采用均匀分布来随机移动元素|random_shuffle()|\n|划分|将满足某谓词的元素都放到前面|partition()|\n||将满足某谓词的元素都放到前面并维持原顺序|\tstable_partition()|\n|序列排序及相关操作（27个）|||\n| 排序 |以很好的平均效率排序|sort()|\n||排序，并维持相同元素的原有顺序|stable_sort()|\n||将序列的前一部分排好序|partial_sort()|\n||复制的同时将序列的前一部分排好序|`partial_sort_copy()`|\n|第n个元素|将第n各元素放到它的正确位置| nth_element() |\n|二分检索|找到大于等于某值的第一次出现|lower_bound()|\n||找到大于某值的第一次出现|upper_bound()|\n||找到（在不破坏顺序的前提下）可插入给定值的最大范围|equal_range()|\n||在有序序列中确定给定元素是否存在|binary_search()|\n|归并|归并两个有序序列|merge()|\n||归并两个接续的有序序列|inplace_merge()|\n|有序结构上的集合操作|一序列为另一序列的子序列时为真|\tincludes()|\n||构造两个集合的有序并集|set_union()|\n||构造两个集合的有序交集|set_intersection()|\n||构造两个集合的有序差集|set_difference()|\n||构造两个集合的有序对称差集（并-交）|`set_symmetric_difference()`|\n|堆操作|向堆中加入元素|push_heap()|\n||从堆中弹出元素|pop_heap()|\n||从序列构造堆|make_heap()|\n||给堆排序| sort_heap() |\n|最大和最小|两个值中较小的|min()|\n||两个值中较大的|\tmax()|\n||序列中的最小元素\t|min_element()|\n||序列中的最大元素|\tmax_element()|\n|词典比较|两个序列按字典序的第一个在前|lexicographical_compare()|\n|排列生成器|按字典序的下一个排列|next_permutation()|\n||按字典序的前一个排列|prev_permutation()|\n\n\n\n\n\n\n\n\n","source":"_posts/STL-Algorithm-整理.md","raw":"---\ntitle: STL Algorithm 整理\ndate: 2021-04-19 12:17:16\ntags: [c++, stl]\ncategories: cpp\n---\n\nSTL Algorithm 整理\n\n<!-- more -->\n\n|非修改性序列操作(12个)|||\n|:--|:--|:--|\n|循环|对序列中的每个元素执行某操作|`for_each()`|\n|查找|在序列中找出某个值的第一次出现的位置|find()|\n||在序列中找出符合某谓词的第一个元素|\t`find_if()`|\n||在序列中找出一子序列的最后一次出现的位置|find_end()|\n||在序列中找出第一次出现指定值集中之值的位置|`find_first_of()`|\n||在序列中找出相邻的一对值|\tadjacent_find()|\n|计数|在序列中统计某个值出现的次数|\tcount()|\n||在序列中统计与某谓词匹配的次数|count_if()|\n|比较|找出两个序列相异的第一个元素|\tmismatch()|\n||两个序列中的对应元素都相同时为真|equal()|\n|搜索|在序列中找出一子序列的第一次出现的位置|search()|\n||在序列中找出一值的连续n次出现的位置|search_n()|\n|修改性序列操作（27个）|||\n|复制|从序列的第一个元素起进行复制|copy()|\n||从序列的最后一个元素起进行复制|copy_backward()|\n|交换|交换两个元素|swap()|\n||交换指定范围的元素|\tswap_ranges()|\n||交换由迭代器所指的两个元素|iter_swap()|\n|变换|将某操作应用于指定范围的每个元素|transform()|\n|替换|用一个给定值替换一些值|replace()|\n||替换满足谓词的一些元素|replace_if()|\n||复制序列时用一给定值替换元素|replace_copy()|\n||复制序列时替换满足谓词的元素|`replace_copy_if()`|\n|填充|用一给定值取代所有元素|fill()|\n||用一给定值取代前n个元素|fill_n()|\n|生成|用一操作的结果取代所有元素|generate()|\n||用一操作的结果取代前n个元素|generate_n()|\n|删除|删除具有给定值的元素|remove()|\n||删除满足谓词的元素|remove_if()|\n||复制序列时删除具有给定值的元素|\tremove_copy()|\n||复制序列时删除满足谓词的元素|`remove_copy_if()`|\n|唯一|删除相邻的重复元素|unique()|\n||复制序列时删除相邻的重复元素|unique_copy()|\n|反转|反转元素的次序|reverse()|\n||复制序列时反转元素的次序|reverse_copy()|\n|环移|循环移动元素|rotate()|\n||复制序列时循环移动元素|\trotate_copy()|\n|随机|采用均匀分布来随机移动元素|random_shuffle()|\n|划分|将满足某谓词的元素都放到前面|partition()|\n||将满足某谓词的元素都放到前面并维持原顺序|\tstable_partition()|\n|序列排序及相关操作（27个）|||\n| 排序 |以很好的平均效率排序|sort()|\n||排序，并维持相同元素的原有顺序|stable_sort()|\n||将序列的前一部分排好序|partial_sort()|\n||复制的同时将序列的前一部分排好序|`partial_sort_copy()`|\n|第n个元素|将第n各元素放到它的正确位置| nth_element() |\n|二分检索|找到大于等于某值的第一次出现|lower_bound()|\n||找到大于某值的第一次出现|upper_bound()|\n||找到（在不破坏顺序的前提下）可插入给定值的最大范围|equal_range()|\n||在有序序列中确定给定元素是否存在|binary_search()|\n|归并|归并两个有序序列|merge()|\n||归并两个接续的有序序列|inplace_merge()|\n|有序结构上的集合操作|一序列为另一序列的子序列时为真|\tincludes()|\n||构造两个集合的有序并集|set_union()|\n||构造两个集合的有序交集|set_intersection()|\n||构造两个集合的有序差集|set_difference()|\n||构造两个集合的有序对称差集（并-交）|`set_symmetric_difference()`|\n|堆操作|向堆中加入元素|push_heap()|\n||从堆中弹出元素|pop_heap()|\n||从序列构造堆|make_heap()|\n||给堆排序| sort_heap() |\n|最大和最小|两个值中较小的|min()|\n||两个值中较大的|\tmax()|\n||序列中的最小元素\t|min_element()|\n||序列中的最大元素|\tmax_element()|\n|词典比较|两个序列按字典序的第一个在前|lexicographical_compare()|\n|排列生成器|按字典序的下一个排列|next_permutation()|\n||按字典序的前一个排列|prev_permutation()|\n\n\n\n\n\n\n\n\n","slug":"STL-Algorithm-整理","published":1,"updated":"2021-04-19T04:59:28.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfd002xsifycyyfmnpo","content":"<p>STL Algorithm 整理</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">非修改性序列操作(12个)</th>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">循环</td>\n<td style=\"text-align:left\">对序列中的每个元素执行某操作</td>\n<td style=\"text-align:left\"><code>for_each()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">在序列中找出某个值的第一次出现的位置</td>\n<td style=\"text-align:left\">find()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出符合某谓词的第一个元素</td>\n<td style=\"text-align:left\"><code>find_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出一子序列的最后一次出现的位置</td>\n<td style=\"text-align:left\">find_end()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出第一次出现指定值集中之值的位置</td>\n<td style=\"text-align:left\"><code>find_first_of()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出相邻的一对值</td>\n<td style=\"text-align:left\">adjacent_find()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">计数</td>\n<td style=\"text-align:left\">在序列中统计某个值出现的次数</td>\n<td style=\"text-align:left\">count()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中统计与某谓词匹配的次数</td>\n<td style=\"text-align:left\">count_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">比较</td>\n<td style=\"text-align:left\">找出两个序列相异的第一个元素</td>\n<td style=\"text-align:left\">mismatch()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">两个序列中的对应元素都相同时为真</td>\n<td style=\"text-align:left\">equal()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索</td>\n<td style=\"text-align:left\">在序列中找出一子序列的第一次出现的位置</td>\n<td style=\"text-align:left\">search()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出一值的连续n次出现的位置</td>\n<td style=\"text-align:left\">search_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改性序列操作（27个）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制</td>\n<td style=\"text-align:left\">从序列的第一个元素起进行复制</td>\n<td style=\"text-align:left\">copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从序列的最后一个元素起进行复制</td>\n<td style=\"text-align:left\">copy_backward()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交换</td>\n<td style=\"text-align:left\">交换两个元素</td>\n<td style=\"text-align:left\">swap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">交换指定范围的元素</td>\n<td style=\"text-align:left\">swap_ranges()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">交换由迭代器所指的两个元素</td>\n<td style=\"text-align:left\">iter_swap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">变换</td>\n<td style=\"text-align:left\">将某操作应用于指定范围的每个元素</td>\n<td style=\"text-align:left\">transform()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">替换</td>\n<td style=\"text-align:left\">用一个给定值替换一些值</td>\n<td style=\"text-align:left\">replace()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">替换满足谓词的一些元素</td>\n<td style=\"text-align:left\">replace_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时用一给定值替换元素</td>\n<td style=\"text-align:left\">replace_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时替换满足谓词的元素</td>\n<td style=\"text-align:left\"><code>replace_copy_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">填充</td>\n<td style=\"text-align:left\">用一给定值取代所有元素</td>\n<td style=\"text-align:left\">fill()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">用一给定值取代前n个元素</td>\n<td style=\"text-align:left\">fill_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">生成</td>\n<td style=\"text-align:left\">用一操作的结果取代所有元素</td>\n<td style=\"text-align:left\">generate()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">用一操作的结果取代前n个元素</td>\n<td style=\"text-align:left\">generate_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除</td>\n<td style=\"text-align:left\">删除具有给定值的元素</td>\n<td style=\"text-align:left\">remove()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">删除满足谓词的元素</td>\n<td style=\"text-align:left\">remove_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除具有给定值的元素</td>\n<td style=\"text-align:left\">remove_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除满足谓词的元素</td>\n<td style=\"text-align:left\"><code>remove_copy_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">唯一</td>\n<td style=\"text-align:left\">删除相邻的重复元素</td>\n<td style=\"text-align:left\">unique()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除相邻的重复元素</td>\n<td style=\"text-align:left\">unique_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">反转</td>\n<td style=\"text-align:left\">反转元素的次序</td>\n<td style=\"text-align:left\">reverse()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时反转元素的次序</td>\n<td style=\"text-align:left\">reverse_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">环移</td>\n<td style=\"text-align:left\">循环移动元素</td>\n<td style=\"text-align:left\">rotate()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时循环移动元素</td>\n<td style=\"text-align:left\">rotate_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">随机</td>\n<td style=\"text-align:left\">采用均匀分布来随机移动元素</td>\n<td style=\"text-align:left\">random_shuffle()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">划分</td>\n<td style=\"text-align:left\">将满足某谓词的元素都放到前面</td>\n<td style=\"text-align:left\">partition()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将满足某谓词的元素都放到前面并维持原顺序</td>\n<td style=\"text-align:left\">stable_partition()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">序列排序及相关操作（27个）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">排序</td>\n<td style=\"text-align:left\">以很好的平均效率排序</td>\n<td style=\"text-align:left\">sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">排序，并维持相同元素的原有顺序</td>\n<td style=\"text-align:left\">stable_sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将序列的前一部分排好序</td>\n<td style=\"text-align:left\">partial_sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制的同时将序列的前一部分排好序</td>\n<td style=\"text-align:left\"><code>partial_sort_copy()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第n个元素</td>\n<td style=\"text-align:left\">将第n各元素放到它的正确位置</td>\n<td style=\"text-align:left\">nth_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">二分检索</td>\n<td style=\"text-align:left\">找到大于等于某值的第一次出现</td>\n<td style=\"text-align:left\">lower_bound()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">找到大于某值的第一次出现</td>\n<td style=\"text-align:left\">upper_bound()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">找到（在不破坏顺序的前提下）可插入给定值的最大范围</td>\n<td style=\"text-align:left\">equal_range()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在有序序列中确定给定元素是否存在</td>\n<td style=\"text-align:left\">binary_search()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并</td>\n<td style=\"text-align:left\">归并两个有序序列</td>\n<td style=\"text-align:left\">merge()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">归并两个接续的有序序列</td>\n<td style=\"text-align:left\">inplace_merge()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">有序结构上的集合操作</td>\n<td style=\"text-align:left\">一序列为另一序列的子序列时为真</td>\n<td style=\"text-align:left\">includes()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序并集</td>\n<td style=\"text-align:left\">set_union()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序交集</td>\n<td style=\"text-align:left\">set_intersection()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序差集</td>\n<td style=\"text-align:left\">set_difference()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序对称差集（并-交）</td>\n<td style=\"text-align:left\"><code>set_symmetric_difference()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆操作</td>\n<td style=\"text-align:left\">向堆中加入元素</td>\n<td style=\"text-align:left\">push_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从堆中弹出元素</td>\n<td style=\"text-align:left\">pop_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从序列构造堆</td>\n<td style=\"text-align:left\">make_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">给堆排序</td>\n<td style=\"text-align:left\">sort_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">最大和最小</td>\n<td style=\"text-align:left\">两个值中较小的</td>\n<td style=\"text-align:left\">min()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">两个值中较大的</td>\n<td style=\"text-align:left\">max()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">序列中的最小元素</td>\n<td style=\"text-align:left\">min_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">序列中的最大元素</td>\n<td style=\"text-align:left\">max_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">词典比较</td>\n<td style=\"text-align:left\">两个序列按字典序的第一个在前</td>\n<td style=\"text-align:left\">lexicographical_compare()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">排列生成器</td>\n<td style=\"text-align:left\">按字典序的下一个排列</td>\n<td style=\"text-align:left\">next_permutation()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">按字典序的前一个排列</td>\n<td style=\"text-align:left\">prev_permutation()</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>STL Algorithm 整理</p>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">非修改性序列操作(12个)</th>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">循环</td>\n<td style=\"text-align:left\">对序列中的每个元素执行某操作</td>\n<td style=\"text-align:left\"><code>for_each()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查找</td>\n<td style=\"text-align:left\">在序列中找出某个值的第一次出现的位置</td>\n<td style=\"text-align:left\">find()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出符合某谓词的第一个元素</td>\n<td style=\"text-align:left\"><code>find_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出一子序列的最后一次出现的位置</td>\n<td style=\"text-align:left\">find_end()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出第一次出现指定值集中之值的位置</td>\n<td style=\"text-align:left\"><code>find_first_of()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出相邻的一对值</td>\n<td style=\"text-align:left\">adjacent_find()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">计数</td>\n<td style=\"text-align:left\">在序列中统计某个值出现的次数</td>\n<td style=\"text-align:left\">count()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中统计与某谓词匹配的次数</td>\n<td style=\"text-align:left\">count_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">比较</td>\n<td style=\"text-align:left\">找出两个序列相异的第一个元素</td>\n<td style=\"text-align:left\">mismatch()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">两个序列中的对应元素都相同时为真</td>\n<td style=\"text-align:left\">equal()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">搜索</td>\n<td style=\"text-align:left\">在序列中找出一子序列的第一次出现的位置</td>\n<td style=\"text-align:left\">search()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在序列中找出一值的连续n次出现的位置</td>\n<td style=\"text-align:left\">search_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">修改性序列操作（27个）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">复制</td>\n<td style=\"text-align:left\">从序列的第一个元素起进行复制</td>\n<td style=\"text-align:left\">copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从序列的最后一个元素起进行复制</td>\n<td style=\"text-align:left\">copy_backward()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">交换</td>\n<td style=\"text-align:left\">交换两个元素</td>\n<td style=\"text-align:left\">swap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">交换指定范围的元素</td>\n<td style=\"text-align:left\">swap_ranges()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">交换由迭代器所指的两个元素</td>\n<td style=\"text-align:left\">iter_swap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">变换</td>\n<td style=\"text-align:left\">将某操作应用于指定范围的每个元素</td>\n<td style=\"text-align:left\">transform()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">替换</td>\n<td style=\"text-align:left\">用一个给定值替换一些值</td>\n<td style=\"text-align:left\">replace()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">替换满足谓词的一些元素</td>\n<td style=\"text-align:left\">replace_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时用一给定值替换元素</td>\n<td style=\"text-align:left\">replace_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时替换满足谓词的元素</td>\n<td style=\"text-align:left\"><code>replace_copy_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">填充</td>\n<td style=\"text-align:left\">用一给定值取代所有元素</td>\n<td style=\"text-align:left\">fill()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">用一给定值取代前n个元素</td>\n<td style=\"text-align:left\">fill_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">生成</td>\n<td style=\"text-align:left\">用一操作的结果取代所有元素</td>\n<td style=\"text-align:left\">generate()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">用一操作的结果取代前n个元素</td>\n<td style=\"text-align:left\">generate_n()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">删除</td>\n<td style=\"text-align:left\">删除具有给定值的元素</td>\n<td style=\"text-align:left\">remove()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">删除满足谓词的元素</td>\n<td style=\"text-align:left\">remove_if()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除具有给定值的元素</td>\n<td style=\"text-align:left\">remove_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除满足谓词的元素</td>\n<td style=\"text-align:left\"><code>remove_copy_if()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">唯一</td>\n<td style=\"text-align:left\">删除相邻的重复元素</td>\n<td style=\"text-align:left\">unique()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时删除相邻的重复元素</td>\n<td style=\"text-align:left\">unique_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">反转</td>\n<td style=\"text-align:left\">反转元素的次序</td>\n<td style=\"text-align:left\">reverse()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时反转元素的次序</td>\n<td style=\"text-align:left\">reverse_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">环移</td>\n<td style=\"text-align:left\">循环移动元素</td>\n<td style=\"text-align:left\">rotate()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制序列时循环移动元素</td>\n<td style=\"text-align:left\">rotate_copy()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">随机</td>\n<td style=\"text-align:left\">采用均匀分布来随机移动元素</td>\n<td style=\"text-align:left\">random_shuffle()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">划分</td>\n<td style=\"text-align:left\">将满足某谓词的元素都放到前面</td>\n<td style=\"text-align:left\">partition()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将满足某谓词的元素都放到前面并维持原顺序</td>\n<td style=\"text-align:left\">stable_partition()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">序列排序及相关操作（27个）</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">排序</td>\n<td style=\"text-align:left\">以很好的平均效率排序</td>\n<td style=\"text-align:left\">sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">排序，并维持相同元素的原有顺序</td>\n<td style=\"text-align:left\">stable_sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">将序列的前一部分排好序</td>\n<td style=\"text-align:left\">partial_sort()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">复制的同时将序列的前一部分排好序</td>\n<td style=\"text-align:left\"><code>partial_sort_copy()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">第n个元素</td>\n<td style=\"text-align:left\">将第n各元素放到它的正确位置</td>\n<td style=\"text-align:left\">nth_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">二分检索</td>\n<td style=\"text-align:left\">找到大于等于某值的第一次出现</td>\n<td style=\"text-align:left\">lower_bound()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">找到大于某值的第一次出现</td>\n<td style=\"text-align:left\">upper_bound()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">找到（在不破坏顺序的前提下）可插入给定值的最大范围</td>\n<td style=\"text-align:left\">equal_range()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">在有序序列中确定给定元素是否存在</td>\n<td style=\"text-align:left\">binary_search()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">归并</td>\n<td style=\"text-align:left\">归并两个有序序列</td>\n<td style=\"text-align:left\">merge()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">归并两个接续的有序序列</td>\n<td style=\"text-align:left\">inplace_merge()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">有序结构上的集合操作</td>\n<td style=\"text-align:left\">一序列为另一序列的子序列时为真</td>\n<td style=\"text-align:left\">includes()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序并集</td>\n<td style=\"text-align:left\">set_union()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序交集</td>\n<td style=\"text-align:left\">set_intersection()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序差集</td>\n<td style=\"text-align:left\">set_difference()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">构造两个集合的有序对称差集（并-交）</td>\n<td style=\"text-align:left\"><code>set_symmetric_difference()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆操作</td>\n<td style=\"text-align:left\">向堆中加入元素</td>\n<td style=\"text-align:left\">push_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从堆中弹出元素</td>\n<td style=\"text-align:left\">pop_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">从序列构造堆</td>\n<td style=\"text-align:left\">make_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">给堆排序</td>\n<td style=\"text-align:left\">sort_heap()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">最大和最小</td>\n<td style=\"text-align:left\">两个值中较小的</td>\n<td style=\"text-align:left\">min()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">两个值中较大的</td>\n<td style=\"text-align:left\">max()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">序列中的最小元素</td>\n<td style=\"text-align:left\">min_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">序列中的最大元素</td>\n<td style=\"text-align:left\">max_element()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">词典比较</td>\n<td style=\"text-align:left\">两个序列按字典序的第一个在前</td>\n<td style=\"text-align:left\">lexicographical_compare()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">排列生成器</td>\n<td style=\"text-align:left\">按字典序的下一个排列</td>\n<td style=\"text-align:left\">next_permutation()</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">按字典序的前一个排列</td>\n<td style=\"text-align:left\">prev_permutation()</td>\n</tr>\n</tbody>\n</table>"},{"title":"VirtualBox for mac设置虚拟机硬盘大小","date":"2020-09-15T10:39:38.000Z","_content":"\n由于VirtualBox在设置好磁盘大小以后就无法通过GUI图形界面进行调整虚拟机硬盘的容量，只能通过命令行调整。我的系统是Mac OS X，Linux和Mac应该差不多，具体没确认过。这种通过命令调整的方法适用于VirtualBox4.0以上。\n\n<!-- more -->\n\n首先要确认虚拟机磁盘存储的位置。打开VirtualBox，点击存储，鼠标指向虚拟磁盘，会提示虚拟磁盘的位置，如下图。\n\n![](/assets/blogImg/20200915-vsbox.png)\n\n 现在打开终端，输入sudo su，取得管理员权限，依据刚刚获得的路径，使用VBoxManage命令调整硬盘大小，具体如下：VBoxManage modifyhd /Users/laoshu/VirtualBox\\ VMs/windows7/windows7.vdi --resize 61440。resize的参数是MB，我需要60GB，所以就是61440MB。调整以后重启虚拟机，即可硬盘容量即为60GB。\n","source":"_posts/VirtualBox-for-mac设置虚拟机硬盘大小.md","raw":"---\ntitle: VirtualBox for mac设置虚拟机硬盘大小\ndate: 2020-09-15 18:39:38\ntags: [vitualBox]\ncategories: mac\n---\n\n由于VirtualBox在设置好磁盘大小以后就无法通过GUI图形界面进行调整虚拟机硬盘的容量，只能通过命令行调整。我的系统是Mac OS X，Linux和Mac应该差不多，具体没确认过。这种通过命令调整的方法适用于VirtualBox4.0以上。\n\n<!-- more -->\n\n首先要确认虚拟机磁盘存储的位置。打开VirtualBox，点击存储，鼠标指向虚拟磁盘，会提示虚拟磁盘的位置，如下图。\n\n![](/assets/blogImg/20200915-vsbox.png)\n\n 现在打开终端，输入sudo su，取得管理员权限，依据刚刚获得的路径，使用VBoxManage命令调整硬盘大小，具体如下：VBoxManage modifyhd /Users/laoshu/VirtualBox\\ VMs/windows7/windows7.vdi --resize 61440。resize的参数是MB，我需要60GB，所以就是61440MB。调整以后重启虚拟机，即可硬盘容量即为60GB。\n","slug":"VirtualBox-for-mac设置虚拟机硬盘大小","published":1,"updated":"2020-09-15T10:52:45.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfe0031sify4935iduf","content":"<p>由于VirtualBox在设置好磁盘大小以后就无法通过GUI图形界面进行调整虚拟机硬盘的容量，只能通过命令行调整。我的系统是Mac OS X，Linux和Mac应该差不多，具体没确认过。这种通过命令调整的方法适用于VirtualBox4.0以上。</p>\n<a id=\"more\"></a>\n<p>首先要确认虚拟机磁盘存储的位置。打开VirtualBox，点击存储，鼠标指向虚拟磁盘，会提示虚拟磁盘的位置，如下图。</p>\n<p><img src=\"/assets/blogImg/20200915-vsbox.png\" alt></p>\n<p>现在打开终端，输入sudo su，取得管理员权限，依据刚刚获得的路径，使用VBoxManage命令调整硬盘大小，具体如下：VBoxManage modifyhd /Users/laoshu/VirtualBox\\ VMs/windows7/windows7.vdi --resize 61440。resize的参数是MB，我需要60GB，所以就是61440MB。调整以后重启虚拟机，即可硬盘容量即为60GB。</p>\n","site":{"data":{}},"excerpt":"<p>由于VirtualBox在设置好磁盘大小以后就无法通过GUI图形界面进行调整虚拟机硬盘的容量，只能通过命令行调整。我的系统是Mac OS X，Linux和Mac应该差不多，具体没确认过。这种通过命令调整的方法适用于VirtualBox4.0以上。</p>","more":"<p>首先要确认虚拟机磁盘存储的位置。打开VirtualBox，点击存储，鼠标指向虚拟磁盘，会提示虚拟磁盘的位置，如下图。</p>\n<p><img src=\"/assets/blogImg/20200915-vsbox.png\" alt></p>\n<p>现在打开终端，输入sudo su，取得管理员权限，依据刚刚获得的路径，使用VBoxManage命令调整硬盘大小，具体如下：VBoxManage modifyhd /Users/laoshu/VirtualBox\\ VMs/windows7/windows7.vdi --resize 61440。resize的参数是MB，我需要60GB，所以就是61440MB。调整以后重启虚拟机，即可硬盘容量即为60GB。</p>"},{"title":"Qt Creator常用快捷键","date":"2016-11-14T07:33:19.000Z","_content":"Qt Creator常用快捷键\n<!-- more -->\n\n1. Ctrl + / ：注释/取消注释选定内容。\n\n2. F4 ：在 头文件(.h) 和 实现文件(.cpp) 之间进行切换。\n\n3. Ctrl + i ：自动格式化选中代码。\n\n4. F2 ： 快速切换到 光标选中对象 的源码。\n\n5. 快速添加方法实体(.cpp)声明： 将光标移动到h文件中的方法声明。按Alt(按住)+ Enter,再按回车键将在cpp中添加该函数的声明。\n\n6. 按Alt +数字键(1-7)可以快速打开对应的输出窗口。\n\n7. 右键Refactor可以重构修改变量或函数名 。\n\n8. 书签： Ctrl + M 添加/删除书签,按Ctrl + . 查找并移动到下一个标签\n\n9. 分栏显示：:\n  - 先按Ctrl + e后松开再按2添加上下布局的分栏\n  - 先按Ctrl + e后松开再按3添加左右布局的分栏\n  - 先按Ctrl + e后松开再按1删除所有的分栏\n\n  \n```\nctrl+F:查找（当前文件）\nctrl+shift+F:高级查找（项目或工程等） 常用!!!\nctrl+r:直接运行： 常用!!!\nF5:调试运行 常用!!!\n调试-restart debugging.\n\n执行qmake：qmake *.pro:根据pro文件生成makefile。（然后make根据makefile编译链接生成可执行文件。也就是构建！）\n注意：清除（或重新构建）并不清除makefile，可自己试试。如果修改了pro文件，请注意执行qmake一下。\nF9：断点； 常用!!!\nF10：单步跳过； 常用!!!\nF11：单步进入； 常用!!!\nCtrl+M：书签。书签跳转可能与搜狗输入法的快捷键冲突。\n\n某个函数上按F1，跳转到帮助。 常用!!!\n\n左右或上下分栏显示。 好用！\n构建菜单 - 忽略构建执行运行。\nF2: 函数声明和定义之间跳转。 常用!!!\nF4：头文件和cpp文件之间跳转。 常用!!!\nAlt+0:\nCtrl+\\ :注释和不注释 常用!!!\n\nshift+del:删除当前行。\nctrl+ins:复制当前行。\n\n有时需要手动修改mainwindow.ui文件，右键-用普通文件编辑器打开即可修改。\n\n工程右键-add existing directory。（删除文件后，可用此添加回来，在pro文件中即可显示添加的文件）。\n右键-添加库。\n\n```\n","source":"_posts/Qt-Creator常用快捷键.md","raw":"---\ntitle: Qt Creator常用快捷键\ndate: 2016-11-14 15:33:19\ntags: [qt]\ncategories: qt\n---\nQt Creator常用快捷键\n<!-- more -->\n\n1. Ctrl + / ：注释/取消注释选定内容。\n\n2. F4 ：在 头文件(.h) 和 实现文件(.cpp) 之间进行切换。\n\n3. Ctrl + i ：自动格式化选中代码。\n\n4. F2 ： 快速切换到 光标选中对象 的源码。\n\n5. 快速添加方法实体(.cpp)声明： 将光标移动到h文件中的方法声明。按Alt(按住)+ Enter,再按回车键将在cpp中添加该函数的声明。\n\n6. 按Alt +数字键(1-7)可以快速打开对应的输出窗口。\n\n7. 右键Refactor可以重构修改变量或函数名 。\n\n8. 书签： Ctrl + M 添加/删除书签,按Ctrl + . 查找并移动到下一个标签\n\n9. 分栏显示：:\n  - 先按Ctrl + e后松开再按2添加上下布局的分栏\n  - 先按Ctrl + e后松开再按3添加左右布局的分栏\n  - 先按Ctrl + e后松开再按1删除所有的分栏\n\n  \n```\nctrl+F:查找（当前文件）\nctrl+shift+F:高级查找（项目或工程等） 常用!!!\nctrl+r:直接运行： 常用!!!\nF5:调试运行 常用!!!\n调试-restart debugging.\n\n执行qmake：qmake *.pro:根据pro文件生成makefile。（然后make根据makefile编译链接生成可执行文件。也就是构建！）\n注意：清除（或重新构建）并不清除makefile，可自己试试。如果修改了pro文件，请注意执行qmake一下。\nF9：断点； 常用!!!\nF10：单步跳过； 常用!!!\nF11：单步进入； 常用!!!\nCtrl+M：书签。书签跳转可能与搜狗输入法的快捷键冲突。\n\n某个函数上按F1，跳转到帮助。 常用!!!\n\n左右或上下分栏显示。 好用！\n构建菜单 - 忽略构建执行运行。\nF2: 函数声明和定义之间跳转。 常用!!!\nF4：头文件和cpp文件之间跳转。 常用!!!\nAlt+0:\nCtrl+\\ :注释和不注释 常用!!!\n\nshift+del:删除当前行。\nctrl+ins:复制当前行。\n\n有时需要手动修改mainwindow.ui文件，右键-用普通文件编辑器打开即可修改。\n\n工程右键-add existing directory。（删除文件后，可用此添加回来，在pro文件中即可显示添加的文件）。\n右键-添加库。\n\n```\n","slug":"Qt-Creator常用快捷键","published":1,"updated":"2020-08-18T02:50:39.569Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxff0033sify5xkiew4h","content":"<p>Qt Creator常用快捷键</p>\n<a id=\"more\"></a>\n<ol>\n<li>\n<p>Ctrl + / ：注释/取消注释选定内容。</p>\n</li>\n<li>\n<p>F4 ：在 头文件(.h) 和 实现文件(.cpp) 之间进行切换。</p>\n</li>\n<li>\n<p>Ctrl + i ：自动格式化选中代码。</p>\n</li>\n<li>\n<p>F2 ： 快速切换到 光标选中对象 的源码。</p>\n</li>\n<li>\n<p>快速添加方法实体(.cpp)声明： 将光标移动到h文件中的方法声明。按Alt(按住)+ Enter,再按回车键将在cpp中添加该函数的声明。</p>\n</li>\n<li>\n<p>按Alt +数字键(1-7)可以快速打开对应的输出窗口。</p>\n</li>\n<li>\n<p>右键Refactor可以重构修改变量或函数名 。</p>\n</li>\n<li>\n<p>书签： Ctrl + M 添加/删除书签,按Ctrl + . 查找并移动到下一个标签</p>\n</li>\n<li>\n<p>分栏显示：:</p>\n</li>\n</ol>\n<ul>\n<li>先按Ctrl + e后松开再按2添加上下布局的分栏</li>\n<li>先按Ctrl + e后松开再按3添加左右布局的分栏</li>\n<li>先按Ctrl + e后松开再按1删除所有的分栏</li>\n</ul>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+F:查找（当前文件）</span><br><span class=\"line\">ctrl+shift+F:高级查找（项目或工程等） 常用!!!</span><br><span class=\"line\">ctrl+r:直接运行： 常用!!!</span><br><span class=\"line\">F5:调试运行 常用!!!</span><br><span class=\"line\">调试-restart debugging.</span><br><span class=\"line\"></span><br><span class=\"line\">执行qmake：qmake *.pro:根据pro文件生成makefile。（然后make根据makefile编译链接生成可执行文件。也就是构建！）</span><br><span class=\"line\">注意：清除（或重新构建）并不清除makefile，可自己试试。如果修改了pro文件，请注意执行qmake一下。</span><br><span class=\"line\">F9：断点； 常用!!!</span><br><span class=\"line\">F10：单步跳过； 常用!!!</span><br><span class=\"line\">F11：单步进入； 常用!!!</span><br><span class=\"line\">Ctrl+M：书签。书签跳转可能与搜狗输入法的快捷键冲突。</span><br><span class=\"line\"></span><br><span class=\"line\">某个函数上按F1，跳转到帮助。 常用!!!</span><br><span class=\"line\"></span><br><span class=\"line\">左右或上下分栏显示。 好用！</span><br><span class=\"line\">构建菜单 - 忽略构建执行运行。</span><br><span class=\"line\">F2: 函数声明和定义之间跳转。 常用!!!</span><br><span class=\"line\">F4：头文件和cpp文件之间跳转。 常用!!!</span><br><span class=\"line\">Alt+<span class=\"number\">0</span>:</span><br><span class=\"line\">Ctrl+\\ :注释和不注释 常用!!!</span><br><span class=\"line\"></span><br><span class=\"line\">shift+del:删除当前行。</span><br><span class=\"line\">ctrl+ins:复制当前行。</span><br><span class=\"line\"></span><br><span class=\"line\">有时需要手动修改mainwindow.ui文件，右键-用普通文件编辑器打开即可修改。</span><br><span class=\"line\"></span><br><span class=\"line\">工程右键-add existing directory。（删除文件后，可用此添加回来，在pro文件中即可显示添加的文件）。</span><br><span class=\"line\">右键-添加库。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Qt Creator常用快捷键</p>","more":"<ol>\n<li>\n<p>Ctrl + / ：注释/取消注释选定内容。</p>\n</li>\n<li>\n<p>F4 ：在 头文件(.h) 和 实现文件(.cpp) 之间进行切换。</p>\n</li>\n<li>\n<p>Ctrl + i ：自动格式化选中代码。</p>\n</li>\n<li>\n<p>F2 ： 快速切换到 光标选中对象 的源码。</p>\n</li>\n<li>\n<p>快速添加方法实体(.cpp)声明： 将光标移动到h文件中的方法声明。按Alt(按住)+ Enter,再按回车键将在cpp中添加该函数的声明。</p>\n</li>\n<li>\n<p>按Alt +数字键(1-7)可以快速打开对应的输出窗口。</p>\n</li>\n<li>\n<p>右键Refactor可以重构修改变量或函数名 。</p>\n</li>\n<li>\n<p>书签： Ctrl + M 添加/删除书签,按Ctrl + . 查找并移动到下一个标签</p>\n</li>\n<li>\n<p>分栏显示：:</p>\n</li>\n</ol>\n<ul>\n<li>先按Ctrl + e后松开再按2添加上下布局的分栏</li>\n<li>先按Ctrl + e后松开再按3添加左右布局的分栏</li>\n<li>先按Ctrl + e后松开再按1删除所有的分栏</li>\n</ul>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+F:查找（当前文件）</span><br><span class=\"line\">ctrl+shift+F:高级查找（项目或工程等） 常用!!!</span><br><span class=\"line\">ctrl+r:直接运行： 常用!!!</span><br><span class=\"line\">F5:调试运行 常用!!!</span><br><span class=\"line\">调试-restart debugging.</span><br><span class=\"line\"></span><br><span class=\"line\">执行qmake：qmake *.pro:根据pro文件生成makefile。（然后make根据makefile编译链接生成可执行文件。也就是构建！）</span><br><span class=\"line\">注意：清除（或重新构建）并不清除makefile，可自己试试。如果修改了pro文件，请注意执行qmake一下。</span><br><span class=\"line\">F9：断点； 常用!!!</span><br><span class=\"line\">F10：单步跳过； 常用!!!</span><br><span class=\"line\">F11：单步进入； 常用!!!</span><br><span class=\"line\">Ctrl+M：书签。书签跳转可能与搜狗输入法的快捷键冲突。</span><br><span class=\"line\"></span><br><span class=\"line\">某个函数上按F1，跳转到帮助。 常用!!!</span><br><span class=\"line\"></span><br><span class=\"line\">左右或上下分栏显示。 好用！</span><br><span class=\"line\">构建菜单 - 忽略构建执行运行。</span><br><span class=\"line\">F2: 函数声明和定义之间跳转。 常用!!!</span><br><span class=\"line\">F4：头文件和cpp文件之间跳转。 常用!!!</span><br><span class=\"line\">Alt+<span class=\"number\">0</span>:</span><br><span class=\"line\">Ctrl+\\ :注释和不注释 常用!!!</span><br><span class=\"line\"></span><br><span class=\"line\">shift+del:删除当前行。</span><br><span class=\"line\">ctrl+ins:复制当前行。</span><br><span class=\"line\"></span><br><span class=\"line\">有时需要手动修改mainwindow.ui文件，右键-用普通文件编辑器打开即可修改。</span><br><span class=\"line\"></span><br><span class=\"line\">工程右键-add existing directory。（删除文件后，可用此添加回来，在pro文件中即可显示添加的文件）。</span><br><span class=\"line\">右键-添加库。</span><br></pre></td></tr></table></figure>"},{"title":"Vim Cheat Sheet","date":"2018-05-18T03:00:55.000Z","_content":"\n#### 光标\n\n- h - 左移光标\n- j - 下移光标\n- k - 上移光标\n- l - 右移光标\n- w - 移动到下个单词开头\n- W - 移动到下个单词开头(单词含标点)\n- e - 移动到下个单词结尾\n- E - 移动到下个单词结尾(单词含标点)\n- b - 移动到上个单词结尾\n- B -移动到上个单词结尾(单词含标点)\n- O - 移动到行首\n- ^ - 移动到行首的非空白符\n- $ - 移动到行尾\n- G - 移动到文档末行行首\n- {n}G - 移动到第{n}行\n\nTip: 命令前追加数字表示命令的重复次数，比如5j表示向下移动4行 \n\n<!-- more -->\n\n#### 插入模式 - 插入/追加文本\n\n- i - 从光标前开始插入字符\n- I - 从行首开始插入字符\n- a - 从光标后开始插入字符\n- A - 从行尾开始插入字符\n- o - 在当前行之下另起一行，开始插入字符\n- O - 在当前行至上另起一行，开始插入字符\n- ea - 从当前单词末尾开始插入\n- Esc - 退出插入模式\n\n#### 编辑\n\n- r - 替换当前字符\n- J - 将下一行合并到当前行\n- cc - 清空当前行，然后进入插入模式\n- cw - 从光标位置开始，修改单词\n- c$ - 从光标位置开始，修改当前行\n- s - 删除当前字符，然后进入插入模式\n- S - 清空当前行，然后进入插入模式(同cc)\n- xp - 当前字符后移\n- u - 撤销\n- Ctrl + r - 重复\n- .- 再次执行上个命令\n\n#### 选择文本(可视化模式)\n\n- v - 进入可视化模式，移动光标高亮选择，然后可以对选择的文本执行命令(例如y-复制)\n- V - 进入可视化模式(行粒度选择)\n- o - 切换光标到选择区开头/结尾\n- Ctrl + v - 进入可视化模式(矩阵选择)\n- O - 切换光标到选择区的角\n- aw - 选择当前单词\n- ab - 选择被()包裹的区域(含括号)\n- aB - 选择被{}包裹的区域(含花括号)\n- ib - 选择被()包裹的区域(不含括号)\n- iB - 选择被{}包裹的区域(不含花括号)\n- Esc - 退出可视化模式\n\n#### 可视化模式命令\n\n- < - 向左缩进 | > - 向右缩进\n- y - 复制\n- d - 剪切\n- ~ - 大小写切换\n\n#### 剪切、复制、粘贴\n\n- yy - 复制当前行\n- 2yy - 复制2行\n- yw - 复制当前单词\n- y$ - 复制，从光标位置到行末\n- p - 在光标后粘贴\n- P - 在光标前粘贴\n- dd - 剪切当前行\n- 2dd - 剪切2行\n- dw - 剪切当前单词\n- D - 剪切，从光标位置到行末\n- d$ - 剪切，从光标位置到行末(同D)\n- x - 剪切当前字符\n\n#### 查找/替换\n\n- /pattern - 查找pattern\n- ?pattern - 向上查找pattern\n- n - 查找下一个\n- N - 查找上一个\n- :%s/old/new/g - 替换全部\n- :%s/old/new/gc - (逐个)替换\n\n#### 多文件\n\n- :e filename - 新建缓冲区打开filename\n- :bnext or :bn - 切换到下个缓冲区\n- :bprev or :bp - 切换到上个缓冲区\n- :bd - 关闭缓冲区\n- :sp filename - 新建缓冲区打开 filename 并水平分栏\n- :vsp filename - 新缓冲区打开 filename 并垂直分栏\n- Ctrl + ws - 水平分栏\n- Ctrl + ww - 在分栏间切换\n- Ctrl + wq - 关闭分栏\n- Ctrl + wv - 垂直分栏\n- Ctrl + wh - 切换到右侧分栏\n- Ctrl + wl - 切换到左侧分栏\n- Ctrl + wj - move cursor to the window below (horizontal split)\n- Ctrl + wk - move cursor to the window above (horizontal split)\n\n#### 页签\n\n- :tabnew filename or :tabn filename - 创建新页签/在新标签页中打开文档\n- Ctrl + wT - 将分栏变成页签\n- gt or :tabnext or :tabn - 切换到下一个页签\n- gT or :tabprev or :tabp - 切换到上一个页签\n- Xgt - 切换到第X个页签\n- :tabmove # - 移动页签到第 # 位(下标从0开始)\n- :tabclose or :tabc - 关闭当前页签\n- :tabonly or :tabo - 关闭其他页签\n\nTip: \"X\" 表示一个具体的数字\n\n#### 退出\n\n- :w - 保存\n- :wq or :x or ZZ - 保存并退出\n- :q - 退出(修改未保存时警告)\n- :q! or ZQ - 不保存强制退出\n\n\n#### 补充\n\n- nu 显示光标所在行号\n- :set nu 显示所有行号\n\n\n\n","source":"_posts/Vim-Cheat-Sheet.md","raw":"---\ntitle: Vim Cheat Sheet\ndate: 2018-05-18 11:00:55\ntags: [vim]\ncategories: linux\n---\n\n#### 光标\n\n- h - 左移光标\n- j - 下移光标\n- k - 上移光标\n- l - 右移光标\n- w - 移动到下个单词开头\n- W - 移动到下个单词开头(单词含标点)\n- e - 移动到下个单词结尾\n- E - 移动到下个单词结尾(单词含标点)\n- b - 移动到上个单词结尾\n- B -移动到上个单词结尾(单词含标点)\n- O - 移动到行首\n- ^ - 移动到行首的非空白符\n- $ - 移动到行尾\n- G - 移动到文档末行行首\n- {n}G - 移动到第{n}行\n\nTip: 命令前追加数字表示命令的重复次数，比如5j表示向下移动4行 \n\n<!-- more -->\n\n#### 插入模式 - 插入/追加文本\n\n- i - 从光标前开始插入字符\n- I - 从行首开始插入字符\n- a - 从光标后开始插入字符\n- A - 从行尾开始插入字符\n- o - 在当前行之下另起一行，开始插入字符\n- O - 在当前行至上另起一行，开始插入字符\n- ea - 从当前单词末尾开始插入\n- Esc - 退出插入模式\n\n#### 编辑\n\n- r - 替换当前字符\n- J - 将下一行合并到当前行\n- cc - 清空当前行，然后进入插入模式\n- cw - 从光标位置开始，修改单词\n- c$ - 从光标位置开始，修改当前行\n- s - 删除当前字符，然后进入插入模式\n- S - 清空当前行，然后进入插入模式(同cc)\n- xp - 当前字符后移\n- u - 撤销\n- Ctrl + r - 重复\n- .- 再次执行上个命令\n\n#### 选择文本(可视化模式)\n\n- v - 进入可视化模式，移动光标高亮选择，然后可以对选择的文本执行命令(例如y-复制)\n- V - 进入可视化模式(行粒度选择)\n- o - 切换光标到选择区开头/结尾\n- Ctrl + v - 进入可视化模式(矩阵选择)\n- O - 切换光标到选择区的角\n- aw - 选择当前单词\n- ab - 选择被()包裹的区域(含括号)\n- aB - 选择被{}包裹的区域(含花括号)\n- ib - 选择被()包裹的区域(不含括号)\n- iB - 选择被{}包裹的区域(不含花括号)\n- Esc - 退出可视化模式\n\n#### 可视化模式命令\n\n- < - 向左缩进 | > - 向右缩进\n- y - 复制\n- d - 剪切\n- ~ - 大小写切换\n\n#### 剪切、复制、粘贴\n\n- yy - 复制当前行\n- 2yy - 复制2行\n- yw - 复制当前单词\n- y$ - 复制，从光标位置到行末\n- p - 在光标后粘贴\n- P - 在光标前粘贴\n- dd - 剪切当前行\n- 2dd - 剪切2行\n- dw - 剪切当前单词\n- D - 剪切，从光标位置到行末\n- d$ - 剪切，从光标位置到行末(同D)\n- x - 剪切当前字符\n\n#### 查找/替换\n\n- /pattern - 查找pattern\n- ?pattern - 向上查找pattern\n- n - 查找下一个\n- N - 查找上一个\n- :%s/old/new/g - 替换全部\n- :%s/old/new/gc - (逐个)替换\n\n#### 多文件\n\n- :e filename - 新建缓冲区打开filename\n- :bnext or :bn - 切换到下个缓冲区\n- :bprev or :bp - 切换到上个缓冲区\n- :bd - 关闭缓冲区\n- :sp filename - 新建缓冲区打开 filename 并水平分栏\n- :vsp filename - 新缓冲区打开 filename 并垂直分栏\n- Ctrl + ws - 水平分栏\n- Ctrl + ww - 在分栏间切换\n- Ctrl + wq - 关闭分栏\n- Ctrl + wv - 垂直分栏\n- Ctrl + wh - 切换到右侧分栏\n- Ctrl + wl - 切换到左侧分栏\n- Ctrl + wj - move cursor to the window below (horizontal split)\n- Ctrl + wk - move cursor to the window above (horizontal split)\n\n#### 页签\n\n- :tabnew filename or :tabn filename - 创建新页签/在新标签页中打开文档\n- Ctrl + wT - 将分栏变成页签\n- gt or :tabnext or :tabn - 切换到下一个页签\n- gT or :tabprev or :tabp - 切换到上一个页签\n- Xgt - 切换到第X个页签\n- :tabmove # - 移动页签到第 # 位(下标从0开始)\n- :tabclose or :tabc - 关闭当前页签\n- :tabonly or :tabo - 关闭其他页签\n\nTip: \"X\" 表示一个具体的数字\n\n#### 退出\n\n- :w - 保存\n- :wq or :x or ZZ - 保存并退出\n- :q - 退出(修改未保存时警告)\n- :q! or ZQ - 不保存强制退出\n\n\n#### 补充\n\n- nu 显示光标所在行号\n- :set nu 显示所有行号\n\n\n\n","slug":"Vim-Cheat-Sheet","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfg0036sifyfygb8qip","content":"<h4 id=\"光标\"><a class=\"markdownIt-Anchor\" href=\"#光标\"></a> 光标</h4>\n<ul>\n<li>h - 左移光标</li>\n<li>j - 下移光标</li>\n<li>k - 上移光标</li>\n<li>l - 右移光标</li>\n<li>w - 移动到下个单词开头</li>\n<li>W - 移动到下个单词开头(单词含标点)</li>\n<li>e - 移动到下个单词结尾</li>\n<li>E - 移动到下个单词结尾(单词含标点)</li>\n<li>b - 移动到上个单词结尾</li>\n<li>B -移动到上个单词结尾(单词含标点)</li>\n<li>O - 移动到行首</li>\n<li>^ - 移动到行首的非空白符</li>\n<li>$ - 移动到行尾</li>\n<li>G - 移动到文档末行行首</li>\n<li>{n}G - 移动到第{n}行</li>\n</ul>\n<p>Tip: 命令前追加数字表示命令的重复次数，比如5j表示向下移动4行</p>\n<a id=\"more\"></a>\n<h4 id=\"插入模式-插入追加文本\"><a class=\"markdownIt-Anchor\" href=\"#插入模式-插入追加文本\"></a> 插入模式 - 插入/追加文本</h4>\n<ul>\n<li>i - 从光标前开始插入字符</li>\n<li>I - 从行首开始插入字符</li>\n<li>a - 从光标后开始插入字符</li>\n<li>A - 从行尾开始插入字符</li>\n<li>o - 在当前行之下另起一行，开始插入字符</li>\n<li>O - 在当前行至上另起一行，开始插入字符</li>\n<li>ea - 从当前单词末尾开始插入</li>\n<li>Esc - 退出插入模式</li>\n</ul>\n<h4 id=\"编辑\"><a class=\"markdownIt-Anchor\" href=\"#编辑\"></a> 编辑</h4>\n<ul>\n<li>r - 替换当前字符</li>\n<li>J - 将下一行合并到当前行</li>\n<li>cc - 清空当前行，然后进入插入模式</li>\n<li>cw - 从光标位置开始，修改单词</li>\n<li>c$ - 从光标位置开始，修改当前行</li>\n<li>s - 删除当前字符，然后进入插入模式</li>\n<li>S - 清空当前行，然后进入插入模式(同cc)</li>\n<li>xp - 当前字符后移</li>\n<li>u - 撤销</li>\n<li>Ctrl + r - 重复</li>\n<li>.- 再次执行上个命令</li>\n</ul>\n<h4 id=\"选择文本可视化模式\"><a class=\"markdownIt-Anchor\" href=\"#选择文本可视化模式\"></a> 选择文本(可视化模式)</h4>\n<ul>\n<li>v - 进入可视化模式，移动光标高亮选择，然后可以对选择的文本执行命令(例如y-复制)</li>\n<li>V - 进入可视化模式(行粒度选择)</li>\n<li>o - 切换光标到选择区开头/结尾</li>\n<li>Ctrl + v - 进入可视化模式(矩阵选择)</li>\n<li>O - 切换光标到选择区的角</li>\n<li>aw - 选择当前单词</li>\n<li>ab - 选择被()包裹的区域(含括号)</li>\n<li>aB - 选择被{}包裹的区域(含花括号)</li>\n<li>ib - 选择被()包裹的区域(不含括号)</li>\n<li>iB - 选择被{}包裹的区域(不含花括号)</li>\n<li>Esc - 退出可视化模式</li>\n</ul>\n<h4 id=\"可视化模式命令\"><a class=\"markdownIt-Anchor\" href=\"#可视化模式命令\"></a> 可视化模式命令</h4>\n<ul>\n<li>&lt; - 向左缩进 | &gt; - 向右缩进</li>\n<li>y - 复制</li>\n<li>d - 剪切</li>\n<li>~ - 大小写切换</li>\n</ul>\n<h4 id=\"剪切-复制-粘贴\"><a class=\"markdownIt-Anchor\" href=\"#剪切-复制-粘贴\"></a> 剪切、复制、粘贴</h4>\n<ul>\n<li>yy - 复制当前行</li>\n<li>2yy - 复制2行</li>\n<li>yw - 复制当前单词</li>\n<li>y$ - 复制，从光标位置到行末</li>\n<li>p - 在光标后粘贴</li>\n<li>P - 在光标前粘贴</li>\n<li>dd - 剪切当前行</li>\n<li>2dd - 剪切2行</li>\n<li>dw - 剪切当前单词</li>\n<li>D - 剪切，从光标位置到行末</li>\n<li>d$ - 剪切，从光标位置到行末(同D)</li>\n<li>x - 剪切当前字符</li>\n</ul>\n<h4 id=\"查找替换\"><a class=\"markdownIt-Anchor\" href=\"#查找替换\"></a> 查找/替换</h4>\n<ul>\n<li>/pattern - 查找pattern</li>\n<li>?pattern - 向上查找pattern</li>\n<li>n - 查找下一个</li>\n<li>N - 查找上一个</li>\n<li>:%s/old/new/g - 替换全部</li>\n<li>:%s/old/new/gc - (逐个)替换</li>\n</ul>\n<h4 id=\"多文件\"><a class=\"markdownIt-Anchor\" href=\"#多文件\"></a> 多文件</h4>\n<ul>\n<li>:e filename - 新建缓冲区打开filename</li>\n<li>:bnext or :bn - 切换到下个缓冲区</li>\n<li>:bprev or :bp - 切换到上个缓冲区</li>\n<li>:bd - 关闭缓冲区</li>\n<li>:sp filename - 新建缓冲区打开 filename 并水平分栏</li>\n<li>:vsp filename - 新缓冲区打开 filename 并垂直分栏</li>\n<li>Ctrl + ws - 水平分栏</li>\n<li>Ctrl + ww - 在分栏间切换</li>\n<li>Ctrl + wq - 关闭分栏</li>\n<li>Ctrl + wv - 垂直分栏</li>\n<li>Ctrl + wh - 切换到右侧分栏</li>\n<li>Ctrl + wl - 切换到左侧分栏</li>\n<li>Ctrl + wj - move cursor to the window below (horizontal split)</li>\n<li>Ctrl + wk - move cursor to the window above (horizontal split)</li>\n</ul>\n<h4 id=\"页签\"><a class=\"markdownIt-Anchor\" href=\"#页签\"></a> 页签</h4>\n<ul>\n<li>:tabnew filename or :tabn filename - 创建新页签/在新标签页中打开文档</li>\n<li>Ctrl + wT - 将分栏变成页签</li>\n<li>gt or :tabnext or :tabn - 切换到下一个页签</li>\n<li>gT or :tabprev or :tabp - 切换到上一个页签</li>\n<li>Xgt - 切换到第X个页签</li>\n<li>:tabmove # - 移动页签到第 # 位(下标从0开始)</li>\n<li>:tabclose or :tabc - 关闭当前页签</li>\n<li>:tabonly or :tabo - 关闭其他页签</li>\n</ul>\n<p>Tip: “X” 表示一个具体的数字</p>\n<h4 id=\"退出\"><a class=\"markdownIt-Anchor\" href=\"#退出\"></a> 退出</h4>\n<ul>\n<li>:w - 保存</li>\n<li>:wq or :x or ZZ - 保存并退出</li>\n<li>:q - 退出(修改未保存时警告)</li>\n<li>:q! or ZQ - 不保存强制退出</li>\n</ul>\n<h4 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h4>\n<ul>\n<li>nu 显示光标所在行号</li>\n<li>:set nu 显示所有行号</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"光标\"><a class=\"markdownIt-Anchor\" href=\"#光标\"></a> 光标</h4>\n<ul>\n<li>h - 左移光标</li>\n<li>j - 下移光标</li>\n<li>k - 上移光标</li>\n<li>l - 右移光标</li>\n<li>w - 移动到下个单词开头</li>\n<li>W - 移动到下个单词开头(单词含标点)</li>\n<li>e - 移动到下个单词结尾</li>\n<li>E - 移动到下个单词结尾(单词含标点)</li>\n<li>b - 移动到上个单词结尾</li>\n<li>B -移动到上个单词结尾(单词含标点)</li>\n<li>O - 移动到行首</li>\n<li>^ - 移动到行首的非空白符</li>\n<li>$ - 移动到行尾</li>\n<li>G - 移动到文档末行行首</li>\n<li>{n}G - 移动到第{n}行</li>\n</ul>\n<p>Tip: 命令前追加数字表示命令的重复次数，比如5j表示向下移动4行</p>","more":"<h4 id=\"插入模式-插入追加文本\"><a class=\"markdownIt-Anchor\" href=\"#插入模式-插入追加文本\"></a> 插入模式 - 插入/追加文本</h4>\n<ul>\n<li>i - 从光标前开始插入字符</li>\n<li>I - 从行首开始插入字符</li>\n<li>a - 从光标后开始插入字符</li>\n<li>A - 从行尾开始插入字符</li>\n<li>o - 在当前行之下另起一行，开始插入字符</li>\n<li>O - 在当前行至上另起一行，开始插入字符</li>\n<li>ea - 从当前单词末尾开始插入</li>\n<li>Esc - 退出插入模式</li>\n</ul>\n<h4 id=\"编辑\"><a class=\"markdownIt-Anchor\" href=\"#编辑\"></a> 编辑</h4>\n<ul>\n<li>r - 替换当前字符</li>\n<li>J - 将下一行合并到当前行</li>\n<li>cc - 清空当前行，然后进入插入模式</li>\n<li>cw - 从光标位置开始，修改单词</li>\n<li>c$ - 从光标位置开始，修改当前行</li>\n<li>s - 删除当前字符，然后进入插入模式</li>\n<li>S - 清空当前行，然后进入插入模式(同cc)</li>\n<li>xp - 当前字符后移</li>\n<li>u - 撤销</li>\n<li>Ctrl + r - 重复</li>\n<li>.- 再次执行上个命令</li>\n</ul>\n<h4 id=\"选择文本可视化模式\"><a class=\"markdownIt-Anchor\" href=\"#选择文本可视化模式\"></a> 选择文本(可视化模式)</h4>\n<ul>\n<li>v - 进入可视化模式，移动光标高亮选择，然后可以对选择的文本执行命令(例如y-复制)</li>\n<li>V - 进入可视化模式(行粒度选择)</li>\n<li>o - 切换光标到选择区开头/结尾</li>\n<li>Ctrl + v - 进入可视化模式(矩阵选择)</li>\n<li>O - 切换光标到选择区的角</li>\n<li>aw - 选择当前单词</li>\n<li>ab - 选择被()包裹的区域(含括号)</li>\n<li>aB - 选择被{}包裹的区域(含花括号)</li>\n<li>ib - 选择被()包裹的区域(不含括号)</li>\n<li>iB - 选择被{}包裹的区域(不含花括号)</li>\n<li>Esc - 退出可视化模式</li>\n</ul>\n<h4 id=\"可视化模式命令\"><a class=\"markdownIt-Anchor\" href=\"#可视化模式命令\"></a> 可视化模式命令</h4>\n<ul>\n<li>&lt; - 向左缩进 | &gt; - 向右缩进</li>\n<li>y - 复制</li>\n<li>d - 剪切</li>\n<li>~ - 大小写切换</li>\n</ul>\n<h4 id=\"剪切-复制-粘贴\"><a class=\"markdownIt-Anchor\" href=\"#剪切-复制-粘贴\"></a> 剪切、复制、粘贴</h4>\n<ul>\n<li>yy - 复制当前行</li>\n<li>2yy - 复制2行</li>\n<li>yw - 复制当前单词</li>\n<li>y$ - 复制，从光标位置到行末</li>\n<li>p - 在光标后粘贴</li>\n<li>P - 在光标前粘贴</li>\n<li>dd - 剪切当前行</li>\n<li>2dd - 剪切2行</li>\n<li>dw - 剪切当前单词</li>\n<li>D - 剪切，从光标位置到行末</li>\n<li>d$ - 剪切，从光标位置到行末(同D)</li>\n<li>x - 剪切当前字符</li>\n</ul>\n<h4 id=\"查找替换\"><a class=\"markdownIt-Anchor\" href=\"#查找替换\"></a> 查找/替换</h4>\n<ul>\n<li>/pattern - 查找pattern</li>\n<li>?pattern - 向上查找pattern</li>\n<li>n - 查找下一个</li>\n<li>N - 查找上一个</li>\n<li>:%s/old/new/g - 替换全部</li>\n<li>:%s/old/new/gc - (逐个)替换</li>\n</ul>\n<h4 id=\"多文件\"><a class=\"markdownIt-Anchor\" href=\"#多文件\"></a> 多文件</h4>\n<ul>\n<li>:e filename - 新建缓冲区打开filename</li>\n<li>:bnext or :bn - 切换到下个缓冲区</li>\n<li>:bprev or :bp - 切换到上个缓冲区</li>\n<li>:bd - 关闭缓冲区</li>\n<li>:sp filename - 新建缓冲区打开 filename 并水平分栏</li>\n<li>:vsp filename - 新缓冲区打开 filename 并垂直分栏</li>\n<li>Ctrl + ws - 水平分栏</li>\n<li>Ctrl + ww - 在分栏间切换</li>\n<li>Ctrl + wq - 关闭分栏</li>\n<li>Ctrl + wv - 垂直分栏</li>\n<li>Ctrl + wh - 切换到右侧分栏</li>\n<li>Ctrl + wl - 切换到左侧分栏</li>\n<li>Ctrl + wj - move cursor to the window below (horizontal split)</li>\n<li>Ctrl + wk - move cursor to the window above (horizontal split)</li>\n</ul>\n<h4 id=\"页签\"><a class=\"markdownIt-Anchor\" href=\"#页签\"></a> 页签</h4>\n<ul>\n<li>:tabnew filename or :tabn filename - 创建新页签/在新标签页中打开文档</li>\n<li>Ctrl + wT - 将分栏变成页签</li>\n<li>gt or :tabnext or :tabn - 切换到下一个页签</li>\n<li>gT or :tabprev or :tabp - 切换到上一个页签</li>\n<li>Xgt - 切换到第X个页签</li>\n<li>:tabmove # - 移动页签到第 # 位(下标从0开始)</li>\n<li>:tabclose or :tabc - 关闭当前页签</li>\n<li>:tabonly or :tabo - 关闭其他页签</li>\n</ul>\n<p>Tip: “X” 表示一个具体的数字</p>\n<h4 id=\"退出\"><a class=\"markdownIt-Anchor\" href=\"#退出\"></a> 退出</h4>\n<ul>\n<li>:w - 保存</li>\n<li>:wq or :x or ZZ - 保存并退出</li>\n<li>:q - 退出(修改未保存时警告)</li>\n<li>:q! or ZQ - 不保存强制退出</li>\n</ul>\n<h4 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h4>\n<ul>\n<li>nu 显示光标所在行号</li>\n<li>:set nu 显示所有行号</li>\n</ul>"},{"title":"Xcode升级11，'iostream' file not found问题","date":"2020-07-20T11:09:45.000Z","_content":"\n升级xcode11后，代码报错：'iostream' file not found\n\n解决方法：\n\nBuild Settings -> Search paths -> System Header Search Paths\n\n在Debug和Release添加\n\n```\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\n```\n\n添加后，重新编译，发现已正常。","source":"_posts/Xcode升级11，-iostream-file-not-found问题.md","raw":"---\ntitle: Xcode升级11，'iostream' file not found问题\ndate: 2020-07-20 19:09:45\ntags: [xcode, c++]\ncategories: xcode\n---\n\n升级xcode11后，代码报错：'iostream' file not found\n\n解决方法：\n\nBuild Settings -> Search paths -> System Header Search Paths\n\n在Debug和Release添加\n\n```\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\n```\n\n添加后，重新编译，发现已正常。","slug":"Xcode升级11，-iostream-file-not-found问题","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfh003asifyh1ps8ru5","content":"<p>升级xcode11后，代码报错：‘iostream’ file not found</p>\n<p>解决方法：</p>\n<p>Build Settings -&gt; Search paths -&gt; System Header Search Paths</p>\n<p>在Debug和Release添加</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer<span class=\"regexp\">/Toolchains/</span>XcodeDefault.xctoolchain<span class=\"regexp\">/usr/i</span>nclude<span class=\"regexp\">/c++/</span>v1</span><br></pre></td></tr></table></figure>\n<p>添加后，重新编译，发现已正常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>升级xcode11后，代码报错：‘iostream’ file not found</p>\n<p>解决方法：</p>\n<p>Build Settings -&gt; Search paths -&gt; System Header Search Paths</p>\n<p>在Debug和Release添加</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer<span class=\"regexp\">/Toolchains/</span>XcodeDefault.xctoolchain<span class=\"regexp\">/usr/i</span>nclude<span class=\"regexp\">/c++/</span>v1</span><br></pre></td></tr></table></figure>\n<p>添加后，重新编译，发现已正常。</p>\n"},{"title":"git submodule的使用","date":"2018-12-10T02:48:46.000Z","_content":"\n<!-- more -->\n### 添加\n\n为当前工程添加submodule，命令如下：\n\n```\n\tgit submodule add 仓库地址 路径\n\n```\n其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。 \n**注意**：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能顺利 clone）\n\n命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。\n\n### 删除\nsubmodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。\n\n### 下载的工程带有submodule\n当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：\n\n```\ngit submodule update --init --recursive\n```\n\n即可将子模块内容下载下来后工程才不会缺少相应的文件。\n","source":"_posts/git-submodule的使用.md","raw":"---\ntitle: git submodule的使用\ndate: 2018-12-10 10:48:46\ntags: [git]\ncategories: git\n---\n\n<!-- more -->\n### 添加\n\n为当前工程添加submodule，命令如下：\n\n```\n\tgit submodule add 仓库地址 路径\n\n```\n其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。 \n**注意**：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能顺利 clone）\n\n命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。\n\n### 删除\nsubmodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。\n\n### 下载的工程带有submodule\n当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：\n\n```\ngit submodule update --init --recursive\n```\n\n即可将子模块内容下载下来后工程才不会缺少相应的文件。\n","slug":"git-submodule的使用","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfi003esifyqarfnv23","content":"<a id=\"more\"></a>\n<h3 id=\"添加\"><a class=\"markdownIt-Anchor\" href=\"#添加\"></a> 添加</h3>\n<p>为当前工程添加submodule，命令如下：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">submodule </span><span class=\"keyword\">add </span>仓库地址 路径</span><br></pre></td></tr></table></figure>\n<p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>\n<strong>注意</strong>：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能顺利 clone）</p>\n<p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。</p>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h3>\n<p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。</p>\n<h3 id=\"下载的工程带有submodule\"><a class=\"markdownIt-Anchor\" href=\"#下载的工程带有submodule\"></a> 下载的工程带有submodule</h3>\n<p>当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">submodule</span> <span class=\"comment\">update</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">recursive</span></span><br></pre></td></tr></table></figure>\n<p>即可将子模块内容下载下来后工程才不会缺少相应的文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"添加\"><a class=\"markdownIt-Anchor\" href=\"#添加\"></a> 添加</h3>\n<p>为当前工程添加submodule，命令如下：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">submodule </span><span class=\"keyword\">add </span>仓库地址 路径</span><br></pre></td></tr></table></figure>\n<p>其中，仓库地址是指子模块仓库地址，路径指将子模块放置在当前工程下的路径。<br>\n<strong>注意</strong>：路径不能以 / 结尾（会造成修改不生效）、不能是现有工程已有的目录（不能顺利 clone）</p>\n<p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息。添加完成以后，再将子模块所在的文件夹添加到工程中即可。</p>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\"></a> 删除</h3>\n<p>submodule的删除稍微麻烦点：首先，要在“.gitmodules”文件中删除相应配置信息。然后，执行“git rm –cached ”命令将子模块所在的文件从git中删除。</p>\n<h3 id=\"下载的工程带有submodule\"><a class=\"markdownIt-Anchor\" href=\"#下载的工程带有submodule\"></a> 下载的工程带有submodule</h3>\n<p>当使用git clone下来的工程中带有submodule时，初始的时候，submodule的内容并不会自动下载下来的，此时，只需执行如下命令：</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">git</span> <span class=\"comment\">submodule</span> <span class=\"comment\">update</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">init</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">recursive</span></span><br></pre></td></tr></table></figure>\n<p>即可将子模块内容下载下来后工程才不会缺少相应的文件。</p>"},{"title":".gitignore文件不起作用","date":"2017-01-03T07:38:24.000Z","_content":"\n当用git时，经常会添加一些忽略的文件到.gitignore文件中，这里面类似于git的黑名单，文件中指定的文件不会加入到git仓库中，\n但当发现添加某个文件名后，通过git status查看，并不能忽略此文件。\n\n<!-- more -->\n\n遇到此问题原因是：git仓库中某些文件被stage标记，如果不想用此文件即使添加.gitignore后，也是不会被忽略的。\n\n** .gitignore ** 文件只是ignore没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除。\n\n从网络搜索到此解释：\n\n```\nIf you already have a file checked in, and you want to ignore it, Git will not ignore the file if you add a rule later.\nIn those cases, you must untrack the file first, by running the following command in your terminal:\n\n$ git rm --cached\n\n```\n\n通过上面这句话明白：把我们想要忽略的文件，从他们的staged中移除即可。\n```\ngit rm --cached file/path/to/be/ignored\ngit add .\ngit commit -m \"fix untracked files\"\n```\n\n** 引用 **：\n[ignore-not-working](http://stackoverflow.com/questions/11451535/gitignore-not-working)\n","source":"_posts/gitignore文件不起作用.md","raw":"---\ntitle: .gitignore文件不起作用\ndate: 2017-01-03 15:38:24\ntags: [\"git\"]\ncategories: \"git\"\n---\n\n当用git时，经常会添加一些忽略的文件到.gitignore文件中，这里面类似于git的黑名单，文件中指定的文件不会加入到git仓库中，\n但当发现添加某个文件名后，通过git status查看，并不能忽略此文件。\n\n<!-- more -->\n\n遇到此问题原因是：git仓库中某些文件被stage标记，如果不想用此文件即使添加.gitignore后，也是不会被忽略的。\n\n** .gitignore ** 文件只是ignore没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除。\n\n从网络搜索到此解释：\n\n```\nIf you already have a file checked in, and you want to ignore it, Git will not ignore the file if you add a rule later.\nIn those cases, you must untrack the file first, by running the following command in your terminal:\n\n$ git rm --cached\n\n```\n\n通过上面这句话明白：把我们想要忽略的文件，从他们的staged中移除即可。\n```\ngit rm --cached file/path/to/be/ignored\ngit add .\ngit commit -m \"fix untracked files\"\n```\n\n** 引用 **：\n[ignore-not-working](http://stackoverflow.com/questions/11451535/gitignore-not-working)\n","slug":"gitignore文件不起作用","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfj003isifymcm3v45l","content":"<p>当用git时，经常会添加一些忽略的文件到.gitignore文件中，这里面类似于git的黑名单，文件中指定的文件不会加入到git仓库中，<br>\n但当发现添加某个文件名后，通过git status查看，并不能忽略此文件。</p>\n<a id=\"more\"></a>\n<p>遇到此问题原因是：git仓库中某些文件被stage标记，如果不想用此文件即使添加.gitignore后，也是不会被忽略的。</p>\n<p>** .gitignore ** 文件只是ignore没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除。</p>\n<p>从网络搜索到此解释：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you already have <span class=\"keyword\">a</span> <span class=\"built_in\">file</span> checked <span class=\"keyword\">in</span>, <span class=\"keyword\">and</span> you want <span class=\"built_in\">to</span> ignore <span class=\"keyword\">it</span>, Git will <span class=\"keyword\">not</span> ignore <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> <span class=\"keyword\">if</span> you <span class=\"built_in\">add</span> <span class=\"keyword\">a</span> rule later.</span><br><span class=\"line\">In those cases, you must untrack <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> <span class=\"keyword\">first</span>, <span class=\"keyword\">by</span> running <span class=\"keyword\">the</span> following <span class=\"keyword\">command</span> <span class=\"title\">in</span> <span class=\"title\">your</span> <span class=\"title\">terminal</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ git rm <span class=\"comment\">--cached</span></span><br></pre></td></tr></table></figure>\n<p>通过上面这句话明白：把我们想要忽略的文件，从他们的staged中移除即可。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached <span class=\"keyword\">file</span>/path/<span class=\"keyword\">to</span>/<span class=\"keyword\">be</span>/ignored</span><br><span class=\"line\">git <span class=\"built_in\">add</span> .</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">\"fix untracked files\"</span></span><br></pre></td></tr></table></figure>\n<p>** 引用 **：<br>\n<a href=\"http://stackoverflow.com/questions/11451535/gitignore-not-working\" target=\"_blank\" rel=\"noopener\">ignore-not-working</a></p>\n","site":{"data":{}},"excerpt":"<p>当用git时，经常会添加一些忽略的文件到.gitignore文件中，这里面类似于git的黑名单，文件中指定的文件不会加入到git仓库中，<br>\n但当发现添加某个文件名后，通过git status查看，并不能忽略此文件。</p>","more":"<p>遇到此问题原因是：git仓库中某些文件被stage标记，如果不想用此文件即使添加.gitignore后，也是不会被忽略的。</p>\n<p>** .gitignore ** 文件只是ignore没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除。</p>\n<p>从网络搜索到此解释：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If you already have <span class=\"keyword\">a</span> <span class=\"built_in\">file</span> checked <span class=\"keyword\">in</span>, <span class=\"keyword\">and</span> you want <span class=\"built_in\">to</span> ignore <span class=\"keyword\">it</span>, Git will <span class=\"keyword\">not</span> ignore <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> <span class=\"keyword\">if</span> you <span class=\"built_in\">add</span> <span class=\"keyword\">a</span> rule later.</span><br><span class=\"line\">In those cases, you must untrack <span class=\"keyword\">the</span> <span class=\"built_in\">file</span> <span class=\"keyword\">first</span>, <span class=\"keyword\">by</span> running <span class=\"keyword\">the</span> following <span class=\"keyword\">command</span> <span class=\"title\">in</span> <span class=\"title\">your</span> <span class=\"title\">terminal</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">$ git rm <span class=\"comment\">--cached</span></span><br></pre></td></tr></table></figure>\n<p>通过上面这句话明白：把我们想要忽略的文件，从他们的staged中移除即可。</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached <span class=\"keyword\">file</span>/path/<span class=\"keyword\">to</span>/<span class=\"keyword\">be</span>/ignored</span><br><span class=\"line\">git <span class=\"built_in\">add</span> .</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">\"fix untracked files\"</span></span><br></pre></td></tr></table></figure>\n<p>** 引用 **：<br>\n<a href=\"http://stackoverflow.com/questions/11451535/gitignore-not-working\" target=\"_blank\" rel=\"noopener\">ignore-not-working</a></p>"},{"title":"iPhone开发-GCD","date":"2017-11-15T12:57:52.000Z","_content":"\n一些常用的API\n\n<!-- more -->\n\n```\n//异步执行一个线程\ndispatch_async(queue,^{});\n\n//创建一个线程\ndispatch_queue_t queue =     dispatch_queuq_create(\"com.example.queue\",NULL);\n\n//获取主线程的方法\ndispatch_get_main_queue();\n\n//优先级获取方法\ndispath_queue_t queue = dispatch_get_global_queue(优先级，0);\nDispatch Queue 的种类 有几种\n\n//优先级常量\nDISPATCH_QUEUE_PRIORITY_HIGH\nDISPATCH_QUEUE_PRIORITY_DEFAULT\nDISPATCH_QUEUE_PRIORITY_LOW\nDISPATCH_QUEUE_PRIORITY_BACKGROUND\n\n\n//延迟执行\ndispatch_after\n\ndispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW,3ull*NSEC_PER_SEC);\n```\n\n处理线程的API，有涉及到暂停，挂起，恢复，取消，等待、延迟执行，线程组，同步和异步 ，死锁，只执行一次，等系列的概念出现。这些概念大部分是对于处理线程和任务。\n\n```\ndispatch_time_t\n\ndispatch_once_t\n\ndispatch_after\n\ndispatch_group_wait\n\ndispatch_release\n\ndispatch_barrier_async\n\ndispatch_async //异步\n\ndispatch_sync //同步\n\ndispatch_apply\n\ndispatch_io_create\n```\n\n当线程过多时候，会引发内存问题。导致系统内存开销过多，效率降低。\n\n同样多线程在更新相同一个资源的时候，会造成数据竞争的问题。\n\n同步执行的时候容易出现死锁的问题，导致UI卡顿的问题发生。\n\n系统提供了标准的Dispatch Queue\n1.Main Dispatch Queue\n2.Global Dispatch Queue\n\n通过dispatch_get_global_queue 可以获取到不同等级的线程\n通过dispatch_get_main_queue 获取主线程\n\n**刷新UI操作必须在主线程**\n\n```\ndispatch_async(dispatch_get_global_queue(0,0),^{\n   NSInteger count = [numOfInstructions.text intValue];\n   for (int i = 0; i<count;i++)\n   {\n      dispatch_async(dispatch_get_main_queue(),^{\n      currentCount.text =[NSString stringWithFormat:@\"instruction%d\",i];\n     });\n   }\n });\n```\n\n**构建一个单例**\n\n```\n+(SingleManager) shareManager\n{\n  static dispatch_once_t once;\n  static SingleManager *instance;\n  dispatch_once(&once,^{\n     instance = [[self alloc]init];\n   }\n   return instance;\n}\n```\n\n**延迟执行某些任务**\n\n```\nMBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];\nhud.labelText =@\"拼命加载中\";\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, 10 *NSEC_PER_SEC);\n   dispatch_after(popTime, dispatch_get_main_queue(), ^{\n       [MBProgressHUD hideAllHUDsForView:self.view animated:YES];\n   });\n```\n","source":"_posts/iPhone开发-GCD.md","raw":"---\ntitle: iPhone开发-GCD\ndate: 2017-11-15 20:57:52\ntags: [ios]\ncategories: ios\n---\n\n一些常用的API\n\n<!-- more -->\n\n```\n//异步执行一个线程\ndispatch_async(queue,^{});\n\n//创建一个线程\ndispatch_queue_t queue =     dispatch_queuq_create(\"com.example.queue\",NULL);\n\n//获取主线程的方法\ndispatch_get_main_queue();\n\n//优先级获取方法\ndispath_queue_t queue = dispatch_get_global_queue(优先级，0);\nDispatch Queue 的种类 有几种\n\n//优先级常量\nDISPATCH_QUEUE_PRIORITY_HIGH\nDISPATCH_QUEUE_PRIORITY_DEFAULT\nDISPATCH_QUEUE_PRIORITY_LOW\nDISPATCH_QUEUE_PRIORITY_BACKGROUND\n\n\n//延迟执行\ndispatch_after\n\ndispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW,3ull*NSEC_PER_SEC);\n```\n\n处理线程的API，有涉及到暂停，挂起，恢复，取消，等待、延迟执行，线程组，同步和异步 ，死锁，只执行一次，等系列的概念出现。这些概念大部分是对于处理线程和任务。\n\n```\ndispatch_time_t\n\ndispatch_once_t\n\ndispatch_after\n\ndispatch_group_wait\n\ndispatch_release\n\ndispatch_barrier_async\n\ndispatch_async //异步\n\ndispatch_sync //同步\n\ndispatch_apply\n\ndispatch_io_create\n```\n\n当线程过多时候，会引发内存问题。导致系统内存开销过多，效率降低。\n\n同样多线程在更新相同一个资源的时候，会造成数据竞争的问题。\n\n同步执行的时候容易出现死锁的问题，导致UI卡顿的问题发生。\n\n系统提供了标准的Dispatch Queue\n1.Main Dispatch Queue\n2.Global Dispatch Queue\n\n通过dispatch_get_global_queue 可以获取到不同等级的线程\n通过dispatch_get_main_queue 获取主线程\n\n**刷新UI操作必须在主线程**\n\n```\ndispatch_async(dispatch_get_global_queue(0,0),^{\n   NSInteger count = [numOfInstructions.text intValue];\n   for (int i = 0; i<count;i++)\n   {\n      dispatch_async(dispatch_get_main_queue(),^{\n      currentCount.text =[NSString stringWithFormat:@\"instruction%d\",i];\n     });\n   }\n });\n```\n\n**构建一个单例**\n\n```\n+(SingleManager) shareManager\n{\n  static dispatch_once_t once;\n  static SingleManager *instance;\n  dispatch_once(&once,^{\n     instance = [[self alloc]init];\n   }\n   return instance;\n}\n```\n\n**延迟执行某些任务**\n\n```\nMBProgressHUD *hud = [MBProgressHUD showHUDAddedTo:self.view animated:YES];\nhud.labelText =@\"拼命加载中\";\ndispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, 10 *NSEC_PER_SEC);\n   dispatch_after(popTime, dispatch_get_main_queue(), ^{\n       [MBProgressHUD hideAllHUDsForView:self.view animated:YES];\n   });\n```\n","slug":"iPhone开发-GCD","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfj003msifydu117i5g","content":"<p>一些常用的API</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步执行一个线程</span></span><br><span class=\"line\">dispatch_async(<span class=\"built_in\">queue</span>,^&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个线程</span></span><br><span class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> =     dispatch_queuq_create(<span class=\"string\">\"com.example.queue\"</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取主线程的方法</span></span><br><span class=\"line\">dispatch_get_main_queue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级获取方法</span></span><br><span class=\"line\"><span class=\"keyword\">dispath_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_global_queue(优先级，<span class=\"number\">0</span>);</span><br><span class=\"line\">Dispatch Queue 的种类 有几种</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级常量</span></span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_HIGH</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_LOW</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延迟执行</span></span><br><span class=\"line\">dispatch_after</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dispatch_time_t</span> time = dispatch_time(DISPATCH_TIME_NOW,<span class=\"number\">3u</span>ll*NSEC_PER_SEC);</span><br></pre></td></tr></table></figure>\n<p>处理线程的API，有涉及到暂停，挂起，恢复，取消，等待、延迟执行，线程组，同步和异步 ，死锁，只执行一次，等系列的概念出现。这些概念大部分是对于处理线程和任务。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_time_t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_once_t</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_after</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_wait</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_release</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_barrier_async</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span> <span class=\"comment\">//异步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span> <span class=\"comment\">//同步</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_apply</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_io_create</span><br></pre></td></tr></table></figure>\n<p>当线程过多时候，会引发内存问题。导致系统内存开销过多，效率降低。</p>\n<p>同样多线程在更新相同一个资源的时候，会造成数据竞争的问题。</p>\n<p>同步执行的时候容易出现死锁的问题，导致UI卡顿的问题发生。</p>\n<p>系统提供了标准的Dispatch Queue<br>\n1.Main Dispatch Queue<br>\n2.Global Dispatch Queue</p>\n<p>通过dispatch_get_global_queue 可以获取到不同等级的线程<br>\n通过dispatch_get_main_queue 获取主线程</p>\n<p><strong>刷新UI操作必须在主线程</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dispatch_async(dispatch_get_global_queue(0,0),^&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>  NSInteger <span class=\"built_in\">count</span> = [numOfInstructions<span class=\"meta\">.text</span> intValue]<span class=\"comment\">;</span></span><br><span class=\"line\">   for (int i = <span class=\"number\">0</span><span class=\"comment\">; i&lt;count;i++)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">dispatch_async(dispatch_get_main_queue(),^&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>     currentCount<span class=\"meta\">.text</span> =[NSString stringWithFormat:@<span class=\"string\">\"instruction%d\"</span>,i]<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>构建一个单例</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(SingleManager) shareManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  static dispatch_once_t once;</span><br><span class=\"line\">  static SingleManager *instance;</span><br><span class=\"line\">  dispatch_once(&amp;once,^&#123;</span><br><span class=\"line\">    <span class=\"built_in\"> instance </span>= [[self alloc]init];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>延迟执行某些任务</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MBProgressHUD *hud = [MBProgressHUD <span class=\"keyword\">showHUDAddedTo:self.view </span>animated:YES]<span class=\"comment\">;</span></span><br><span class=\"line\">hud.labelText =@<span class=\"string\">\"拼命加载中\"</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span><span class=\"number\">10</span> *NSEC_PER_SEC)<span class=\"comment\">;</span></span><br><span class=\"line\">   <span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</span><br><span class=\"line\">       [MBProgressHUD hideAllHUDsForView:self.view animated:YES]<span class=\"comment\">;</span></span><br><span class=\"line\">   &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一些常用的API</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//异步执行一个线程</span></span><br><span class=\"line\">dispatch_async(<span class=\"built_in\">queue</span>,^&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个线程</span></span><br><span class=\"line\"><span class=\"keyword\">dispatch_queue_t</span> <span class=\"built_in\">queue</span> =     dispatch_queuq_create(<span class=\"string\">\"com.example.queue\"</span>,<span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取主线程的方法</span></span><br><span class=\"line\">dispatch_get_main_queue();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级获取方法</span></span><br><span class=\"line\"><span class=\"keyword\">dispath_queue_t</span> <span class=\"built_in\">queue</span> = dispatch_get_global_queue(优先级，<span class=\"number\">0</span>);</span><br><span class=\"line\">Dispatch Queue 的种类 有几种</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//优先级常量</span></span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_HIGH</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_LOW</span><br><span class=\"line\">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延迟执行</span></span><br><span class=\"line\">dispatch_after</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dispatch_time_t</span> time = dispatch_time(DISPATCH_TIME_NOW,<span class=\"number\">3u</span>ll*NSEC_PER_SEC);</span><br></pre></td></tr></table></figure>\n<p>处理线程的API，有涉及到暂停，挂起，恢复，取消，等待、延迟执行，线程组，同步和异步 ，死锁，只执行一次，等系列的概念出现。这些概念大部分是对于处理线程和任务。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_time_t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_once_t</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_after</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_group_wait</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_release</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_barrier_async</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_async</span> <span class=\"comment\">//异步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">dispatch_sync</span> <span class=\"comment\">//同步</span></span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_apply</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_io_create</span><br></pre></td></tr></table></figure>\n<p>当线程过多时候，会引发内存问题。导致系统内存开销过多，效率降低。</p>\n<p>同样多线程在更新相同一个资源的时候，会造成数据竞争的问题。</p>\n<p>同步执行的时候容易出现死锁的问题，导致UI卡顿的问题发生。</p>\n<p>系统提供了标准的Dispatch Queue<br>\n1.Main Dispatch Queue<br>\n2.Global Dispatch Queue</p>\n<p>通过dispatch_get_global_queue 可以获取到不同等级的线程<br>\n通过dispatch_get_main_queue 获取主线程</p>\n<p><strong>刷新UI操作必须在主线程</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dispatch_async(dispatch_get_global_queue(0,0),^&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>  NSInteger <span class=\"built_in\">count</span> = [numOfInstructions<span class=\"meta\">.text</span> intValue]<span class=\"comment\">;</span></span><br><span class=\"line\">   for (int i = <span class=\"number\">0</span><span class=\"comment\">; i&lt;count;i++)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">dispatch_async(dispatch_get_main_queue(),^&#123;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>     currentCount<span class=\"meta\">.text</span> =[NSString stringWithFormat:@<span class=\"string\">\"instruction%d\"</span>,i]<span class=\"comment\">;</span></span><br><span class=\"line\">     &#125;)<span class=\"comment\">;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>构建一个单例</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+(SingleManager) shareManager</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  static dispatch_once_t once;</span><br><span class=\"line\">  static SingleManager *instance;</span><br><span class=\"line\">  dispatch_once(&amp;once,^&#123;</span><br><span class=\"line\">    <span class=\"built_in\"> instance </span>= [[self alloc]init];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>延迟执行某些任务</strong></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MBProgressHUD *hud = [MBProgressHUD <span class=\"keyword\">showHUDAddedTo:self.view </span>animated:YES]<span class=\"comment\">;</span></span><br><span class=\"line\">hud.labelText =@<span class=\"string\">\"拼命加载中\"</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">dispatch_time_t </span>popTime = <span class=\"keyword\">dispatch_time(DISPATCH_TIME_NOW, </span><span class=\"number\">10</span> *NSEC_PER_SEC)<span class=\"comment\">;</span></span><br><span class=\"line\">   <span class=\"keyword\">dispatch_after(popTime, </span><span class=\"keyword\">dispatch_get_main_queue(), </span>^&#123;</span><br><span class=\"line\">       [MBProgressHUD hideAllHUDsForView:self.view animated:YES]<span class=\"comment\">;</span></span><br><span class=\"line\">   &#125;)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>"},{"title":"glide的简单用法","date":"2016-08-29T12:15:27.000Z","_content":"\n首先需要在app的build.gradle中加入\n```\ncompile 'com.github.bumptech.glide:glide:+'\n```\n注：\"+\"表示始终请求最新版\n\n<!-- more -->\n\n### 基本用法\n```\nGlide.with(context)\n        .load(url)//图片地址\n        .placeholder(R.drawable.default_image)//加载中显示的图片\n        .error(R.drawable.error_image)//加载出错显示的图片\n        .crossFade()//淡入效果\n        .into(imageView);\n\n```\n### 缓存多尺寸\n\n因为Glide默认只缓存一种尺寸大小的图片，即当前要加载的ImageView大小的图片，当你要在另一个不同大小的ImageView中加载同一张图片时Glide就会再次请求加载新的尺寸的图片，但是Glide给我们提供了一个设置可以缓存全尺寸的图片，这样在不同大小的ImageView中加载同一张图片就只会产生一次请求。\n\n```\nGlide.with(context)\n        .load(url)\n        .diskCacheStrategy(DiskCacheStrategy.ALL)\n        .into(imageView);\n```\n\n### 加载特定大小的图片\n\n```\nGlide.with(context)\n        .load(url)\n        .override(300, 200);\n        .into(imageView);\n\n```\n\n### Center Cropping\n\n```\nGlide.with(context)\n        .load(url)\n        .centerCrop();\n        .into(imageView);\n```\n\n### Transforming\n```\nGlide.with(context)\n        .load(url)\n        .transform(new CircleTransform(context))\n        .into(imageView);\n```\n\n### 特性：加载Gif、加载本地图片、asbitmap\nGlide可以加载Gif动态图，使用方法和加载普通图片一样，同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。\n\n```\nGlide.with(context)\n        .load(url)//图片地址\n        .asGif()//asGif加载Gif动态图，asBitmap可以将Gif解码成bitmap\n        .placeholder(R.drawable.default_image)//加载中显示的图片\n        .error(R.drawable.error_image)//加载出错显示的图片\n        .crossFade()//淡入效果\n        .into(imageView);\n\n```\n","source":"_posts/glide的简单用法.md","raw":"---\ntitle: glide的简单用法\ndate: 2016-08-29 20:15:27\ntags: [glide]\ncategories: android\n---\n\n首先需要在app的build.gradle中加入\n```\ncompile 'com.github.bumptech.glide:glide:+'\n```\n注：\"+\"表示始终请求最新版\n\n<!-- more -->\n\n### 基本用法\n```\nGlide.with(context)\n        .load(url)//图片地址\n        .placeholder(R.drawable.default_image)//加载中显示的图片\n        .error(R.drawable.error_image)//加载出错显示的图片\n        .crossFade()//淡入效果\n        .into(imageView);\n\n```\n### 缓存多尺寸\n\n因为Glide默认只缓存一种尺寸大小的图片，即当前要加载的ImageView大小的图片，当你要在另一个不同大小的ImageView中加载同一张图片时Glide就会再次请求加载新的尺寸的图片，但是Glide给我们提供了一个设置可以缓存全尺寸的图片，这样在不同大小的ImageView中加载同一张图片就只会产生一次请求。\n\n```\nGlide.with(context)\n        .load(url)\n        .diskCacheStrategy(DiskCacheStrategy.ALL)\n        .into(imageView);\n```\n\n### 加载特定大小的图片\n\n```\nGlide.with(context)\n        .load(url)\n        .override(300, 200);\n        .into(imageView);\n\n```\n\n### Center Cropping\n\n```\nGlide.with(context)\n        .load(url)\n        .centerCrop();\n        .into(imageView);\n```\n\n### Transforming\n```\nGlide.with(context)\n        .load(url)\n        .transform(new CircleTransform(context))\n        .into(imageView);\n```\n\n### 特性：加载Gif、加载本地图片、asbitmap\nGlide可以加载Gif动态图，使用方法和加载普通图片一样，同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。\n\n```\nGlide.with(context)\n        .load(url)//图片地址\n        .asGif()//asGif加载Gif动态图，asBitmap可以将Gif解码成bitmap\n        .placeholder(R.drawable.default_image)//加载中显示的图片\n        .error(R.drawable.error_image)//加载出错显示的图片\n        .crossFade()//淡入效果\n        .into(imageView);\n\n```\n","slug":"glide的简单用法","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfk003qsifyccmp8mje","content":"<p>首先需要在app的build.gradle中加入</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span> <span class=\"string\">'com.github.bumptech.glide:glide:+'</span></span><br></pre></td></tr></table></figure>\n<p>注：&quot;+&quot;表示始终请求最新版</p>\n<a id=\"more\"></a>\n<h3 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\"></a> 基本用法</h3>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">        .placeholder(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.default_image)<span class=\"comment\">//加载中显示的图片</span></span><br><span class=\"line\">        .error(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.error_image)<span class=\"comment\">//加载出错显示的图片</span></span><br><span class=\"line\">        .cross<span class=\"constructor\">Fade()</span><span class=\"comment\">//淡入效果</span></span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存多尺寸\"><a class=\"markdownIt-Anchor\" href=\"#缓存多尺寸\"></a> 缓存多尺寸</h3>\n<p>因为Glide默认只缓存一种尺寸大小的图片，即当前要加载的ImageView大小的图片，当你要在另一个不同大小的ImageView中加载同一张图片时Glide就会再次请求加载新的尺寸的图片，但是Glide给我们提供了一个设置可以缓存全尺寸的图片，这样在不同大小的ImageView中加载同一张图片就只会产生一次请求。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Glide</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.diskCacheStrategy</span>(<span class=\"selector-tag\">DiskCacheStrategy</span><span class=\"selector-class\">.ALL</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载特定大小的图片\"><a class=\"markdownIt-Anchor\" href=\"#加载特定大小的图片\"></a> 加载特定大小的图片</h3>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(context)</span><br><span class=\"line\">        .load(url)</span><br><span class=\"line\">        .<span class=\"keyword\">override</span>(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        .<span class=\"built_in\">int</span>o(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-cropping\"><a class=\"markdownIt-Anchor\" href=\"#center-cropping\"></a> Center Cropping</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Glide</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.centerCrop</span>();</span><br><span class=\"line\">        <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"transforming\"><a class=\"markdownIt-Anchor\" href=\"#transforming\"></a> Transforming</h3>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">new</span> <span class=\"constructor\">CircleTransform(<span class=\"params\">context</span>)</span>)</span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"特性加载gif-加载本地图片-asbitmap\"><a class=\"markdownIt-Anchor\" href=\"#特性加载gif-加载本地图片-asbitmap\"></a> 特性：加载Gif、加载本地图片、asbitmap</h3>\n<p>Glide可以加载Gif动态图，使用方法和加载普通图片一样，同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">        .<span class=\"keyword\">as</span><span class=\"constructor\">Gif()</span><span class=\"comment\">//asGif加载Gif动态图，asBitmap可以将Gif解码成bitmap</span></span><br><span class=\"line\">        .placeholder(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.default_image)<span class=\"comment\">//加载中显示的图片</span></span><br><span class=\"line\">        .error(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.error_image)<span class=\"comment\">//加载出错显示的图片</span></span><br><span class=\"line\">        .cross<span class=\"constructor\">Fade()</span><span class=\"comment\">//淡入效果</span></span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>首先需要在app的build.gradle中加入</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span> <span class=\"string\">'com.github.bumptech.glide:glide:+'</span></span><br></pre></td></tr></table></figure>\n<p>注：&quot;+&quot;表示始终请求最新版</p>","more":"<h3 id=\"基本用法\"><a class=\"markdownIt-Anchor\" href=\"#基本用法\"></a> 基本用法</h3>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">        .placeholder(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.default_image)<span class=\"comment\">//加载中显示的图片</span></span><br><span class=\"line\">        .error(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.error_image)<span class=\"comment\">//加载出错显示的图片</span></span><br><span class=\"line\">        .cross<span class=\"constructor\">Fade()</span><span class=\"comment\">//淡入效果</span></span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存多尺寸\"><a class=\"markdownIt-Anchor\" href=\"#缓存多尺寸\"></a> 缓存多尺寸</h3>\n<p>因为Glide默认只缓存一种尺寸大小的图片，即当前要加载的ImageView大小的图片，当你要在另一个不同大小的ImageView中加载同一张图片时Glide就会再次请求加载新的尺寸的图片，但是Glide给我们提供了一个设置可以缓存全尺寸的图片，这样在不同大小的ImageView中加载同一张图片就只会产生一次请求。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Glide</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.diskCacheStrategy</span>(<span class=\"selector-tag\">DiskCacheStrategy</span><span class=\"selector-class\">.ALL</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"加载特定大小的图片\"><a class=\"markdownIt-Anchor\" href=\"#加载特定大小的图片\"></a> 加载特定大小的图片</h3>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Glide.with(context)</span><br><span class=\"line\">        .load(url)</span><br><span class=\"line\">        .<span class=\"keyword\">override</span>(<span class=\"number\">300</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        .<span class=\"built_in\">int</span>o(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"center-cropping\"><a class=\"markdownIt-Anchor\" href=\"#center-cropping\"></a> Center Cropping</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Glide</span><span class=\"selector-class\">.with</span>(<span class=\"selector-tag\">context</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.load</span>(<span class=\"selector-tag\">url</span>)</span><br><span class=\"line\">        <span class=\"selector-class\">.centerCrop</span>();</span><br><span class=\"line\">        <span class=\"selector-class\">.into</span>(<span class=\"selector-tag\">imageView</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"transforming\"><a class=\"markdownIt-Anchor\" href=\"#transforming\"></a> Transforming</h3>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)</span><br><span class=\"line\">        .transform(<span class=\"keyword\">new</span> <span class=\"constructor\">CircleTransform(<span class=\"params\">context</span>)</span>)</span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>\n<h3 id=\"特性加载gif-加载本地图片-asbitmap\"><a class=\"markdownIt-Anchor\" href=\"#特性加载gif-加载本地图片-asbitmap\"></a> 特性：加载Gif、加载本地图片、asbitmap</h3>\n<p>Glide可以加载Gif动态图，使用方法和加载普通图片一样，同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Glide</span>.</span></span><span class=\"keyword\">with</span>(context)</span><br><span class=\"line\">        .load(url)<span class=\"comment\">//图片地址</span></span><br><span class=\"line\">        .<span class=\"keyword\">as</span><span class=\"constructor\">Gif()</span><span class=\"comment\">//asGif加载Gif动态图，asBitmap可以将Gif解码成bitmap</span></span><br><span class=\"line\">        .placeholder(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.default_image)<span class=\"comment\">//加载中显示的图片</span></span><br><span class=\"line\">        .error(<span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">R</span>.</span></span>drawable.error_image)<span class=\"comment\">//加载出错显示的图片</span></span><br><span class=\"line\">        .cross<span class=\"constructor\">Fade()</span><span class=\"comment\">//淡入效果</span></span><br><span class=\"line\">        .into(imageView);</span><br></pre></td></tr></table></figure>"},{"title":"iOS设置AppIcon&LauncherImages尺寸和位置","date":"2017-12-05T08:28:45.000Z","_content":"\n\n### iOS AppIcon图标布局及尺寸\n---\n#### AppIcon图标尺寸：\n\n```\n\t1024px*1024px     180px*180px    120px*120px  87px*87px  80px*80px   60px*60px  58px*58px    40px*40px\n```\n\n<!-- more -->\n#### AppIcon位置：\n\n| iPhone Notification  |   | \n|:------------- |:---------------:|\n| | 60px × 60px (20pt × 20pt @3x) |\n| | 40px × 40px (20pt × 20pt @2x) |\n\n| iPhone Settings  |   | \n|:------------- |:---------------:|\n| | 87px × 87px (29pt × 29pt @3x) |\n| | 58px × 58px (29pt × 29pt @2x) |\n\n| iPhone Spotlight  |   | \n|:------------- |:---------------:|\n| | 120px × 120px (40pt × 40pt @3x) |\n| | 80px × 80px (40pt × 40pt @2x) |\n\n| iPhone App  |   | \n|:------------- |:---------------:|\n| | 180px × 180px (60pt × 60pt @3x) |\n| | 120px × 120px (60pt × 60pt @2x) |\n\n| App Store |   | \n|:------------- |:---------------:|\n| | 1024px × 1024px (1024pt × 1024pt @1x) |\n\n### Launch Screen Images\n---\n\n|Location |  Portrait size | Device |\n|:------------- |:---------------:|:------:|\n| iPhoneX | 125px × 2436px |iPhone X|\n| Retina HD 5.5\" | 1242px × 2208px |6 plus / 7 plus / 8 plus|\n| Retina HD 4.7\" | 750px × 1334px |6/ 6s/ 7/ 8|\n| Retina 4 | 640px × 1136px |5/ 5s/ 5c/ se|\n| 2x | 640px × 960px |4/ 4s|\n\n\n\n","source":"_posts/iOS设置AppIcon-LauncherImages尺寸和位置.md","raw":"---\ntitle: 'iOS设置AppIcon&LauncherImages尺寸和位置'\ndate: 2017-12-05 16:28:45\ntags: [appicon]\ncategories: ios\n---\n\n\n### iOS AppIcon图标布局及尺寸\n---\n#### AppIcon图标尺寸：\n\n```\n\t1024px*1024px     180px*180px    120px*120px  87px*87px  80px*80px   60px*60px  58px*58px    40px*40px\n```\n\n<!-- more -->\n#### AppIcon位置：\n\n| iPhone Notification  |   | \n|:------------- |:---------------:|\n| | 60px × 60px (20pt × 20pt @3x) |\n| | 40px × 40px (20pt × 20pt @2x) |\n\n| iPhone Settings  |   | \n|:------------- |:---------------:|\n| | 87px × 87px (29pt × 29pt @3x) |\n| | 58px × 58px (29pt × 29pt @2x) |\n\n| iPhone Spotlight  |   | \n|:------------- |:---------------:|\n| | 120px × 120px (40pt × 40pt @3x) |\n| | 80px × 80px (40pt × 40pt @2x) |\n\n| iPhone App  |   | \n|:------------- |:---------------:|\n| | 180px × 180px (60pt × 60pt @3x) |\n| | 120px × 120px (60pt × 60pt @2x) |\n\n| App Store |   | \n|:------------- |:---------------:|\n| | 1024px × 1024px (1024pt × 1024pt @1x) |\n\n### Launch Screen Images\n---\n\n|Location |  Portrait size | Device |\n|:------------- |:---------------:|:------:|\n| iPhoneX | 125px × 2436px |iPhone X|\n| Retina HD 5.5\" | 1242px × 2208px |6 plus / 7 plus / 8 plus|\n| Retina HD 4.7\" | 750px × 1334px |6/ 6s/ 7/ 8|\n| Retina 4 | 640px × 1136px |5/ 5s/ 5c/ se|\n| 2x | 640px × 960px |4/ 4s|\n\n\n\n","slug":"iOS设置AppIcon-LauncherImages尺寸和位置","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfl003ssify5armhsyh","content":"<h3 id=\"ios-appicon图标布局及尺寸\"><a class=\"markdownIt-Anchor\" href=\"#ios-appicon图标布局及尺寸\"></a> iOS AppIcon图标布局及尺寸</h3>\n<hr>\n<h4 id=\"appicon图标尺寸\"><a class=\"markdownIt-Anchor\" href=\"#appicon图标尺寸\"></a> AppIcon图标尺寸：</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1024</span>px*<span class=\"number\">1024</span>px     <span class=\"number\">180</span>px*<span class=\"number\">180</span>px    <span class=\"number\">120</span>px*<span class=\"number\">120</span>px  <span class=\"number\">87</span>px*<span class=\"number\">87</span>px  <span class=\"number\">80</span>px*<span class=\"number\">80</span>px   <span class=\"number\">60</span>px*<span class=\"number\">60</span>px  <span class=\"number\">58</span>px*<span class=\"number\">58</span>px    <span class=\"number\">40</span>px*<span class=\"number\">40</span>px</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"appicon位置\"><a class=\"markdownIt-Anchor\" href=\"#appicon位置\"></a> AppIcon位置：</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Notification</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">60px × 60px (20pt × 20pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">40px × 40px (20pt × 20pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Settings</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">87px × 87px (29pt × 29pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">58px × 58px (29pt × 29pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Spotlight</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">120px × 120px (40pt × 40pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">80px × 80px (40pt × 40pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone App</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">180px × 180px (60pt × 60pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">120px × 120px (60pt × 60pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">App Store</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">1024px × 1024px (1024pt × 1024pt @1x)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"launch-screen-images\"><a class=\"markdownIt-Anchor\" href=\"#launch-screen-images\"></a> Launch Screen Images</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Location</th>\n<th style=\"text-align:center\">Portrait size</th>\n<th style=\"text-align:center\">Device</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">iPhoneX</td>\n<td style=\"text-align:center\">125px × 2436px</td>\n<td style=\"text-align:center\">iPhone X</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina HD 5.5&quot;</td>\n<td style=\"text-align:center\">1242px × 2208px</td>\n<td style=\"text-align:center\">6 plus / 7 plus / 8 plus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina HD 4.7&quot;</td>\n<td style=\"text-align:center\">750px × 1334px</td>\n<td style=\"text-align:center\">6/ 6s/ 7/ 8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina 4</td>\n<td style=\"text-align:center\">640px × 1136px</td>\n<td style=\"text-align:center\">5/ 5s/ 5c/ se</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2x</td>\n<td style=\"text-align:center\">640px × 960px</td>\n<td style=\"text-align:center\">4/ 4s</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h3 id=\"ios-appicon图标布局及尺寸\"><a class=\"markdownIt-Anchor\" href=\"#ios-appicon图标布局及尺寸\"></a> iOS AppIcon图标布局及尺寸</h3>\n<hr>\n<h4 id=\"appicon图标尺寸\"><a class=\"markdownIt-Anchor\" href=\"#appicon图标尺寸\"></a> AppIcon图标尺寸：</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1024</span>px*<span class=\"number\">1024</span>px     <span class=\"number\">180</span>px*<span class=\"number\">180</span>px    <span class=\"number\">120</span>px*<span class=\"number\">120</span>px  <span class=\"number\">87</span>px*<span class=\"number\">87</span>px  <span class=\"number\">80</span>px*<span class=\"number\">80</span>px   <span class=\"number\">60</span>px*<span class=\"number\">60</span>px  <span class=\"number\">58</span>px*<span class=\"number\">58</span>px    <span class=\"number\">40</span>px*<span class=\"number\">40</span>px</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"appicon位置\"><a class=\"markdownIt-Anchor\" href=\"#appicon位置\"></a> AppIcon位置：</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Notification</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">60px × 60px (20pt × 20pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">40px × 40px (20pt × 20pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Settings</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">87px × 87px (29pt × 29pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">58px × 58px (29pt × 29pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone Spotlight</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">120px × 120px (40pt × 40pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">80px × 80px (40pt × 40pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">iPhone App</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">180px × 180px (60pt × 60pt @3x)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">120px × 120px (60pt × 60pt @2x)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">App Store</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">1024px × 1024px (1024pt × 1024pt @1x)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"launch-screen-images\"><a class=\"markdownIt-Anchor\" href=\"#launch-screen-images\"></a> Launch Screen Images</h3>\n<hr>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Location</th>\n<th style=\"text-align:center\">Portrait size</th>\n<th style=\"text-align:center\">Device</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">iPhoneX</td>\n<td style=\"text-align:center\">125px × 2436px</td>\n<td style=\"text-align:center\">iPhone X</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina HD 5.5&quot;</td>\n<td style=\"text-align:center\">1242px × 2208px</td>\n<td style=\"text-align:center\">6 plus / 7 plus / 8 plus</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina HD 4.7&quot;</td>\n<td style=\"text-align:center\">750px × 1334px</td>\n<td style=\"text-align:center\">6/ 6s/ 7/ 8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Retina 4</td>\n<td style=\"text-align:center\">640px × 1136px</td>\n<td style=\"text-align:center\">5/ 5s/ 5c/ se</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2x</td>\n<td style=\"text-align:center\">640px × 960px</td>\n<td style=\"text-align:center\">4/ 4s</td>\n</tr>\n</tbody>\n</table>"},{"title":"grep && find命令用法","date":"2016-09-01T11:26:58.000Z","_content":"\n>Linux下搜索文件内容常用grep，搜索文件信息使用find\n<!-- more -->\n\n>原文：http://gityuan.com/2015/09/13/grep-and-find/\n\n## 一、 grep\n搜索文本的命令\n```\n命令格式: grep [options]... pattern [file]...\n命令格式: grep 查找规则... 正则表达式 查看文件\n```\n### 1.1 查找规则\n|options |\t解释|\n|:--:|:--:|\n|-i|不区分大 小写(只适用于单字符)|\n|-r|遍历匹配|\n|-w|整字匹配|\n|-l|查询多文件时只输出包含匹配字符的文件名|\n|-c|只输出匹配行的计数|\n|-n|显示匹配行及行号|\n|-s|不显示不存在或无匹配文本的错误信息|\n|-h|查询多文件时不显示文件名|\n|-v|显示不包含匹配文本的所有行|\n\n### 1.2 正则表达式\npattern正则表达式主要参数：\n\n- `\\`： 忽略正则表达式中特殊字符的原有含义。\n- `^`：匹配正则表达式的开始行。\n- `$`: 匹配正则表达式的结束行。\n- `<`：从匹配正则表达 式的行开始。\n- `>`：到匹配正则表达式的行结束。\n- `[]`：单个字符，如[A]即A符合要求 。\n- `[ - ]`：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。\n- `.` ：所有的单个字符。\n- `*` ：有字符，长度可以为0.\n\n### 1.3 实例\n- 忽略大小写搜索\n\n  ```\n  grep -i \"androiD\"  logcat.txt   //从logcat.txt文件中，搜索包含android的文本行，不区分大小写\n  ```\n- 遍历搜索，且不显示无匹配信息\n  ```\n    grep -rs \"android\" .   //从当前目录下，遍历所有的文件，搜索包含android的文本行\n  ```\n- 整字匹配搜索\n  ```\n  grep -w “android” logcat.txt //从logcat.txt文件中，搜索包含单词android的文本行\n  grep -w “android | ios” logcat.txt //从logcat.txt文件中，搜索包含单词android或者ios的文本行\n  ```\n- 只列出文件名\n    ```\n    grep -l \"android\" .\n    ```\n- 统计字符出现次数\n    ```\n    grep -c \"android\" .\n    ```\n- 显示字符出现所在行\n    ```\n     grep -n \"android“ .\n    ```\n\n## 二、 find\n\n搜索文件的命令\n```\n命令格式  find pathname -options [ actions]\n命令格式  find 查找目录  -查找规则 [执行操作]\n```\n### 2.1 查找目录\n(1) 如果不写，默认为当前路径； (2) 支持多个路径，目录直接用空格间隔；\n```\nfind . -name demo\n```\n\n### 2.2 查找规则\n\n#### 2.2.1 根据文件名(name)\n\n`-name`  //根据文件名查找，区分大小写\n`-iname` //根据文件名查找，不区分大小写\n\n通配符说明： (1)* 匹配任意的若干个字符 (2)? 匹配任意的单个字符 (3)[] 匹配括号内的任意一个字符\n```\nfind /data -name dalvi*\nfind /data -name dalvik?cache\nfind /data -name dalvik-cach[abe]\n```\n#### 2.2.2 根据文件类型(type)\n\n- f 普通文件\n- d 目录文件\n- l 链接文件\n- b 块设备文件\n- c 字符设备文件\n- p 管道文件\n- s socket文件\n\n例如：\n```\n find -type f //查看文件类型\n```\n\n#### 2.2.3 根据目录深度(depth)\n- -maxdepth n:查找最大深度为n\n- -mindepth m:查找最小深度为m\n\n#### 2.2.4 根据文件大小(size)\n单位：c(小写), k(小写), M(大写), G(大写)\n\n-size +10M: 查找大于10M的文件\n-size -2k: 查找小于2k的文件\n-empty: 查找大小为0的文件或空目录\n\n#### 2.2.5 根据文件权限(perm)\n\n例如：\n```\nfind -perm 777 //查找权限为777的文件\n```\n\n#### 2.2.6 根据文件所属用户和组\n- -user:根据属主来查找文件\n- -group:根据属组来查找文件\n\n#### 2.2.7 根据uid和gid\n- -uid 500: 查找uid是500 的文件\n- -gid 1000: 查找gid是1000的文件\n\n#### 2.2.8 根据时间\n可以通过`stat`命令来查看文件的时间，下列是按照文件的各种时间来查找文件：\n\n- -mtime -n +n: 根据更改(modify)时间，-n指n天以内，+n指n天以前\n- -atime -n +n: 根据访问(access)时间，-n指n天以内，+n指n天以前\n- -ctime -n +n: 根据创建(create)时间，-n指n天以内，+n指n天以前\n- -mmin -n +n: 根据更改(modify)时间，-n指n分钟以内，+n指n分钟以前\n- -amin -n +n: 根据访问(access)时间，-n指n分钟以内，+n指n分钟以前\n- -cmin -n +n: 根据创建(create)时间，-n指n分钟以内，+n指n分钟以前\n\n#### 2.2.9 多条件连接\n\n- -a:两个条件同时满足（and）\n- -o:两个条件满足其一（or）\n- -not:对条件取反（not）\n\n例如，查找当前路径下，以a开头，并排除掉以b结尾的文件或文件夹：\n```\nfind -name a* -not -name *b\n```\n\n### 2.3 执行操作\n\n- `-print` 匹配文件输出到标准输出，默认操作\n- `-ls` 查找到的结果，以ls方式显示\n  ```\n    find -name app -ls\n  ```\n- `-ok [command]` 查找完成后，执行command执行，询问执行\n    ```\n    find -name app -ok cat {} \\;   //注意：{}前后有空格\n    ```\n- `-exec [command]` 查找完成后，执行command执行，直接执行\n    ```\n    find -name app  -exec ls {} \\;\n    ```\n","source":"_posts/grep-find命令用法.md","raw":"---\ntitle: 'grep && find命令用法'\ndate: 2016-09-01 19:26:58\ntags: [grep]\ncategories: linux\n---\n\n>Linux下搜索文件内容常用grep，搜索文件信息使用find\n<!-- more -->\n\n>原文：http://gityuan.com/2015/09/13/grep-and-find/\n\n## 一、 grep\n搜索文本的命令\n```\n命令格式: grep [options]... pattern [file]...\n命令格式: grep 查找规则... 正则表达式 查看文件\n```\n### 1.1 查找规则\n|options |\t解释|\n|:--:|:--:|\n|-i|不区分大 小写(只适用于单字符)|\n|-r|遍历匹配|\n|-w|整字匹配|\n|-l|查询多文件时只输出包含匹配字符的文件名|\n|-c|只输出匹配行的计数|\n|-n|显示匹配行及行号|\n|-s|不显示不存在或无匹配文本的错误信息|\n|-h|查询多文件时不显示文件名|\n|-v|显示不包含匹配文本的所有行|\n\n### 1.2 正则表达式\npattern正则表达式主要参数：\n\n- `\\`： 忽略正则表达式中特殊字符的原有含义。\n- `^`：匹配正则表达式的开始行。\n- `$`: 匹配正则表达式的结束行。\n- `<`：从匹配正则表达 式的行开始。\n- `>`：到匹配正则表达式的行结束。\n- `[]`：单个字符，如[A]即A符合要求 。\n- `[ - ]`：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。\n- `.` ：所有的单个字符。\n- `*` ：有字符，长度可以为0.\n\n### 1.3 实例\n- 忽略大小写搜索\n\n  ```\n  grep -i \"androiD\"  logcat.txt   //从logcat.txt文件中，搜索包含android的文本行，不区分大小写\n  ```\n- 遍历搜索，且不显示无匹配信息\n  ```\n    grep -rs \"android\" .   //从当前目录下，遍历所有的文件，搜索包含android的文本行\n  ```\n- 整字匹配搜索\n  ```\n  grep -w “android” logcat.txt //从logcat.txt文件中，搜索包含单词android的文本行\n  grep -w “android | ios” logcat.txt //从logcat.txt文件中，搜索包含单词android或者ios的文本行\n  ```\n- 只列出文件名\n    ```\n    grep -l \"android\" .\n    ```\n- 统计字符出现次数\n    ```\n    grep -c \"android\" .\n    ```\n- 显示字符出现所在行\n    ```\n     grep -n \"android“ .\n    ```\n\n## 二、 find\n\n搜索文件的命令\n```\n命令格式  find pathname -options [ actions]\n命令格式  find 查找目录  -查找规则 [执行操作]\n```\n### 2.1 查找目录\n(1) 如果不写，默认为当前路径； (2) 支持多个路径，目录直接用空格间隔；\n```\nfind . -name demo\n```\n\n### 2.2 查找规则\n\n#### 2.2.1 根据文件名(name)\n\n`-name`  //根据文件名查找，区分大小写\n`-iname` //根据文件名查找，不区分大小写\n\n通配符说明： (1)* 匹配任意的若干个字符 (2)? 匹配任意的单个字符 (3)[] 匹配括号内的任意一个字符\n```\nfind /data -name dalvi*\nfind /data -name dalvik?cache\nfind /data -name dalvik-cach[abe]\n```\n#### 2.2.2 根据文件类型(type)\n\n- f 普通文件\n- d 目录文件\n- l 链接文件\n- b 块设备文件\n- c 字符设备文件\n- p 管道文件\n- s socket文件\n\n例如：\n```\n find -type f //查看文件类型\n```\n\n#### 2.2.3 根据目录深度(depth)\n- -maxdepth n:查找最大深度为n\n- -mindepth m:查找最小深度为m\n\n#### 2.2.4 根据文件大小(size)\n单位：c(小写), k(小写), M(大写), G(大写)\n\n-size +10M: 查找大于10M的文件\n-size -2k: 查找小于2k的文件\n-empty: 查找大小为0的文件或空目录\n\n#### 2.2.5 根据文件权限(perm)\n\n例如：\n```\nfind -perm 777 //查找权限为777的文件\n```\n\n#### 2.2.6 根据文件所属用户和组\n- -user:根据属主来查找文件\n- -group:根据属组来查找文件\n\n#### 2.2.7 根据uid和gid\n- -uid 500: 查找uid是500 的文件\n- -gid 1000: 查找gid是1000的文件\n\n#### 2.2.8 根据时间\n可以通过`stat`命令来查看文件的时间，下列是按照文件的各种时间来查找文件：\n\n- -mtime -n +n: 根据更改(modify)时间，-n指n天以内，+n指n天以前\n- -atime -n +n: 根据访问(access)时间，-n指n天以内，+n指n天以前\n- -ctime -n +n: 根据创建(create)时间，-n指n天以内，+n指n天以前\n- -mmin -n +n: 根据更改(modify)时间，-n指n分钟以内，+n指n分钟以前\n- -amin -n +n: 根据访问(access)时间，-n指n分钟以内，+n指n分钟以前\n- -cmin -n +n: 根据创建(create)时间，-n指n分钟以内，+n指n分钟以前\n\n#### 2.2.9 多条件连接\n\n- -a:两个条件同时满足（and）\n- -o:两个条件满足其一（or）\n- -not:对条件取反（not）\n\n例如，查找当前路径下，以a开头，并排除掉以b结尾的文件或文件夹：\n```\nfind -name a* -not -name *b\n```\n\n### 2.3 执行操作\n\n- `-print` 匹配文件输出到标准输出，默认操作\n- `-ls` 查找到的结果，以ls方式显示\n  ```\n    find -name app -ls\n  ```\n- `-ok [command]` 查找完成后，执行command执行，询问执行\n    ```\n    find -name app -ok cat {} \\;   //注意：{}前后有空格\n    ```\n- `-exec [command]` 查找完成后，执行command执行，直接执行\n    ```\n    find -name app  -exec ls {} \\;\n    ```\n","slug":"grep-find命令用法","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfm003wsifye8hv318z","content":"<blockquote>\n<p>Linux下搜索文件内容常用grep，搜索文件信息使用find</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>原文：<a href=\"http://gityuan.com/2015/09/13/grep-and-find/\" target=\"_blank\" rel=\"noopener\">http://gityuan.com/2015/09/13/grep-and-find/</a></p>\n</blockquote>\n<h2 id=\"一-grep\"><a class=\"markdownIt-Anchor\" href=\"#一-grep\"></a> 一、 grep</h2>\n<p>搜索文本的命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令格式: <span class=\"keyword\">grep</span> [<span class=\"keyword\">options</span>]... pattern [<span class=\"keyword\">file</span>]...</span><br><span class=\"line\">命令格式: <span class=\"keyword\">grep</span> 查找规则... 正则表达式 查看文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-查找规则\"><a class=\"markdownIt-Anchor\" href=\"#11-查找规则\"></a> 1.1 查找规则</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">options</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td style=\"text-align:center\">不区分大 小写(只适用于单字符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">遍历匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w</td>\n<td style=\"text-align:center\">整字匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:center\">查询多文件时只输出包含匹配字符的文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td style=\"text-align:center\">只输出匹配行的计数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-n</td>\n<td style=\"text-align:center\">显示匹配行及行号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">不显示不存在或无匹配文本的错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">查询多文件时不显示文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">显示不包含匹配文本的所有行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"12-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#12-正则表达式\"></a> 1.2 正则表达式</h3>\n<p>pattern正则表达式主要参数：</p>\n<ul>\n<li><code>\\</code>： 忽略正则表达式中特殊字符的原有含义。</li>\n<li><code>^</code>：匹配正则表达式的开始行。</li>\n<li><code>$</code>: 匹配正则表达式的结束行。</li>\n<li><code>&lt;</code>：从匹配正则表达 式的行开始。</li>\n<li><code>&gt;</code>：到匹配正则表达式的行结束。</li>\n<li><code>[]</code>：单个字符，如[A]即A符合要求 。</li>\n<li><code>[ - ]</code>：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</li>\n<li><code>.</code> ：所有的单个字符。</li>\n<li><code>*</code> ：有字符，长度可以为0.</li>\n</ul>\n<h3 id=\"13-实例\"><a class=\"markdownIt-Anchor\" href=\"#13-实例\"></a> 1.3 实例</h3>\n<ul>\n<li>\n<p>忽略大小写搜索</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -<span class=\"selector-tag\">i</span> <span class=\"string\">\"androiD\"</span>  logcat<span class=\"selector-class\">.txt</span>   <span class=\"comment\">//从logcat.txt文件中，搜索包含android的文本行，不区分大小写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>遍历搜索，且不显示无匹配信息</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -rs <span class=\"string\">\"android\"</span> .   <span class=\"comment\">//从当前目录下，遍历所有的文件，搜索包含android的文本行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>整字匹配搜索</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -w “android” logcat.txt <span class=\"comment\">//从logcat.txt文件中，搜索包含单词android的文本行</span></span><br><span class=\"line\"><span class=\"keyword\">grep</span> -w “android | ios” logcat.txt <span class=\"comment\">//从logcat.txt文件中，搜索包含单词android或者ios的文本行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>只列出文件名</p>\n  <figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -l <span class=\"string\">\"android\"</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>统计字符出现次数</p>\n  <figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -c <span class=\"string\">\"android\"</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示字符出现所在行</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -n <span class=\"comment\">\"android“ .</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"二-find\"><a class=\"markdownIt-Anchor\" href=\"#二-find\"></a> 二、 find</h2>\n<p>搜索文件的命令</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令格式  <span class=\"builtin-name\">find</span> pathname -options [ actions]</span><br><span class=\"line\">命令格式  <span class=\"builtin-name\">find</span> 查找目录  -查找规则 [执行操作]</span><br></pre></td></tr></table></figure>\n<h3 id=\"21-查找目录\"><a class=\"markdownIt-Anchor\" href=\"#21-查找目录\"></a> 2.1 查找目录</h3>\n<p>(1) 如果不写，默认为当前路径； (2) 支持多个路径，目录直接用空格间隔；</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">find</span> . -name demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-查找规则\"><a class=\"markdownIt-Anchor\" href=\"#22-查找规则\"></a> 2.2 查找规则</h3>\n<h4 id=\"221-根据文件名name\"><a class=\"markdownIt-Anchor\" href=\"#221-根据文件名name\"></a> 2.2.1 根据文件名(name)</h4>\n<p><code>-name</code>  //根据文件名查找，区分大小写<br>\n<code>-iname</code> //根据文件名查找，不区分大小写</p>\n<p>通配符说明： (1)* 匹配任意的若干个字符 (2)? 匹配任意的单个字符 (3)[] 匹配括号内的任意一个字符</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvi*</span><br><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvik?cache</span><br><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvik-cach[abe]</span><br></pre></td></tr></table></figure>\n<h4 id=\"222-根据文件类型type\"><a class=\"markdownIt-Anchor\" href=\"#222-根据文件类型type\"></a> 2.2.2 根据文件类型(type)</h4>\n<ul>\n<li>f 普通文件</li>\n<li>d 目录文件</li>\n<li>l 链接文件</li>\n<li>b 块设备文件</li>\n<li>c 字符设备文件</li>\n<li>p 管道文件</li>\n<li>s socket文件</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">f</span></span> <span class=\"comment\">//查看文件类型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"223-根据目录深度depth\"><a class=\"markdownIt-Anchor\" href=\"#223-根据目录深度depth\"></a> 2.2.3 根据目录深度(depth)</h4>\n<ul>\n<li>-maxdepth n:查找最大深度为n</li>\n<li>-mindepth m:查找最小深度为m</li>\n</ul>\n<h4 id=\"224-根据文件大小size\"><a class=\"markdownIt-Anchor\" href=\"#224-根据文件大小size\"></a> 2.2.4 根据文件大小(size)</h4>\n<p>单位：c(小写), k(小写), M(大写), G(大写)</p>\n<p>-size +10M: 查找大于10M的文件<br>\n-size -2k: 查找小于2k的文件<br>\n-empty: 查找大小为0的文件或空目录</p>\n<h4 id=\"225-根据文件权限perm\"><a class=\"markdownIt-Anchor\" href=\"#225-根据文件权限perm\"></a> 2.2.5 根据文件权限(perm)</h4>\n<p>例如：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -perm <span class=\"number\">777</span> <span class=\"comment\">//查找权限为777的文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"226-根据文件所属用户和组\"><a class=\"markdownIt-Anchor\" href=\"#226-根据文件所属用户和组\"></a> 2.2.6 根据文件所属用户和组</h4>\n<ul>\n<li>-user:根据属主来查找文件</li>\n<li>-group:根据属组来查找文件</li>\n</ul>\n<h4 id=\"227-根据uid和gid\"><a class=\"markdownIt-Anchor\" href=\"#227-根据uid和gid\"></a> 2.2.7 根据uid和gid</h4>\n<ul>\n<li>-uid 500: 查找uid是500 的文件</li>\n<li>-gid 1000: 查找gid是1000的文件</li>\n</ul>\n<h4 id=\"228-根据时间\"><a class=\"markdownIt-Anchor\" href=\"#228-根据时间\"></a> 2.2.8 根据时间</h4>\n<p>可以通过<code>stat</code>命令来查看文件的时间，下列是按照文件的各种时间来查找文件：</p>\n<ul>\n<li>-mtime -n +n: 根据更改(modify)时间，-n指n天以内，+n指n天以前</li>\n<li>-atime -n +n: 根据访问(access)时间，-n指n天以内，+n指n天以前</li>\n<li>-ctime -n +n: 根据创建(create)时间，-n指n天以内，+n指n天以前</li>\n<li>-mmin -n +n: 根据更改(modify)时间，-n指n分钟以内，+n指n分钟以前</li>\n<li>-amin -n +n: 根据访问(access)时间，-n指n分钟以内，+n指n分钟以前</li>\n<li>-cmin -n +n: 根据创建(create)时间，-n指n分钟以内，+n指n分钟以前</li>\n</ul>\n<h4 id=\"229-多条件连接\"><a class=\"markdownIt-Anchor\" href=\"#229-多条件连接\"></a> 2.2.9 多条件连接</h4>\n<ul>\n<li>-a:两个条件同时满足（and）</li>\n<li>-o:两个条件满足其一（or）</li>\n<li>-not:对条件取反（not）</li>\n</ul>\n<p>例如，查找当前路径下，以a开头，并排除掉以b结尾的文件或文件夹：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> a* -<span class=\"built_in\">not</span> -<span class=\"built_in\">name</span> *b</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-执行操作\"><a class=\"markdownIt-Anchor\" href=\"#23-执行操作\"></a> 2.3 执行操作</h3>\n<ul>\n<li>\n<p><code>-print</code> 匹配文件输出到标准输出，默认操作</p>\n</li>\n<li>\n<p><code>-ls</code> 查找到的结果，以ls方式显示</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">find</span> -name app -ls</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>-ok [command]</code> 查找完成后，执行command执行，询问执行</p>\n  <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> app -ok cat &#123;&#125; \\;   <span class=\"comment\">//注意：&#123;&#125;前后有空格</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>-exec [command]</code> 查找完成后，执行command执行，直接执行</p>\n  <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> app  -<span class=\"built_in\">exec</span> ls &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Linux下搜索文件内容常用grep，搜索文件信息使用find</p>\n</blockquote>","more":"<blockquote>\n<p>原文：<a href=\"http://gityuan.com/2015/09/13/grep-and-find/\" target=\"_blank\" rel=\"noopener\">http://gityuan.com/2015/09/13/grep-and-find/</a></p>\n</blockquote>\n<h2 id=\"一-grep\"><a class=\"markdownIt-Anchor\" href=\"#一-grep\"></a> 一、 grep</h2>\n<p>搜索文本的命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令格式: <span class=\"keyword\">grep</span> [<span class=\"keyword\">options</span>]... pattern [<span class=\"keyword\">file</span>]...</span><br><span class=\"line\">命令格式: <span class=\"keyword\">grep</span> 查找规则... 正则表达式 查看文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-查找规则\"><a class=\"markdownIt-Anchor\" href=\"#11-查找规则\"></a> 1.1 查找规则</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">options</th>\n<th style=\"text-align:center\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-i</td>\n<td style=\"text-align:center\">不区分大 小写(只适用于单字符)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\">遍历匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w</td>\n<td style=\"text-align:center\">整字匹配</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:center\">查询多文件时只输出包含匹配字符的文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c</td>\n<td style=\"text-align:center\">只输出匹配行的计数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-n</td>\n<td style=\"text-align:center\">显示匹配行及行号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">不显示不存在或无匹配文本的错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">查询多文件时不显示文件名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">显示不包含匹配文本的所有行</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"12-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#12-正则表达式\"></a> 1.2 正则表达式</h3>\n<p>pattern正则表达式主要参数：</p>\n<ul>\n<li><code>\\</code>： 忽略正则表达式中特殊字符的原有含义。</li>\n<li><code>^</code>：匹配正则表达式的开始行。</li>\n<li><code>$</code>: 匹配正则表达式的结束行。</li>\n<li><code>&lt;</code>：从匹配正则表达 式的行开始。</li>\n<li><code>&gt;</code>：到匹配正则表达式的行结束。</li>\n<li><code>[]</code>：单个字符，如[A]即A符合要求 。</li>\n<li><code>[ - ]</code>：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</li>\n<li><code>.</code> ：所有的单个字符。</li>\n<li><code>*</code> ：有字符，长度可以为0.</li>\n</ul>\n<h3 id=\"13-实例\"><a class=\"markdownIt-Anchor\" href=\"#13-实例\"></a> 1.3 实例</h3>\n<ul>\n<li>\n<p>忽略大小写搜索</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -<span class=\"selector-tag\">i</span> <span class=\"string\">\"androiD\"</span>  logcat<span class=\"selector-class\">.txt</span>   <span class=\"comment\">//从logcat.txt文件中，搜索包含android的文本行，不区分大小写</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>遍历搜索，且不显示无匹配信息</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -rs <span class=\"string\">\"android\"</span> .   <span class=\"comment\">//从当前目录下，遍历所有的文件，搜索包含android的文本行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>整字匹配搜索</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -w “android” logcat.txt <span class=\"comment\">//从logcat.txt文件中，搜索包含单词android的文本行</span></span><br><span class=\"line\"><span class=\"keyword\">grep</span> -w “android | ios” logcat.txt <span class=\"comment\">//从logcat.txt文件中，搜索包含单词android或者ios的文本行</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>只列出文件名</p>\n  <figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -l <span class=\"string\">\"android\"</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>统计字符出现次数</p>\n  <figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -c <span class=\"string\">\"android\"</span> .</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>显示字符出现所在行</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grep</span> -n <span class=\"comment\">\"android“ .</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"二-find\"><a class=\"markdownIt-Anchor\" href=\"#二-find\"></a> 二、 find</h2>\n<p>搜索文件的命令</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">命令格式  <span class=\"builtin-name\">find</span> pathname -options [ actions]</span><br><span class=\"line\">命令格式  <span class=\"builtin-name\">find</span> 查找目录  -查找规则 [执行操作]</span><br></pre></td></tr></table></figure>\n<h3 id=\"21-查找目录\"><a class=\"markdownIt-Anchor\" href=\"#21-查找目录\"></a> 2.1 查找目录</h3>\n<p>(1) 如果不写，默认为当前路径； (2) 支持多个路径，目录直接用空格间隔；</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">find</span> . -name demo</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-查找规则\"><a class=\"markdownIt-Anchor\" href=\"#22-查找规则\"></a> 2.2 查找规则</h3>\n<h4 id=\"221-根据文件名name\"><a class=\"markdownIt-Anchor\" href=\"#221-根据文件名name\"></a> 2.2.1 根据文件名(name)</h4>\n<p><code>-name</code>  //根据文件名查找，区分大小写<br>\n<code>-iname</code> //根据文件名查找，不区分大小写</p>\n<p>通配符说明： (1)* 匹配任意的若干个字符 (2)? 匹配任意的单个字符 (3)[] 匹配括号内的任意一个字符</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvi*</span><br><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvik?cache</span><br><span class=\"line\">find /<span class=\"keyword\">data</span> -<span class=\"keyword\">name</span> dalvik-cach[abe]</span><br></pre></td></tr></table></figure>\n<h4 id=\"222-根据文件类型type\"><a class=\"markdownIt-Anchor\" href=\"#222-根据文件类型type\"></a> 2.2.2 根据文件类型(type)</h4>\n<ul>\n<li>f 普通文件</li>\n<li>d 目录文件</li>\n<li>l 链接文件</li>\n<li>b 块设备文件</li>\n<li>c 字符设备文件</li>\n<li>p 管道文件</li>\n<li>s socket文件</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">f</span></span> <span class=\"comment\">//查看文件类型</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"223-根据目录深度depth\"><a class=\"markdownIt-Anchor\" href=\"#223-根据目录深度depth\"></a> 2.2.3 根据目录深度(depth)</h4>\n<ul>\n<li>-maxdepth n:查找最大深度为n</li>\n<li>-mindepth m:查找最小深度为m</li>\n</ul>\n<h4 id=\"224-根据文件大小size\"><a class=\"markdownIt-Anchor\" href=\"#224-根据文件大小size\"></a> 2.2.4 根据文件大小(size)</h4>\n<p>单位：c(小写), k(小写), M(大写), G(大写)</p>\n<p>-size +10M: 查找大于10M的文件<br>\n-size -2k: 查找小于2k的文件<br>\n-empty: 查找大小为0的文件或空目录</p>\n<h4 id=\"225-根据文件权限perm\"><a class=\"markdownIt-Anchor\" href=\"#225-根据文件权限perm\"></a> 2.2.5 根据文件权限(perm)</h4>\n<p>例如：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find -perm <span class=\"number\">777</span> <span class=\"comment\">//查找权限为777的文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"226-根据文件所属用户和组\"><a class=\"markdownIt-Anchor\" href=\"#226-根据文件所属用户和组\"></a> 2.2.6 根据文件所属用户和组</h4>\n<ul>\n<li>-user:根据属主来查找文件</li>\n<li>-group:根据属组来查找文件</li>\n</ul>\n<h4 id=\"227-根据uid和gid\"><a class=\"markdownIt-Anchor\" href=\"#227-根据uid和gid\"></a> 2.2.7 根据uid和gid</h4>\n<ul>\n<li>-uid 500: 查找uid是500 的文件</li>\n<li>-gid 1000: 查找gid是1000的文件</li>\n</ul>\n<h4 id=\"228-根据时间\"><a class=\"markdownIt-Anchor\" href=\"#228-根据时间\"></a> 2.2.8 根据时间</h4>\n<p>可以通过<code>stat</code>命令来查看文件的时间，下列是按照文件的各种时间来查找文件：</p>\n<ul>\n<li>-mtime -n +n: 根据更改(modify)时间，-n指n天以内，+n指n天以前</li>\n<li>-atime -n +n: 根据访问(access)时间，-n指n天以内，+n指n天以前</li>\n<li>-ctime -n +n: 根据创建(create)时间，-n指n天以内，+n指n天以前</li>\n<li>-mmin -n +n: 根据更改(modify)时间，-n指n分钟以内，+n指n分钟以前</li>\n<li>-amin -n +n: 根据访问(access)时间，-n指n分钟以内，+n指n分钟以前</li>\n<li>-cmin -n +n: 根据创建(create)时间，-n指n分钟以内，+n指n分钟以前</li>\n</ul>\n<h4 id=\"229-多条件连接\"><a class=\"markdownIt-Anchor\" href=\"#229-多条件连接\"></a> 2.2.9 多条件连接</h4>\n<ul>\n<li>-a:两个条件同时满足（and）</li>\n<li>-o:两个条件满足其一（or）</li>\n<li>-not:对条件取反（not）</li>\n</ul>\n<p>例如，查找当前路径下，以a开头，并排除掉以b结尾的文件或文件夹：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> a* -<span class=\"built_in\">not</span> -<span class=\"built_in\">name</span> *b</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-执行操作\"><a class=\"markdownIt-Anchor\" href=\"#23-执行操作\"></a> 2.3 执行操作</h3>\n<ul>\n<li>\n<p><code>-print</code> 匹配文件输出到标准输出，默认操作</p>\n</li>\n<li>\n<p><code>-ls</code> 查找到的结果，以ls方式显示</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">find</span> -name app -ls</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>-ok [command]</code> 查找完成后，执行command执行，询问执行</p>\n  <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> app -ok cat &#123;&#125; \\;   <span class=\"comment\">//注意：&#123;&#125;前后有空格</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>-exec [command]</code> 查找完成后，执行command执行，直接执行</p>\n  <figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">find</span> -<span class=\"built_in\">name</span> app  -<span class=\"built_in\">exec</span> ls &#123;&#125; \\;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"iPhone开发-Keyboard","date":"2017-11-15T13:17:18.000Z","_content":"\n文本经常需要和键盘打交道，现在记录一下初步的键盘相关的知识点。\n键盘出现和消失促发两个消息。\n\nUIKeyboardWillShowNotification （出现通知）\nUIKeyboardWillHideNotification （隐藏通知）\n\nNSNotificationCenter 监听两个消息即可捕捉到键盘弹出和隐藏的两个消息。\n\n<!-- more -->\n\n### 键盘类型\n\n键盘类型系统提供了几种类型，文本里面只需要设置一下相应的的类型就可以呈现出对应的键盘种类\n\n```\ntextField.keyboardType  = UIKeyboardTypeNumberPad;（数字类型）理财方面的产品里面可以见到这样的设置。\n\n```\n\n### 类型枚举\n```\ntypedef NS_ENUM(NSInteger, UIKeyboardType) {\n    UIKeyboardTypeDefault,                // Default type for the current input method.\n    UIKeyboardTypeASCIICapable,           // Displays a keyboard which can enter ASCII characters, non-ASCII keyboards remain active\n    UIKeyboardTypeNumbersAndPunctuation,  // Numbers and assorted punctuation.\n    UIKeyboardTypeURL,                    // A type optimized for URL entry (shows . / .com prominently).\n    UIKeyboardTypeNumberPad,              // A number pad (0-9). Suitable for PIN entry.\n    UIKeyboardTypePhonePad,               // A phone pad (1-9, *, 0, #, with letters under the numbers).\n    UIKeyboardTypeNamePhonePad,           // A type optimized for entering a person's name or phone number.\n    UIKeyboardTypeEmailAddress,           // A type optimized for multiple email address entry (shows space @ . prominently).\n    UIKeyboardTypeDecimalPad NS_ENUM_AVAILABLE_IOS(4_1),   // A number pad with a decimal point.\n    UIKeyboardTypeTwitter NS_ENUM_AVAILABLE_IOS(5_0),      // A type optimized for twitter text entry (easy access to @ #)\n    UIKeyboardTypeWebSearch NS_ENUM_AVAILABLE_IOS(7_0),    // A default keyboard type with URL-oriented addition (shows space . prominently).\n\n    UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable, // Deprecated\n\n};\n```\n\n```\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardDisappear:) name:UIKeyboardWillHideNotification object:nil];\n\n    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardAppear:) name:UIKeyboardWillShowNotification object:nil];\n\n    UITextField *textField  = [[UITextField alloc] init];\n    [self.view addSubview:textField];\n    textField.frame  = CGRectMake(0, 160, 200, 28);\n\n    textField.text  = @\"我们来了\";\n    textField.backgroundColor = [UIColor greenColor];\n    textField.keyboardType  = UIKeyboardTypeNumberPad;\n\n}\n\n- (void) keyboardDisappear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘隐藏消息\");\n\n}\n- (void) keyboardAppear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘出现消息\");\n\n}\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardDisappear:) name:UIKeyboardWillHideNotification object:nil];\n\n    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardAppear:) name:UIKeyboardWillShowNotification object:nil];\n\n    UITextField *textField  = [[UITextField alloc] init];\n    [self.view addSubview:textField];\n    textField.frame  = CGRectMake(0, 160, 200, 28);\n\n    textField.text  = @\"我们来了\";\n    textField.backgroundColor = [UIColor greenColor];\n    textField.keyboardType  = UIKeyboardTypeNumberPad;\n\n}\n\n- (void) keyboardDisappear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘隐藏消息\");\n\n}\n- (void) keyboardAppear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘出现消息\");\n\n}\n```\n","source":"_posts/iPhone开发-Keyboard.md","raw":"---\ntitle: iPhone开发-Keyboard\ndate: 2017-11-15 21:17:18\ntags: [ios]\ncategories: ios\n---\n\n文本经常需要和键盘打交道，现在记录一下初步的键盘相关的知识点。\n键盘出现和消失促发两个消息。\n\nUIKeyboardWillShowNotification （出现通知）\nUIKeyboardWillHideNotification （隐藏通知）\n\nNSNotificationCenter 监听两个消息即可捕捉到键盘弹出和隐藏的两个消息。\n\n<!-- more -->\n\n### 键盘类型\n\n键盘类型系统提供了几种类型，文本里面只需要设置一下相应的的类型就可以呈现出对应的键盘种类\n\n```\ntextField.keyboardType  = UIKeyboardTypeNumberPad;（数字类型）理财方面的产品里面可以见到这样的设置。\n\n```\n\n### 类型枚举\n```\ntypedef NS_ENUM(NSInteger, UIKeyboardType) {\n    UIKeyboardTypeDefault,                // Default type for the current input method.\n    UIKeyboardTypeASCIICapable,           // Displays a keyboard which can enter ASCII characters, non-ASCII keyboards remain active\n    UIKeyboardTypeNumbersAndPunctuation,  // Numbers and assorted punctuation.\n    UIKeyboardTypeURL,                    // A type optimized for URL entry (shows . / .com prominently).\n    UIKeyboardTypeNumberPad,              // A number pad (0-9). Suitable for PIN entry.\n    UIKeyboardTypePhonePad,               // A phone pad (1-9, *, 0, #, with letters under the numbers).\n    UIKeyboardTypeNamePhonePad,           // A type optimized for entering a person's name or phone number.\n    UIKeyboardTypeEmailAddress,           // A type optimized for multiple email address entry (shows space @ . prominently).\n    UIKeyboardTypeDecimalPad NS_ENUM_AVAILABLE_IOS(4_1),   // A number pad with a decimal point.\n    UIKeyboardTypeTwitter NS_ENUM_AVAILABLE_IOS(5_0),      // A type optimized for twitter text entry (easy access to @ #)\n    UIKeyboardTypeWebSearch NS_ENUM_AVAILABLE_IOS(7_0),    // A default keyboard type with URL-oriented addition (shows space . prominently).\n\n    UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable, // Deprecated\n\n};\n```\n\n```\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardDisappear:) name:UIKeyboardWillHideNotification object:nil];\n\n    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardAppear:) name:UIKeyboardWillShowNotification object:nil];\n\n    UITextField *textField  = [[UITextField alloc] init];\n    [self.view addSubview:textField];\n    textField.frame  = CGRectMake(0, 160, 200, 28);\n\n    textField.text  = @\"我们来了\";\n    textField.backgroundColor = [UIColor greenColor];\n    textField.keyboardType  = UIKeyboardTypeNumberPad;\n\n}\n\n- (void) keyboardDisappear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘隐藏消息\");\n\n}\n- (void) keyboardAppear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘出现消息\");\n\n}\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardDisappear:) name:UIKeyboardWillHideNotification object:nil];\n\n    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(keyboardAppear:) name:UIKeyboardWillShowNotification object:nil];\n\n    UITextField *textField  = [[UITextField alloc] init];\n    [self.view addSubview:textField];\n    textField.frame  = CGRectMake(0, 160, 200, 28);\n\n    textField.text  = @\"我们来了\";\n    textField.backgroundColor = [UIColor greenColor];\n    textField.keyboardType  = UIKeyboardTypeNumberPad;\n\n}\n\n- (void) keyboardDisappear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘隐藏消息\");\n\n}\n- (void) keyboardAppear:(NSNotification *) notification\n{\n\n    NSLog(@\"键盘出现消息\");\n\n}\n```\n","slug":"iPhone开发-Keyboard","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfn003ysifyed4t2n4w","content":"<p>文本经常需要和键盘打交道，现在记录一下初步的键盘相关的知识点。<br>\n键盘出现和消失促发两个消息。</p>\n<p>UIKeyboardWillShowNotification （出现通知）<br>\nUIKeyboardWillHideNotification （隐藏通知）</p>\n<p>NSNotificationCenter 监听两个消息即可捕捉到键盘弹出和隐藏的两个消息。</p>\n<a id=\"more\"></a>\n<h3 id=\"键盘类型\"><a class=\"markdownIt-Anchor\" href=\"#键盘类型\"></a> 键盘类型</h3>\n<p>键盘类型系统提供了几种类型，文本里面只需要设置一下相应的的类型就可以呈现出对应的键盘种类</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textField.keyboardType  = UIKeyboardTypeNumberPad<span class=\"comment\">;（数字类型）理财方面的产品里面可以见到这样的设置。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#类型枚举\"></a> 类型枚举</h3>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">UIKeyboardType</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeDefault</span>,                // <span class=\"type\">Default</span> type for the current input method.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeASCIICapable</span>,           // <span class=\"type\">Displays</span> a keyboard which can enter <span class=\"type\">ASCII</span> characters, non-<span class=\"type\">ASCII</span> keyboards remain active</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNumbersAndPunctuation</span>,  // <span class=\"type\">Numbers</span> and assorted punctuation.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeURL</span>,                    // <span class=\"type\">A</span> type optimized for <span class=\"type\">URL</span> entry (shows . / .com prominently).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNumberPad</span>,              // <span class=\"type\">A</span> number pad (0-9). <span class=\"type\">Suitable</span> for <span class=\"type\">PIN</span> entry.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypePhonePad</span>,               // <span class=\"type\">A</span> phone pad (1-9, *, 0, #, with letters under the numbers).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNamePhonePad</span>,           // <span class=\"type\">A</span> type optimized for entering a person's name or phone number.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeEmailAddress</span>,           // <span class=\"type\">A</span> type optimized for multiple email address entry (shows space @ . prominently).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeDecimalPad</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(4_1)</span>,   // <span class=\"type\">A</span> number pad with a decimal point.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeTwitter</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(5_0)</span>,      // <span class=\"type\">A</span> type optimized for twitter text entry (easy access to @ #)</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeWebSearch</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(7_0)</span>,    // <span class=\"type\">A</span> default keyboard type with <span class=\"type\">URL</span>-oriented addition (shows space . prominently).</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeAlphabet</span> = <span class=\"type\">UIKeyboardTypeASCIICapable</span>, // <span class=\"type\">Deprecated</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDisappear:) name:<span class=\"built_in\">UIKeyboardWillHideNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardAppear:) name:<span class=\"built_in\">UIKeyboardWillShowNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">UITextField</span> *textField  = [[<span class=\"built_in\">UITextField</span> alloc] init];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:textField];</span><br><span class=\"line\">    textField.frame  = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>, <span class=\"number\">200</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textField.text  = <span class=\"string\">@\"我们来了\"</span>;</span><br><span class=\"line\">    textField.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">    textField.keyboardType  = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardDisappear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘隐藏消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardAppear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘出现消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDisappear:) name:<span class=\"built_in\">UIKeyboardWillHideNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardAppear:) name:<span class=\"built_in\">UIKeyboardWillShowNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">UITextField</span> *textField  = [[<span class=\"built_in\">UITextField</span> alloc] init];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:textField];</span><br><span class=\"line\">    textField.frame  = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>, <span class=\"number\">200</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textField.text  = <span class=\"string\">@\"我们来了\"</span>;</span><br><span class=\"line\">    textField.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">    textField.keyboardType  = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardDisappear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘隐藏消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardAppear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘出现消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>文本经常需要和键盘打交道，现在记录一下初步的键盘相关的知识点。<br>\n键盘出现和消失促发两个消息。</p>\n<p>UIKeyboardWillShowNotification （出现通知）<br>\nUIKeyboardWillHideNotification （隐藏通知）</p>\n<p>NSNotificationCenter 监听两个消息即可捕捉到键盘弹出和隐藏的两个消息。</p>","more":"<h3 id=\"键盘类型\"><a class=\"markdownIt-Anchor\" href=\"#键盘类型\"></a> 键盘类型</h3>\n<p>键盘类型系统提供了几种类型，文本里面只需要设置一下相应的的类型就可以呈现出对应的键盘种类</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textField.keyboardType  = UIKeyboardTypeNumberPad<span class=\"comment\">;（数字类型）理财方面的产品里面可以见到这样的设置。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类型枚举\"><a class=\"markdownIt-Anchor\" href=\"#类型枚举\"></a> 类型枚举</h3>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef <span class=\"type\">NS_ENUM</span>(<span class=\"type\">NSInteger</span>, <span class=\"type\">UIKeyboardType</span>) &#123;</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeDefault</span>,                // <span class=\"type\">Default</span> type for the current input method.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeASCIICapable</span>,           // <span class=\"type\">Displays</span> a keyboard which can enter <span class=\"type\">ASCII</span> characters, non-<span class=\"type\">ASCII</span> keyboards remain active</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNumbersAndPunctuation</span>,  // <span class=\"type\">Numbers</span> and assorted punctuation.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeURL</span>,                    // <span class=\"type\">A</span> type optimized for <span class=\"type\">URL</span> entry (shows . / .com prominently).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNumberPad</span>,              // <span class=\"type\">A</span> number pad (0-9). <span class=\"type\">Suitable</span> for <span class=\"type\">PIN</span> entry.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypePhonePad</span>,               // <span class=\"type\">A</span> phone pad (1-9, *, 0, #, with letters under the numbers).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeNamePhonePad</span>,           // <span class=\"type\">A</span> type optimized for entering a person's name or phone number.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeEmailAddress</span>,           // <span class=\"type\">A</span> type optimized for multiple email address entry (shows space @ . prominently).</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeDecimalPad</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(4_1)</span>,   // <span class=\"type\">A</span> number pad with a decimal point.</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeTwitter</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(5_0)</span>,      // <span class=\"type\">A</span> type optimized for twitter text entry (easy access to @ #)</span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeWebSearch</span> <span class=\"type\">NS_ENUM_AVAILABLE_IOS(7_0)</span>,    // <span class=\"type\">A</span> default keyboard type with <span class=\"type\">URL</span>-oriented addition (shows space . prominently).</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">UIKeyboardTypeAlphabet</span> = <span class=\"type\">UIKeyboardTypeASCIICapable</span>, // <span class=\"type\">Deprecated</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDisappear:) name:<span class=\"built_in\">UIKeyboardWillHideNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardAppear:) name:<span class=\"built_in\">UIKeyboardWillShowNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">UITextField</span> *textField  = [[<span class=\"built_in\">UITextField</span> alloc] init];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:textField];</span><br><span class=\"line\">    textField.frame  = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>, <span class=\"number\">200</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textField.text  = <span class=\"string\">@\"我们来了\"</span>;</span><br><span class=\"line\">    textField.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">    textField.keyboardType  = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardDisappear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘隐藏消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardAppear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘出现消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardDisappear:) name:<span class=\"built_in\">UIKeyboardWillHideNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter]addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(keyboardAppear:) name:<span class=\"built_in\">UIKeyboardWillShowNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">UITextField</span> *textField  = [[<span class=\"built_in\">UITextField</span> alloc] init];</span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.view addSubview:textField];</span><br><span class=\"line\">    textField.frame  = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">160</span>, <span class=\"number\">200</span>, <span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    textField.text  = <span class=\"string\">@\"我们来了\"</span>;</span><br><span class=\"line\">    textField.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">    textField.keyboardType  = <span class=\"built_in\">UIKeyboardTypeNumberPad</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardDisappear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘隐藏消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">- (<span class=\"keyword\">void</span>) keyboardAppear:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"键盘出现消息\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"iPhone开发-leftBarButtonItem","date":"2017-11-15T12:27:50.000Z","_content":"\n### 1.设置leftBarButtonItem的文字\n在设置 leftBarButtonItem的时候，又会少了一个左箭头。\n\n一般情况下，自定义一个新的标题会这样操作，设置完成后，问题来了，发现左箭头不见了。\n```\nself.navigationItem.leftBarButtonItem =  [[UIBarButtonItem alloc]initWithTitle:@\"返回\" style:UIBarButtonItemStylePlain target:self  action:@selector(onSelect)];\n```\n\n一般情况下，自定义 UIBarButtonItem 使用设置图片有如下，但发现文本不能设置显示了。\n```\n[[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStylePlain target:self\n                                   action:@selector(onSelect)];\n```\n\n还有一种方式，既有文本又有左箭头的需求，只能使用下面这种方式，自定义一个按钮视图。\n```\n[[UIBarButtonItem alloc]initWithCustomView:backButton];\n```\n\n\n问题前提： 使用pushViewController的时候，该界面返回情况会默认是上一级的标题， 更改文字，又会对本身产生影响。原本意图很简单，就是想设置自己的文字，又想有左箭头。\n```\n[self.navigationController pushViewController:cityController animated:YES];\n```\n\n<!-- more -->\n### 2.实现过程\n实现这个过程改用了一种做法是 用按钮的方式去完成这件事。这里涉及几个问题。设置了图片的时候，按钮点下去还是会出现**蓝色**。\n\n在写的时候，会发现Button 的 setImage 和 setBackGroundImage 是有区别的。\n**setBackGroundImage**： 会对原图拉伸产生影响，跟随性。也就是说，按钮宽度改变，底图也发生改变\n\n**setImage** ： 会保持原图性质，不随改变而改变。\n在测试过程也是一样。\n\n为了解决点击后保存一致的效果， 改用暴力的方式，对点击下去的情况设置一张透明度的图 。同时对文本设置透明度。这样有点罗嗦和累赘。暂时还没发现更好的方式。有一些人说是设置backBarButtonItem 但是没有效果。我也遇到这个问题。**backBarButtonItem 和 leftBarButtonItem 还是有区别**。\n\n为了解决按钮图片和文本点击后透明度变化，采取的办法是对两个状态设置不同的UIImage信息。其中这里使用到复制位图的操作，UIGraphicsBeginImageContext 使用这个方式。拷贝一个UIImage副本出来，对其透明度alpha 设置。\n这个设计的目标是为 了解决点击后还是变蓝色的问题。\n\n```\n//按钮\n[backButton setImage:image forState:UIControlStateNormal];\n[backButton setImage:neImage forState:UIControlStateHighlighted];\n//文本颜色\n[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\n[backButton setTitleColor:[UIColor colorWithWhite:1.0 alpha:0.7] forState:UIControlStateHighlighted];\n```\n\n一切完成后，在刚运行的过程当中，按钮背景图片和文本粘贴在比较紧，可以使用 setImageEdgeInsets的方式让其他拉开一点距离。这样子可以实现一个自定义LeftBarButtonItem。\n\n```\nUIButton *backButton = [[UIButton alloc ]initWithFrame:CGRectMake(0, 0, 60, 30)];\n[backButton addTarget:self action:@selector(onSelectCity:) forControlEvents:UIControlEventTouchUpInside];\nUIImage  *image =[[UIImage imageNamed:@\"navbar_btn@2x.png\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n[backButton setImage:image forState:UIControlStateNormal];\n\nUIGraphicsBeginImageContext(image.size);\n[image drawInRect:CGRectMake(0,0,image.size.width,image.size.height) blendMode:kCGBlendModeNormal alpha:0.7];\nUIImage *neImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n[backButton setImage:neImage forState:UIControlStateHighlighted];\n[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\nbackButton.titleLabel.font  =[UIFont systemFontOfSize:14] ;\n[backButton setTitleColor:[UIColor colorWithWhite:1.0 alpha:0.7] forState:UIControlStateHighlighted];\n[backButton setTitle:@\"全部\" forState:UIControlStateNormal];\n[backButton setImageEdgeInsets:UIEdgeInsetsMake(0, -15, 0, 0)];\nUIBarButtonItem *backItem = [[UIBarButtonItem alloc]initWithCustomView:backButton];\nself.navigationItem.leftBarButtonItem = backItem;\n```\n\n### 3.遇到的问题\n\n问题1： UITabbar选择图片的问题，选中后出现蓝色的问题，而不是自定义的\n\n问题2：按钮点击后，蓝色按钮蓝色的问题\n\n问题3：颜色设置缺少一个0会出现奇特现象\n\n问题4：UIImage的缩放操作\n\n\n在学习实验过程，遇到问题 UIColor colorWithRed的方法，后缀 255.0 去掉了0 后变成255 会发现很莫名的颜色，这个小数点影响了一些结果。非法奇怪。\n\n```\nUIColor *color = [UIColor colorWithRed:254/255.0 green:85/255.0 blue:90/255.0 alpha:1.0];\n\n```\n\n其次是UITabBarItem 使用了两张图片做状态，一种是默认的情况，一种是选中的效果。会发现变成蓝色。不同不使用UIImage的imageWithRenderingMode的方式去改回原图。这样子这个问题就解决了。\n\n```\nUIImage  *image =[[UIImage imageNamed:@\"navbar_btn@2x.png\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n\n```\n\n而NavigationBar的颜色，也是一个坑的，旧的API只能在旧版本使用，新的版本需要在7.0以上才能使用，这样要兼容6.0 还要挖个坑。有时候 会对背景整个栏目设置，所以在这个情况下只能使用兼容方式。\n","source":"_posts/iPhone开发-leftBarButtonItem.md","raw":"---\ntitle: iPhone开发-leftBarButtonItem\ndate: 2017-11-15 20:27:50\ntags: [ios]\ncategories: ios\n---\n\n### 1.设置leftBarButtonItem的文字\n在设置 leftBarButtonItem的时候，又会少了一个左箭头。\n\n一般情况下，自定义一个新的标题会这样操作，设置完成后，问题来了，发现左箭头不见了。\n```\nself.navigationItem.leftBarButtonItem =  [[UIBarButtonItem alloc]initWithTitle:@\"返回\" style:UIBarButtonItemStylePlain target:self  action:@selector(onSelect)];\n```\n\n一般情况下，自定义 UIBarButtonItem 使用设置图片有如下，但发现文本不能设置显示了。\n```\n[[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStylePlain target:self\n                                   action:@selector(onSelect)];\n```\n\n还有一种方式，既有文本又有左箭头的需求，只能使用下面这种方式，自定义一个按钮视图。\n```\n[[UIBarButtonItem alloc]initWithCustomView:backButton];\n```\n\n\n问题前提： 使用pushViewController的时候，该界面返回情况会默认是上一级的标题， 更改文字，又会对本身产生影响。原本意图很简单，就是想设置自己的文字，又想有左箭头。\n```\n[self.navigationController pushViewController:cityController animated:YES];\n```\n\n<!-- more -->\n### 2.实现过程\n实现这个过程改用了一种做法是 用按钮的方式去完成这件事。这里涉及几个问题。设置了图片的时候，按钮点下去还是会出现**蓝色**。\n\n在写的时候，会发现Button 的 setImage 和 setBackGroundImage 是有区别的。\n**setBackGroundImage**： 会对原图拉伸产生影响，跟随性。也就是说，按钮宽度改变，底图也发生改变\n\n**setImage** ： 会保持原图性质，不随改变而改变。\n在测试过程也是一样。\n\n为了解决点击后保存一致的效果， 改用暴力的方式，对点击下去的情况设置一张透明度的图 。同时对文本设置透明度。这样有点罗嗦和累赘。暂时还没发现更好的方式。有一些人说是设置backBarButtonItem 但是没有效果。我也遇到这个问题。**backBarButtonItem 和 leftBarButtonItem 还是有区别**。\n\n为了解决按钮图片和文本点击后透明度变化，采取的办法是对两个状态设置不同的UIImage信息。其中这里使用到复制位图的操作，UIGraphicsBeginImageContext 使用这个方式。拷贝一个UIImage副本出来，对其透明度alpha 设置。\n这个设计的目标是为 了解决点击后还是变蓝色的问题。\n\n```\n//按钮\n[backButton setImage:image forState:UIControlStateNormal];\n[backButton setImage:neImage forState:UIControlStateHighlighted];\n//文本颜色\n[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\n[backButton setTitleColor:[UIColor colorWithWhite:1.0 alpha:0.7] forState:UIControlStateHighlighted];\n```\n\n一切完成后，在刚运行的过程当中，按钮背景图片和文本粘贴在比较紧，可以使用 setImageEdgeInsets的方式让其他拉开一点距离。这样子可以实现一个自定义LeftBarButtonItem。\n\n```\nUIButton *backButton = [[UIButton alloc ]initWithFrame:CGRectMake(0, 0, 60, 30)];\n[backButton addTarget:self action:@selector(onSelectCity:) forControlEvents:UIControlEventTouchUpInside];\nUIImage  *image =[[UIImage imageNamed:@\"navbar_btn@2x.png\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n[backButton setImage:image forState:UIControlStateNormal];\n\nUIGraphicsBeginImageContext(image.size);\n[image drawInRect:CGRectMake(0,0,image.size.width,image.size.height) blendMode:kCGBlendModeNormal alpha:0.7];\nUIImage *neImage = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\n[backButton setImage:neImage forState:UIControlStateHighlighted];\n[backButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];\nbackButton.titleLabel.font  =[UIFont systemFontOfSize:14] ;\n[backButton setTitleColor:[UIColor colorWithWhite:1.0 alpha:0.7] forState:UIControlStateHighlighted];\n[backButton setTitle:@\"全部\" forState:UIControlStateNormal];\n[backButton setImageEdgeInsets:UIEdgeInsetsMake(0, -15, 0, 0)];\nUIBarButtonItem *backItem = [[UIBarButtonItem alloc]initWithCustomView:backButton];\nself.navigationItem.leftBarButtonItem = backItem;\n```\n\n### 3.遇到的问题\n\n问题1： UITabbar选择图片的问题，选中后出现蓝色的问题，而不是自定义的\n\n问题2：按钮点击后，蓝色按钮蓝色的问题\n\n问题3：颜色设置缺少一个0会出现奇特现象\n\n问题4：UIImage的缩放操作\n\n\n在学习实验过程，遇到问题 UIColor colorWithRed的方法，后缀 255.0 去掉了0 后变成255 会发现很莫名的颜色，这个小数点影响了一些结果。非法奇怪。\n\n```\nUIColor *color = [UIColor colorWithRed:254/255.0 green:85/255.0 blue:90/255.0 alpha:1.0];\n\n```\n\n其次是UITabBarItem 使用了两张图片做状态，一种是默认的情况，一种是选中的效果。会发现变成蓝色。不同不使用UIImage的imageWithRenderingMode的方式去改回原图。这样子这个问题就解决了。\n\n```\nUIImage  *image =[[UIImage imageNamed:@\"navbar_btn@2x.png\"] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n\n```\n\n而NavigationBar的颜色，也是一个坑的，旧的API只能在旧版本使用，新的版本需要在7.0以上才能使用，这样要兼容6.0 还要挖个坑。有时候 会对背景整个栏目设置，所以在这个情况下只能使用兼容方式。\n","slug":"iPhone开发-leftBarButtonItem","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfo0042sifyu6dt1d50","content":"<h3 id=\"1设置leftbarbuttonitem的文字\"><a class=\"markdownIt-Anchor\" href=\"#1设置leftbarbuttonitem的文字\"></a> 1.设置leftBarButtonItem的文字</h3>\n<p>在设置 leftBarButtonItem的时候，又会少了一个左箭头。</p>\n<p>一般情况下，自定义一个新的标题会这样操作，设置完成后，问题来了，发现左箭头不见了。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationItem.leftBarButtonItem =  [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"返回\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self  <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(onSelect)];</span><br></pre></td></tr></table></figure>\n<p>一般情况下，自定义 UIBarButtonItem 使用设置图片有如下，但发现文本不能设置显示了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[[UIBarButtonItem alloc]</span><span class=\"selector-tag\">initWithImage</span><span class=\"selector-pseudo\">:image</span> <span class=\"selector-tag\">style</span><span class=\"selector-pseudo\">:UIBarButtonItemStylePlain</span> <span class=\"selector-tag\">target</span><span class=\"selector-pseudo\">:self</span></span><br><span class=\"line\">                                   <span class=\"selector-tag\">action</span>:@<span class=\"keyword\">selector</span>(<span class=\"keyword\">onSelect</span>)];</span><br></pre></td></tr></table></figure>\n<p>还有一种方式，既有文本又有左箭头的需求，只能使用下面这种方式，自定义一个按钮视图。</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"name\">UIBarButtonItem</span> alloc]initWithCustomView:backButton]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>问题前提： 使用pushViewController的时候，该界面返回情况会默认是上一级的标题， 更改文字，又会对本身产生影响。原本意图很简单，就是想设置自己的文字，又想有左箭头。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self.navigationController </span><span class=\"keyword\">pushViewController:cityController </span>animated:YES]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"2实现过程\"><a class=\"markdownIt-Anchor\" href=\"#2实现过程\"></a> 2.实现过程</h3>\n<p>实现这个过程改用了一种做法是 用按钮的方式去完成这件事。这里涉及几个问题。设置了图片的时候，按钮点下去还是会出现<strong>蓝色</strong>。</p>\n<p>在写的时候，会发现Button 的 setImage 和 setBackGroundImage 是有区别的。<br>\n<strong>setBackGroundImage</strong>： 会对原图拉伸产生影响，跟随性。也就是说，按钮宽度改变，底图也发生改变</p>\n<p><strong>setImage</strong> ： 会保持原图性质，不随改变而改变。<br>\n在测试过程也是一样。</p>\n<p>为了解决点击后保存一致的效果， 改用暴力的方式，对点击下去的情况设置一张透明度的图 。同时对文本设置透明度。这样有点罗嗦和累赘。暂时还没发现更好的方式。有一些人说是设置backBarButtonItem 但是没有效果。我也遇到这个问题。<strong>backBarButtonItem 和 leftBarButtonItem 还是有区别</strong>。</p>\n<p>为了解决按钮图片和文本点击后透明度变化，采取的办法是对两个状态设置不同的UIImage信息。其中这里使用到复制位图的操作，UIGraphicsBeginImageContext 使用这个方式。拷贝一个UIImage副本出来，对其透明度alpha 设置。<br>\n这个设计的目标是为 了解决点击后还是变蓝色的问题。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按钮</span></span><br><span class=\"line\">[backButton <span class=\"string\">setImage:</span>image <span class=\"string\">forState:</span>UIControlStateNormal];</span><br><span class=\"line\">[backButton <span class=\"string\">setImage:</span>neImage <span class=\"string\">forState:</span>UIControlStateHighlighted];</span><br><span class=\"line\"><span class=\"comment\">//文本颜色</span></span><br><span class=\"line\">[backButton <span class=\"string\">setTitleColor:</span>[UIColor whiteColor] <span class=\"string\">forState:</span>UIControlStateNormal];</span><br><span class=\"line\">[backButton <span class=\"string\">setTitleColor:</span>[UIColor <span class=\"string\">colorWithWhite:</span><span class=\"number\">1.0</span> <span class=\"string\">alpha:</span><span class=\"number\">0.7</span>] <span class=\"string\">forState:</span>UIControlStateHighlighted];</span><br></pre></td></tr></table></figure>\n<p>一切完成后，在刚运行的过程当中，按钮背景图片和文本粘贴在比较紧，可以使用 setImageEdgeInsets的方式让其他拉开一点距离。这样子可以实现一个自定义LeftBarButtonItem。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIButton *<span class=\"keyword\">backButton </span>= [[UIButton alloc ]initWithFrame:CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">30</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span><span class=\"keyword\">addTarget:self </span>action:@selector(onSelectCity:) forControlEvents:UIControlEventTouchUpInside]<span class=\"comment\">;</span></span><br><span class=\"line\">UIImage  *image =[[UIImage imageNamed:@<span class=\"string\">\"navbar_btn@2x.png\"</span>] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImage:image forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">UIGraphicsBeginImageContext(image.size)<span class=\"comment\">;</span></span><br><span class=\"line\">[image drawInRect:CGRectMake(<span class=\"number\">0</span>,<span class=\"number\">0</span>,image.size.width,image.size.height) <span class=\"keyword\">blendMode:kCGBlendModeNormal </span>alpha:<span class=\"number\">0</span>.<span class=\"number\">7</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">UIImage *neImage = UIGraphicsGetImageFromCurrentImageContext()<span class=\"comment\">;</span></span><br><span class=\"line\">UIGraphicsEndImageContext()<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImage:neImage forState:UIControlStateHighlighted]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">backButton.titleLabel.font </span> =[UIFont systemFontOfSize:<span class=\"number\">14</span>] <span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitleColor:[UIColor colorWithWhite:<span class=\"number\">1</span>.<span class=\"number\">0</span> alpha:<span class=\"number\">0</span>.<span class=\"number\">7</span>] forState:UIControlStateHighlighted]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitle:@<span class=\"string\">\"全部\"</span> forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImageEdgeInsets:UIEdgeInsetsMake(<span class=\"number\">0</span>, -<span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\">UIBarButtonItem *<span class=\"keyword\">backItem </span>= [[UIBarButtonItem alloc]initWithCustomView:<span class=\"keyword\">backButton];</span></span><br><span class=\"line\"><span class=\"keyword\">self.navigationItem.leftBarButtonItem </span>= <span class=\"keyword\">backItem;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#3遇到的问题\"></a> 3.遇到的问题</h3>\n<p>问题1： UITabbar选择图片的问题，选中后出现蓝色的问题，而不是自定义的</p>\n<p>问题2：按钮点击后，蓝色按钮蓝色的问题</p>\n<p>问题3：颜色设置缺少一个0会出现奇特现象</p>\n<p>问题4：UIImage的缩放操作</p>\n<p>在学习实验过程，遇到问题 UIColor colorWithRed的方法，后缀 255.0 去掉了0 后变成255 会发现很莫名的颜色，这个小数点影响了一些结果。非法奇怪。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIColor *color = [UIColor colorWithRed:<span class=\"number\">254</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">85</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">90</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1.0</span>];</span><br></pre></td></tr></table></figure>\n<p>其次是UITabBarItem 使用了两张图片做状态，一种是默认的情况，一种是选中的效果。会发现变成蓝色。不同不使用UIImage的imageWithRenderingMode的方式去改回原图。这样子这个问题就解决了。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span>  *image =[[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"navbar_btn@2x.png\"</span>] imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span>];</span><br></pre></td></tr></table></figure>\n<p>而NavigationBar的颜色，也是一个坑的，旧的API只能在旧版本使用，新的版本需要在7.0以上才能使用，这样要兼容6.0 还要挖个坑。有时候 会对背景整个栏目设置，所以在这个情况下只能使用兼容方式。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1设置leftbarbuttonitem的文字\"><a class=\"markdownIt-Anchor\" href=\"#1设置leftbarbuttonitem的文字\"></a> 1.设置leftBarButtonItem的文字</h3>\n<p>在设置 leftBarButtonItem的时候，又会少了一个左箭头。</p>\n<p>一般情况下，自定义一个新的标题会这样操作，设置完成后，问题来了，发现左箭头不见了。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.navigationItem.leftBarButtonItem =  [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"返回\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self  <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(onSelect)];</span><br></pre></td></tr></table></figure>\n<p>一般情况下，自定义 UIBarButtonItem 使用设置图片有如下，但发现文本不能设置显示了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[[UIBarButtonItem alloc]</span><span class=\"selector-tag\">initWithImage</span><span class=\"selector-pseudo\">:image</span> <span class=\"selector-tag\">style</span><span class=\"selector-pseudo\">:UIBarButtonItemStylePlain</span> <span class=\"selector-tag\">target</span><span class=\"selector-pseudo\">:self</span></span><br><span class=\"line\">                                   <span class=\"selector-tag\">action</span>:@<span class=\"keyword\">selector</span>(<span class=\"keyword\">onSelect</span>)];</span><br></pre></td></tr></table></figure>\n<p>还有一种方式，既有文本又有左箭头的需求，只能使用下面这种方式，自定义一个按钮视图。</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"name\">UIBarButtonItem</span> alloc]initWithCustomView:backButton]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>问题前提： 使用pushViewController的时候，该界面返回情况会默认是上一级的标题， 更改文字，又会对本身产生影响。原本意图很简单，就是想设置自己的文字，又想有左箭头。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self.navigationController </span><span class=\"keyword\">pushViewController:cityController </span>animated:YES]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2实现过程\"><a class=\"markdownIt-Anchor\" href=\"#2实现过程\"></a> 2.实现过程</h3>\n<p>实现这个过程改用了一种做法是 用按钮的方式去完成这件事。这里涉及几个问题。设置了图片的时候，按钮点下去还是会出现<strong>蓝色</strong>。</p>\n<p>在写的时候，会发现Button 的 setImage 和 setBackGroundImage 是有区别的。<br>\n<strong>setBackGroundImage</strong>： 会对原图拉伸产生影响，跟随性。也就是说，按钮宽度改变，底图也发生改变</p>\n<p><strong>setImage</strong> ： 会保持原图性质，不随改变而改变。<br>\n在测试过程也是一样。</p>\n<p>为了解决点击后保存一致的效果， 改用暴力的方式，对点击下去的情况设置一张透明度的图 。同时对文本设置透明度。这样有点罗嗦和累赘。暂时还没发现更好的方式。有一些人说是设置backBarButtonItem 但是没有效果。我也遇到这个问题。<strong>backBarButtonItem 和 leftBarButtonItem 还是有区别</strong>。</p>\n<p>为了解决按钮图片和文本点击后透明度变化，采取的办法是对两个状态设置不同的UIImage信息。其中这里使用到复制位图的操作，UIGraphicsBeginImageContext 使用这个方式。拷贝一个UIImage副本出来，对其透明度alpha 设置。<br>\n这个设计的目标是为 了解决点击后还是变蓝色的问题。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按钮</span></span><br><span class=\"line\">[backButton <span class=\"string\">setImage:</span>image <span class=\"string\">forState:</span>UIControlStateNormal];</span><br><span class=\"line\">[backButton <span class=\"string\">setImage:</span>neImage <span class=\"string\">forState:</span>UIControlStateHighlighted];</span><br><span class=\"line\"><span class=\"comment\">//文本颜色</span></span><br><span class=\"line\">[backButton <span class=\"string\">setTitleColor:</span>[UIColor whiteColor] <span class=\"string\">forState:</span>UIControlStateNormal];</span><br><span class=\"line\">[backButton <span class=\"string\">setTitleColor:</span>[UIColor <span class=\"string\">colorWithWhite:</span><span class=\"number\">1.0</span> <span class=\"string\">alpha:</span><span class=\"number\">0.7</span>] <span class=\"string\">forState:</span>UIControlStateHighlighted];</span><br></pre></td></tr></table></figure>\n<p>一切完成后，在刚运行的过程当中，按钮背景图片和文本粘贴在比较紧，可以使用 setImageEdgeInsets的方式让其他拉开一点距离。这样子可以实现一个自定义LeftBarButtonItem。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIButton *<span class=\"keyword\">backButton </span>= [[UIButton alloc ]initWithFrame:CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">60</span>, <span class=\"number\">30</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span><span class=\"keyword\">addTarget:self </span>action:@selector(onSelectCity:) forControlEvents:UIControlEventTouchUpInside]<span class=\"comment\">;</span></span><br><span class=\"line\">UIImage  *image =[[UIImage imageNamed:@<span class=\"string\">\"navbar_btn@2x.png\"</span>] imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImage:image forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">UIGraphicsBeginImageContext(image.size)<span class=\"comment\">;</span></span><br><span class=\"line\">[image drawInRect:CGRectMake(<span class=\"number\">0</span>,<span class=\"number\">0</span>,image.size.width,image.size.height) <span class=\"keyword\">blendMode:kCGBlendModeNormal </span>alpha:<span class=\"number\">0</span>.<span class=\"number\">7</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">UIImage *neImage = UIGraphicsGetImageFromCurrentImageContext()<span class=\"comment\">;</span></span><br><span class=\"line\">UIGraphicsEndImageContext()<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImage:neImage forState:UIControlStateHighlighted]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">backButton.titleLabel.font </span> =[UIFont systemFontOfSize:<span class=\"number\">14</span>] <span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitleColor:[UIColor colorWithWhite:<span class=\"number\">1</span>.<span class=\"number\">0</span> alpha:<span class=\"number\">0</span>.<span class=\"number\">7</span>] forState:UIControlStateHighlighted]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setTitle:@<span class=\"string\">\"全部\"</span> forState:UIControlStateNormal]<span class=\"comment\">;</span></span><br><span class=\"line\">[<span class=\"keyword\">backButton </span>setImageEdgeInsets:UIEdgeInsetsMake(<span class=\"number\">0</span>, -<span class=\"number\">15</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\">UIBarButtonItem *<span class=\"keyword\">backItem </span>= [[UIBarButtonItem alloc]initWithCustomView:<span class=\"keyword\">backButton];</span></span><br><span class=\"line\"><span class=\"keyword\">self.navigationItem.leftBarButtonItem </span>= <span class=\"keyword\">backItem;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#3遇到的问题\"></a> 3.遇到的问题</h3>\n<p>问题1： UITabbar选择图片的问题，选中后出现蓝色的问题，而不是自定义的</p>\n<p>问题2：按钮点击后，蓝色按钮蓝色的问题</p>\n<p>问题3：颜色设置缺少一个0会出现奇特现象</p>\n<p>问题4：UIImage的缩放操作</p>\n<p>在学习实验过程，遇到问题 UIColor colorWithRed的方法，后缀 255.0 去掉了0 后变成255 会发现很莫名的颜色，这个小数点影响了一些结果。非法奇怪。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIColor *color = [UIColor colorWithRed:<span class=\"number\">254</span>/<span class=\"number\">255.0</span> green:<span class=\"number\">85</span>/<span class=\"number\">255.0</span> blue:<span class=\"number\">90</span>/<span class=\"number\">255.0</span> alpha:<span class=\"number\">1.0</span>];</span><br></pre></td></tr></table></figure>\n<p>其次是UITabBarItem 使用了两张图片做状态，一种是默认的情况，一种是选中的效果。会发现变成蓝色。不同不使用UIImage的imageWithRenderingMode的方式去改回原图。这样子这个问题就解决了。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span>  *image =[[<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"navbar_btn@2x.png\"</span>] imageWithRenderingMode:<span class=\"built_in\">UIImageRenderingModeAlwaysOriginal</span>];</span><br></pre></td></tr></table></figure>\n<p>而NavigationBar的颜色，也是一个坑的，旧的API只能在旧版本使用，新的版本需要在7.0以上才能使用，这样要兼容6.0 还要挖个坑。有时候 会对背景整个栏目设置，所以在这个情况下只能使用兼容方式。</p>"},{"title":"iPhone开发-UILabel","date":"2017-11-15T12:38:52.000Z","_content":"\nUILable 的用法涉及内容有如下\n\n1. 创建与显示\n2. 文本内容和字体设置\n3. 背景颜色指定\n4. 计算高度。\n5. 行数指定和计算\n\nUIlabel可以显示指定的行数，设置numberOfLines =0 则为不限制行数，因为UIlabel不是Icontrol的方面，没有addTarget和block等方法处理相应的行为机制，但支持扩展手势触控等方法处理点击，不过对于html 超链接响应情况，在之前看过是需要采用第三方处理机制处理。\n\n在日常使用过程，对于文本方法计算高度的用法很常用，ios提供相应计算方法。如属于NSString的类别（NSStringDrawing.h）该类为此提供相应处理解决方案，提供计算高度和文本大小的方法。\n注意到 过去ios6的版本 提供sizeWithFont方法 在ios 7.0 已经不生效，需要改成其他方法处理。boundingRectWithSize 后续推荐的方式。\n\n```\n- (CGSize)sizeWithAttributes:(NSDictionary *)attrs NS_AVAILABLE_IOS(7_0);\n\n```\n\n```\n- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context NS_AVAILABLE_IOS(7_0);\n\n```\n\n```\n    self.label = [[UILabel alloc]initWithFrame:CGRectMake(85, 0, self.view.frame.size.width-85, 70)];\n    [self.panel addSubview:self.label];\n    self.label.text = @\"这个人很懒，什么都没留下\";\n    self.label.numberOfLines = 3;\n    self.label.lineBreakMode = NSLineBreakByCharWrapping;\n    self.label.font =[UIFont systemFontOfSize:14];\n   // self.label.userInteractionEnabled = YES; 需要的时候才打开\n    [self.view addSubview:self.panel];\n```\n\n下面计算一下高度，当采用默认字体的时候，字体号为17，其高度约为20, 字体为14的时候，高度约为16~17之间\n\n\n```\n字体号：17 ，文本高：20\n字体号：16 ，文本高：19\n字体号：15 ，文本高：17~18 之间\n字体号：14， 文本高：16~17 之间\n```\n\n这些字体是默认字体，要是采用其他字体或者设置粗体 ，估计值会受到一些浮动影响。\n\n```\n[self getTextHeight:17 width:self.view.frame.size.width-85];   \n-(void) getTextHeight:(CGFloat) fontSize width:(CGFloat) textWidth\n{\n\n    NSDictionary *dic =@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]};\n    CGSize curSize = CGSizeMake(textWidth, MAXFLOAT);\n    CGRect rect =   [self.label.text boundingRectWithSize:curSize\n                                                  options:NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading\n                                               attributes:dic context:nil];\n\n    NSString *str = NSStringFromCGRect(rect);\n    NSLog(@\"%@\",str);\n\n}\n```\n","source":"_posts/iPhone开发-UILabel.md","raw":"---\ntitle: iPhone开发-UILabel\ndate: 2017-11-15 20:38:52\ntags: [ios]\ncategories: ios\n---\n\nUILable 的用法涉及内容有如下\n\n1. 创建与显示\n2. 文本内容和字体设置\n3. 背景颜色指定\n4. 计算高度。\n5. 行数指定和计算\n\nUIlabel可以显示指定的行数，设置numberOfLines =0 则为不限制行数，因为UIlabel不是Icontrol的方面，没有addTarget和block等方法处理相应的行为机制，但支持扩展手势触控等方法处理点击，不过对于html 超链接响应情况，在之前看过是需要采用第三方处理机制处理。\n\n在日常使用过程，对于文本方法计算高度的用法很常用，ios提供相应计算方法。如属于NSString的类别（NSStringDrawing.h）该类为此提供相应处理解决方案，提供计算高度和文本大小的方法。\n注意到 过去ios6的版本 提供sizeWithFont方法 在ios 7.0 已经不生效，需要改成其他方法处理。boundingRectWithSize 后续推荐的方式。\n\n```\n- (CGSize)sizeWithAttributes:(NSDictionary *)attrs NS_AVAILABLE_IOS(7_0);\n\n```\n\n```\n- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context NS_AVAILABLE_IOS(7_0);\n\n```\n\n```\n    self.label = [[UILabel alloc]initWithFrame:CGRectMake(85, 0, self.view.frame.size.width-85, 70)];\n    [self.panel addSubview:self.label];\n    self.label.text = @\"这个人很懒，什么都没留下\";\n    self.label.numberOfLines = 3;\n    self.label.lineBreakMode = NSLineBreakByCharWrapping;\n    self.label.font =[UIFont systemFontOfSize:14];\n   // self.label.userInteractionEnabled = YES; 需要的时候才打开\n    [self.view addSubview:self.panel];\n```\n\n下面计算一下高度，当采用默认字体的时候，字体号为17，其高度约为20, 字体为14的时候，高度约为16~17之间\n\n\n```\n字体号：17 ，文本高：20\n字体号：16 ，文本高：19\n字体号：15 ，文本高：17~18 之间\n字体号：14， 文本高：16~17 之间\n```\n\n这些字体是默认字体，要是采用其他字体或者设置粗体 ，估计值会受到一些浮动影响。\n\n```\n[self getTextHeight:17 width:self.view.frame.size.width-85];   \n-(void) getTextHeight:(CGFloat) fontSize width:(CGFloat) textWidth\n{\n\n    NSDictionary *dic =@{NSFontAttributeName:[UIFont systemFontOfSize:fontSize]};\n    CGSize curSize = CGSizeMake(textWidth, MAXFLOAT);\n    CGRect rect =   [self.label.text boundingRectWithSize:curSize\n                                                  options:NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading\n                                               attributes:dic context:nil];\n\n    NSString *str = NSStringFromCGRect(rect);\n    NSLog(@\"%@\",str);\n\n}\n```\n","slug":"iPhone开发-UILabel","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfo0045sifyyh9xv3u1","content":"<p>UILable 的用法涉及内容有如下</p>\n<ol>\n<li>创建与显示</li>\n<li>文本内容和字体设置</li>\n<li>背景颜色指定</li>\n<li>计算高度。</li>\n<li>行数指定和计算</li>\n</ol>\n<p>UIlabel可以显示指定的行数，设置numberOfLines =0 则为不限制行数，因为UIlabel不是Icontrol的方面，没有addTarget和block等方法处理相应的行为机制，但支持扩展手势触控等方法处理点击，不过对于html 超链接响应情况，在之前看过是需要采用第三方处理机制处理。</p>\n<p>在日常使用过程，对于文本方法计算高度的用法很常用，ios提供相应计算方法。如属于NSString的类别（NSStringDrawing.h）该类为此提供相应处理解决方案，提供计算高度和文本大小的方法。<br>\n注意到 过去ios6的版本 提供sizeWithFont方法 在ios 7.0 已经不生效，需要改成其他方法处理。boundingRectWithSize 后续推荐的方式。</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"params\">(CGSize)</span>sizeWithAttributes:<span class=\"params\">(NSDictionary *)</span>attrs NS_AVAILABLE_IOS<span class=\"params\">(<span class=\"number\">7</span>_0)</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"params\">(CGRect)</span>boundingRectWithSize:<span class=\"params\">(CGSize)</span>size options:<span class=\"params\">(NSStringDrawingOptions)</span>options attributes:<span class=\"params\">(NSDictionary *)</span>attributes context:<span class=\"params\">(NSStringDrawingContext *)</span>context NS_AVAILABLE_IOS<span class=\"params\">(<span class=\"number\">7</span>_0)</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span> = [[UILabel alloc]initWithFrame:CGRectMake(<span class=\"number\">85</span>, <span class=\"number\">0</span>, <span class=\"literal\">self</span>.view.frame.size.width-<span class=\"number\">85</span>, <span class=\"number\">70</span>)];</span><br><span class=\"line\"> [<span class=\"literal\">self</span>.panel addSubview:<span class=\"literal\">self</span>.<span class=\"keyword\">label</span>];</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.text = @<span class=\"string\">\"这个人很懒，什么都没留下\"</span>;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.numberOfLines = <span class=\"number\">3</span>;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.lineBreakMode = NSLineBreakByCharWrapping;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.font =[UIFont systemFontOfSize:<span class=\"number\">14</span>];</span><br><span class=\"line\">// <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.<span class=\"keyword\">user</span>InteractionEnabled = YES; 需要的时候才打开</span><br><span class=\"line\"> [<span class=\"literal\">self</span>.view addSubview:<span class=\"literal\">self</span>.panel];</span><br></pre></td></tr></table></figure>\n<p>下面计算一下高度，当采用默认字体的时候，字体号为17，其高度约为20, 字体为14的时候，高度约为16~17之间</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字体号：<span class=\"number\">17</span> ，文本高：<span class=\"number\">20</span></span><br><span class=\"line\">字体号：<span class=\"number\">16</span> ，文本高：<span class=\"number\">19</span></span><br><span class=\"line\">字体号：<span class=\"number\">15</span> ，文本高：<span class=\"number\">17</span>~<span class=\"number\">18</span> 之间</span><br><span class=\"line\">字体号：<span class=\"number\">14</span>， 文本高：<span class=\"number\">16</span>~<span class=\"number\">17</span> 之间</span><br></pre></td></tr></table></figure>\n<p>这些字体是默认字体，要是采用其他字体或者设置粗体 ，估计值会受到一些浮动影响。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span> getTextHeight:<span class=\"number\">17</span> width:<span class=\"keyword\">self</span>.view.frame.size.width<span class=\"number\">-85</span>];   </span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) getTextHeight:(<span class=\"built_in\">CGFloat</span>) fontSize width:(<span class=\"built_in\">CGFloat</span>) textWidth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dic =@&#123;<span class=\"built_in\">NSFontAttributeName</span>:[<span class=\"built_in\">UIFont</span> systemFontOfSize:fontSize]&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">CGSize</span> curSize = <span class=\"built_in\">CGSizeMake</span>(textWidth, MAXFLOAT);</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect =   [<span class=\"keyword\">self</span>.label.text boundingRectWithSize:curSize</span><br><span class=\"line\">                                                  options:<span class=\"built_in\">NSStringDrawingUsesLineFragmentOrigin</span>|<span class=\"built_in\">NSStringDrawingUsesFontLeading</span></span><br><span class=\"line\">                                               attributes:dic context:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *str = <span class=\"built_in\">NSStringFromCGRect</span>(rect);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>UILable 的用法涉及内容有如下</p>\n<ol>\n<li>创建与显示</li>\n<li>文本内容和字体设置</li>\n<li>背景颜色指定</li>\n<li>计算高度。</li>\n<li>行数指定和计算</li>\n</ol>\n<p>UIlabel可以显示指定的行数，设置numberOfLines =0 则为不限制行数，因为UIlabel不是Icontrol的方面，没有addTarget和block等方法处理相应的行为机制，但支持扩展手势触控等方法处理点击，不过对于html 超链接响应情况，在之前看过是需要采用第三方处理机制处理。</p>\n<p>在日常使用过程，对于文本方法计算高度的用法很常用，ios提供相应计算方法。如属于NSString的类别（NSStringDrawing.h）该类为此提供相应处理解决方案，提供计算高度和文本大小的方法。<br>\n注意到 过去ios6的版本 提供sizeWithFont方法 在ios 7.0 已经不生效，需要改成其他方法处理。boundingRectWithSize 后续推荐的方式。</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"params\">(CGSize)</span>sizeWithAttributes:<span class=\"params\">(NSDictionary *)</span>attrs NS_AVAILABLE_IOS<span class=\"params\">(<span class=\"number\">7</span>_0)</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"params\">(CGRect)</span>boundingRectWithSize:<span class=\"params\">(CGSize)</span>size options:<span class=\"params\">(NSStringDrawingOptions)</span>options attributes:<span class=\"params\">(NSDictionary *)</span>attributes context:<span class=\"params\">(NSStringDrawingContext *)</span>context NS_AVAILABLE_IOS<span class=\"params\">(<span class=\"number\">7</span>_0)</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span> = [[UILabel alloc]initWithFrame:CGRectMake(<span class=\"number\">85</span>, <span class=\"number\">0</span>, <span class=\"literal\">self</span>.view.frame.size.width-<span class=\"number\">85</span>, <span class=\"number\">70</span>)];</span><br><span class=\"line\"> [<span class=\"literal\">self</span>.panel addSubview:<span class=\"literal\">self</span>.<span class=\"keyword\">label</span>];</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.text = @<span class=\"string\">\"这个人很懒，什么都没留下\"</span>;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.numberOfLines = <span class=\"number\">3</span>;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.lineBreakMode = NSLineBreakByCharWrapping;</span><br><span class=\"line\"> <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.font =[UIFont systemFontOfSize:<span class=\"number\">14</span>];</span><br><span class=\"line\">// <span class=\"literal\">self</span>.<span class=\"keyword\">label</span>.<span class=\"keyword\">user</span>InteractionEnabled = YES; 需要的时候才打开</span><br><span class=\"line\"> [<span class=\"literal\">self</span>.view addSubview:<span class=\"literal\">self</span>.panel];</span><br></pre></td></tr></table></figure>\n<p>下面计算一下高度，当采用默认字体的时候，字体号为17，其高度约为20, 字体为14的时候，高度约为16~17之间</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字体号：<span class=\"number\">17</span> ，文本高：<span class=\"number\">20</span></span><br><span class=\"line\">字体号：<span class=\"number\">16</span> ，文本高：<span class=\"number\">19</span></span><br><span class=\"line\">字体号：<span class=\"number\">15</span> ，文本高：<span class=\"number\">17</span>~<span class=\"number\">18</span> 之间</span><br><span class=\"line\">字体号：<span class=\"number\">14</span>， 文本高：<span class=\"number\">16</span>~<span class=\"number\">17</span> 之间</span><br></pre></td></tr></table></figure>\n<p>这些字体是默认字体，要是采用其他字体或者设置粗体 ，估计值会受到一些浮动影响。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">self</span> getTextHeight:<span class=\"number\">17</span> width:<span class=\"keyword\">self</span>.view.frame.size.width<span class=\"number\">-85</span>];   </span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) getTextHeight:(<span class=\"built_in\">CGFloat</span>) fontSize width:(<span class=\"built_in\">CGFloat</span>) textWidth</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSDictionary</span> *dic =@&#123;<span class=\"built_in\">NSFontAttributeName</span>:[<span class=\"built_in\">UIFont</span> systemFontOfSize:fontSize]&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">CGSize</span> curSize = <span class=\"built_in\">CGSizeMake</span>(textWidth, MAXFLOAT);</span><br><span class=\"line\">    <span class=\"built_in\">CGRect</span> rect =   [<span class=\"keyword\">self</span>.label.text boundingRectWithSize:curSize</span><br><span class=\"line\">                                                  options:<span class=\"built_in\">NSStringDrawingUsesLineFragmentOrigin</span>|<span class=\"built_in\">NSStringDrawingUsesFontLeading</span></span><br><span class=\"line\">                                               attributes:dic context:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">NSString</span> *str = <span class=\"built_in\">NSStringFromCGRect</span>(rect);</span><br><span class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,str);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"iPhone开发-UIImage,CIImage,CGImageRef","date":"2017-11-15T12:47:08.000Z","_content":"\nUIImage 有很多有用的东西，前段时间接触了coreImage的API，发现有一个CIImage的东西，同样还有一个CGImage的东西，这三者总是可以切换起来，多少让人觉得这个东西很能耐。\nIOS编程揭秘 书中记录着如下一段话。\n\n```\nUIImage类的Core Graphics\n版本是CGImage（CGImageRef）这两个类之间很容易进行转换，因为一个UIImage类有一个CGImage的属性“\n```\n\n<!-- more -->\n\n### 1.创建过程\nUIImage 常规创建过程\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\n```\nCGImage的创建过程\n```\nCGImageRef imageRef = CGImageCreateWithImageInRect(image.CGImage,CGRectMake(0,0,size.width,size.height));\n\n```\n或者\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\nCGImageRef imageRef = [image CGImage];\n```\n\nCIImage的创建过程\n\n```\nNSString *path = [[NSBundle mainBundle] pathForResource:@\"bbg\" ofType:@\"jpg\"];\nNSURL *myURL = [NSURL fileURLWithPath:path];\n\nCIImage *ciImage = [CIImage imageWithContentsOfURL:myURL];\n```\n\n### 2.相互转换\n\nUIImage， CGImageRef， CIImage 三者之间可以通过一些联系进行转换\n\n#### 2.1 UIImage 转换CGImageRef\nUIImage 类当中包含了CGImage的属性，所以很方便地就能转换，方法如下\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\nCGImageRef imageRef = [image CGImage];\n```\n\n#### 2.2 CGImageRef 转换UIImage\nUIImage里面包含了一个方法imageWithCGImage，如果知道了CGImage，则这样子也可以创建得到UIIamge类，在上面我们可以看到关系 UIImage 通过属性得到CGImageRef，同样地两者也可以关联起来。\n\nUIImage—>CGImageRef\nCGImageRef –> UIImage\n\n```\nUIImage *uiImage =[UIImage imageWithCGImage:cgImage];\n```\n#### 2.3 CIImage 转换CGImageRef\nCIContext 当中有一个方法createCGImage，可以创建得到CGImageRef，换句话可知道CIImage 可以通过其他方式转换CGImageRef\n```\nCIContext *context = [CIContext contextWithOptions:nil];                \n CIImage *ciImage = [CIImage imageWithContentsOfURL:myURL];                \n filter = [filterWithName:@\"CISepiaTone\"];            \n [filter setValue:ciImage forKey:kCIInputImageKey];\n [filter setValue:@0.8f forKey:kCIInputIntensityKey];\n CIImage *outputImg = [filter outputImage];   \n CGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];\n```\n\n最主要的一句\n```\nCGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];\n\n```\n\n#### 2.4 UIImage 转换CIImage\n```\nCIImage  *ciImage = [UIImage imageNamed:@\"test.png\"].CIImage\nUIImage *image = [[UIImage alloc] initWithCIImage:ciImage];\n```\n\n但是采用这种方式转换，CIImage的值会是nil，\n相反 采用CIImage 的initWithCGImage初始化的方式 则有值，很奇怪\n```\nUIImage *image = [UIImage imageNamed:@\"test.png\"];\nCIImage *ciImage = [[CIImage alloc]initWithCGImage:image.CGImage];\n```\n由此可见，三者都可以实现转换了，通过直接或者间接把他们联系起来。\nUIImage –> CGImageRef –> CIImage\nUIImage <– CGImageRef <– CIImage\n","source":"_posts/iPhone开发-UIImage-CIImage-CGImageRef.md","raw":"---\ntitle: 'iPhone开发-UIImage,CIImage,CGImageRef'\ndate: 2017-11-15 20:47:08\ntags: [ios]\ncategories: ios\n---\n\nUIImage 有很多有用的东西，前段时间接触了coreImage的API，发现有一个CIImage的东西，同样还有一个CGImage的东西，这三者总是可以切换起来，多少让人觉得这个东西很能耐。\nIOS编程揭秘 书中记录着如下一段话。\n\n```\nUIImage类的Core Graphics\n版本是CGImage（CGImageRef）这两个类之间很容易进行转换，因为一个UIImage类有一个CGImage的属性“\n```\n\n<!-- more -->\n\n### 1.创建过程\nUIImage 常规创建过程\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\n```\nCGImage的创建过程\n```\nCGImageRef imageRef = CGImageCreateWithImageInRect(image.CGImage,CGRectMake(0,0,size.width,size.height));\n\n```\n或者\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\nCGImageRef imageRef = [image CGImage];\n```\n\nCIImage的创建过程\n\n```\nNSString *path = [[NSBundle mainBundle] pathForResource:@\"bbg\" ofType:@\"jpg\"];\nNSURL *myURL = [NSURL fileURLWithPath:path];\n\nCIImage *ciImage = [CIImage imageWithContentsOfURL:myURL];\n```\n\n### 2.相互转换\n\nUIImage， CGImageRef， CIImage 三者之间可以通过一些联系进行转换\n\n#### 2.1 UIImage 转换CGImageRef\nUIImage 类当中包含了CGImage的属性，所以很方便地就能转换，方法如下\n```\nUIImage *image =[ UIImage imageNamed:@\"xx.png\"];\nCGImageRef imageRef = [image CGImage];\n```\n\n#### 2.2 CGImageRef 转换UIImage\nUIImage里面包含了一个方法imageWithCGImage，如果知道了CGImage，则这样子也可以创建得到UIIamge类，在上面我们可以看到关系 UIImage 通过属性得到CGImageRef，同样地两者也可以关联起来。\n\nUIImage—>CGImageRef\nCGImageRef –> UIImage\n\n```\nUIImage *uiImage =[UIImage imageWithCGImage:cgImage];\n```\n#### 2.3 CIImage 转换CGImageRef\nCIContext 当中有一个方法createCGImage，可以创建得到CGImageRef，换句话可知道CIImage 可以通过其他方式转换CGImageRef\n```\nCIContext *context = [CIContext contextWithOptions:nil];                \n CIImage *ciImage = [CIImage imageWithContentsOfURL:myURL];                \n filter = [filterWithName:@\"CISepiaTone\"];            \n [filter setValue:ciImage forKey:kCIInputImageKey];\n [filter setValue:@0.8f forKey:kCIInputIntensityKey];\n CIImage *outputImg = [filter outputImage];   \n CGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];\n```\n\n最主要的一句\n```\nCGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];\n\n```\n\n#### 2.4 UIImage 转换CIImage\n```\nCIImage  *ciImage = [UIImage imageNamed:@\"test.png\"].CIImage\nUIImage *image = [[UIImage alloc] initWithCIImage:ciImage];\n```\n\n但是采用这种方式转换，CIImage的值会是nil，\n相反 采用CIImage 的initWithCGImage初始化的方式 则有值，很奇怪\n```\nUIImage *image = [UIImage imageNamed:@\"test.png\"];\nCIImage *ciImage = [[CIImage alloc]initWithCGImage:image.CGImage];\n```\n由此可见，三者都可以实现转换了，通过直接或者间接把他们联系起来。\nUIImage –> CGImageRef –> CIImage\nUIImage <– CGImageRef <– CIImage\n","slug":"iPhone开发-UIImage-CIImage-CGImageRef","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfp004asify1tqqqsi4","content":"<p>UIImage 有很多有用的东西，前段时间接触了coreImage的API，发现有一个CIImage的东西，同样还有一个CGImage的东西，这三者总是可以切换起来，多少让人觉得这个东西很能耐。<br>\nIOS编程揭秘 书中记录着如下一段话。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span>类的Core Graphics</span><br><span class=\"line\">版本是<span class=\"built_in\">CGImage</span>（<span class=\"built_in\">CGImageRef</span>）这两个类之间很容易进行转换，因为一个<span class=\"built_in\">UIImage</span>类有一个<span class=\"built_in\">CGImage</span>的属性“</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"1创建过程\"><a class=\"markdownIt-Anchor\" href=\"#1创建过程\"></a> 1.创建过程</h3>\n<p>UIImage 常规创建过程</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br></pre></td></tr></table></figure>\n<p>CGImage的创建过程</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGImageRef imageRef = <span class=\"constructor\">CGImageCreateWithImageInRect(<span class=\"params\">image</span>.CGImage,CGRectMake(0,0,<span class=\"params\">size</span>.<span class=\"params\">width</span>,<span class=\"params\">size</span>.<span class=\"params\">height</span>)</span>);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGImageRef</span> imageRef = [image <span class=\"built_in\">CGImage</span>];</span><br></pre></td></tr></table></figure>\n<p>CIImage的创建过程</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"bbg\"</span> ofType:<span class=\"string\">@\"jpg\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *myURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:path];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">CIImage</span> *ciImage = [<span class=\"built_in\">CIImage</span> imageWithContentsOfURL:myURL];</span><br></pre></td></tr></table></figure>\n<h3 id=\"2相互转换\"><a class=\"markdownIt-Anchor\" href=\"#2相互转换\"></a> 2.相互转换</h3>\n<p>UIImage， CGImageRef， CIImage 三者之间可以通过一些联系进行转换</p>\n<h4 id=\"21-uiimage-转换cgimageref\"><a class=\"markdownIt-Anchor\" href=\"#21-uiimage-转换cgimageref\"></a> 2.1 UIImage 转换CGImageRef</h4>\n<p>UIImage 类当中包含了CGImage的属性，所以很方便地就能转换，方法如下</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGImageRef</span> imageRef = [image <span class=\"built_in\">CGImage</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"22-cgimageref-转换uiimage\"><a class=\"markdownIt-Anchor\" href=\"#22-cgimageref-转换uiimage\"></a> 2.2 CGImageRef 转换UIImage</h4>\n<p>UIImage里面包含了一个方法imageWithCGImage，如果知道了CGImage，则这样子也可以创建得到UIIamge类，在上面我们可以看到关系 UIImage 通过属性得到CGImageRef，同样地两者也可以关联起来。</p>\n<p>UIImage—&gt;CGImageRef<br>\nCGImageRef –&gt; UIImage</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *uiImage =[<span class=\"built_in\">UIImage</span> imageWithCGImage:cgImage];</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-ciimage-转换cgimageref\"><a class=\"markdownIt-Anchor\" href=\"#23-ciimage-转换cgimageref\"></a> 2.3 CIImage 转换CGImageRef</h4>\n<p>CIContext 当中有一个方法createCGImage，可以创建得到CGImageRef，换句话可知道CIImage 可以通过其他方式转换CGImageRef</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CIContext <span class=\"number\">*c</span>ontext = [CIContext contextWithOptions:nil];                </span><br><span class=\"line\"> CIImage <span class=\"number\">*c</span>iImage = [CIImage imageWithContentsOfURL:myURL];                </span><br><span class=\"line\"><span class=\"built_in\"> filter </span>= [filterWithName:@<span class=\"string\">\"CISepiaTone\"</span>];            </span><br><span class=\"line\"> [filter setValue:ciImage forKey:kCIInputImageKey];</span><br><span class=\"line\"> [filter setValue:@0.8f forKey:kCIInputIntensityKey];</span><br><span class=\"line\"> CIImage *outputImg = [filter outputImage];   </span><br><span class=\"line\"> CGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure>\n<p>最主要的一句</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">CGImageRef cgImage</span> = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-uiimage-转换ciimage\"><a class=\"markdownIt-Anchor\" href=\"#24-uiimage-转换ciimage\"></a> 2.4 UIImage 转换CIImage</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CIImage</span>  *ciImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"test.png\"</span>].CIImage</span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = [[<span class=\"built_in\">UIImage</span> alloc] initWithCIImage:ciImage];</span><br></pre></td></tr></table></figure>\n<p>但是采用这种方式转换，CIImage的值会是nil，<br>\n相反 采用CIImage 的initWithCGImage初始化的方式 则有值，很奇怪</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"test.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CIImage</span> *ciImage = [[<span class=\"built_in\">CIImage</span> alloc]initWithCGImage:image.CGImage];</span><br></pre></td></tr></table></figure>\n<p>由此可见，三者都可以实现转换了，通过直接或者间接把他们联系起来。<br>\nUIImage –&gt; CGImageRef –&gt; CIImage<br>\nUIImage &lt;– CGImageRef &lt;– CIImage</p>\n","site":{"data":{}},"excerpt":"<p>UIImage 有很多有用的东西，前段时间接触了coreImage的API，发现有一个CIImage的东西，同样还有一个CGImage的东西，这三者总是可以切换起来，多少让人觉得这个东西很能耐。<br>\nIOS编程揭秘 书中记录着如下一段话。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span>类的Core Graphics</span><br><span class=\"line\">版本是<span class=\"built_in\">CGImage</span>（<span class=\"built_in\">CGImageRef</span>）这两个类之间很容易进行转换，因为一个<span class=\"built_in\">UIImage</span>类有一个<span class=\"built_in\">CGImage</span>的属性“</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"1创建过程\"><a class=\"markdownIt-Anchor\" href=\"#1创建过程\"></a> 1.创建过程</h3>\n<p>UIImage 常规创建过程</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br></pre></td></tr></table></figure>\n<p>CGImage的创建过程</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGImageRef imageRef = <span class=\"constructor\">CGImageCreateWithImageInRect(<span class=\"params\">image</span>.CGImage,CGRectMake(0,0,<span class=\"params\">size</span>.<span class=\"params\">width</span>,<span class=\"params\">size</span>.<span class=\"params\">height</span>)</span>);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGImageRef</span> imageRef = [image <span class=\"built_in\">CGImage</span>];</span><br></pre></td></tr></table></figure>\n<p>CIImage的创建过程</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"bbg\"</span> ofType:<span class=\"string\">@\"jpg\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *myURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:path];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">CIImage</span> *ciImage = [<span class=\"built_in\">CIImage</span> imageWithContentsOfURL:myURL];</span><br></pre></td></tr></table></figure>\n<h3 id=\"2相互转换\"><a class=\"markdownIt-Anchor\" href=\"#2相互转换\"></a> 2.相互转换</h3>\n<p>UIImage， CGImageRef， CIImage 三者之间可以通过一些联系进行转换</p>\n<h4 id=\"21-uiimage-转换cgimageref\"><a class=\"markdownIt-Anchor\" href=\"#21-uiimage-转换cgimageref\"></a> 2.1 UIImage 转换CGImageRef</h4>\n<p>UIImage 类当中包含了CGImage的属性，所以很方便地就能转换，方法如下</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image =[ <span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"xx.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CGImageRef</span> imageRef = [image <span class=\"built_in\">CGImage</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"22-cgimageref-转换uiimage\"><a class=\"markdownIt-Anchor\" href=\"#22-cgimageref-转换uiimage\"></a> 2.2 CGImageRef 转换UIImage</h4>\n<p>UIImage里面包含了一个方法imageWithCGImage，如果知道了CGImage，则这样子也可以创建得到UIIamge类，在上面我们可以看到关系 UIImage 通过属性得到CGImageRef，同样地两者也可以关联起来。</p>\n<p>UIImage—&gt;CGImageRef<br>\nCGImageRef –&gt; UIImage</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *uiImage =[<span class=\"built_in\">UIImage</span> imageWithCGImage:cgImage];</span><br></pre></td></tr></table></figure>\n<h4 id=\"23-ciimage-转换cgimageref\"><a class=\"markdownIt-Anchor\" href=\"#23-ciimage-转换cgimageref\"></a> 2.3 CIImage 转换CGImageRef</h4>\n<p>CIContext 当中有一个方法createCGImage，可以创建得到CGImageRef，换句话可知道CIImage 可以通过其他方式转换CGImageRef</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CIContext <span class=\"number\">*c</span>ontext = [CIContext contextWithOptions:nil];                </span><br><span class=\"line\"> CIImage <span class=\"number\">*c</span>iImage = [CIImage imageWithContentsOfURL:myURL];                </span><br><span class=\"line\"><span class=\"built_in\"> filter </span>= [filterWithName:@<span class=\"string\">\"CISepiaTone\"</span>];            </span><br><span class=\"line\"> [filter setValue:ciImage forKey:kCIInputImageKey];</span><br><span class=\"line\"> [filter setValue:@0.8f forKey:kCIInputIntensityKey];</span><br><span class=\"line\"> CIImage *outputImg = [filter outputImage];   </span><br><span class=\"line\"> CGImageRef cgImage = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure>\n<p>最主要的一句</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">CGImageRef cgImage</span> = [context createCGImage:outputImg fromRect:[outputImg extent]];</span><br></pre></td></tr></table></figure>\n<h4 id=\"24-uiimage-转换ciimage\"><a class=\"markdownIt-Anchor\" href=\"#24-uiimage-转换ciimage\"></a> 2.4 UIImage 转换CIImage</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CIImage</span>  *ciImage = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"test.png\"</span>].CIImage</span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = [[<span class=\"built_in\">UIImage</span> alloc] initWithCIImage:ciImage];</span><br></pre></td></tr></table></figure>\n<p>但是采用这种方式转换，CIImage的值会是nil，<br>\n相反 采用CIImage 的initWithCGImage初始化的方式 则有值，很奇怪</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageNamed:<span class=\"string\">@\"test.png\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">CIImage</span> *ciImage = [[<span class=\"built_in\">CIImage</span> alloc]initWithCGImage:image.CGImage];</span><br></pre></td></tr></table></figure>\n<p>由此可见，三者都可以实现转换了，通过直接或者间接把他们联系起来。<br>\nUIImage –&gt; CGImageRef –&gt; CIImage<br>\nUIImage &lt;– CGImageRef &lt;– CIImage</p>"},{"title":"XCode 编写C++ 引用头文件无自动补全","date":"2020-10-13T04:19:30.000Z","_content":"\n### 如题:XCode 编写C++ 引用头文件无自动补全\n\n<!-- more -->\n\n在Mac写C++代码，最好的工具，无疑是XCode，在xcode中写c++代码时，调用系统方法或引用系统头文件时，有代码提示或自动补全能够使开发更快，更不容易出错。\n\n在Xcode 11写代码时，突然发现引入系统的头文件都没有提示。这个引起了我的好奇心，经过一顿操作和搜索，终于找到解决方案。\n\n```\n打开Xcode —> File —> Workspace Settings或者Project Settings 把界面上的build system的默认选项由\"New Build System(Default)\" 改为 \"Legacy Build System\"\n\n```\n\n","source":"_posts/XCode-编写C-引用头文件无自动补全.md","raw":"---\ntitle: XCode 编写C++ 引用头文件无自动补全\ndate: 2020-10-13 12:19:30\ntags: [xcode, c++]\ncategories: xcode\n---\n\n### 如题:XCode 编写C++ 引用头文件无自动补全\n\n<!-- more -->\n\n在Mac写C++代码，最好的工具，无疑是XCode，在xcode中写c++代码时，调用系统方法或引用系统头文件时，有代码提示或自动补全能够使开发更快，更不容易出错。\n\n在Xcode 11写代码时，突然发现引入系统的头文件都没有提示。这个引起了我的好奇心，经过一顿操作和搜索，终于找到解决方案。\n\n```\n打开Xcode —> File —> Workspace Settings或者Project Settings 把界面上的build system的默认选项由\"New Build System(Default)\" 改为 \"Legacy Build System\"\n\n```\n\n","slug":"XCode-编写C-引用头文件无自动补全","published":1,"updated":"2020-10-13T04:24:23.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfp004dsify3vp6440p","content":"<h3 id=\"如题xcode-编写c-引用头文件无自动补全\"><a class=\"markdownIt-Anchor\" href=\"#如题xcode-编写c-引用头文件无自动补全\"></a> 如题:XCode 编写C++ 引用头文件无自动补全</h3>\n<a id=\"more\"></a>\n<p>在Mac写C<ins>代码，最好的工具，无疑是XCode，在xcode中写c</ins>代码时，调用系统方法或引用系统头文件时，有代码提示或自动补全能够使开发更快，更不容易出错。</p>\n<p>在Xcode 11写代码时，突然发现引入系统的头文件都没有提示。这个引起了我的好奇心，经过一顿操作和搜索，终于找到解决方案。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开Xcode —&gt; File —&gt; Workspace Settings或者Project<span class=\"built_in\"> Settings </span>把界面上的build system的默认选项由<span class=\"string\">\"New Build System(Default)\"</span> 改为 <span class=\"string\">\"Legacy Build System\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"如题xcode-编写c-引用头文件无自动补全\"><a class=\"markdownIt-Anchor\" href=\"#如题xcode-编写c-引用头文件无自动补全\"></a> 如题:XCode 编写C++ 引用头文件无自动补全</h3>","more":"<p>在Mac写C<ins>代码，最好的工具，无疑是XCode，在xcode中写c</ins>代码时，调用系统方法或引用系统头文件时，有代码提示或自动补全能够使开发更快，更不容易出错。</p>\n<p>在Xcode 11写代码时，突然发现引入系统的头文件都没有提示。这个引起了我的好奇心，经过一顿操作和搜索，终于找到解决方案。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开Xcode —&gt; File —&gt; Workspace Settings或者Project<span class=\"built_in\"> Settings </span>把界面上的build system的默认选项由<span class=\"string\">\"New Build System(Default)\"</span> 改为 <span class=\"string\">\"Legacy Build System\"</span></span><br></pre></td></tr></table></figure>"},{"title":"linux下查看监听端口对应的进程","date":"2018-12-10T04:54:11.000Z","_content":"\n\n#### 方法一\n##### 1.通过lsof命令查看PID\n\n```\nipv4\n[root@test proc]# lsof -Pnl +M -i4          \nCOMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME\njava       1419     1401   10u  IPv4 6793357       TCP *:8453 (LISTEN)\nAutonomyD  6147     1401    6u  IPv4 7597365       TCP *:20003 (LISTEN)\nAutonomyD  6147     1401   14u  IPv4 7597369       TCP *:20000 (LISTEN)\n也可以使用:\n[root@test proc]# lsof -Pnl +M -i4|grep 8453\njava       1419     1401   10u  IPv4 6793357       TCP *:8453 (LISTEN)\n```\n```\nipv6\n[root@test proc]# lsof -Pnl +M -i6\nCOMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME\njava       1419     1401  286u  IPv6 7616547       TCP 192.168.1.29:55829->192.168.1.17:7001 (CLOSE_WAIT)\njava       1419     1401  290u  IPv6 6987470       TCP 192.168.1.29:33836->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  297u  IPv6 6793642       UDP *:1133 \njava       1419     1401  304u  IPv6 6987472       TCP 192.168.1.29:33838->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  306u  IPv6 6987479       TCP 192.168.1.29:33839->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  307u  IPv6 7006208       TCP 192.168.1.29:60340->192.168.1.154:1521 (ESTABLISHED)\n也可以使用:\n[root@test proc]# lsof -Pnl +M -i6|grep 5001\njava      12886        0  530u  IPv6 6988341       TCP *:5001 (LISTEN)\n```\n\n<!-- more -->\n##### 2.通过ps命令查看进程情况\n\n```\n[root@test proc]# ps -ef|grep 12886\nroot     12886 12851  0 Dec09 ?        00:00:43 /home/bjca/bea/jdk160_05/bin/java -client -Xms256m -Xmx512m -XX:CompileThreshold=8000 -XX:PermSize=48m -XX:MaxPermSize=128m -Xverify:none -da -Dplatform.home=/home/bjca/bea/wlserver_10.3 -Dwls.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.management.discover=true -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=/home/bjca/bea/patch_wlw1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_wls1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_cie660/profiles/default/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/home/bjca/bea/wlserver_10.3/server/lib/weblogic.policy weblogic.Server\n```\n##### 3.lsof命令参数解释\n* 1) -P :这个选项约束着网络文件的端口号到端口名称的转换。约束转换可以使lsof运行得更快一些。在端口名称的查找不能奏效时，这是很有用的。\n\n* 2) -n : 这个选项约束着网络文件的端口号到主机名称的转换。约束转换可以使lsof的运行更快一些。在主机名称的查找不能奏效时，它非常有用。\n\n* 3) -l :这个选项约束着用户ID号到登录名的转换。在登录名的查找不正确或很慢时，这个选项就很有用。\n\n* 4) +M :此选项支持本地TCP和UDP端口映射程序的注册报告。\n\n* 5) -i4 :仅列示IPv4协议下的端口。\n\n* 6) -i6 : 仅列示IPv6协议下的端口。\n\n#### 方法二：\n##### 1.使用netstat查看进程PID\n\n```\n[root@test ~]#  netstat -anp|grep 5001\ntcp        0      0 :::5001                     :::*                        LISTEN      12886/java \n```\n##### 2.使用ps查看进程情况\n\n```\n[root@test 12886]# ps -ef|grep 12886\nroot     12886 12851  0 Dec09 ?        00:01:14 /home/bjca/bea/jdk160_05/bin/java -client -Xms256m -Xmx512m -XX:CompileThreshold=8000 -XX:PermSize=48m -XX:MaxPermSize=128m -Xverify:none -da -Dplatform.home=/home/bjca/bea/wlserver_10.3 -Dwls.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.management.discover=true -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=/home/bjca/bea/patch_wlw1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_wls1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_cie660/profiles/default/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/home/bjca/bea/wlserver_10.3/server/lib/weblogic.policy weblogic.Server\nroot     27592 27546  0 09:11 pts/2    00:00:00 grep 12886\n```\n","source":"_posts/linux下查看监听端口对应的进程.md","raw":"---\ntitle: linux下查看监听端口对应的进程\ndate: 2018-12-10 12:54:11\ntags: [linux, process]\ncategories: linux\n---\n\n\n#### 方法一\n##### 1.通过lsof命令查看PID\n\n```\nipv4\n[root@test proc]# lsof -Pnl +M -i4          \nCOMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME\njava       1419     1401   10u  IPv4 6793357       TCP *:8453 (LISTEN)\nAutonomyD  6147     1401    6u  IPv4 7597365       TCP *:20003 (LISTEN)\nAutonomyD  6147     1401   14u  IPv4 7597369       TCP *:20000 (LISTEN)\n也可以使用:\n[root@test proc]# lsof -Pnl +M -i4|grep 8453\njava       1419     1401   10u  IPv4 6793357       TCP *:8453 (LISTEN)\n```\n```\nipv6\n[root@test proc]# lsof -Pnl +M -i6\nCOMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME\njava       1419     1401  286u  IPv6 7616547       TCP 192.168.1.29:55829->192.168.1.17:7001 (CLOSE_WAIT)\njava       1419     1401  290u  IPv6 6987470       TCP 192.168.1.29:33836->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  297u  IPv6 6793642       UDP *:1133 \njava       1419     1401  304u  IPv6 6987472       TCP 192.168.1.29:33838->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  306u  IPv6 6987479       TCP 192.168.1.29:33839->192.168.1.154:1521 (ESTABLISHED)\njava       1419     1401  307u  IPv6 7006208       TCP 192.168.1.29:60340->192.168.1.154:1521 (ESTABLISHED)\n也可以使用:\n[root@test proc]# lsof -Pnl +M -i6|grep 5001\njava      12886        0  530u  IPv6 6988341       TCP *:5001 (LISTEN)\n```\n\n<!-- more -->\n##### 2.通过ps命令查看进程情况\n\n```\n[root@test proc]# ps -ef|grep 12886\nroot     12886 12851  0 Dec09 ?        00:00:43 /home/bjca/bea/jdk160_05/bin/java -client -Xms256m -Xmx512m -XX:CompileThreshold=8000 -XX:PermSize=48m -XX:MaxPermSize=128m -Xverify:none -da -Dplatform.home=/home/bjca/bea/wlserver_10.3 -Dwls.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.management.discover=true -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=/home/bjca/bea/patch_wlw1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_wls1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_cie660/profiles/default/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/home/bjca/bea/wlserver_10.3/server/lib/weblogic.policy weblogic.Server\n```\n##### 3.lsof命令参数解释\n* 1) -P :这个选项约束着网络文件的端口号到端口名称的转换。约束转换可以使lsof运行得更快一些。在端口名称的查找不能奏效时，这是很有用的。\n\n* 2) -n : 这个选项约束着网络文件的端口号到主机名称的转换。约束转换可以使lsof的运行更快一些。在主机名称的查找不能奏效时，它非常有用。\n\n* 3) -l :这个选项约束着用户ID号到登录名的转换。在登录名的查找不正确或很慢时，这个选项就很有用。\n\n* 4) +M :此选项支持本地TCP和UDP端口映射程序的注册报告。\n\n* 5) -i4 :仅列示IPv4协议下的端口。\n\n* 6) -i6 : 仅列示IPv6协议下的端口。\n\n#### 方法二：\n##### 1.使用netstat查看进程PID\n\n```\n[root@test ~]#  netstat -anp|grep 5001\ntcp        0      0 :::5001                     :::*                        LISTEN      12886/java \n```\n##### 2.使用ps查看进程情况\n\n```\n[root@test 12886]# ps -ef|grep 12886\nroot     12886 12851  0 Dec09 ?        00:01:14 /home/bjca/bea/jdk160_05/bin/java -client -Xms256m -Xmx512m -XX:CompileThreshold=8000 -XX:PermSize=48m -XX:MaxPermSize=128m -Xverify:none -da -Dplatform.home=/home/bjca/bea/wlserver_10.3 -Dwls.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.home=/home/bjca/bea/wlserver_10.3/server -Dweblogic.management.discover=true -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=/home/bjca/bea/patch_wlw1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_wls1030/profiles/default/sysext_manifest_classpath:/home/bjca/bea/patch_cie660/profiles/default/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/home/bjca/bea/wlserver_10.3/server/lib/weblogic.policy weblogic.Server\nroot     27592 27546  0 09:11 pts/2    00:00:00 grep 12886\n```\n","slug":"linux下查看监听端口对应的进程","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfr004hsifyxfubf71r","content":"<h4 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\"></a> 方法一</h4>\n<h5 id=\"1通过lsof命令查看pid\"><a class=\"markdownIt-Anchor\" href=\"#1通过lsof命令查看pid\"></a> 1.通过lsof命令查看PID</h5>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv4</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>test proc]# lsof -Pnl +M -i4          </span><br><span class=\"line\">COMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME</span><br><span class=\"line\">java       <span class=\"number\">1419</span>     <span class=\"number\">1401</span>   <span class=\"number\">10</span>u  IPv4 <span class=\"number\">6793357</span>       TCP *:<span class=\"number\">8453</span> (LISTEN)</span><br><span class=\"line\">AutonomyD  <span class=\"number\">6147</span>     <span class=\"number\">1401</span>    <span class=\"number\">6</span>u  IPv4 <span class=\"number\">7597365</span>       TCP *:<span class=\"number\">20003</span> (LISTEN)</span><br><span class=\"line\">AutonomyD  <span class=\"number\">6147</span>     <span class=\"number\">1401</span>   <span class=\"number\">14</span>u  IPv4 <span class=\"number\">7597369</span>       TCP *:<span class=\"number\">20000</span> (LISTEN)</span><br><span class=\"line\">也可以使用:</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>test proc]# lsof -Pnl +M -i4|grep <span class=\"number\">8453</span></span><br><span class=\"line\">java       <span class=\"number\">1419</span>     <span class=\"number\">1401</span>   <span class=\"number\">10</span>u  IPv4 <span class=\"number\">6793357</span>       TCP *:<span class=\"number\">8453</span> (LISTEN)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6</span><br><span class=\"line\">[root@test proc]# lsof -Pnl +M -i6</span><br><span class=\"line\">COMMAND     PID    <span class=\"built_in\"> USER </span>  FD  <span class=\"built_in\"> TYPE </span> DEVICE SIZE NODE NAME</span><br><span class=\"line\">java       1419     1401  286u <span class=\"built_in\"> IPv6 </span>7616547       TCP 192.168.1.29:55829-&gt;192.168.1.17:7001 (CLOSE_WAIT)</span><br><span class=\"line\">java       1419     1401  290u <span class=\"built_in\"> IPv6 </span>6987470       TCP 192.168.1.29:33836-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  297u <span class=\"built_in\"> IPv6 </span>6793642       UDP *:1133 </span><br><span class=\"line\">java       1419     1401  304u <span class=\"built_in\"> IPv6 </span>6987472       TCP 192.168.1.29:33838-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  306u <span class=\"built_in\"> IPv6 </span>6987479       TCP 192.168.1.29:33839-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  307u <span class=\"built_in\"> IPv6 </span>7006208       TCP 192.168.1.29:60340-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">也可以使用:</span><br><span class=\"line\">[root@test proc]# lsof -Pnl +M -i6|grep 5001</span><br><span class=\"line\">java      12886        0  530u <span class=\"built_in\"> IPv6 </span>6988341       TCP *:5001 (LISTEN)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"2通过ps命令查看进程情况\"><a class=\"markdownIt-Anchor\" href=\"#2通过ps命令查看进程情况\"></a> 2.通过ps命令查看进程情况</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test proc]# ps -ef|<span class=\"keyword\">grep</span> <span class=\"number\">12886</span></span><br><span class=\"line\">root     <span class=\"number\">12886</span> <span class=\"number\">12851</span>  <span class=\"number\">0</span> Dec09 ?        <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">43</span> <span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>jdk160_05<span class=\"regexp\">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class=\"number\">8000</span> -XX:PermSize=<span class=\"number\">48</span>m -XX:MaxPermSize=<span class=\"number\">128</span>m -Xverify:none -da -Dplatform.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span> -Dwls.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span><span class=\"regexp\">/server -Dweblogic.home=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class=\"keyword\">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_wlw1030<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath:/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/patch_wls1030/</span>profiles<span class=\"regexp\">/default/</span>sysext_manifest_classpath:<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_cie660<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server<span class=\"regexp\">/lib/</span>weblogic.policy weblogic.Server</span><br></pre></td></tr></table></figure>\n<h5 id=\"3lsof命令参数解释\"><a class=\"markdownIt-Anchor\" href=\"#3lsof命令参数解释\"></a> 3.lsof命令参数解释</h5>\n<ul>\n<li>\n<ol>\n<li>-P :这个选项约束着网络文件的端口号到端口名称的转换。约束转换可以使lsof运行得更快一些。在端口名称的查找不能奏效时，这是很有用的。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>-n : 这个选项约束着网络文件的端口号到主机名称的转换。约束转换可以使lsof的运行更快一些。在主机名称的查找不能奏效时，它非常有用。</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>-l :这个选项约束着用户ID号到登录名的转换。在登录名的查找不正确或很慢时，这个选项就很有用。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>+M :此选项支持本地TCP和UDP端口映射程序的注册报告。</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>-i4 :仅列示IPv4协议下的端口。</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>-i6 : 仅列示IPv6协议下的端口。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\"></a> 方法二：</h4>\n<h5 id=\"1使用netstat查看进程pid\"><a class=\"markdownIt-Anchor\" href=\"#1使用netstat查看进程pid\"></a> 1.使用netstat查看进程PID</h5>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>test ~]#  netstat -anp|grep <span class=\"number\">5001</span></span><br><span class=\"line\">tcp        <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">5001</span>                     :::*                        LISTEN      <span class=\"number\">12886</span>/java</span><br></pre></td></tr></table></figure>\n<h5 id=\"2使用ps查看进程情况\"><a class=\"markdownIt-Anchor\" href=\"#2使用ps查看进程情况\"></a> 2.使用ps查看进程情况</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test <span class=\"number\">12886</span>]# ps -ef|<span class=\"keyword\">grep</span> <span class=\"number\">12886</span></span><br><span class=\"line\">root     <span class=\"number\">12886</span> <span class=\"number\">12851</span>  <span class=\"number\">0</span> Dec09 ?        <span class=\"number\">00</span>:<span class=\"number\">01</span>:<span class=\"number\">14</span> <span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>jdk160_05<span class=\"regexp\">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class=\"number\">8000</span> -XX:PermSize=<span class=\"number\">48</span>m -XX:MaxPermSize=<span class=\"number\">128</span>m -Xverify:none -da -Dplatform.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span> -Dwls.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span><span class=\"regexp\">/server -Dweblogic.home=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class=\"keyword\">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_wlw1030<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath:/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/patch_wls1030/</span>profiles<span class=\"regexp\">/default/</span>sysext_manifest_classpath:<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_cie660<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server<span class=\"regexp\">/lib/</span>weblogic.policy weblogic.Server</span><br><span class=\"line\">root     <span class=\"number\">27592</span> <span class=\"number\">27546</span>  <span class=\"number\">0</span> <span class=\"number\">09</span>:<span class=\"number\">11</span> pts<span class=\"regexp\">/2    00:00:00 grep 12886</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h4 id=\"方法一\"><a class=\"markdownIt-Anchor\" href=\"#方法一\"></a> 方法一</h4>\n<h5 id=\"1通过lsof命令查看pid\"><a class=\"markdownIt-Anchor\" href=\"#1通过lsof命令查看pid\"></a> 1.通过lsof命令查看PID</h5>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv4</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>test proc]# lsof -Pnl +M -i4          </span><br><span class=\"line\">COMMAND     PID     USER   FD   TYPE  DEVICE SIZE NODE NAME</span><br><span class=\"line\">java       <span class=\"number\">1419</span>     <span class=\"number\">1401</span>   <span class=\"number\">10</span>u  IPv4 <span class=\"number\">6793357</span>       TCP *:<span class=\"number\">8453</span> (LISTEN)</span><br><span class=\"line\">AutonomyD  <span class=\"number\">6147</span>     <span class=\"number\">1401</span>    <span class=\"number\">6</span>u  IPv4 <span class=\"number\">7597365</span>       TCP *:<span class=\"number\">20003</span> (LISTEN)</span><br><span class=\"line\">AutonomyD  <span class=\"number\">6147</span>     <span class=\"number\">1401</span>   <span class=\"number\">14</span>u  IPv4 <span class=\"number\">7597369</span>       TCP *:<span class=\"number\">20000</span> (LISTEN)</span><br><span class=\"line\">也可以使用:</span><br><span class=\"line\">[<span class=\"symbol\">root@</span>test proc]# lsof -Pnl +M -i4|grep <span class=\"number\">8453</span></span><br><span class=\"line\">java       <span class=\"number\">1419</span>     <span class=\"number\">1401</span>   <span class=\"number\">10</span>u  IPv4 <span class=\"number\">6793357</span>       TCP *:<span class=\"number\">8453</span> (LISTEN)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipv6</span><br><span class=\"line\">[root@test proc]# lsof -Pnl +M -i6</span><br><span class=\"line\">COMMAND     PID    <span class=\"built_in\"> USER </span>  FD  <span class=\"built_in\"> TYPE </span> DEVICE SIZE NODE NAME</span><br><span class=\"line\">java       1419     1401  286u <span class=\"built_in\"> IPv6 </span>7616547       TCP 192.168.1.29:55829-&gt;192.168.1.17:7001 (CLOSE_WAIT)</span><br><span class=\"line\">java       1419     1401  290u <span class=\"built_in\"> IPv6 </span>6987470       TCP 192.168.1.29:33836-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  297u <span class=\"built_in\"> IPv6 </span>6793642       UDP *:1133 </span><br><span class=\"line\">java       1419     1401  304u <span class=\"built_in\"> IPv6 </span>6987472       TCP 192.168.1.29:33838-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  306u <span class=\"built_in\"> IPv6 </span>6987479       TCP 192.168.1.29:33839-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">java       1419     1401  307u <span class=\"built_in\"> IPv6 </span>7006208       TCP 192.168.1.29:60340-&gt;192.168.1.154:1521 (ESTABLISHED)</span><br><span class=\"line\">也可以使用:</span><br><span class=\"line\">[root@test proc]# lsof -Pnl +M -i6|grep 5001</span><br><span class=\"line\">java      12886        0  530u <span class=\"built_in\"> IPv6 </span>6988341       TCP *:5001 (LISTEN)</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"2通过ps命令查看进程情况\"><a class=\"markdownIt-Anchor\" href=\"#2通过ps命令查看进程情况\"></a> 2.通过ps命令查看进程情况</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test proc]# ps -ef|<span class=\"keyword\">grep</span> <span class=\"number\">12886</span></span><br><span class=\"line\">root     <span class=\"number\">12886</span> <span class=\"number\">12851</span>  <span class=\"number\">0</span> Dec09 ?        <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">43</span> <span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>jdk160_05<span class=\"regexp\">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class=\"number\">8000</span> -XX:PermSize=<span class=\"number\">48</span>m -XX:MaxPermSize=<span class=\"number\">128</span>m -Xverify:none -da -Dplatform.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span> -Dwls.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span><span class=\"regexp\">/server -Dweblogic.home=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class=\"keyword\">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_wlw1030<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath:/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/patch_wls1030/</span>profiles<span class=\"regexp\">/default/</span>sysext_manifest_classpath:<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_cie660<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server<span class=\"regexp\">/lib/</span>weblogic.policy weblogic.Server</span><br></pre></td></tr></table></figure>\n<h5 id=\"3lsof命令参数解释\"><a class=\"markdownIt-Anchor\" href=\"#3lsof命令参数解释\"></a> 3.lsof命令参数解释</h5>\n<ul>\n<li>\n<ol>\n<li>-P :这个选项约束着网络文件的端口号到端口名称的转换。约束转换可以使lsof运行得更快一些。在端口名称的查找不能奏效时，这是很有用的。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>-n : 这个选项约束着网络文件的端口号到主机名称的转换。约束转换可以使lsof的运行更快一些。在主机名称的查找不能奏效时，它非常有用。</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>-l :这个选项约束着用户ID号到登录名的转换。在登录名的查找不正确或很慢时，这个选项就很有用。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>+M :此选项支持本地TCP和UDP端口映射程序的注册报告。</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>-i4 :仅列示IPv4协议下的端口。</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>-i6 : 仅列示IPv6协议下的端口。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"方法二\"><a class=\"markdownIt-Anchor\" href=\"#方法二\"></a> 方法二：</h4>\n<h5 id=\"1使用netstat查看进程pid\"><a class=\"markdownIt-Anchor\" href=\"#1使用netstat查看进程pid\"></a> 1.使用netstat查看进程PID</h5>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"symbol\">root@</span>test ~]#  netstat -anp|grep <span class=\"number\">5001</span></span><br><span class=\"line\">tcp        <span class=\"number\">0</span>      <span class=\"number\">0</span> :::<span class=\"number\">5001</span>                     :::*                        LISTEN      <span class=\"number\">12886</span>/java</span><br></pre></td></tr></table></figure>\n<h5 id=\"2使用ps查看进程情况\"><a class=\"markdownIt-Anchor\" href=\"#2使用ps查看进程情况\"></a> 2.使用ps查看进程情况</h5>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@test <span class=\"number\">12886</span>]# ps -ef|<span class=\"keyword\">grep</span> <span class=\"number\">12886</span></span><br><span class=\"line\">root     <span class=\"number\">12886</span> <span class=\"number\">12851</span>  <span class=\"number\">0</span> Dec09 ?        <span class=\"number\">00</span>:<span class=\"number\">01</span>:<span class=\"number\">14</span> <span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>jdk160_05<span class=\"regexp\">/bin/</span>java -client -Xms256m -Xmx512m -XX:CompileThreshold=<span class=\"number\">8000</span> -XX:PermSize=<span class=\"number\">48</span>m -XX:MaxPermSize=<span class=\"number\">128</span>m -Xverify:none -da -Dplatform.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span> -Dwls.home=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>wlserver_10.<span class=\"number\">3</span><span class=\"regexp\">/server -Dweblogic.home=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server -Dweblogic.management.discover=<span class=\"keyword\">true</span> -Dwlw.iterativeDev= -Dwlw.testConsole= -Dwlw.logErrorsToConsole= -Dweblogic.ext.dirs=<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_wlw1030<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath:/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/patch_wls1030/</span>profiles<span class=\"regexp\">/default/</span>sysext_manifest_classpath:<span class=\"regexp\">/home/</span>bjca<span class=\"regexp\">/bea/</span>patch_cie660<span class=\"regexp\">/profiles/</span><span class=\"keyword\">default</span><span class=\"regexp\">/sysext_manifest_classpath -Dweblogic.Name=AdminServer -Djava.security.policy=/</span>home<span class=\"regexp\">/bjca/</span>bea<span class=\"regexp\">/wlserver_10.3/</span>server<span class=\"regexp\">/lib/</span>weblogic.policy weblogic.Server</span><br><span class=\"line\">root     <span class=\"number\">27592</span> <span class=\"number\">27546</span>  <span class=\"number\">0</span> <span class=\"number\">09</span>:<span class=\"number\">11</span> pts<span class=\"regexp\">/2    00:00:00 grep 12886</span></span><br></pre></td></tr></table></figure>"},{"title":"linux添加service服务，设置自启动","date":"2020-11-19T02:35:52.000Z","_content":"\nlinux添加service服务，设置自启动\n\n<!-- more -->\n\n例如：注册一个oa-server的服务\n创建文件： 在`/etc/init.d/oa-server`\n\n```\n#!/bin/sh\n# chkconfig: 2345 80 90\n# description: oa-server register server\n\ncase \"$1\" in\n\t\tstart)\n\t\t\tsh /usr/local/idea/start.sh\n\t\t\t;;\n\t\tstop)\n\t\t\tps -ef | grep oa-server | grep -v grep | awk '{print $2}' | xargs kill\n\nesac\n```\n\n- 注意: `#chkconfig, #description 不要少，设置自启动需要`.\n\n\n\n\n\n服务启动: service oa-server start\n\n服务关闭: service oa-server shutdown\n\n设置自启: chkconfig oa-server on\n\n关闭自启: chkconfig oa-server off\n","source":"_posts/linux添加service服务，设置自启动.md","raw":"---\ntitle: linux添加service服务，设置自启动\ndate: 2020-11-19 10:35:52\ntags: [linux]\ncategories: linux\n---\n\nlinux添加service服务，设置自启动\n\n<!-- more -->\n\n例如：注册一个oa-server的服务\n创建文件： 在`/etc/init.d/oa-server`\n\n```\n#!/bin/sh\n# chkconfig: 2345 80 90\n# description: oa-server register server\n\ncase \"$1\" in\n\t\tstart)\n\t\t\tsh /usr/local/idea/start.sh\n\t\t\t;;\n\t\tstop)\n\t\t\tps -ef | grep oa-server | grep -v grep | awk '{print $2}' | xargs kill\n\nesac\n```\n\n- 注意: `#chkconfig, #description 不要少，设置自启动需要`.\n\n\n\n\n\n服务启动: service oa-server start\n\n服务关闭: service oa-server shutdown\n\n设置自启: chkconfig oa-server on\n\n关闭自启: chkconfig oa-server off\n","slug":"linux添加service服务，设置自启动","published":1,"updated":"2020-11-19T03:52:20.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfs004jsifyz9e2j2e4","content":"<p>linux添加service服务，设置自启动</p>\n<a id=\"more\"></a>\n<p>例如：注册一个oa-server的服务<br>\n创建文件： 在<code>/etc/init.d/oa-server</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 80 90</span></span><br><span class=\"line\"><span class=\"comment\"># description: oa-server register server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tsh /usr/<span class=\"built_in\">local</span>/idea/start.sh</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tps -ef | grep oa-server | grep -v grep | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意: <code>#chkconfig, #description 不要少，设置自启动需要</code>.</li>\n</ul>\n<p>服务启动: service oa-server start</p>\n<p>服务关闭: service oa-server shutdown</p>\n<p>设置自启: chkconfig oa-server on</p>\n<p>关闭自启: chkconfig oa-server off</p>\n","site":{"data":{}},"excerpt":"<p>linux添加service服务，设置自启动</p>","more":"<p>例如：注册一个oa-server的服务<br>\n创建文件： 在<code>/etc/init.d/oa-server</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># chkconfig: 2345 80 90</span></span><br><span class=\"line\"><span class=\"comment\"># description: oa-server register server</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\tstart)</span><br><span class=\"line\">\t\t\tsh /usr/<span class=\"built_in\">local</span>/idea/start.sh</span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\tstop)</span><br><span class=\"line\">\t\t\tps -ef | grep oa-server | grep -v grep | awk <span class=\"string\">'&#123;print $2&#125;'</span> | xargs <span class=\"built_in\">kill</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意: <code>#chkconfig, #description 不要少，设置自启动需要</code>.</li>\n</ul>\n<p>服务启动: service oa-server start</p>\n<p>服务关闭: service oa-server shutdown</p>\n<p>设置自启: chkconfig oa-server on</p>\n<p>关闭自启: chkconfig oa-server off</p>"},{"title":"iPhone开发-截屏","date":"2017-11-15T12:23:09.000Z","_content":"iPhone 截屏并本地存储\n\n使用UIGraphicsBeginImageContext 相关绘图API 获取到图像信息，使用UIImageWriteToSavedPhotosAlbum 方法就可以保存到相关的库里面去\n\n```\nUIWindow *window =[UIApplication sharedApplication].keyWindow;\nUIGraphicsBeginImageContext(window.frame.size);\n[window.layer renderInContext:UIGraphicsGetCurrentContext()];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nUIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);\n\n-(void) image:(UIImage *) image didFinishSavingWithError:(NSError *) error contextInfo:(void *) contextInfo\n{\n    if (error != NULL)\n    {\n        NSLog(@\"保存失败\");\n    }\n    else\n    {\n        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"保存成功！\" delegate:nil cancelButtonTitle:@\"确定\" otherButtonTitles:nil, nil];\n        [alertView show];\n    }\n\n}\n\n```\n","source":"_posts/iPhone开发-截屏.md","raw":"---\ntitle: iPhone开发-截屏\ndate: 2017-11-15 20:23:09\ntags: [ios]\ncategories: ios\n---\niPhone 截屏并本地存储\n\n使用UIGraphicsBeginImageContext 相关绘图API 获取到图像信息，使用UIImageWriteToSavedPhotosAlbum 方法就可以保存到相关的库里面去\n\n```\nUIWindow *window =[UIApplication sharedApplication].keyWindow;\nUIGraphicsBeginImageContext(window.frame.size);\n[window.layer renderInContext:UIGraphicsGetCurrentContext()];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nUIImageWriteToSavedPhotosAlbum(image, self, @selector(image:didFinishSavingWithError:contextInfo:), nil);\n\n-(void) image:(UIImage *) image didFinishSavingWithError:(NSError *) error contextInfo:(void *) contextInfo\n{\n    if (error != NULL)\n    {\n        NSLog(@\"保存失败\");\n    }\n    else\n    {\n        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"保存成功！\" delegate:nil cancelButtonTitle:@\"确定\" otherButtonTitles:nil, nil];\n        [alertView show];\n    }\n\n}\n\n```\n","slug":"iPhone开发-截屏","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfs004osifyesuvhryx","content":"<p>iPhone 截屏并本地存储</p>\n<p>使用UIGraphicsBeginImageContext 相关绘图API 获取到图像信息，使用UIImageWriteToSavedPhotosAlbum 方法就可以保存到相关的库里面去</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWindow</span> *window =[<span class=\"built_in\">UIApplication</span> sharedApplication].keyWindow;</span><br><span class=\"line\"><span class=\"built_in\">UIGraphicsBeginImageContext</span>(window.frame.size);</span><br><span class=\"line\">[window.layer renderInContext:<span class=\"built_in\">UIGraphicsGetCurrentContext</span>()];</span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\"><span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\"><span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image, <span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class=\"literal\">nil</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) image:(<span class=\"built_in\">UIImage</span> *) image didFinishSavingWithError:(<span class=\"built_in\">NSError</span> *) error contextInfo:(<span class=\"keyword\">void</span> *) contextInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"保存失败\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">UIAlertView</span> *alertView = [[<span class=\"built_in\">UIAlertView</span> alloc]initWithTitle:<span class=\"string\">@\"提示\"</span> message:<span class=\"string\">@\"保存成功！\"</span> delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@\"确定\"</span> otherButtonTitles:<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [alertView show];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>iPhone 截屏并本地存储</p>\n<p>使用UIGraphicsBeginImageContext 相关绘图API 获取到图像信息，使用UIImageWriteToSavedPhotosAlbum 方法就可以保存到相关的库里面去</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIWindow</span> *window =[<span class=\"built_in\">UIApplication</span> sharedApplication].keyWindow;</span><br><span class=\"line\"><span class=\"built_in\">UIGraphicsBeginImageContext</span>(window.frame.size);</span><br><span class=\"line\">[window.layer renderInContext:<span class=\"built_in\">UIGraphicsGetCurrentContext</span>()];</span><br><span class=\"line\"><span class=\"built_in\">UIImage</span> *image = <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\"><span class=\"built_in\">UIGraphicsEndImageContext</span>();</span><br><span class=\"line\"><span class=\"built_in\">UIImageWriteToSavedPhotosAlbum</span>(image, <span class=\"keyword\">self</span>, <span class=\"keyword\">@selector</span>(image:didFinishSavingWithError:contextInfo:), <span class=\"literal\">nil</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) image:(<span class=\"built_in\">UIImage</span> *) image didFinishSavingWithError:(<span class=\"built_in\">NSError</span> *) error contextInfo:(<span class=\"keyword\">void</span> *) contextInfo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"保存失败\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">UIAlertView</span> *alertView = [[<span class=\"built_in\">UIAlertView</span> alloc]initWithTitle:<span class=\"string\">@\"提示\"</span> message:<span class=\"string\">@\"保存成功！\"</span> delegate:<span class=\"literal\">nil</span> cancelButtonTitle:<span class=\"string\">@\"确定\"</span> otherButtonTitles:<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">        [alertView show];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mac下安装depot_tools","date":"2019-07-12T10:24:01.000Z","_content":"\nGoogle的Chrome代码，webrtc代码都是需要用到depot_tools的，那怎样安装呢，下面详细介绍，使用环境为Mac系统。\n\n### 1. 获取depot_tools\n\n```\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n```\n\n### 2. 获取depot_tools当前目录\n\n```\npwd\n```\n### 3. 添加环境变量\n\n```\nvim ~/.bash_profile 打开最后一行添加，如无此文件，可添加此文件\nexport PATH=\"$PATH:/PWD/depot_tools\" PWD为刚才第二步获取的路径\n```\n\n### 4. 生效环境变量\n\n```\nsource ~/.bash_profile\n```","source":"_posts/mac下安装depot-tools.md","raw":"---\ntitle: mac下安装depot_tools\ndate: 2019-07-12 18:24:01\ntags: [webrtc, depot_tool]\ncategories: webrtc\n---\n\nGoogle的Chrome代码，webrtc代码都是需要用到depot_tools的，那怎样安装呢，下面详细介绍，使用环境为Mac系统。\n\n### 1. 获取depot_tools\n\n```\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\n```\n\n### 2. 获取depot_tools当前目录\n\n```\npwd\n```\n### 3. 添加环境变量\n\n```\nvim ~/.bash_profile 打开最后一行添加，如无此文件，可添加此文件\nexport PATH=\"$PATH:/PWD/depot_tools\" PWD为刚才第二步获取的路径\n```\n\n### 4. 生效环境变量\n\n```\nsource ~/.bash_profile\n```","slug":"mac下安装depot-tools","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxft004psify2usoqjpl","content":"<p>Google的Chrome代码，webrtc代码都是需要用到depot_tools的，那怎样安装呢，下面详细介绍，使用环境为Mac系统。</p>\n<h3 id=\"1-获取depot_tools\"><a class=\"markdownIt-Anchor\" href=\"#1-获取depot_tools\"></a> 1. 获取depot_tools</h3>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-获取depot_tools当前目录\"><a class=\"markdownIt-Anchor\" href=\"#2-获取depot_tools当前目录\"></a> 2. 获取depot_tools当前目录</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-添加环境变量\"><a class=\"markdownIt-Anchor\" href=\"#3-添加环境变量\"></a> 3. 添加环境变量</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile 打开最后一行添加，如无此文件，可添加此文件</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/PWD/depot_tools\"</span> PWD为刚才第二步获取的路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-生效环境变量\"><a class=\"markdownIt-Anchor\" href=\"#4-生效环境变量\"></a> 4. 生效环境变量</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Google的Chrome代码，webrtc代码都是需要用到depot_tools的，那怎样安装呢，下面详细介绍，使用环境为Mac系统。</p>\n<h3 id=\"1-获取depot_tools\"><a class=\"markdownIt-Anchor\" href=\"#1-获取depot_tools\"></a> 1. 获取depot_tools</h3>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-获取depot_tools当前目录\"><a class=\"markdownIt-Anchor\" href=\"#2-获取depot_tools当前目录\"></a> 2. 获取depot_tools当前目录</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-添加环境变量\"><a class=\"markdownIt-Anchor\" href=\"#3-添加环境变量\"></a> 3. 添加环境变量</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile 打开最后一行添加，如无此文件，可添加此文件</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">PATH</span>=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/PWD/depot_tools\"</span> PWD为刚才第二步获取的路径</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-生效环境变量\"><a class=\"markdownIt-Anchor\" href=\"#4-生效环境变量\"></a> 4. 生效环境变量</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>"},{"title":"mac系统如何显示和隐藏文件","date":"2016-03-09T15:49:21.000Z","_content":"\n### 显示Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles -bool true\n\n### 隐藏Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles -bool false\n\n<!-- more -->\n## 或者 : ##\n\n### 显示Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles YES\n\n### 隐藏Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles NO \n\n输完单击Enter键，退出终端，重新启动Finder就可以了 \n#### 重启Finder：\n>鼠标单击窗口左上角的苹果标志-->强制退出-->Finder-->重新启动\n\n\n","source":"_posts/mac系统如何显示和隐藏文件.md","raw":"---\ntitle: mac系统如何显示和隐藏文件\ndate: 2016-03-09 23:49:21\ntags: [mac]\ncategories: mac\n---\n\n### 显示Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles -bool true\n\n### 隐藏Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles -bool false\n\n<!-- more -->\n## 或者 : ##\n\n### 显示Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles YES\n\n### 隐藏Mac隐藏文件的命令：\n>defaults write com.apple.finder AppleShowAllFiles NO \n\n输完单击Enter键，退出终端，重新启动Finder就可以了 \n#### 重启Finder：\n>鼠标单击窗口左上角的苹果标志-->强制退出-->Finder-->重新启动\n\n\n","slug":"mac系统如何显示和隐藏文件","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfu004tsifyqbfqow22","content":"<h3 id=\"显示mac隐藏文件的命令\"><a class=\"markdownIt-Anchor\" href=\"#显示mac隐藏文件的命令\"></a> 显示Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool true</p>\n</blockquote>\n<h3 id=\"隐藏mac隐藏文件的命令\"><a class=\"markdownIt-Anchor\" href=\"#隐藏mac隐藏文件的命令\"></a> 隐藏Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool false</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"或者\"><a class=\"markdownIt-Anchor\" href=\"#或者\"></a> 或者 :</h2>\n<h3 id=\"显示mac隐藏文件的命令-2\"><a class=\"markdownIt-Anchor\" href=\"#显示mac隐藏文件的命令-2\"></a> 显示Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles YES</p>\n</blockquote>\n<h3 id=\"隐藏mac隐藏文件的命令-2\"><a class=\"markdownIt-Anchor\" href=\"#隐藏mac隐藏文件的命令-2\"></a> 隐藏Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles NO</p>\n</blockquote>\n<p>输完单击Enter键，退出终端，重新启动Finder就可以了</p>\n<h4 id=\"重启finder\"><a class=\"markdownIt-Anchor\" href=\"#重启finder\"></a> 重启Finder：</h4>\n<blockquote>\n<p>鼠标单击窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"显示mac隐藏文件的命令\"><a class=\"markdownIt-Anchor\" href=\"#显示mac隐藏文件的命令\"></a> 显示Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool true</p>\n</blockquote>\n<h3 id=\"隐藏mac隐藏文件的命令\"><a class=\"markdownIt-Anchor\" href=\"#隐藏mac隐藏文件的命令\"></a> 隐藏Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles -bool false</p>\n</blockquote>","more":"<h2 id=\"或者\"><a class=\"markdownIt-Anchor\" href=\"#或者\"></a> 或者 :</h2>\n<h3 id=\"显示mac隐藏文件的命令-2\"><a class=\"markdownIt-Anchor\" href=\"#显示mac隐藏文件的命令-2\"></a> 显示Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles YES</p>\n</blockquote>\n<h3 id=\"隐藏mac隐藏文件的命令-2\"><a class=\"markdownIt-Anchor\" href=\"#隐藏mac隐藏文件的命令-2\"></a> 隐藏Mac隐藏文件的命令：</h3>\n<blockquote>\n<p>defaults write com.apple.finder AppleShowAllFiles NO</p>\n</blockquote>\n<p>输完单击Enter键，退出终端，重新启动Finder就可以了</p>\n<h4 id=\"重启finder\"><a class=\"markdownIt-Anchor\" href=\"#重启finder\"></a> 重启Finder：</h4>\n<blockquote>\n<p>鼠标单击窗口左上角的苹果标志–&gt;强制退出–&gt;Finder–&gt;重新启动</p>\n</blockquote>"},{"title":"vpn下git clone的正确方式","date":"2019-07-12T09:13:43.000Z","_content":"\n在Mac系统中，使用了Shadowsocks开了代理，使用浏览器打开Google是正常的，但用git clone googlesource.com里面的代码，缺总是超时，怎样解决git也使用代理呢？\n\n修改git配置即可，速度直接飙升10倍\n\n```\n\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n\n```","source":"_posts/vpn下git-clone的正确方式.md","raw":"---\ntitle: vpn下git clone的正确方式\ndate: 2019-07-12 17:13:43\ntags: [linux, git]\ncategories: git\n---\n\n在Mac系统中，使用了Shadowsocks开了代理，使用浏览器打开Google是正常的，但用git clone googlesource.com里面的代码，缺总是超时，怎样解决git也使用代理呢？\n\n修改git配置即可，速度直接飙升10倍\n\n```\n\ngit config --global http.proxy 'socks5://127.0.0.1:1080'\n\ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n\n```","slug":"vpn下git-clone的正确方式","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfv004wsifyw09ewd2r","content":"<p>在Mac系统中，使用了Shadowsocks开了代理，使用浏览器打开Google是正常的，但用git clone googlesource.com里面的代码，缺总是超时，怎样解决git也使用代理呢？</p>\n<p>修改git配置即可，速度直接飙升10倍</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config --global http<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global https<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在Mac系统中，使用了Shadowsocks开了代理，使用浏览器打开Google是正常的，但用git clone googlesource.com里面的代码，缺总是超时，怎样解决git也使用代理呢？</p>\n<p>修改git配置即可，速度直接飙升10倍</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config --global http<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global https<span class=\"selector-class\">.proxy</span> <span class=\"string\">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure>"},{"title":"tar压缩和解压缩打包命令","date":"2020-03-08T02:54:51.000Z","_content":"\n### tar压缩和解压缩打包命令:\n\n- 压缩成gzip文件：\n\n```\ntar -zcvf shell.tar.gz shell/\n```\n- 将gzip文件解压：\n\n```\ntar -zxvf shell.tar.gz\n```\n- 压缩为bz2文件：\n\n```\ntar -jcvf shell.tar.bz2 shell/\n```\n- 将bz2文件解压：\n\n```\ntar -jxvf shell.tar.bz2\n```\n<!-- more -->\n\ntar [-cxtzjvfpPN] **文件与目录**\n\n`````\n参数：\n-c :建立压缩文件的参数命令（creat的意思）\n-x :解压缩文件的参数命令\n-t :查看tar包里文件的命令特别注意，在使用参数时,c/x/t只能有一个，不能同时存在 因为不可能同时压缩与解压缩。\n-z :是否同时具有gzip的属性，即是否需要用gzip压缩\n-j :是否同时具有bz2的属性，即是否需要用bzip2压缩（记不住的就是它）\n-v :压缩过程中显示文件，这个常用，呵基本上我现在每次解压都会看一下里面的文件\n-f :使用文件名，之后立即加文件名，不能再加别的参数\n-p :使用原文件的原来属性（属性不会根据用户而变），这个从来没用过。。\n-P :可以使用绝对路径来压缩\n-N :比后面接的日期（yyyy/mm/dd)还要新的才会被打包进新建的文件中\n–exclude FILE :在压缩的过程中，不要将FILE打包\n`````\n\n#### 如果只想将文件打成tar包，不做压缩，同样很简单：\n\n`````\ntar -cvf shell.tar shell/\n同样，解压你也就知道了\ntar -xvf shell.tar\n`````","source":"_posts/tar压缩和解压缩打包命令.md","raw":"---\ntitle: tar压缩和解压缩打包命令\ndate: 2020-03-08 10:54:51\ntags: [linux, tar]\ncategories: linux\n---\n\n### tar压缩和解压缩打包命令:\n\n- 压缩成gzip文件：\n\n```\ntar -zcvf shell.tar.gz shell/\n```\n- 将gzip文件解压：\n\n```\ntar -zxvf shell.tar.gz\n```\n- 压缩为bz2文件：\n\n```\ntar -jcvf shell.tar.bz2 shell/\n```\n- 将bz2文件解压：\n\n```\ntar -jxvf shell.tar.bz2\n```\n<!-- more -->\n\ntar [-cxtzjvfpPN] **文件与目录**\n\n`````\n参数：\n-c :建立压缩文件的参数命令（creat的意思）\n-x :解压缩文件的参数命令\n-t :查看tar包里文件的命令特别注意，在使用参数时,c/x/t只能有一个，不能同时存在 因为不可能同时压缩与解压缩。\n-z :是否同时具有gzip的属性，即是否需要用gzip压缩\n-j :是否同时具有bz2的属性，即是否需要用bzip2压缩（记不住的就是它）\n-v :压缩过程中显示文件，这个常用，呵基本上我现在每次解压都会看一下里面的文件\n-f :使用文件名，之后立即加文件名，不能再加别的参数\n-p :使用原文件的原来属性（属性不会根据用户而变），这个从来没用过。。\n-P :可以使用绝对路径来压缩\n-N :比后面接的日期（yyyy/mm/dd)还要新的才会被打包进新建的文件中\n–exclude FILE :在压缩的过程中，不要将FILE打包\n`````\n\n#### 如果只想将文件打成tar包，不做压缩，同样很简单：\n\n`````\ntar -cvf shell.tar shell/\n同样，解压你也就知道了\ntar -xvf shell.tar\n`````","slug":"tar压缩和解压缩打包命令","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfv004zsifyr07tegi5","content":"<h3 id=\"tar压缩和解压缩打包命令\"><a class=\"markdownIt-Anchor\" href=\"#tar压缩和解压缩打包命令\"></a> tar压缩和解压缩打包命令:</h3>\n<ul>\n<li>压缩成gzip文件：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zcvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> shell/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将gzip文件解压：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>压缩为bz2文件：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -jcvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.bz2</span> shell/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将bz2文件解压：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -jxvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.bz2</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>tar [-cxtzjvfpPN] <strong>文件与目录</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数：</span><br><span class=\"line\">-<span class=\"string\">c :</span>建立压缩文件的参数命令（creat的意思）</span><br><span class=\"line\">-<span class=\"string\">x :</span>解压缩文件的参数命令</span><br><span class=\"line\">-<span class=\"string\">t :</span>查看tar包里文件的命令特别注意，在使用参数时,c<span class=\"regexp\">/x/</span>t只能有一个，不能同时存在 因为不可能同时压缩与解压缩。</span><br><span class=\"line\">-<span class=\"string\">z :</span>是否同时具有gzip的属性，即是否需要用gzip压缩</span><br><span class=\"line\">-<span class=\"string\">j :</span>是否同时具有bz2的属性，即是否需要用bzip2压缩（记不住的就是它）</span><br><span class=\"line\">-<span class=\"string\">v :</span>压缩过程中显示文件，这个常用，呵基本上我现在每次解压都会看一下里面的文件</span><br><span class=\"line\">-<span class=\"string\">f :</span>使用文件名，之后立即加文件名，不能再加别的参数</span><br><span class=\"line\">-<span class=\"string\">p :</span>使用原文件的原来属性（属性不会根据用户而变），这个从来没用过。。</span><br><span class=\"line\">-<span class=\"string\">P :</span>可以使用绝对路径来压缩</span><br><span class=\"line\">-<span class=\"string\">N :</span>比后面接的日期（yyyy<span class=\"regexp\">/mm/</span>dd)还要新的才会被打包进新建的文件中</span><br><span class=\"line\">–exclude <span class=\"string\">FILE :</span>在压缩的过程中，不要将FILE打包</span><br></pre></td></tr></table></figure>\n<h4 id=\"如果只想将文件打成tar包不做压缩同样很简单\"><a class=\"markdownIt-Anchor\" href=\"#如果只想将文件打成tar包不做压缩同样很简单\"></a> 如果只想将文件打成tar包，不做压缩，同样很简单：</h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf <span class=\"keyword\">shell</span>.<span class=\"bash\">tar shell/</span></span><br><span class=\"line\">同样，解压你也就知道了</span><br><span class=\"line\">tar -xvf <span class=\"keyword\">shell</span>.<span class=\"bash\">tar</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"tar压缩和解压缩打包命令\"><a class=\"markdownIt-Anchor\" href=\"#tar压缩和解压缩打包命令\"></a> tar压缩和解压缩打包命令:</h3>\n<ul>\n<li>压缩成gzip文件：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zcvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span> shell/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将gzip文件解压：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>压缩为bz2文件：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -jcvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.bz2</span> shell/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将bz2文件解压：</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -jxvf shell<span class=\"selector-class\">.tar</span><span class=\"selector-class\">.bz2</span></span><br></pre></td></tr></table></figure>","more":"<p>tar [-cxtzjvfpPN] <strong>文件与目录</strong></p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">参数：</span><br><span class=\"line\">-<span class=\"string\">c :</span>建立压缩文件的参数命令（creat的意思）</span><br><span class=\"line\">-<span class=\"string\">x :</span>解压缩文件的参数命令</span><br><span class=\"line\">-<span class=\"string\">t :</span>查看tar包里文件的命令特别注意，在使用参数时,c<span class=\"regexp\">/x/</span>t只能有一个，不能同时存在 因为不可能同时压缩与解压缩。</span><br><span class=\"line\">-<span class=\"string\">z :</span>是否同时具有gzip的属性，即是否需要用gzip压缩</span><br><span class=\"line\">-<span class=\"string\">j :</span>是否同时具有bz2的属性，即是否需要用bzip2压缩（记不住的就是它）</span><br><span class=\"line\">-<span class=\"string\">v :</span>压缩过程中显示文件，这个常用，呵基本上我现在每次解压都会看一下里面的文件</span><br><span class=\"line\">-<span class=\"string\">f :</span>使用文件名，之后立即加文件名，不能再加别的参数</span><br><span class=\"line\">-<span class=\"string\">p :</span>使用原文件的原来属性（属性不会根据用户而变），这个从来没用过。。</span><br><span class=\"line\">-<span class=\"string\">P :</span>可以使用绝对路径来压缩</span><br><span class=\"line\">-<span class=\"string\">N :</span>比后面接的日期（yyyy<span class=\"regexp\">/mm/</span>dd)还要新的才会被打包进新建的文件中</span><br><span class=\"line\">–exclude <span class=\"string\">FILE :</span>在压缩的过程中，不要将FILE打包</span><br></pre></td></tr></table></figure>\n<h4 id=\"如果只想将文件打成tar包不做压缩同样很简单\"><a class=\"markdownIt-Anchor\" href=\"#如果只想将文件打成tar包不做压缩同样很简单\"></a> 如果只想将文件打成tar包，不做压缩，同样很简单：</h4>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -cvf <span class=\"keyword\">shell</span>.<span class=\"bash\">tar shell/</span></span><br><span class=\"line\">同样，解压你也就知道了</span><br><span class=\"line\">tar -xvf <span class=\"keyword\">shell</span>.<span class=\"bash\">tar</span></span><br></pre></td></tr></table></figure>"},{"title":"python字符串的去除空格函数 字符串的内建函数","date":"2016-08-24T15:11:52.000Z","_content":"\n## python字符串的去除空格函数 字符串的内建函数\n-----\n\n* strip 同时去掉左右两边的空格\n* lstrip 去掉左边的空格\n* rstrip 去掉右边的空格\n\n<!-- more -->\n| 方法 | 描述 |\n| :-----| :----|                                 \n|string.capitalize()     |         把字符串的第一个字符大写|\n|string.center(width)      |    返回一个原字符串居中,并使用空格填充至长度width的新字串|\n|string.count(str, beg=0, end=len(string))|返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内 str 出现的次数 |\n|string.decode(encoding='UTF-8', errors='strict')  | 以 encoding 指定的编码格式解码string，如果出错默认报一个 ValueError的异常 ，除非errors 指定的是 'ignore''replace' string.encode(encoding='UTF-8', errors='strict')  以 encoding 指定的编码格式编码string，如果出错默认报一个ValueError 的异常，除非 errors指定的是'ignore'或者'replace'|           \n|string.endswith(obj, beg=0, end=len(string))|检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回True,否则返回 False.|\n|string.expandtabs(tabsize=8) |把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.|\n|string.find(str, beg=0, end=len(string))|检测str是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1|\n|string.index(str, beg=0, end=len(string))|跟find()方法一样，只不过如果str不在 string中会报一个异常.|\n|string.isalnum() | R如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False|\n|string.isalpha() | 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False|\n|string.isdecimal() | 如果 string 只包含十进制数字则返回True 否则返回 False.|\n|string.isdigit() |如果 string 只包含数字则返回 True 否则返回 False.|\n|string.islower() |如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回 False|\n|string.isnumeric()|如果 string 中只包含数字字符，则返回True，否则返回 False|\n|string.isspace()|如果 string 中只包含空格，则返回True，否则返回 False.|\n|string.istitle()| 如果 string 是标题化的(见 title())则返回 True，否则返回 False|\n|string.isupper() | 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False|\n|string.join(seq)| Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串|\n|string.ljust(width)|返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串|\n|string.lower() | 转换 string 中所有大写字符为小写. |\n|<font color=\"#DC143C\">string.lstrip() </font>|<font color=\"#DC143C\">截掉 string 左边的空格.</font>|\n|string.partition(str)|有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.|\n|string.replace(str1, str2,num=string.count(str1))|把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.|\n|string.rfind(str, beg=0,end=len(string) )|类似于 find()函数，不过是从右边开始查找.|\n|string.rindex( str, beg=0,end=len(string)) | 类似于 index()，不过是从右边开始.|\n|string.rjust(width)      |   返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串|\n|string.rpartition(str)   |   类似于 partition()函数,不过是从右边开始查找.|\n|<font color=\"#DC143C\">string.rstrip() </font>  |  <font color=\"#DC143C\">          删除 string 字符串末尾的空格.</font>|\n|string.split(str=\"\", num=string.count(str))|以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串|\n|string.splitlines(num=string.count('\\n'))|按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.|\n|string.startswith(obj, beg=0,end=len(string))|检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.|\n|<font color=\"#DC143C\">string.strip([obj]) </font>|  <font color=\"#DC143C\">    在string 上执行 lstrip()和 rstrip().</font>|\n|string.swapcase() |      翻转 string 中的大小写|\n|string.title() |              返回\"标题化\"的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())|\n|string.translate(str, del=\"\")|根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中|\n|string.upper() |         转换 string 中的小写字母为大写|\n|string.zfill(width) |    返回长度为width的字符串,原字符串 string 右对齐,前面填充0|\n","source":"_posts/python字符串的去除空格函数-字符串的内建函数.md","raw":"---\ntitle: python字符串的去除空格函数 字符串的内建函数\ndate: 2016-08-24 23:11:52\ntags: python\ncategories: python\n---\n\n## python字符串的去除空格函数 字符串的内建函数\n-----\n\n* strip 同时去掉左右两边的空格\n* lstrip 去掉左边的空格\n* rstrip 去掉右边的空格\n\n<!-- more -->\n| 方法 | 描述 |\n| :-----| :----|                                 \n|string.capitalize()     |         把字符串的第一个字符大写|\n|string.center(width)      |    返回一个原字符串居中,并使用空格填充至长度width的新字串|\n|string.count(str, beg=0, end=len(string))|返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内 str 出现的次数 |\n|string.decode(encoding='UTF-8', errors='strict')  | 以 encoding 指定的编码格式解码string，如果出错默认报一个 ValueError的异常 ，除非errors 指定的是 'ignore''replace' string.encode(encoding='UTF-8', errors='strict')  以 encoding 指定的编码格式编码string，如果出错默认报一个ValueError 的异常，除非 errors指定的是'ignore'或者'replace'|           \n|string.endswith(obj, beg=0, end=len(string))|检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回True,否则返回 False.|\n|string.expandtabs(tabsize=8) |把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.|\n|string.find(str, beg=0, end=len(string))|检测str是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1|\n|string.index(str, beg=0, end=len(string))|跟find()方法一样，只不过如果str不在 string中会报一个异常.|\n|string.isalnum() | R如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False|\n|string.isalpha() | 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False|\n|string.isdecimal() | 如果 string 只包含十进制数字则返回True 否则返回 False.|\n|string.isdigit() |如果 string 只包含数字则返回 True 否则返回 False.|\n|string.islower() |如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回 False|\n|string.isnumeric()|如果 string 中只包含数字字符，则返回True，否则返回 False|\n|string.isspace()|如果 string 中只包含空格，则返回True，否则返回 False.|\n|string.istitle()| 如果 string 是标题化的(见 title())则返回 True，否则返回 False|\n|string.isupper() | 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False|\n|string.join(seq)| Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串|\n|string.ljust(width)|返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串|\n|string.lower() | 转换 string 中所有大写字符为小写. |\n|<font color=\"#DC143C\">string.lstrip() </font>|<font color=\"#DC143C\">截掉 string 左边的空格.</font>|\n|string.partition(str)|有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.|\n|string.replace(str1, str2,num=string.count(str1))|把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.|\n|string.rfind(str, beg=0,end=len(string) )|类似于 find()函数，不过是从右边开始查找.|\n|string.rindex( str, beg=0,end=len(string)) | 类似于 index()，不过是从右边开始.|\n|string.rjust(width)      |   返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串|\n|string.rpartition(str)   |   类似于 partition()函数,不过是从右边开始查找.|\n|<font color=\"#DC143C\">string.rstrip() </font>  |  <font color=\"#DC143C\">          删除 string 字符串末尾的空格.</font>|\n|string.split(str=\"\", num=string.count(str))|以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串|\n|string.splitlines(num=string.count('\\n'))|按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.|\n|string.startswith(obj, beg=0,end=len(string))|检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.|\n|<font color=\"#DC143C\">string.strip([obj]) </font>|  <font color=\"#DC143C\">    在string 上执行 lstrip()和 rstrip().</font>|\n|string.swapcase() |      翻转 string 中的大小写|\n|string.title() |              返回\"标题化\"的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())|\n|string.translate(str, del=\"\")|根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中|\n|string.upper() |         转换 string 中的小写字母为大写|\n|string.zfill(width) |    返回长度为width的字符串,原字符串 string 右对齐,前面填充0|\n","slug":"python字符串的去除空格函数-字符串的内建函数","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfx0054sifyqqq0scp9","content":"<h2 id=\"python字符串的去除空格函数-字符串的内建函数\"><a class=\"markdownIt-Anchor\" href=\"#python字符串的去除空格函数-字符串的内建函数\"></a> python字符串的去除空格函数 字符串的内建函数</h2>\n<hr>\n<ul>\n<li>strip 同时去掉左右两边的空格</li>\n<li>lstrip 去掉左边的空格</li>\n<li>rstrip 去掉右边的空格</li>\n</ul>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string.capitalize()</td>\n<td style=\"text-align:left\">把字符串的第一个字符大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.center(width)</td>\n<td style=\"text-align:left\">返回一个原字符串居中,并使用空格填充至长度width的新字串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.count(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内 str 出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.decode(encoding=‘UTF-8’, errors=‘strict’)</td>\n<td style=\"text-align:left\">以 encoding 指定的编码格式解码string，如果出错默认报一个 ValueError的异常 ，除非errors 指定的是 ‘ignore’‘replace’ string.encode(encoding=‘UTF-8’, errors=‘strict’)  以 encoding 指定的编码格式编码string，如果出错默认报一个ValueError 的异常，除非 errors指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.endswith(obj, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回True,否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.expandtabs(tabsize=8)</td>\n<td style=\"text-align:left\">把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.find(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">检测str是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.index(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isalnum()</td>\n<td style=\"text-align:left\">R如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isalpha()</td>\n<td style=\"text-align:left\">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isdecimal()</td>\n<td style=\"text-align:left\">如果 string 只包含十进制数字则返回True 否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isdigit()</td>\n<td style=\"text-align:left\">如果 string 只包含数字则返回 True 否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.islower()</td>\n<td style=\"text-align:left\">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isnumeric()</td>\n<td style=\"text-align:left\">如果 string 中只包含数字字符，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isspace()</td>\n<td style=\"text-align:left\">如果 string 中只包含空格，则返回True，否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.istitle()</td>\n<td style=\"text-align:left\">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isupper()</td>\n<td style=\"text-align:left\">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.join(seq)</td>\n<td style=\"text-align:left\">Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.ljust(width)</td>\n<td style=\"text-align:left\">返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.lower()</td>\n<td style=\"text-align:left\">转换 string 中所有大写字符为小写.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.lstrip() </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">截掉 string 左边的空格.</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.partition(str)</td>\n<td style=\"text-align:left\">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.replace(str1, str2,num=string.count(str1))</td>\n<td style=\"text-align:left\">把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rfind(str, beg=0,end=len(string) )</td>\n<td style=\"text-align:left\">类似于 find()函数，不过是从右边开始查找.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rindex( str, beg=0,end=len(string))</td>\n<td style=\"text-align:left\">类似于 index()，不过是从右边开始.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rjust(width)</td>\n<td style=\"text-align:left\">返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rpartition(str)</td>\n<td style=\"text-align:left\">类似于 partition()函数,不过是从右边开始查找.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.rstrip() </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">          删除 string 字符串末尾的空格.</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.split(str=&quot;&quot;, num=string.count(str))</td>\n<td style=\"text-align:left\">以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.splitlines(num=string.count(’\\n’))</td>\n<td style=\"text-align:left\">按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.startswith(obj, beg=0,end=len(string))</td>\n<td style=\"text-align:left\">检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.strip([obj]) </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">    在string 上执行 lstrip()和 rstrip().</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.swapcase()</td>\n<td style=\"text-align:left\">翻转 string 中的大小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.title()</td>\n<td style=\"text-align:left\">返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.translate(str, del=&quot;&quot;)</td>\n<td style=\"text-align:left\">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.upper()</td>\n<td style=\"text-align:left\">转换 string 中的小写字母为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.zfill(width)</td>\n<td style=\"text-align:left\">返回长度为width的字符串,原字符串 string 右对齐,前面填充0</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h2 id=\"python字符串的去除空格函数-字符串的内建函数\"><a class=\"markdownIt-Anchor\" href=\"#python字符串的去除空格函数-字符串的内建函数\"></a> python字符串的去除空格函数 字符串的内建函数</h2>\n<hr>\n<ul>\n<li>strip 同时去掉左右两边的空格</li>\n<li>lstrip 去掉左边的空格</li>\n<li>rstrip 去掉右边的空格</li>\n</ul>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">string.capitalize()</td>\n<td style=\"text-align:left\">把字符串的第一个字符大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.center(width)</td>\n<td style=\"text-align:left\">返回一个原字符串居中,并使用空格填充至长度width的新字串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.count(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内 str 出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.decode(encoding=‘UTF-8’, errors=‘strict’)</td>\n<td style=\"text-align:left\">以 encoding 指定的编码格式解码string，如果出错默认报一个 ValueError的异常 ，除非errors 指定的是 ‘ignore’‘replace’ string.encode(encoding=‘UTF-8’, errors=‘strict’)  以 encoding 指定的编码格式编码string，如果出错默认报一个ValueError 的异常，除非 errors指定的是’ignore’或者’replace’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.endswith(obj, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回True,否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.expandtabs(tabsize=8)</td>\n<td style=\"text-align:left\">把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.find(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">检测str是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.index(str, beg=0, end=len(string))</td>\n<td style=\"text-align:left\">跟find()方法一样，只不过如果str不在 string中会报一个异常.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isalnum()</td>\n<td style=\"text-align:left\">R如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isalpha()</td>\n<td style=\"text-align:left\">如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isdecimal()</td>\n<td style=\"text-align:left\">如果 string 只包含十进制数字则返回True 否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isdigit()</td>\n<td style=\"text-align:left\">如果 string 只包含数字则返回 True 否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.islower()</td>\n<td style=\"text-align:left\">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isnumeric()</td>\n<td style=\"text-align:left\">如果 string 中只包含数字字符，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isspace()</td>\n<td style=\"text-align:left\">如果 string 中只包含空格，则返回True，否则返回 False.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.istitle()</td>\n<td style=\"text-align:left\">如果 string 是标题化的(见 title())则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.isupper()</td>\n<td style=\"text-align:left\">如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.join(seq)</td>\n<td style=\"text-align:left\">Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.ljust(width)</td>\n<td style=\"text-align:left\">返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.lower()</td>\n<td style=\"text-align:left\">转换 string 中所有大写字符为小写.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.lstrip() </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">截掉 string 左边的空格.</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.partition(str)</td>\n<td style=\"text-align:left\">有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.replace(str1, str2,num=string.count(str1))</td>\n<td style=\"text-align:left\">把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rfind(str, beg=0,end=len(string) )</td>\n<td style=\"text-align:left\">类似于 find()函数，不过是从右边开始查找.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rindex( str, beg=0,end=len(string))</td>\n<td style=\"text-align:left\">类似于 index()，不过是从右边开始.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rjust(width)</td>\n<td style=\"text-align:left\">返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.rpartition(str)</td>\n<td style=\"text-align:left\">类似于 partition()函数,不过是从右边开始查找.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.rstrip() </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">          删除 string 字符串末尾的空格.</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.split(str=&quot;&quot;, num=string.count(str))</td>\n<td style=\"text-align:left\">以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.splitlines(num=string.count(’\\n’))</td>\n<td style=\"text-align:left\">按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.startswith(obj, beg=0,end=len(string))</td>\n<td style=\"text-align:left\">检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><font color=\"#DC143C\">string.strip([obj]) </font></td>\n<td style=\"text-align:left\"><font color=\"#DC143C\">    在string 上执行 lstrip()和 rstrip().</font></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.swapcase()</td>\n<td style=\"text-align:left\">翻转 string 中的大小写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.title()</td>\n<td style=\"text-align:left\">返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.translate(str, del=&quot;&quot;)</td>\n<td style=\"text-align:left\">根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.upper()</td>\n<td style=\"text-align:left\">转换 string 中的小写字母为大写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">string.zfill(width)</td>\n<td style=\"text-align:left\">返回长度为width的字符串,原字符串 string 右对齐,前面填充0</td>\n</tr>\n</tbody>\n</table>"},{"title":"wireshark过滤器规则","date":"2018-12-10T04:31:22.000Z","_content":"\n<!-- more -->\n#### 一、IP过滤：包括来源IP或者目标IP等于某个IP\n比如：\n\n```\nip.src addr==192.168.0.208  or ip.src addr eq 192.168.0.208 显示来源IP\n\nip.dst addr==192.168.0.208  or ip.dst addr eq 192.168.0.208 显示目标IP\n```\n\n#### 二、端口过滤：\n比如：\n\n```\n tcp.port eq 80 // 不管端口是来源的还是目标的都显示\n tcp.port == 80\n tcp.port eq 2722\n tcp.port eq 80 or udp.port eq 80\n tcp.dstport == 80 // 只显tcp协议的目标端口80\n tcp.srcport == 80 // 只显tcp协议的来源端口80\n\n过滤端口范围\ntcp.port >= 1 and tcp.port <= 80\n\n```\n\n#### 三、协议过滤：tcp\n\n```\nudp\narp\nicmp\nhttp\nsmtp\nftp\ndns\nmsnms\nip\nssl\n等等\n排除ssl包，如!ssl 或者  not ssl\n```\n\n#### 四、包长度过滤：\n比如：\n\n```\nudp.length == 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和\ntcp.len >= 7  指的是ip数据包(tcp下面那块数据),不包括tcp本身\nip.len == 94 除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后\nframe.len == 119 整个数据包长度,从eth开始到最后\n```\n#### 五、http模式过滤：\n\n```\n例子:\nhttp.request.method == “GET”\nhttp.request.method == “POST”\nhttp.request.uri == “/img/logo-edu.gif”\nhttp contains “GET”\nhttp contains “HTTP/1.”\n\n// GET包\nhttp.request.method == “GET” && http contains “Host: ”\nhttp.request.method == “GET” && http contains “User-Agent: ”\n// POST包\nhttp.request.method == “POST” && http contains “Host: ”\nhttp.request.method == “POST” && http contains “User-Agent: ”\n// 响应包\nhttp contains “HTTP/1.1 200 OK” && http contains “Content-Type: ”\nhttp contains “HTTP/1.0 200 OK” && http contains “Content-Type: ”\n一定包含如下\nContent-Type:\n```\n\n#### 六、连接符 and / or\n\n#### 七、表达式：\n```\n!(arp.src==192.168.1.1) and !(arp.dst.proto_ipv4==192.168.1.243)\n```","source":"_posts/wireshark过滤器规则.md","raw":"---\ntitle: wireshark过滤器规则\ndate: 2018-12-10 12:31:22\ntags: [linux, wireshark]\ncategories: linux\n---\n\n<!-- more -->\n#### 一、IP过滤：包括来源IP或者目标IP等于某个IP\n比如：\n\n```\nip.src addr==192.168.0.208  or ip.src addr eq 192.168.0.208 显示来源IP\n\nip.dst addr==192.168.0.208  or ip.dst addr eq 192.168.0.208 显示目标IP\n```\n\n#### 二、端口过滤：\n比如：\n\n```\n tcp.port eq 80 // 不管端口是来源的还是目标的都显示\n tcp.port == 80\n tcp.port eq 2722\n tcp.port eq 80 or udp.port eq 80\n tcp.dstport == 80 // 只显tcp协议的目标端口80\n tcp.srcport == 80 // 只显tcp协议的来源端口80\n\n过滤端口范围\ntcp.port >= 1 and tcp.port <= 80\n\n```\n\n#### 三、协议过滤：tcp\n\n```\nudp\narp\nicmp\nhttp\nsmtp\nftp\ndns\nmsnms\nip\nssl\n等等\n排除ssl包，如!ssl 或者  not ssl\n```\n\n#### 四、包长度过滤：\n比如：\n\n```\nudp.length == 26 这个长度是指udp本身固定长度8加上udp下面那块数据包之和\ntcp.len >= 7  指的是ip数据包(tcp下面那块数据),不包括tcp本身\nip.len == 94 除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后\nframe.len == 119 整个数据包长度,从eth开始到最后\n```\n#### 五、http模式过滤：\n\n```\n例子:\nhttp.request.method == “GET”\nhttp.request.method == “POST”\nhttp.request.uri == “/img/logo-edu.gif”\nhttp contains “GET”\nhttp contains “HTTP/1.”\n\n// GET包\nhttp.request.method == “GET” && http contains “Host: ”\nhttp.request.method == “GET” && http contains “User-Agent: ”\n// POST包\nhttp.request.method == “POST” && http contains “Host: ”\nhttp.request.method == “POST” && http contains “User-Agent: ”\n// 响应包\nhttp contains “HTTP/1.1 200 OK” && http contains “Content-Type: ”\nhttp contains “HTTP/1.0 200 OK” && http contains “Content-Type: ”\n一定包含如下\nContent-Type:\n```\n\n#### 六、连接符 and / or\n\n#### 七、表达式：\n```\n!(arp.src==192.168.1.1) and !(arp.dst.proto_ipv4==192.168.1.243)\n```","slug":"wireshark过滤器规则","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfy0056sifyj6jwdpi4","content":"<a id=\"more\"></a>\n<h4 id=\"一-ip过滤包括来源ip或者目标ip等于某个ip\"><a class=\"markdownIt-Anchor\" href=\"#一-ip过滤包括来源ip或者目标ip等于某个ip\"></a> 一、IP过滤：包括来源IP或者目标IP等于某个IP</h4>\n<p>比如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ip</span>.src addr==<span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span>  <span class=\"keyword\">or</span> <span class=\"built_in\">ip</span>.src addr eq <span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span> 显示来源<span class=\"built_in\">IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ip</span>.dst addr==<span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span>  <span class=\"keyword\">or</span> <span class=\"built_in\">ip</span>.dst addr eq <span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span> 显示目标<span class=\"built_in\">IP</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二-端口过滤\"><a class=\"markdownIt-Anchor\" href=\"#二-端口过滤\"></a> 二、端口过滤：</h4>\n<p>比如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span> <span class=\"comment\">// 不管端口是来源的还是目标的都显示</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> == <span class=\"number\">80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">2722</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span> or udp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.dstport</span> == <span class=\"number\">80</span> <span class=\"comment\">// 只显tcp协议的目标端口80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.srcport</span> == <span class=\"number\">80</span> <span class=\"comment\">// 只显tcp协议的来源端口80</span></span><br><span class=\"line\"></span><br><span class=\"line\">过滤端口范围</span><br><span class=\"line\">tcp<span class=\"selector-class\">.port</span> &gt;= <span class=\"number\">1</span> and tcp<span class=\"selector-class\">.port</span> &lt;= <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三-协议过滤tcp\"><a class=\"markdownIt-Anchor\" href=\"#三-协议过滤tcp\"></a> 三、协议过滤：tcp</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp</span><br><span class=\"line\">arp</span><br><span class=\"line\">icmp</span><br><span class=\"line\">http</span><br><span class=\"line\">smtp</span><br><span class=\"line\">ftp</span><br><span class=\"line\">dns</span><br><span class=\"line\">msnms</span><br><span class=\"line\">ip</span><br><span class=\"line\">ssl</span><br><span class=\"line\">等等</span><br><span class=\"line\">排除ssl包，如!ssl 或者  <span class=\"keyword\">not</span> ssl</span><br></pre></td></tr></table></figure>\n<h4 id=\"四-包长度过滤\"><a class=\"markdownIt-Anchor\" href=\"#四-包长度过滤\"></a> 四、包长度过滤：</h4>\n<p>比如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp<span class=\"selector-class\">.length</span> == <span class=\"number\">26</span> 这个长度是指udp本身固定长度<span class=\"number\">8</span>加上udp下面那块数据包之和</span><br><span class=\"line\">tcp<span class=\"selector-class\">.len</span> &gt;= <span class=\"number\">7</span>  指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><span class=\"line\">ip<span class=\"selector-class\">.len</span> == <span class=\"number\">94</span> 除了以太网头固定长度<span class=\"number\">14</span>,其它都算是ip<span class=\"selector-class\">.len</span>,即从ip本身到最后</span><br><span class=\"line\">frame<span class=\"selector-class\">.len</span> == <span class=\"number\">119</span> 整个数据包长度,从eth开始到最后</span><br></pre></td></tr></table></figure>\n<h4 id=\"五-http模式过滤\"><a class=\"markdownIt-Anchor\" href=\"#五-http模式过滤\"></a> 五、http模式过滤：</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子:</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.uri</span> == “/img/logo-edu.gif”</span><br><span class=\"line\">http contains “GET”</span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1</span>.”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET包</span></span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET” &amp;&amp; http contains “Host: ”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET” &amp;&amp; http contains “User-Agent: ”</span><br><span class=\"line\"><span class=\"comment\">// POST包</span></span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST” &amp;&amp; http contains “Host: ”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST” &amp;&amp; http contains “User-Agent: ”</span><br><span class=\"line\"><span class=\"comment\">// 响应包</span></span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1.0</span> <span class=\"number\">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class=\"line\">一定包含如下</span><br><span class=\"line\">Content-Type:</span><br></pre></td></tr></table></figure>\n<h4 id=\"六-连接符-and-or\"><a class=\"markdownIt-Anchor\" href=\"#六-连接符-and-or\"></a> 六、连接符 and / or</h4>\n<h4 id=\"七-表达式\"><a class=\"markdownIt-Anchor\" href=\"#七-表达式\"></a> 七、表达式：</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!(arp.src==<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span>) <span class=\"keyword\">and</span> !(arp.dst.proto_ipv4==<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.243</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一-ip过滤包括来源ip或者目标ip等于某个ip\"><a class=\"markdownIt-Anchor\" href=\"#一-ip过滤包括来源ip或者目标ip等于某个ip\"></a> 一、IP过滤：包括来源IP或者目标IP等于某个IP</h4>\n<p>比如：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ip</span>.src addr==<span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span>  <span class=\"keyword\">or</span> <span class=\"built_in\">ip</span>.src addr eq <span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span> 显示来源<span class=\"built_in\">IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ip</span>.dst addr==<span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span>  <span class=\"keyword\">or</span> <span class=\"built_in\">ip</span>.dst addr eq <span class=\"number\">192.168</span><span class=\"meta\">.0</span><span class=\"meta\">.208</span> 显示目标<span class=\"built_in\">IP</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"二-端口过滤\"><a class=\"markdownIt-Anchor\" href=\"#二-端口过滤\"></a> 二、端口过滤：</h4>\n<p>比如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span> <span class=\"comment\">// 不管端口是来源的还是目标的都显示</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> == <span class=\"number\">80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">2722</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span> or udp<span class=\"selector-class\">.port</span> eq <span class=\"number\">80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.dstport</span> == <span class=\"number\">80</span> <span class=\"comment\">// 只显tcp协议的目标端口80</span></span><br><span class=\"line\"> tcp<span class=\"selector-class\">.srcport</span> == <span class=\"number\">80</span> <span class=\"comment\">// 只显tcp协议的来源端口80</span></span><br><span class=\"line\"></span><br><span class=\"line\">过滤端口范围</span><br><span class=\"line\">tcp<span class=\"selector-class\">.port</span> &gt;= <span class=\"number\">1</span> and tcp<span class=\"selector-class\">.port</span> &lt;= <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"三-协议过滤tcp\"><a class=\"markdownIt-Anchor\" href=\"#三-协议过滤tcp\"></a> 三、协议过滤：tcp</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp</span><br><span class=\"line\">arp</span><br><span class=\"line\">icmp</span><br><span class=\"line\">http</span><br><span class=\"line\">smtp</span><br><span class=\"line\">ftp</span><br><span class=\"line\">dns</span><br><span class=\"line\">msnms</span><br><span class=\"line\">ip</span><br><span class=\"line\">ssl</span><br><span class=\"line\">等等</span><br><span class=\"line\">排除ssl包，如!ssl 或者  <span class=\"keyword\">not</span> ssl</span><br></pre></td></tr></table></figure>\n<h4 id=\"四-包长度过滤\"><a class=\"markdownIt-Anchor\" href=\"#四-包长度过滤\"></a> 四、包长度过滤：</h4>\n<p>比如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">udp<span class=\"selector-class\">.length</span> == <span class=\"number\">26</span> 这个长度是指udp本身固定长度<span class=\"number\">8</span>加上udp下面那块数据包之和</span><br><span class=\"line\">tcp<span class=\"selector-class\">.len</span> &gt;= <span class=\"number\">7</span>  指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><span class=\"line\">ip<span class=\"selector-class\">.len</span> == <span class=\"number\">94</span> 除了以太网头固定长度<span class=\"number\">14</span>,其它都算是ip<span class=\"selector-class\">.len</span>,即从ip本身到最后</span><br><span class=\"line\">frame<span class=\"selector-class\">.len</span> == <span class=\"number\">119</span> 整个数据包长度,从eth开始到最后</span><br></pre></td></tr></table></figure>\n<h4 id=\"五-http模式过滤\"><a class=\"markdownIt-Anchor\" href=\"#五-http模式过滤\"></a> 五、http模式过滤：</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子:</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.uri</span> == “/img/logo-edu.gif”</span><br><span class=\"line\">http contains “GET”</span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1</span>.”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET包</span></span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET” &amp;&amp; http contains “Host: ”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “GET” &amp;&amp; http contains “User-Agent: ”</span><br><span class=\"line\"><span class=\"comment\">// POST包</span></span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST” &amp;&amp; http contains “Host: ”</span><br><span class=\"line\">http<span class=\"selector-class\">.request</span><span class=\"selector-class\">.method</span> == “POST” &amp;&amp; http contains “User-Agent: ”</span><br><span class=\"line\"><span class=\"comment\">// 响应包</span></span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1.1</span> <span class=\"number\">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class=\"line\">http contains “HTTP/<span class=\"number\">1.0</span> <span class=\"number\">200</span> OK” &amp;&amp; http contains “Content-Type: ”</span><br><span class=\"line\">一定包含如下</span><br><span class=\"line\">Content-Type:</span><br></pre></td></tr></table></figure>\n<h4 id=\"六-连接符-and-or\"><a class=\"markdownIt-Anchor\" href=\"#六-连接符-and-or\"></a> 六、连接符 and / or</h4>\n<h4 id=\"七-表达式\"><a class=\"markdownIt-Anchor\" href=\"#七-表达式\"></a> 七、表达式：</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!(arp.src==<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.1</span>) <span class=\"keyword\">and</span> !(arp.dst.proto_ipv4==<span class=\"number\">192.168</span><span class=\"number\">.1</span><span class=\"number\">.243</span>)</span><br></pre></td></tr></table></figure>"},{"title":"关于Android中软键盘与布局的问题","date":"2017-12-05T09:28:06.000Z","_content":">当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。\n\n**解决办法：**\n\n方法一、在Activity中的onCreate中setContentView之前写上如下代码\n\n```\ngetWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\n```\n\n方法二、在项目的AndroidManifest.xml文件中界面对应<activity>里加上 `android:windowSoftInputMode=\"stateVisible|adjustResize\"`,这样会让屏幕整体上移。如果加上的是`android:windowSoftInputMode=\"adjustPan\"`这样键盘就会覆盖屏幕。\n\n方法三、把顶级的layout替换为ScrollView, 或者在顶级的layout外再嵌套一层ScrollView。这样页面就可以一起滚动了，软键盘会一直处于底部。\n\n**注意：** 方法一和二应该是同一种方法，只不过一个是在代码中实现一个是在xml中实现。\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/关于Android中软键盘与布局的问题.md","raw":"---\ntitle: 关于Android中软键盘与布局的问题\ndate: 2017-12-05 17:28:06\ntags: [keyboard]\ncategories: android\n---\n>当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。\n\n**解决办法：**\n\n方法一、在Activity中的onCreate中setContentView之前写上如下代码\n\n```\ngetWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN)\n```\n\n方法二、在项目的AndroidManifest.xml文件中界面对应<activity>里加上 `android:windowSoftInputMode=\"stateVisible|adjustResize\"`,这样会让屏幕整体上移。如果加上的是`android:windowSoftInputMode=\"adjustPan\"`这样键盘就会覆盖屏幕。\n\n方法三、把顶级的layout替换为ScrollView, 或者在顶级的layout外再嵌套一层ScrollView。这样页面就可以一起滚动了，软键盘会一直处于底部。\n\n**注意：** 方法一和二应该是同一种方法，只不过一个是在代码中实现一个是在xml中实现。\n\n\n\n\n\n\n\n\n\n\n\n","slug":"关于Android中软键盘与布局的问题","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxfz005asify429mi0r9","content":"<blockquote>\n<p>当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。</p>\n</blockquote>\n<p><strong>解决办法：</strong></p>\n<p>方法一、在Activity中的onCreate中setContentView之前写上如下代码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">getWindow</span><span class=\"params\">()</span></span>.setSoftInputMode(WindowManager<span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.SOFT_INPUT_ADJUST_PAN</span>)</span><br></pre></td></tr></table></figure>\n<p>方法二、在项目的AndroidManifest.xml文件中界面对应<activity>里加上 <code>android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot;</code>,这样会让屏幕整体上移。如果加上的是<code>android:windowSoftInputMode=&quot;adjustPan&quot;</code>这样键盘就会覆盖屏幕。</activity></p>\n<p>方法三、把顶级的layout替换为ScrollView, 或者在顶级的layout外再嵌套一层ScrollView。这样页面就可以一起滚动了，软键盘会一直处于底部。</p>\n<p><strong>注意：</strong> 方法一和二应该是同一种方法，只不过一个是在代码中实现一个是在xml中实现。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当在Android的layout设计里面如果输入框过多，则在输入弹出软键盘的时候，下面的输入框会有一部分被软件盘挡住，从而不能获取焦点输入。</p>\n</blockquote>\n<p><strong>解决办法：</strong></p>\n<p>方法一、在Activity中的onCreate中setContentView之前写上如下代码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">getWindow</span><span class=\"params\">()</span></span>.setSoftInputMode(WindowManager<span class=\"selector-class\">.LayoutParams</span><span class=\"selector-class\">.SOFT_INPUT_ADJUST_PAN</span>)</span><br></pre></td></tr></table></figure>\n<p>方法二、在项目的AndroidManifest.xml文件中界面对应<activity>里加上 <code>android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot;</code>,这样会让屏幕整体上移。如果加上的是<code>android:windowSoftInputMode=&quot;adjustPan&quot;</code>这样键盘就会覆盖屏幕。</activity></p>\n<p>方法三、把顶级的layout替换为ScrollView, 或者在顶级的layout外再嵌套一层ScrollView。这样页面就可以一起滚动了，软键盘会一直处于底部。</p>\n<p><strong>注意：</strong> 方法一和二应该是同一种方法，只不过一个是在代码中实现一个是在xml中实现。</p>\n"},{"title":"vscode(Visual Studio Code)工具快捷键","date":"2019-09-29T02:30:19.000Z","_content":"\nvscode（Visual Studio Code）工具 快捷键\n\n<!-- more -->\n\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + Shift + P，F1|显示命令面板 Show Command Palette|\n|Ctrl + P|快速打开 Quick Open|\n|Ctrl + Shift + N|新窗口/实例 New window/instance|\n|Ctrl + Shift + W|关闭窗口/实例 Close window/instance|\n\n\n基础编辑 Basic editing\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+X|剪切行（空选定） Cut line (empty selection)|\n|Ctrl+C|复制行（空选定）Copy line (empty selection)|\n|Alt+ ↑ / ↓|向上/向下移动行 Move line up/down|\n|Shift+Alt + ↓ / ↑|向上/向下复制行 Copy line up/down|\n|Ctrl+Shift+K|删除行 Delete line|\n|Ctrl+Enter|在下面插入行 Insert line below|\n|Ctrl+Shift+Enter|在上面插入行 Insert line above|\n|Ctrl+Shift+\\ |跳到匹配的括号 Jump to matching bracket|\n|Ctrl+] / [|缩进/缩进行 Indent/outdent line|\n|Home|\t转到行首 Go to beginning of line|\n|End|\t转到行尾 Go to end of line|\n|Ctrl+Home|\t转到文件开头 Go to beginning of file|\n|Ctrl+End|\t转到文件末尾 Go to end of file|\n|Ctrl+↑ / ↓|\t向上/向下滚动行 Scroll line up/down|\n|Alt+PgUp /PgDown|\t向上/向下滚动页面 Scroll page up/down|\n|Ctrl+Shift+[|\t折叠（折叠）区域 Fold (collapse) region|\n|Ctrl+Shift+]\t|展开（未折叠）区域 Unfold (uncollapse) region|\n|Ctrl+K Ctrl+[|\t折叠（未折叠）所有子区域 Fold (collapse) all subregions|\n|Ctrl+K Ctrl+]|\t展开（未折叠）所有子区域 Unfold (uncollapse) all subregions|\n|Ctrl+K Ctrl+0|\t折叠（折叠）所有区域 Fold (collapse) all regions|\n|Ctrl+K Ctrl+J|\t展开（未折叠）所有区域 Unfold (uncollapse) all regions|\n|Ctrl+K Ctrl+C|\t添加行注释 Add line comment|\n|Ctrl+K Ctrl+U|\t删除行注释 Remove line comment|\n|Ctrl+/|\t切换行注释 Toggle line comment|\n|Shift+Alt+A|\t切换块注释 Toggle block comment|\n|Alt+Z\t|切换换行 Toggle word wrap|\n\n导航 Navigation\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + T|\t显示所有符号 Show all Symbols|\n|Ctrl + G|\t转到行... Go to Line...|\n|Ctrl + P|\t转到文件... Go to File...|\n|Ctrl + Shift + O|\t转到符号... Go to Symbol...|\n|Ctrl + Shift + M|\t显示问题面板 Show Problems panel|\n|F8\t|转到下一个错误或警告 Go to next error or warning|\n|Shift + F8|\t转到上一个错误或警告 Go to previous error or warning|\n|Ctrl + Shift + Tab|\t导航编辑器组历史记录 Navigate editor group history|\n|Alt + ←/→|\t返回/前进 Go back / forward|\n|Ctrl + M|\t切换选项卡移动焦点 Toggle Tab moves focus|\n\n搜索和替换 Search and replace\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + F\t|查找 Find|\n|Ctrl + H\t|替换 Replace|\n|F3 / Shift + F3\t|查找下一个/上一个 Find next/previous|\n|Alt + Enter\t|选择查找匹配的所有出现 Select all occurences of Find match|\n|Ctrl + D\t|将选择添加到下一个查找匹配 Add selection to next Find match|\n|Ctrl + K Ctrl + D\t|将最后一个选择移至下一个查找匹配项 Move last selection to next Find match|\n|Alt + C / R / W |\t切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word|\n\n多光标和选择 Multi-cursor and selection\n\n|按Press|功能Function|\n|:--:|:--:|\n|Alt +单击\t|插入光标 Insert cursor|\n|Ctrl + Alt +↑/↓\t| 在上/下插入光标 Insert cursor above / below|\n|Ctrl + U\t| 撤消上一个光标操作 Undo last cursor operation|\n|Shift + Alt + I |\t在选定的每一行的末尾插入光标 Insert cursor at end of each line selected|\n|Ctrl + I\t| 选择当前行 Select current line|\n|Ctrl + Shift + L |\t选择当前选择的所有出现 Select all occurrences of current selection|\n|Ctrl + F2|\t选择当前字的所有出现 Select all occurrences of current word|\n|Shift + Alt + →\t | 展开选择 Expand selection|\n|Shift + Alt + ←\t | 缩小选择 Shrink selection|\n|Shift + Alt + （拖动鼠标）\t| 列（框）选择 Column (box) selection|\n|Ctrl + Shift + Alt +（箭头键） |\t列（框）选择 Column (box) selection|\n|Ctrl + Shift + Alt + PgUp / PgDown\t| 列（框）选择页上/下 Column (box) selection page up/down|\n\n丰富的语言编辑 Rich languages editing\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + 空格|\t触发建议 Trigger suggestion|\n|Ctrl + Shift + Space|\t触发器参数提示 Trigger parameter hints|\n|Tab Emmet|\t展开缩写 Emmet expand abbreviation|\n|Shift + Alt + F\t| 格式化文档 Format document|\n|Ctrl + K Ctrl + F |\t格式选定区域 Format selection|\n|F12|\t转到定义 Go to Definition|\n|Alt + F12|\tPeek定义 Peek Definition|\n|Ctrl + K| F12\t打开定义到边 Open Definition to the side|\n|Ctrl + .\t| 快速解决 Quick Fix|\n|Shift + F12|\t显示引用 Show References|\n|F2\t重命名符号| Rename Symbol|\n|Ctrl + Shift + . /，\t| 替换为下一个/上一个值 Replace with next/previous value|\n|Ctrl + K Ctrl + X |\t修剪尾随空格 Trim trailing whitespace|\n|Ctrl + K M\t| 更改文件语言 Change file language|\n\n编辑器管理 Editor management\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+F4, Ctrl+W\t| 关闭编辑器 Close editor|\n|Ctrl+K F\t| 关闭文件夹 Close folder|\n|Ctrl+\\\t| 拆分编辑器 Split editor|\n|Ctrl+ 1 / 2 / 3\t| 聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group|\n|Ctrl+K Ctrl+ ←/→\t| 聚焦到上一个/下一个编辑器组 Focus into previous/next editor group|\n|Ctrl+Shift+PgUp / PgDown |\t向左/向右移动编辑器 Move editor left/right|\n|Ctrl+K ← / →\t |移动活动编辑器组 Move active editor group|\n\n文件管理 File management\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+N|\t新文件 New File|\n|Ctrl+O|\t打开文件... Open File...|\n|Ctrl+S|\t保存 Save|\n|Ctrl+Shift+S\t|另存为... Save As...|\n|Ctrl+K S\t|全部保存 Save All|\n|Ctrl+F4\t|关闭 Close|\n|Ctrl+K Ctrl+W\t|关闭所有 Close All|\n|Ctrl+Shift+T|\t重新打开关闭的编辑器 Reopen closed editor|\n|Ctrl+K\t|输入保持打开 Enter Keep Open|\n|Ctrl+Tab\t|打开下一个 Open next|\n|Ctrl+Shift+Tab\t|打开上一个 Open previous|\n|Ctrl+K P\t|复制活动文件的路径 Copy path of active file|\n|Ctrl+K R\t|显示资源管理器中的活动文件 Reveal active file in Explorer|\n|Ctrl+K O\t|显示新窗口/实例中的活动文件 Show active file in new window/instance|\n\n显示 Display\n\n|按Press|功能Function|\n|:--:|:--:|\n|F11\t|切换全屏 Toggle full screen|\n|Shift+Alt+1\t|切换编辑器布局 Toggle editor layout|\n|Ctrl+ = / -\t|放大/缩小 Zoom in/out|\n|Ctrl+B\t|切换侧栏可见性 Toggle Sidebar visibility|\n|Ctrl+Shift+E\t|显示浏览器/切换焦点 Show Explorer / Toggle focus|\n|Ctrl+Shift+F\t|显示搜索 Show Search|\n|Ctrl+Shift+G\t|显示Git Show Git|\n|Ctrl+Shift+D\t|显示调试 Show Debug|\n|Ctrl+Shift+X\t|显示扩展 Show Extensions|\n|Ctrl+Shift+H\t|替换文件 Replace in files|\n|Ctrl+Shift+J\t|切换搜索详细信息 Toggle Search details|\n|Ctrl+Shift+C\t|打开新命令提示符/终端 Open new command prompt/terminal|\n|Ctrl+Shift+U\t|显示输出面板 Show Output panel|\n|Ctrl+Shift+V\t|切换Markdown预览 Toggle Markdown preview|\n|Ctrl+K V\t|从旁边打开Markdown预览 Open Markdown preview to the side|\n\n调试 Debug\n\n|按Press|功能Function|\n|:--:|:--:|\n|F9\t|切换断点 Toggle breakpoint|\n|F5\t|开始/继续 Start/Continue|\n|Shift+F5|\t停止 Stop|\n|F11 / Shift+F11\t|下一步/上一步 Step into/out|\n|F10\t|跳过 Step over|\n|Ctrl+K Ctrl+I\t|显示悬停 Show hover|\n\n集成终端 Integrated terminal\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+`\t|显示集成终端 Show integrated terminal|\n|Ctrl+Shift+`\t|创建新终端 Create new terminal|\n|Ctrl+Shift+C\t|复制选定 Copy selection|\n|Ctrl+Shift+V\t|粘贴到活动端子 Paste into active terminal|\n|Ctrl+↑ / ↓\t|向上/向下滚动 Scroll up/down|\n|Shift+PgUp / PgDown|\t向上/向下滚动页面 Scroll page up/down|\n|Ctrl+Home / End\t|滚动到顶部/底部 Scroll to top/bottom|\n\n\n\n\n\n\n","source":"_posts/vscode-Visual-Studio-Code-工具快捷键.md","raw":"---\ntitle: vscode(Visual Studio Code)工具快捷键\ndate: 2019-09-29 10:30:19\ntags: [vscode, 快捷键]\ncategories: vscode\n---\n\nvscode（Visual Studio Code）工具 快捷键\n\n<!-- more -->\n\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + Shift + P，F1|显示命令面板 Show Command Palette|\n|Ctrl + P|快速打开 Quick Open|\n|Ctrl + Shift + N|新窗口/实例 New window/instance|\n|Ctrl + Shift + W|关闭窗口/实例 Close window/instance|\n\n\n基础编辑 Basic editing\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+X|剪切行（空选定） Cut line (empty selection)|\n|Ctrl+C|复制行（空选定）Copy line (empty selection)|\n|Alt+ ↑ / ↓|向上/向下移动行 Move line up/down|\n|Shift+Alt + ↓ / ↑|向上/向下复制行 Copy line up/down|\n|Ctrl+Shift+K|删除行 Delete line|\n|Ctrl+Enter|在下面插入行 Insert line below|\n|Ctrl+Shift+Enter|在上面插入行 Insert line above|\n|Ctrl+Shift+\\ |跳到匹配的括号 Jump to matching bracket|\n|Ctrl+] / [|缩进/缩进行 Indent/outdent line|\n|Home|\t转到行首 Go to beginning of line|\n|End|\t转到行尾 Go to end of line|\n|Ctrl+Home|\t转到文件开头 Go to beginning of file|\n|Ctrl+End|\t转到文件末尾 Go to end of file|\n|Ctrl+↑ / ↓|\t向上/向下滚动行 Scroll line up/down|\n|Alt+PgUp /PgDown|\t向上/向下滚动页面 Scroll page up/down|\n|Ctrl+Shift+[|\t折叠（折叠）区域 Fold (collapse) region|\n|Ctrl+Shift+]\t|展开（未折叠）区域 Unfold (uncollapse) region|\n|Ctrl+K Ctrl+[|\t折叠（未折叠）所有子区域 Fold (collapse) all subregions|\n|Ctrl+K Ctrl+]|\t展开（未折叠）所有子区域 Unfold (uncollapse) all subregions|\n|Ctrl+K Ctrl+0|\t折叠（折叠）所有区域 Fold (collapse) all regions|\n|Ctrl+K Ctrl+J|\t展开（未折叠）所有区域 Unfold (uncollapse) all regions|\n|Ctrl+K Ctrl+C|\t添加行注释 Add line comment|\n|Ctrl+K Ctrl+U|\t删除行注释 Remove line comment|\n|Ctrl+/|\t切换行注释 Toggle line comment|\n|Shift+Alt+A|\t切换块注释 Toggle block comment|\n|Alt+Z\t|切换换行 Toggle word wrap|\n\n导航 Navigation\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + T|\t显示所有符号 Show all Symbols|\n|Ctrl + G|\t转到行... Go to Line...|\n|Ctrl + P|\t转到文件... Go to File...|\n|Ctrl + Shift + O|\t转到符号... Go to Symbol...|\n|Ctrl + Shift + M|\t显示问题面板 Show Problems panel|\n|F8\t|转到下一个错误或警告 Go to next error or warning|\n|Shift + F8|\t转到上一个错误或警告 Go to previous error or warning|\n|Ctrl + Shift + Tab|\t导航编辑器组历史记录 Navigate editor group history|\n|Alt + ←/→|\t返回/前进 Go back / forward|\n|Ctrl + M|\t切换选项卡移动焦点 Toggle Tab moves focus|\n\n搜索和替换 Search and replace\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + F\t|查找 Find|\n|Ctrl + H\t|替换 Replace|\n|F3 / Shift + F3\t|查找下一个/上一个 Find next/previous|\n|Alt + Enter\t|选择查找匹配的所有出现 Select all occurences of Find match|\n|Ctrl + D\t|将选择添加到下一个查找匹配 Add selection to next Find match|\n|Ctrl + K Ctrl + D\t|将最后一个选择移至下一个查找匹配项 Move last selection to next Find match|\n|Alt + C / R / W |\t切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word|\n\n多光标和选择 Multi-cursor and selection\n\n|按Press|功能Function|\n|:--:|:--:|\n|Alt +单击\t|插入光标 Insert cursor|\n|Ctrl + Alt +↑/↓\t| 在上/下插入光标 Insert cursor above / below|\n|Ctrl + U\t| 撤消上一个光标操作 Undo last cursor operation|\n|Shift + Alt + I |\t在选定的每一行的末尾插入光标 Insert cursor at end of each line selected|\n|Ctrl + I\t| 选择当前行 Select current line|\n|Ctrl + Shift + L |\t选择当前选择的所有出现 Select all occurrences of current selection|\n|Ctrl + F2|\t选择当前字的所有出现 Select all occurrences of current word|\n|Shift + Alt + →\t | 展开选择 Expand selection|\n|Shift + Alt + ←\t | 缩小选择 Shrink selection|\n|Shift + Alt + （拖动鼠标）\t| 列（框）选择 Column (box) selection|\n|Ctrl + Shift + Alt +（箭头键） |\t列（框）选择 Column (box) selection|\n|Ctrl + Shift + Alt + PgUp / PgDown\t| 列（框）选择页上/下 Column (box) selection page up/down|\n\n丰富的语言编辑 Rich languages editing\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl + 空格|\t触发建议 Trigger suggestion|\n|Ctrl + Shift + Space|\t触发器参数提示 Trigger parameter hints|\n|Tab Emmet|\t展开缩写 Emmet expand abbreviation|\n|Shift + Alt + F\t| 格式化文档 Format document|\n|Ctrl + K Ctrl + F |\t格式选定区域 Format selection|\n|F12|\t转到定义 Go to Definition|\n|Alt + F12|\tPeek定义 Peek Definition|\n|Ctrl + K| F12\t打开定义到边 Open Definition to the side|\n|Ctrl + .\t| 快速解决 Quick Fix|\n|Shift + F12|\t显示引用 Show References|\n|F2\t重命名符号| Rename Symbol|\n|Ctrl + Shift + . /，\t| 替换为下一个/上一个值 Replace with next/previous value|\n|Ctrl + K Ctrl + X |\t修剪尾随空格 Trim trailing whitespace|\n|Ctrl + K M\t| 更改文件语言 Change file language|\n\n编辑器管理 Editor management\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+F4, Ctrl+W\t| 关闭编辑器 Close editor|\n|Ctrl+K F\t| 关闭文件夹 Close folder|\n|Ctrl+\\\t| 拆分编辑器 Split editor|\n|Ctrl+ 1 / 2 / 3\t| 聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group|\n|Ctrl+K Ctrl+ ←/→\t| 聚焦到上一个/下一个编辑器组 Focus into previous/next editor group|\n|Ctrl+Shift+PgUp / PgDown |\t向左/向右移动编辑器 Move editor left/right|\n|Ctrl+K ← / →\t |移动活动编辑器组 Move active editor group|\n\n文件管理 File management\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+N|\t新文件 New File|\n|Ctrl+O|\t打开文件... Open File...|\n|Ctrl+S|\t保存 Save|\n|Ctrl+Shift+S\t|另存为... Save As...|\n|Ctrl+K S\t|全部保存 Save All|\n|Ctrl+F4\t|关闭 Close|\n|Ctrl+K Ctrl+W\t|关闭所有 Close All|\n|Ctrl+Shift+T|\t重新打开关闭的编辑器 Reopen closed editor|\n|Ctrl+K\t|输入保持打开 Enter Keep Open|\n|Ctrl+Tab\t|打开下一个 Open next|\n|Ctrl+Shift+Tab\t|打开上一个 Open previous|\n|Ctrl+K P\t|复制活动文件的路径 Copy path of active file|\n|Ctrl+K R\t|显示资源管理器中的活动文件 Reveal active file in Explorer|\n|Ctrl+K O\t|显示新窗口/实例中的活动文件 Show active file in new window/instance|\n\n显示 Display\n\n|按Press|功能Function|\n|:--:|:--:|\n|F11\t|切换全屏 Toggle full screen|\n|Shift+Alt+1\t|切换编辑器布局 Toggle editor layout|\n|Ctrl+ = / -\t|放大/缩小 Zoom in/out|\n|Ctrl+B\t|切换侧栏可见性 Toggle Sidebar visibility|\n|Ctrl+Shift+E\t|显示浏览器/切换焦点 Show Explorer / Toggle focus|\n|Ctrl+Shift+F\t|显示搜索 Show Search|\n|Ctrl+Shift+G\t|显示Git Show Git|\n|Ctrl+Shift+D\t|显示调试 Show Debug|\n|Ctrl+Shift+X\t|显示扩展 Show Extensions|\n|Ctrl+Shift+H\t|替换文件 Replace in files|\n|Ctrl+Shift+J\t|切换搜索详细信息 Toggle Search details|\n|Ctrl+Shift+C\t|打开新命令提示符/终端 Open new command prompt/terminal|\n|Ctrl+Shift+U\t|显示输出面板 Show Output panel|\n|Ctrl+Shift+V\t|切换Markdown预览 Toggle Markdown preview|\n|Ctrl+K V\t|从旁边打开Markdown预览 Open Markdown preview to the side|\n\n调试 Debug\n\n|按Press|功能Function|\n|:--:|:--:|\n|F9\t|切换断点 Toggle breakpoint|\n|F5\t|开始/继续 Start/Continue|\n|Shift+F5|\t停止 Stop|\n|F11 / Shift+F11\t|下一步/上一步 Step into/out|\n|F10\t|跳过 Step over|\n|Ctrl+K Ctrl+I\t|显示悬停 Show hover|\n\n集成终端 Integrated terminal\n\n|按Press|功能Function|\n|:--:|:--:|\n|Ctrl+`\t|显示集成终端 Show integrated terminal|\n|Ctrl+Shift+`\t|创建新终端 Create new terminal|\n|Ctrl+Shift+C\t|复制选定 Copy selection|\n|Ctrl+Shift+V\t|粘贴到活动端子 Paste into active terminal|\n|Ctrl+↑ / ↓\t|向上/向下滚动 Scroll up/down|\n|Shift+PgUp / PgDown|\t向上/向下滚动页面 Scroll page up/down|\n|Ctrl+Home / End\t|滚动到顶部/底部 Scroll to top/bottom|\n\n\n\n\n\n\n","slug":"vscode-Visual-Studio-Code-工具快捷键","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg0005csifyl3231qw1","content":"<p>vscode（Visual Studio Code）工具 快捷键</p>\n<a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + P，F1</td>\n<td style=\"text-align:center\">显示命令面板 Show Command Palette</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + P</td>\n<td style=\"text-align:center\">快速打开 Quick Open</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + N</td>\n<td style=\"text-align:center\">新窗口/实例 New window/instance</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + W</td>\n<td style=\"text-align:center\">关闭窗口/实例 Close window/instance</td>\n</tr>\n</tbody>\n</table>\n<p>基础编辑 Basic editing</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+X</td>\n<td style=\"text-align:center\">剪切行（空选定） Cut line (empty selection)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+C</td>\n<td style=\"text-align:center\">复制行（空选定）Copy line (empty selection)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行 Move line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt + ↓ / ↑</td>\n<td style=\"text-align:center\">向上/向下复制行 Copy line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+K</td>\n<td style=\"text-align:center\">删除行 Delete line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Enter</td>\n<td style=\"text-align:center\">在下面插入行 Insert line below</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Enter</td>\n<td style=\"text-align:center\">在上面插入行 Insert line above</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+\\</td>\n<td style=\"text-align:center\">跳到匹配的括号 Jump to matching bracket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+] / [</td>\n<td style=\"text-align:center\">缩进/缩进行 Indent/outdent line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Home</td>\n<td style=\"text-align:center\">转到行首 Go to beginning of line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">转到行尾 Go to end of line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Home</td>\n<td style=\"text-align:center\">转到文件开头 Go to beginning of file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+End</td>\n<td style=\"text-align:center\">转到文件末尾 Go to end of file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下滚动行 Scroll line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+PgUp /PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面 Scroll page up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+[</td>\n<td style=\"text-align:center\">折叠（折叠）区域 Fold (collapse) region</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+]</td>\n<td style=\"text-align:center\">展开（未折叠）区域 Unfold (uncollapse) region</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+[</td>\n<td style=\"text-align:center\">折叠（未折叠）所有子区域 Fold (collapse) all subregions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+]</td>\n<td style=\"text-align:center\">展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+0</td>\n<td style=\"text-align:center\">折叠（折叠）所有区域 Fold (collapse) all regions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+J</td>\n<td style=\"text-align:center\">展开（未折叠）所有区域 Unfold (uncollapse) all regions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+C</td>\n<td style=\"text-align:center\">添加行注释 Add line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+U</td>\n<td style=\"text-align:center\">删除行注释 Remove line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+/</td>\n<td style=\"text-align:center\">切换行注释 Toggle line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt+A</td>\n<td style=\"text-align:center\">切换块注释 Toggle block comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Z</td>\n<td style=\"text-align:center\">切换换行 Toggle word wrap</td>\n</tr>\n</tbody>\n</table>\n<p>导航 Navigation</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + T</td>\n<td style=\"text-align:center\">显示所有符号 Show all Symbols</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + G</td>\n<td style=\"text-align:center\">转到行… Go to Line…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + P</td>\n<td style=\"text-align:center\">转到文件… Go to File…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + O</td>\n<td style=\"text-align:center\">转到符号… Go to Symbol…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + M</td>\n<td style=\"text-align:center\">显示问题面板 Show Problems panel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F8</td>\n<td style=\"text-align:center\">转到下一个错误或警告 Go to next error or warning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + F8</td>\n<td style=\"text-align:center\">转到上一个错误或警告 Go to previous error or warning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Tab</td>\n<td style=\"text-align:center\">导航编辑器组历史记录 Navigate editor group history</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + ←/→</td>\n<td style=\"text-align:center\">返回/前进 Go back / forward</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + M</td>\n<td style=\"text-align:center\">切换选项卡移动焦点 Toggle Tab moves focus</td>\n</tr>\n</tbody>\n</table>\n<p>搜索和替换 Search and replace</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + F</td>\n<td style=\"text-align:center\">查找 Find</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + H</td>\n<td style=\"text-align:center\">替换 Replace</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F3 / Shift + F3</td>\n<td style=\"text-align:center\">查找下一个/上一个 Find next/previous</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + Enter</td>\n<td style=\"text-align:center\">选择查找匹配的所有出现 Select all occurences of Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + D</td>\n<td style=\"text-align:center\">将选择添加到下一个查找匹配 Add selection to next Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + D</td>\n<td style=\"text-align:center\">将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + C / R / W</td>\n<td style=\"text-align:center\">切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td>\n</tr>\n</tbody>\n</table>\n<p>多光标和选择 Multi-cursor and selection</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Alt +单击</td>\n<td style=\"text-align:center\">插入光标 Insert cursor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Alt +↑/↓</td>\n<td style=\"text-align:center\">在上/下插入光标 Insert cursor above / below</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + U</td>\n<td style=\"text-align:center\">撤消上一个光标操作 Undo last cursor operation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + I</td>\n<td style=\"text-align:center\">在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + I</td>\n<td style=\"text-align:center\">选择当前行 Select current line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + L</td>\n<td style=\"text-align:center\">选择当前选择的所有出现 Select all occurrences of current selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + F2</td>\n<td style=\"text-align:center\">选择当前字的所有出现 Select all occurrences of current word</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + →</td>\n<td style=\"text-align:center\">展开选择 Expand selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + ←</td>\n<td style=\"text-align:center\">缩小选择 Shrink selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + （拖动鼠标）</td>\n<td style=\"text-align:center\">列（框）选择 Column (box) selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Alt +（箭头键）</td>\n<td style=\"text-align:center\">列（框）选择 Column (box) selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Alt + PgUp / PgDown</td>\n<td style=\"text-align:center\">列（框）选择页上/下 Column (box) selection page up/down</td>\n</tr>\n</tbody>\n</table>\n<p>丰富的语言编辑 Rich languages editing</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + 空格</td>\n<td style=\"text-align:center\">触发建议 Trigger suggestion</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Space</td>\n<td style=\"text-align:center\">触发器参数提示 Trigger parameter hints</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Tab Emmet</td>\n<td style=\"text-align:center\">展开缩写 Emmet expand abbreviation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + F</td>\n<td style=\"text-align:center\">格式化文档 Format document</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + F</td>\n<td style=\"text-align:center\">格式选定区域 Format selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F12</td>\n<td style=\"text-align:center\">转到定义 Go to Definition</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + F12</td>\n<td style=\"text-align:center\">Peek定义 Peek Definition</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K</td>\n<td style=\"text-align:center\">F12\t打开定义到边 Open Definition to the side</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + .</td>\n<td style=\"text-align:center\">快速解决 Quick Fix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + F12</td>\n<td style=\"text-align:center\">显示引用 Show References</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F2\t重命名符号</td>\n<td style=\"text-align:center\">Rename Symbol</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + . /，</td>\n<td style=\"text-align:center\">替换为下一个/上一个值 Replace with next/previous value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + X</td>\n<td style=\"text-align:center\">修剪尾随空格 Trim trailing whitespace</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K M</td>\n<td style=\"text-align:center\">更改文件语言 Change file language</td>\n</tr>\n</tbody>\n</table>\n<p>编辑器管理 Editor management</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+F4, Ctrl+W</td>\n<td style=\"text-align:center\">关闭编辑器 Close editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K F</td>\n<td style=\"text-align:center\">关闭文件夹 Close folder</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+\\</td>\n<td style=\"text-align:center\">拆分编辑器 Split editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+ 1 / 2 / 3</td>\n<td style=\"text-align:center\">聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+ ←/→</td>\n<td style=\"text-align:center\">聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+PgUp / PgDown</td>\n<td style=\"text-align:center\">向左/向右移动编辑器 Move editor left/right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K ← / →</td>\n<td style=\"text-align:center\">移动活动编辑器组 Move active editor group</td>\n</tr>\n</tbody>\n</table>\n<p>文件管理 File management</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+N</td>\n<td style=\"text-align:center\">新文件 New File</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+O</td>\n<td style=\"text-align:center\">打开文件… Open File…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+S</td>\n<td style=\"text-align:center\">保存 Save</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+S</td>\n<td style=\"text-align:center\">另存为… Save As…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K S</td>\n<td style=\"text-align:center\">全部保存 Save All</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F4</td>\n<td style=\"text-align:center\">关闭 Close</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+W</td>\n<td style=\"text-align:center\">关闭所有 Close All</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+T</td>\n<td style=\"text-align:center\">重新打开关闭的编辑器 Reopen closed editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K</td>\n<td style=\"text-align:center\">输入保持打开 Enter Keep Open</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Tab</td>\n<td style=\"text-align:center\">打开下一个 Open next</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Tab</td>\n<td style=\"text-align:center\">打开上一个 Open previous</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K P</td>\n<td style=\"text-align:center\">复制活动文件的路径 Copy path of active file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K R</td>\n<td style=\"text-align:center\">显示资源管理器中的活动文件 Reveal active file in Explorer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K O</td>\n<td style=\"text-align:center\">显示新窗口/实例中的活动文件 Show active file in new window/instance</td>\n</tr>\n</tbody>\n</table>\n<p>显示 Display</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">F11</td>\n<td style=\"text-align:center\">切换全屏 Toggle full screen</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt+1</td>\n<td style=\"text-align:center\">切换编辑器布局 Toggle editor layout</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+ = / -</td>\n<td style=\"text-align:center\">放大/缩小 Zoom in/out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+B</td>\n<td style=\"text-align:center\">切换侧栏可见性 Toggle Sidebar visibility</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+E</td>\n<td style=\"text-align:center\">显示浏览器/切换焦点 Show Explorer / Toggle focus</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+F</td>\n<td style=\"text-align:center\">显示搜索 Show Search</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+G</td>\n<td style=\"text-align:center\">显示Git Show Git</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+D</td>\n<td style=\"text-align:center\">显示调试 Show Debug</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+X</td>\n<td style=\"text-align:center\">显示扩展 Show Extensions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+H</td>\n<td style=\"text-align:center\">替换文件 Replace in files</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+J</td>\n<td style=\"text-align:center\">切换搜索详细信息 Toggle Search details</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+C</td>\n<td style=\"text-align:center\">打开新命令提示符/终端 Open new command prompt/terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+U</td>\n<td style=\"text-align:center\">显示输出面板 Show Output panel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+V</td>\n<td style=\"text-align:center\">切换Markdown预览 Toggle Markdown preview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K V</td>\n<td style=\"text-align:center\">从旁边打开Markdown预览 Open Markdown preview to the side</td>\n</tr>\n</tbody>\n</table>\n<p>调试 Debug</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">F9</td>\n<td style=\"text-align:center\">切换断点 Toggle breakpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F5</td>\n<td style=\"text-align:center\">开始/继续 Start/Continue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+F5</td>\n<td style=\"text-align:center\">停止 Stop</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F11 / Shift+F11</td>\n<td style=\"text-align:center\">下一步/上一步 Step into/out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F10</td>\n<td style=\"text-align:center\">跳过 Step over</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+I</td>\n<td style=\"text-align:center\">显示悬停 Show hover</td>\n</tr>\n</tbody>\n</table>\n<p>集成终端 Integrated terminal</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+`</td>\n<td style=\"text-align:center\">显示集成终端 Show integrated terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+`</td>\n<td style=\"text-align:center\">创建新终端 Create new terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+C</td>\n<td style=\"text-align:center\">复制选定 Copy selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+V</td>\n<td style=\"text-align:center\">粘贴到活动端子 Paste into active terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下滚动 Scroll up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+PgUp / PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面 Scroll page up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Home / End</td>\n<td style=\"text-align:center\">滚动到顶部/底部 Scroll to top/bottom</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>vscode（Visual Studio Code）工具 快捷键</p>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + P，F1</td>\n<td style=\"text-align:center\">显示命令面板 Show Command Palette</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + P</td>\n<td style=\"text-align:center\">快速打开 Quick Open</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + N</td>\n<td style=\"text-align:center\">新窗口/实例 New window/instance</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + W</td>\n<td style=\"text-align:center\">关闭窗口/实例 Close window/instance</td>\n</tr>\n</tbody>\n</table>\n<p>基础编辑 Basic editing</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+X</td>\n<td style=\"text-align:center\">剪切行（空选定） Cut line (empty selection)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+C</td>\n<td style=\"text-align:center\">复制行（空选定）Copy line (empty selection)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+ ↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下移动行 Move line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt + ↓ / ↑</td>\n<td style=\"text-align:center\">向上/向下复制行 Copy line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+K</td>\n<td style=\"text-align:center\">删除行 Delete line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Enter</td>\n<td style=\"text-align:center\">在下面插入行 Insert line below</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Enter</td>\n<td style=\"text-align:center\">在上面插入行 Insert line above</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+\\</td>\n<td style=\"text-align:center\">跳到匹配的括号 Jump to matching bracket</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+] / [</td>\n<td style=\"text-align:center\">缩进/缩进行 Indent/outdent line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Home</td>\n<td style=\"text-align:center\">转到行首 Go to beginning of line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">转到行尾 Go to end of line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Home</td>\n<td style=\"text-align:center\">转到文件开头 Go to beginning of file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+End</td>\n<td style=\"text-align:center\">转到文件末尾 Go to end of file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下滚动行 Scroll line up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+PgUp /PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面 Scroll page up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+[</td>\n<td style=\"text-align:center\">折叠（折叠）区域 Fold (collapse) region</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+]</td>\n<td style=\"text-align:center\">展开（未折叠）区域 Unfold (uncollapse) region</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+[</td>\n<td style=\"text-align:center\">折叠（未折叠）所有子区域 Fold (collapse) all subregions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+]</td>\n<td style=\"text-align:center\">展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+0</td>\n<td style=\"text-align:center\">折叠（折叠）所有区域 Fold (collapse) all regions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+J</td>\n<td style=\"text-align:center\">展开（未折叠）所有区域 Unfold (uncollapse) all regions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+C</td>\n<td style=\"text-align:center\">添加行注释 Add line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+U</td>\n<td style=\"text-align:center\">删除行注释 Remove line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+/</td>\n<td style=\"text-align:center\">切换行注释 Toggle line comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt+A</td>\n<td style=\"text-align:center\">切换块注释 Toggle block comment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt+Z</td>\n<td style=\"text-align:center\">切换换行 Toggle word wrap</td>\n</tr>\n</tbody>\n</table>\n<p>导航 Navigation</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + T</td>\n<td style=\"text-align:center\">显示所有符号 Show all Symbols</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + G</td>\n<td style=\"text-align:center\">转到行… Go to Line…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + P</td>\n<td style=\"text-align:center\">转到文件… Go to File…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + O</td>\n<td style=\"text-align:center\">转到符号… Go to Symbol…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + M</td>\n<td style=\"text-align:center\">显示问题面板 Show Problems panel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F8</td>\n<td style=\"text-align:center\">转到下一个错误或警告 Go to next error or warning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + F8</td>\n<td style=\"text-align:center\">转到上一个错误或警告 Go to previous error or warning</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Tab</td>\n<td style=\"text-align:center\">导航编辑器组历史记录 Navigate editor group history</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + ←/→</td>\n<td style=\"text-align:center\">返回/前进 Go back / forward</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + M</td>\n<td style=\"text-align:center\">切换选项卡移动焦点 Toggle Tab moves focus</td>\n</tr>\n</tbody>\n</table>\n<p>搜索和替换 Search and replace</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + F</td>\n<td style=\"text-align:center\">查找 Find</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + H</td>\n<td style=\"text-align:center\">替换 Replace</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F3 / Shift + F3</td>\n<td style=\"text-align:center\">查找下一个/上一个 Find next/previous</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + Enter</td>\n<td style=\"text-align:center\">选择查找匹配的所有出现 Select all occurences of Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + D</td>\n<td style=\"text-align:center\">将选择添加到下一个查找匹配 Add selection to next Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + D</td>\n<td style=\"text-align:center\">将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + C / R / W</td>\n<td style=\"text-align:center\">切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td>\n</tr>\n</tbody>\n</table>\n<p>多光标和选择 Multi-cursor and selection</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Alt +单击</td>\n<td style=\"text-align:center\">插入光标 Insert cursor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Alt +↑/↓</td>\n<td style=\"text-align:center\">在上/下插入光标 Insert cursor above / below</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + U</td>\n<td style=\"text-align:center\">撤消上一个光标操作 Undo last cursor operation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + I</td>\n<td style=\"text-align:center\">在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + I</td>\n<td style=\"text-align:center\">选择当前行 Select current line</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + L</td>\n<td style=\"text-align:center\">选择当前选择的所有出现 Select all occurrences of current selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + F2</td>\n<td style=\"text-align:center\">选择当前字的所有出现 Select all occurrences of current word</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + →</td>\n<td style=\"text-align:center\">展开选择 Expand selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + ←</td>\n<td style=\"text-align:center\">缩小选择 Shrink selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + （拖动鼠标）</td>\n<td style=\"text-align:center\">列（框）选择 Column (box) selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Alt +（箭头键）</td>\n<td style=\"text-align:center\">列（框）选择 Column (box) selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Alt + PgUp / PgDown</td>\n<td style=\"text-align:center\">列（框）选择页上/下 Column (box) selection page up/down</td>\n</tr>\n</tbody>\n</table>\n<p>丰富的语言编辑 Rich languages editing</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl + 空格</td>\n<td style=\"text-align:center\">触发建议 Trigger suggestion</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + Space</td>\n<td style=\"text-align:center\">触发器参数提示 Trigger parameter hints</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Tab Emmet</td>\n<td style=\"text-align:center\">展开缩写 Emmet expand abbreviation</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + Alt + F</td>\n<td style=\"text-align:center\">格式化文档 Format document</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + F</td>\n<td style=\"text-align:center\">格式选定区域 Format selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F12</td>\n<td style=\"text-align:center\">转到定义 Go to Definition</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Alt + F12</td>\n<td style=\"text-align:center\">Peek定义 Peek Definition</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K</td>\n<td style=\"text-align:center\">F12\t打开定义到边 Open Definition to the side</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + .</td>\n<td style=\"text-align:center\">快速解决 Quick Fix</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift + F12</td>\n<td style=\"text-align:center\">显示引用 Show References</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F2\t重命名符号</td>\n<td style=\"text-align:center\">Rename Symbol</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + Shift + . /，</td>\n<td style=\"text-align:center\">替换为下一个/上一个值 Replace with next/previous value</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K Ctrl + X</td>\n<td style=\"text-align:center\">修剪尾随空格 Trim trailing whitespace</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl + K M</td>\n<td style=\"text-align:center\">更改文件语言 Change file language</td>\n</tr>\n</tbody>\n</table>\n<p>编辑器管理 Editor management</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+F4, Ctrl+W</td>\n<td style=\"text-align:center\">关闭编辑器 Close editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K F</td>\n<td style=\"text-align:center\">关闭文件夹 Close folder</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+\\</td>\n<td style=\"text-align:center\">拆分编辑器 Split editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+ 1 / 2 / 3</td>\n<td style=\"text-align:center\">聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+ ←/→</td>\n<td style=\"text-align:center\">聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+PgUp / PgDown</td>\n<td style=\"text-align:center\">向左/向右移动编辑器 Move editor left/right</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K ← / →</td>\n<td style=\"text-align:center\">移动活动编辑器组 Move active editor group</td>\n</tr>\n</tbody>\n</table>\n<p>文件管理 File management</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+N</td>\n<td style=\"text-align:center\">新文件 New File</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+O</td>\n<td style=\"text-align:center\">打开文件… Open File…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+S</td>\n<td style=\"text-align:center\">保存 Save</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+S</td>\n<td style=\"text-align:center\">另存为… Save As…</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K S</td>\n<td style=\"text-align:center\">全部保存 Save All</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+F4</td>\n<td style=\"text-align:center\">关闭 Close</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+W</td>\n<td style=\"text-align:center\">关闭所有 Close All</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+T</td>\n<td style=\"text-align:center\">重新打开关闭的编辑器 Reopen closed editor</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K</td>\n<td style=\"text-align:center\">输入保持打开 Enter Keep Open</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Tab</td>\n<td style=\"text-align:center\">打开下一个 Open next</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+Tab</td>\n<td style=\"text-align:center\">打开上一个 Open previous</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K P</td>\n<td style=\"text-align:center\">复制活动文件的路径 Copy path of active file</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K R</td>\n<td style=\"text-align:center\">显示资源管理器中的活动文件 Reveal active file in Explorer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K O</td>\n<td style=\"text-align:center\">显示新窗口/实例中的活动文件 Show active file in new window/instance</td>\n</tr>\n</tbody>\n</table>\n<p>显示 Display</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">F11</td>\n<td style=\"text-align:center\">切换全屏 Toggle full screen</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+Alt+1</td>\n<td style=\"text-align:center\">切换编辑器布局 Toggle editor layout</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+ = / -</td>\n<td style=\"text-align:center\">放大/缩小 Zoom in/out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+B</td>\n<td style=\"text-align:center\">切换侧栏可见性 Toggle Sidebar visibility</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+E</td>\n<td style=\"text-align:center\">显示浏览器/切换焦点 Show Explorer / Toggle focus</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+F</td>\n<td style=\"text-align:center\">显示搜索 Show Search</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+G</td>\n<td style=\"text-align:center\">显示Git Show Git</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+D</td>\n<td style=\"text-align:center\">显示调试 Show Debug</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+X</td>\n<td style=\"text-align:center\">显示扩展 Show Extensions</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+H</td>\n<td style=\"text-align:center\">替换文件 Replace in files</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+J</td>\n<td style=\"text-align:center\">切换搜索详细信息 Toggle Search details</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+C</td>\n<td style=\"text-align:center\">打开新命令提示符/终端 Open new command prompt/terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+U</td>\n<td style=\"text-align:center\">显示输出面板 Show Output panel</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+V</td>\n<td style=\"text-align:center\">切换Markdown预览 Toggle Markdown preview</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K V</td>\n<td style=\"text-align:center\">从旁边打开Markdown预览 Open Markdown preview to the side</td>\n</tr>\n</tbody>\n</table>\n<p>调试 Debug</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">F9</td>\n<td style=\"text-align:center\">切换断点 Toggle breakpoint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F5</td>\n<td style=\"text-align:center\">开始/继续 Start/Continue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+F5</td>\n<td style=\"text-align:center\">停止 Stop</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F11 / Shift+F11</td>\n<td style=\"text-align:center\">下一步/上一步 Step into/out</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">F10</td>\n<td style=\"text-align:center\">跳过 Step over</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+K Ctrl+I</td>\n<td style=\"text-align:center\">显示悬停 Show hover</td>\n</tr>\n</tbody>\n</table>\n<p>集成终端 Integrated terminal</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按Press</th>\n<th style=\"text-align:center\">功能Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Ctrl+`</td>\n<td style=\"text-align:center\">显示集成终端 Show integrated terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+`</td>\n<td style=\"text-align:center\">创建新终端 Create new terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+C</td>\n<td style=\"text-align:center\">复制选定 Copy selection</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Shift+V</td>\n<td style=\"text-align:center\">粘贴到活动端子 Paste into active terminal</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+↑ / ↓</td>\n<td style=\"text-align:center\">向上/向下滚动 Scroll up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Shift+PgUp / PgDown</td>\n<td style=\"text-align:center\">向上/向下滚动页面 Scroll page up/down</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ctrl+Home / End</td>\n<td style=\"text-align:center\">滚动到顶部/底部 Scroll to top/bottom</td>\n</tr>\n</tbody>\n</table>"},{"title":"从Android手机内提取已安装的apk文件","date":"2018-04-09T06:44:50.000Z","_content":"\n假如你在其他手机上看到一个应用，又不知道从哪去下载，而那个手机的安装包已经被删除掉，那怎样安装一个和那个手机上一模一样的应用呢？办法就是从那个手机中备份一份，然后传给你。也许你见过一些其他软件有备份apk的功能，也是这个原理。\n\n<!-- more -->\n\n#### 找到具体的应用的包名\n\n连接到手机，用adb命令执行如下命令：\n\n```\n\t$ adb shell pm list package\n```\n输出结果为：\n\n```\npackage:com.mediatek.gba\npackage:com.mediatek.ims\npackage:com.flyme.roamingpay\npackage:com.github.shadowsocks\npackage:org.simalliance.openmobileapi.uicc2terminal\npackage:com.android.providers.telephony\npackage:com.meizu.documentsui\npackage:com.goodix.fingerprint\npackage:com.android.providers.calendar\npackage:com.zgczw.chezhiwang\npackage:cc.mianfeinovel\npackage:com.android.providers.media\n......\n```\n\n#### 找到需要备份的安装包的位置\n\n如果要找到应用包名为：cc.mianfeinovel\n\n可通过如下命令，找到具体安装包的位置：\n\n```\n$ adb shell pm path cc.mianfeinovel\n```\n\n输出结果为：\n\n```\npackage:/data/app/cc.mianfeinovel-2/base.apk\n```\n\n#### 把安装包取出\n\n可通过adb的pull命令：\n\n```\n$ adb pull /data/app/cc.mianfeinovel-2/base.apk\n```\n结果为：\n\n```\n/data/app/cc.mianfeinovel-2/base.apk: 1 file pulled. 5.7 MB/s (11417386 bytes in 1.913s)\n\n```\n\n此操作手机无需root,也就是说每个手机都可以这样操作。","source":"_posts/从Android手机内提取已安装的apk文件.md","raw":"---\ntitle: 从Android手机内提取已安装的apk文件\ndate: 2018-04-09 14:44:50\ntags: [apk, backup]\ncategories: android\n---\n\n假如你在其他手机上看到一个应用，又不知道从哪去下载，而那个手机的安装包已经被删除掉，那怎样安装一个和那个手机上一模一样的应用呢？办法就是从那个手机中备份一份，然后传给你。也许你见过一些其他软件有备份apk的功能，也是这个原理。\n\n<!-- more -->\n\n#### 找到具体的应用的包名\n\n连接到手机，用adb命令执行如下命令：\n\n```\n\t$ adb shell pm list package\n```\n输出结果为：\n\n```\npackage:com.mediatek.gba\npackage:com.mediatek.ims\npackage:com.flyme.roamingpay\npackage:com.github.shadowsocks\npackage:org.simalliance.openmobileapi.uicc2terminal\npackage:com.android.providers.telephony\npackage:com.meizu.documentsui\npackage:com.goodix.fingerprint\npackage:com.android.providers.calendar\npackage:com.zgczw.chezhiwang\npackage:cc.mianfeinovel\npackage:com.android.providers.media\n......\n```\n\n#### 找到需要备份的安装包的位置\n\n如果要找到应用包名为：cc.mianfeinovel\n\n可通过如下命令，找到具体安装包的位置：\n\n```\n$ adb shell pm path cc.mianfeinovel\n```\n\n输出结果为：\n\n```\npackage:/data/app/cc.mianfeinovel-2/base.apk\n```\n\n#### 把安装包取出\n\n可通过adb的pull命令：\n\n```\n$ adb pull /data/app/cc.mianfeinovel-2/base.apk\n```\n结果为：\n\n```\n/data/app/cc.mianfeinovel-2/base.apk: 1 file pulled. 5.7 MB/s (11417386 bytes in 1.913s)\n\n```\n\n此操作手机无需root,也就是说每个手机都可以这样操作。","slug":"从Android手机内提取已安装的apk文件","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg2005gsifyfypmnvzu","content":"<p>假如你在其他手机上看到一个应用，又不知道从哪去下载，而那个手机的安装包已经被删除掉，那怎样安装一个和那个手机上一模一样的应用呢？办法就是从那个手机中备份一份，然后传给你。也许你见过一些其他软件有备份apk的功能，也是这个原理。</p>\n<a id=\"more\"></a>\n<h4 id=\"找到具体的应用的包名\"><a class=\"markdownIt-Anchor\" href=\"#找到具体的应用的包名\"></a> 找到具体的应用的包名</h4>\n<p>连接到手机，用adb命令执行如下命令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb <span class=\"keyword\">shell</span><span class=\"bash\"> pm list package</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package:com<span class=\"selector-class\">.mediatek</span><span class=\"selector-class\">.gba</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.mediatek</span><span class=\"selector-class\">.ims</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.flyme</span><span class=\"selector-class\">.roamingpay</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.github</span><span class=\"selector-class\">.shadowsocks</span></span><br><span class=\"line\">package:org<span class=\"selector-class\">.simalliance</span><span class=\"selector-class\">.openmobileapi</span><span class=\"selector-class\">.uicc2terminal</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.telephony</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.meizu</span><span class=\"selector-class\">.documentsui</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.goodix</span><span class=\"selector-class\">.fingerprint</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.calendar</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.zgczw</span><span class=\"selector-class\">.chezhiwang</span></span><br><span class=\"line\">package:cc.mianfeinovel</span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.media</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"找到需要备份的安装包的位置\"><a class=\"markdownIt-Anchor\" href=\"#找到需要备份的安装包的位置\"></a> 找到需要备份的安装包的位置</h4>\n<p>如果要找到应用包名为：cc.mianfeinovel</p>\n<p>可通过如下命令，找到具体安装包的位置：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb <span class=\"keyword\">shell</span><span class=\"bash\"> pm path cc.mianfeinovel</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span>:<span class=\"regexp\">/data/</span>app<span class=\"regexp\">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure>\n<h4 id=\"把安装包取出\"><a class=\"markdownIt-Anchor\" href=\"#把安装包取出\"></a> 把安装包取出</h4>\n<p>可通过adb的pull命令：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb pull <span class=\"regexp\">/data/</span>app<span class=\"regexp\">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/app/cc.mianfeinovel<span class=\"number\">-2</span>/base.apk: <span class=\"number\">1</span> file pulled. <span class=\"number\">5.7</span> MB/s (<span class=\"number\">11417386</span> bytes <span class=\"keyword\">in</span> <span class=\"number\">1.913</span>s)</span><br></pre></td></tr></table></figure>\n<p>此操作手机无需root,也就是说每个手机都可以这样操作。</p>\n","site":{"data":{}},"excerpt":"<p>假如你在其他手机上看到一个应用，又不知道从哪去下载，而那个手机的安装包已经被删除掉，那怎样安装一个和那个手机上一模一样的应用呢？办法就是从那个手机中备份一份，然后传给你。也许你见过一些其他软件有备份apk的功能，也是这个原理。</p>","more":"<h4 id=\"找到具体的应用的包名\"><a class=\"markdownIt-Anchor\" href=\"#找到具体的应用的包名\"></a> 找到具体的应用的包名</h4>\n<p>连接到手机，用adb命令执行如下命令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb <span class=\"keyword\">shell</span><span class=\"bash\"> pm list package</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package:com<span class=\"selector-class\">.mediatek</span><span class=\"selector-class\">.gba</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.mediatek</span><span class=\"selector-class\">.ims</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.flyme</span><span class=\"selector-class\">.roamingpay</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.github</span><span class=\"selector-class\">.shadowsocks</span></span><br><span class=\"line\">package:org<span class=\"selector-class\">.simalliance</span><span class=\"selector-class\">.openmobileapi</span><span class=\"selector-class\">.uicc2terminal</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.telephony</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.meizu</span><span class=\"selector-class\">.documentsui</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.goodix</span><span class=\"selector-class\">.fingerprint</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.calendar</span></span><br><span class=\"line\">package:com<span class=\"selector-class\">.zgczw</span><span class=\"selector-class\">.chezhiwang</span></span><br><span class=\"line\">package:cc.mianfeinovel</span><br><span class=\"line\">package:com<span class=\"selector-class\">.android</span><span class=\"selector-class\">.providers</span><span class=\"selector-class\">.media</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<h4 id=\"找到需要备份的安装包的位置\"><a class=\"markdownIt-Anchor\" href=\"#找到需要备份的安装包的位置\"></a> 找到需要备份的安装包的位置</h4>\n<p>如果要找到应用包名为：cc.mianfeinovel</p>\n<p>可通过如下命令，找到具体安装包的位置：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb <span class=\"keyword\">shell</span><span class=\"bash\"> pm path cc.mianfeinovel</span></span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span>:<span class=\"regexp\">/data/</span>app<span class=\"regexp\">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure>\n<h4 id=\"把安装包取出\"><a class=\"markdownIt-Anchor\" href=\"#把安装包取出\"></a> 把安装包取出</h4>\n<p>可通过adb的pull命令：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb pull <span class=\"regexp\">/data/</span>app<span class=\"regexp\">/cc.mianfeinovel-2/</span>base.apk</span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/app/cc.mianfeinovel<span class=\"number\">-2</span>/base.apk: <span class=\"number\">1</span> file pulled. <span class=\"number\">5.7</span> MB/s (<span class=\"number\">11417386</span> bytes <span class=\"keyword\">in</span> <span class=\"number\">1.913</span>s)</span><br></pre></td></tr></table></figure>\n<p>此操作手机无需root,也就是说每个手机都可以这样操作。</p>"},{"title":"命名规则-阿里巴巴Java开发","date":"2017-08-08T03:53:14.000Z","_content":"\n1. 【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。\n反例： _name / __name / $Object / name_ / name$ / Object$\n\n<!-- more -->\n\n2. 【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式\n也要避免采用。\n反例：  DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3\n正例：  alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。\n3. 【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型\n的相关命名 ）DO /  BO  /  DTO /  VO 等。\n正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion\n反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion\n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从\n驼峰形式。\n正例：  localValue /  getHttpMessage() /  inputUserId\n5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n正例：  MAX _ STOCK _ COUNT\n反例：  MAX _ COUNT\n6. 【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类\n命名以它要测试的类的名称开始，以 Test 结尾。\n7. 【强制】中括号是数组类型的一部分，数组定义如下： String[] args;\n反例：使用 String args[] 的方式来定义。\n8. 【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。\n反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC\n框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异\n常。\n9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用\n单数形式，但是类名如果有复数含义，类名可以使用复数形式。\n正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考\nspring 的框架结构 ）\n10. 【强制】杜绝完全不规范的缩写，避免望文不知义。\n反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类\n随意缩写严重降低了代码的可阅读性。\n11. 【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n正例： public class OrderFactory;\npublic class LoginProxy;\npublic class ResourceObserver;\n12. 【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁\n性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是\n与接口方法相关，并且是整个应用的基础常量。\n正例：接口方法签名： void f();\n接口基础常量表示： String COMPANY = \" alibaba \" ;\n反例：接口方法定义： public abstract void f();\n说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默\n认实现。\n13. 接口和实现类的命名有两套规则：\n1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部\n的实现类用 Impl 的后缀与接口区别。\n正例： CacheServiceImpl 实现 CacheService 接口。\n2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。\n正例： AbstractTranslator 实现  Translatable 。\n14. 【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。\n说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。\n15. 【参考】各层命名规约：\nA) Service / DAO 层方法命名规约\n1 ） 获取单个对象的方法用 get 做前缀。\n2 ） 获取多个对象的方法用 list 做前缀。\n3 ） 获取统计值的方法用 count 做前缀。\n4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。\n5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。\n6 ） 修改的方法用 update 做前缀。\nB) 领域模型命名规约\n1 ） 数据对象： xxxDO ， xxx 即为数据表名。\n2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。\n3 ） 展示对象： xxxVO ， xxx 一般为网页名称。\n4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。\n","source":"_posts/命名规则-阿里巴巴Java开发.md","raw":"---\ntitle: 命名规则-阿里巴巴Java开发\ndate: 2017-08-08 11:53:14\ntags: [java]\ncategories: java\n---\n\n1. 【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。\n反例： _name / __name / $Object / name_ / name$ / Object$\n\n<!-- more -->\n\n2. 【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式\n也要避免采用。\n反例：  DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3\n正例：  alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。\n3. 【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型\n的相关命名 ）DO /  BO  /  DTO /  VO 等。\n正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion\n反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion\n4. 【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从\n驼峰形式。\n正例：  localValue /  getHttpMessage() /  inputUserId\n5. 【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。\n正例：  MAX _ STOCK _ COUNT\n反例：  MAX _ COUNT\n6. 【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类\n命名以它要测试的类的名称开始，以 Test 结尾。\n7. 【强制】中括号是数组类型的一部分，数组定义如下： String[] args;\n反例：使用 String args[] 的方式来定义。\n8. 【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。\n反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC\n框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异\n常。\n9. 【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用\n单数形式，但是类名如果有复数含义，类名可以使用复数形式。\n正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考\nspring 的框架结构 ）\n10. 【强制】杜绝完全不规范的缩写，避免望文不知义。\n反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类\n随意缩写严重降低了代码的可阅读性。\n11. 【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。\n正例： public class OrderFactory;\npublic class LoginProxy;\npublic class ResourceObserver;\n12. 【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁\n性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是\n与接口方法相关，并且是整个应用的基础常量。\n正例：接口方法签名： void f();\n接口基础常量表示： String COMPANY = \" alibaba \" ;\n反例：接口方法定义： public abstract void f();\n说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默\n认实现。\n13. 接口和实现类的命名有两套规则：\n1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部\n的实现类用 Impl 的后缀与接口区别。\n正例： CacheServiceImpl 实现 CacheService 接口。\n2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。\n正例： AbstractTranslator 实现  Translatable 。\n14. 【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。\n说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。\n正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。\n15. 【参考】各层命名规约：\nA) Service / DAO 层方法命名规约\n1 ） 获取单个对象的方法用 get 做前缀。\n2 ） 获取多个对象的方法用 list 做前缀。\n3 ） 获取统计值的方法用 count 做前缀。\n4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。\n5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。\n6 ） 修改的方法用 update 做前缀。\nB) 领域模型命名规约\n1 ） 数据对象： xxxDO ， xxx 即为数据表名。\n2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。\n3 ） 展示对象： xxxVO ， xxx 一般为网页名称。\n4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。\n","slug":"命名规则-阿里巴巴Java开发","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg2005jsifyiu8kde36","content":"<ol>\n<li>【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br>\n反例： _name / __name / <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant=\"normal\">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">Object / name_ / name</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">/</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span></span></span></span> / Object$</li>\n</ol>\n<a id=\"more\"></a>\n<ol start=\"2\">\n<li>【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式<br>\n也要避免采用。<br>\n反例：  DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3<br>\n正例：  alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。</li>\n<li>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型<br>\n的相关命名 ）DO /  BO  /  DTO /  VO 等。<br>\n正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion<br>\n反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion</li>\n<li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>\n驼峰形式。<br>\n正例：  localValue /  getHttpMessage() /  inputUserId</li>\n<li>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>\n正例：  MAX _ STOCK _ COUNT<br>\n反例：  MAX _ COUNT</li>\n<li>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类<br>\n命名以它要测试的类的名称开始，以 Test 结尾。</li>\n<li>【强制】中括号是数组类型的一部分，数组定义如下： String[] args;<br>\n反例：使用 String args[] 的方式来定义。</li>\n<li>【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。<br>\n反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC<br>\n框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异<br>\n常。</li>\n<li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<br>\n单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>\n正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考<br>\nspring 的框架结构 ）</li>\n<li>【强制】杜绝完全不规范的缩写，避免望文不知义。<br>\n反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类<br>\n随意缩写严重降低了代码的可阅读性。</li>\n<li>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。<br>\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br>\n正例： public class OrderFactory;<br>\npublic class LoginProxy;<br>\npublic class ResourceObserver;</li>\n<li>【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁<br>\n性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>\n与接口方法相关，并且是整个应用的基础常量。<br>\n正例：接口方法签名： void f();<br>\n接口基础常量表示： String COMPANY = &quot; alibaba &quot; ;<br>\n反例：接口方法定义： public abstract void f();<br>\n说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默<br>\n认实现。</li>\n<li>接口和实现类的命名有两套规则：<br>\n1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>\n的实现类用 Impl 的后缀与接口区别。<br>\n正例： CacheServiceImpl 实现 CacheService 接口。<br>\n2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。<br>\n正例： AbstractTranslator 实现  Translatable 。</li>\n<li>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>\n说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>\n正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。</li>\n<li>【参考】各层命名规约：<br>\nA) Service / DAO 层方法命名规约<br>\n1 ） 获取单个对象的方法用 get 做前缀。<br>\n2 ） 获取多个对象的方法用 list 做前缀。<br>\n3 ） 获取统计值的方法用 count 做前缀。<br>\n4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。<br>\n5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。<br>\n6 ） 修改的方法用 update 做前缀。<br>\nB) 领域模型命名规约<br>\n1 ） 数据对象： xxxDO ， xxx 即为数据表名。<br>\n2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。<br>\n3 ） 展示对象： xxxVO ， xxx 一般为网页名称。<br>\n4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>【强制】 代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。<br>\n反例： _name / __name / <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>O</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi>a</mi><mi>m</mi><msub><mi>e</mi><mi mathvariant=\"normal\">/</mi></msub><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">Object / name_ / name</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathdefault\">b</span><span class=\"mord mathdefault\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">t</span><span class=\"mord\">/</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord\"><span class=\"mord mathdefault\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">/</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span></span></span></span> / Object$</li>\n</ol>","more":"<ol start=\"2\">\n<li>【强制】 代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。<br>\n说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式<br>\n也要避免采用。<br>\n反例：  DaZhePromotion [ 打折 ] /  getPingfenByName() [ 评分 ] /  int 某变量 = 3<br>\n正例：  alibaba /  taobao /  youku /  hangzhou 等国际通用的名称，可视同英文。</li>\n<li>【强制】类名使用 UpperCamelCase 风格，必须遵从驼峰形式，但以下情形例外： （ 领域模型<br>\n的相关命名 ）DO /  BO  /  DTO /  VO 等。<br>\n正例： MarcoPolo /  UserDO /  XmlService /  TcpUdpDeal /  TaPromotion<br>\n反例： macroPolo /  UserDo /  XMLService /  TCPUDPDeal /  TAPromotion</li>\n<li>【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从<br>\n驼峰形式。<br>\n正例：  localValue /  getHttpMessage() /  inputUserId</li>\n<li>【强制】常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。<br>\n正例：  MAX _ STOCK _ COUNT<br>\n反例：  MAX _ COUNT</li>\n<li>【强制】抽象类命名使用 Abstract 或 Base 开头 ； 异常类命名使用 Exception 结尾 ； 测试类<br>\n命名以它要测试的类的名称开始，以 Test 结尾。</li>\n<li>【强制】中括号是数组类型的一部分，数组定义如下： String[] args;<br>\n反例：使用 String args[] 的方式来定义。</li>\n<li>【强制】 POJO 类中布尔类型的变量，都不要加 is ，否则部分框架解析会引起序列化错误。<br>\n反例：定义为基本数据类型 Boolean isSuccess； 的属性，它的方法也是 isSuccess() ， RPC<br>\n框架在反向解析的时候，“以为”对应的属性名称是 success ，导致属性获取不到，进而抛出异<br>\n常。</li>\n<li>【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用<br>\n单数形式，但是类名如果有复数含义，类名可以使用复数形式。<br>\n正例： 应用工具类包名为 com . alibaba . open . util 、类名为 MessageUtils（ 此规则参考<br>\nspring 的框架结构 ）</li>\n<li>【强制】杜绝完全不规范的缩写，避免望文不知义。<br>\n反例：  AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成  condi ，此类<br>\n随意缩写严重降低了代码的可阅读性。</li>\n<li>【推荐】如果使用到了设计模式，建议在类名中体现出具体模式。<br>\n说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br>\n正例： public class OrderFactory;<br>\npublic class LoginProxy;<br>\npublic class ResourceObserver;</li>\n<li>【推荐】接口类中的方法和属性不要加任何修饰符号 （public 也不要加 ） ，保持代码的简洁<br>\n性，并加上有效的 Javadoc 注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是<br>\n与接口方法相关，并且是整个应用的基础常量。<br>\n正例：接口方法签名： void f();<br>\n接口基础常量表示： String COMPANY = &quot; alibaba &quot; ;<br>\n反例：接口方法定义： public abstract void f();<br>\n说明： JDK 8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默<br>\n认实现。</li>\n<li>接口和实现类的命名有两套规则：<br>\n1 ） 【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部<br>\n的实现类用 Impl 的后缀与接口区别。<br>\n正例： CacheServiceImpl 实现 CacheService 接口。<br>\n2 ）  【推荐】 如果是形容能力的接口名称，取对应的形容词做接口名 （ 通常是– able 的形式 ） 。<br>\n正例： AbstractTranslator 实现  Translatable 。</li>\n<li>【参考】枚举类名建议带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。<br>\n说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。<br>\n正例：枚举名字： DealStatusEnum， 成员名称： SUCCESS /  UNKOWN _ REASON 。</li>\n<li>【参考】各层命名规约：<br>\nA) Service / DAO 层方法命名规约<br>\n1 ） 获取单个对象的方法用 get 做前缀。<br>\n2 ） 获取多个对象的方法用 list 做前缀。<br>\n3 ） 获取统计值的方法用 count 做前缀。<br>\n4 ） 插入的方法用 save（ 推荐 ） 或 insert 做前缀。<br>\n5 ） 删除的方法用 remove（ 推荐 ） 或 delete 做前缀。<br>\n6 ） 修改的方法用 update 做前缀。<br>\nB) 领域模型命名规约<br>\n1 ） 数据对象： xxxDO ， xxx 即为数据表名。<br>\n2 ） 数据传输对象： xxxDTO ， xxx 为业务领域相关的名称。<br>\n3 ） 展示对象： xxxVO ， xxx 一般为网页名称。<br>\n4 ） POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO 。</li>\n</ol>"},{"title":"将make的输出重定向到文件","date":"2020-11-19T03:01:24.000Z","_content":"\n将make的输出重定向到文件\n\n<!-- more -->\n\n-  想要把make输出的全部信息，输出到某个文件中，最常见的办法就是：\n\n```\nmake xxx > build_output.txt\n```\n此时默认情况是没有改变2=stderr的输出方式，还是屏幕，所以，如果有错误信息，还是可以在屏幕上看到的。\n\n-  只需要把make输出中的错误(及警告)信息输出到文件中，可以用：\n\n```\nmake xxx 2> build_output.txt\n\n```\n相应地，由于1=stdout没有变，还是屏幕，所以，那些命令执行时候输出的正常信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。\n\n-  只需要把make输出中的正常（非错误，非警告）的信息输出到文件中，可以用：\n\n```\nmake xxx 1> build_output.txt\n\n```\n相应地，由于2=stderr没有变，还是屏幕，所以，那些命令执行时候输出的错误信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。\n\n-  想要把正常输出信息和错误信息输出到分别的文件中，可以用：\n\n```\nmake xxx 1> build_output_normal.txt 2>build_output_error.txt\n```\n即联合使用了1和2，正常信息和错误信息，都输出到对应文件中了。\n\n-  所有的信息都输出到同一个文件中：\n\n```\nmake xxx > build_output_all.txt 2>&1\n\n```\n\n其中的2&gt;&1表示错误信息输出到&1中，而&1，指的是前面的那个文件：build\\_output\\_all.txt 。\n注意：上面所有的1,2等数字，后面紧跟着大于号'&gt;' ，中间不能有空格\n\n","source":"_posts/将make的输出重定向到文件.md","raw":"---\ntitle: 将make的输出重定向到文件\ndate: 2020-11-19 11:01:24\ntags: [linux]\ncategories: linux\n---\n\n将make的输出重定向到文件\n\n<!-- more -->\n\n-  想要把make输出的全部信息，输出到某个文件中，最常见的办法就是：\n\n```\nmake xxx > build_output.txt\n```\n此时默认情况是没有改变2=stderr的输出方式，还是屏幕，所以，如果有错误信息，还是可以在屏幕上看到的。\n\n-  只需要把make输出中的错误(及警告)信息输出到文件中，可以用：\n\n```\nmake xxx 2> build_output.txt\n\n```\n相应地，由于1=stdout没有变，还是屏幕，所以，那些命令执行时候输出的正常信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。\n\n-  只需要把make输出中的正常（非错误，非警告）的信息输出到文件中，可以用：\n\n```\nmake xxx 1> build_output.txt\n\n```\n相应地，由于2=stderr没有变，还是屏幕，所以，那些命令执行时候输出的错误信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。\n\n-  想要把正常输出信息和错误信息输出到分别的文件中，可以用：\n\n```\nmake xxx 1> build_output_normal.txt 2>build_output_error.txt\n```\n即联合使用了1和2，正常信息和错误信息，都输出到对应文件中了。\n\n-  所有的信息都输出到同一个文件中：\n\n```\nmake xxx > build_output_all.txt 2>&1\n\n```\n\n其中的2&gt;&1表示错误信息输出到&1中，而&1，指的是前面的那个文件：build\\_output\\_all.txt 。\n注意：上面所有的1,2等数字，后面紧跟着大于号'&gt;' ，中间不能有空格\n\n","slug":"将make的输出重定向到文件","published":1,"updated":"2020-11-19T03:51:48.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg3005osifyvr8c9ik1","content":"<p>将make的输出重定向到文件</p>\n<a id=\"more\"></a>\n<ul>\n<li>想要把make输出的全部信息，输出到某个文件中，最常见的办法就是：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">make</span> <span class=\"selector-tag\">xxx</span> &gt; <span class=\"selector-tag\">build_output</span><span class=\"selector-class\">.txt</span></span><br></pre></td></tr></table></figure>\n<p>此时默认情况是没有改变2=stderr的输出方式，还是屏幕，所以，如果有错误信息，还是可以在屏幕上看到的。</p>\n<ul>\n<li>只需要把make输出中的错误(及警告)信息输出到文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">2</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure>\n<p>相应地，由于1=stdout没有变，还是屏幕，所以，那些命令执行时候输出的正常信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p>\n<ul>\n<li>只需要把make输出中的正常（非错误，非警告）的信息输出到文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">1</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure>\n<p>相应地，由于2=stderr没有变，还是屏幕，所以，那些命令执行时候输出的错误信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p>\n<ul>\n<li>想要把正常输出信息和错误信息输出到分别的文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">1</span>&gt; build_output_normal.txt <span class=\"number\">2</span>&gt;build_output_error.txt</span><br></pre></td></tr></table></figure>\n<p>即联合使用了1和2，正常信息和错误信息，都输出到对应文件中了。</p>\n<ul>\n<li>所有的信息都输出到同一个文件中：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx &gt; build_output_all.txt <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>其中的2&gt;&amp;1表示错误信息输出到&amp;1中，而&amp;1，指的是前面的那个文件：build_output_all.txt 。<br>\n注意：上面所有的1,2等数字，后面紧跟着大于号’&gt;’ ，中间不能有空格</p>\n","site":{"data":{}},"excerpt":"<p>将make的输出重定向到文件</p>","more":"<ul>\n<li>想要把make输出的全部信息，输出到某个文件中，最常见的办法就是：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">make</span> <span class=\"selector-tag\">xxx</span> &gt; <span class=\"selector-tag\">build_output</span><span class=\"selector-class\">.txt</span></span><br></pre></td></tr></table></figure>\n<p>此时默认情况是没有改变2=stderr的输出方式，还是屏幕，所以，如果有错误信息，还是可以在屏幕上看到的。</p>\n<ul>\n<li>只需要把make输出中的错误(及警告)信息输出到文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">2</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure>\n<p>相应地，由于1=stdout没有变，还是屏幕，所以，那些命令执行时候输出的正常信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p>\n<ul>\n<li>只需要把make输出中的正常（非错误，非警告）的信息输出到文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">1</span>&gt; build_output.txt</span><br></pre></td></tr></table></figure>\n<p>相应地，由于2=stderr没有变，还是屏幕，所以，那些命令执行时候输出的错误信息，还是会输出到屏幕上，你还是可以在屏幕上看到的。</p>\n<ul>\n<li>想要把正常输出信息和错误信息输出到分别的文件中，可以用：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx <span class=\"number\">1</span>&gt; build_output_normal.txt <span class=\"number\">2</span>&gt;build_output_error.txt</span><br></pre></td></tr></table></figure>\n<p>即联合使用了1和2，正常信息和错误信息，都输出到对应文件中了。</p>\n<ul>\n<li>所有的信息都输出到同一个文件中：</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make xxx &gt; build_output_all.txt <span class=\"number\">2</span>&gt;&amp;<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>其中的2&gt;&amp;1表示错误信息输出到&amp;1中，而&amp;1，指的是前面的那个文件：build_output_all.txt 。<br>\n注意：上面所有的1,2等数字，后面紧跟着大于号’&gt;’ ，中间不能有空格</p>"},{"title":"使用Android Studio的lint清除无用的资源文件","date":"2016-03-22T14:15:20.000Z","_content":"\n## 使用Android Studio的lint清除无用的资源文件\n<!-- more -->\n> studio很容易查找无用的资源\n\n在项目中，点击菜单栏的Analyze->Run Inspection by Name...\n![lint-1.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-1.png)\n\n选择后出现弹窗如下：\n![lint-2.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-2.png)\n\n在弹窗中输入 unused resources 选中点击回车后：\n![lint-3.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-3.png)\n\n这里可以选择，整个项目或者某个模块，也可以自定义选择某个目录\n到此，Android Studio 就会自动分析，然后可以根据结果清除无用的资源文件。\n\n**注意**：在某些情况下，也有可能检测错误，我就在build.gradle中有引用图片，然而这里无法查询到，但大部分查出是对的。\n\n\n> Note:\n> 1.一般是删除无用的Java文件\n> 2.然后删除无用Java文件中引用的xml文件\n> 3.删除xml或Java代码中用到的图片等资源文件\n> 4.可以通过指定图片Alt+F7(Find Usages)查询是否引用\n\n\n\n\n","source":"_posts/使用Android-Studio的lint清除无用的资源文件.md","raw":"---\ntitle: 使用Android Studio的lint清除无用的资源文件\ndate: 2016-03-22 22:15:20\ntags: [android, lint]\ncategories: android\n---\n\n## 使用Android Studio的lint清除无用的资源文件\n<!-- more -->\n> studio很容易查找无用的资源\n\n在项目中，点击菜单栏的Analyze->Run Inspection by Name...\n![lint-1.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-1.png)\n\n选择后出现弹窗如下：\n![lint-2.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-2.png)\n\n在弹窗中输入 unused resources 选中点击回车后：\n![lint-3.png](http://7xpj58.com1.z0.glb.clouddn.com/20160322-3.png)\n\n这里可以选择，整个项目或者某个模块，也可以自定义选择某个目录\n到此，Android Studio 就会自动分析，然后可以根据结果清除无用的资源文件。\n\n**注意**：在某些情况下，也有可能检测错误，我就在build.gradle中有引用图片，然而这里无法查询到，但大部分查出是对的。\n\n\n> Note:\n> 1.一般是删除无用的Java文件\n> 2.然后删除无用Java文件中引用的xml文件\n> 3.删除xml或Java代码中用到的图片等资源文件\n> 4.可以通过指定图片Alt+F7(Find Usages)查询是否引用\n\n\n\n\n","slug":"使用Android-Studio的lint清除无用的资源文件","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg5005rsifythturg5r","content":"<h2 id=\"使用android-studio的lint清除无用的资源文件\"><a class=\"markdownIt-Anchor\" href=\"#使用android-studio的lint清除无用的资源文件\"></a> 使用Android Studio的lint清除无用的资源文件</h2>\n<a id=\"more\"></a>\n<blockquote>\n<p>studio很容易查找无用的资源</p>\n</blockquote>\n<p>在项目中，点击菜单栏的Analyze-&gt;Run Inspection by Name…<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-1.png\" alt=\"lint-1.png\"></p>\n<p>选择后出现弹窗如下：<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-2.png\" alt=\"lint-2.png\"></p>\n<p>在弹窗中输入 unused resources 选中点击回车后：<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-3.png\" alt=\"lint-3.png\"></p>\n<p>这里可以选择，整个项目或者某个模块，也可以自定义选择某个目录<br>\n到此，Android Studio 就会自动分析，然后可以根据结果清除无用的资源文件。</p>\n<p><strong>注意</strong>：在某些情况下，也有可能检测错误，我就在build.gradle中有引用图片，然而这里无法查询到，但大部分查出是对的。</p>\n<blockquote>\n<p>Note:<br>\n1.一般是删除无用的Java文件<br>\n2.然后删除无用Java文件中引用的xml文件<br>\n3.删除xml或Java代码中用到的图片等资源文件<br>\n4.可以通过指定图片Alt+F7(Find Usages)查询是否引用</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用android-studio的lint清除无用的资源文件\"><a class=\"markdownIt-Anchor\" href=\"#使用android-studio的lint清除无用的资源文件\"></a> 使用Android Studio的lint清除无用的资源文件</h2>","more":"<blockquote>\n<p>studio很容易查找无用的资源</p>\n</blockquote>\n<p>在项目中，点击菜单栏的Analyze-&gt;Run Inspection by Name…<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-1.png\" alt=\"lint-1.png\"></p>\n<p>选择后出现弹窗如下：<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-2.png\" alt=\"lint-2.png\"></p>\n<p>在弹窗中输入 unused resources 选中点击回车后：<br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20160322-3.png\" alt=\"lint-3.png\"></p>\n<p>这里可以选择，整个项目或者某个模块，也可以自定义选择某个目录<br>\n到此，Android Studio 就会自动分析，然后可以根据结果清除无用的资源文件。</p>\n<p><strong>注意</strong>：在某些情况下，也有可能检测错误，我就在build.gradle中有引用图片，然而这里无法查询到，但大部分查出是对的。</p>\n<blockquote>\n<p>Note:<br>\n1.一般是删除无用的Java文件<br>\n2.然后删除无用Java文件中引用的xml文件<br>\n3.删除xml或Java代码中用到的图片等资源文件<br>\n4.可以通过指定图片Alt+F7(Find Usages)查询是否引用</p>\n</blockquote>"},{"title":"常用 Git 命令清单","date":"2016-03-13T17:03:14.000Z","_content":"# 常用 Git 命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n![git structer picture](http://7xpj58.com1.z0.glb.clouddn.com/675733-cc81d1c02c093efa.png)\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n* Workspace: 工作区\n* Index / Stage: 暂存区\n* Repository: 仓库区（或本地仓库）\n* Remote: 远程仓库\n\n<!-- more -->\n## 一、新建代码库\n\n`````\n#在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n`````\n## 二、配置\nGit的设置文件`.gitconfig`,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n`````\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n`````\n## 三、增加/删除文件\n`````\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n`````\n\n## 四、代码提交\n\n`````\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n`````\n## 五、分支\n\n`````\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n`````\n\n## 六、标签\n  \n  `````\n  # 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n  `````\n\n## 七、查看信息\n\n`````\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n`````\n\n## 八、远程同步\n\n`````\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n`````\n\n## 九、撤销\n\n`````\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n`````\n\n## 十、其他\n\n`````\n# 生成一个可供发布的压缩包\n$ git archive\n`````\n\n\n> 作者：阮一峰\n> 文章源自：http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n\n\n","source":"_posts/常用-Git-命令清单.md","raw":"---\ntitle: 常用 Git 命令清单\ndate: 2016-03-14 01:03:14\ntags: [linux, git]\ncategories: git\n---\n# 常用 Git 命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n![git structer picture](http://7xpj58.com1.z0.glb.clouddn.com/675733-cc81d1c02c093efa.png)\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n* Workspace: 工作区\n* Index / Stage: 暂存区\n* Repository: 仓库区（或本地仓库）\n* Remote: 远程仓库\n\n<!-- more -->\n## 一、新建代码库\n\n`````\n#在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n`````\n## 二、配置\nGit的设置文件`.gitconfig`,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n`````\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n`````\n## 三、增加/删除文件\n`````\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n`````\n\n## 四、代码提交\n\n`````\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n`````\n## 五、分支\n\n`````\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n`````\n\n## 六、标签\n  \n  `````\n  # 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n  `````\n\n## 七、查看信息\n\n`````\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n`````\n\n## 八、远程同步\n\n`````\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n`````\n\n## 九、撤销\n\n`````\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n`````\n\n## 十、其他\n\n`````\n# 生成一个可供发布的压缩包\n$ git archive\n`````\n\n\n> 作者：阮一峰\n> 文章源自：http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\n\n\n\n","slug":"常用-Git-命令清单","published":1,"updated":"2021-04-19T09:43:38.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg8005usifywci5xofg","content":"<h1 id=\"常用-git-命令清单\"><a class=\"markdownIt-Anchor\" href=\"#常用-git-命令清单\"></a> 常用 Git 命令清单</h1>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/675733-cc81d1c02c093efa.png\" alt=\"git structer picture\"></p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<ul>\n<li>Workspace: 工作区</li>\n<li>Index / Stage: 暂存区</li>\n<li>Repository: 仓库区（或本地仓库）</li>\n<li>Remote: 远程仓库</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"一-新建代码库\"><a class=\"markdownIt-Anchor\" href=\"#一-新建代码库\"></a> 一、新建代码库</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二-配置\"><a class=\"markdownIt-Anchor\" href=\"#二-配置\"></a> 二、配置</h2>\n<p>Git的设置文件<code>.gitconfig</code>,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>-e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>[--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>[--global] user.email <span class=\"string\">\"[email address]\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三-增加删除文件\"><a class=\"markdownIt-Anchor\" href=\"#三-增加删除文件\"></a> 三、增加/删除文件</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> [file1] [file2] <span class=\"built_in\">..</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] <span class=\"built_in\">..</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-代码提交\"><a class=\"markdownIt-Anchor\" href=\"#四-代码提交\"></a> 四、代码提交</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五-分支\"><a class=\"markdownIt-Anchor\" href=\"#五-分支\"></a> 五、分支</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六-标签\"><a class=\"markdownIt-Anchor\" href=\"#六-标签\"></a> 六、标签</h2>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-查看信息\"><a class=\"markdownIt-Anchor\" href=\"#七-查看信息\"></a> 七、查看信息</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">\"提交说明\"</span>必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git whatchanged [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八-远程同步\"><a class=\"markdownIt-Anchor\" href=\"#八-远程同步\"></a> 八、远程同步</h2>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"九-撤销\"><a class=\"markdownIt-Anchor\" href=\"#九-撤销\"></a> 九、撤销</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [<span class=\"keyword\">commit</span>] [<span class=\"keyword\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> [<span class=\"keyword\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> [<span class=\"keyword\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--keep [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [<span class=\"keyword\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"十-其他\"><a class=\"markdownIt-Anchor\" href=\"#十-其他\"></a> 十、其他</h2>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git archive</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者：阮一峰<br>\n文章源自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"常用-git-命令清单\"><a class=\"markdownIt-Anchor\" href=\"#常用-git-命令清单\"></a> 常用 Git 命令清单</h1>\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/675733-cc81d1c02c093efa.png\" alt=\"git structer picture\"></p>\n<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>\n<ul>\n<li>Workspace: 工作区</li>\n<li>Index / Stage: 暂存区</li>\n<li>Repository: 仓库区（或本地仓库）</li>\n<li>Remote: 远程仓库</li>\n</ul>","more":"<h2 id=\"一-新建代码库\"><a class=\"markdownIt-Anchor\" href=\"#一-新建代码库\"></a> 一、新建代码库</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">在当前目录新建一个Git代码库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 新建一个目录，将其初始化为Git代码库</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init [project-name]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> [url]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二-配置\"><a class=\"markdownIt-Anchor\" href=\"#二-配置\"></a> 二、配置</h2>\n<p>Git的设置文件<code>.gitconfig</code>,它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前的Git配置</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>--list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑Git配置文件</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>-e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置提交代码时的用户信息</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>[--global] user.name <span class=\"string\">\"[name]\"</span></span><br><span class=\"line\">$ git<span class=\"built_in\"> config </span>[--global] user.email <span class=\"string\">\"[email address]\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三-增加删除文件\"><a class=\"markdownIt-Anchor\" href=\"#三-增加删除文件\"></a> 三、增加/删除文件</h2>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加指定文件到暂存区</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> [file1] [file2] <span class=\"built_in\">..</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加指定目录到暂存区，包括子目录</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加每个变化前，都会要求确认</span></span><br><span class=\"line\"><span class=\"comment\"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class=\"line\">$ git <span class=\"builtin-name\">add</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class=\"line\">$ git rm [file1] [file2] <span class=\"built_in\">..</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h2 id=\"四-代码提交\"><a class=\"markdownIt-Anchor\" href=\"#四-代码提交\"></a> 四、代码提交</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五-分支\"><a class=\"markdownIt-Anchor\" href=\"#五-分支\"></a> 五、分支</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交暂存区到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交暂存区的指定文件到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交时显示所有diff信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用一次新的commit，替代上一次提交</span></span><br><span class=\"line\"><span class=\"comment\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend -m [message]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class=\"line\">$ git <span class=\"keyword\">commit</span> <span class=\"comment\">--amend [file1] [file2] ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六-标签\"><a class=\"markdownIt-Anchor\" href=\"#六-标签\"></a> 六、标签</h2>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\"># 列出所有tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在当前commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个tag在指定commit</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">[tag</span>] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地tag</span></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程tag</span></span><br><span class=\"line\">$ git push origin :refs/tags/[tagName]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看tag信息</span></span><br><span class=\"line\">$ git show [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交指定tag</span></span><br><span class=\"line\">$ git push [remote] [<span class=\"keyword\">tag</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交所有tag</span></span><br><span class=\"line\">$ git push [remote] --tags</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个分支，指向某个tag</span></span><br><span class=\"line\">$ git checkout -b [branch] [<span class=\"keyword\">tag</span>]</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-查看信息\"><a class=\"markdownIt-Anchor\" href=\"#七-查看信息\"></a> 七、查看信息</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示有变更的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -S [keyword]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个commit之后的所有变动，其<span class=\"string\">\"提交说明\"</span>必须符合搜索条件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> [tag] HEAD --grep feature</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某个文件的版本历史，包括文件改名</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> --follow [file]</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git whatchanged [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -p [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示过去5次提交</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">log</span> -5 --pretty --oneline</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示所有提交过的用户，按提交次数排序</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git shortlog -sn</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git blame [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示暂存区和上一个commit的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --cached [file]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示工作区与当前分支最新commit之间的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff HEAD</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示两次提交之间的差异</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff [first-branch]...[second-branch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示今天你写了多少行代码</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git diff --shortstat <span class=\"string\">\"@&#123;0 day ago&#125;\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交的元数据和内容变化</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交发生变化的文件</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show --name-only [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示某次提交时，某个文件的内容</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git show [commit]:[filename]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git reflog</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八-远程同步\"><a class=\"markdownIt-Anchor\" href=\"#八-远程同步\"></a> 八、远程同步</h2>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载远程仓库的所有变动</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示某个远程仓库的信息</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加一个新的远程仓库，并命名</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送所有分支到远程仓库</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h2 id=\"九-撤销\"><a class=\"markdownIt-Anchor\" href=\"#九-撤销\"></a> 九、撤销</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复暂存区的指定文件到工作区</span></span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class=\"line\">$ git checkout [<span class=\"keyword\">commit</span>] [<span class=\"keyword\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> [<span class=\"keyword\">file</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> [<span class=\"keyword\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--keep [commit]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建一个commit，用来撤销指定commit</span></span><br><span class=\"line\"><span class=\"comment\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class=\"line\">$ git revert [<span class=\"keyword\">commit</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h2 id=\"十-其他\"><a class=\"markdownIt-Anchor\" href=\"#十-其他\"></a> 十、其他</h2>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成一个可供发布的压缩包</span></span><br><span class=\"line\"><span class=\"variable\">$ </span>git archive</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>作者：阮一峰<br>\n文章源自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>\n</blockquote>"},{"title":"升级Xcode后Qt问题了","date":"2017-01-23T06:21:18.000Z","_content":"\n升级XCode后，Qt新建项目出现了问题：\n\n  `Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.`\n\n<!-- more -->\n在Google找到了解决方法。\n[http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t](http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t)\n\n~> Xcode 8\n\nThis problem occurs when command line tools are installed after Xcode is installed. What happens is the `Xcode-select` developer directory gets pointed to ``/Library/Developer/CommandLineTools`.\n\nStep 1:\n\nPoint `Xcode-select` to the correct Xcode Developer directory with the command:\n\n```\nsudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\n```\nStep 2:\n\nConfirm the license agreement with the command:\n```\nxcodebuild -license\n```\nThis will prompt you to read through the license agreement.\n\nEnter `agree` to accept the terms.\n\n#### >= Xcode 8\n\nStep 1:\n\nAs Bruce said, this happens when Qt tries to find `xcrun` when it should be looking for `xcodebuild`.\n\nOpen the file:\n```\nQt_install_folder/5.7/clang_64/mkspecs/features/mac/default_pre.prf\n```\n\nStep 2:\n\nReplace:\n\n```\nisEmpty($$list($$system(\"/usr/bin/xcrun -find xcrun 2>/dev/null\"))))\n```\n\nWith:\n\n```\nisEmpty($$list($$system(\"/usr/bin/xcrun -find xcodebuild 2>/dev/null\")))\n```\n","source":"_posts/升级Xcode后Qt问题了.md","raw":"---\ntitle: 升级Xcode后Qt问题了\ndate: 2017-01-23 14:21:18\ntags: [qt]\ncategories: qt\n---\n\n升级XCode后，Qt新建项目出现了问题：\n\n  `Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.`\n\n<!-- more -->\n在Google找到了解决方法。\n[http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t](http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t)\n\n~> Xcode 8\n\nThis problem occurs when command line tools are installed after Xcode is installed. What happens is the `Xcode-select` developer directory gets pointed to ``/Library/Developer/CommandLineTools`.\n\nStep 1:\n\nPoint `Xcode-select` to the correct Xcode Developer directory with the command:\n\n```\nsudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\n```\nStep 2:\n\nConfirm the license agreement with the command:\n```\nxcodebuild -license\n```\nThis will prompt you to read through the license agreement.\n\nEnter `agree` to accept the terms.\n\n#### >= Xcode 8\n\nStep 1:\n\nAs Bruce said, this happens when Qt tries to find `xcrun` when it should be looking for `xcodebuild`.\n\nOpen the file:\n```\nQt_install_folder/5.7/clang_64/mkspecs/features/mac/default_pre.prf\n```\n\nStep 2:\n\nReplace:\n\n```\nisEmpty($$list($$system(\"/usr/bin/xcrun -find xcrun 2>/dev/null\"))))\n```\n\nWith:\n\n```\nisEmpty($$list($$system(\"/usr/bin/xcrun -find xcodebuild 2>/dev/null\")))\n```\n","slug":"升级Xcode后Qt问题了","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxg9005ysifyuseabaxq","content":"<p>升级XCode后，Qt新建项目出现了问题：</p>\n<p><code>Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.</code></p>\n<a id=\"more\"></a>\n<p>在Google找到了解决方法。<br>\n<a href=\"http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t</a></p>\n<p>~&gt; Xcode 8</p>\n<p>This problem occurs when command line tools are installed after Xcode is installed. What happens is the <code>Xcode-select</code> developer directory gets pointed to ``/Library/Developer/CommandLineTools`.</p>\n<p>Step 1:</p>\n<p>Point <code>Xcode-select</code> to the correct Xcode Developer directory with the command:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select -<span class=\"keyword\">switch</span> <span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer</span><br></pre></td></tr></table></figure>\n<p>Step 2:</p>\n<p>Confirm the license agreement with the command:</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -<span class=\"meta\">license</span></span><br></pre></td></tr></table></figure>\n<p>This will prompt you to read through the license agreement.</p>\n<p>Enter <code>agree</code> to accept the terms.</p>\n<h4 id=\"xcode-8\"><a class=\"markdownIt-Anchor\" href=\"#xcode-8\"></a> &gt;= Xcode 8</h4>\n<p>Step 1:</p>\n<p>As Bruce said, this happens when Qt tries to find <code>xcrun</code> when it should be looking for <code>xcodebuild</code>.</p>\n<p>Open the file:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Qt_install_folder<span class=\"regexp\">/5.7/</span>clang_64<span class=\"regexp\">/mkspecs/</span>features<span class=\"regexp\">/mac/</span>default_pre.prf</span><br></pre></td></tr></table></figure>\n<p>Step 2:</p>\n<p>Replace:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmpty(<span class=\"symbol\">$</span><span class=\"symbol\">$</span>list(<span class=\"symbol\">$</span><span class=\"symbol\">$</span><span class=\"keyword\">system</span>(<span class=\"string\">\"/usr/bin/xcrun -find xcrun 2&gt;/dev/null\"</span>))))</span><br></pre></td></tr></table></figure>\n<p>With:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmpty(<span class=\"symbol\">$</span><span class=\"symbol\">$</span>list(<span class=\"symbol\">$</span><span class=\"symbol\">$</span><span class=\"keyword\">system</span>(<span class=\"string\">\"/usr/bin/xcrun -find xcodebuild 2&gt;/dev/null\"</span>)))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>升级XCode后，Qt新建项目出现了问题：</p>\n<p><code>Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.</code></p>","more":"<p>在Google找到了解决方法。<br>\n<a href=\"http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/33728905/qt-creator-project-error-xcode-not-set-up-properly-you-may-need-to-confirm-t</a></p>\n<p>~&gt; Xcode 8</p>\n<p>This problem occurs when command line tools are installed after Xcode is installed. What happens is the <code>Xcode-select</code> developer directory gets pointed to ``/Library/Developer/CommandLineTools`.</p>\n<p>Step 1:</p>\n<p>Point <code>Xcode-select</code> to the correct Xcode Developer directory with the command:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xcode-select -<span class=\"keyword\">switch</span> <span class=\"regexp\">/Applications/</span>Xcode.app<span class=\"regexp\">/Contents/</span>Developer</span><br></pre></td></tr></table></figure>\n<p>Step 2:</p>\n<p>Confirm the license agreement with the command:</p>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcodebuild -<span class=\"meta\">license</span></span><br></pre></td></tr></table></figure>\n<p>This will prompt you to read through the license agreement.</p>\n<p>Enter <code>agree</code> to accept the terms.</p>\n<h4 id=\"xcode-8\"><a class=\"markdownIt-Anchor\" href=\"#xcode-8\"></a> &gt;= Xcode 8</h4>\n<p>Step 1:</p>\n<p>As Bruce said, this happens when Qt tries to find <code>xcrun</code> when it should be looking for <code>xcodebuild</code>.</p>\n<p>Open the file:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Qt_install_folder<span class=\"regexp\">/5.7/</span>clang_64<span class=\"regexp\">/mkspecs/</span>features<span class=\"regexp\">/mac/</span>default_pre.prf</span><br></pre></td></tr></table></figure>\n<p>Step 2:</p>\n<p>Replace:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmpty(<span class=\"symbol\">$</span><span class=\"symbol\">$</span>list(<span class=\"symbol\">$</span><span class=\"symbol\">$</span><span class=\"keyword\">system</span>(<span class=\"string\">\"/usr/bin/xcrun -find xcrun 2&gt;/dev/null\"</span>))))</span><br></pre></td></tr></table></figure>\n<p>With:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isEmpty(<span class=\"symbol\">$</span><span class=\"symbol\">$</span>list(<span class=\"symbol\">$</span><span class=\"symbol\">$</span><span class=\"keyword\">system</span>(<span class=\"string\">\"/usr/bin/xcrun -find xcodebuild 2&gt;/dev/null\"</span>)))</span><br></pre></td></tr></table></figure>"},{"title":"正则表达式--匹配电话号码和手机号码","date":"2016-03-03T02:43:29.000Z","_content":"\n### 正则表达式匹配电话号码和手机号码\n---\n\n##### 正则表达式（电话号码）一、\n\n\t\\d{3}-\\d{8}|\\d{4}-\\d{7}\n\t匹配 0511-1234567 | 022 -28191732\n\t不匹配 02-123456 12345-123456\n\n##### 正则表达式（电话号码）二、\n\n\t(^\\([0]\\d{2}|\\d{4}\\))(\\d{6,7}$)\n\t匹配    (021)1234567 | (0411)123456 | (000)000000\n\t不匹配    (123)1234567 | 025123456 | 0252345678  \n\n<!-- more -->\n##### 正则表达式（手机号码）三、\n\n\t^(?<national>\\+?(?:86)?)(?<separator>\\s?-?)(?<phone>(?<vender>(13|15|18)[0-9])(?<area>\\d{4})(?<id>\\d{4}))$\n\t匹配 +8613012345678 | 86 13012345678 | 13245679087\n\t不匹配 +86130123456781231434352 | 13560012513 | ++8613012345678\n\t\n\n","source":"_posts/正则表达式--匹配电话号码和手机号码.md","raw":"---\ntitle: 正则表达式--匹配电话号码和手机号码\ndate: 2016-03-03 10:43:29\ntags: [java]\ncategories: java\n---\n\n### 正则表达式匹配电话号码和手机号码\n---\n\n##### 正则表达式（电话号码）一、\n\n\t\\d{3}-\\d{8}|\\d{4}-\\d{7}\n\t匹配 0511-1234567 | 022 -28191732\n\t不匹配 02-123456 12345-123456\n\n##### 正则表达式（电话号码）二、\n\n\t(^\\([0]\\d{2}|\\d{4}\\))(\\d{6,7}$)\n\t匹配    (021)1234567 | (0411)123456 | (000)000000\n\t不匹配    (123)1234567 | 025123456 | 0252345678  \n\n<!-- more -->\n##### 正则表达式（手机号码）三、\n\n\t^(?<national>\\+?(?:86)?)(?<separator>\\s?-?)(?<phone>(?<vender>(13|15|18)[0-9])(?<area>\\d{4})(?<id>\\d{4}))$\n\t匹配 +8613012345678 | 86 13012345678 | 13245679087\n\t不匹配 +86130123456781231434352 | 13560012513 | ++8613012345678\n\t\n\n","slug":"正则表达式--匹配电话号码和手机号码","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxga0062sifyl74x9b2d","content":"<h3 id=\"正则表达式匹配电话号码和手机号码\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式匹配电话号码和手机号码\"></a> 正则表达式匹配电话号码和手机号码</h3>\n<hr>\n<h5 id=\"正则表达式电话号码一\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式电话号码一\"></a> 正则表达式（电话号码）一、</h5>\n<pre><code>\\d{3}-\\d{8}|\\d{4}-\\d{7}\n匹配 0511-1234567 | 022 -28191732\n不匹配 02-123456 12345-123456\n</code></pre>\n<h5 id=\"正则表达式电话号码二\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式电话号码二\"></a> 正则表达式（电话号码）二、</h5>\n<pre><code>(^\\([0]\\d{2}|\\d{4}\\))(\\d{6,7}$)\n匹配    (021)1234567 | (0411)123456 | (000)000000\n不匹配    (123)1234567 | 025123456 | 0252345678  \n</code></pre>\n<a id=\"more\"></a>\n<h5 id=\"正则表达式手机号码三\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式手机号码三\"></a> 正则表达式（手机号码）三、</h5>\n<pre><code>^(?&lt;national&gt;\\+?(?:86)?)(?&lt;separator&gt;\\s?-?)(?&lt;phone&gt;(?&lt;vender&gt;(13|15|18)[0-9])(?&lt;area&gt;\\d{4})(?&lt;id&gt;\\d{4}))$\n匹配 +8613012345678 | 86 13012345678 | 13245679087\n不匹配 +86130123456781231434352 | 13560012513 | ++8613012345678\n</code></pre>\n","site":{"data":{}},"excerpt":"<h3 id=\"正则表达式匹配电话号码和手机号码\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式匹配电话号码和手机号码\"></a> 正则表达式匹配电话号码和手机号码</h3>\n<hr>\n<h5 id=\"正则表达式电话号码一\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式电话号码一\"></a> 正则表达式（电话号码）一、</h5>\n<pre><code>\\d{3}-\\d{8}|\\d{4}-\\d{7}\n匹配 0511-1234567 | 022 -28191732\n不匹配 02-123456 12345-123456\n</code></pre>\n<h5 id=\"正则表达式电话号码二\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式电话号码二\"></a> 正则表达式（电话号码）二、</h5>\n<pre><code>(^\\([0]\\d{2}|\\d{4}\\))(\\d{6,7}$)\n匹配    (021)1234567 | (0411)123456 | (000)000000\n不匹配    (123)1234567 | 025123456 | 0252345678  \n</code></pre>","more":"<h5 id=\"正则表达式手机号码三\"><a class=\"markdownIt-Anchor\" href=\"#正则表达式手机号码三\"></a> 正则表达式（手机号码）三、</h5>\n<pre><code>^(?&lt;national&gt;\\+?(?:86)?)(?&lt;separator&gt;\\s?-?)(?&lt;phone&gt;(?&lt;vender&gt;(13|15|18)[0-9])(?&lt;area&gt;\\d{4})(?&lt;id&gt;\\d{4}))$\n匹配 +8613012345678 | 86 13012345678 | 13245679087\n不匹配 +86130123456781231434352 | 13560012513 | ++8613012345678\n</code></pre>"},{"title":"知道Android 中Gradle 的这些技巧，提升编译构建速度","date":"2016-06-07T06:58:45.000Z","_content":"\n现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。\n\n下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。\n\n>原文链接：[http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/](http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/)\n\n\n<!-- more -->\n\n## 设置代理\n\n因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。\n\n```\n// 举例ShadowSocket\nsystemProp.http.proxyHost=127.0.0.1\nsystemProp.http.proxyPort=1080\nsystemProp.https.proxyHost=127.0.0.1\nsystemProp.https.proxyPort=1080\n\n```\n如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。\n\n## 更新Gradle,设置离线状态\n\nAndroid Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。\n\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg)\n\n如果需要使用命令行编译，可以配置—daemon —parallel —offline。\n\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg)\n\n## 守护进程，并行编译\n\n在项目的根目录中有一个gradle.properties 文件，\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg)\n\norg.gradle.daemon=true 就是让你让你编译时使用守护进程。\n\norg.gradle.parallel=true 使用并行编译\n\norg.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配\n\n-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配\n\n当然你也可以在下面的目录下面创建`gradle.properties`,来配置全局的属性，在所有的项目中起作用。\n    `/home//.gradle/`(Linux)\n    `/Users//.gradle/`(Mac)\n    `C:\\Users\\\\.gradle`(Windows)\n当然也可以修改xxx\\android studio 安装目录\\bin\\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。\n\n开发使用SDK=21\n\n```\nandroid {\n\t...\n\n    productFlavors {\n        dev {\n            minSdkVersion 21\n        }\n\n        release {\n            minSdkVersion 14\n        }\n    }\n}\n\n```\n我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。\n\n## 使用aar依赖\n我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。\n\n```\nallprojects {\n   repositories {\n      jcenter()\n      flatDir {\n        dirs 'libs'\n      }\n   }\n}\n\ndependencies {\n    compile(name:'cards', ext:'aar')\n}\n```\n\n**当然也可以这样添加**\n\n我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。\n\n```\nconfigurations.maybeCreate(\"default\")\nartifacts.add(\"default\", file('mylibrary-debug.aar'))\n```\n\n然后在我们的Module 中这样引用即可。\n\n```\ncompile project(':mylibrary-debug')\n```\n## dexOptions\n\n```\nclasspath 'com.android.tools.build:gradle:2.0.0-alpha9'\n```\n```\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\norg.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m\n```\n\n```\ndexOptions {\n    preDexLibraries true\n    javaMaxHeapSize \"3g\"\n    incremental true\n    dexInProcess = true\n}\n```\n\n这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。\n\n\n## 参考\n[android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow](http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9)\n\n[How to manually include external aar package using new Gradle Android Build System | Stack Overflow](http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst)\n\n[优化android studio编译效率的方法 | 开发技术前线](http://www.devtf.cn/?p=585)\n\n[加速Android Studio/Gradle构建 | 码农明明桑](http://blog.isming.me/2015/03/18/android-build-speed-up/)\n\n[android - Adding local .aar files to my gradle build | Stack Overflow](http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build)\n\n[Android模块化编程之引用本地的aar | Stormzhang](http://stormzhang.com/android/2015/03/01/android-reference-local-aar/)\n","source":"_posts/知道Android-中Gradle-的这些技巧，提升编译构建速度.md","raw":"---\ntitle: 知道Android 中Gradle 的这些技巧，提升编译构建速度\ndate: 2016-06-07 14:58:45\ntags: [android]\ncategories: android\n---\n\n现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。\n\n下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。\n\n>原文链接：[http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/](http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/)\n\n\n<!-- more -->\n\n## 设置代理\n\n因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。\n\n```\n// 举例ShadowSocket\nsystemProp.http.proxyHost=127.0.0.1\nsystemProp.http.proxyPort=1080\nsystemProp.https.proxyHost=127.0.0.1\nsystemProp.https.proxyPort=1080\n\n```\n如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。\n\n## 更新Gradle,设置离线状态\n\nAndroid Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。\n\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg)\n\n如果需要使用命令行编译，可以配置—daemon —parallel —offline。\n\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg)\n\n## 守护进程，并行编译\n\n在项目的根目录中有一个gradle.properties 文件，\n![image](http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg)\n\norg.gradle.daemon=true 就是让你让你编译时使用守护进程。\n\norg.gradle.parallel=true 使用并行编译\n\norg.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配\n\n-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配\n\n当然你也可以在下面的目录下面创建`gradle.properties`,来配置全局的属性，在所有的项目中起作用。\n    `/home//.gradle/`(Linux)\n    `/Users//.gradle/`(Mac)\n    `C:\\Users\\\\.gradle`(Windows)\n当然也可以修改xxx\\android studio 安装目录\\bin\\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。\n\n开发使用SDK=21\n\n```\nandroid {\n\t...\n\n    productFlavors {\n        dev {\n            minSdkVersion 21\n        }\n\n        release {\n            minSdkVersion 14\n        }\n    }\n}\n\n```\n我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。\n\n## 使用aar依赖\n我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。\n\n```\nallprojects {\n   repositories {\n      jcenter()\n      flatDir {\n        dirs 'libs'\n      }\n   }\n}\n\ndependencies {\n    compile(name:'cards', ext:'aar')\n}\n```\n\n**当然也可以这样添加**\n\n我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。\n\n```\nconfigurations.maybeCreate(\"default\")\nartifacts.add(\"default\", file('mylibrary-debug.aar'))\n```\n\n然后在我们的Module 中这样引用即可。\n\n```\ncompile project(':mylibrary-debug')\n```\n## dexOptions\n\n```\nclasspath 'com.android.tools.build:gradle:2.0.0-alpha9'\n```\n```\n# Default value: -Xmx10248m -XX:MaxPermSize=256m\norg.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=512m\n```\n\n```\ndexOptions {\n    preDexLibraries true\n    javaMaxHeapSize \"3g\"\n    incremental true\n    dexInProcess = true\n}\n```\n\n这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。\n\n\n## 参考\n[android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow](http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9)\n\n[How to manually include external aar package using new Gradle Android Build System | Stack Overflow](http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst)\n\n[优化android studio编译效率的方法 | 开发技术前线](http://www.devtf.cn/?p=585)\n\n[加速Android Studio/Gradle构建 | 码农明明桑](http://blog.isming.me/2015/03/18/android-build-speed-up/)\n\n[android - Adding local .aar files to my gradle build | Stack Overflow](http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build)\n\n[Android模块化编程之引用本地的aar | Stormzhang](http://stormzhang.com/android/2015/03/01/android-reference-local-aar/)\n","slug":"知道Android-中Gradle-的这些技巧，提升编译构建速度","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxga0066sifyq899vfmz","content":"<p>现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。</p>\n<p>下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。</p>\n<blockquote>\n<p>原文链接：<a href=\"http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/\" target=\"_blank\" rel=\"noopener\">http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\"></a> 设置代理</h2>\n<p>因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举例ShadowSocket</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.http</span><span class=\"selector-class\">.proxyHost</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.http</span><span class=\"selector-class\">.proxyPort</span>=<span class=\"number\">1080</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.https</span><span class=\"selector-class\">.proxyHost</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.https</span><span class=\"selector-class\">.proxyPort</span>=<span class=\"number\">1080</span></span><br></pre></td></tr></table></figure>\n<p>如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。</p>\n<h2 id=\"更新gradle设置离线状态\"><a class=\"markdownIt-Anchor\" href=\"#更新gradle设置离线状态\"></a> 更新Gradle,设置离线状态</h2>\n<p>Android Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg\" alt=\"image\"></p>\n<p>如果需要使用命令行编译，可以配置—daemon —parallel —offline。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg\" alt=\"image\"></p>\n<h2 id=\"守护进程并行编译\"><a class=\"markdownIt-Anchor\" href=\"#守护进程并行编译\"></a> 守护进程，并行编译</h2>\n<p>在项目的根目录中有一个gradle.properties 文件，<br>\n<img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg\" alt=\"image\"></p>\n<p>org.gradle.daemon=true 就是让你让你编译时使用守护进程。</p>\n<p>org.gradle.parallel=true 使用并行编译</p>\n<p>org.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配</p>\n<p>-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配</p>\n<p>当然你也可以在下面的目录下面创建<code>gradle.properties</code>,来配置全局的属性，在所有的项目中起作用。<br>\n<code>/home//.gradle/</code>(Linux)<br>\n<code>/Users//.gradle/</code>(Mac)<br>\n<code>C:\\Users\\\\.gradle</code>(Windows)<br>\n当然也可以修改xxx\\android studio 安装目录\\bin\\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。</p>\n<p>开发使用SDK=21</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">android</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">productFlavors</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">dev</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">minSdkVersion</span> <span class=\"string\">21</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">release</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">minSdkVersion</span> <span class=\"string\">14</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。</p>\n<h2 id=\"使用aar依赖\"><a class=\"markdownIt-Anchor\" href=\"#使用aar依赖\"></a> 使用aar依赖</h2>\n<p>我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">      jcenter()</span><br><span class=\"line\">      <span class=\"keyword\">flatDir</span> &#123;</span><br><span class=\"line\">        dirs <span class=\"string\">'libs'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span>(name:<span class=\"string\">'cards'</span>, ext:<span class=\"string\">'aar'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当然也可以这样添加</strong></p>\n<p>我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">configurations</span>.maybeCreate(<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">artifacts</span>.add(<span class=\"string\">\"default\"</span>, <span class=\"keyword\">file</span>(<span class=\"string\">'mylibrary-debug.aar'</span>))</span><br></pre></td></tr></table></figure>\n<p>然后在我们的Module 中这样引用即可。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span> <span class=\"keyword\">project</span>(<span class=\"string\">':mylibrary-debug'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"dexoptions\"><a class=\"markdownIt-Anchor\" href=\"#dexoptions\"></a> dexOptions</h2>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:2.0.0-alpha9'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span></span><br><span class=\"line\">org.gradle.<span class=\"attribute\">jvmargs</span>=-Xmx4g -XX:<span class=\"attribute\">MaxPermSize</span>=512m</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">dexOptions</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">preDexLibraries</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    javaMaxHeapSize <span class=\"string\">\"3g\"</span></span><br><span class=\"line\">    incremental <span class=\"literal\">true</span></span><br><span class=\"line\">    dexInProcess = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9\" target=\"_blank\" rel=\"noopener\">android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst\" target=\"_blank\" rel=\"noopener\">How to manually include external aar package using new Gradle Android Build System | Stack Overflow</a></p>\n<p><a href=\"http://www.devtf.cn/?p=585\" target=\"_blank\" rel=\"noopener\">优化android studio编译效率的方法 | 开发技术前线</a></p>\n<p><a href=\"http://blog.isming.me/2015/03/18/android-build-speed-up/\" target=\"_blank\" rel=\"noopener\">加速Android Studio/Gradle构建 | 码农明明桑</a></p>\n<p><a href=\"http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build\" target=\"_blank\" rel=\"noopener\">android - Adding local .aar files to my gradle build | Stack Overflow</a></p>\n<p><a href=\"http://stormzhang.com/android/2015/03/01/android-reference-local-aar/\" target=\"_blank\" rel=\"noopener\">Android模块化编程之引用本地的aar | Stormzhang</a></p>\n","site":{"data":{}},"excerpt":"<p>现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。</p>\n<p>下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。</p>\n<blockquote>\n<p>原文链接：<a href=\"http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/\" target=\"_blank\" rel=\"noopener\">http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/</a></p>\n</blockquote>","more":"<h2 id=\"设置代理\"><a class=\"markdownIt-Anchor\" href=\"#设置代理\"></a> 设置代理</h2>\n<p>因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的gradle.properties 配置。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举例ShadowSocket</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.http</span><span class=\"selector-class\">.proxyHost</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.http</span><span class=\"selector-class\">.proxyPort</span>=<span class=\"number\">1080</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.https</span><span class=\"selector-class\">.proxyHost</span>=<span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">systemProp<span class=\"selector-class\">.https</span><span class=\"selector-class\">.proxyPort</span>=<span class=\"number\">1080</span></span><br></pre></td></tr></table></figure>\n<p>如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。</p>\n<h2 id=\"更新gradle设置离线状态\"><a class=\"markdownIt-Anchor\" href=\"#更新gradle设置离线状态\"></a> 更新Gradle,设置离线状态</h2>\n<p>Android Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个gradle 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg\" alt=\"image\"></p>\n<p>如果需要使用命令行编译，可以配置—daemon —parallel —offline。</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg\" alt=\"image\"></p>\n<h2 id=\"守护进程并行编译\"><a class=\"markdownIt-Anchor\" href=\"#守护进程并行编译\"></a> 守护进程，并行编译</h2>\n<p>在项目的根目录中有一个gradle.properties 文件，<br>\n<img src=\"http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg\" alt=\"image\"></p>\n<p>org.gradle.daemon=true 就是让你让你编译时使用守护进程。</p>\n<p>org.gradle.parallel=true 使用并行编译</p>\n<p>org.gradle.jvmargs=-Xmx2048m JVM最大允许分配的堆内存，按需分配</p>\n<p>-XX:MaxPermSize=512m JVM最大允许分配的非堆内存，按需分配</p>\n<p>当然你也可以在下面的目录下面创建<code>gradle.properties</code>,来配置全局的属性，在所有的项目中起作用。<br>\n<code>/home//.gradle/</code>(Linux)<br>\n<code>/Users//.gradle/</code>(Mac)<br>\n<code>C:\\Users\\\\.gradle</code>(Windows)<br>\n当然也可以修改xxx\\android studio 安装目录\\bin\\studio64.exe.vmoptions 文件来配置JVM 的相关的参数。</p>\n<p>开发使用SDK=21</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">android</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">productFlavors</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">dev</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">minSdkVersion</span> <span class=\"string\">21</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attr\">release</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">minSdkVersion</span> <span class=\"string\">14</span></span><br><span class=\"line\">        <span class=\"attr\">&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">&#125;</span></span><br><span class=\"line\"><span class=\"attr\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。</p>\n<h2 id=\"使用aar依赖\"><a class=\"markdownIt-Anchor\" href=\"#使用aar依赖\"></a> 使用aar依赖</h2>\n<p>我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">      jcenter()</span><br><span class=\"line\">      <span class=\"keyword\">flatDir</span> &#123;</span><br><span class=\"line\">        dirs <span class=\"string\">'libs'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span>(name:<span class=\"string\">'cards'</span>, ext:<span class=\"string\">'aar'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当然也可以这样添加</strong></p>\n<p>我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">configurations</span>.maybeCreate(<span class=\"string\">\"default\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">artifacts</span>.add(<span class=\"string\">\"default\"</span>, <span class=\"keyword\">file</span>(<span class=\"string\">'mylibrary-debug.aar'</span>))</span><br></pre></td></tr></table></figure>\n<p>然后在我们的Module 中这样引用即可。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span> <span class=\"keyword\">project</span>(<span class=\"string\">':mylibrary-debug'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"dexoptions\"><a class=\"markdownIt-Anchor\" href=\"#dexoptions\"></a> dexOptions</h2>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">classpath</span> <span class=\"string\">'com.android.tools.build:gradle:2.0.0-alpha9'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span></span><br><span class=\"line\">org.gradle.<span class=\"attribute\">jvmargs</span>=-Xmx4g -XX:<span class=\"attribute\">MaxPermSize</span>=512m</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">dexOptions</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">preDexLibraries</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    javaMaxHeapSize <span class=\"string\">\"3g\"</span></span><br><span class=\"line\">    incremental <span class=\"literal\">true</span></span><br><span class=\"line\">    dexInProcess = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是2.0.0-alpha9，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。</p>\n<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\"></a> 参考</h2>\n<p><a href=\"http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9\" target=\"_blank\" rel=\"noopener\">android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow</a></p>\n<p><a href=\"http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst\" target=\"_blank\" rel=\"noopener\">How to manually include external aar package using new Gradle Android Build System | Stack Overflow</a></p>\n<p><a href=\"http://www.devtf.cn/?p=585\" target=\"_blank\" rel=\"noopener\">优化android studio编译效率的方法 | 开发技术前线</a></p>\n<p><a href=\"http://blog.isming.me/2015/03/18/android-build-speed-up/\" target=\"_blank\" rel=\"noopener\">加速Android Studio/Gradle构建 | 码农明明桑</a></p>\n<p><a href=\"http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build\" target=\"_blank\" rel=\"noopener\">android - Adding local .aar files to my gradle build | Stack Overflow</a></p>\n<p><a href=\"http://stormzhang.com/android/2015/03/01/android-reference-local-aar/\" target=\"_blank\" rel=\"noopener\">Android模块化编程之引用本地的aar | Stormzhang</a></p>"},{"title":"英语谚语","date":"2016-03-12T02:51:05.000Z","_content":"\n#### 英语谚语\n> English proverbs\n\n<!-- more -->\n\nGreat minds have purpose, others have wishes.\n伟大的人有目标， 平庸的人只有愿望。\n\n\nIf winter comes, can spring be far behind?\n冬天来了， 春天还会远吗？\n\nBehind the fear of an ideal you, you create the fear, you can beat him.\n恐惧的背后有一个理想的你，恐惧是你自己创造，你也可以打败他。\n\nThe best preparation for tomorrow is doing your best today.\n立足当下，赢在未来。\n\nThe more you care, the more you have to lose.\n在意的越多，失去的越多。\n\nAll sad people like poetry, happy people like songs.\n悲伤的人喜欢诗，幸福的人喜欢歌。\n\nLife's a little bit messy. We all make mistakes, No matter what type of animal you are, change starts with you.\n生活总会有点不顺意，我们都会犯错。天性如何并不重要，重要的是你开始改变。\n\nThe first wealth is health.\n健康是人生第一财富。\n\nSweat is the lubricant of success.\n汗水是成功的润滑剂。\n\nBe confident with yourself and stop worring what other people think. Do what's best for your future happiness.\n对自己要自信，别再管其他人怎么想了，为了未来幸福全力以赴吧！\n\nTrue mastery of any skill taskes a lifetime.\n对任何技能的掌握都需要一生的刻苦操练。\n\nYou're unique, nothing can replace you.\n你举世无双，无人可以替代。\n\nThe less you reveal the more people can wonder.\n越矜持神秘，越令人神往。--人间烟火0000译\n\nWe are as indestructible as we believe ourselves to be.\n如我所念，坚不可摧。--悄然翩跹译\n\nTo be close to your friend, but closer to your enemy.\n亲近你的朋友，但更要亲近你的敌人。--雪织天医译\n\nWhere there is life, there is hope.\n有生命必有希望。\n\nEven the smallest person can change the course of the future.\n即使是小人物，也可以改变未来。--清清me(~~)心译文\n\nIntelligence without ambition is a bird without wings.\n无志之才，如无翼之鸟。\n\nI have no secret of success but hard work.\n除辛勤工作之外，我别无成功的秘诀。\n\nThat man is the richest whose pleasures are the cheapest.\n能处处寻求快乐的人才是最富有的人。\n\nA smile is a curve that sets everything straight.\n微笑是一道弧线，去能把一切摆平。\n\nThink great thoughts and you will be great.\n心怀伟大的理想，你将会变得伟大。\n\nWe must hang together, or we'll be hanged separately.\n我们必须团结在一起，否则我们将被一个个绞死。\n\nLive well, love lots, and laugh often.\n善待生活，热爱一切，笑口常开。\n\nBut all sunshine without shade, all pleasure without pain, is not life at all.\n但只有阳光没有阴影，只有快乐没有痛苦，根本不是真正的生活。\n\nNever regret anything because at one time it was exactly what you wanted.\n不要后悔做任何事情，因为曾经有个时候，那正是你想要的。\n\nBeauty is an attitude. It has nothing to do with age.\n美，是一种态度，与年龄无关  --也许就这样译\n\nThe cloud stood humbly in a corner of the sky. The morning crowned it with splendor.\n白云谦卑地站在天边，晨光给它披上壮丽的光彩。 --泰戈尔\n\nI am a slow walker, but I never walk backwards.\n我走的很慢，但是我从来不会后退。\n\nMusic is the best school in life, and at the same time it is the best way   for us to extricate ourselves from it.\n音乐是生活中最好的学校，而同时它又是我们从中解脱的最佳途径。\n\nIt's kind of fun to do the impossible.\n乐在为不可为之事。—千倩晶汀译\n\nWhatever is worth doing is worth doing well.\n任何值得做的，都值得把它做好。\n\nStay hungry,stay foolish.\n求知若饥，虚心若愚。\n\nThe best preparation for tomorrow is doing your best today.\n对明天做好的准备就是今天做到最好。\n\nEither move or be moved.\n先发制人，后发而制于人。\n\nCowards die many times before their actual deaths.\n胆小怕死，虽生犹死。\n\nA friend without faults will never be found.\n没有缺点的朋友是永远找不到的。\n\nEvery man desires to live long, but no man wishes to be old.\n人人都想要长命百岁，但没人愿意变老。\n\nBrevity is the soul of wit.\n简洁是智慧的灵魂。\n\nEvery man dies, not every man really lives.\n任何人都将会死去，然而并不是每个人都真真正正的活过。\n\nSweet are the uses of adversity.\n逆境和厄运自有妙处。\n\nHad I not seen the sun, I could have borne the shade.\n我本可以忍受黑暗，如果我不曾见过阳光。\n","source":"_posts/英语谚语.md","raw":"---\ntitle: 英语谚语\ndate: 2016-03-12 10:51:05\ntags: [english]\ncategories: english\n---\n\n#### 英语谚语\n> English proverbs\n\n<!-- more -->\n\nGreat minds have purpose, others have wishes.\n伟大的人有目标， 平庸的人只有愿望。\n\n\nIf winter comes, can spring be far behind?\n冬天来了， 春天还会远吗？\n\nBehind the fear of an ideal you, you create the fear, you can beat him.\n恐惧的背后有一个理想的你，恐惧是你自己创造，你也可以打败他。\n\nThe best preparation for tomorrow is doing your best today.\n立足当下，赢在未来。\n\nThe more you care, the more you have to lose.\n在意的越多，失去的越多。\n\nAll sad people like poetry, happy people like songs.\n悲伤的人喜欢诗，幸福的人喜欢歌。\n\nLife's a little bit messy. We all make mistakes, No matter what type of animal you are, change starts with you.\n生活总会有点不顺意，我们都会犯错。天性如何并不重要，重要的是你开始改变。\n\nThe first wealth is health.\n健康是人生第一财富。\n\nSweat is the lubricant of success.\n汗水是成功的润滑剂。\n\nBe confident with yourself and stop worring what other people think. Do what's best for your future happiness.\n对自己要自信，别再管其他人怎么想了，为了未来幸福全力以赴吧！\n\nTrue mastery of any skill taskes a lifetime.\n对任何技能的掌握都需要一生的刻苦操练。\n\nYou're unique, nothing can replace you.\n你举世无双，无人可以替代。\n\nThe less you reveal the more people can wonder.\n越矜持神秘，越令人神往。--人间烟火0000译\n\nWe are as indestructible as we believe ourselves to be.\n如我所念，坚不可摧。--悄然翩跹译\n\nTo be close to your friend, but closer to your enemy.\n亲近你的朋友，但更要亲近你的敌人。--雪织天医译\n\nWhere there is life, there is hope.\n有生命必有希望。\n\nEven the smallest person can change the course of the future.\n即使是小人物，也可以改变未来。--清清me(~~)心译文\n\nIntelligence without ambition is a bird without wings.\n无志之才，如无翼之鸟。\n\nI have no secret of success but hard work.\n除辛勤工作之外，我别无成功的秘诀。\n\nThat man is the richest whose pleasures are the cheapest.\n能处处寻求快乐的人才是最富有的人。\n\nA smile is a curve that sets everything straight.\n微笑是一道弧线，去能把一切摆平。\n\nThink great thoughts and you will be great.\n心怀伟大的理想，你将会变得伟大。\n\nWe must hang together, or we'll be hanged separately.\n我们必须团结在一起，否则我们将被一个个绞死。\n\nLive well, love lots, and laugh often.\n善待生活，热爱一切，笑口常开。\n\nBut all sunshine without shade, all pleasure without pain, is not life at all.\n但只有阳光没有阴影，只有快乐没有痛苦，根本不是真正的生活。\n\nNever regret anything because at one time it was exactly what you wanted.\n不要后悔做任何事情，因为曾经有个时候，那正是你想要的。\n\nBeauty is an attitude. It has nothing to do with age.\n美，是一种态度，与年龄无关  --也许就这样译\n\nThe cloud stood humbly in a corner of the sky. The morning crowned it with splendor.\n白云谦卑地站在天边，晨光给它披上壮丽的光彩。 --泰戈尔\n\nI am a slow walker, but I never walk backwards.\n我走的很慢，但是我从来不会后退。\n\nMusic is the best school in life, and at the same time it is the best way   for us to extricate ourselves from it.\n音乐是生活中最好的学校，而同时它又是我们从中解脱的最佳途径。\n\nIt's kind of fun to do the impossible.\n乐在为不可为之事。—千倩晶汀译\n\nWhatever is worth doing is worth doing well.\n任何值得做的，都值得把它做好。\n\nStay hungry,stay foolish.\n求知若饥，虚心若愚。\n\nThe best preparation for tomorrow is doing your best today.\n对明天做好的准备就是今天做到最好。\n\nEither move or be moved.\n先发制人，后发而制于人。\n\nCowards die many times before their actual deaths.\n胆小怕死，虽生犹死。\n\nA friend without faults will never be found.\n没有缺点的朋友是永远找不到的。\n\nEvery man desires to live long, but no man wishes to be old.\n人人都想要长命百岁，但没人愿意变老。\n\nBrevity is the soul of wit.\n简洁是智慧的灵魂。\n\nEvery man dies, not every man really lives.\n任何人都将会死去，然而并不是每个人都真真正正的活过。\n\nSweet are the uses of adversity.\n逆境和厄运自有妙处。\n\nHad I not seen the sun, I could have borne the shade.\n我本可以忍受黑暗，如果我不曾见过阳光。\n","slug":"英语谚语","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxgb0069sify86l3325q","content":"<h4 id=\"英语谚语\"><a class=\"markdownIt-Anchor\" href=\"#英语谚语\"></a> 英语谚语</h4>\n<blockquote>\n<p>English proverbs</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>Great minds have purpose, others have wishes.<br>\n伟大的人有目标， 平庸的人只有愿望。</p>\n<p>If winter comes, can spring be far behind?<br>\n冬天来了， 春天还会远吗？</p>\n<p>Behind the fear of an ideal you, you create the fear, you can beat him.<br>\n恐惧的背后有一个理想的你，恐惧是你自己创造，你也可以打败他。</p>\n<p>The best preparation for tomorrow is doing your best today.<br>\n立足当下，赢在未来。</p>\n<p>The more you care, the more you have to lose.<br>\n在意的越多，失去的越多。</p>\n<p>All sad people like poetry, happy people like songs.<br>\n悲伤的人喜欢诗，幸福的人喜欢歌。</p>\n<p>Life’s a little bit messy. We all make mistakes, No matter what type of animal you are, change starts with you.<br>\n生活总会有点不顺意，我们都会犯错。天性如何并不重要，重要的是你开始改变。</p>\n<p>The first wealth is health.<br>\n健康是人生第一财富。</p>\n<p>Sweat is the lubricant of success.<br>\n汗水是成功的润滑剂。</p>\n<p>Be confident with yourself and stop worring what other people think. Do what’s best for your future happiness.<br>\n对自己要自信，别再管其他人怎么想了，为了未来幸福全力以赴吧！</p>\n<p>True mastery of any skill taskes a lifetime.<br>\n对任何技能的掌握都需要一生的刻苦操练。</p>\n<p>You’re unique, nothing can replace you.<br>\n你举世无双，无人可以替代。</p>\n<p>The less you reveal the more people can wonder.<br>\n越矜持神秘，越令人神往。–人间烟火0000译</p>\n<p>We are as indestructible as we believe ourselves to be.<br>\n如我所念，坚不可摧。–悄然翩跹译</p>\n<p>To be close to your friend, but closer to your enemy.<br>\n亲近你的朋友，但更要亲近你的敌人。–雪织天医译</p>\n<p>Where there is life, there is hope.<br>\n有生命必有希望。</p>\n<p>Even the smallest person can change the course of the future.<br>\n即使是小人物，也可以改变未来。–清清me(~~)心译文</p>\n<p>Intelligence without ambition is a bird without wings.<br>\n无志之才，如无翼之鸟。</p>\n<p>I have no secret of success but hard work.<br>\n除辛勤工作之外，我别无成功的秘诀。</p>\n<p>That man is the richest whose pleasures are the cheapest.<br>\n能处处寻求快乐的人才是最富有的人。</p>\n<p>A smile is a curve that sets everything straight.<br>\n微笑是一道弧线，去能把一切摆平。</p>\n<p>Think great thoughts and you will be great.<br>\n心怀伟大的理想，你将会变得伟大。</p>\n<p>We must hang together, or we’ll be hanged separately.<br>\n我们必须团结在一起，否则我们将被一个个绞死。</p>\n<p>Live well, love lots, and laugh often.<br>\n善待生活，热爱一切，笑口常开。</p>\n<p>But all sunshine without shade, all pleasure without pain, is not life at all.<br>\n但只有阳光没有阴影，只有快乐没有痛苦，根本不是真正的生活。</p>\n<p>Never regret anything because at one time it was exactly what you wanted.<br>\n不要后悔做任何事情，因为曾经有个时候，那正是你想要的。</p>\n<p>Beauty is an attitude. It has nothing to do with age.<br>\n美，是一种态度，与年龄无关  --也许就这样译</p>\n<p>The cloud stood humbly in a corner of the sky. The morning crowned it with splendor.<br>\n白云谦卑地站在天边，晨光给它披上壮丽的光彩。 --泰戈尔</p>\n<p>I am a slow walker, but I never walk backwards.<br>\n我走的很慢，但是我从来不会后退。</p>\n<p>Music is the best school in life, and at the same time it is the best way   for us to extricate ourselves from it.<br>\n音乐是生活中最好的学校，而同时它又是我们从中解脱的最佳途径。</p>\n<p>It’s kind of fun to do the impossible.<br>\n乐在为不可为之事。—千倩晶汀译</p>\n<p>Whatever is worth doing is worth doing well.<br>\n任何值得做的，都值得把它做好。</p>\n<p>Stay hungry,stay foolish.<br>\n求知若饥，虚心若愚。</p>\n<p>The best preparation for tomorrow is doing your best today.<br>\n对明天做好的准备就是今天做到最好。</p>\n<p>Either move or be moved.<br>\n先发制人，后发而制于人。</p>\n<p>Cowards die many times before their actual deaths.<br>\n胆小怕死，虽生犹死。</p>\n<p>A friend without faults will never be found.<br>\n没有缺点的朋友是永远找不到的。</p>\n<p>Every man desires to live long, but no man wishes to be old.<br>\n人人都想要长命百岁，但没人愿意变老。</p>\n<p>Brevity is the soul of wit.<br>\n简洁是智慧的灵魂。</p>\n<p>Every man dies, not every man really lives.<br>\n任何人都将会死去，然而并不是每个人都真真正正的活过。</p>\n<p>Sweet are the uses of adversity.<br>\n逆境和厄运自有妙处。</p>\n<p>Had I not seen the sun, I could have borne the shade.<br>\n我本可以忍受黑暗，如果我不曾见过阳光。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"英语谚语\"><a class=\"markdownIt-Anchor\" href=\"#英语谚语\"></a> 英语谚语</h4>\n<blockquote>\n<p>English proverbs</p>\n</blockquote>","more":"<p>Great minds have purpose, others have wishes.<br>\n伟大的人有目标， 平庸的人只有愿望。</p>\n<p>If winter comes, can spring be far behind?<br>\n冬天来了， 春天还会远吗？</p>\n<p>Behind the fear of an ideal you, you create the fear, you can beat him.<br>\n恐惧的背后有一个理想的你，恐惧是你自己创造，你也可以打败他。</p>\n<p>The best preparation for tomorrow is doing your best today.<br>\n立足当下，赢在未来。</p>\n<p>The more you care, the more you have to lose.<br>\n在意的越多，失去的越多。</p>\n<p>All sad people like poetry, happy people like songs.<br>\n悲伤的人喜欢诗，幸福的人喜欢歌。</p>\n<p>Life’s a little bit messy. We all make mistakes, No matter what type of animal you are, change starts with you.<br>\n生活总会有点不顺意，我们都会犯错。天性如何并不重要，重要的是你开始改变。</p>\n<p>The first wealth is health.<br>\n健康是人生第一财富。</p>\n<p>Sweat is the lubricant of success.<br>\n汗水是成功的润滑剂。</p>\n<p>Be confident with yourself and stop worring what other people think. Do what’s best for your future happiness.<br>\n对自己要自信，别再管其他人怎么想了，为了未来幸福全力以赴吧！</p>\n<p>True mastery of any skill taskes a lifetime.<br>\n对任何技能的掌握都需要一生的刻苦操练。</p>\n<p>You’re unique, nothing can replace you.<br>\n你举世无双，无人可以替代。</p>\n<p>The less you reveal the more people can wonder.<br>\n越矜持神秘，越令人神往。–人间烟火0000译</p>\n<p>We are as indestructible as we believe ourselves to be.<br>\n如我所念，坚不可摧。–悄然翩跹译</p>\n<p>To be close to your friend, but closer to your enemy.<br>\n亲近你的朋友，但更要亲近你的敌人。–雪织天医译</p>\n<p>Where there is life, there is hope.<br>\n有生命必有希望。</p>\n<p>Even the smallest person can change the course of the future.<br>\n即使是小人物，也可以改变未来。–清清me(~~)心译文</p>\n<p>Intelligence without ambition is a bird without wings.<br>\n无志之才，如无翼之鸟。</p>\n<p>I have no secret of success but hard work.<br>\n除辛勤工作之外，我别无成功的秘诀。</p>\n<p>That man is the richest whose pleasures are the cheapest.<br>\n能处处寻求快乐的人才是最富有的人。</p>\n<p>A smile is a curve that sets everything straight.<br>\n微笑是一道弧线，去能把一切摆平。</p>\n<p>Think great thoughts and you will be great.<br>\n心怀伟大的理想，你将会变得伟大。</p>\n<p>We must hang together, or we’ll be hanged separately.<br>\n我们必须团结在一起，否则我们将被一个个绞死。</p>\n<p>Live well, love lots, and laugh often.<br>\n善待生活，热爱一切，笑口常开。</p>\n<p>But all sunshine without shade, all pleasure without pain, is not life at all.<br>\n但只有阳光没有阴影，只有快乐没有痛苦，根本不是真正的生活。</p>\n<p>Never regret anything because at one time it was exactly what you wanted.<br>\n不要后悔做任何事情，因为曾经有个时候，那正是你想要的。</p>\n<p>Beauty is an attitude. It has nothing to do with age.<br>\n美，是一种态度，与年龄无关  --也许就这样译</p>\n<p>The cloud stood humbly in a corner of the sky. The morning crowned it with splendor.<br>\n白云谦卑地站在天边，晨光给它披上壮丽的光彩。 --泰戈尔</p>\n<p>I am a slow walker, but I never walk backwards.<br>\n我走的很慢，但是我从来不会后退。</p>\n<p>Music is the best school in life, and at the same time it is the best way   for us to extricate ourselves from it.<br>\n音乐是生活中最好的学校，而同时它又是我们从中解脱的最佳途径。</p>\n<p>It’s kind of fun to do the impossible.<br>\n乐在为不可为之事。—千倩晶汀译</p>\n<p>Whatever is worth doing is worth doing well.<br>\n任何值得做的，都值得把它做好。</p>\n<p>Stay hungry,stay foolish.<br>\n求知若饥，虚心若愚。</p>\n<p>The best preparation for tomorrow is doing your best today.<br>\n对明天做好的准备就是今天做到最好。</p>\n<p>Either move or be moved.<br>\n先发制人，后发而制于人。</p>\n<p>Cowards die many times before their actual deaths.<br>\n胆小怕死，虽生犹死。</p>\n<p>A friend without faults will never be found.<br>\n没有缺点的朋友是永远找不到的。</p>\n<p>Every man desires to live long, but no man wishes to be old.<br>\n人人都想要长命百岁，但没人愿意变老。</p>\n<p>Brevity is the soul of wit.<br>\n简洁是智慧的灵魂。</p>\n<p>Every man dies, not every man really lives.<br>\n任何人都将会死去，然而并不是每个人都真真正正的活过。</p>\n<p>Sweet are the uses of adversity.<br>\n逆境和厄运自有妙处。</p>\n<p>Had I not seen the sun, I could have borne the shade.<br>\n我本可以忍受黑暗，如果我不曾见过阳光。</p>"},{"title":"编程中的命名设计那点事","date":"2016-05-30T04:56:30.000Z","_content":"\n# 编程中的命名设计那点事\n\n在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。\n```\nIn the beginning was the Word, and the Word was with God, and the Word was God\n太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)\n\n```\n<!-- more -->\n\n在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。\n\n好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。\n\n为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。\n\n\n## 类型命名(类，接口，和结构)\n\n### 名字应该尽量采用名词\nBad:           Happy\nGood:          Happiness\n\n### 不要使用类似名字空间的前缀\nBad:           SystemOnlineMessage\nGood:          System::Online:Message\n\n### 形容词不要用太多，能描述清楚就行\nBad:           IAbstractFactoryPatternBase\nGood:          IFactory\n\n\n### 在类型中不要使用Manager 或则 Helper 或则其他没意义的单词\n如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。\n\nBad:           ConnectionManager\n               XmlHelper\nGood:          Connection\n               XmlDocument, XmlNode, etc.\n### 如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名\nBad:           IncomingMessageQueue\n               CharacterArray\n               SpatialOrganizer\nGood:          Mailbox\n               String\n               Map\n\n### 如果你使用类比，你就应该一致的使用它们\nBad:           Mailbox,DestinationID\nGood:          Mailbox,Address\n\n## 函数(方法和过程)\n### 简洁\nBad:           list.GetNumberOfItems()\nGood:          list.Count()\n\n### 不要太简洁\nBad:           list.Verify()\nGood:          list.ContainsNull()\n\n### 避免缩写\nBad:           list.Srt()\nGood:          list.Sort()\n\n### 对于完成某件事情的函数使用动词\nBad:           obj.RefCount();\nGood:          list.Clear();\n               list.Sort();\n               obj.AddReference();\n\n### 对于返回布尔型的函数，使用类似提问的方式\nBad:           list.Empty();\nGood:          list.IsEmpty();\n               list.Contains(item);\n\n### 对于只是返回属性，而不改变状态的函数则使用名词\nBad:           list.GetCount();\nGood:          list.Count();                              \n\n### 不要在函数名字中重复参数的名称\nBad:           list.AddItem(item);\n               handler.ReceiveMessage(msg);\nGood:          list.Add(item);\n               handler.Receive(msg);\n\n### 不要方法的名字中重复此方法的类的名称\nBad:           list.AddToList(item);\nGood:          list.Add(item);\n\n### 不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别\nBad:           list.GetCountInt();\nGood:          list.GetCount();\n               message.GetIntValue();\n               message.GetFloatValue();\n\n### 不要名字中使用And 或则 Or                              \n如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。\n如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他\nBad:           mail.VerifyAddressAndSendStatus();\nGood:          mail.VerifyAddress();\n               mail.SendStatus();\n\n\n本文为转载：[查看原文](http://coolshell.cn/articles/990.html)\n","source":"_posts/编程中的命名设计那点事.md","raw":"---\ntitle: 编程中的命名设计那点事\ndate: 2016-05-30 12:56:30\ntags: [命名, android]\ncategories: android\n---\n\n# 编程中的命名设计那点事\n\n在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。\n```\nIn the beginning was the Word, and the Word was with God, and the Word was God\n太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)\n\n```\n<!-- more -->\n\n在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。\n\n好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。\n\n为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。\n\n\n## 类型命名(类，接口，和结构)\n\n### 名字应该尽量采用名词\nBad:           Happy\nGood:          Happiness\n\n### 不要使用类似名字空间的前缀\nBad:           SystemOnlineMessage\nGood:          System::Online:Message\n\n### 形容词不要用太多，能描述清楚就行\nBad:           IAbstractFactoryPatternBase\nGood:          IFactory\n\n\n### 在类型中不要使用Manager 或则 Helper 或则其他没意义的单词\n如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。\n\nBad:           ConnectionManager\n               XmlHelper\nGood:          Connection\n               XmlDocument, XmlNode, etc.\n### 如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名\nBad:           IncomingMessageQueue\n               CharacterArray\n               SpatialOrganizer\nGood:          Mailbox\n               String\n               Map\n\n### 如果你使用类比，你就应该一致的使用它们\nBad:           Mailbox,DestinationID\nGood:          Mailbox,Address\n\n## 函数(方法和过程)\n### 简洁\nBad:           list.GetNumberOfItems()\nGood:          list.Count()\n\n### 不要太简洁\nBad:           list.Verify()\nGood:          list.ContainsNull()\n\n### 避免缩写\nBad:           list.Srt()\nGood:          list.Sort()\n\n### 对于完成某件事情的函数使用动词\nBad:           obj.RefCount();\nGood:          list.Clear();\n               list.Sort();\n               obj.AddReference();\n\n### 对于返回布尔型的函数，使用类似提问的方式\nBad:           list.Empty();\nGood:          list.IsEmpty();\n               list.Contains(item);\n\n### 对于只是返回属性，而不改变状态的函数则使用名词\nBad:           list.GetCount();\nGood:          list.Count();                              \n\n### 不要在函数名字中重复参数的名称\nBad:           list.AddItem(item);\n               handler.ReceiveMessage(msg);\nGood:          list.Add(item);\n               handler.Receive(msg);\n\n### 不要方法的名字中重复此方法的类的名称\nBad:           list.AddToList(item);\nGood:          list.Add(item);\n\n### 不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别\nBad:           list.GetCountInt();\nGood:          list.GetCount();\n               message.GetIntValue();\n               message.GetFloatValue();\n\n### 不要名字中使用And 或则 Or                              \n如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。\n如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他\nBad:           mail.VerifyAddressAndSendStatus();\nGood:          mail.VerifyAddress();\n               mail.SendStatus();\n\n\n本文为转载：[查看原文](http://coolshell.cn/articles/990.html)\n","slug":"编程中的命名设计那点事","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxgc006dsifynfr2md24","content":"<h1 id=\"编程中的命名设计那点事\"><a class=\"markdownIt-Anchor\" href=\"#编程中的命名设计那点事\"></a> 编程中的命名设计那点事</h1>\n<p>在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In <span class=\"keyword\">the</span> beginning was <span class=\"keyword\">the</span> Word, <span class=\"keyword\">and</span> <span class=\"keyword\">the</span> Word was <span class=\"keyword\">with</span> God, <span class=\"keyword\">and</span> <span class=\"keyword\">the</span> Word was God</span><br><span class=\"line\">太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。</p>\n<p>好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。</p>\n<p>为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。</p>\n<h2 id=\"类型命名类接口和结构\"><a class=\"markdownIt-Anchor\" href=\"#类型命名类接口和结构\"></a> 类型命名(类，接口，和结构)</h2>\n<h3 id=\"名字应该尽量采用名词\"><a class=\"markdownIt-Anchor\" href=\"#名字应该尽量采用名词\"></a> 名字应该尽量采用名词</h3>\n<p>Bad:           Happy<br>\nGood:          Happiness</p>\n<h3 id=\"不要使用类似名字空间的前缀\"><a class=\"markdownIt-Anchor\" href=\"#不要使用类似名字空间的前缀\"></a> 不要使用类似名字空间的前缀</h3>\n<p>Bad:           SystemOnlineMessage<br>\nGood:          System::Online:Message</p>\n<h3 id=\"形容词不要用太多能描述清楚就行\"><a class=\"markdownIt-Anchor\" href=\"#形容词不要用太多能描述清楚就行\"></a> 形容词不要用太多，能描述清楚就行</h3>\n<p>Bad:           IAbstractFactoryPatternBase<br>\nGood:          IFactory</p>\n<h3 id=\"在类型中不要使用manager-或则-helper-或则其他没意义的单词\"><a class=\"markdownIt-Anchor\" href=\"#在类型中不要使用manager-或则-helper-或则其他没意义的单词\"></a> 在类型中不要使用Manager 或则 Helper 或则其他没意义的单词</h3>\n<p>如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。</p>\n<p>Bad:           ConnectionManager<br>\nXmlHelper<br>\nGood:          Connection<br>\nXmlDocument, XmlNode, etc.</p>\n<h3 id=\"如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名\"><a class=\"markdownIt-Anchor\" href=\"#如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名\"></a> 如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名</h3>\n<p>Bad:           IncomingMessageQueue<br>\nCharacterArray<br>\nSpatialOrganizer<br>\nGood:          Mailbox<br>\nString<br>\nMap</p>\n<h3 id=\"如果你使用类比你就应该一致的使用它们\"><a class=\"markdownIt-Anchor\" href=\"#如果你使用类比你就应该一致的使用它们\"></a> 如果你使用类比，你就应该一致的使用它们</h3>\n<p>Bad:           Mailbox,DestinationID<br>\nGood:          Mailbox,Address</p>\n<h2 id=\"函数方法和过程\"><a class=\"markdownIt-Anchor\" href=\"#函数方法和过程\"></a> 函数(方法和过程)</h2>\n<h3 id=\"简洁\"><a class=\"markdownIt-Anchor\" href=\"#简洁\"></a> 简洁</h3>\n<p>Bad:           list.GetNumberOfItems()<br>\nGood:          list.Count()</p>\n<h3 id=\"不要太简洁\"><a class=\"markdownIt-Anchor\" href=\"#不要太简洁\"></a> 不要太简洁</h3>\n<p>Bad:           list.Verify()<br>\nGood:          list.ContainsNull()</p>\n<h3 id=\"避免缩写\"><a class=\"markdownIt-Anchor\" href=\"#避免缩写\"></a> 避免缩写</h3>\n<p>Bad:           list.Srt()<br>\nGood:          list.Sort()</p>\n<h3 id=\"对于完成某件事情的函数使用动词\"><a class=\"markdownIt-Anchor\" href=\"#对于完成某件事情的函数使用动词\"></a> 对于完成某件事情的函数使用动词</h3>\n<p>Bad:           obj.RefCount();<br>\nGood:          list.Clear();<br>\nlist.Sort();<br>\nobj.AddReference();</p>\n<h3 id=\"对于返回布尔型的函数使用类似提问的方式\"><a class=\"markdownIt-Anchor\" href=\"#对于返回布尔型的函数使用类似提问的方式\"></a> 对于返回布尔型的函数，使用类似提问的方式</h3>\n<p>Bad:           list.Empty();<br>\nGood:          list.IsEmpty();<br>\nlist.Contains(item);</p>\n<h3 id=\"对于只是返回属性而不改变状态的函数则使用名词\"><a class=\"markdownIt-Anchor\" href=\"#对于只是返回属性而不改变状态的函数则使用名词\"></a> 对于只是返回属性，而不改变状态的函数则使用名词</h3>\n<p>Bad:           list.GetCount();<br>\nGood:          list.Count();</p>\n<h3 id=\"不要在函数名字中重复参数的名称\"><a class=\"markdownIt-Anchor\" href=\"#不要在函数名字中重复参数的名称\"></a> 不要在函数名字中重复参数的名称</h3>\n<p>Bad:           list.AddItem(item);<br>\nhandler.ReceiveMessage(msg);<br>\nGood:          list.Add(item);<br>\nhandler.Receive(msg);</p>\n<h3 id=\"不要方法的名字中重复此方法的类的名称\"><a class=\"markdownIt-Anchor\" href=\"#不要方法的名字中重复此方法的类的名称\"></a> 不要方法的名字中重复此方法的类的名称</h3>\n<p>Bad:           list.AddToList(item);<br>\nGood:          list.Add(item);</p>\n<h3 id=\"不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别\"><a class=\"markdownIt-Anchor\" href=\"#不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别\"></a> 不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别</h3>\n<p>Bad:           list.GetCountInt();<br>\nGood:          list.GetCount();<br>\nmessage.GetIntValue();<br>\nmessage.GetFloatValue();</p>\n<h3 id=\"不要名字中使用and-或则-or\"><a class=\"markdownIt-Anchor\" href=\"#不要名字中使用and-或则-or\"></a> 不要名字中使用And 或则 Or</h3>\n<p>如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。<br>\n如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他<br>\nBad:           mail.VerifyAddressAndSendStatus();<br>\nGood:          mail.VerifyAddress();<br>\nmail.SendStatus();</p>\n<p>本文为转载：<a href=\"http://coolshell.cn/articles/990.html\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"编程中的命名设计那点事\"><a class=\"markdownIt-Anchor\" href=\"#编程中的命名设计那点事\"></a> 编程中的命名设计那点事</h1>\n<p>在我开始设计系统的时候，我会花去很多时间去设计命名，因为好的命名和好的设计是分不开的。</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In <span class=\"keyword\">the</span> beginning was <span class=\"keyword\">the</span> Word, <span class=\"keyword\">and</span> <span class=\"keyword\">the</span> Word was <span class=\"keyword\">with</span> God, <span class=\"keyword\">and</span> <span class=\"keyword\">the</span> Word was God</span><br><span class=\"line\">太初有道。道与神同在，道就是神。 (约翰福音第一章，第一节)</span><br></pre></td></tr></table></figure>","more":"<p>在设计过程中给类，方法和函数好的命名会带来好的设计，虽然这不是一定成立，但是如果坏的命名那一定不会给你带来好的设计。在设计过程，如果你发现你很难命名某一个模块，某个方法时，可能你真正遇到的问题不是难命名的问题，而是这个设计是否真的合理，你或许应该花更多的时间来重新设计一下你的模块。</p>\n<p>好的命名不仅会带来好的设计，好的命名还提高了程序的可读性，降低代码维护的成本。另一方面，如果糟糕的命名会给代码带来一堵无形的墙，让你必须深入代码去研究代码具有的行为，增加你理解代码的时间。</p>\n<p>为此我总结了几条关于命名的指导原则，希望这几条原则能为你的命名设计带来帮助，我使用的是C++的语法，当然这些原则也很容易扩展到其他语言中去。</p>\n<h2 id=\"类型命名类接口和结构\"><a class=\"markdownIt-Anchor\" href=\"#类型命名类接口和结构\"></a> 类型命名(类，接口，和结构)</h2>\n<h3 id=\"名字应该尽量采用名词\"><a class=\"markdownIt-Anchor\" href=\"#名字应该尽量采用名词\"></a> 名字应该尽量采用名词</h3>\n<p>Bad:           Happy<br>\nGood:          Happiness</p>\n<h3 id=\"不要使用类似名字空间的前缀\"><a class=\"markdownIt-Anchor\" href=\"#不要使用类似名字空间的前缀\"></a> 不要使用类似名字空间的前缀</h3>\n<p>Bad:           SystemOnlineMessage<br>\nGood:          System::Online:Message</p>\n<h3 id=\"形容词不要用太多能描述清楚就行\"><a class=\"markdownIt-Anchor\" href=\"#形容词不要用太多能描述清楚就行\"></a> 形容词不要用太多，能描述清楚就行</h3>\n<p>Bad:           IAbstractFactoryPatternBase<br>\nGood:          IFactory</p>\n<h3 id=\"在类型中不要使用manager-或则-helper-或则其他没意义的单词\"><a class=\"markdownIt-Anchor\" href=\"#在类型中不要使用manager-或则-helper-或则其他没意义的单词\"></a> 在类型中不要使用Manager 或则 Helper 或则其他没意义的单词</h3>\n<p>如果你一定要在一个类型上加上Manager或Helper，那么这个类型要么就是命名的非常糟糕，要么就是设计的非常糟糕，如果是后则，那么这个类型就应该管理manage和帮助help一下自己了。</p>\n<p>Bad:           ConnectionManager<br>\nXmlHelper<br>\nGood:          Connection<br>\nXmlDocument, XmlNode, etc.</p>\n<h3 id=\"如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名\"><a class=\"markdownIt-Anchor\" href=\"#如果某个类不能通过简单的命名来描述它具有的功能可以考虑用类比的方式来命名\"></a> 如果某个类不能通过简单的命名来描述它具有的功能，可以考虑用类比的方式来命名</h3>\n<p>Bad:           IncomingMessageQueue<br>\nCharacterArray<br>\nSpatialOrganizer<br>\nGood:          Mailbox<br>\nString<br>\nMap</p>\n<h3 id=\"如果你使用类比你就应该一致的使用它们\"><a class=\"markdownIt-Anchor\" href=\"#如果你使用类比你就应该一致的使用它们\"></a> 如果你使用类比，你就应该一致的使用它们</h3>\n<p>Bad:           Mailbox,DestinationID<br>\nGood:          Mailbox,Address</p>\n<h2 id=\"函数方法和过程\"><a class=\"markdownIt-Anchor\" href=\"#函数方法和过程\"></a> 函数(方法和过程)</h2>\n<h3 id=\"简洁\"><a class=\"markdownIt-Anchor\" href=\"#简洁\"></a> 简洁</h3>\n<p>Bad:           list.GetNumberOfItems()<br>\nGood:          list.Count()</p>\n<h3 id=\"不要太简洁\"><a class=\"markdownIt-Anchor\" href=\"#不要太简洁\"></a> 不要太简洁</h3>\n<p>Bad:           list.Verify()<br>\nGood:          list.ContainsNull()</p>\n<h3 id=\"避免缩写\"><a class=\"markdownIt-Anchor\" href=\"#避免缩写\"></a> 避免缩写</h3>\n<p>Bad:           list.Srt()<br>\nGood:          list.Sort()</p>\n<h3 id=\"对于完成某件事情的函数使用动词\"><a class=\"markdownIt-Anchor\" href=\"#对于完成某件事情的函数使用动词\"></a> 对于完成某件事情的函数使用动词</h3>\n<p>Bad:           obj.RefCount();<br>\nGood:          list.Clear();<br>\nlist.Sort();<br>\nobj.AddReference();</p>\n<h3 id=\"对于返回布尔型的函数使用类似提问的方式\"><a class=\"markdownIt-Anchor\" href=\"#对于返回布尔型的函数使用类似提问的方式\"></a> 对于返回布尔型的函数，使用类似提问的方式</h3>\n<p>Bad:           list.Empty();<br>\nGood:          list.IsEmpty();<br>\nlist.Contains(item);</p>\n<h3 id=\"对于只是返回属性而不改变状态的函数则使用名词\"><a class=\"markdownIt-Anchor\" href=\"#对于只是返回属性而不改变状态的函数则使用名词\"></a> 对于只是返回属性，而不改变状态的函数则使用名词</h3>\n<p>Bad:           list.GetCount();<br>\nGood:          list.Count();</p>\n<h3 id=\"不要在函数名字中重复参数的名称\"><a class=\"markdownIt-Anchor\" href=\"#不要在函数名字中重复参数的名称\"></a> 不要在函数名字中重复参数的名称</h3>\n<p>Bad:           list.AddItem(item);<br>\nhandler.ReceiveMessage(msg);<br>\nGood:          list.Add(item);<br>\nhandler.Receive(msg);</p>\n<h3 id=\"不要方法的名字中重复此方法的类的名称\"><a class=\"markdownIt-Anchor\" href=\"#不要方法的名字中重复此方法的类的名称\"></a> 不要方法的名字中重复此方法的类的名称</h3>\n<p>Bad:           list.AddToList(item);<br>\nGood:          list.Add(item);</p>\n<h3 id=\"不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别\"><a class=\"markdownIt-Anchor\" href=\"#不要在函数的名字中加入返回类型除非函数名必须以返回类型进行区别\"></a> 不要在函数的名字中加入返回类型，除非函数名必须以返回类型进行区别</h3>\n<p>Bad:           list.GetCountInt();<br>\nGood:          list.GetCount();<br>\nmessage.GetIntValue();<br>\nmessage.GetFloatValue();</p>\n<h3 id=\"不要名字中使用and-或则-or\"><a class=\"markdownIt-Anchor\" href=\"#不要名字中使用and-或则-or\"></a> 不要名字中使用And 或则 Or</h3>\n<p>如果你使用一个连接词来连接函数名，那么这个函数肯定是做了太多的事情，更好的做法是将其分成更小的函数来处理(类似面向对象设计准则中的责任单一原则)。<br>\n如果你想确保是这是一个原子的操作，那么你应该用一个名字来描述这个操作或一个类来封装他<br>\nBad:           mail.VerifyAddressAndSendStatus();<br>\nGood:          mail.VerifyAddress();<br>\nmail.SendStatus();</p>\n<p>本文为转载：<a href=\"http://coolshell.cn/articles/990.html\" target=\"_blank\" rel=\"noopener\">查看原文</a></p>"},{"title":"音视频相关-文件码率与大小计算","date":"2019-04-22T03:09:38.000Z","_content":"\n>编码率/比特率直接与文件体积有关。且编码率与编码格式配合是否合适，直接关系到视频文件是否清晰。 \n\n<!-- more -->\n\n在视频编码领域，比特率常翻译为编码率，单位是Kbps，例如800Kbps \n\n其中， 1K=1024 1M=1024K \n\nb 为 比特（bit） 这个就是电脑文件大小的计量单位，1KB=8Kb，区分大小写，B代表字节(Byte) s 为 秒（second） p 为 每（per） \n以800kbps来编码表示经过编码后的数据每秒钟需要用800K比特来表示。 \n1MB=8Mb=1024KB=8192Kb \n\nWindows系统文件大小经常用B(字节)为单位表示，但网络运营商则用b(比特)，也就是为什么2Mb速度宽带在电脑上显示速度最快只有约256KB的原因，网络运营商宣传网速的时候省略了计量单位。 \n\n完整的视频文件是由音频流与视频流2个部分组成的，音频和视频分别使用的是不同的编码率，因此一个视频文件的最终技术大小的编码率是音频编码率+视频编码率。例如一个音频编码率为128Kbps，视频编码率为800Kbps的文件，其总编码率为928Kbps，意思是经过编码后的数据每秒钟需要用928K比特来表示。 \n\n了解了编码率的含义以后，根据视频播放时间长度，就不难了解和计算出最终文件的大小。编码率也高，视频播放时间越长，文件体积就越大。不是分辨率越大文件就越大，只是一般情况下，为了保证清晰度，较高的分辨率需要较高的编码率配合，所以使人产生分辨率越大的视频文件体积越大的感觉。 \n\n计算输出文件大小公式： \n（音频编码率（Kbit为单位）/8 + 视频编码率（Kbit为单位）/8）× 影片总长度（秒为单位）= 文件大小（MB为单位） \n这样以后大家就能精确的控制输出文件大小了。 \n\n\n例：有一个1.5小时（5400秒）的影片，希望转换后文件大小刚好为700M \n计算方法如下： \n\n```\n\n700×8÷5400×1024≈1061Kbps \n```\n意思是只要音频编码率加上视频编码率之和为1061Kb，则1个半小时的影片转换后文件体积大小刚好为700M。 \n\n至于音频编码率和视频编码率具体如何设置，就看选择的编码格式和个人喜好了，只要2者之和为1061即可。如可以设置为视频编码格式H264，视频编码率900 Kbps，音频编码格式AAC，编码率161 Kbps。 \n\n与文件体积大小有关的码率是指的平均码率，因此，不论是使用固定比特一次编码方式还是使用二次（多次）动态编码方式，都是可以保证文件大小的。只有使用基于质量编码的方式的时候，文件大小才不可控制。 \n\n\n编码格式有很多种，在技术不断进步的情况下，针对不同的用途，产生了各种编码格式。不同编码格式的压缩率不一样，且有各自的特点，有些在低码率情况下能保持较高的画面质量，但在高码率情况下反而画面质量提示不大，有些适合在高码率情况下保持高清晰度画面，但可能在低码率情况下效果不佳。介绍常见的几种。 \n\nRMVB/RM在制定的时候主要考虑的是网络传播，目的在于利用不快的网速传播视觉可以接受的画面质量。因此，RMVB/RM编码格式的特点是较低码率下能获得较好的视频质量。但高码率的情况下反不如其他编码格式。同样是RM/RMVB后缀的文件，其内部编码格式细分还有R8/R9/R10等，但总的来说，上面所说的特点依然是存在的。只是压缩率更高了，因此RMVB没人用在高清编码领域。RMVB追求的是高压缩率，能接受的画面质量，所以经常压缩掉一些不容易注意的细节。初看画面不错，细看就发现画面不锐利，层次不分明，总给人一直模糊的感觉。\n\nRMVB/RM后缀文件的音频编码部分同样存在这样的情况，声音压缩率很高，但只是能听，不要奢望达到声音动听的境界。 \n\nRMVB的流行，一是因为REAL的这种格式适合低速网络的传播，能以较小的文件体积获得可以接受的画面质量。二是随着RMVB的使用，开始出现功能比较完善的转码软件和解决方案，方便了视频爱好者，扩大了影片来源。但随着网速越来越快，H264等更好的编码器出现，同时也因为RMVB不适合高清视频制作，且若对于其他硬件厂家希望支持RMVB/RM格式，就必须向REAL公司支付相当昂贵的专利费，导致很多硬件厂商放弃了对RMVB文件的支持。RMVB的文件已经不是以前那种完全压倒性的优势了。 \n\n现在网络传播的视频文件已经很多都是AVI、MKV、MP4、3GP等后缀了。其中MKV等多用于高清视频文件，MP4、3GP等多用于手机和便携式设备等领域，AVI则使用范围更加广，不但在高清晰度视频文件中有AVI文件，在便携式设备领域也有AVI使用。 \n\nVCD用的视频编码格式为MPEG1，DVD则为MPEG2，VCD和DVD都主要用于家庭影音播放，而且一般来说，VCD用MPEG1编码为固定码率编码。DVD可以支持动态码率的MPEG2编码。 \n为了能保证激烈变化画面时的清晰度，其默认编码率都较高，VCD标准编码率1152Kbps，DVD开放些，根据影片播放时间，常设置为5000 Kbps -8000 Kbps之间，在不浪费DVD碟容量的前提下尽可能的使用较高的码率获得更高的清晰度。MPEG1和MPEG2在超低码率情况效果不佳，且过分提高码率，画面效果带来的提示也不明显。而MKV则以H.264编码，用于高清视频，1080p的画面达到了30Mbps的码率。 \n\n当然不经过压缩文件的计算公式又不同： \n\n```\n\n声音为，数据量（位/秒）= (采样频率（Hz）*采样位数（bit）*声道数) \n其中，单声道的声道数为1，立体声的声道数为2。 \n数据量*时间/8＝文件总字节 \n例如CD即为未经压缩的音频文件，采样44.1k,16位,双声道。 \n数据量＝44.1*16*2=1411kb/1024=1.38Mb,一般的MP3压缩后为128kbps \n如果以一张CD放一个小时计算的话，CD总量＝1.38*3600/8=621MB,当然CD大约放1小时多点,顶多也就700MB。 \n\n```\n\n```\n\n图象应该是，数据量（位/秒）= (画面尺寸*彩色位数（bit）*帧数) \n数据量*时间/8＝文件总字节 \n例如2分钟,25帧/秒,640×480分辨率,24位真彩色数字视频的不压缩的数据量约为，数据量＝640x480x24*25=184320Kb=180Mb,而VCD、MKV标准编码率(加上音频)分别为1152Kbps和30Mbps(1080p高清) \n\n2分钟文件字节＝180Mbx120/8=2700000KB=2636.71875MB＝2.57GB，而压缩后一部90分钟高质量DVD电影可以达到9GB。  \n```","source":"_posts/音视频相关-文件码率与大小计算.md","raw":"---\ntitle: 音视频相关-文件码率与大小计算\ndate: 2019-04-22 11:09:38\ntags: [音视频, 码率]\ncategories: 音视频\n---\n\n>编码率/比特率直接与文件体积有关。且编码率与编码格式配合是否合适，直接关系到视频文件是否清晰。 \n\n<!-- more -->\n\n在视频编码领域，比特率常翻译为编码率，单位是Kbps，例如800Kbps \n\n其中， 1K=1024 1M=1024K \n\nb 为 比特（bit） 这个就是电脑文件大小的计量单位，1KB=8Kb，区分大小写，B代表字节(Byte) s 为 秒（second） p 为 每（per） \n以800kbps来编码表示经过编码后的数据每秒钟需要用800K比特来表示。 \n1MB=8Mb=1024KB=8192Kb \n\nWindows系统文件大小经常用B(字节)为单位表示，但网络运营商则用b(比特)，也就是为什么2Mb速度宽带在电脑上显示速度最快只有约256KB的原因，网络运营商宣传网速的时候省略了计量单位。 \n\n完整的视频文件是由音频流与视频流2个部分组成的，音频和视频分别使用的是不同的编码率，因此一个视频文件的最终技术大小的编码率是音频编码率+视频编码率。例如一个音频编码率为128Kbps，视频编码率为800Kbps的文件，其总编码率为928Kbps，意思是经过编码后的数据每秒钟需要用928K比特来表示。 \n\n了解了编码率的含义以后，根据视频播放时间长度，就不难了解和计算出最终文件的大小。编码率也高，视频播放时间越长，文件体积就越大。不是分辨率越大文件就越大，只是一般情况下，为了保证清晰度，较高的分辨率需要较高的编码率配合，所以使人产生分辨率越大的视频文件体积越大的感觉。 \n\n计算输出文件大小公式： \n（音频编码率（Kbit为单位）/8 + 视频编码率（Kbit为单位）/8）× 影片总长度（秒为单位）= 文件大小（MB为单位） \n这样以后大家就能精确的控制输出文件大小了。 \n\n\n例：有一个1.5小时（5400秒）的影片，希望转换后文件大小刚好为700M \n计算方法如下： \n\n```\n\n700×8÷5400×1024≈1061Kbps \n```\n意思是只要音频编码率加上视频编码率之和为1061Kb，则1个半小时的影片转换后文件体积大小刚好为700M。 \n\n至于音频编码率和视频编码率具体如何设置，就看选择的编码格式和个人喜好了，只要2者之和为1061即可。如可以设置为视频编码格式H264，视频编码率900 Kbps，音频编码格式AAC，编码率161 Kbps。 \n\n与文件体积大小有关的码率是指的平均码率，因此，不论是使用固定比特一次编码方式还是使用二次（多次）动态编码方式，都是可以保证文件大小的。只有使用基于质量编码的方式的时候，文件大小才不可控制。 \n\n\n编码格式有很多种，在技术不断进步的情况下，针对不同的用途，产生了各种编码格式。不同编码格式的压缩率不一样，且有各自的特点，有些在低码率情况下能保持较高的画面质量，但在高码率情况下反而画面质量提示不大，有些适合在高码率情况下保持高清晰度画面，但可能在低码率情况下效果不佳。介绍常见的几种。 \n\nRMVB/RM在制定的时候主要考虑的是网络传播，目的在于利用不快的网速传播视觉可以接受的画面质量。因此，RMVB/RM编码格式的特点是较低码率下能获得较好的视频质量。但高码率的情况下反不如其他编码格式。同样是RM/RMVB后缀的文件，其内部编码格式细分还有R8/R9/R10等，但总的来说，上面所说的特点依然是存在的。只是压缩率更高了，因此RMVB没人用在高清编码领域。RMVB追求的是高压缩率，能接受的画面质量，所以经常压缩掉一些不容易注意的细节。初看画面不错，细看就发现画面不锐利，层次不分明，总给人一直模糊的感觉。\n\nRMVB/RM后缀文件的音频编码部分同样存在这样的情况，声音压缩率很高，但只是能听，不要奢望达到声音动听的境界。 \n\nRMVB的流行，一是因为REAL的这种格式适合低速网络的传播，能以较小的文件体积获得可以接受的画面质量。二是随着RMVB的使用，开始出现功能比较完善的转码软件和解决方案，方便了视频爱好者，扩大了影片来源。但随着网速越来越快，H264等更好的编码器出现，同时也因为RMVB不适合高清视频制作，且若对于其他硬件厂家希望支持RMVB/RM格式，就必须向REAL公司支付相当昂贵的专利费，导致很多硬件厂商放弃了对RMVB文件的支持。RMVB的文件已经不是以前那种完全压倒性的优势了。 \n\n现在网络传播的视频文件已经很多都是AVI、MKV、MP4、3GP等后缀了。其中MKV等多用于高清视频文件，MP4、3GP等多用于手机和便携式设备等领域，AVI则使用范围更加广，不但在高清晰度视频文件中有AVI文件，在便携式设备领域也有AVI使用。 \n\nVCD用的视频编码格式为MPEG1，DVD则为MPEG2，VCD和DVD都主要用于家庭影音播放，而且一般来说，VCD用MPEG1编码为固定码率编码。DVD可以支持动态码率的MPEG2编码。 \n为了能保证激烈变化画面时的清晰度，其默认编码率都较高，VCD标准编码率1152Kbps，DVD开放些，根据影片播放时间，常设置为5000 Kbps -8000 Kbps之间，在不浪费DVD碟容量的前提下尽可能的使用较高的码率获得更高的清晰度。MPEG1和MPEG2在超低码率情况效果不佳，且过分提高码率，画面效果带来的提示也不明显。而MKV则以H.264编码，用于高清视频，1080p的画面达到了30Mbps的码率。 \n\n当然不经过压缩文件的计算公式又不同： \n\n```\n\n声音为，数据量（位/秒）= (采样频率（Hz）*采样位数（bit）*声道数) \n其中，单声道的声道数为1，立体声的声道数为2。 \n数据量*时间/8＝文件总字节 \n例如CD即为未经压缩的音频文件，采样44.1k,16位,双声道。 \n数据量＝44.1*16*2=1411kb/1024=1.38Mb,一般的MP3压缩后为128kbps \n如果以一张CD放一个小时计算的话，CD总量＝1.38*3600/8=621MB,当然CD大约放1小时多点,顶多也就700MB。 \n\n```\n\n```\n\n图象应该是，数据量（位/秒）= (画面尺寸*彩色位数（bit）*帧数) \n数据量*时间/8＝文件总字节 \n例如2分钟,25帧/秒,640×480分辨率,24位真彩色数字视频的不压缩的数据量约为，数据量＝640x480x24*25=184320Kb=180Mb,而VCD、MKV标准编码率(加上音频)分别为1152Kbps和30Mbps(1080p高清) \n\n2分钟文件字节＝180Mbx120/8=2700000KB=2636.71875MB＝2.57GB，而压缩后一部90分钟高质量DVD电影可以达到9GB。  \n```","slug":"音视频相关-文件码率与大小计算","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxgd006hsifyals6ukwg","content":"<blockquote>\n<p>编码率/比特率直接与文件体积有关。且编码率与编码格式配合是否合适，直接关系到视频文件是否清晰。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>在视频编码领域，比特率常翻译为编码率，单位是Kbps，例如800Kbps</p>\n<p>其中， 1K=1024 1M=1024K</p>\n<p>b 为 比特（bit） 这个就是电脑文件大小的计量单位，1KB=8Kb，区分大小写，B代表字节(Byte) s 为 秒（second） p 为 每（per）<br>\n以800kbps来编码表示经过编码后的数据每秒钟需要用800K比特来表示。<br>\n1MB=8Mb=1024KB=8192Kb</p>\n<p>Windows系统文件大小经常用B(字节)为单位表示，但网络运营商则用b(比特)，也就是为什么2Mb速度宽带在电脑上显示速度最快只有约256KB的原因，网络运营商宣传网速的时候省略了计量单位。</p>\n<p>完整的视频文件是由音频流与视频流2个部分组成的，音频和视频分别使用的是不同的编码率，因此一个视频文件的最终技术大小的编码率是音频编码率+视频编码率。例如一个音频编码率为128Kbps，视频编码率为800Kbps的文件，其总编码率为928Kbps，意思是经过编码后的数据每秒钟需要用928K比特来表示。</p>\n<p>了解了编码率的含义以后，根据视频播放时间长度，就不难了解和计算出最终文件的大小。编码率也高，视频播放时间越长，文件体积就越大。不是分辨率越大文件就越大，只是一般情况下，为了保证清晰度，较高的分辨率需要较高的编码率配合，所以使人产生分辨率越大的视频文件体积越大的感觉。</p>\n<p>计算输出文件大小公式：<br>\n（音频编码率（Kbit为单位）/8 + 视频编码率（Kbit为单位）/8）× 影片总长度（秒为单位）= 文件大小（MB为单位）<br>\n这样以后大家就能精确的控制输出文件大小了。</p>\n<p>例：有一个1.5小时（5400秒）的影片，希望转换后文件大小刚好为700M<br>\n计算方法如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">700</span>×<span class=\"number\">8</span>÷<span class=\"number\">5400</span>×<span class=\"number\">1024</span>≈<span class=\"number\">1061</span>Kbps</span><br></pre></td></tr></table></figure>\n<p>意思是只要音频编码率加上视频编码率之和为1061Kb，则1个半小时的影片转换后文件体积大小刚好为700M。</p>\n<p>至于音频编码率和视频编码率具体如何设置，就看选择的编码格式和个人喜好了，只要2者之和为1061即可。如可以设置为视频编码格式H264，视频编码率900 Kbps，音频编码格式AAC，编码率161 Kbps。</p>\n<p>与文件体积大小有关的码率是指的平均码率，因此，不论是使用固定比特一次编码方式还是使用二次（多次）动态编码方式，都是可以保证文件大小的。只有使用基于质量编码的方式的时候，文件大小才不可控制。</p>\n<p>编码格式有很多种，在技术不断进步的情况下，针对不同的用途，产生了各种编码格式。不同编码格式的压缩率不一样，且有各自的特点，有些在低码率情况下能保持较高的画面质量，但在高码率情况下反而画面质量提示不大，有些适合在高码率情况下保持高清晰度画面，但可能在低码率情况下效果不佳。介绍常见的几种。</p>\n<p>RMVB/RM在制定的时候主要考虑的是网络传播，目的在于利用不快的网速传播视觉可以接受的画面质量。因此，RMVB/RM编码格式的特点是较低码率下能获得较好的视频质量。但高码率的情况下反不如其他编码格式。同样是RM/RMVB后缀的文件，其内部编码格式细分还有R8/R9/R10等，但总的来说，上面所说的特点依然是存在的。只是压缩率更高了，因此RMVB没人用在高清编码领域。RMVB追求的是高压缩率，能接受的画面质量，所以经常压缩掉一些不容易注意的细节。初看画面不错，细看就发现画面不锐利，层次不分明，总给人一直模糊的感觉。</p>\n<p>RMVB/RM后缀文件的音频编码部分同样存在这样的情况，声音压缩率很高，但只是能听，不要奢望达到声音动听的境界。</p>\n<p>RMVB的流行，一是因为REAL的这种格式适合低速网络的传播，能以较小的文件体积获得可以接受的画面质量。二是随着RMVB的使用，开始出现功能比较完善的转码软件和解决方案，方便了视频爱好者，扩大了影片来源。但随着网速越来越快，H264等更好的编码器出现，同时也因为RMVB不适合高清视频制作，且若对于其他硬件厂家希望支持RMVB/RM格式，就必须向REAL公司支付相当昂贵的专利费，导致很多硬件厂商放弃了对RMVB文件的支持。RMVB的文件已经不是以前那种完全压倒性的优势了。</p>\n<p>现在网络传播的视频文件已经很多都是AVI、MKV、MP4、3GP等后缀了。其中MKV等多用于高清视频文件，MP4、3GP等多用于手机和便携式设备等领域，AVI则使用范围更加广，不但在高清晰度视频文件中有AVI文件，在便携式设备领域也有AVI使用。</p>\n<p>VCD用的视频编码格式为MPEG1，DVD则为MPEG2，VCD和DVD都主要用于家庭影音播放，而且一般来说，VCD用MPEG1编码为固定码率编码。DVD可以支持动态码率的MPEG2编码。<br>\n为了能保证激烈变化画面时的清晰度，其默认编码率都较高，VCD标准编码率1152Kbps，DVD开放些，根据影片播放时间，常设置为5000 Kbps -8000 Kbps之间，在不浪费DVD碟容量的前提下尽可能的使用较高的码率获得更高的清晰度。MPEG1和MPEG2在超低码率情况效果不佳，且过分提高码率，画面效果带来的提示也不明显。而MKV则以H.264编码，用于高清视频，1080p的画面达到了30Mbps的码率。</p>\n<p>当然不经过压缩文件的计算公式又不同：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">声音为，数据量（位/秒）= (采样频率（Hz）*采样位数（bit）*声道数) </span><br><span class=\"line\">其中，单声道的声道数为<span class=\"number\">1</span>，立体声的声道数为<span class=\"number\">2</span>。 </span><br><span class=\"line\">数据量*时间/<span class=\"number\">8</span>＝文件总字节 </span><br><span class=\"line\">例如CD即为未经压缩的音频文件，采样<span class=\"number\">44.1</span>k,<span class=\"number\">16</span>位,双声道。 </span><br><span class=\"line\">数据量＝<span class=\"number\">44.1</span>*<span class=\"number\">16</span>*<span class=\"number\">2</span>=<span class=\"number\">1411</span>kb/<span class=\"number\">1024</span>=<span class=\"number\">1.38</span>Mb,一般的MP3压缩后为<span class=\"number\">128</span>kbps </span><br><span class=\"line\">如果以一张CD放一个小时计算的话，CD总量＝<span class=\"number\">1.38</span>*<span class=\"number\">3600</span>/<span class=\"number\">8</span>=<span class=\"number\">621</span>MB,当然CD大约放<span class=\"number\">1</span>小时多点,顶多也就<span class=\"number\">700</span>MB。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">图象应该是，数据量（位/秒）= (画面尺寸*彩色位数（bit）*帧数) </span><br><span class=\"line\">数据量*时间/<span class=\"number\">8</span>＝文件总字节 </span><br><span class=\"line\">例如<span class=\"number\">2</span>分钟,<span class=\"number\">25</span>帧/秒,<span class=\"number\">640</span>×<span class=\"number\">480</span>分辨率,<span class=\"number\">24</span>位真彩色数字视频的不压缩的数据量约为，数据量＝<span class=\"number\">640</span>x480x24*<span class=\"number\">25</span>=<span class=\"number\">184320</span>Kb=<span class=\"number\">180</span>Mb,而VCD、MKV标准编码率(加上音频)分别为<span class=\"number\">1152</span>Kbps和<span class=\"number\">30</span>Mbps(<span class=\"number\">1080</span>p高清) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>分钟文件字节＝<span class=\"number\">180</span>Mbx120/<span class=\"number\">8</span>=<span class=\"number\">2700000</span>KB=<span class=\"number\">2636.71875</span>MB＝<span class=\"number\">2.57</span>GB，而压缩后一部<span class=\"number\">90</span>分钟高质量DVD电影可以达到<span class=\"number\">9</span>GB。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>编码率/比特率直接与文件体积有关。且编码率与编码格式配合是否合适，直接关系到视频文件是否清晰。</p>\n</blockquote>","more":"<p>在视频编码领域，比特率常翻译为编码率，单位是Kbps，例如800Kbps</p>\n<p>其中， 1K=1024 1M=1024K</p>\n<p>b 为 比特（bit） 这个就是电脑文件大小的计量单位，1KB=8Kb，区分大小写，B代表字节(Byte) s 为 秒（second） p 为 每（per）<br>\n以800kbps来编码表示经过编码后的数据每秒钟需要用800K比特来表示。<br>\n1MB=8Mb=1024KB=8192Kb</p>\n<p>Windows系统文件大小经常用B(字节)为单位表示，但网络运营商则用b(比特)，也就是为什么2Mb速度宽带在电脑上显示速度最快只有约256KB的原因，网络运营商宣传网速的时候省略了计量单位。</p>\n<p>完整的视频文件是由音频流与视频流2个部分组成的，音频和视频分别使用的是不同的编码率，因此一个视频文件的最终技术大小的编码率是音频编码率+视频编码率。例如一个音频编码率为128Kbps，视频编码率为800Kbps的文件，其总编码率为928Kbps，意思是经过编码后的数据每秒钟需要用928K比特来表示。</p>\n<p>了解了编码率的含义以后，根据视频播放时间长度，就不难了解和计算出最终文件的大小。编码率也高，视频播放时间越长，文件体积就越大。不是分辨率越大文件就越大，只是一般情况下，为了保证清晰度，较高的分辨率需要较高的编码率配合，所以使人产生分辨率越大的视频文件体积越大的感觉。</p>\n<p>计算输出文件大小公式：<br>\n（音频编码率（Kbit为单位）/8 + 视频编码率（Kbit为单位）/8）× 影片总长度（秒为单位）= 文件大小（MB为单位）<br>\n这样以后大家就能精确的控制输出文件大小了。</p>\n<p>例：有一个1.5小时（5400秒）的影片，希望转换后文件大小刚好为700M<br>\n计算方法如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">700</span>×<span class=\"number\">8</span>÷<span class=\"number\">5400</span>×<span class=\"number\">1024</span>≈<span class=\"number\">1061</span>Kbps</span><br></pre></td></tr></table></figure>\n<p>意思是只要音频编码率加上视频编码率之和为1061Kb，则1个半小时的影片转换后文件体积大小刚好为700M。</p>\n<p>至于音频编码率和视频编码率具体如何设置，就看选择的编码格式和个人喜好了，只要2者之和为1061即可。如可以设置为视频编码格式H264，视频编码率900 Kbps，音频编码格式AAC，编码率161 Kbps。</p>\n<p>与文件体积大小有关的码率是指的平均码率，因此，不论是使用固定比特一次编码方式还是使用二次（多次）动态编码方式，都是可以保证文件大小的。只有使用基于质量编码的方式的时候，文件大小才不可控制。</p>\n<p>编码格式有很多种，在技术不断进步的情况下，针对不同的用途，产生了各种编码格式。不同编码格式的压缩率不一样，且有各自的特点，有些在低码率情况下能保持较高的画面质量，但在高码率情况下反而画面质量提示不大，有些适合在高码率情况下保持高清晰度画面，但可能在低码率情况下效果不佳。介绍常见的几种。</p>\n<p>RMVB/RM在制定的时候主要考虑的是网络传播，目的在于利用不快的网速传播视觉可以接受的画面质量。因此，RMVB/RM编码格式的特点是较低码率下能获得较好的视频质量。但高码率的情况下反不如其他编码格式。同样是RM/RMVB后缀的文件，其内部编码格式细分还有R8/R9/R10等，但总的来说，上面所说的特点依然是存在的。只是压缩率更高了，因此RMVB没人用在高清编码领域。RMVB追求的是高压缩率，能接受的画面质量，所以经常压缩掉一些不容易注意的细节。初看画面不错，细看就发现画面不锐利，层次不分明，总给人一直模糊的感觉。</p>\n<p>RMVB/RM后缀文件的音频编码部分同样存在这样的情况，声音压缩率很高，但只是能听，不要奢望达到声音动听的境界。</p>\n<p>RMVB的流行，一是因为REAL的这种格式适合低速网络的传播，能以较小的文件体积获得可以接受的画面质量。二是随着RMVB的使用，开始出现功能比较完善的转码软件和解决方案，方便了视频爱好者，扩大了影片来源。但随着网速越来越快，H264等更好的编码器出现，同时也因为RMVB不适合高清视频制作，且若对于其他硬件厂家希望支持RMVB/RM格式，就必须向REAL公司支付相当昂贵的专利费，导致很多硬件厂商放弃了对RMVB文件的支持。RMVB的文件已经不是以前那种完全压倒性的优势了。</p>\n<p>现在网络传播的视频文件已经很多都是AVI、MKV、MP4、3GP等后缀了。其中MKV等多用于高清视频文件，MP4、3GP等多用于手机和便携式设备等领域，AVI则使用范围更加广，不但在高清晰度视频文件中有AVI文件，在便携式设备领域也有AVI使用。</p>\n<p>VCD用的视频编码格式为MPEG1，DVD则为MPEG2，VCD和DVD都主要用于家庭影音播放，而且一般来说，VCD用MPEG1编码为固定码率编码。DVD可以支持动态码率的MPEG2编码。<br>\n为了能保证激烈变化画面时的清晰度，其默认编码率都较高，VCD标准编码率1152Kbps，DVD开放些，根据影片播放时间，常设置为5000 Kbps -8000 Kbps之间，在不浪费DVD碟容量的前提下尽可能的使用较高的码率获得更高的清晰度。MPEG1和MPEG2在超低码率情况效果不佳，且过分提高码率，画面效果带来的提示也不明显。而MKV则以H.264编码，用于高清视频，1080p的画面达到了30Mbps的码率。</p>\n<p>当然不经过压缩文件的计算公式又不同：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">声音为，数据量（位/秒）= (采样频率（Hz）*采样位数（bit）*声道数) </span><br><span class=\"line\">其中，单声道的声道数为<span class=\"number\">1</span>，立体声的声道数为<span class=\"number\">2</span>。 </span><br><span class=\"line\">数据量*时间/<span class=\"number\">8</span>＝文件总字节 </span><br><span class=\"line\">例如CD即为未经压缩的音频文件，采样<span class=\"number\">44.1</span>k,<span class=\"number\">16</span>位,双声道。 </span><br><span class=\"line\">数据量＝<span class=\"number\">44.1</span>*<span class=\"number\">16</span>*<span class=\"number\">2</span>=<span class=\"number\">1411</span>kb/<span class=\"number\">1024</span>=<span class=\"number\">1.38</span>Mb,一般的MP3压缩后为<span class=\"number\">128</span>kbps </span><br><span class=\"line\">如果以一张CD放一个小时计算的话，CD总量＝<span class=\"number\">1.38</span>*<span class=\"number\">3600</span>/<span class=\"number\">8</span>=<span class=\"number\">621</span>MB,当然CD大约放<span class=\"number\">1</span>小时多点,顶多也就<span class=\"number\">700</span>MB。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">图象应该是，数据量（位/秒）= (画面尺寸*彩色位数（bit）*帧数) </span><br><span class=\"line\">数据量*时间/<span class=\"number\">8</span>＝文件总字节 </span><br><span class=\"line\">例如<span class=\"number\">2</span>分钟,<span class=\"number\">25</span>帧/秒,<span class=\"number\">640</span>×<span class=\"number\">480</span>分辨率,<span class=\"number\">24</span>位真彩色数字视频的不压缩的数据量约为，数据量＝<span class=\"number\">640</span>x480x24*<span class=\"number\">25</span>=<span class=\"number\">184320</span>Kb=<span class=\"number\">180</span>Mb,而VCD、MKV标准编码率(加上音频)分别为<span class=\"number\">1152</span>Kbps和<span class=\"number\">30</span>Mbps(<span class=\"number\">1080</span>p高清) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>分钟文件字节＝<span class=\"number\">180</span>Mbx120/<span class=\"number\">8</span>=<span class=\"number\">2700000</span>KB=<span class=\"number\">2636.71875</span>MB＝<span class=\"number\">2.57</span>GB，而压缩后一部<span class=\"number\">90</span>分钟高质量DVD电影可以达到<span class=\"number\">9</span>GB。</span><br></pre></td></tr></table></figure>"},{"title":"一句代码搞定 Android 图片压缩","date":"2016-08-29T12:30:58.000Z","_content":"\n一个Android图片压缩工具\n\n<!-- more -->\n\n#### 尊重原著，请移步作者博客\n\n\n>文／zibin（简书作者）\n原文链接：http://www.jianshu.com/p/8a51288c1dee\n","source":"_posts/一句代码搞定-Android-图片压缩.md","raw":"---\ntitle: 一句代码搞定 Android 图片压缩\ndate: 2016-08-29 20:30:58\ntags: [android]\ncategories: android\n---\n\n一个Android图片压缩工具\n\n<!-- more -->\n\n#### 尊重原著，请移步作者博客\n\n\n>文／zibin（简书作者）\n原文链接：http://www.jianshu.com/p/8a51288c1dee\n","slug":"一句代码搞定-Android-图片压缩","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxgd006lsifyplqlhkwd","content":"<p>一个Android图片压缩工具</p>\n<a id=\"more\"></a>\n<h4 id=\"尊重原著请移步作者博客\"><a class=\"markdownIt-Anchor\" href=\"#尊重原著请移步作者博客\"></a> 尊重原著，请移步作者博客</h4>\n<blockquote>\n<p>文／zibin（简书作者）<br>\n原文链接：<a href=\"http://www.jianshu.com/p/8a51288c1dee\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8a51288c1dee</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>一个Android图片压缩工具</p>","more":"<h4 id=\"尊重原著请移步作者博客\"><a class=\"markdownIt-Anchor\" href=\"#尊重原著请移步作者博客\"></a> 尊重原著，请移步作者博客</h4>\n<blockquote>\n<p>文／zibin（简书作者）<br>\n原文链接：<a href=\"http://www.jianshu.com/p/8a51288c1dee\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/8a51288c1dee</a></p>\n</blockquote>"},{"title":"解决git clone 速度慢的问题","date":"2020-09-15T11:10:48.000Z","_content":"\n最近从github clone一些项目的时候速度极慢，完全受不了，从网上look了很多办法，都以失败告终，直到看到了一篇文章...\n\n[跳转](https://blog.csdn.net/weixin_42886104/article/details/106454331)\n\n<!-- more -->\n\n解决方法：\n\n```\n使用国内镜像，目前已知Github国内镜像网站有github.com.cnpmjs.org和hub.fastgit.org/。速度根据各地情况而定，\n\n在clone某个项目的时候将github.com替换为github.com.cnpmjs.org即可。\n\n```\n\n示例：\n\n```\n//这是我们要clone的\ngit clone https://github.com/Hackergeek/architecture-samples\n \n//使用镜像\ngit clone https://github.com.cnpmjs.org/Hackergeek/architecture-samples\n \n//或者\n \n//使用镜像\ngit clone https://hub.fastgit.org/Hackergeek/architecture-samples\n\n```","source":"_posts/解决git-clone-速度慢的问题.md","raw":"---\ntitle: 解决git clone 速度慢的问题\ndate: 2020-09-15 19:10:48\ntags: [github, git]\ncategories: git\n---\n\n最近从github clone一些项目的时候速度极慢，完全受不了，从网上look了很多办法，都以失败告终，直到看到了一篇文章...\n\n[跳转](https://blog.csdn.net/weixin_42886104/article/details/106454331)\n\n<!-- more -->\n\n解决方法：\n\n```\n使用国内镜像，目前已知Github国内镜像网站有github.com.cnpmjs.org和hub.fastgit.org/。速度根据各地情况而定，\n\n在clone某个项目的时候将github.com替换为github.com.cnpmjs.org即可。\n\n```\n\n示例：\n\n```\n//这是我们要clone的\ngit clone https://github.com/Hackergeek/architecture-samples\n \n//使用镜像\ngit clone https://github.com.cnpmjs.org/Hackergeek/architecture-samples\n \n//或者\n \n//使用镜像\ngit clone https://hub.fastgit.org/Hackergeek/architecture-samples\n\n```","slug":"解决git-clone-速度慢的问题","published":1,"updated":"2020-10-16T03:28:39.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxge006osifyxuy1erzm","content":"<p>最近从github clone一些项目的时候速度极慢，完全受不了，从网上look了很多办法，都以失败告终，直到看到了一篇文章…</p>\n<p><a href=\"https://blog.csdn.net/weixin_42886104/article/details/106454331\" target=\"_blank\" rel=\"noopener\">跳转</a></p>\n<a id=\"more\"></a>\n<p>解决方法：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用国内镜像，目前已知Github国内镜像网站有github<span class=\"selector-class\">.com</span><span class=\"selector-class\">.cnpmjs</span><span class=\"selector-class\">.org</span>和hub<span class=\"selector-class\">.fastgit</span><span class=\"selector-class\">.org</span>/。速度根据各地情况而定，</span><br><span class=\"line\"></span><br><span class=\"line\">在clone某个项目的时候将github.com替换为github<span class=\"selector-class\">.com</span><span class=\"selector-class\">.cnpmjs</span><span class=\"selector-class\">.org</span>即可。</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>这是我们要clone的</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>使用镜像</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com.cnpmjs.org<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>或者</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>使用镜像</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//</span>hub.fastgit.org<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>最近从github clone一些项目的时候速度极慢，完全受不了，从网上look了很多办法，都以失败告终，直到看到了一篇文章…</p>\n<p><a href=\"https://blog.csdn.net/weixin_42886104/article/details/106454331\" target=\"_blank\" rel=\"noopener\">跳转</a></p>","more":"<p>解决方法：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用国内镜像，目前已知Github国内镜像网站有github<span class=\"selector-class\">.com</span><span class=\"selector-class\">.cnpmjs</span><span class=\"selector-class\">.org</span>和hub<span class=\"selector-class\">.fastgit</span><span class=\"selector-class\">.org</span>/。速度根据各地情况而定，</span><br><span class=\"line\"></span><br><span class=\"line\">在clone某个项目的时候将github.com替换为github<span class=\"selector-class\">.com</span><span class=\"selector-class\">.cnpmjs</span><span class=\"selector-class\">.org</span>即可。</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>这是我们要clone的</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>使用镜像</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//gi</span>thub.com.cnpmjs.org<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>或者</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"regexp\">//</span>使用镜像</span><br><span class=\"line\">git clone https:<span class=\"regexp\">//</span>hub.fastgit.org<span class=\"regexp\">/Hackergeek/</span>architecture-samples</span><br></pre></td></tr></table></figure>"},{"title":"Android-NDK结构","date":"2018-12-28T03:15:20.000Z","_content":"\n### Android NDK 的结构\n\n- ndk-build: 该shell脚本是Android NDK构建系统的起始点。\n- ndk-gdb: 该shell脚本允许用GNU调试器调试原生组件。\n- ndk-stack: 该shell脚本可以帮助分析原生组件崩溃时的堆栈追踪\n- build: 该目录包含了Android NDK构建系统的所有模块。\n- platforms: 该目录包含了支持不同Android目标版本的头文件和库文件。\n- samples: 该目录包含了一些示例应用程序，这些程序可以体现Android NDK的性能。\n- sources: 该目录包含了可供开发人员导入到现有的Android NDK项目的一些共享模块。\n- toolchains: 该目录包含目录Android NDK支持的不用目标机体系结构的交叉编译器。Android NDK目前支持ARM、X86 和MIPS机体系结构。Android NDK 构建系统根据选定的体系结构使用不同的交叉编译器。\n\n<!-- more -->\n\n使用NDK可以做什么：\n\n- 建立一个共享库\n- 建立多种共享库\n- 建立静态库\n- 利用共享库共享通用模块\n- 在多种NDK项目见共享模块\n- 使用预建库\n- 使用独立的可执行文件\n- 其他构件系统变量和宏\n- 定义新变量和条件操作\n\n\n### Android.mk\n\n```\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hello-jni\nLOCAL_SRC_FILES := hello-jni.c\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n```\n\n> LOCAL_PATH := $(call my-dir)\n\nAndroid 构建系统利用LOCAL_PATH来定位源文件。因为将该变量设置为硬编码值并不合适，所以 Android 构建系统提供了一个名为 my-dir 的宏功能。通过该变量设置为 my-dir 宏功能的返回值， 可以将其放在当前目录下。\n\nAndroid 构建系统将CLEAR_VARS变量设置为clear-vars.mk片段的位置。包含Makefile片段可以清除除了LOCAL_PATH以外的LOCAL_<name>变量，例如 LOCAL_MODULE 与 LOCAL_SRC_FILES 等。\n\n> Include $(CLEAR_VARS)\n\n这样做是因为 Android 构建系统在单次执行中解析多个构建文件和模块定义，而LOCAL_<name>是全局变量。清除他们可以避免冲突，每一个原生组件被称为一个模块。\n\nLOCAL_MODULE 变量用来给这些模块设定一个唯一的名称。下面的代码将该模块的名称设为 hello-jni:\n\n>LOCAL_MODLE := hello-jni\n\n因为模块名称也被用于给构建过程所生成的文件命名，所以构建系统给该文件添加了适当的前缀和后缀。本例中， hello-jni 模块会生成一个共享库文件且构建系统会将它命名为`libhello-jni.so`。\n\n用LOCAL_SRC_FILES变量定义用来建立和组装这个模块的源文件列表。\n\n> LOCAL_SRC_FILES := hello-jni.c\n\n这里，hello-jni 模块只由一个源文件生成，而 LOCAL_SRC_FILES 变量可以包含用空格分开的多个源文件名。\n\n ---\n 构建多个共享库模块的 Androd.mk 构建文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 模块 1\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module1\n LOCAL_SRC_FILES := module1.c\n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 模块2\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module2\n LOCAL_SRC_FILES := module2.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n ---\n 构建静态库的 Android.mk 构建文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_STATIC_LIBRARY)\n \n #\n # 原生模块\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n \n LOCAL_STATIC_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n 在将第三方代码模块生成静态库之后，共享库就可以通过将它的模块名添加到`LOCAL_STATIC_LIBRARIES` 变量中来使用该模块。\n \n ---\n \n##### 用共享库共享通用模块\n \n 静态库可以保证源代码模块化；但是，在静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与同一个静态库连接时，需要将通用模块的多个副本与不同共享库重复相连，这样就增加了应用程序的大小。在这种情况下，不用构建静态库，而是将通用模块作为共享库建立起来，而动态连接依赖模块以便消除重复的副本。\n \n Android.mk 文件中共享库之间的代码共享\n \n ```\n LOCAL_PATH := $(call my-dir)\n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 原生模块1\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULES := module1\n LOCAL_SRC_FILES := module1.c\n \n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 原生模块2\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module2\n LOCAL_SRC_FILES := module2.c\n \n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n \n ```\n \n ---\n \n##### 不同NDK项目间共享模块\n \n **注意：** 在 Android NDK 构建系统中，共享模块路径不能包含空格。\n \n - 作为共享模块，avilib 需要自己的 Android.mk 文件\n\n 共享 avilib 模块的 Android.mk 文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n \n 使用共享模块的 NDK项目\n \n ```\n #\n # 原生模块\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n $(call import-module, transcode/avilib)\n ```\n - import-module 函数库需要先定位共享模块，然后再将它导入到 NDK 项目中。默认情况下，import-module 函数库只搜索<Android NDK>/sources 目录。为了搜索 c:\\android\\shared-modules 目录，定义一个名为 `NDK_MODULE_PATH` 的新环境变量并将它设置成共享库的根目录，例如：c:\\android\\shared-modules。\n\n\n---\n\n预构建共享模块的 `Android.mk` 文件\n\n```\nLOCAL_PATH := $(call my-dir)\n\n#\n# 第三方预构建 AVI 库\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := avilib\nLOCAL_SRC_FILES := libavilib.so\n\ninclude $(PREBUILT_SHARED_LIBRARY)\n\n```\n\n`LOCAL_SRC_FILES` 变量指向的不是源文件，而是实际 Prebuilt 库相对于 `LOCAL_PATH` 的位置。\n\n**注意:** Prebuilt 库定义中不包含任何关于该库所构建的实际机器体系结构的信息。开发人员需要确保 Prebuilt 库是为与 NDK 项目相同的机器的体系结构而构建的。\n\n`PREBUILT_SHARED_LIBRARY` 变量指向 prebuilt-shared-library.mk MakeFile 片段。它什么都没有构建，但是它将Prebuilt 库复制到 NDK 项目的libs目录下。通过使用 `PREBUILT_STATIC_LIBRARY` 变量，静态库可以像共享库一样被用作 Prebuilt 库，NDK 项目可以像普通共享库一样使用 Prebuilt库了。\n\n```\n\t...\n\tLOCAL_SHARED_LIBRARIES := avilib\n\t...\n```\n\n ---\n 独立可执行模块的 Android.mk 文件\n \n ```\n #\n # 独立的可执行的原生模块\n #\n include $(CLEAR_VARS)\n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n \n LOCAL_STATIC_LIBRARIES := avilib\n \n include $(BUILD_EXECUTABLE)\n \n ```\n \n `BUILD_EXECUTABLE` 变量指向 build-executable.mk Makefile 片段，该片段包含了在 Android 平台上生成独立可执行文件的必要步骤。独立可执行文件以与模块相同的名称被放在libs/<machine architecture>目录下。尽管放在该目录下，但在打包阶段它并没有被包含在APK文件中。\n \n ---\n \n#### 其他构建系统变量\n\n构建系统定义的变量有：\n\n- `TARGET_ARCH`: 目标 CPU 体系结构的名称，例如 arm\n- `TARGET_PLATFORM`: 目标 Android 平台的名称，例如: android-8\n- `TARGET_ARCH_ABI`: 目标CPU体系结构和ABI的名称，例如：armeabi-v7a\n- `TARGET_ABI`: 目标平台和 ABI 的串联，例如：android-7-armeabi-v7a\n\n可被定义为模块说明部分的变量有：\n\n- `LOCAL_MODULE_FILENAME`: 可选变量，用来重新定义生成的输出文件名称。默认情况下，构建系统使用`LOCAL_MODULE` 的值作为生成的输出文件名称，但变量 `LOCAL_MODULE_FILENAME` 可以覆盖 `LOCAL_MODULE` 的值。\n\n- `LOCAL_CPP_EXTENSION`: C++源文件的默认扩展名是 .cpp。这个变量可以用来为C++源代码指定一个或多个文件扩展名。\n\n```\n...\nLOCAL_CPP_EXTENSION := .cpp .cxx\n...\n\n```\n\n- `LOCAL_CPP_FEATURES`: 可选变量，用来指明模块所依赖的具体 C++ 特性，如 RTTI 、 exceptions 等。\n\n```\n...\nLOCAL_CPP_FEATURES := rtti\n...\n\n```\n\n- `LOCAL_C_INCLUDES`: 可选目录列表，NDK 安装目录的相对路径，用来搜索头文件\n\n```\n...\nLOCAL_C_INCLUDES := sources/shared-module\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/include\n...\n```\n\n- `LOCAL_CFLAGS`: 一组可选的编译器标志，在编译C和C++源文件的时候会被传送给编译器。\n\n```\n...\nLOCAL_CFLAGS := -DNDEBUG -DPORT=1234\n...\n```\n\n- `LOCAL_CPP_FLAGS`: 一组可选的编译标志，在只编译C++源文件时被传送给编译器。\n- `LOCAL_WHOLE_STATIC_LIBRARIES`:`LOCAL_STATIC_LIBRARIES` 的变体，用来指明应该被包含在生成的共享库中的所有静态库内容。\n\n**小贴士**: 当几个静态库之间有循环依赖时，`LOCAL_WHOLE_STATIC_LIBRARIES` 很有用。\n\n- `LOCAL_LDLIBS`:链接标志的可选列表，当对目标文件进行链接以生成输出文件时该标志将被传送给链接器。它主要用于传送要进行动态链接的系统库列表。\n例如：要与 Android NDK 日志库链接，使用以下代码：\n```\nLOCAL_LDFLAGS := -llog\n```\n-`LOCAL_ALLOW_UNDEFINED_SYMBOLS`: 可选参数，它禁止在生成的文件中进行缺失符号检查。若没有定义，链接器会在符号缺失时生成错误信息。\n\n- `LOCAL_ARM_MODE`: 可选参数，ARM机器体系结构特有变量，用于指定要生成的ARM 二进制类型。默认情况下，构建系统在拇指模式下用16位指令生成，但该变量可以被设置为 arm 来指定使用 32 位指令。\n\n```\nLOCAL_ARM_MODE := arm\n```\n该变量改变了整个模块的构建系统行为；可以用 .arm扩展名指定只在 arm 模式下构建特定文件。\n\n```\nLOCAL_SRC_FILES :=file1.c file2.c.arm\n```\n\n- `LOCAL_ARM_NEON`: 可选参数，ARM机器体系结构特有变量，用来指定在源文件中应该使用的 ARM 高级单指令多数据流(Single Instruction Multiple Data,SIMD)(a.k.a. NEON)内联函数。\n\n```\nLOCAL_ARM_NEON := true\n```\n该变量改变了整个模块的构建系统行为；可以用.neon 扩展名指定只构建带有NEON内联函数的特定文件。\n\n```\nLOCAL_SRC_FILES :=file1.c file2.c.neon\n```\n- `LOCAL_DISABLE_NO_EXECUTE`:可选变量，用来禁用 NX Bit 安全特性。 NX Bit代表 Never Execute(永不执行)，它是在CPU中使用的一项技术，用来隔离代码区和存储区。这样可以防止恶意软件通过将它的代码插入应用程序的存储区来控制应用程序。\n\n```\nLOCAL_DISABLE_NO_EXECUTE :=true\n```\n\n- `LOCAL_EXPORT_CFLAGS`: 该变量记录一组编译器标志，这些编译器标志会被添加到通过变量`LOCAL_STATIC_LIBRARIES`或`LOCAL_SHARED_LIBRARIES`使用本模块的其他模块的LOCAL_CFLAGS 定义中。\n\n```\nLOCAL_MODULE := avilib\n...\nLOCAL_EXPORT_CFLAGS := -DENABLE_AUDIO\n...\nLOCAL_MODULE := module1\nLOCAL_CFLAGS := -DDEBUG\n...\nLOCAL_SHARED_LIBRARIES := avilib\n```\n编译器在构建 module1 时会以-DENABLE_AUDIO -DDEBUG 标志执行。\n\n- `LOCAL_EXPORT_CPPFLAGS`： 和`LOCAL_EXPORT_CFLAGS`一样，但是它是C++特定代码编译器标志。\n- `LOCAL_EXPORT_LDFLAGS`: 和 `LOCAL_EXPORT_CFLAGS`一样，但用作链接器标志。\n- `LOCAL_EXPORT_C_INCLUDES`:该变量允许记录路径集，这些路径会被添加到通过变量`LOCAL_STATIC_LIBRARIES` 或 `LOCAL_SHARED_LIBRARIES` 使用该模块的 `LOCAL_C_INCLUDES` 定义中。\n- `LOCAL_SHORT_COMMANDS`: 对于有大量资源或独立的静态/共享库的模块，该变量应该被设置为 true. 诸如Windows 之类的操作系统只允许命令行最多输入8191个字符；该变量通过分解构建命令使其长度小于8191个字符。在较小的模块中不推荐使用该方法，因为使用它会让构建过程变慢。\n- `LOCAL_FILTER_ASM`:该变量定义了用于过滤来自`LOCAL_SRC_FILES`变量的装配文件的应用程序。\n\n---\n\n包含条件操作的构建文件 Android.mk\n\n```\n...\nifeq ($(TARGET_ARCH), arm)\n\tLOCAL_SRC_FILES += armonly.c\nelse\n\tLOCAL_SRC_FILES += generic.c\nendif\n...\n\n```\n\n### Application.mk\n\n以下是Application.mk 构建文件指出的变量：\n\n- `APP_MODULES`: 默认情况下，Android NDK 构建系统构建 Android.mk 文件声明的所有模块。该变量可以覆盖上述行为并提供一个空格分开的、需要被构建的模块列表。\n- `APP_OPTIM`: 该变量可以被设置为 release 或 debug 以改变生成的二进制文件的优化级别。默认情况下使用的是 release 模式，并且此时生成的二进制文件被高度优化。该变量可以被设置为debug模式以生成更容易调试的未优化二进制文件。\n- `APP_CLAGS`: 该变量列出了一些编译器标志，在编译任何模块的 C 和 C++源文件时这些标志都会被传给编译器。\n- `APP_CPPFLAGS`: 该变量列出了一些编译器标志，在编译任何模块的 C++ 源文件时这些标志都会被传给编译器。\n- `APP_BUILD_SCRIPT`:默认情况下， Android NDK 构建系统在项目的 jni 子目录下查找 Android.mk 构建文件。可以用该变量改变上述行为，并使用不同的生成文件。\n- `APP_ABI`:默认情况下，Android NDK构建系统为armeabi  ABI 生成二进制文件。可以用该变量改变上述行为，并为其他 ABI 生成二进制文件，例如：\n\n```\nAPP_ABI :=mips\n另外， 可以设置多个 ABI \nAPP_ABI := armeabi mips\n\n为所有支持的ABI生成二进制文件\nAPP_ABI := all\n```\n\n- `APP_STL`: 默认情况下， Android NDK 构建系统使用最小 STL 运行库，也被称为system库。可以用该变量选择不同的STL实现。\n\n```\nAPP_STL :=stlport_shared\n```\n- `APP_GNUSTL_FORCE_CPP_FEATURES`: 与 `LOCAL_CPP_EXTENSIONS` 变量相似，该变量表明所有模块都依赖于具体的C++特性， 如RTTI 、exceptions 等。\n- `APP_SHORT_COMMANDS`: 与 `LOCAL_SHORT_COMMANDS` 变量相似，该变量使得构建系统在有大量源文件的情况下可以在项目中使用更短的命令。\n\n\t","source":"_posts/Android-NDK结构.md","raw":"---\ntitle: Android-NDK结构\ndate: 2018-12-28 11:15:20\ntags: [android, ndk]\ncategories: android\n---\n\n### Android NDK 的结构\n\n- ndk-build: 该shell脚本是Android NDK构建系统的起始点。\n- ndk-gdb: 该shell脚本允许用GNU调试器调试原生组件。\n- ndk-stack: 该shell脚本可以帮助分析原生组件崩溃时的堆栈追踪\n- build: 该目录包含了Android NDK构建系统的所有模块。\n- platforms: 该目录包含了支持不同Android目标版本的头文件和库文件。\n- samples: 该目录包含了一些示例应用程序，这些程序可以体现Android NDK的性能。\n- sources: 该目录包含了可供开发人员导入到现有的Android NDK项目的一些共享模块。\n- toolchains: 该目录包含目录Android NDK支持的不用目标机体系结构的交叉编译器。Android NDK目前支持ARM、X86 和MIPS机体系结构。Android NDK 构建系统根据选定的体系结构使用不同的交叉编译器。\n\n<!-- more -->\n\n使用NDK可以做什么：\n\n- 建立一个共享库\n- 建立多种共享库\n- 建立静态库\n- 利用共享库共享通用模块\n- 在多种NDK项目见共享模块\n- 使用预建库\n- 使用独立的可执行文件\n- 其他构件系统变量和宏\n- 定义新变量和条件操作\n\n\n### Android.mk\n\n```\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := hello-jni\nLOCAL_SRC_FILES := hello-jni.c\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n```\n\n> LOCAL_PATH := $(call my-dir)\n\nAndroid 构建系统利用LOCAL_PATH来定位源文件。因为将该变量设置为硬编码值并不合适，所以 Android 构建系统提供了一个名为 my-dir 的宏功能。通过该变量设置为 my-dir 宏功能的返回值， 可以将其放在当前目录下。\n\nAndroid 构建系统将CLEAR_VARS变量设置为clear-vars.mk片段的位置。包含Makefile片段可以清除除了LOCAL_PATH以外的LOCAL_<name>变量，例如 LOCAL_MODULE 与 LOCAL_SRC_FILES 等。\n\n> Include $(CLEAR_VARS)\n\n这样做是因为 Android 构建系统在单次执行中解析多个构建文件和模块定义，而LOCAL_<name>是全局变量。清除他们可以避免冲突，每一个原生组件被称为一个模块。\n\nLOCAL_MODULE 变量用来给这些模块设定一个唯一的名称。下面的代码将该模块的名称设为 hello-jni:\n\n>LOCAL_MODLE := hello-jni\n\n因为模块名称也被用于给构建过程所生成的文件命名，所以构建系统给该文件添加了适当的前缀和后缀。本例中， hello-jni 模块会生成一个共享库文件且构建系统会将它命名为`libhello-jni.so`。\n\n用LOCAL_SRC_FILES变量定义用来建立和组装这个模块的源文件列表。\n\n> LOCAL_SRC_FILES := hello-jni.c\n\n这里，hello-jni 模块只由一个源文件生成，而 LOCAL_SRC_FILES 变量可以包含用空格分开的多个源文件名。\n\n ---\n 构建多个共享库模块的 Androd.mk 构建文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 模块 1\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module1\n LOCAL_SRC_FILES := module1.c\n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 模块2\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module2\n LOCAL_SRC_FILES := module2.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n ---\n 构建静态库的 Android.mk 构建文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_STATIC_LIBRARY)\n \n #\n # 原生模块\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n \n LOCAL_STATIC_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n 在将第三方代码模块生成静态库之后，共享库就可以通过将它的模块名添加到`LOCAL_STATIC_LIBRARIES` 变量中来使用该模块。\n \n ---\n \n##### 用共享库共享通用模块\n \n 静态库可以保证源代码模块化；但是，在静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与同一个静态库连接时，需要将通用模块的多个副本与不同共享库重复相连，这样就增加了应用程序的大小。在这种情况下，不用构建静态库，而是将通用模块作为共享库建立起来，而动态连接依赖模块以便消除重复的副本。\n \n Android.mk 文件中共享库之间的代码共享\n \n ```\n LOCAL_PATH := $(call my-dir)\n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 原生模块1\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULES := module1\n LOCAL_SRC_FILES := module1.c\n \n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n #\n # 原生模块2\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module2\n LOCAL_SRC_FILES := module2.c\n \n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n \n ```\n \n ---\n \n##### 不同NDK项目间共享模块\n \n **注意：** 在 Android NDK 构建系统中，共享模块路径不能包含空格。\n \n - 作为共享模块，avilib 需要自己的 Android.mk 文件\n\n 共享 avilib 模块的 Android.mk 文件\n \n ```\n LOCAL_PATH := $(call my-dir)\n \n #\n # 第三方 AVI 库\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := avilib\n LOCAL_SRC_FILES := avilib.c platform_posix.c\n \n include $(BUILD_SHARED_LIBRARY)\n \n ```\n \n 使用共享模块的 NDK项目\n \n ```\n #\n # 原生模块\n #\n include $(CLEAR_VARS)\n \n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n LOCAL_SHARED_LIBRARIES := avilib\n \n include $(BUILD_SHARED_LIBRARY)\n \n $(call import-module, transcode/avilib)\n ```\n - import-module 函数库需要先定位共享模块，然后再将它导入到 NDK 项目中。默认情况下，import-module 函数库只搜索<Android NDK>/sources 目录。为了搜索 c:\\android\\shared-modules 目录，定义一个名为 `NDK_MODULE_PATH` 的新环境变量并将它设置成共享库的根目录，例如：c:\\android\\shared-modules。\n\n\n---\n\n预构建共享模块的 `Android.mk` 文件\n\n```\nLOCAL_PATH := $(call my-dir)\n\n#\n# 第三方预构建 AVI 库\n#\ninclude $(CLEAR_VARS)\n\nLOCAL_MODULE := avilib\nLOCAL_SRC_FILES := libavilib.so\n\ninclude $(PREBUILT_SHARED_LIBRARY)\n\n```\n\n`LOCAL_SRC_FILES` 变量指向的不是源文件，而是实际 Prebuilt 库相对于 `LOCAL_PATH` 的位置。\n\n**注意:** Prebuilt 库定义中不包含任何关于该库所构建的实际机器体系结构的信息。开发人员需要确保 Prebuilt 库是为与 NDK 项目相同的机器的体系结构而构建的。\n\n`PREBUILT_SHARED_LIBRARY` 变量指向 prebuilt-shared-library.mk MakeFile 片段。它什么都没有构建，但是它将Prebuilt 库复制到 NDK 项目的libs目录下。通过使用 `PREBUILT_STATIC_LIBRARY` 变量，静态库可以像共享库一样被用作 Prebuilt 库，NDK 项目可以像普通共享库一样使用 Prebuilt库了。\n\n```\n\t...\n\tLOCAL_SHARED_LIBRARIES := avilib\n\t...\n```\n\n ---\n 独立可执行模块的 Android.mk 文件\n \n ```\n #\n # 独立的可执行的原生模块\n #\n include $(CLEAR_VARS)\n LOCAL_MODULE := module\n LOCAL_SRC_FILES := module.c\n \n LOCAL_STATIC_LIBRARIES := avilib\n \n include $(BUILD_EXECUTABLE)\n \n ```\n \n `BUILD_EXECUTABLE` 变量指向 build-executable.mk Makefile 片段，该片段包含了在 Android 平台上生成独立可执行文件的必要步骤。独立可执行文件以与模块相同的名称被放在libs/<machine architecture>目录下。尽管放在该目录下，但在打包阶段它并没有被包含在APK文件中。\n \n ---\n \n#### 其他构建系统变量\n\n构建系统定义的变量有：\n\n- `TARGET_ARCH`: 目标 CPU 体系结构的名称，例如 arm\n- `TARGET_PLATFORM`: 目标 Android 平台的名称，例如: android-8\n- `TARGET_ARCH_ABI`: 目标CPU体系结构和ABI的名称，例如：armeabi-v7a\n- `TARGET_ABI`: 目标平台和 ABI 的串联，例如：android-7-armeabi-v7a\n\n可被定义为模块说明部分的变量有：\n\n- `LOCAL_MODULE_FILENAME`: 可选变量，用来重新定义生成的输出文件名称。默认情况下，构建系统使用`LOCAL_MODULE` 的值作为生成的输出文件名称，但变量 `LOCAL_MODULE_FILENAME` 可以覆盖 `LOCAL_MODULE` 的值。\n\n- `LOCAL_CPP_EXTENSION`: C++源文件的默认扩展名是 .cpp。这个变量可以用来为C++源代码指定一个或多个文件扩展名。\n\n```\n...\nLOCAL_CPP_EXTENSION := .cpp .cxx\n...\n\n```\n\n- `LOCAL_CPP_FEATURES`: 可选变量，用来指明模块所依赖的具体 C++ 特性，如 RTTI 、 exceptions 等。\n\n```\n...\nLOCAL_CPP_FEATURES := rtti\n...\n\n```\n\n- `LOCAL_C_INCLUDES`: 可选目录列表，NDK 安装目录的相对路径，用来搜索头文件\n\n```\n...\nLOCAL_C_INCLUDES := sources/shared-module\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/include\n...\n```\n\n- `LOCAL_CFLAGS`: 一组可选的编译器标志，在编译C和C++源文件的时候会被传送给编译器。\n\n```\n...\nLOCAL_CFLAGS := -DNDEBUG -DPORT=1234\n...\n```\n\n- `LOCAL_CPP_FLAGS`: 一组可选的编译标志，在只编译C++源文件时被传送给编译器。\n- `LOCAL_WHOLE_STATIC_LIBRARIES`:`LOCAL_STATIC_LIBRARIES` 的变体，用来指明应该被包含在生成的共享库中的所有静态库内容。\n\n**小贴士**: 当几个静态库之间有循环依赖时，`LOCAL_WHOLE_STATIC_LIBRARIES` 很有用。\n\n- `LOCAL_LDLIBS`:链接标志的可选列表，当对目标文件进行链接以生成输出文件时该标志将被传送给链接器。它主要用于传送要进行动态链接的系统库列表。\n例如：要与 Android NDK 日志库链接，使用以下代码：\n```\nLOCAL_LDFLAGS := -llog\n```\n-`LOCAL_ALLOW_UNDEFINED_SYMBOLS`: 可选参数，它禁止在生成的文件中进行缺失符号检查。若没有定义，链接器会在符号缺失时生成错误信息。\n\n- `LOCAL_ARM_MODE`: 可选参数，ARM机器体系结构特有变量，用于指定要生成的ARM 二进制类型。默认情况下，构建系统在拇指模式下用16位指令生成，但该变量可以被设置为 arm 来指定使用 32 位指令。\n\n```\nLOCAL_ARM_MODE := arm\n```\n该变量改变了整个模块的构建系统行为；可以用 .arm扩展名指定只在 arm 模式下构建特定文件。\n\n```\nLOCAL_SRC_FILES :=file1.c file2.c.arm\n```\n\n- `LOCAL_ARM_NEON`: 可选参数，ARM机器体系结构特有变量，用来指定在源文件中应该使用的 ARM 高级单指令多数据流(Single Instruction Multiple Data,SIMD)(a.k.a. NEON)内联函数。\n\n```\nLOCAL_ARM_NEON := true\n```\n该变量改变了整个模块的构建系统行为；可以用.neon 扩展名指定只构建带有NEON内联函数的特定文件。\n\n```\nLOCAL_SRC_FILES :=file1.c file2.c.neon\n```\n- `LOCAL_DISABLE_NO_EXECUTE`:可选变量，用来禁用 NX Bit 安全特性。 NX Bit代表 Never Execute(永不执行)，它是在CPU中使用的一项技术，用来隔离代码区和存储区。这样可以防止恶意软件通过将它的代码插入应用程序的存储区来控制应用程序。\n\n```\nLOCAL_DISABLE_NO_EXECUTE :=true\n```\n\n- `LOCAL_EXPORT_CFLAGS`: 该变量记录一组编译器标志，这些编译器标志会被添加到通过变量`LOCAL_STATIC_LIBRARIES`或`LOCAL_SHARED_LIBRARIES`使用本模块的其他模块的LOCAL_CFLAGS 定义中。\n\n```\nLOCAL_MODULE := avilib\n...\nLOCAL_EXPORT_CFLAGS := -DENABLE_AUDIO\n...\nLOCAL_MODULE := module1\nLOCAL_CFLAGS := -DDEBUG\n...\nLOCAL_SHARED_LIBRARIES := avilib\n```\n编译器在构建 module1 时会以-DENABLE_AUDIO -DDEBUG 标志执行。\n\n- `LOCAL_EXPORT_CPPFLAGS`： 和`LOCAL_EXPORT_CFLAGS`一样，但是它是C++特定代码编译器标志。\n- `LOCAL_EXPORT_LDFLAGS`: 和 `LOCAL_EXPORT_CFLAGS`一样，但用作链接器标志。\n- `LOCAL_EXPORT_C_INCLUDES`:该变量允许记录路径集，这些路径会被添加到通过变量`LOCAL_STATIC_LIBRARIES` 或 `LOCAL_SHARED_LIBRARIES` 使用该模块的 `LOCAL_C_INCLUDES` 定义中。\n- `LOCAL_SHORT_COMMANDS`: 对于有大量资源或独立的静态/共享库的模块，该变量应该被设置为 true. 诸如Windows 之类的操作系统只允许命令行最多输入8191个字符；该变量通过分解构建命令使其长度小于8191个字符。在较小的模块中不推荐使用该方法，因为使用它会让构建过程变慢。\n- `LOCAL_FILTER_ASM`:该变量定义了用于过滤来自`LOCAL_SRC_FILES`变量的装配文件的应用程序。\n\n---\n\n包含条件操作的构建文件 Android.mk\n\n```\n...\nifeq ($(TARGET_ARCH), arm)\n\tLOCAL_SRC_FILES += armonly.c\nelse\n\tLOCAL_SRC_FILES += generic.c\nendif\n...\n\n```\n\n### Application.mk\n\n以下是Application.mk 构建文件指出的变量：\n\n- `APP_MODULES`: 默认情况下，Android NDK 构建系统构建 Android.mk 文件声明的所有模块。该变量可以覆盖上述行为并提供一个空格分开的、需要被构建的模块列表。\n- `APP_OPTIM`: 该变量可以被设置为 release 或 debug 以改变生成的二进制文件的优化级别。默认情况下使用的是 release 模式，并且此时生成的二进制文件被高度优化。该变量可以被设置为debug模式以生成更容易调试的未优化二进制文件。\n- `APP_CLAGS`: 该变量列出了一些编译器标志，在编译任何模块的 C 和 C++源文件时这些标志都会被传给编译器。\n- `APP_CPPFLAGS`: 该变量列出了一些编译器标志，在编译任何模块的 C++ 源文件时这些标志都会被传给编译器。\n- `APP_BUILD_SCRIPT`:默认情况下， Android NDK 构建系统在项目的 jni 子目录下查找 Android.mk 构建文件。可以用该变量改变上述行为，并使用不同的生成文件。\n- `APP_ABI`:默认情况下，Android NDK构建系统为armeabi  ABI 生成二进制文件。可以用该变量改变上述行为，并为其他 ABI 生成二进制文件，例如：\n\n```\nAPP_ABI :=mips\n另外， 可以设置多个 ABI \nAPP_ABI := armeabi mips\n\n为所有支持的ABI生成二进制文件\nAPP_ABI := all\n```\n\n- `APP_STL`: 默认情况下， Android NDK 构建系统使用最小 STL 运行库，也被称为system库。可以用该变量选择不同的STL实现。\n\n```\nAPP_STL :=stlport_shared\n```\n- `APP_GNUSTL_FORCE_CPP_FEATURES`: 与 `LOCAL_CPP_EXTENSIONS` 变量相似，该变量表明所有模块都依赖于具体的C++特性， 如RTTI 、exceptions 等。\n- `APP_SHORT_COMMANDS`: 与 `LOCAL_SHORT_COMMANDS` 变量相似，该变量使得构建系统在有大量源文件的情况下可以在项目中使用更短的命令。\n\n\t","slug":"Android-NDK结构","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxhv00bhsifyfcsy3w3k","content":"<h3 id=\"android-ndk-的结构\"><a class=\"markdownIt-Anchor\" href=\"#android-ndk-的结构\"></a> Android NDK 的结构</h3>\n<ul>\n<li>ndk-build: 该shell脚本是Android NDK构建系统的起始点。</li>\n<li>ndk-gdb: 该shell脚本允许用GNU调试器调试原生组件。</li>\n<li>ndk-stack: 该shell脚本可以帮助分析原生组件崩溃时的堆栈追踪</li>\n<li>build: 该目录包含了Android NDK构建系统的所有模块。</li>\n<li>platforms: 该目录包含了支持不同Android目标版本的头文件和库文件。</li>\n<li>samples: 该目录包含了一些示例应用程序，这些程序可以体现Android NDK的性能。</li>\n<li>sources: 该目录包含了可供开发人员导入到现有的Android NDK项目的一些共享模块。</li>\n<li>toolchains: 该目录包含目录Android NDK支持的不用目标机体系结构的交叉编译器。Android NDK目前支持ARM、X86 和MIPS机体系结构。Android NDK 构建系统根据选定的体系结构使用不同的交叉编译器。</li>\n</ul>\n<a id=\"more\"></a>\n<p>使用NDK可以做什么：</p>\n<ul>\n<li>建立一个共享库</li>\n<li>建立多种共享库</li>\n<li>建立静态库</li>\n<li>利用共享库共享通用模块</li>\n<li>在多种NDK项目见共享模块</li>\n<li>使用预建库</li>\n<li>使用独立的可执行文件</li>\n<li>其他构件系统变量和宏</li>\n<li>定义新变量和条件操作</li>\n</ul>\n<h3 id=\"androidmk\"><a class=\"markdownIt-Anchor\" href=\"#androidmk\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></h3>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">LOCAL_SRC_FILES := hello-jni.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>LOCAL_PATH := $(call my-dir)</p>\n</blockquote>\n<p>Android 构建系统利用LOCAL_PATH来定位源文件。因为将该变量设置为硬编码值并不合适，所以 Android 构建系统提供了一个名为 my-dir 的宏功能。通过该变量设置为 my-dir 宏功能的返回值， 可以将其放在当前目录下。</p>\n<p>Android 构建系统将CLEAR_VARS变量设置为clear-vars.mk片段的位置。包含Makefile片段可以清除除了LOCAL_PATH以外的LOCAL_<name>变量，例如 LOCAL_MODULE 与 LOCAL_SRC_FILES 等。</name></p>\n<blockquote>\n<p>Include $(CLEAR_VARS)</p>\n</blockquote>\n<p>这样做是因为 Android 构建系统在单次执行中解析多个构建文件和模块定义，而LOCAL_<name>是全局变量。清除他们可以避免冲突，每一个原生组件被称为一个模块。</name></p>\n<p>LOCAL_MODULE 变量用来给这些模块设定一个唯一的名称。下面的代码将该模块的名称设为 hello-jni:</p>\n<blockquote>\n<p>LOCAL_MODLE := hello-jni</p>\n</blockquote>\n<p>因为模块名称也被用于给构建过程所生成的文件命名，所以构建系统给该文件添加了适当的前缀和后缀。本例中， hello-jni 模块会生成一个共享库文件且构建系统会将它命名为<code>libhello-jni.so</code>。</p>\n<p>用LOCAL_SRC_FILES变量定义用来建立和组装这个模块的源文件列表。</p>\n<blockquote>\n<p>LOCAL_SRC_FILES := hello-jni.c</p>\n</blockquote>\n<p>这里，hello-jni 模块只由一个源文件生成，而 LOCAL_SRC_FILES 变量可以包含用空格分开的多个源文件名。</p>\n<hr>\n<p>构建多个共享库模块的 <a href=\"http://Androd.mk\" target=\"_blank\" rel=\"noopener\">Androd.mk</a> 构建文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 模块 1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module1</span><br><span class=\"line\">LOCAL_SRC_FILES := module1.c</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 模块2</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module2</span><br><span class=\"line\">LOCAL_SRC_FILES := module2.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>构建静态库的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 构建文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_STATIC_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p>在将第三方代码模块生成静态库之后，共享库就可以通过将它的模块名添加到<code>LOCAL_STATIC_LIBRARIES</code> 变量中来使用该模块。</p>\n<hr>\n<h5 id=\"用共享库共享通用模块\"><a class=\"markdownIt-Anchor\" href=\"#用共享库共享通用模块\"></a> 用共享库共享通用模块</h5>\n<p>静态库可以保证源代码模块化；但是，在静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与同一个静态库连接时，需要将通用模块的多个副本与不同共享库重复相连，这样就增加了应用程序的大小。在这种情况下，不用构建静态库，而是将通用模块作为共享库建立起来，而动态连接依赖模块以便消除重复的副本。</p>\n<p><a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件中共享库之间的代码共享</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULES := module1</span><br><span class=\"line\">LOCAL_SRC_FILES := module1.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块2</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module2</span><br><span class=\"line\">LOCAL_SRC_FILES := module2.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"不同ndk项目间共享模块\"><a class=\"markdownIt-Anchor\" href=\"#不同ndk项目间共享模块\"></a> 不同NDK项目间共享模块</h5>\n<p><strong>注意：</strong> 在 Android NDK 构建系统中，共享模块路径不能包含空格。</p>\n<ul>\n<li>作为共享模块，avilib 需要自己的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</li>\n</ul>\n<p>共享 avilib 模块的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p>使用共享模块的 NDK项目</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">call</span> import-module, transcode/avilib)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>import-module 函数库需要先定位共享模块，然后再将它导入到 NDK 项目中。默认情况下，import-module 函数库只搜索<android ndk>/sources 目录。为了搜索 c:\\android\\shared-modules 目录，定义一个名为 <code>NDK_MODULE_PATH</code> 的新环境变量并将它设置成共享库的根目录，例如：c:\\android\\shared-modules。</android></li>\n</ul>\n<hr>\n<p>预构建共享模块的 <code>Android.mk</code> 文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方预构建 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := libavilib.so</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(PREBUILT_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p><code>LOCAL_SRC_FILES</code> 变量指向的不是源文件，而是实际 Prebuilt 库相对于 <code>LOCAL_PATH</code> 的位置。</p>\n<p><strong>注意:</strong> Prebuilt 库定义中不包含任何关于该库所构建的实际机器体系结构的信息。开发人员需要确保 Prebuilt 库是为与 NDK 项目相同的机器的体系结构而构建的。</p>\n<p><code>PREBUILT_SHARED_LIBRARY</code> 变量指向 <a href=\"http://prebuilt-shared-library.mk\" target=\"_blank\" rel=\"noopener\">prebuilt-shared-library.mk</a> MakeFile 片段。它什么都没有构建，但是它将Prebuilt 库复制到 NDK 项目的libs目录下。通过使用 <code>PREBUILT_STATIC_LIBRARY</code> 变量，静态库可以像共享库一样被用作 Prebuilt 库，NDK 项目可以像普通共享库一样使用 Prebuilt库了。</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>独立可执行模块的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 独立的可执行的原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure>\n<p><code>BUILD_EXECUTABLE</code> 变量指向 <a href=\"http://build-executable.mk\" target=\"_blank\" rel=\"noopener\">build-executable.mk</a> Makefile 片段，该片段包含了在 Android 平台上生成独立可执行文件的必要步骤。独立可执行文件以与模块相同的名称被放在libs/<machine architecture>目录下。尽管放在该目录下，但在打包阶段它并没有被包含在APK文件中。</machine></p>\n<hr>\n<h4 id=\"其他构建系统变量\"><a class=\"markdownIt-Anchor\" href=\"#其他构建系统变量\"></a> 其他构建系统变量</h4>\n<p>构建系统定义的变量有：</p>\n<ul>\n<li><code>TARGET_ARCH</code>: 目标 CPU 体系结构的名称，例如 arm</li>\n<li><code>TARGET_PLATFORM</code>: 目标 Android 平台的名称，例如: android-8</li>\n<li><code>TARGET_ARCH_ABI</code>: 目标CPU体系结构和ABI的名称，例如：armeabi-v7a</li>\n<li><code>TARGET_ABI</code>: 目标平台和 ABI 的串联，例如：android-7-armeabi-v7a</li>\n</ul>\n<p>可被定义为模块说明部分的变量有：</p>\n<ul>\n<li>\n<p><code>LOCAL_MODULE_FILENAME</code>: 可选变量，用来重新定义生成的输出文件名称。默认情况下，构建系统使用<code>LOCAL_MODULE</code> 的值作为生成的输出文件名称，但变量 <code>LOCAL_MODULE_FILENAME</code> 可以覆盖 <code>LOCAL_MODULE</code> 的值。</p>\n</li>\n<li>\n<p><code>LOCAL_CPP_EXTENSION</code>: C<ins>源文件的默认扩展名是 .cpp。这个变量可以用来为C</ins>源代码指定一个或多个文件扩展名。</p>\n</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">LOCAL_CPP_EXTENSION := <span class=\"string\">.cpp</span> <span class=\"string\">.cxx</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CPP_FEATURES</code>: 可选变量，用来指明模块所依赖的具体 C++ 特性，如 RTTI 、 exceptions 等。</li>\n</ul>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_CPP_FEATURES := rtti</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_C_INCLUDES</code>: 可选目录列表，NDK 安装目录的相对路径，用来搜索头文件</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_C_INCLUDES := sources/shared-module</span><br><span class=\"line\">LOCAL_C_INCLUDES := <span class=\"variable\">$(LOCAL_PATH)</span>/<span class=\"keyword\">include</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CFLAGS</code>: 一组可选的编译器标志，在编译C和C++源文件的时候会被传送给编译器。</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\">LOCAL_CFLAGS := -DNDEBUG <span class=\"attribute\">-DPORT</span>=1234</span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CPP_FLAGS</code>: 一组可选的编译标志，在只编译C++源文件时被传送给编译器。</li>\n<li><code>LOCAL_WHOLE_STATIC_LIBRARIES</code>:<code>LOCAL_STATIC_LIBRARIES</code> 的变体，用来指明应该被包含在生成的共享库中的所有静态库内容。</li>\n</ul>\n<p><strong>小贴士</strong>: 当几个静态库之间有循环依赖时，<code>LOCAL_WHOLE_STATIC_LIBRARIES</code> 很有用。</p>\n<ul>\n<li><code>LOCAL_LDLIBS</code>:链接标志的可选列表，当对目标文件进行链接以生成输出文件时该标志将被传送给链接器。它主要用于传送要进行动态链接的系统库列表。<br>\n例如：要与 Android NDK 日志库链接，使用以下代码：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_LDFLAGS := -llog</span><br></pre></td></tr></table></figure>\n<p>-<code>LOCAL_ALLOW_UNDEFINED_SYMBOLS</code>: 可选参数，它禁止在生成的文件中进行缺失符号检查。若没有定义，链接器会在符号缺失时生成错误信息。</p>\n<ul>\n<li><code>LOCAL_ARM_MODE</code>: 可选参数，ARM机器体系结构特有变量，用于指定要生成的ARM 二进制类型。默认情况下，构建系统在拇指模式下用16位指令生成，但该变量可以被设置为 arm 来指定使用 32 位指令。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_ARM_MODE := arm</span><br></pre></td></tr></table></figure>\n<p>该变量改变了整个模块的构建系统行为；可以用 .arm扩展名指定只在 arm 模式下构建特定文件。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES :=file1<span class=\"selector-class\">.c</span> file2<span class=\"selector-class\">.c</span><span class=\"selector-class\">.arm</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_ARM_NEON</code>: 可选参数，ARM机器体系结构特有变量，用来指定在源文件中应该使用的 ARM 高级单指令多数据流(Single Instruction Multiple Data,SIMD)(a.k.a. NEON)内联函数。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_ARM_NEON := <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>该变量改变了整个模块的构建系统行为；可以用.neon 扩展名指定只构建带有NEON内联函数的特定文件。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES :=file1<span class=\"selector-class\">.c</span> file2<span class=\"selector-class\">.c</span><span class=\"selector-class\">.neon</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_DISABLE_NO_EXECUTE</code>:可选变量，用来禁用 NX Bit 安全特性。 NX Bit代表 Never Execute(永不执行)，它是在CPU中使用的一项技术，用来隔离代码区和存储区。这样可以防止恶意软件通过将它的代码插入应用程序的存储区来控制应用程序。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_DISABLE_NO_EXECUTE :=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_EXPORT_CFLAGS</code>: 该变量记录一组编译器标志，这些编译器标志会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code>或<code>LOCAL_SHARED_LIBRARIES</code>使用本模块的其他模块的LOCAL_CFLAGS 定义中。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_EXPORT_CFLAGS := -DENABLE_AUDIO</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_MODULE := module1</span><br><span class=\"line\">LOCAL_CFLAGS := -DDEBUG</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br></pre></td></tr></table></figure>\n<p>编译器在构建 module1 时会以-DENABLE_AUDIO -DDEBUG 标志执行。</p>\n<ul>\n<li><code>LOCAL_EXPORT_CPPFLAGS</code>： 和<code>LOCAL_EXPORT_CFLAGS</code>一样，但是它是C++特定代码编译器标志。</li>\n<li><code>LOCAL_EXPORT_LDFLAGS</code>: 和 <code>LOCAL_EXPORT_CFLAGS</code>一样，但用作链接器标志。</li>\n<li><code>LOCAL_EXPORT_C_INCLUDES</code>:该变量允许记录路径集，这些路径会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code> 或 <code>LOCAL_SHARED_LIBRARIES</code> 使用该模块的 <code>LOCAL_C_INCLUDES</code> 定义中。</li>\n<li><code>LOCAL_SHORT_COMMANDS</code>: 对于有大量资源或独立的静态/共享库的模块，该变量应该被设置为 true. 诸如Windows 之类的操作系统只允许命令行最多输入8191个字符；该变量通过分解构建命令使其长度小于8191个字符。在较小的模块中不推荐使用该方法，因为使用它会让构建过程变慢。</li>\n<li><code>LOCAL_FILTER_ASM</code>:该变量定义了用于过滤来自<code>LOCAL_SRC_FILES</code>变量的装配文件的应用程序。</li>\n</ul>\n<hr>\n<p>包含条件操作的构建文件 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ife<span class=\"string\">q ($(TARGET_ARCH)</span>, arm)</span><br><span class=\"line\">\tLOCAL_SRC_FILES += armonly.c</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tLOCAL_SRC_FILES += generic.c</span><br><span class=\"line\">endif</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"applicationmk\"><a class=\"markdownIt-Anchor\" href=\"#applicationmk\"></a> <a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h3>\n<p><a href=\"http://xn--Application-cq8qr2g328j.mk\" target=\"_blank\" rel=\"noopener\">以下是Application.mk</a> 构建文件指出的变量：</p>\n<ul>\n<li><code>APP_MODULES</code>: 默认情况下，Android NDK 构建系统构建 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件声明的所有模块。该变量可以覆盖上述行为并提供一个空格分开的、需要被构建的模块列表。</li>\n<li><code>APP_OPTIM</code>: 该变量可以被设置为 release 或 debug 以改变生成的二进制文件的优化级别。默认情况下使用的是 release 模式，并且此时生成的二进制文件被高度优化。该变量可以被设置为debug模式以生成更容易调试的未优化二进制文件。</li>\n<li><code>APP_CLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C 和 C++源文件时这些标志都会被传给编译器。</li>\n<li><code>APP_CPPFLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C++ 源文件时这些标志都会被传给编译器。</li>\n<li><code>APP_BUILD_SCRIPT</code>:默认情况下， Android NDK 构建系统在项目的 jni 子目录下查找 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 构建文件。可以用该变量改变上述行为，并使用不同的生成文件。</li>\n<li><code>APP_ABI</code>:默认情况下，Android NDK构建系统为armeabi  ABI 生成二进制文件。可以用该变量改变上述行为，并为其他 ABI 生成二进制文件，例如：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_ABI :=mips</span><br><span class=\"line\">另外， 可以设置多个 ABI </span><br><span class=\"line\">APP_ABI := armeabi mips</span><br><span class=\"line\"></span><br><span class=\"line\">为所有支持的ABI生成二进制文件</span><br><span class=\"line\">APP_ABI := all</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>APP_STL</code>: 默认情况下， Android NDK 构建系统使用最小 STL 运行库，也被称为system库。可以用该变量选择不同的STL实现。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_STL :=stlport_shared</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>APP_GNUSTL_FORCE_CPP_FEATURES</code>: 与 <code>LOCAL_CPP_EXTENSIONS</code> 变量相似，该变量表明所有模块都依赖于具体的C++特性， 如RTTI 、exceptions 等。</li>\n<li><code>APP_SHORT_COMMANDS</code>: 与 <code>LOCAL_SHORT_COMMANDS</code> 变量相似，该变量使得构建系统在有大量源文件的情况下可以在项目中使用更短的命令。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"android-ndk-的结构\"><a class=\"markdownIt-Anchor\" href=\"#android-ndk-的结构\"></a> Android NDK 的结构</h3>\n<ul>\n<li>ndk-build: 该shell脚本是Android NDK构建系统的起始点。</li>\n<li>ndk-gdb: 该shell脚本允许用GNU调试器调试原生组件。</li>\n<li>ndk-stack: 该shell脚本可以帮助分析原生组件崩溃时的堆栈追踪</li>\n<li>build: 该目录包含了Android NDK构建系统的所有模块。</li>\n<li>platforms: 该目录包含了支持不同Android目标版本的头文件和库文件。</li>\n<li>samples: 该目录包含了一些示例应用程序，这些程序可以体现Android NDK的性能。</li>\n<li>sources: 该目录包含了可供开发人员导入到现有的Android NDK项目的一些共享模块。</li>\n<li>toolchains: 该目录包含目录Android NDK支持的不用目标机体系结构的交叉编译器。Android NDK目前支持ARM、X86 和MIPS机体系结构。Android NDK 构建系统根据选定的体系结构使用不同的交叉编译器。</li>\n</ul>","more":"<p>使用NDK可以做什么：</p>\n<ul>\n<li>建立一个共享库</li>\n<li>建立多种共享库</li>\n<li>建立静态库</li>\n<li>利用共享库共享通用模块</li>\n<li>在多种NDK项目见共享模块</li>\n<li>使用预建库</li>\n<li>使用独立的可执行文件</li>\n<li>其他构件系统变量和宏</li>\n<li>定义新变量和条件操作</li>\n</ul>\n<h3 id=\"androidmk\"><a class=\"markdownIt-Anchor\" href=\"#androidmk\"></a> <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></h3>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">LOCAL_SRC_FILES := hello-jni.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>LOCAL_PATH := $(call my-dir)</p>\n</blockquote>\n<p>Android 构建系统利用LOCAL_PATH来定位源文件。因为将该变量设置为硬编码值并不合适，所以 Android 构建系统提供了一个名为 my-dir 的宏功能。通过该变量设置为 my-dir 宏功能的返回值， 可以将其放在当前目录下。</p>\n<p>Android 构建系统将CLEAR_VARS变量设置为clear-vars.mk片段的位置。包含Makefile片段可以清除除了LOCAL_PATH以外的LOCAL_<name>变量，例如 LOCAL_MODULE 与 LOCAL_SRC_FILES 等。</name></p>\n<blockquote>\n<p>Include $(CLEAR_VARS)</p>\n</blockquote>\n<p>这样做是因为 Android 构建系统在单次执行中解析多个构建文件和模块定义，而LOCAL_<name>是全局变量。清除他们可以避免冲突，每一个原生组件被称为一个模块。</name></p>\n<p>LOCAL_MODULE 变量用来给这些模块设定一个唯一的名称。下面的代码将该模块的名称设为 hello-jni:</p>\n<blockquote>\n<p>LOCAL_MODLE := hello-jni</p>\n</blockquote>\n<p>因为模块名称也被用于给构建过程所生成的文件命名，所以构建系统给该文件添加了适当的前缀和后缀。本例中， hello-jni 模块会生成一个共享库文件且构建系统会将它命名为<code>libhello-jni.so</code>。</p>\n<p>用LOCAL_SRC_FILES变量定义用来建立和组装这个模块的源文件列表。</p>\n<blockquote>\n<p>LOCAL_SRC_FILES := hello-jni.c</p>\n</blockquote>\n<p>这里，hello-jni 模块只由一个源文件生成，而 LOCAL_SRC_FILES 变量可以包含用空格分开的多个源文件名。</p>\n<hr>\n<p>构建多个共享库模块的 <a href=\"http://Androd.mk\" target=\"_blank\" rel=\"noopener\">Androd.mk</a> 构建文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 模块 1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module1</span><br><span class=\"line\">LOCAL_SRC_FILES := module1.c</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 模块2</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module2</span><br><span class=\"line\">LOCAL_SRC_FILES := module2.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>构建静态库的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 构建文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_STATIC_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p>在将第三方代码模块生成静态库之后，共享库就可以通过将它的模块名添加到<code>LOCAL_STATIC_LIBRARIES</code> 变量中来使用该模块。</p>\n<hr>\n<h5 id=\"用共享库共享通用模块\"><a class=\"markdownIt-Anchor\" href=\"#用共享库共享通用模块\"></a> 用共享库共享通用模块</h5>\n<p>静态库可以保证源代码模块化；但是，在静态库与共享库相连时，它就变成了共享库的一部分。在多个共享库的情况下，多个共享库与同一个静态库连接时，需要将通用模块的多个副本与不同共享库重复相连，这样就增加了应用程序的大小。在这种情况下，不用构建静态库，而是将通用模块作为共享库建立起来，而动态连接依赖模块以便消除重复的副本。</p>\n<p><a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件中共享库之间的代码共享</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块1</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULES := module1</span><br><span class=\"line\">LOCAL_SRC_FILES := module1.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块2</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module2</span><br><span class=\"line\">LOCAL_SRC_FILES := module2.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h5 id=\"不同ndk项目间共享模块\"><a class=\"markdownIt-Anchor\" href=\"#不同ndk项目间共享模块\"></a> 不同NDK项目间共享模块</h5>\n<p><strong>注意：</strong> 在 Android NDK 构建系统中，共享模块路径不能包含空格。</p>\n<ul>\n<li>作为共享模块，avilib 需要自己的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</li>\n</ul>\n<p>共享 avilib 模块的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := avilib.c platform_posix.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p>使用共享模块的 NDK项目</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">call</span> import-module, transcode/avilib)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>import-module 函数库需要先定位共享模块，然后再将它导入到 NDK 项目中。默认情况下，import-module 函数库只搜索<android ndk>/sources 目录。为了搜索 c:\\android\\shared-modules 目录，定义一个名为 <code>NDK_MODULE_PATH</code> 的新环境变量并将它设置成共享库的根目录，例如：c:\\android\\shared-modules。</android></li>\n</ul>\n<hr>\n<p>预构建共享模块的 <code>Android.mk</code> 文件</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_PATH := <span class=\"variable\">$(<span class=\"built_in\">call</span> my-<span class=\"built_in\">dir</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 第三方预构建 AVI 库</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">LOCAL_SRC_FILES := libavilib.so</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(PREBUILT_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<p><code>LOCAL_SRC_FILES</code> 变量指向的不是源文件，而是实际 Prebuilt 库相对于 <code>LOCAL_PATH</code> 的位置。</p>\n<p><strong>注意:</strong> Prebuilt 库定义中不包含任何关于该库所构建的实际机器体系结构的信息。开发人员需要确保 Prebuilt 库是为与 NDK 项目相同的机器的体系结构而构建的。</p>\n<p><code>PREBUILT_SHARED_LIBRARY</code> 变量指向 <a href=\"http://prebuilt-shared-library.mk\" target=\"_blank\" rel=\"noopener\">prebuilt-shared-library.mk</a> MakeFile 片段。它什么都没有构建，但是它将Prebuilt 库复制到 NDK 项目的libs目录下。通过使用 <code>PREBUILT_STATIC_LIBRARY</code> 变量，静态库可以像共享库一样被用作 Prebuilt 库，NDK 项目可以像普通共享库一样使用 Prebuilt库了。</p>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>独立可执行模块的 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件</p>\n <figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># 独立的可执行的原生模块</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(CLEAR_VARS)</span></span><br><span class=\"line\">LOCAL_MODULE := module</span><br><span class=\"line\">LOCAL_SRC_FILES := module.c</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_STATIC_LIBRARIES := avilib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure>\n<p><code>BUILD_EXECUTABLE</code> 变量指向 <a href=\"http://build-executable.mk\" target=\"_blank\" rel=\"noopener\">build-executable.mk</a> Makefile 片段，该片段包含了在 Android 平台上生成独立可执行文件的必要步骤。独立可执行文件以与模块相同的名称被放在libs/<machine architecture>目录下。尽管放在该目录下，但在打包阶段它并没有被包含在APK文件中。</machine></p>\n<hr>\n<h4 id=\"其他构建系统变量\"><a class=\"markdownIt-Anchor\" href=\"#其他构建系统变量\"></a> 其他构建系统变量</h4>\n<p>构建系统定义的变量有：</p>\n<ul>\n<li><code>TARGET_ARCH</code>: 目标 CPU 体系结构的名称，例如 arm</li>\n<li><code>TARGET_PLATFORM</code>: 目标 Android 平台的名称，例如: android-8</li>\n<li><code>TARGET_ARCH_ABI</code>: 目标CPU体系结构和ABI的名称，例如：armeabi-v7a</li>\n<li><code>TARGET_ABI</code>: 目标平台和 ABI 的串联，例如：android-7-armeabi-v7a</li>\n</ul>\n<p>可被定义为模块说明部分的变量有：</p>\n<ul>\n<li>\n<p><code>LOCAL_MODULE_FILENAME</code>: 可选变量，用来重新定义生成的输出文件名称。默认情况下，构建系统使用<code>LOCAL_MODULE</code> 的值作为生成的输出文件名称，但变量 <code>LOCAL_MODULE_FILENAME</code> 可以覆盖 <code>LOCAL_MODULE</code> 的值。</p>\n</li>\n<li>\n<p><code>LOCAL_CPP_EXTENSION</code>: C<ins>源文件的默认扩展名是 .cpp。这个变量可以用来为C</ins>源代码指定一个或多个文件扩展名。</p>\n</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\">LOCAL_CPP_EXTENSION := <span class=\"string\">.cpp</span> <span class=\"string\">.cxx</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CPP_FEATURES</code>: 可选变量，用来指明模块所依赖的具体 C++ 特性，如 RTTI 、 exceptions 等。</li>\n</ul>\n<figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_CPP_FEATURES := rtti</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_C_INCLUDES</code>: 可选目录列表，NDK 安装目录的相对路径，用来搜索头文件</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">LOCAL_C_INCLUDES := sources/shared-module</span><br><span class=\"line\">LOCAL_C_INCLUDES := <span class=\"variable\">$(LOCAL_PATH)</span>/<span class=\"keyword\">include</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CFLAGS</code>: 一组可选的编译器标志，在编译C和C++源文件的时候会被传送给编译器。</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\">LOCAL_CFLAGS := -DNDEBUG <span class=\"attribute\">-DPORT</span>=1234</span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_CPP_FLAGS</code>: 一组可选的编译标志，在只编译C++源文件时被传送给编译器。</li>\n<li><code>LOCAL_WHOLE_STATIC_LIBRARIES</code>:<code>LOCAL_STATIC_LIBRARIES</code> 的变体，用来指明应该被包含在生成的共享库中的所有静态库内容。</li>\n</ul>\n<p><strong>小贴士</strong>: 当几个静态库之间有循环依赖时，<code>LOCAL_WHOLE_STATIC_LIBRARIES</code> 很有用。</p>\n<ul>\n<li><code>LOCAL_LDLIBS</code>:链接标志的可选列表，当对目标文件进行链接以生成输出文件时该标志将被传送给链接器。它主要用于传送要进行动态链接的系统库列表。<br>\n例如：要与 Android NDK 日志库链接，使用以下代码：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_LDFLAGS := -llog</span><br></pre></td></tr></table></figure>\n<p>-<code>LOCAL_ALLOW_UNDEFINED_SYMBOLS</code>: 可选参数，它禁止在生成的文件中进行缺失符号检查。若没有定义，链接器会在符号缺失时生成错误信息。</p>\n<ul>\n<li><code>LOCAL_ARM_MODE</code>: 可选参数，ARM机器体系结构特有变量，用于指定要生成的ARM 二进制类型。默认情况下，构建系统在拇指模式下用16位指令生成，但该变量可以被设置为 arm 来指定使用 32 位指令。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_ARM_MODE := arm</span><br></pre></td></tr></table></figure>\n<p>该变量改变了整个模块的构建系统行为；可以用 .arm扩展名指定只在 arm 模式下构建特定文件。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES :=file1<span class=\"selector-class\">.c</span> file2<span class=\"selector-class\">.c</span><span class=\"selector-class\">.arm</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_ARM_NEON</code>: 可选参数，ARM机器体系结构特有变量，用来指定在源文件中应该使用的 ARM 高级单指令多数据流(Single Instruction Multiple Data,SIMD)(a.k.a. NEON)内联函数。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_ARM_NEON := <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>该变量改变了整个模块的构建系统行为；可以用.neon 扩展名指定只构建带有NEON内联函数的特定文件。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_SRC_FILES :=file1<span class=\"selector-class\">.c</span> file2<span class=\"selector-class\">.c</span><span class=\"selector-class\">.neon</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_DISABLE_NO_EXECUTE</code>:可选变量，用来禁用 NX Bit 安全特性。 NX Bit代表 Never Execute(永不执行)，它是在CPU中使用的一项技术，用来隔离代码区和存储区。这样可以防止恶意软件通过将它的代码插入应用程序的存储区来控制应用程序。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_DISABLE_NO_EXECUTE :=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>LOCAL_EXPORT_CFLAGS</code>: 该变量记录一组编译器标志，这些编译器标志会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code>或<code>LOCAL_SHARED_LIBRARIES</code>使用本模块的其他模块的LOCAL_CFLAGS 定义中。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_MODULE := avilib</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_EXPORT_CFLAGS := -DENABLE_AUDIO</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_MODULE := module1</span><br><span class=\"line\">LOCAL_CFLAGS := -DDEBUG</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_SHARED_LIBRARIES := avilib</span><br></pre></td></tr></table></figure>\n<p>编译器在构建 module1 时会以-DENABLE_AUDIO -DDEBUG 标志执行。</p>\n<ul>\n<li><code>LOCAL_EXPORT_CPPFLAGS</code>： 和<code>LOCAL_EXPORT_CFLAGS</code>一样，但是它是C++特定代码编译器标志。</li>\n<li><code>LOCAL_EXPORT_LDFLAGS</code>: 和 <code>LOCAL_EXPORT_CFLAGS</code>一样，但用作链接器标志。</li>\n<li><code>LOCAL_EXPORT_C_INCLUDES</code>:该变量允许记录路径集，这些路径会被添加到通过变量<code>LOCAL_STATIC_LIBRARIES</code> 或 <code>LOCAL_SHARED_LIBRARIES</code> 使用该模块的 <code>LOCAL_C_INCLUDES</code> 定义中。</li>\n<li><code>LOCAL_SHORT_COMMANDS</code>: 对于有大量资源或独立的静态/共享库的模块，该变量应该被设置为 true. 诸如Windows 之类的操作系统只允许命令行最多输入8191个字符；该变量通过分解构建命令使其长度小于8191个字符。在较小的模块中不推荐使用该方法，因为使用它会让构建过程变慢。</li>\n<li><code>LOCAL_FILTER_ASM</code>:该变量定义了用于过滤来自<code>LOCAL_SRC_FILES</code>变量的装配文件的应用程序。</li>\n</ul>\n<hr>\n<p>包含条件操作的构建文件 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">ife<span class=\"string\">q ($(TARGET_ARCH)</span>, arm)</span><br><span class=\"line\">\tLOCAL_SRC_FILES += armonly.c</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tLOCAL_SRC_FILES += generic.c</span><br><span class=\"line\">endif</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"applicationmk\"><a class=\"markdownIt-Anchor\" href=\"#applicationmk\"></a> <a href=\"http://Application.mk\" target=\"_blank\" rel=\"noopener\">Application.mk</a></h3>\n<p><a href=\"http://xn--Application-cq8qr2g328j.mk\" target=\"_blank\" rel=\"noopener\">以下是Application.mk</a> 构建文件指出的变量：</p>\n<ul>\n<li><code>APP_MODULES</code>: 默认情况下，Android NDK 构建系统构建 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件声明的所有模块。该变量可以覆盖上述行为并提供一个空格分开的、需要被构建的模块列表。</li>\n<li><code>APP_OPTIM</code>: 该变量可以被设置为 release 或 debug 以改变生成的二进制文件的优化级别。默认情况下使用的是 release 模式，并且此时生成的二进制文件被高度优化。该变量可以被设置为debug模式以生成更容易调试的未优化二进制文件。</li>\n<li><code>APP_CLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C 和 C++源文件时这些标志都会被传给编译器。</li>\n<li><code>APP_CPPFLAGS</code>: 该变量列出了一些编译器标志，在编译任何模块的 C++ 源文件时这些标志都会被传给编译器。</li>\n<li><code>APP_BUILD_SCRIPT</code>:默认情况下， Android NDK 构建系统在项目的 jni 子目录下查找 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 构建文件。可以用该变量改变上述行为，并使用不同的生成文件。</li>\n<li><code>APP_ABI</code>:默认情况下，Android NDK构建系统为armeabi  ABI 生成二进制文件。可以用该变量改变上述行为，并为其他 ABI 生成二进制文件，例如：</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_ABI :=mips</span><br><span class=\"line\">另外， 可以设置多个 ABI </span><br><span class=\"line\">APP_ABI := armeabi mips</span><br><span class=\"line\"></span><br><span class=\"line\">为所有支持的ABI生成二进制文件</span><br><span class=\"line\">APP_ABI := all</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>APP_STL</code>: 默认情况下， Android NDK 构建系统使用最小 STL 运行库，也被称为system库。可以用该变量选择不同的STL实现。</li>\n</ul>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP_STL :=stlport_shared</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>APP_GNUSTL_FORCE_CPP_FEATURES</code>: 与 <code>LOCAL_CPP_EXTENSIONS</code> 变量相似，该变量表明所有模块都依赖于具体的C++特性， 如RTTI 、exceptions 等。</li>\n<li><code>APP_SHORT_COMMANDS</code>: 与 <code>LOCAL_SHORT_COMMANDS</code> 变量相似，该变量使得构建系统在有大量源文件的情况下可以在项目中使用更短的命令。</li>\n</ul>"},{"title":"C++文件读写详解","date":"2021-04-15T06:28:08.000Z","_content":"\n\n## C++文件读写详解（ofstream,ifstream,fstream）\n\n\n- `#include <fstream>`\n- ostream //文件写操作 内存写入存储设备\n- istream // 文件读操作，存储设备读取到内存中\n- fstream // 读写操作，对打开的文件可进行读写操作\n\n<!-- more -->\n\n### 打开文件\n在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofstream，ifstram，fstream对象进行对文件的读写操作\n\n#### 函数：open()\n\n```\npublic member function\n\nvoid open(const char *filename, ios_base::openmode mode = ios_base::in|ios_base::out);\n\n\nvoid open(const wchar_t *_Filename, ios_base::openmode mode = ios_base::in | ios_base::out, int prot = ios_base::Openprot);\n\n```\n参数: \n\nfilename 操作文件名\n\nmode 打开文件的方式\n\nprot 打开文件的属性\t// 基本很少用到，在查看资料时，发现有两种方式\n\n打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：\n\n|模式|描述|\n|:--|:--|\n|ios::in|为输入(读取)而打开文件|\n|ios::out|为输出(写)而打开文件|\n|ios::ate|初始位置:文件尾|\n|ios::app|所有输出附加在文件末尾|\n|ios::trunc|如果文件已存在则先删除该文件|\n|ios::binary|二进制方式|\n\n这些方式是能够进行组合使用的，以\"或\"运算(\"|\")的方式：例如\n\n```\nofstream out;\n\nout.open(\"hello.txt\", ios::in|ios::out|ios::binary); // 根据自己需要进行适当的选取\n```\n打开文件的属性同样在ios类中也有定义：\n\n|||\n|:--:|:--|\n|0|普通文件，打开操作|\n|1|只读文件|\n|2|隐含文件|\n|4|系统文件|\n\n对于文件的属性也可以使用\"或\"运算和\"+\"进行组合使用，这里就不做说明了。\n\n很多程序中，可能会遇到ofstream out(\"hello.txt\")，ifstream in(\"...\")，fstream foi(\"...\") 这样的使用，并没有显式的去调用open()函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数，并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：\n\n```\nostream out(\"...\", ios::out);\nifstream in(\"...\", ios::in);\nfstream foi(\"...\", ios::in|ios::out);\n\n```\n当使用默认方式进行对文件的操作时，你可以使用成员函数is_open()对文件是否打开进行验证\n\n#### 关闭文件\n\n当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。\n\n#### 文本文件的读写\n\n类ofstream，ifstream和fstream是分别从ostream，istream和iostream中引申而来的。这就是为什么fstream的对象可以使用其父类的成员来访问数据。\n\n一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin和cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符<<:\n\n```\n// write on a text file\n#include <fstream>\n\nint main() {\n\nofstream out(\"out.txt\");\n\nif(out.is_open())\n{\n\tout << \"This is a line.\\n\";\n\tout << \"This is another line.\\n\";\n\tout.close();\n}\n\nreturn 0;\n}\n\n// 结果: 在out.txt中写入:\nThis is a line.\nThis is another line.\n```\n\n从文件中读入数据也可以用与cin >> 的使用同样的方法:\n\n```\n// rending a text file\n\n#include <iostream>\n#include <fstream>\n#include <stdlib.h>\n\nusing namespace std;\n\nint main() {\n\n\tchar buffer[256];\n\tifstream in(\"test.txt\");\n\tif(!in.is_open())\n\t{\n\t\tcout << \"Error opening\"; exit(1);\n\t}\n\n\twhile(!in.oof()) {\n\t\tin.getline(buffer, 100);\n\t\tcout << buffer << endl;\n\t}\n\t\n\treturn 0;\n}\n// 结果 在屏幕上输出\nThis is a line.\nThis is another line.\n```\n\n上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof，它是ifstream从类ios中集成过来的，当到达文件末尾时返回true。\n\n### 状态标识符的验证(Verification of state flags)\n\n除了eof()以外，还有一些验证流的状态的成员函数(所有都返回bool型返回值)：\n\n- bad()\n\n如果在读写过程中出错，返回true。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。\n\n- fail()\n\n除了与bad()同样的情况下会返回true外，加上格式错误时也会返回true，例如当想要读取一个整数，而获得了一个字母的时候。\n\n- eof()\n\n如果读文件到达文件末尾，返回true。\n\n- good()\n\n这是最通用的：如果调用以上任何一个函数返回true的话，此函数返回false。\n\n要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear(),没有函数。\n\n### 获得和设置流指针(get and put stream pointers)\n\n所有输入/输出流对象(i/o streams objects)都有至少一个流指针：\n\n- ifstream，类似istream，有一个被称为get pointer的指针，指向下一个将被读取的元素。\n- ofstream，类似ostream，有一个指针put pointer，指向写入下一个元素的位置。\n- fstream，类似iostream，同时继承了get和put。\n\n我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：\n\n- tellg()和tellp()\n\n这两个成员函数不用传入参数，返回pos_type类型的值(根据ANSI-C++标准)，就是一个整数，代表当前get流指针的位置(用tellg)或put流指针的位置(用tellp)。\n\n- seekg()和seekp()\n\n这对函数分别用来改变流指针get和put的位置。两个函数都被重载为两种不同的原型：\n\n```\nseekg(pos_type position);\nseekp(pos_type position);\n```\n使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数tellg和tellp的返回值类型相同。\n\n```\nseekg(off_type offset, seekdir direction);\nseekp(off_type offset, seekdir direction);\n```\n使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：\n\n|||\n|:--|:--|\n|ios::beg|从流开始位置计算的位移|\n|ios::cur|从流指针当前位置开始计算的位移|\n|ios::end|从流末尾处开始计算的位移|\n\n流指针get 和 put的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg和seekp的第一种原型，而且不要对tellg或tellp的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。\n\n以下例子使用这些函数来获得一个二进制文件的大小：\n\n```\n#include <iostream>\n#include <fstream>\n\nconst char * filename = \"test.txt\";\n\nusing namespace std;\n\nint main(){\n\nlong l,m;\n\nifstream in(filename, ios::in|ios::binary);\n\nl = in.tellg();\nin.seekg(0, ios::end);\nm = in.tellg();\nin.close();\n\ncout << \"size of \" << filename;\ncout << \" is \" << (m-l) << \" bytes.\\n\";\n\nreturn 0;\n}\n\n// 结果：\n// size of test.txt is 40 bytes.\n```\n\n### 二进制文件\n\n在二进制文件中，使用`<<`和`>>`，以及函数(如getline)来操作输入和输出数据，没有什么实际意义，虽然它们是符合语法的。\n\n文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数(write)是ostream的一个成员函数，都是被ofstream所继承。而read是istream的一个成员函数，被ifstream锁继承。类fstream的对象同时拥有这两个函数。它们的原型是：\n\n```\nwrite(char * buffer, streamsize size);\nread(char * buffer, streamsize size);\n```\n这里buffer是一块内存的地址，用来存储或读取数据。参数size是一个整数值，表示要从缓存(buffer)中读出和写入的字符数。\n\n```\n#include <iostream>\n#include <fstream>\n\nconst char * filename = \"test.txt\";\n\nusing namespace std;\n\nint main() {\n\nchar * buffer;\nlong size;\n\nifstream in(filename, ios::in|ios::binary|ios::ate);\n\nsize = in.tellg();\n\nin.seekg(0, ios::beg);\n\nbuffer = new char[size];\n\nin.read(buffer, size);\n\nin.close();\n\ncout << \"the complete file is in a buffer\";\n\ndelete [] buffer;\n\n\nreturn 0;\n}\n```\n\n### 缓存和同步(buffer and synchronization)\n\n当我们对文件流进行操作的时候，它们与一个streambuf类型的缓存(buffer)联系在一起。这个缓存(buffer)实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流，每次成员函数put（写一个单个字符）被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存(buffer)中。\n当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中(如果是一个输出流的话)，或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronzization)，它会在以下任一情况下发生：\n\n- **当文件被关闭时**：在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。\n- **当缓存buffer满时**：缓存Buffers有一定的时间空间限制。当缓存满时，它会被自动同步。\n- **控制符明确指明**：当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush和endl。\n- **明确调用函数sync()**： 调用成员函数sync()（无参数）可以引发立即同步。这个函数返回一个int值，等于-1表示流没有联系的缓存和操作失败。\n\n在ios,istream和ostream类中,还定义了若干输入输出函数,它们主要用于错误处理,流的刷新以及流输入输出方式的控制。\n\n#### 错误处理\n在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，错误的性质被记录在ios类的一个数据成员中。\n\n ios类中定义的描述错误状态的常量:\n \n ```\n goodbit-------------没有错误，正常状态　\n eofbit--------------到达流的结尾\n failbit-------------I/O操作失败，清除状态字后，可以对流继续进行操作。\n badbit--------------试图进行非法操作，清除状态字后，流可能还可以使用。\n hardfail------------致命错误，不可恢复的错误。\n ```\n 对应于这些位,可用ios中定义的如下函数来检查流的当前状态位:\n \n ```\n int good()---------如果正常,返回非0值\n int bad()----------如果badbit被设置,返回非0值\n int eof()----------如果eofbit被设置,返回非0值\n int fail()---------如果failbit被设置,返回非0值\n int rdstate()------返回当前错误状态位.\n ```\n \n 流的其它成员函数可以从流中读取字符或字符串，对流进行无格式化的输入 输出操作，以及直接控制对流的I/O操作。\n \n|返回类型|ostream类的成员|描述|\n|:--|:--|:--|\n|ostream&|put(char ch)|向流中输出一个字符ch，不进行任何转换|\n|ostream&|write(char*,int)|向流中输出指定长度的字符串，不进行转换|\n|ostream&|flush() |刷新流，输出所有缓冲的但还未输出的数据|\n|ostream&|seekp(streampos)|移动流的当前指针到给定的绝对位置|\n|ostream&|seekp(sereamoff,seek_dir)|流的当前指针类似与文件的当前指针|\n|streampos|tellp()|返回流的当前指针的绝对位置|\n\nistream类的成员函数\n\n|返回类型|istream类的成员|描述|\n|:--|:--|:--|\n|in|get()|读取并返回一个字符|\n|istream&|get(char &c)|读取字符并存入c中|\n|istream&|putback()|将最近读取的字符放回流中|\n|istream&|read(char *, int)|读取规定长度的字符串到缓冲区中|\n|in|peek()|返回流中下一个字符，但不移动文件指针|\n|istream&|seekg(streampos)|移动当前指针到一绝对地址|\n|istream&|seekg(streampos, seek_dir)|移动当前指针到一相对地址|\n|streampos|tellg()|返回当前指针|\n\n\n\n","source":"_posts/C-文件读写详解.md","raw":"---\ntitle: C++文件读写详解\ndate: 2021-04-15 14:28:08\ntags: [c++, file]\ncategories: cpp\n---\n\n\n## C++文件读写详解（ofstream,ifstream,fstream）\n\n\n- `#include <fstream>`\n- ostream //文件写操作 内存写入存储设备\n- istream // 文件读操作，存储设备读取到内存中\n- fstream // 读写操作，对打开的文件可进行读写操作\n\n<!-- more -->\n\n### 打开文件\n在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofstream，ifstram，fstream对象进行对文件的读写操作\n\n#### 函数：open()\n\n```\npublic member function\n\nvoid open(const char *filename, ios_base::openmode mode = ios_base::in|ios_base::out);\n\n\nvoid open(const wchar_t *_Filename, ios_base::openmode mode = ios_base::in | ios_base::out, int prot = ios_base::Openprot);\n\n```\n参数: \n\nfilename 操作文件名\n\nmode 打开文件的方式\n\nprot 打开文件的属性\t// 基本很少用到，在查看资料时，发现有两种方式\n\n打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：\n\n|模式|描述|\n|:--|:--|\n|ios::in|为输入(读取)而打开文件|\n|ios::out|为输出(写)而打开文件|\n|ios::ate|初始位置:文件尾|\n|ios::app|所有输出附加在文件末尾|\n|ios::trunc|如果文件已存在则先删除该文件|\n|ios::binary|二进制方式|\n\n这些方式是能够进行组合使用的，以\"或\"运算(\"|\")的方式：例如\n\n```\nofstream out;\n\nout.open(\"hello.txt\", ios::in|ios::out|ios::binary); // 根据自己需要进行适当的选取\n```\n打开文件的属性同样在ios类中也有定义：\n\n|||\n|:--:|:--|\n|0|普通文件，打开操作|\n|1|只读文件|\n|2|隐含文件|\n|4|系统文件|\n\n对于文件的属性也可以使用\"或\"运算和\"+\"进行组合使用，这里就不做说明了。\n\n很多程序中，可能会遇到ofstream out(\"hello.txt\")，ifstream in(\"...\")，fstream foi(\"...\") 这样的使用，并没有显式的去调用open()函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数，并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：\n\n```\nostream out(\"...\", ios::out);\nifstream in(\"...\", ios::in);\nfstream foi(\"...\", ios::in|ios::out);\n\n```\n当使用默认方式进行对文件的操作时，你可以使用成员函数is_open()对文件是否打开进行验证\n\n#### 关闭文件\n\n当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。\n\n#### 文本文件的读写\n\n类ofstream，ifstream和fstream是分别从ostream，istream和iostream中引申而来的。这就是为什么fstream的对象可以使用其父类的成员来访问数据。\n\n一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin和cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符<<:\n\n```\n// write on a text file\n#include <fstream>\n\nint main() {\n\nofstream out(\"out.txt\");\n\nif(out.is_open())\n{\n\tout << \"This is a line.\\n\";\n\tout << \"This is another line.\\n\";\n\tout.close();\n}\n\nreturn 0;\n}\n\n// 结果: 在out.txt中写入:\nThis is a line.\nThis is another line.\n```\n\n从文件中读入数据也可以用与cin >> 的使用同样的方法:\n\n```\n// rending a text file\n\n#include <iostream>\n#include <fstream>\n#include <stdlib.h>\n\nusing namespace std;\n\nint main() {\n\n\tchar buffer[256];\n\tifstream in(\"test.txt\");\n\tif(!in.is_open())\n\t{\n\t\tcout << \"Error opening\"; exit(1);\n\t}\n\n\twhile(!in.oof()) {\n\t\tin.getline(buffer, 100);\n\t\tcout << buffer << endl;\n\t}\n\t\n\treturn 0;\n}\n// 结果 在屏幕上输出\nThis is a line.\nThis is another line.\n```\n\n上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof，它是ifstream从类ios中集成过来的，当到达文件末尾时返回true。\n\n### 状态标识符的验证(Verification of state flags)\n\n除了eof()以外，还有一些验证流的状态的成员函数(所有都返回bool型返回值)：\n\n- bad()\n\n如果在读写过程中出错，返回true。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。\n\n- fail()\n\n除了与bad()同样的情况下会返回true外，加上格式错误时也会返回true，例如当想要读取一个整数，而获得了一个字母的时候。\n\n- eof()\n\n如果读文件到达文件末尾，返回true。\n\n- good()\n\n这是最通用的：如果调用以上任何一个函数返回true的话，此函数返回false。\n\n要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear(),没有函数。\n\n### 获得和设置流指针(get and put stream pointers)\n\n所有输入/输出流对象(i/o streams objects)都有至少一个流指针：\n\n- ifstream，类似istream，有一个被称为get pointer的指针，指向下一个将被读取的元素。\n- ofstream，类似ostream，有一个指针put pointer，指向写入下一个元素的位置。\n- fstream，类似iostream，同时继承了get和put。\n\n我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：\n\n- tellg()和tellp()\n\n这两个成员函数不用传入参数，返回pos_type类型的值(根据ANSI-C++标准)，就是一个整数，代表当前get流指针的位置(用tellg)或put流指针的位置(用tellp)。\n\n- seekg()和seekp()\n\n这对函数分别用来改变流指针get和put的位置。两个函数都被重载为两种不同的原型：\n\n```\nseekg(pos_type position);\nseekp(pos_type position);\n```\n使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数tellg和tellp的返回值类型相同。\n\n```\nseekg(off_type offset, seekdir direction);\nseekp(off_type offset, seekdir direction);\n```\n使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：\n\n|||\n|:--|:--|\n|ios::beg|从流开始位置计算的位移|\n|ios::cur|从流指针当前位置开始计算的位移|\n|ios::end|从流末尾处开始计算的位移|\n\n流指针get 和 put的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg和seekp的第一种原型，而且不要对tellg或tellp的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。\n\n以下例子使用这些函数来获得一个二进制文件的大小：\n\n```\n#include <iostream>\n#include <fstream>\n\nconst char * filename = \"test.txt\";\n\nusing namespace std;\n\nint main(){\n\nlong l,m;\n\nifstream in(filename, ios::in|ios::binary);\n\nl = in.tellg();\nin.seekg(0, ios::end);\nm = in.tellg();\nin.close();\n\ncout << \"size of \" << filename;\ncout << \" is \" << (m-l) << \" bytes.\\n\";\n\nreturn 0;\n}\n\n// 结果：\n// size of test.txt is 40 bytes.\n```\n\n### 二进制文件\n\n在二进制文件中，使用`<<`和`>>`，以及函数(如getline)来操作输入和输出数据，没有什么实际意义，虽然它们是符合语法的。\n\n文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数(write)是ostream的一个成员函数，都是被ofstream所继承。而read是istream的一个成员函数，被ifstream锁继承。类fstream的对象同时拥有这两个函数。它们的原型是：\n\n```\nwrite(char * buffer, streamsize size);\nread(char * buffer, streamsize size);\n```\n这里buffer是一块内存的地址，用来存储或读取数据。参数size是一个整数值，表示要从缓存(buffer)中读出和写入的字符数。\n\n```\n#include <iostream>\n#include <fstream>\n\nconst char * filename = \"test.txt\";\n\nusing namespace std;\n\nint main() {\n\nchar * buffer;\nlong size;\n\nifstream in(filename, ios::in|ios::binary|ios::ate);\n\nsize = in.tellg();\n\nin.seekg(0, ios::beg);\n\nbuffer = new char[size];\n\nin.read(buffer, size);\n\nin.close();\n\ncout << \"the complete file is in a buffer\";\n\ndelete [] buffer;\n\n\nreturn 0;\n}\n```\n\n### 缓存和同步(buffer and synchronization)\n\n当我们对文件流进行操作的时候，它们与一个streambuf类型的缓存(buffer)联系在一起。这个缓存(buffer)实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流，每次成员函数put（写一个单个字符）被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存(buffer)中。\n当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中(如果是一个输出流的话)，或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronzization)，它会在以下任一情况下发生：\n\n- **当文件被关闭时**：在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。\n- **当缓存buffer满时**：缓存Buffers有一定的时间空间限制。当缓存满时，它会被自动同步。\n- **控制符明确指明**：当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush和endl。\n- **明确调用函数sync()**： 调用成员函数sync()（无参数）可以引发立即同步。这个函数返回一个int值，等于-1表示流没有联系的缓存和操作失败。\n\n在ios,istream和ostream类中,还定义了若干输入输出函数,它们主要用于错误处理,流的刷新以及流输入输出方式的控制。\n\n#### 错误处理\n在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，错误的性质被记录在ios类的一个数据成员中。\n\n ios类中定义的描述错误状态的常量:\n \n ```\n goodbit-------------没有错误，正常状态　\n eofbit--------------到达流的结尾\n failbit-------------I/O操作失败，清除状态字后，可以对流继续进行操作。\n badbit--------------试图进行非法操作，清除状态字后，流可能还可以使用。\n hardfail------------致命错误，不可恢复的错误。\n ```\n 对应于这些位,可用ios中定义的如下函数来检查流的当前状态位:\n \n ```\n int good()---------如果正常,返回非0值\n int bad()----------如果badbit被设置,返回非0值\n int eof()----------如果eofbit被设置,返回非0值\n int fail()---------如果failbit被设置,返回非0值\n int rdstate()------返回当前错误状态位.\n ```\n \n 流的其它成员函数可以从流中读取字符或字符串，对流进行无格式化的输入 输出操作，以及直接控制对流的I/O操作。\n \n|返回类型|ostream类的成员|描述|\n|:--|:--|:--|\n|ostream&|put(char ch)|向流中输出一个字符ch，不进行任何转换|\n|ostream&|write(char*,int)|向流中输出指定长度的字符串，不进行转换|\n|ostream&|flush() |刷新流，输出所有缓冲的但还未输出的数据|\n|ostream&|seekp(streampos)|移动流的当前指针到给定的绝对位置|\n|ostream&|seekp(sereamoff,seek_dir)|流的当前指针类似与文件的当前指针|\n|streampos|tellp()|返回流的当前指针的绝对位置|\n\nistream类的成员函数\n\n|返回类型|istream类的成员|描述|\n|:--|:--|:--|\n|in|get()|读取并返回一个字符|\n|istream&|get(char &c)|读取字符并存入c中|\n|istream&|putback()|将最近读取的字符放回流中|\n|istream&|read(char *, int)|读取规定长度的字符串到缓冲区中|\n|in|peek()|返回流中下一个字符，但不移动文件指针|\n|istream&|seekg(streampos)|移动当前指针到一绝对地址|\n|istream&|seekg(streampos, seek_dir)|移动当前指针到一相对地址|\n|streampos|tellg()|返回当前指针|\n\n\n\n","slug":"C-文件读写详解","published":1,"updated":"2021-04-19T04:53:48.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxhy00bisifykff8di94","content":"<h2 id=\"c文件读写详解ofstreamifstreamfstream\"><a class=\"markdownIt-Anchor\" href=\"#c文件读写详解ofstreamifstreamfstream\"></a> C++文件读写详解（ofstream,ifstream,fstream）</h2>\n<ul>\n<li><code>#include &lt;fstream&gt;</code></li>\n<li>ostream //文件写操作 内存写入存储设备</li>\n<li>istream // 文件读操作，存储设备读取到内存中</li>\n<li>fstream // 读写操作，对打开的文件可进行读写操作</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"打开文件\"><a class=\"markdownIt-Anchor\" href=\"#打开文件\"></a> 打开文件</h3>\n<p>在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofstream，ifstram，fstream对象进行对文件的读写操作</p>\n<h4 id=\"函数open\"><a class=\"markdownIt-Anchor\" href=\"#函数open\"></a> 函数：open()</h4>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> member function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> open(const <span class=\"keyword\">char</span> *filename, <span class=\"string\">ios_base:</span>:openmode mode = <span class=\"string\">ios_base:</span>:<span class=\"keyword\">in</span>|<span class=\"string\">ios_base:</span>:out);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> open(const wchar_t *_Filename, <span class=\"string\">ios_base:</span>:openmode mode = <span class=\"string\">ios_base:</span>:<span class=\"keyword\">in</span> | <span class=\"string\">ios_base:</span>:out, <span class=\"keyword\">int</span> prot = <span class=\"string\">ios_base:</span>:Openprot);</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<p>filename 操作文件名</p>\n<p>mode 打开文件的方式</p>\n<p>prot 打开文件的属性\t// 基本很少用到，在查看资料时，发现有两种方式</p>\n<p>打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ios::in</td>\n<td style=\"text-align:left\">为输入(读取)而打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::out</td>\n<td style=\"text-align:left\">为输出(写)而打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::ate</td>\n<td style=\"text-align:left\">初始位置:文件尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::app</td>\n<td style=\"text-align:left\">所有输出附加在文件末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::trunc</td>\n<td style=\"text-align:left\">如果文件已存在则先删除该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::binary</td>\n<td style=\"text-align:left\">二进制方式</td>\n</tr>\n</tbody>\n</table>\n<p>这些方式是能够进行组合使用的，以&quot;或&quot;运算(&quot;|&quot;)的方式：例如</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ofstream <span class=\"keyword\">out</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span>.<span class=\"keyword\">open</span>(<span class=\"string\">\"hello.txt\"</span>, ios::<span class=\"keyword\">in</span>|ios::<span class=\"keyword\">out</span>|ios::binary); <span class=\"comment\">// 根据自己需要进行适当的选取</span></span><br></pre></td></tr></table></figure>\n<p>打开文件的属性同样在ios类中也有定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">普通文件，打开操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">只读文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">隐含文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">系统文件</td>\n</tr>\n</tbody>\n</table>\n<p>对于文件的属性也可以使用&quot;或&quot;运算和&quot;+&quot;进行组合使用，这里就不做说明了。</p>\n<p>很多程序中，可能会遇到ofstream out(“hello.txt”)，ifstream in(&quot;…&quot;)，fstream foi(&quot;…&quot;) 这样的使用，并没有显式的去调用open()函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数，并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ostream <span class=\"title\">out</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">out</span></span>)</span>;</span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">in</span></span>)</span>;</span><br><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">foi</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">in</span>|ios::<span class=\"keyword\">out</span></span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>当使用默认方式进行对文件的操作时，你可以使用成员函数is_open()对文件是否打开进行验证</p>\n<h4 id=\"关闭文件\"><a class=\"markdownIt-Anchor\" href=\"#关闭文件\"></a> 关闭文件</h4>\n<p>当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。</p>\n<h4 id=\"文本文件的读写\"><a class=\"markdownIt-Anchor\" href=\"#文本文件的读写\"></a> 文本文件的读写</h4>\n<p>类ofstream，ifstream和fstream是分别从ostream，istream和iostream中引申而来的。这就是为什么fstream的对象可以使用其父类的成员来访问数据。</p>\n<p>一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin和cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符&lt;&lt;:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">write</span> <span class=\"keyword\">on</span> a <span class=\"type\">text</span> file</span><br><span class=\"line\"><span class=\"meta\">#include &lt;fstream&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">ofstream <span class=\"keyword\">out</span>(\"out.txt\");</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">out</span>.is_open())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">out</span> &lt;&lt; \"This is a line.\\n\";</span><br><span class=\"line\">\t<span class=\"keyword\">out</span> &lt;&lt; \"This is another line.\\n\";</span><br><span class=\"line\">\t<span class=\"keyword\">out</span>.<span class=\"keyword\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 结果: 在<span class=\"keyword\">out</span>.txt中写入:</span><br><span class=\"line\">This <span class=\"keyword\">is</span> a <span class=\"type\">line</span>.</span><br><span class=\"line\">This <span class=\"keyword\">is</span> another <span class=\"type\">line</span>.</span><br></pre></td></tr></table></figure>\n<p>从文件中读入数据也可以用与cin &gt;&gt; 的使用同样的方法:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rending a text file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"test.txt\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!in.is_open())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error opening\"</span>; <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!in.oof()) &#123;</span><br><span class=\"line\">\t\tin.getline(buffer, <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果 在屏幕上输出</span></span><br><span class=\"line\">This is a line.</span><br><span class=\"line\">This is another line.</span><br></pre></td></tr></table></figure>\n<p>上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof，它是ifstream从类ios中集成过来的，当到达文件末尾时返回true。</p>\n<h3 id=\"状态标识符的验证verification-of-state-flags\"><a class=\"markdownIt-Anchor\" href=\"#状态标识符的验证verification-of-state-flags\"></a> 状态标识符的验证(Verification of state flags)</h3>\n<p>除了eof()以外，还有一些验证流的状态的成员函数(所有都返回bool型返回值)：</p>\n<ul>\n<li>bad()</li>\n</ul>\n<p>如果在读写过程中出错，返回true。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。</p>\n<ul>\n<li>fail()</li>\n</ul>\n<p>除了与bad()同样的情况下会返回true外，加上格式错误时也会返回true，例如当想要读取一个整数，而获得了一个字母的时候。</p>\n<ul>\n<li>eof()</li>\n</ul>\n<p>如果读文件到达文件末尾，返回true。</p>\n<ul>\n<li>good()</li>\n</ul>\n<p>这是最通用的：如果调用以上任何一个函数返回true的话，此函数返回false。</p>\n<p>要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear(),没有函数。</p>\n<h3 id=\"获得和设置流指针get-and-put-stream-pointers\"><a class=\"markdownIt-Anchor\" href=\"#获得和设置流指针get-and-put-stream-pointers\"></a> 获得和设置流指针(get and put stream pointers)</h3>\n<p>所有输入/输出流对象(i/o streams objects)都有至少一个流指针：</p>\n<ul>\n<li>ifstream，类似istream，有一个被称为get pointer的指针，指向下一个将被读取的元素。</li>\n<li>ofstream，类似ostream，有一个指针put pointer，指向写入下一个元素的位置。</li>\n<li>fstream，类似iostream，同时继承了get和put。</li>\n</ul>\n<p>我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：</p>\n<ul>\n<li>tellg()和tellp()</li>\n</ul>\n<p>这两个成员函数不用传入参数，返回pos_type类型的值(根据ANSI-C++标准)，就是一个整数，代表当前get流指针的位置(用tellg)或put流指针的位置(用tellp)。</p>\n<ul>\n<li>seekg()和seekp()</li>\n</ul>\n<p>这对函数分别用来改变流指针get和put的位置。两个函数都被重载为两种不同的原型：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">seekg</span>(pos_<span class=\"keyword\">type</span> position);</span><br><span class=\"line\"><span class=\"title\">seekp</span>(pos_<span class=\"keyword\">type</span> position);</span><br></pre></td></tr></table></figure>\n<p>使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数tellg和tellp的返回值类型相同。</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">seekg</span>(off_<span class=\"keyword\">type</span> offset, seekdir direction);</span><br><span class=\"line\"><span class=\"title\">seekp</span>(off_<span class=\"keyword\">type</span> offset, seekdir direction);</span><br></pre></td></tr></table></figure>\n<p>使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ios::beg</td>\n<td style=\"text-align:left\">从流开始位置计算的位移</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::cur</td>\n<td style=\"text-align:left\">从流指针当前位置开始计算的位移</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::end</td>\n<td style=\"text-align:left\">从流末尾处开始计算的位移</td>\n</tr>\n</tbody>\n</table>\n<p>流指针get 和 put的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg和seekp的第一种原型，而且不要对tellg或tellp的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。</p>\n<p>以下例子使用这些函数来获得一个二进制文件的大小：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename = <span class=\"string\">\"test.txt\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> l,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(filename, ios::in|ios::binary)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">l = in.tellg();</span><br><span class=\"line\">in.seekg(<span class=\"number\">0</span>, ios::end);</span><br><span class=\"line\">m = in.tellg();</span><br><span class=\"line\">in.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of \"</span> &lt;&lt; filename;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is \"</span> &lt;&lt; (m-l) &lt;&lt; <span class=\"string\">\" bytes.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">// size of test.txt is 40 bytes.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二进制文件\"><a class=\"markdownIt-Anchor\" href=\"#二进制文件\"></a> 二进制文件</h3>\n<p>在二进制文件中，使用<code>&lt;&lt;</code>和<code>&gt;&gt;</code>，以及函数(如getline)来操作输入和输出数据，没有什么实际意义，虽然它们是符合语法的。</p>\n<p>文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数(write)是ostream的一个成员函数，都是被ofstream所继承。而read是istream的一个成员函数，被ifstream锁继承。类fstream的对象同时拥有这两个函数。它们的原型是：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">write</span>(<span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>, streamsize <span class=\"built_in\">size</span>);</span><br><span class=\"line\"><span class=\"built_in\">read</span>(<span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>, streamsize <span class=\"built_in\">size</span>);</span><br></pre></td></tr></table></figure>\n<p>这里buffer是一块内存的地址，用来存储或读取数据。参数size是一个整数值，表示要从缓存(buffer)中读出和写入的字符数。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename = <span class=\"string\">\"test.txt\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ifstream in(filename, ios::in|ios::binary|ios::ate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">size</span> = in.tellg();</span><br><span class=\"line\"></span><br><span class=\"line\">in.seekg(<span class=\"number\">0</span>, ios::beg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">size</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">in.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>, <span class=\"built_in\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">in.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">\"the complete file is in a buffer\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存和同步buffer-and-synchronization\"><a class=\"markdownIt-Anchor\" href=\"#缓存和同步buffer-and-synchronization\"></a> 缓存和同步(buffer and synchronization)</h3>\n<p>当我们对文件流进行操作的时候，它们与一个streambuf类型的缓存(buffer)联系在一起。这个缓存(buffer)实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流，每次成员函数put（写一个单个字符）被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存(buffer)中。<br>\n当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中(如果是一个输出流的话)，或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronzization)，它会在以下任一情况下发生：</p>\n<ul>\n<li><strong>当文件被关闭时</strong>：在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。</li>\n<li><strong>当缓存buffer满时</strong>：缓存Buffers有一定的时间空间限制。当缓存满时，它会被自动同步。</li>\n<li><strong>控制符明确指明</strong>：当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush和endl。</li>\n<li><strong>明确调用函数sync()</strong>： 调用成员函数sync()（无参数）可以引发立即同步。这个函数返回一个int值，等于-1表示流没有联系的缓存和操作失败。</li>\n</ul>\n<p>在ios,istream和ostream类中,还定义了若干输入输出函数,它们主要用于错误处理,流的刷新以及流输入输出方式的控制。</p>\n<h4 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\"></a> 错误处理</h4>\n<p>在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，错误的性质被记录在ios类的一个数据成员中。</p>\n<p>ios类中定义的描述错误状态的常量:</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goodbit<span class=\"comment\">-------------没有错误，正常状态　</span></span><br><span class=\"line\">eofbit<span class=\"comment\">--------------到达流的结尾</span></span><br><span class=\"line\">failbit<span class=\"comment\">-------------I/O操作失败，清除状态字后，可以对流继续进行操作。</span></span><br><span class=\"line\">badbit<span class=\"comment\">--------------试图进行非法操作，清除状态字后，流可能还可以使用。</span></span><br><span class=\"line\">hardfail<span class=\"comment\">------------致命错误，不可恢复的错误。</span></span><br></pre></td></tr></table></figure>\n<p>对应于这些位,可用ios中定义的如下函数来检查流的当前状态位:</p>\n <figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> good()<span class=\"comment\">---------如果正常,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> bad()<span class=\"comment\">----------如果badbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> eof()<span class=\"comment\">----------如果eofbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> fail()<span class=\"comment\">---------如果failbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> rdstate()<span class=\"comment\">------返回当前错误状态位.</span></span><br></pre></td></tr></table></figure>\n<p>流的其它成员函数可以从流中读取字符或字符串，对流进行无格式化的输入 输出操作，以及直接控制对流的I/O操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">ostream类的成员</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">put(char ch)</td>\n<td style=\"text-align:left\">向流中输出一个字符ch，不进行任何转换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">write(char*,int)</td>\n<td style=\"text-align:left\">向流中输出指定长度的字符串，不进行转换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">flush()</td>\n<td style=\"text-align:left\">刷新流，输出所有缓冲的但还未输出的数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">seekp(streampos)</td>\n<td style=\"text-align:left\">移动流的当前指针到给定的绝对位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">seekp(sereamoff,seek_dir)</td>\n<td style=\"text-align:left\">流的当前指针类似与文件的当前指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">streampos</td>\n<td style=\"text-align:left\">tellp()</td>\n<td style=\"text-align:left\">返回流的当前指针的绝对位置</td>\n</tr>\n</tbody>\n</table>\n<p>istream类的成员函数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">istream类的成员</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:left\">get()</td>\n<td style=\"text-align:left\">读取并返回一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">get(char &amp;c)</td>\n<td style=\"text-align:left\">读取字符并存入c中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">putback()</td>\n<td style=\"text-align:left\">将最近读取的字符放回流中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">read(char *, int)</td>\n<td style=\"text-align:left\">读取规定长度的字符串到缓冲区中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:left\">peek()</td>\n<td style=\"text-align:left\">返回流中下一个字符，但不移动文件指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">seekg(streampos)</td>\n<td style=\"text-align:left\">移动当前指针到一绝对地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">seekg(streampos, seek_dir)</td>\n<td style=\"text-align:left\">移动当前指针到一相对地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">streampos</td>\n<td style=\"text-align:left\">tellg()</td>\n<td style=\"text-align:left\">返回当前指针</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h2 id=\"c文件读写详解ofstreamifstreamfstream\"><a class=\"markdownIt-Anchor\" href=\"#c文件读写详解ofstreamifstreamfstream\"></a> C++文件读写详解（ofstream,ifstream,fstream）</h2>\n<ul>\n<li><code>#include &lt;fstream&gt;</code></li>\n<li>ostream //文件写操作 内存写入存储设备</li>\n<li>istream // 文件读操作，存储设备读取到内存中</li>\n<li>fstream // 读写操作，对打开的文件可进行读写操作</li>\n</ul>","more":"<h3 id=\"打开文件\"><a class=\"markdownIt-Anchor\" href=\"#打开文件\"></a> 打开文件</h3>\n<p>在fstream类中，成员函数open()实现打开文件的操作，从而将数据流和文件进行关联，通过ofstream，ifstram，fstream对象进行对文件的读写操作</p>\n<h4 id=\"函数open\"><a class=\"markdownIt-Anchor\" href=\"#函数open\"></a> 函数：open()</h4>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> member function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> open(const <span class=\"keyword\">char</span> *filename, <span class=\"string\">ios_base:</span>:openmode mode = <span class=\"string\">ios_base:</span>:<span class=\"keyword\">in</span>|<span class=\"string\">ios_base:</span>:out);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> open(const wchar_t *_Filename, <span class=\"string\">ios_base:</span>:openmode mode = <span class=\"string\">ios_base:</span>:<span class=\"keyword\">in</span> | <span class=\"string\">ios_base:</span>:out, <span class=\"keyword\">int</span> prot = <span class=\"string\">ios_base:</span>:Openprot);</span><br></pre></td></tr></table></figure>\n<p>参数:</p>\n<p>filename 操作文件名</p>\n<p>mode 打开文件的方式</p>\n<p>prot 打开文件的属性\t// 基本很少用到，在查看资料时，发现有两种方式</p>\n<p>打开文件的方式在ios类(所以流式I/O的基类)中定义，有如下几种方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">模式</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ios::in</td>\n<td style=\"text-align:left\">为输入(读取)而打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::out</td>\n<td style=\"text-align:left\">为输出(写)而打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::ate</td>\n<td style=\"text-align:left\">初始位置:文件尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::app</td>\n<td style=\"text-align:left\">所有输出附加在文件末尾</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::trunc</td>\n<td style=\"text-align:left\">如果文件已存在则先删除该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::binary</td>\n<td style=\"text-align:left\">二进制方式</td>\n</tr>\n</tbody>\n</table>\n<p>这些方式是能够进行组合使用的，以&quot;或&quot;运算(&quot;|&quot;)的方式：例如</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ofstream <span class=\"keyword\">out</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">out</span>.<span class=\"keyword\">open</span>(<span class=\"string\">\"hello.txt\"</span>, ios::<span class=\"keyword\">in</span>|ios::<span class=\"keyword\">out</span>|ios::binary); <span class=\"comment\">// 根据自己需要进行适当的选取</span></span><br></pre></td></tr></table></figure>\n<p>打开文件的属性同样在ios类中也有定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:left\">普通文件，打开操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">只读文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">隐含文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">系统文件</td>\n</tr>\n</tbody>\n</table>\n<p>对于文件的属性也可以使用&quot;或&quot;运算和&quot;+&quot;进行组合使用，这里就不做说明了。</p>\n<p>很多程序中，可能会遇到ofstream out(“hello.txt”)，ifstream in(&quot;…&quot;)，fstream foi(&quot;…&quot;) 这样的使用，并没有显式的去调用open()函数就进行文件的操作，直接调用了其默认的打开方式，因为在stream类的构造函数中调用了open()函数，并拥有同样的构造函数，所以在这里可以直接使用流对象进行文件的操作，默认方式如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ostream <span class=\"title\">out</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">out</span></span>)</span>;</span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">in</span></span>)</span>;</span><br><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">foi</span>(<span class=\"params\"><span class=\"string\">\"...\"</span>, ios::<span class=\"keyword\">in</span>|ios::<span class=\"keyword\">out</span></span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>当使用默认方式进行对文件的操作时，你可以使用成员函数is_open()对文件是否打开进行验证</p>\n<h4 id=\"关闭文件\"><a class=\"markdownIt-Anchor\" href=\"#关闭文件\"></a> 关闭文件</h4>\n<p>当文件读写操作完成之后，我们必须将文件关闭以使文件重新变为可访问的。成员函数close()，它负责将缓存中的数据排放出来并关闭文件。</p>\n<h4 id=\"文本文件的读写\"><a class=\"markdownIt-Anchor\" href=\"#文本文件的读写\"></a> 文本文件的读写</h4>\n<p>类ofstream，ifstream和fstream是分别从ostream，istream和iostream中引申而来的。这就是为什么fstream的对象可以使用其父类的成员来访问数据。</p>\n<p>一般来说，我们将使用这些类与同控制台(console)交互同样的成员函数(cin和cout)来进行输入输出。如下面的例题所示，我们使用重载的插入操作符&lt;&lt;:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// <span class=\"keyword\">write</span> <span class=\"keyword\">on</span> a <span class=\"type\">text</span> file</span><br><span class=\"line\"><span class=\"meta\">#include &lt;fstream&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">ofstream <span class=\"keyword\">out</span>(\"out.txt\");</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">out</span>.is_open())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">out</span> &lt;&lt; \"This is a line.\\n\";</span><br><span class=\"line\">\t<span class=\"keyword\">out</span> &lt;&lt; \"This is another line.\\n\";</span><br><span class=\"line\">\t<span class=\"keyword\">out</span>.<span class=\"keyword\">close</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 结果: 在<span class=\"keyword\">out</span>.txt中写入:</span><br><span class=\"line\">This <span class=\"keyword\">is</span> a <span class=\"type\">line</span>.</span><br><span class=\"line\">This <span class=\"keyword\">is</span> another <span class=\"type\">line</span>.</span><br></pre></td></tr></table></figure>\n<p>从文件中读入数据也可以用与cin &gt;&gt; 的使用同样的方法:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rending a text file</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">256</span>];</span><br><span class=\"line\">\t<span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(<span class=\"string\">\"test.txt\"</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!in.is_open())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Error opening\"</span>; <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!in.oof()) &#123;</span><br><span class=\"line\">\t\tin.getline(buffer, <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; buffer &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果 在屏幕上输出</span></span><br><span class=\"line\">This is a line.</span><br><span class=\"line\">This is another line.</span><br></pre></td></tr></table></figure>\n<p>上面的例子读入一个文本文件的内容，然后将它打印到屏幕上。注意我们使用了一个新的成员函数叫做eof，它是ifstream从类ios中集成过来的，当到达文件末尾时返回true。</p>\n<h3 id=\"状态标识符的验证verification-of-state-flags\"><a class=\"markdownIt-Anchor\" href=\"#状态标识符的验证verification-of-state-flags\"></a> 状态标识符的验证(Verification of state flags)</h3>\n<p>除了eof()以外，还有一些验证流的状态的成员函数(所有都返回bool型返回值)：</p>\n<ul>\n<li>bad()</li>\n</ul>\n<p>如果在读写过程中出错，返回true。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。</p>\n<ul>\n<li>fail()</li>\n</ul>\n<p>除了与bad()同样的情况下会返回true外，加上格式错误时也会返回true，例如当想要读取一个整数，而获得了一个字母的时候。</p>\n<ul>\n<li>eof()</li>\n</ul>\n<p>如果读文件到达文件末尾，返回true。</p>\n<ul>\n<li>good()</li>\n</ul>\n<p>这是最通用的：如果调用以上任何一个函数返回true的话，此函数返回false。</p>\n<p>要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear(),没有函数。</p>\n<h3 id=\"获得和设置流指针get-and-put-stream-pointers\"><a class=\"markdownIt-Anchor\" href=\"#获得和设置流指针get-and-put-stream-pointers\"></a> 获得和设置流指针(get and put stream pointers)</h3>\n<p>所有输入/输出流对象(i/o streams objects)都有至少一个流指针：</p>\n<ul>\n<li>ifstream，类似istream，有一个被称为get pointer的指针，指向下一个将被读取的元素。</li>\n<li>ofstream，类似ostream，有一个指针put pointer，指向写入下一个元素的位置。</li>\n<li>fstream，类似iostream，同时继承了get和put。</li>\n</ul>\n<p>我们可以通过使用以下成员函数来读出或配置这些指向流中读写位置的流指针：</p>\n<ul>\n<li>tellg()和tellp()</li>\n</ul>\n<p>这两个成员函数不用传入参数，返回pos_type类型的值(根据ANSI-C++标准)，就是一个整数，代表当前get流指针的位置(用tellg)或put流指针的位置(用tellp)。</p>\n<ul>\n<li>seekg()和seekp()</li>\n</ul>\n<p>这对函数分别用来改变流指针get和put的位置。两个函数都被重载为两种不同的原型：</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">seekg</span>(pos_<span class=\"keyword\">type</span> position);</span><br><span class=\"line\"><span class=\"title\">seekp</span>(pos_<span class=\"keyword\">type</span> position);</span><br></pre></td></tr></table></figure>\n<p>使用这个原型，流指针被改变为指向从文件开始计算的一个绝对位置。要求传入的参数类型与函数tellg和tellp的返回值类型相同。</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">seekg</span>(off_<span class=\"keyword\">type</span> offset, seekdir direction);</span><br><span class=\"line\"><span class=\"title\">seekp</span>(off_<span class=\"keyword\">type</span> offset, seekdir direction);</span><br></pre></td></tr></table></figure>\n<p>使用这个原型可以指定由参数direction决定的一个具体的指针开始计算的一个位移(offset)。它可以是：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ios::beg</td>\n<td style=\"text-align:left\">从流开始位置计算的位移</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::cur</td>\n<td style=\"text-align:left\">从流指针当前位置开始计算的位移</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ios::end</td>\n<td style=\"text-align:left\">从流末尾处开始计算的位移</td>\n</tr>\n</tbody>\n</table>\n<p>流指针get 和 put的值对文本文件(text file)和二进制文件(binary file)的计算方法都是不同的，因为文本模式的文件中某些特殊字符可能被修改。由于这个原因，建议对以文本文件模式打开的文件总是使用seekg和seekp的第一种原型，而且不要对tellg或tellp的返回值进行修改。对二进制文件，你可以任意使用这些函数，应该不会有任何意外的行为产生。</p>\n<p>以下例子使用这些函数来获得一个二进制文件的大小：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename = <span class=\"string\">\"test.txt\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> l,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ifstream <span class=\"title\">in</span><span class=\"params\">(filename, ios::in|ios::binary)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">l = in.tellg();</span><br><span class=\"line\">in.seekg(<span class=\"number\">0</span>, ios::end);</span><br><span class=\"line\">m = in.tellg();</span><br><span class=\"line\">in.close();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"size of \"</span> &lt;&lt; filename;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" is \"</span> &lt;&lt; (m-l) &lt;&lt; <span class=\"string\">\" bytes.\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">// size of test.txt is 40 bytes.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"二进制文件\"><a class=\"markdownIt-Anchor\" href=\"#二进制文件\"></a> 二进制文件</h3>\n<p>在二进制文件中，使用<code>&lt;&lt;</code>和<code>&gt;&gt;</code>，以及函数(如getline)来操作输入和输出数据，没有什么实际意义，虽然它们是符合语法的。</p>\n<p>文件流包括两个为顺序读写数据特殊设计的成员函数：write 和 read。第一个函数(write)是ostream的一个成员函数，都是被ofstream所继承。而read是istream的一个成员函数，被ifstream锁继承。类fstream的对象同时拥有这两个函数。它们的原型是：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">write</span>(<span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>, streamsize <span class=\"built_in\">size</span>);</span><br><span class=\"line\"><span class=\"built_in\">read</span>(<span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>, streamsize <span class=\"built_in\">size</span>);</span><br></pre></td></tr></table></figure>\n<p>这里buffer是一块内存的地址，用来存储或读取数据。参数size是一个整数值，表示要从缓存(buffer)中读出和写入的字符数。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * filename = <span class=\"string\">\"test.txt\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> * <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ifstream in(filename, ios::in|ios::binary|ios::ate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">size</span> = in.tellg();</span><br><span class=\"line\"></span><br><span class=\"line\">in.seekg(<span class=\"number\">0</span>, ios::beg);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">buffer</span> = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"built_in\">size</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">in.<span class=\"built_in\">read</span>(<span class=\"built_in\">buffer</span>, <span class=\"built_in\">size</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">in.<span class=\"built_in\">close</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">\"the complete file is in a buffer\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">delete</span> [] <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存和同步buffer-and-synchronization\"><a class=\"markdownIt-Anchor\" href=\"#缓存和同步buffer-and-synchronization\"></a> 缓存和同步(buffer and synchronization)</h3>\n<p>当我们对文件流进行操作的时候，它们与一个streambuf类型的缓存(buffer)联系在一起。这个缓存(buffer)实际是一块内存空间，作为流(stream)和物理文件的媒介。例如，对于一个输出流，每次成员函数put（写一个单个字符）被调用，这个字符不是直接被写入该输出流所对应的物理文件中的，而是首先被插入到该流的缓存(buffer)中。<br>\n当缓存被排放出来(flush)时，它里面的所有数据或者被写入物理媒质中(如果是一个输出流的话)，或者简单的被抹掉(如果是一个输入流的话)。这个过程称为同步(synchronzization)，它会在以下任一情况下发生：</p>\n<ul>\n<li><strong>当文件被关闭时</strong>：在文件被关闭之前，所有还没有被完全写出或读取的缓存都将被同步。</li>\n<li><strong>当缓存buffer满时</strong>：缓存Buffers有一定的时间空间限制。当缓存满时，它会被自动同步。</li>\n<li><strong>控制符明确指明</strong>：当遇到流中某些特定的控制符时，同步会发生。这些控制符包括：flush和endl。</li>\n<li><strong>明确调用函数sync()</strong>： 调用成员函数sync()（无参数）可以引发立即同步。这个函数返回一个int值，等于-1表示流没有联系的缓存和操作失败。</li>\n</ul>\n<p>在ios,istream和ostream类中,还定义了若干输入输出函数,它们主要用于错误处理,流的刷新以及流输入输出方式的控制。</p>\n<h4 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\"></a> 错误处理</h4>\n<p>在对一个流对象进行I/O操作时，可能会产生错误。当错误发生时，错误的性质被记录在ios类的一个数据成员中。</p>\n<p>ios类中定义的描述错误状态的常量:</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goodbit<span class=\"comment\">-------------没有错误，正常状态　</span></span><br><span class=\"line\">eofbit<span class=\"comment\">--------------到达流的结尾</span></span><br><span class=\"line\">failbit<span class=\"comment\">-------------I/O操作失败，清除状态字后，可以对流继续进行操作。</span></span><br><span class=\"line\">badbit<span class=\"comment\">--------------试图进行非法操作，清除状态字后，流可能还可以使用。</span></span><br><span class=\"line\">hardfail<span class=\"comment\">------------致命错误，不可恢复的错误。</span></span><br></pre></td></tr></table></figure>\n<p>对应于这些位,可用ios中定义的如下函数来检查流的当前状态位:</p>\n <figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> good()<span class=\"comment\">---------如果正常,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> bad()<span class=\"comment\">----------如果badbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> eof()<span class=\"comment\">----------如果eofbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> fail()<span class=\"comment\">---------如果failbit被设置,返回非0值</span></span><br><span class=\"line\"><span class=\"type\">int</span> rdstate()<span class=\"comment\">------返回当前错误状态位.</span></span><br></pre></td></tr></table></figure>\n<p>流的其它成员函数可以从流中读取字符或字符串，对流进行无格式化的输入 输出操作，以及直接控制对流的I/O操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">ostream类的成员</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">put(char ch)</td>\n<td style=\"text-align:left\">向流中输出一个字符ch，不进行任何转换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">write(char*,int)</td>\n<td style=\"text-align:left\">向流中输出指定长度的字符串，不进行转换</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">flush()</td>\n<td style=\"text-align:left\">刷新流，输出所有缓冲的但还未输出的数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">seekp(streampos)</td>\n<td style=\"text-align:left\">移动流的当前指针到给定的绝对位置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ostream&amp;</td>\n<td style=\"text-align:left\">seekp(sereamoff,seek_dir)</td>\n<td style=\"text-align:left\">流的当前指针类似与文件的当前指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">streampos</td>\n<td style=\"text-align:left\">tellp()</td>\n<td style=\"text-align:left\">返回流的当前指针的绝对位置</td>\n</tr>\n</tbody>\n</table>\n<p>istream类的成员函数</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回类型</th>\n<th style=\"text-align:left\">istream类的成员</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:left\">get()</td>\n<td style=\"text-align:left\">读取并返回一个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">get(char &amp;c)</td>\n<td style=\"text-align:left\">读取字符并存入c中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">putback()</td>\n<td style=\"text-align:left\">将最近读取的字符放回流中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">read(char *, int)</td>\n<td style=\"text-align:left\">读取规定长度的字符串到缓冲区中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">in</td>\n<td style=\"text-align:left\">peek()</td>\n<td style=\"text-align:left\">返回流中下一个字符，但不移动文件指针</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">seekg(streampos)</td>\n<td style=\"text-align:left\">移动当前指针到一绝对地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">istream&amp;</td>\n<td style=\"text-align:left\">seekg(streampos, seek_dir)</td>\n<td style=\"text-align:left\">移动当前指针到一相对地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">streampos</td>\n<td style=\"text-align:left\">tellg()</td>\n<td style=\"text-align:left\">返回当前指针</td>\n</tr>\n</tbody>\n</table>"},{"title":"C语言-文件操作","date":"2019-02-18T09:31:11.000Z","_content":"\n文件操作\n\n### fopen\n\nr 以只读方式打开文件， 该文件必须存在\nr+ 以可读方式打开文件，该文件必须存在\nrb+ 读写打开一个二进制文件，允许读写数据，文件必须存在\nrw+ 读写打开一个文本文件，允许读和写\nw \t打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件。\nw+\t打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失，若文件不存在则建立该文件。\n\na \t以追加的方式打开只写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(EOF符保留)\n\na+ \t以追加的方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(原先的EOF符不保留)\n\n### EOF与feof 函数文件结尾\n\n如果已经是文件尾， feof 函数返回true.\nEOF 用于一个字符一个字符输出时，当获取到的字符是EOF(其中EOF真实为-1)，则代表已经是文件尾。\n\n\n<!-- more -->\n\n### fprintf, fscanf, fgets, fputs 函数\n\n这些函数都是通过 FILE * 来对文件进行读写\n\n### stat 函数\n\n```\n#include <sys/stat.h>\n\nint stat(const char* _fileName, struct stat * _stat);\n\n```\n\nstat.st_size; // 文件大小，单位：字节\n\n函数的第一个参数代表文件名， 第二个参数是 struct stat 结构\n得到的文件属性，包括文件建立时间，文件大小等信息。\n\n\n### fread 和 fwrite 函数 \n\n```\nsize_t fread(void *buffer, size_t size, size_t count, FILE * stream);\n\nsize_t fwrite(const void * buffer, size_t size, size_t count, FILE * stream);\n\n```\n\n**注意**：这个函数以二进制形式对文件进行操作，不局限于文本文件\n\n返回值：返回实际写入的数据块数目\n\n\n### fread 与 feof\n\n注意一下两段代码的区别\n\n```\n\twhile(!feof(p))\n\t{\n\t\tfread(&buf, 1, sizeof(buf),p);\n\t}\n\n```\n\n```\n\twhile(fread(&buf, 1, sizeof(buf), p))\n```\n\n### 通过 fwrite 将结构保存到二进制文件中\n\n### fseek 函数\n\n```\nint fseek(FILE * _file, long _offset, int _orgin);\n```\n\n函数设置文件指针 steam的位置。如果执行成功， stream将指向以fromwhere 为基准，偏移offset(指针偏移量) 个字节的位置， 函数返回 0. 如果执行失败则不改变 stream 指向的位置，函数返回一个非0值。\n\n实验得出，超过文件末尾位置，还是返回0，往回偏移超过首位置，还是返回0，请小心使用。\n\n```\n第一个参数， stream为文件指针\n第二个参数， offset 为偏移量，正数表示正向偏移，负数表示负向偏移。\n第三个参数， origin 设定从文件的哪里开始偏移，可能取值为：SEEK_CUR, SEEK_END 或 SEEK_SET。\n\nSEEK_SET: 文件开头\nSEEK_CUR: 当前位置\nSEEK_END: 文件末尾\n```\n\n### ftell 函数\n\n函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。\n\n```\nlong len = ftell(fp);\n```\n\n### fflush 函数\n\nfflush 函数可以将缓冲区中任何未写入的数据写入文件中。\n\n成功返回 0， 失败返回 EOF.\n\n```\nint fflush(FILE * _file);\n```\n\n### remove 函数\n\nremove函数 删除指定文件\n\n```\nint remove(const char * _fileName);\n```\n\n参数filename为指定的要删除的文件名，如果是windows 下文件名与路径可以用反斜杠‘\\’分隔，也可以用斜杠'/'分隔。\n\n\n### rename 函数\n\nrename 函数将指定文件改名\n\n```\nint rename(const char * _oldFilename, const char * _newFilename);\n```\n\n参数oldFilename为指定的要修改的文件名，newFilename 为修改后的文件名，如果是windows 下文件名与路径可以用反斜杠'\\'分隔，也可以用斜杠'/'分隔。\n\n\n\n### 输出错误信息（排错）：\n\n```\ninclude <errno.h>\nstrerror(errno) \n```\n\n\n\n\n```c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main01(){\n\tFILE * p = fopen(\"tfile.txt\", \"w\");// 用写的方式打开一个文件\n\t// 'w' 如果文件不存在，则创建文件，如果文件存在就覆盖\n\tfputs(\"hello world\\n\", p); // 向文件写入一个字符串\n\tfputs(\"aaabbb\\n\", p); // 向文件写入一个字符串\n\tfclose(p); // 关闭这个文件\n\n\treturn 0;\n}\n\n\nint main02(){ // 写文件\n\tFILE * p = fopen(\"tfile.txt\", \"w\");\n\n\tchar s[1024] = { 0 };\n\twhile(1){\n\t\tmemset(s, 0, sizeof(s));\n\t\t//scanf(\"%s\", s);\n\t\tgets(s);\n\t\tif(strcmp(s, \"exit\") == 0){\n\t\t\tbreak; // 如果用户输入的是exit, 那么循环退出\n\t\t}\n\t\tint len = strlen(s);\n\t\ts[len] = '\\n';\n\t\ts[len + 1] = '\\0';\n\t\tfputs(s, p);\n\t}\n\tfclose(p); // 关闭这个文件\n\tprintf(\"complete\\n\");\n\treturn 0;\n}\n\n\nint main03(){ // 读文件\n\tFILE *p = fopen(\"tfile.txt\", \"r\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tprintf(\"%s\", s);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\n\treturn 0;\n}\n\nvoid code(char * s)\n{\n\twhile(*s){\n\t\t(*s)++;\n\t\ts++;\n\t}\n}\n\nint main04(){ // 加密\n\tFILE *p = fopen(\"a.txt\", \"r\");\n\tFILE *pw = fopen(\"b.txt\", \"w\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tcode(s);\n\t\tfputs(s, pw);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\tfclose(pw);\n\n\treturn 0;\n}\n\nvoid decode(char *s)\n{\n\twhile(*s){\n\t\t(*s)--;\n\t\ts++;\n\t}\n}\nint main05(){ // 解密\n\n\tFILE *p = fopen(\"b.txt\", \"r\");\n\tFILE *pw = fopen(\"c.txt\", \"w\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tdecode(s);\n\t\tfputs(s, pw);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\tfclose(pw);\n\treturn 0;\n}\n\n\n\nint main06(){\n\tFILE *p = fopen(\"a.txt\", \"a\");\n\t// 'a' 的含义是，如果文件不存在，那么就创建文件，如果文件存在，就在文件结尾追加数据\n\tif(p == NULL)\n\t{\n\t\tprintf(\"file open fail\\n\");\n\t} else {\n\t\tfputs(\"hello\", p);\n\t\tfclose(p);\n\t}\n\n\tprintf(\"end\\n\");\n}\n\nint main07(){\n\tFILE *fp = fopen(\"a.txt\", \"r\");\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"error\\n\");\n\t} else {\n\t\t//char c = getc(p); // 一次只读一个字符\n\t\tchar c;\n\t\twhile((c = getc(fp))!= EOF)\n\t\t{\n\t\t\tprintf(\"%c\", c);\n\t\t}\n\t\tfclose(fp);\n\t}\n\tprintf(\"end\\n\");\n\n\treturn 0;\n}\n\nint main(){ // 写一个字符\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\tif(p == NULL)\n\t{\n\t\tprintf(\"error\\n\");\n\t} else {\n\t\tputc('a', p);\n\t\tputc('b', p);\n\t\tputc('c', p);\n\n\t\tfclose(p);\n\t}\n\n\treturn 0;\n}\n\n```\n\n\n```\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main01(){\n\tFILE *p = fopen(\"a.txt\", \"r\");\n\twhile(!feof(p))\n\t{\n\t\tchar buf[100] = { 0 };\n\t\t//fgets(buf, sizeof(buf), p);\n\t\t//fscanf(p, \"%s\", buf); // fscanf与scanf用法一致，fscanf是从一个文件读取输入\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tfscanf(p, \"%d + %d = \", &a, &b);\n\t\tprintf(\"a = %d, b = %d\\n\", a, b);\n\n\t}\n\tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\tchar buf[100] = \"hello world\";\n\tint a = 6;\n\tint b = 7;\n\n\t// fprintf(p, \"%s, %d, %d\", buf, a, b); // 和printf功能一样，fprintf将数据输入到文件里面\n\n\tint i;\n\tfor(i = 0; i < 10; i++)\n\t{\n\t\tfprintf(p, \"array[%d] = %d\\n\", i, i);\n\t}\n\n\tfclose(p);\n\n\n\treturn 0;\n}\n```\n\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main01(){\n\tFILE *p = fopen(\"a.txt\", \"rb\"); // 用读二进制的方式打开一个文件\n\twhile(!feof(p))\n\t{\n\t\tchar buf[1024] = {0};\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p); //第一个参数是缓冲区，第二个参数是读取的时候最小单位大小，第三个参数是一次读取几个单位，第四个参数是打开的文件指针。\n\t\t// fread的返回值代表读取了多少记录数\n\t\tint i;\n\t\tfor(i = 0; i < res; i++)\n\t\t{\n\t\t\tprintf(\"buf[%d] = %x\\n\", i, buf[i]);\n\t\t}\n\t\t//printf(\"%s\", buf);\n\t}\n\tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\tFILE *p = fopen(\"a.dat\", \"wb\");\n\tchar buf[1024] = {0};\n\tbuf[0] = 'a';\n\tbuf[1] = 'b';\n\tfwrite(buf, sizeof(char), 10, p);\n\tfclose(p);\n\n\treturn 0;\n}\n\nvoid encode(char *p, size_t n)\n{\n\tsize_t i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tp[i] += 3;\n\t}\n}\n\nvoid decode(char *p, size_t n)\n{\n\tsize_t i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tp[i] -= 3;\n\t}\n}\n\nint main03(){ // 带加密\n\t// FILE *p = fopen(\"m.wmv\", \"rb\");\n\t// FILE *p1 = fopen(\"n.wmv\", \"wb\");\n\tFILE *p = fopen(\"a.txt\", \"rb\");\n\tFILE *p1 = fopen(\"b.txt\", \"wb\");\n\n\tchar buf[1024 * 4];\n\twhile(!feof(p))\n\t{\n\t\tmemset(buf, 0, sizeof(buf));\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p);\n\t\tencode(buf, res);\n\t\tfwrite(buf, sizeof(char), res, p1);\n\t}\n\tfclose(p);\n\tfclose(p1);\n\n\treturn 0;\n}\n\nint main(){ \n\tclock_t c1 = clock();\n\t// 带解密\n\t// FILE *p = fopen(\"m.wmv\", \"rb\");\n\t// FILE *p1 = fopen(\"n.wmv\", \"wb\");\n\tFILE *p = fopen(\"b.txt\", \"rb\");\n\tFILE *p1 = fopen(\"d.txt\", \"wb\");\n\n\tchar buf[1024 * 4];\n\twhile(!feof(p))\n\t{\n\t\tmemset(buf, 0, sizeof(buf));\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p);\n\t\tdecode(buf, res);\n\t\tfwrite(buf, sizeof(char), res, p1);\n\t}\n\tfclose(p);\n\tfclose(p1);\n\tclock_t c2 = clock();\n\tprintf(\"end %ld\\n\", (c2 - c1));\n\n\treturn 0;\n}\n\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nstruct student\n{\n\tchar name[100];\n\tint age;\n};\n\n\nint main01(){\n\n\tstruct student st = {\"刘德华\", 30};\n\tFILE *p = fopen(\"a.dat\", \"wb\");\n\tfwrite(&st, sizeof(st), 1, p);\n\n\tfclose(p);\n\n\treturn 0;\n}\nint main(){\n\tstruct student st = {0};\n\tFILE *p = fopen(\"a.dat\", \"rb\");\n\tfread(&st, sizeof(st), 1, p);\n\tfclose(p);\n\tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nstruct student \n{\n\tchar name[10];\n\tint age;\n};\n\n\nint main01(){\n\n\tstruct student st[10] = { 0 };\n \tint i;\n \tfor(i = 0; i < 10; i++)\n \t{\n \t\tprintf(\"please input name:\");\n \t\tscanf(\"%s\", st[i].name);\n\t\tprintf(\"please input age:\");\n\t\tscanf(\"%d\", &st[i].age);\n \t}\n\n \tFILE *p = fopen(\"a.dat\", \"wb\");\n \tfwrite(st, sizeof(struct student), 10, p);\n \tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\n\tstruct student st = { 0 };\n \t\n \tFILE *p = fopen(\"a.dat\", \"rb\");\n\n \twhile(1)\n \t{\n \t\tmemset(&st, 0, sizeof(struct student));\n \t\tsize_t res = fread(&st, sizeof(struct student), 1, p);\n \t\tif(res == 0){\n \t\t\tbreak;\n \t\t}\n \t\tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n \t}\n\n \tfclose(p);\n\treturn 0;\n}\n\nint main(){ // seek \n\n\tstruct student st = { 0 };\n \t\n \tFILE *p = fopen(\"a.dat\", \"rb\");\n\n \t// 从文件开始位置向后偏移结构student的大小\n \t// fseek(p, sizeof(struct student), SEEK_SET);\n \t// 第二个参数：偏移字节数\n \t// 第三个参数：SEEK_SET, SEEK_CUR, SEEK_END\n\n\tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tfseek(p, -sizeof(struct student), SEEK_CUR);//从当前位置往回偏移\n\n \tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tfseek(p, -sizeof(struct student), SEEK_END);//从文件结尾往回偏移\n\n \tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tprintf(\"ftell = %ld\\n\", ftell(p)); // ftell当前指针在哪一个字节\n\n \tfclose(p);\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <time.h>\n\n\nint main(){\n\n\t\n\tchar *fileName = \"m.wmv\";\n\tstruct stat st = { 0 }; // 定义一个结构，名字叫st\n\tstat(fileName, &st); // 调用完stat函数后，文件相关的信息就保存在了st结构中\n\t//st.st_size 得到文件的大小\n\t// printf(\"%lld\\n\", st.st_size);\n\n\tchar * array = malloc(st.st_size); // 根据文件大小在堆中动态的分配一块内存\n\tclock_t c1 = clock(); //得到系统当前时间，单位毫秒\n\tFILE * p = fopen(fileName, \"rb\");\n\tfread(array, sizeof(char), st.st_size, p);// 相当于一下整个文件放入内存\n\tfclose(p);\n\n\tp = fopen(\"w.wmv\", \"wb\");\n\tfwrite(array, sizeof(char), st.st_size, p); // 将堆中的信息一下都写入文件\n\tfclose(p);\n\tclock_t c2 = clock();\n\n\n\n\tprintf(\"end %ld\\n\", (c2 - c1));\n\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main01(){\n\t\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\n\twhile(1){\n\t\tchar buf[100] = {0};\n\t\tscanf(\"%s\", buf);\n\t\tif(strcmp(\"exit\", buf) == 0){\n\t\t\tbreak;\n\t\t}\n\n\t\tfprintf(p, \"%s\\n\", buf);\n\t\tfflush(p); // fflush 将缓冲区的内容立刻写入文件\n\t\t//优势是，不会因为停电，或者电脑死机等故障导致缓冲区的内容丢失\n\t\t//缺点是，硬盘读写次数增加，导致程序效率低下，同时硬盘寿命变短\n\t}\n\n\tfclose(p);\n\treturn 0;\n}\n\n\nint main02(){ // 删除某个文件\n\n\tremove(\"a.txt\");\n\tprintf(\"end\\n\");\n\n\treturn 0;\n}\n\nint main(){ // 将指定文件改名\n\n\trename(\"c.txt\", \"a.txt\");\n\tprintf(\"end\\n\");\n\treturn 0;\n}\n```","source":"_posts/C语言-文件操作.md","raw":"---\ntitle: C语言-文件操作\ndate: 2019-02-18 17:31:11\ntags: [c, file]\ncategories: c\n---\n\n文件操作\n\n### fopen\n\nr 以只读方式打开文件， 该文件必须存在\nr+ 以可读方式打开文件，该文件必须存在\nrb+ 读写打开一个二进制文件，允许读写数据，文件必须存在\nrw+ 读写打开一个文本文件，允许读和写\nw \t打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件。\nw+\t打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失，若文件不存在则建立该文件。\n\na \t以追加的方式打开只写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(EOF符保留)\n\na+ \t以追加的方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(原先的EOF符不保留)\n\n### EOF与feof 函数文件结尾\n\n如果已经是文件尾， feof 函数返回true.\nEOF 用于一个字符一个字符输出时，当获取到的字符是EOF(其中EOF真实为-1)，则代表已经是文件尾。\n\n\n<!-- more -->\n\n### fprintf, fscanf, fgets, fputs 函数\n\n这些函数都是通过 FILE * 来对文件进行读写\n\n### stat 函数\n\n```\n#include <sys/stat.h>\n\nint stat(const char* _fileName, struct stat * _stat);\n\n```\n\nstat.st_size; // 文件大小，单位：字节\n\n函数的第一个参数代表文件名， 第二个参数是 struct stat 结构\n得到的文件属性，包括文件建立时间，文件大小等信息。\n\n\n### fread 和 fwrite 函数 \n\n```\nsize_t fread(void *buffer, size_t size, size_t count, FILE * stream);\n\nsize_t fwrite(const void * buffer, size_t size, size_t count, FILE * stream);\n\n```\n\n**注意**：这个函数以二进制形式对文件进行操作，不局限于文本文件\n\n返回值：返回实际写入的数据块数目\n\n\n### fread 与 feof\n\n注意一下两段代码的区别\n\n```\n\twhile(!feof(p))\n\t{\n\t\tfread(&buf, 1, sizeof(buf),p);\n\t}\n\n```\n\n```\n\twhile(fread(&buf, 1, sizeof(buf), p))\n```\n\n### 通过 fwrite 将结构保存到二进制文件中\n\n### fseek 函数\n\n```\nint fseek(FILE * _file, long _offset, int _orgin);\n```\n\n函数设置文件指针 steam的位置。如果执行成功， stream将指向以fromwhere 为基准，偏移offset(指针偏移量) 个字节的位置， 函数返回 0. 如果执行失败则不改变 stream 指向的位置，函数返回一个非0值。\n\n实验得出，超过文件末尾位置，还是返回0，往回偏移超过首位置，还是返回0，请小心使用。\n\n```\n第一个参数， stream为文件指针\n第二个参数， offset 为偏移量，正数表示正向偏移，负数表示负向偏移。\n第三个参数， origin 设定从文件的哪里开始偏移，可能取值为：SEEK_CUR, SEEK_END 或 SEEK_SET。\n\nSEEK_SET: 文件开头\nSEEK_CUR: 当前位置\nSEEK_END: 文件末尾\n```\n\n### ftell 函数\n\n函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。\n\n```\nlong len = ftell(fp);\n```\n\n### fflush 函数\n\nfflush 函数可以将缓冲区中任何未写入的数据写入文件中。\n\n成功返回 0， 失败返回 EOF.\n\n```\nint fflush(FILE * _file);\n```\n\n### remove 函数\n\nremove函数 删除指定文件\n\n```\nint remove(const char * _fileName);\n```\n\n参数filename为指定的要删除的文件名，如果是windows 下文件名与路径可以用反斜杠‘\\’分隔，也可以用斜杠'/'分隔。\n\n\n### rename 函数\n\nrename 函数将指定文件改名\n\n```\nint rename(const char * _oldFilename, const char * _newFilename);\n```\n\n参数oldFilename为指定的要修改的文件名，newFilename 为修改后的文件名，如果是windows 下文件名与路径可以用反斜杠'\\'分隔，也可以用斜杠'/'分隔。\n\n\n\n### 输出错误信息（排错）：\n\n```\ninclude <errno.h>\nstrerror(errno) \n```\n\n\n\n\n```c\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main01(){\n\tFILE * p = fopen(\"tfile.txt\", \"w\");// 用写的方式打开一个文件\n\t// 'w' 如果文件不存在，则创建文件，如果文件存在就覆盖\n\tfputs(\"hello world\\n\", p); // 向文件写入一个字符串\n\tfputs(\"aaabbb\\n\", p); // 向文件写入一个字符串\n\tfclose(p); // 关闭这个文件\n\n\treturn 0;\n}\n\n\nint main02(){ // 写文件\n\tFILE * p = fopen(\"tfile.txt\", \"w\");\n\n\tchar s[1024] = { 0 };\n\twhile(1){\n\t\tmemset(s, 0, sizeof(s));\n\t\t//scanf(\"%s\", s);\n\t\tgets(s);\n\t\tif(strcmp(s, \"exit\") == 0){\n\t\t\tbreak; // 如果用户输入的是exit, 那么循环退出\n\t\t}\n\t\tint len = strlen(s);\n\t\ts[len] = '\\n';\n\t\ts[len + 1] = '\\0';\n\t\tfputs(s, p);\n\t}\n\tfclose(p); // 关闭这个文件\n\tprintf(\"complete\\n\");\n\treturn 0;\n}\n\n\nint main03(){ // 读文件\n\tFILE *p = fopen(\"tfile.txt\", \"r\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tprintf(\"%s\", s);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\n\treturn 0;\n}\n\nvoid code(char * s)\n{\n\twhile(*s){\n\t\t(*s)++;\n\t\ts++;\n\t}\n}\n\nint main04(){ // 加密\n\tFILE *p = fopen(\"a.txt\", \"r\");\n\tFILE *pw = fopen(\"b.txt\", \"w\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tcode(s);\n\t\tfputs(s, pw);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\tfclose(pw);\n\n\treturn 0;\n}\n\nvoid decode(char *s)\n{\n\twhile(*s){\n\t\t(*s)--;\n\t\ts++;\n\t}\n}\nint main05(){ // 解密\n\n\tFILE *p = fopen(\"b.txt\", \"r\");\n\tFILE *pw = fopen(\"c.txt\", \"w\");\n\tchar s[1024] = {0};\n\t//feof(p); // 如果已经到了文件结尾，函数返回真\n\twhile(!feof(p)){ // 如果没有到文件结尾，那么就一直循环\n\t\tmemset(s, 0, sizeof(s));\n\t\tfgets(s, sizeof(s), p);\n\t\tdecode(s);\n\t\tfputs(s, pw);\n\t}\n\t//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针\n\t//printf(\"%s\\n\", s);\n\tfclose(p);\n\tfclose(pw);\n\treturn 0;\n}\n\n\n\nint main06(){\n\tFILE *p = fopen(\"a.txt\", \"a\");\n\t// 'a' 的含义是，如果文件不存在，那么就创建文件，如果文件存在，就在文件结尾追加数据\n\tif(p == NULL)\n\t{\n\t\tprintf(\"file open fail\\n\");\n\t} else {\n\t\tfputs(\"hello\", p);\n\t\tfclose(p);\n\t}\n\n\tprintf(\"end\\n\");\n}\n\nint main07(){\n\tFILE *fp = fopen(\"a.txt\", \"r\");\n\tif(fp == NULL)\n\t{\n\t\tprintf(\"error\\n\");\n\t} else {\n\t\t//char c = getc(p); // 一次只读一个字符\n\t\tchar c;\n\t\twhile((c = getc(fp))!= EOF)\n\t\t{\n\t\t\tprintf(\"%c\", c);\n\t\t}\n\t\tfclose(fp);\n\t}\n\tprintf(\"end\\n\");\n\n\treturn 0;\n}\n\nint main(){ // 写一个字符\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\tif(p == NULL)\n\t{\n\t\tprintf(\"error\\n\");\n\t} else {\n\t\tputc('a', p);\n\t\tputc('b', p);\n\t\tputc('c', p);\n\n\t\tfclose(p);\n\t}\n\n\treturn 0;\n}\n\n```\n\n\n```\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main01(){\n\tFILE *p = fopen(\"a.txt\", \"r\");\n\twhile(!feof(p))\n\t{\n\t\tchar buf[100] = { 0 };\n\t\t//fgets(buf, sizeof(buf), p);\n\t\t//fscanf(p, \"%s\", buf); // fscanf与scanf用法一致，fscanf是从一个文件读取输入\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tfscanf(p, \"%d + %d = \", &a, &b);\n\t\tprintf(\"a = %d, b = %d\\n\", a, b);\n\n\t}\n\tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\tchar buf[100] = \"hello world\";\n\tint a = 6;\n\tint b = 7;\n\n\t// fprintf(p, \"%s, %d, %d\", buf, a, b); // 和printf功能一样，fprintf将数据输入到文件里面\n\n\tint i;\n\tfor(i = 0; i < 10; i++)\n\t{\n\t\tfprintf(p, \"array[%d] = %d\\n\", i, i);\n\t}\n\n\tfclose(p);\n\n\n\treturn 0;\n}\n```\n\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n\nint main01(){\n\tFILE *p = fopen(\"a.txt\", \"rb\"); // 用读二进制的方式打开一个文件\n\twhile(!feof(p))\n\t{\n\t\tchar buf[1024] = {0};\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p); //第一个参数是缓冲区，第二个参数是读取的时候最小单位大小，第三个参数是一次读取几个单位，第四个参数是打开的文件指针。\n\t\t// fread的返回值代表读取了多少记录数\n\t\tint i;\n\t\tfor(i = 0; i < res; i++)\n\t\t{\n\t\t\tprintf(\"buf[%d] = %x\\n\", i, buf[i]);\n\t\t}\n\t\t//printf(\"%s\", buf);\n\t}\n\tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\tFILE *p = fopen(\"a.dat\", \"wb\");\n\tchar buf[1024] = {0};\n\tbuf[0] = 'a';\n\tbuf[1] = 'b';\n\tfwrite(buf, sizeof(char), 10, p);\n\tfclose(p);\n\n\treturn 0;\n}\n\nvoid encode(char *p, size_t n)\n{\n\tsize_t i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tp[i] += 3;\n\t}\n}\n\nvoid decode(char *p, size_t n)\n{\n\tsize_t i;\n\tfor(i = 0; i < n; i++)\n\t{\n\t\tp[i] -= 3;\n\t}\n}\n\nint main03(){ // 带加密\n\t// FILE *p = fopen(\"m.wmv\", \"rb\");\n\t// FILE *p1 = fopen(\"n.wmv\", \"wb\");\n\tFILE *p = fopen(\"a.txt\", \"rb\");\n\tFILE *p1 = fopen(\"b.txt\", \"wb\");\n\n\tchar buf[1024 * 4];\n\twhile(!feof(p))\n\t{\n\t\tmemset(buf, 0, sizeof(buf));\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p);\n\t\tencode(buf, res);\n\t\tfwrite(buf, sizeof(char), res, p1);\n\t}\n\tfclose(p);\n\tfclose(p1);\n\n\treturn 0;\n}\n\nint main(){ \n\tclock_t c1 = clock();\n\t// 带解密\n\t// FILE *p = fopen(\"m.wmv\", \"rb\");\n\t// FILE *p1 = fopen(\"n.wmv\", \"wb\");\n\tFILE *p = fopen(\"b.txt\", \"rb\");\n\tFILE *p1 = fopen(\"d.txt\", \"wb\");\n\n\tchar buf[1024 * 4];\n\twhile(!feof(p))\n\t{\n\t\tmemset(buf, 0, sizeof(buf));\n\t\tsize_t res = fread(buf, sizeof(char), sizeof(buf), p);\n\t\tdecode(buf, res);\n\t\tfwrite(buf, sizeof(char), res, p1);\n\t}\n\tfclose(p);\n\tfclose(p1);\n\tclock_t c2 = clock();\n\tprintf(\"end %ld\\n\", (c2 - c1));\n\n\treturn 0;\n}\n\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nstruct student\n{\n\tchar name[100];\n\tint age;\n};\n\n\nint main01(){\n\n\tstruct student st = {\"刘德华\", 30};\n\tFILE *p = fopen(\"a.dat\", \"wb\");\n\tfwrite(&st, sizeof(st), 1, p);\n\n\tfclose(p);\n\n\treturn 0;\n}\nint main(){\n\tstruct student st = {0};\n\tFILE *p = fopen(\"a.dat\", \"rb\");\n\tfread(&st, sizeof(st), 1, p);\n\tfclose(p);\n\tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nstruct student \n{\n\tchar name[10];\n\tint age;\n};\n\n\nint main01(){\n\n\tstruct student st[10] = { 0 };\n \tint i;\n \tfor(i = 0; i < 10; i++)\n \t{\n \t\tprintf(\"please input name:\");\n \t\tscanf(\"%s\", st[i].name);\n\t\tprintf(\"please input age:\");\n\t\tscanf(\"%d\", &st[i].age);\n \t}\n\n \tFILE *p = fopen(\"a.dat\", \"wb\");\n \tfwrite(st, sizeof(struct student), 10, p);\n \tfclose(p);\n\treturn 0;\n}\n\nint main02(){\n\n\tstruct student st = { 0 };\n \t\n \tFILE *p = fopen(\"a.dat\", \"rb\");\n\n \twhile(1)\n \t{\n \t\tmemset(&st, 0, sizeof(struct student));\n \t\tsize_t res = fread(&st, sizeof(struct student), 1, p);\n \t\tif(res == 0){\n \t\t\tbreak;\n \t\t}\n \t\tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n \t}\n\n \tfclose(p);\n\treturn 0;\n}\n\nint main(){ // seek \n\n\tstruct student st = { 0 };\n \t\n \tFILE *p = fopen(\"a.dat\", \"rb\");\n\n \t// 从文件开始位置向后偏移结构student的大小\n \t// fseek(p, sizeof(struct student), SEEK_SET);\n \t// 第二个参数：偏移字节数\n \t// 第三个参数：SEEK_SET, SEEK_CUR, SEEK_END\n\n\tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tfseek(p, -sizeof(struct student), SEEK_CUR);//从当前位置往回偏移\n\n \tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tfseek(p, -sizeof(struct student), SEEK_END);//从文件结尾往回偏移\n\n \tmemset(&st, 0, sizeof(struct student));\n \tfread(&st, sizeof(struct student), 1, p);\n \tprintf(\"name = %s, age = %d\\n\", st.name, st.age);\n\n \tprintf(\"ftell = %ld\\n\", ftell(p)); // ftell当前指针在哪一个字节\n\n \tfclose(p);\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <time.h>\n\n\nint main(){\n\n\t\n\tchar *fileName = \"m.wmv\";\n\tstruct stat st = { 0 }; // 定义一个结构，名字叫st\n\tstat(fileName, &st); // 调用完stat函数后，文件相关的信息就保存在了st结构中\n\t//st.st_size 得到文件的大小\n\t// printf(\"%lld\\n\", st.st_size);\n\n\tchar * array = malloc(st.st_size); // 根据文件大小在堆中动态的分配一块内存\n\tclock_t c1 = clock(); //得到系统当前时间，单位毫秒\n\tFILE * p = fopen(fileName, \"rb\");\n\tfread(array, sizeof(char), st.st_size, p);// 相当于一下整个文件放入内存\n\tfclose(p);\n\n\tp = fopen(\"w.wmv\", \"wb\");\n\tfwrite(array, sizeof(char), st.st_size, p); // 将堆中的信息一下都写入文件\n\tfclose(p);\n\tclock_t c2 = clock();\n\n\n\n\tprintf(\"end %ld\\n\", (c2 - c1));\n\n\treturn 0;\n}\n```\n\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main01(){\n\t\n\tFILE *p = fopen(\"a.txt\", \"w\");\n\n\twhile(1){\n\t\tchar buf[100] = {0};\n\t\tscanf(\"%s\", buf);\n\t\tif(strcmp(\"exit\", buf) == 0){\n\t\t\tbreak;\n\t\t}\n\n\t\tfprintf(p, \"%s\\n\", buf);\n\t\tfflush(p); // fflush 将缓冲区的内容立刻写入文件\n\t\t//优势是，不会因为停电，或者电脑死机等故障导致缓冲区的内容丢失\n\t\t//缺点是，硬盘读写次数增加，导致程序效率低下，同时硬盘寿命变短\n\t}\n\n\tfclose(p);\n\treturn 0;\n}\n\n\nint main02(){ // 删除某个文件\n\n\tremove(\"a.txt\");\n\tprintf(\"end\\n\");\n\n\treturn 0;\n}\n\nint main(){ // 将指定文件改名\n\n\trename(\"c.txt\", \"a.txt\");\n\tprintf(\"end\\n\");\n\treturn 0;\n}\n```","slug":"C语言-文件操作","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi000bksifykyjr1ov4","content":"<p>文件操作</p>\n<h3 id=\"fopen\"><a class=\"markdownIt-Anchor\" href=\"#fopen\"></a> fopen</h3>\n<p>r 以只读方式打开文件， 该文件必须存在<br>\nr+ 以可读方式打开文件，该文件必须存在<br>\nrb+ 读写打开一个二进制文件，允许读写数据，文件必须存在<br>\nrw+ 读写打开一个文本文件，允许读和写<br>\nw \t打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件。<br>\nw+\t打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失，若文件不存在则建立该文件。</p>\n<p>a \t以追加的方式打开只写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(EOF符保留)</p>\n<p>a+ \t以追加的方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(原先的EOF符不保留)</p>\n<h3 id=\"eof与feof-函数文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#eof与feof-函数文件结尾\"></a> EOF与feof 函数文件结尾</h3>\n<p>如果已经是文件尾， feof 函数返回true.<br>\nEOF 用于一个字符一个字符输出时，当获取到的字符是EOF(其中EOF真实为-1)，则代表已经是文件尾。</p>\n<a id=\"more\"></a>\n<h3 id=\"fprintf-fscanf-fgets-fputs-函数\"><a class=\"markdownIt-Anchor\" href=\"#fprintf-fscanf-fgets-fputs-函数\"></a> fprintf, fscanf, fgets, fputs 函数</h3>\n<p>这些函数都是通过 FILE * 来对文件进行读写</p>\n<h3 id=\"stat-函数\"><a class=\"markdownIt-Anchor\" href=\"#stat-函数\"></a> stat 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* _fileName, struct stat * _stat)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>stat.st_size; // 文件大小，单位：字节</p>\n<p>函数的第一个参数代表文件名， 第二个参数是 struct stat 结构<br>\n得到的文件属性，包括文件建立时间，文件大小等信息。</p>\n<h3 id=\"fread-和-fwrite-函数\"><a class=\"markdownIt-Anchor\" href=\"#fread-和-fwrite-函数\"></a> fread 和 fwrite 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> fread(<span class=\"keyword\">void</span> *buffer, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">size_t</span> count, FILE * stream);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">size_t</span> fwrite(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * buffer, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">size_t</span> count, FILE * stream);</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：这个函数以二进制形式对文件进行操作，不局限于文本文件</p>\n<p>返回值：返回实际写入的数据块数目</p>\n<h3 id=\"fread-与-feof\"><a class=\"markdownIt-Anchor\" href=\"#fread-与-feof\"></a> fread 与 feof</h3>\n<p>注意一下两段代码的区别</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span><span class=\"comment\">(!feof(p)</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfread<span class=\"comment\">(&amp;buf, 1, sizeof(buf)</span>,p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(<span class=\"name\">fread</span>(<span class=\"name\">&amp;buf</span>, <span class=\"number\">1</span>, sizeof(<span class=\"name\">buf</span>), p))</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过-fwrite-将结构保存到二进制文件中\"><a class=\"markdownIt-Anchor\" href=\"#通过-fwrite-将结构保存到二进制文件中\"></a> 通过 fwrite 将结构保存到二进制文件中</h3>\n<h3 id=\"fseek-函数\"><a class=\"markdownIt-Anchor\" href=\"#fseek-函数\"></a> fseek 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fseek</span><span class=\"params\">(FILE * _file, <span class=\"keyword\">long</span> _offset, <span class=\"keyword\">int</span> _orgin)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>函数设置文件指针 steam的位置。如果执行成功， stream将指向以fromwhere 为基准，偏移offset(指针偏移量) 个字节的位置， 函数返回 0. 如果执行失败则不改变 stream 指向的位置，函数返回一个非0值。</p>\n<p>实验得出，超过文件末尾位置，还是返回0，往回偏移超过首位置，还是返回0，请小心使用。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个参数， stream为文件指针</span><br><span class=\"line\">第二个参数， offset 为偏移量，正数表示正向偏移，负数表示负向偏移。</span><br><span class=\"line\">第三个参数， origin 设定从文件的哪里开始偏移，可能取值为：SEEK_CUR, SEEK_END 或 SEEK_SET。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">SEEK_SET:</span> 文件开头</span><br><span class=\"line\"><span class=\"symbol\">SEEK_CUR:</span> 当前位置</span><br><span class=\"line\"><span class=\"symbol\">SEEK_END:</span> 文件末尾</span><br></pre></td></tr></table></figure>\n<h3 id=\"ftell-函数\"><a class=\"markdownIt-Anchor\" href=\"#ftell-函数\"></a> ftell 函数</h3>\n<p>函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">long len</span> = ftell(fp);</span><br></pre></td></tr></table></figure>\n<h3 id=\"fflush-函数\"><a class=\"markdownIt-Anchor\" href=\"#fflush-函数\"></a> fflush 函数</h3>\n<p>fflush 函数可以将缓冲区中任何未写入的数据写入文件中。</p>\n<p>成功返回 0， 失败返回 EOF.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fflush</span><span class=\"params\">(FILE * _file)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove-函数\"><a class=\"markdownIt-Anchor\" href=\"#remove-函数\"></a> remove 函数</h3>\n<p>remove函数 删除指定文件</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _fileName)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数filename为指定的要删除的文件名，如果是windows 下文件名与路径可以用反斜杠‘\\’分隔，也可以用斜杠’/'分隔。</p>\n<h3 id=\"rename-函数\"><a class=\"markdownIt-Anchor\" href=\"#rename-函数\"></a> rename 函数</h3>\n<p>rename 函数将指定文件改名</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rename</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _oldFilename, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _newFilename)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数oldFilename为指定的要修改的文件名，newFilename 为修改后的文件名，如果是windows 下文件名与路径可以用反斜杠’‘分隔，也可以用斜杠’/'分隔。</p>\n<h3 id=\"输出错误信息排错\"><a class=\"markdownIt-Anchor\" href=\"#输出错误信息排错\"></a> 输出错误信息（排错）：</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;errno.h&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">strerror</span><span class=\"params\">(errno)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE * p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"w\"</span>);<span class=\"comment\">// 用写的方式打开一个文件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 'w' 如果文件不存在，则创建文件，如果文件存在就覆盖</span></span><br><span class=\"line\">\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"hello world\\n\"</span>, p); <span class=\"comment\">// 向文件写入一个字符串</span></span><br><span class=\"line\">\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"aaabbb\\n\"</span>, p); <span class=\"comment\">// 向文件写入一个字符串</span></span><br><span class=\"line\">\tfclose(p); <span class=\"comment\">// 关闭这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 写文件</span></span><br><span class=\"line\">\tFILE * p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\t<span class=\"comment\">//scanf(\"%s\", s);</span></span><br><span class=\"line\">\t\tgets(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"exit\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// 如果用户输入的是exit, 那么循环退出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t\ts[len] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t\ts[len + <span class=\"number\">1</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p); <span class=\"comment\">// 关闭这个文件</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"complete\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main03</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">(<span class=\"keyword\">char</span> * s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">\t\t(*s)++;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main04</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 加密</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\tFILE *pw = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\tcode(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, pw);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(pw);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">\t\t(*s)--;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main05</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 解密</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\tFILE *pw = fopen(<span class=\"string\">\"c.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\tdecode(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, pw);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(pw);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main06</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 'a' 的含义是，如果文件不存在，那么就创建文件，如果文件存在，就在文件结尾追加数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"file open fail\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"hello\"</span>, p);</span><br><span class=\"line\">\t\tfclose(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main07</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"error\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//char c = getc(p); // 一次只读一个字符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((c = getc(fp))!= EOF)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, c);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 写一个字符</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"error\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'a'</span>, p);</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'b'</span>, p);</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'c'</span>, p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfclose(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//fgets(buf, sizeof(buf), p);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//fscanf(p, \"%s\", buf); // fscanf与scanf用法一致，fscanf是从一个文件读取输入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fscanf</span>(p, <span class=\"string\">\"%d + %d = \"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// fprintf(p, \"%s, %d, %d\", buf, a, b); // 和printf功能一样，fprintf将数据输入到文件里面</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(p, <span class=\"string\">\"array[%d] = %d\\n\"</span>, i, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"rb\"</span>); <span class=\"comment\">// 用读二进制的方式打开一个文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p); <span class=\"comment\">//第一个参数是缓冲区，第二个参数是读取的时候最小单位大小，第三个参数是一次读取几个单位，第四个参数是打开的文件指针。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// fread的返回值代表读取了多少记录数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; res; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"buf[%d] = %x\\n\"</span>, i, buf[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//printf(\"%s\", buf);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tbuf[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\tbuf[<span class=\"number\">1</span>] = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"number\">10</span>, p);</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(<span class=\"keyword\">char</span> *p, <span class=\"keyword\">size_t</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i] += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *p, <span class=\"keyword\">size_t</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i] -= <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main03</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 带加密</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p = fopen(\"m.wmv\", \"rb\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p1 = fopen(\"n.wmv\", \"wb\");</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tFILE *p1 = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p);</span><br><span class=\"line\">\t\tencode(buf, res);</span><br><span class=\"line\">\t\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), res, p1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c1 = clock();</span><br><span class=\"line\">\t<span class=\"comment\">// 带解密</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p = fopen(\"m.wmv\", \"rb\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p1 = fopen(\"n.wmv\", \"wb\");</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tFILE *p1 = fopen(<span class=\"string\">\"d.txt\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p);</span><br><span class=\"line\">\t\tdecode(buf, res);</span><br><span class=\"line\">\t\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), res, p1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(p1);</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c2 = clock();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end %ld\\n\"</span>, (c2 - c1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span><span class=\"string\">\"刘德华\"</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\tfwrite(&amp;st, <span class=\"keyword\">sizeof</span>(st), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span><span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tfread(&amp;st, <span class=\"keyword\">sizeof</span>(st), <span class=\"number\">1</span>, p);</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span>[10] = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"please input name:\"</span>);</span><br><span class=\"line\"> \t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, st[i].name);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"please input age:\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;st[i].age);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"> \tfwrite(st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">10</span>, p);</span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">size_t</span> res = fread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// seek </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"comment\">// 从文件开始位置向后偏移结构student的大小</span></span><br><span class=\"line\"> \t<span class=\"comment\">// fseek(p, sizeof(struct student), SEEK_SET);</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 第二个参数：偏移字节数</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 第三个参数：SEEK_SET, SEEK_CUR, SEEK_END</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfseek(p, -<span class=\"keyword\">sizeof</span>(struct student), SEEK_CUR);<span class=\"comment\">//从当前位置往回偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfseek(p, -<span class=\"keyword\">sizeof</span>(struct student), SEEK_END);<span class=\"comment\">//从文件结尾往回偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"ftell = %ld\\n\"</span>, ftell(p)); <span class=\"comment\">// ftell当前指针在哪一个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *fileName = <span class=\"string\">\"m.wmv\"</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;; <span class=\"comment\">// 定义一个结构，名字叫st</span></span><br><span class=\"line\">\tstat(fileName, &amp;st); <span class=\"comment\">// 调用完stat函数后，文件相关的信息就保存在了st结构中</span></span><br><span class=\"line\">\t<span class=\"comment\">//st.st_size 得到文件的大小</span></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"%lld\\n\", st.st_size);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * <span class=\"built_in\">array</span> = <span class=\"built_in\">malloc</span>(st.st_size); <span class=\"comment\">// 根据文件大小在堆中动态的分配一块内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c1 = clock(); <span class=\"comment\">//得到系统当前时间，单位毫秒</span></span><br><span class=\"line\">\tFILE * p = fopen(fileName, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tfread(<span class=\"built_in\">array</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), st.st_size, p);<span class=\"comment\">// 相当于一下整个文件放入内存</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tp = fopen(<span class=\"string\">\"w.wmv\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\tfwrite(<span class=\"built_in\">array</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), st.st_size, p); <span class=\"comment\">// 将堆中的信息一下都写入文件</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c2 = clock();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end %ld\\n\"</span>, (c2 - c1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, buf);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(<span class=\"string\">\"exit\"</span>, buf) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(p, <span class=\"string\">\"%s\\n\"</span>, buf);</span><br><span class=\"line\">\t\tfflush(p); <span class=\"comment\">// fflush 将缓冲区的内容立刻写入文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//优势是，不会因为停电，或者电脑死机等故障导致缓冲区的内容丢失</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//缺点是，硬盘读写次数增加，导致程序效率低下，同时硬盘寿命变短</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 删除某个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tremove(<span class=\"string\">\"a.txt\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 将指定文件改名</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trename(<span class=\"string\">\"c.txt\"</span>, <span class=\"string\">\"a.txt\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>文件操作</p>\n<h3 id=\"fopen\"><a class=\"markdownIt-Anchor\" href=\"#fopen\"></a> fopen</h3>\n<p>r 以只读方式打开文件， 该文件必须存在<br>\nr+ 以可读方式打开文件，该文件必须存在<br>\nrb+ 读写打开一个二进制文件，允许读写数据，文件必须存在<br>\nrw+ 读写打开一个文本文件，允许读和写<br>\nw \t打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失，若文件不存在则建立该文件。<br>\nw+\t打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失，若文件不存在则建立该文件。</p>\n<p>a \t以追加的方式打开只写文件，若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(EOF符保留)</p>\n<p>a+ \t以追加的方式打开可读写的文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被追加到文件末尾，即文件原先的内容不会被覆盖。(原先的EOF符不保留)</p>\n<h3 id=\"eof与feof-函数文件结尾\"><a class=\"markdownIt-Anchor\" href=\"#eof与feof-函数文件结尾\"></a> EOF与feof 函数文件结尾</h3>\n<p>如果已经是文件尾， feof 函数返回true.<br>\nEOF 用于一个字符一个字符输出时，当获取到的字符是EOF(其中EOF真实为-1)，则代表已经是文件尾。</p>","more":"<h3 id=\"fprintf-fscanf-fgets-fputs-函数\"><a class=\"markdownIt-Anchor\" href=\"#fprintf-fscanf-fgets-fputs-函数\"></a> fprintf, fscanf, fgets, fputs 函数</h3>\n<p>这些函数都是通过 FILE * 来对文件进行读写</p>\n<h3 id=\"stat-函数\"><a class=\"markdownIt-Anchor\" href=\"#stat-函数\"></a> stat 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stat</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* _fileName, struct stat * _stat)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>stat.st_size; // 文件大小，单位：字节</p>\n<p>函数的第一个参数代表文件名， 第二个参数是 struct stat 结构<br>\n得到的文件属性，包括文件建立时间，文件大小等信息。</p>\n<h3 id=\"fread-和-fwrite-函数\"><a class=\"markdownIt-Anchor\" href=\"#fread-和-fwrite-函数\"></a> fread 和 fwrite 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> fread(<span class=\"keyword\">void</span> *buffer, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">size_t</span> count, FILE * stream);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">size_t</span> fwrite(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * buffer, <span class=\"keyword\">size_t</span> size, <span class=\"keyword\">size_t</span> count, FILE * stream);</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：这个函数以二进制形式对文件进行操作，不局限于文本文件</p>\n<p>返回值：返回实际写入的数据块数目</p>\n<h3 id=\"fread-与-feof\"><a class=\"markdownIt-Anchor\" href=\"#fread-与-feof\"></a> fread 与 feof</h3>\n<p>注意一下两段代码的区别</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span><span class=\"comment\">(!feof(p)</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tfread<span class=\"comment\">(&amp;buf, 1, sizeof(buf)</span>,p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while(<span class=\"name\">fread</span>(<span class=\"name\">&amp;buf</span>, <span class=\"number\">1</span>, sizeof(<span class=\"name\">buf</span>), p))</span><br></pre></td></tr></table></figure>\n<h3 id=\"通过-fwrite-将结构保存到二进制文件中\"><a class=\"markdownIt-Anchor\" href=\"#通过-fwrite-将结构保存到二进制文件中\"></a> 通过 fwrite 将结构保存到二进制文件中</h3>\n<h3 id=\"fseek-函数\"><a class=\"markdownIt-Anchor\" href=\"#fseek-函数\"></a> fseek 函数</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fseek</span><span class=\"params\">(FILE * _file, <span class=\"keyword\">long</span> _offset, <span class=\"keyword\">int</span> _orgin)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>函数设置文件指针 steam的位置。如果执行成功， stream将指向以fromwhere 为基准，偏移offset(指针偏移量) 个字节的位置， 函数返回 0. 如果执行失败则不改变 stream 指向的位置，函数返回一个非0值。</p>\n<p>实验得出，超过文件末尾位置，还是返回0，往回偏移超过首位置，还是返回0，请小心使用。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个参数， stream为文件指针</span><br><span class=\"line\">第二个参数， offset 为偏移量，正数表示正向偏移，负数表示负向偏移。</span><br><span class=\"line\">第三个参数， origin 设定从文件的哪里开始偏移，可能取值为：SEEK_CUR, SEEK_END 或 SEEK_SET。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">SEEK_SET:</span> 文件开头</span><br><span class=\"line\"><span class=\"symbol\">SEEK_CUR:</span> 当前位置</span><br><span class=\"line\"><span class=\"symbol\">SEEK_END:</span> 文件末尾</span><br></pre></td></tr></table></figure>\n<h3 id=\"ftell-函数\"><a class=\"markdownIt-Anchor\" href=\"#ftell-函数\"></a> ftell 函数</h3>\n<p>函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。在随机方式存取文件时，由于文件位置频繁的前后移动，程序不容易确定文件的当前位置。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">long len</span> = ftell(fp);</span><br></pre></td></tr></table></figure>\n<h3 id=\"fflush-函数\"><a class=\"markdownIt-Anchor\" href=\"#fflush-函数\"></a> fflush 函数</h3>\n<p>fflush 函数可以将缓冲区中任何未写入的数据写入文件中。</p>\n<p>成功返回 0， 失败返回 EOF.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fflush</span><span class=\"params\">(FILE * _file)</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove-函数\"><a class=\"markdownIt-Anchor\" href=\"#remove-函数\"></a> remove 函数</h3>\n<p>remove函数 删除指定文件</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _fileName)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数filename为指定的要删除的文件名，如果是windows 下文件名与路径可以用反斜杠‘\\’分隔，也可以用斜杠’/'分隔。</p>\n<h3 id=\"rename-函数\"><a class=\"markdownIt-Anchor\" href=\"#rename-函数\"></a> rename 函数</h3>\n<p>rename 函数将指定文件改名</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rename</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _oldFilename, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _newFilename)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>参数oldFilename为指定的要修改的文件名，newFilename 为修改后的文件名，如果是windows 下文件名与路径可以用反斜杠’‘分隔，也可以用斜杠’/'分隔。</p>\n<h3 id=\"输出错误信息排错\"><a class=\"markdownIt-Anchor\" href=\"#输出错误信息排错\"></a> 输出错误信息（排错）：</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;errno.h&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">strerror</span><span class=\"params\">(errno)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE * p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"w\"</span>);<span class=\"comment\">// 用写的方式打开一个文件</span></span><br><span class=\"line\">\t<span class=\"comment\">// 'w' 如果文件不存在，则创建文件，如果文件存在就覆盖</span></span><br><span class=\"line\">\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"hello world\\n\"</span>, p); <span class=\"comment\">// 向文件写入一个字符串</span></span><br><span class=\"line\">\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"aaabbb\\n\"</span>, p); <span class=\"comment\">// 向文件写入一个字符串</span></span><br><span class=\"line\">\tfclose(p); <span class=\"comment\">// 关闭这个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 写文件</span></span><br><span class=\"line\">\tFILE * p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\t<span class=\"comment\">//scanf(\"%s\", s);</span></span><br><span class=\"line\">\t\tgets(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(s, <span class=\"string\">\"exit\"</span>) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>; <span class=\"comment\">// 如果用户输入的是exit, 那么循环退出</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t\ts[len] = <span class=\"string\">'\\n'</span>;</span><br><span class=\"line\">\t\ts[len + <span class=\"number\">1</span>] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p); <span class=\"comment\">// 关闭这个文件</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"complete\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main03</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 读文件</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"tfile.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, s);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">code</span><span class=\"params\">(<span class=\"keyword\">char</span> * s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">\t\t(*s)++;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main04</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 加密</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\tFILE *pw = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\tcode(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, pw);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(pw);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*s)&#123;</span><br><span class=\"line\">\t\t(*s)--;</span><br><span class=\"line\">\t\ts++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main05</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 解密</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\tFILE *pw = fopen(<span class=\"string\">\"c.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> s[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//feof(p); // 如果已经到了文件结尾，函数返回真</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))&#123; <span class=\"comment\">// 如果没有到文件结尾，那么就一直循环</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">\t\tfgets(s, <span class=\"keyword\">sizeof</span>(s), p);</span><br><span class=\"line\">\t\tdecode(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(s, pw);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fgets(s, sizeof(s), p); // 第一个参数是一个内存地址，第二个参数是这个内存的大小，第三个参数是文件指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//printf(\"%s\\n\", s);</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(pw);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main06</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 'a' 的含义是，如果文件不存在，那么就创建文件，如果文件存在，就在文件结尾追加数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"file open fail\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fputs</span>(<span class=\"string\">\"hello\"</span>, p);</span><br><span class=\"line\">\t\tfclose(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main07</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *fp = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fp == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"error\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//char c = getc(p); // 一次只读一个字符</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>((c = getc(fp))!= EOF)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, c);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfclose(fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 写一个字符</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"error\\n\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'a'</span>, p);</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'b'</span>, p);</span><br><span class=\"line\">\t\tputc(<span class=\"string\">'c'</span>, p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfclose(p);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"r\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//fgets(buf, sizeof(buf), p);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//fscanf(p, \"%s\", buf); // fscanf与scanf用法一致，fscanf是从一个文件读取输入</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fscanf</span>(p, <span class=\"string\">\"%d + %d = \"</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = <span class=\"string\">\"hello world\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">6</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// fprintf(p, \"%s, %d, %d\", buf, a, b); // 和printf功能一样，fprintf将数据输入到文件里面</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(p, <span class=\"string\">\"array[%d] = %d\\n\"</span>, i, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"rb\"</span>); <span class=\"comment\">// 用读二进制的方式打开一个文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p); <span class=\"comment\">//第一个参数是缓冲区，第二个参数是读取的时候最小单位大小，第三个参数是一次读取几个单位，第四个参数是打开的文件指针。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// fread的返回值代表读取了多少记录数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; res; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"buf[%d] = %x\\n\"</span>, i, buf[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//printf(\"%s\", buf);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tbuf[<span class=\"number\">0</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">\tbuf[<span class=\"number\">1</span>] = <span class=\"string\">'b'</span>;</span><br><span class=\"line\">\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"number\">10</span>, p);</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(<span class=\"keyword\">char</span> *p, <span class=\"keyword\">size_t</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i] += <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(<span class=\"keyword\">char</span> *p, <span class=\"keyword\">size_t</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tp[i] -= <span class=\"number\">3</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main03</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 带加密</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p = fopen(\"m.wmv\", \"rb\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p1 = fopen(\"n.wmv\", \"wb\");</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tFILE *p1 = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p);</span><br><span class=\"line\">\t\tencode(buf, res);</span><br><span class=\"line\">\t\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), res, p1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(p1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c1 = clock();</span><br><span class=\"line\">\t<span class=\"comment\">// 带解密</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p = fopen(\"m.wmv\", \"rb\");</span></span><br><span class=\"line\">\t<span class=\"comment\">// FILE *p1 = fopen(\"n.wmv\", \"wb\");</span></span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"b.txt\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tFILE *p1 = fopen(<span class=\"string\">\"d.txt\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">1024</span> * <span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!feof(p))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">\t\t<span class=\"keyword\">size_t</span> res = fread(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), <span class=\"keyword\">sizeof</span>(buf), p);</span><br><span class=\"line\">\t\tdecode(buf, res);</span><br><span class=\"line\">\t\tfwrite(buf, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), res, p1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\tfclose(p1);</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c2 = clock();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end %ld\\n\"</span>, (c2 - c1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span><span class=\"string\">\"刘德华\"</span>, <span class=\"number\">30</span>&#125;;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\tfwrite(&amp;st, <span class=\"keyword\">sizeof</span>(st), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span><span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tfread(&amp;st, <span class=\"keyword\">sizeof</span>(st), <span class=\"number\">1</span>, p);</span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> </span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span>[10] = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\"> \t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"please input name:\"</span>);</span><br><span class=\"line\"> \t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, st[i].name);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"please input age:\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;st[i].age);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\"> \tfwrite(st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">10</span>, p);</span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">size_t</span> res = fread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(res == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// seek </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> \t</span><br><span class=\"line\"> \tFILE *p = fopen(<span class=\"string\">\"a.dat\"</span>, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"comment\">// 从文件开始位置向后偏移结构student的大小</span></span><br><span class=\"line\"> \t<span class=\"comment\">// fseek(p, sizeof(struct student), SEEK_SET);</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 第二个参数：偏移字节数</span></span><br><span class=\"line\"> \t<span class=\"comment\">// 第三个参数：SEEK_SET, SEEK_CUR, SEEK_END</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfseek(p, -<span class=\"keyword\">sizeof</span>(struct student), SEEK_CUR);<span class=\"comment\">//从当前位置往回偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \tfseek(p, -<span class=\"keyword\">sizeof</span>(struct student), SEEK_END);<span class=\"comment\">//从文件结尾往回偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">memset</span>(&amp;st, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(struct student));</span><br><span class=\"line\"> \tfread(&amp;st, <span class=\"keyword\">sizeof</span>(struct student), <span class=\"number\">1</span>, p);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"name = %s, age = %d\\n\"</span>, st.name, st.age);</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">\"ftell = %ld\\n\"</span>, ftell(p)); <span class=\"comment\">// ftell当前指针在哪一个字节</span></span><br><span class=\"line\"></span><br><span class=\"line\"> \tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *fileName = <span class=\"string\">\"m.wmv\"</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span> = &#123;</span> <span class=\"number\">0</span> &#125;; <span class=\"comment\">// 定义一个结构，名字叫st</span></span><br><span class=\"line\">\tstat(fileName, &amp;st); <span class=\"comment\">// 调用完stat函数后，文件相关的信息就保存在了st结构中</span></span><br><span class=\"line\">\t<span class=\"comment\">//st.st_size 得到文件的大小</span></span><br><span class=\"line\">\t<span class=\"comment\">// printf(\"%lld\\n\", st.st_size);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> * <span class=\"built_in\">array</span> = <span class=\"built_in\">malloc</span>(st.st_size); <span class=\"comment\">// 根据文件大小在堆中动态的分配一块内存</span></span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c1 = clock(); <span class=\"comment\">//得到系统当前时间，单位毫秒</span></span><br><span class=\"line\">\tFILE * p = fopen(fileName, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\">\tfread(<span class=\"built_in\">array</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), st.st_size, p);<span class=\"comment\">// 相当于一下整个文件放入内存</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\tp = fopen(<span class=\"string\">\"w.wmv\"</span>, <span class=\"string\">\"wb\"</span>);</span><br><span class=\"line\">\tfwrite(<span class=\"built_in\">array</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>), st.st_size, p); <span class=\"comment\">// 将堆中的信息一下都写入文件</span></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">clock_t</span> c2 = clock();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end %ld\\n\"</span>, (c2 - c1));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tFILE *p = fopen(<span class=\"string\">\"a.txt\"</span>, <span class=\"string\">\"w\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>, buf);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strcmp</span>(<span class=\"string\">\"exit\"</span>, buf) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(p, <span class=\"string\">\"%s\\n\"</span>, buf);</span><br><span class=\"line\">\t\tfflush(p); <span class=\"comment\">// fflush 将缓冲区的内容立刻写入文件</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//优势是，不会因为停电，或者电脑死机等故障导致缓冲区的内容丢失</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//缺点是，硬盘读写次数增加，导致程序效率低下，同时硬盘寿命变短</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfclose(p);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main02</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 删除某个文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tremove(<span class=\"string\">\"a.txt\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 将指定文件改名</span></span><br><span class=\"line\"></span><br><span class=\"line\">\trename(<span class=\"string\">\"c.txt\"</span>, <span class=\"string\">\"a.txt\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"end\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Github 安全类Repo收集整理[转载]","date":"2017-09-11T03:32:59.000Z","_content":"\n漏洞及渗透练习平台：\nWebGoat漏洞练习环境\nhttps://github.com/WebGoat/WebGoat\nhttps://github.com/WebGoat/WebGoat-Legacy\nDamn Vulnerable Web Application(漏洞练习平台)\nhttps://github.com/RandomStorm/DVWA\n数据库注入练习平台  \nhttps://github.com/Audi-1/sqli-labs\n用node编写的漏洞练习平台，like OWASP Node Goat\nhttps://github.com/cr0hn/vulnerable-node\n\n<!-- more -->\n花式扫描器 ：\n端口扫描器Nmap\nhttps://github.com/nmap/nmap\n本地网络扫描器\nhttps://github.com/SkyLined/LocalNetworkScanner\n子域名扫描器\nhttps://github.com/lijiejie/subDomainsBrute\n漏洞路由扫描器\nhttps://github.com/jh00nbr/Routerhunter-2.0\n迷你批量信息泄漏扫描脚本\nhttps://github.com/lijiejie/BBScan\nWaf类型检测工具\nhttps://github.com/EnableSecurity/wafw00f\n信息搜集工具 :\n社工插件，可查找以email、phone、username的注册的所有网站账号信息\nhttps://github.com/n0tr00t/Sreg\nGithub信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息\nhttps://github.com/sea-god/gitscan\ngithub Repo信息搜集工具\nhttps://github.com/metac0rtex/GitHarvester\nWEB：\nwebshell大合集\nhttps://github.com/tennc/webshell\n渗透以及web攻击脚本\nhttps://github.com/brianwrf/hackUtils\nweb渗透小工具大合集\nhttps://github.com/rootphantomer/hack_tools_for_me\nXSS数据接收平台\nhttps://github.com/firesunCN/BlueLotus_XSSReceiver\nXSS与CSRF工具\nhttps://github.com/evilcos/xssor\nShort for command injection exploiter，web向命令注入检测工具\nhttps://github.com/stasinopoulos/commix\n数据库注入工具\nhttps://github.com/sqlmapproject/sqlmap\nWeb代理，通过加载sqlmap api进行sqli实时检测\nhttps://github.com/zt2/sqli-hunter\n新版中国菜刀\nhttps://github.com/Chora10/Cknife\n.git泄露利用EXP\nhttps://github.com/lijiejie/GitHack\n浏览器攻击框架\nhttps://github.com/beefproject/beef\n自动化绕过WAF脚本\nhttps://github.com/khalilbijjou/WAFNinja\nhttp命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）\nhttps://github.com/jkbrzt/httpie\n浏览器调试利器\nhttps://github.com/firebug/firebug\n一款开源WAF\nhttps://github.com/SpiderLabs/ModSecurity\nwindows域渗透工具：\nwindows渗透神器\nhttps://github.com/gentilkiwi/mimikatz\nPowershell渗透库合集\nhttps://github.com/PowerShellMafia/PowerSploit\nPowershell tools合集\nhttps://github.com/clymb3r/PowerShell\nFuzz:\nWeb向Fuzz工具\nhttps://github.com/xmendez/wfuzz\nHTTP暴力破解，撞库攻击脚本\nhttps://github.com/lijiejie/htpwdScan\n漏洞利用及攻击框架：\nmsf\nhttps://github.com/rapid7/metasploit-framework\nPoc调用框架，可加载Pocsuite,Tangscan，Beebeeto等\nhttps://github.com/erevus-cn/pocscan\nPocsuite\nhttps://github.com/knownsec/Pocsuite\nBeebeeto\nhttps://github.com/n0tr00t/Beebeeto-framework\n漏洞POC&EXP:\nExploitDB官方git版本\nhttps://github.com/offensive-security/exploit-database\nphp漏洞代码分析\nhttps://github.com/80vul/phpcodz\nSimple test for CVE-2016-2107\nhttps://github.com/FiloSottile/CVE-2016-2107\nCVE-2015-7547 POC\nhttps://github.com/fjserna/CVE-2015-7547\nJAVA反序列化POC生成工具\nhttps://github.com/frohoff/ysoserial\nJAVA反序列化EXP\nhttps://github.com/foxglovesec/JavaUnserializeExploits\nJenkins CommonCollections EXP\nhttps://github.com/CaledoniaProject/jenkins-cli-exploit\nCVE-2015-2426 EXP (windows内核提权)\nhttps://github.com/vlad902/hacking-team-windows-kernel-lpe\nuse docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)\nhttps://github.com/hxer/vulnapp\nphp7缓存覆写漏洞Demo及相关工具\nhttps://github.com/GoSecure/php7-opcache-override\nXcodeGhost木马样本\nhttps://github.com/XcodeGhostSource/XcodeGhost\n中间人攻击及钓鱼\n中间人攻击框架\nhttps://github.com/secretsquirrel/the-backdoor-factory\nhttps://github.com/secretsquirrel/BDFProxy\nhttps://github.com/byt3bl33d3r/MITMf\nInject code, jam wifi, and spy on wifi users\nhttps://github.com/DanMcInerney/LANs.py\n可扩展的中间人代理工具\nhttps://github.com/intrepidusgroup/mallory\nwifi钓鱼\nhttps://github.com/sophron/wifiphisher\n密码破解：\n密码破解工具\nhttps://github.com/shinnok/johnny\n本地存储的各类密码提取利器\nhttps://github.com/AlessandroZ/LaZagne\n二进制及代码分析工具：\n二进制分析工具\nhttps://github.com/devttys0/binwalk\n系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息\nhttps://github.com/quarkslab/binmap\nrp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn't support the FAT binaries) x86/x64 binaries.\nhttps://github.com/0vercl0k/rp\nWindows Exploit Development工具\nhttps://github.com/lillypad/badger\n二进制静态分析工具（python）\nhttps://github.com/bdcht/amoco\nPython Exploit Development Assistance for GDB\nhttps://github.com/longld/peda\n对BillGates Linux Botnet系木马活动的监控工具\nhttps://github.com/ValdikSS/billgates-botnet-tracker\n木马配置参数提取工具\nhttps://github.com/kevthehermit/RATDecoders\nShellphish编写的二进制分析工具（CTF向）\nhttps://github.com/angr/angr\n针对python的静态代码分析工具\nhttps://github.com/yinwang0/pysonar2\n一个自动化的脚本（shell）分析工具，用来给出警告和建议\nhttps://github.com/koalaman/shellcheck\n基于AST变换的简易Javascript反混淆辅助工具\nhttps://github.com/ChiChou/etacsufbo\nEXP编写框架及工具：\n二进制EXP编写工具\nhttps://github.com/t00sh/rop-tool\nCTF Pwn 类题目脚本编写框架\nhttps://github.com/Gallopsled/pwntools\nan easy-to-use io library for pwning development\nhttps://github.com/zTrix/zio\n跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）\nhttps://github.com/frida/frida\n隐写：\n隐写检测工具\nhttps://github.com/abeluck/stegdetect\n各类安全资料:\n域渗透教程\nhttps://github.com/l3m0n/pentest_study\npython security教程（原文链接http://www.primalsecurity.net/tutorials/python-tutorials/）\nhttps://github.com/smartFlash/pySecurity\ndata_hacking合集\nhttps://github.com/ClickSecurity/data_hacking\nmobile-security-wiki\nhttps://github.com/exploitprotocol/mobile-security-wiki\n书籍《reverse-engineering-for-beginners》\nhttps://github.com/veficos/reverse-engineering-for-beginners\n一些信息安全标准及设备配置\nhttps://github.com/luyg24/IT_security\nAPT相关笔记\nhttps://github.com/kbandla/APTnotes\nKcon资料\nhttps://github.com/knownsec/KCon\nctf及黑客资源合集\nhttps://github.com/bt3gl/My-Gray-Hacker-Resources\nctf和安全工具大合集\nhttps://github.com/zardus/ctf-tools\n《DO NOT FUCK WITH A HACKER》\nhttps://github.com/citypw/DNFWAH\n各类CTF资源\n近年ctf writeup大全\nhttps://github.com/ctfs/write-ups-2016\nhttps://github.com/ctfs/write-ups-2015\nhttps://github.com/ctfs/write-ups-2014\nfbctf竞赛平台Demo\nhttps://github.com/facebook/fbctf\nctf Resources\nhttps://github.com/ctfs/resources\n各类编程资源:\n大礼包（什么都有）\nhttps://github.com/bayandin/awesome-awesomeness\nbash-handbook\nhttps://github.com/denysdovhan/bash-handbook\npython资源大全\nhttps://github.com/jobbole/awesome-python-cn\ngit学习资料\nhttps://github.com/xirong/my-git\n安卓开源代码解析\nhttps://github.com/android-cn/android-open-project-analysis\npython框架，库，资源大合集\nhttps://github.com/vinta/awesome-python\nJS 正则表达式库（用于简化构造复杂的JS正则表达式）\nhttps://github.com/VerbalExpressions/JSVerbalExpressions\nPython：\npython 正则表达式库（用于简化构造复杂的python正则表达式）\nhttps://github.com/VerbalExpressions/PythonVerbalExpressions\npython任务管理以及命令执行库\nhttps://github.com/pyinvoke/invoke\npython exe打包库\nhttps://github.com/pyinstaller/pyinstaller\npy3 爬虫框架\nhttps://github.com/orf/cyborg\n一个提供底层接口数据包编程和网络协议支持的python库\nhttps://github.com/CoreSecurity/impacket\npython requests 库\nhttps://github.com/kennethreitz/requests\npython 实用工具合集\nhttps://github.com/mahmoud/boltons\npython爬虫系统\nhttps://github.com/binux/pyspider\nctf向 python工具包\nhttps://github.com/P1kachu/v0lt\n科学上网：\n科学上网工具\nhttps://github.com/XX-net/XX-Net\n福利：\n微信自动抢红包动态库\nhttps://github.com/east520/AutoGetRedEnv\n微信抢红包插件（安卓版）\nhttps://github.com/geeeeeeeeek/WeChatLuckyMoney\n神器\nhttps://github.com/yangyangwithgnu/hardseed\n本文出自 RedFree's Blog，转载时请注明出处及相应链接。\n本文永久链接: http://py4.me/blog/?p=124\n","source":"_posts/Github-安全类Repo收集整理-转载.md","raw":"---\ntitle: 'Github 安全类Repo收集整理[转载]'\ndate: 2017-09-11 11:32:59\ntags: [\"github\",\"安全\"]\ncategories: \"github\"\n---\n\n漏洞及渗透练习平台：\nWebGoat漏洞练习环境\nhttps://github.com/WebGoat/WebGoat\nhttps://github.com/WebGoat/WebGoat-Legacy\nDamn Vulnerable Web Application(漏洞练习平台)\nhttps://github.com/RandomStorm/DVWA\n数据库注入练习平台  \nhttps://github.com/Audi-1/sqli-labs\n用node编写的漏洞练习平台，like OWASP Node Goat\nhttps://github.com/cr0hn/vulnerable-node\n\n<!-- more -->\n花式扫描器 ：\n端口扫描器Nmap\nhttps://github.com/nmap/nmap\n本地网络扫描器\nhttps://github.com/SkyLined/LocalNetworkScanner\n子域名扫描器\nhttps://github.com/lijiejie/subDomainsBrute\n漏洞路由扫描器\nhttps://github.com/jh00nbr/Routerhunter-2.0\n迷你批量信息泄漏扫描脚本\nhttps://github.com/lijiejie/BBScan\nWaf类型检测工具\nhttps://github.com/EnableSecurity/wafw00f\n信息搜集工具 :\n社工插件，可查找以email、phone、username的注册的所有网站账号信息\nhttps://github.com/n0tr00t/Sreg\nGithub信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息\nhttps://github.com/sea-god/gitscan\ngithub Repo信息搜集工具\nhttps://github.com/metac0rtex/GitHarvester\nWEB：\nwebshell大合集\nhttps://github.com/tennc/webshell\n渗透以及web攻击脚本\nhttps://github.com/brianwrf/hackUtils\nweb渗透小工具大合集\nhttps://github.com/rootphantomer/hack_tools_for_me\nXSS数据接收平台\nhttps://github.com/firesunCN/BlueLotus_XSSReceiver\nXSS与CSRF工具\nhttps://github.com/evilcos/xssor\nShort for command injection exploiter，web向命令注入检测工具\nhttps://github.com/stasinopoulos/commix\n数据库注入工具\nhttps://github.com/sqlmapproject/sqlmap\nWeb代理，通过加载sqlmap api进行sqli实时检测\nhttps://github.com/zt2/sqli-hunter\n新版中国菜刀\nhttps://github.com/Chora10/Cknife\n.git泄露利用EXP\nhttps://github.com/lijiejie/GitHack\n浏览器攻击框架\nhttps://github.com/beefproject/beef\n自动化绕过WAF脚本\nhttps://github.com/khalilbijjou/WAFNinja\nhttp命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）\nhttps://github.com/jkbrzt/httpie\n浏览器调试利器\nhttps://github.com/firebug/firebug\n一款开源WAF\nhttps://github.com/SpiderLabs/ModSecurity\nwindows域渗透工具：\nwindows渗透神器\nhttps://github.com/gentilkiwi/mimikatz\nPowershell渗透库合集\nhttps://github.com/PowerShellMafia/PowerSploit\nPowershell tools合集\nhttps://github.com/clymb3r/PowerShell\nFuzz:\nWeb向Fuzz工具\nhttps://github.com/xmendez/wfuzz\nHTTP暴力破解，撞库攻击脚本\nhttps://github.com/lijiejie/htpwdScan\n漏洞利用及攻击框架：\nmsf\nhttps://github.com/rapid7/metasploit-framework\nPoc调用框架，可加载Pocsuite,Tangscan，Beebeeto等\nhttps://github.com/erevus-cn/pocscan\nPocsuite\nhttps://github.com/knownsec/Pocsuite\nBeebeeto\nhttps://github.com/n0tr00t/Beebeeto-framework\n漏洞POC&EXP:\nExploitDB官方git版本\nhttps://github.com/offensive-security/exploit-database\nphp漏洞代码分析\nhttps://github.com/80vul/phpcodz\nSimple test for CVE-2016-2107\nhttps://github.com/FiloSottile/CVE-2016-2107\nCVE-2015-7547 POC\nhttps://github.com/fjserna/CVE-2015-7547\nJAVA反序列化POC生成工具\nhttps://github.com/frohoff/ysoserial\nJAVA反序列化EXP\nhttps://github.com/foxglovesec/JavaUnserializeExploits\nJenkins CommonCollections EXP\nhttps://github.com/CaledoniaProject/jenkins-cli-exploit\nCVE-2015-2426 EXP (windows内核提权)\nhttps://github.com/vlad902/hacking-team-windows-kernel-lpe\nuse docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)\nhttps://github.com/hxer/vulnapp\nphp7缓存覆写漏洞Demo及相关工具\nhttps://github.com/GoSecure/php7-opcache-override\nXcodeGhost木马样本\nhttps://github.com/XcodeGhostSource/XcodeGhost\n中间人攻击及钓鱼\n中间人攻击框架\nhttps://github.com/secretsquirrel/the-backdoor-factory\nhttps://github.com/secretsquirrel/BDFProxy\nhttps://github.com/byt3bl33d3r/MITMf\nInject code, jam wifi, and spy on wifi users\nhttps://github.com/DanMcInerney/LANs.py\n可扩展的中间人代理工具\nhttps://github.com/intrepidusgroup/mallory\nwifi钓鱼\nhttps://github.com/sophron/wifiphisher\n密码破解：\n密码破解工具\nhttps://github.com/shinnok/johnny\n本地存储的各类密码提取利器\nhttps://github.com/AlessandroZ/LaZagne\n二进制及代码分析工具：\n二进制分析工具\nhttps://github.com/devttys0/binwalk\n系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息\nhttps://github.com/quarkslab/binmap\nrp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn't support the FAT binaries) x86/x64 binaries.\nhttps://github.com/0vercl0k/rp\nWindows Exploit Development工具\nhttps://github.com/lillypad/badger\n二进制静态分析工具（python）\nhttps://github.com/bdcht/amoco\nPython Exploit Development Assistance for GDB\nhttps://github.com/longld/peda\n对BillGates Linux Botnet系木马活动的监控工具\nhttps://github.com/ValdikSS/billgates-botnet-tracker\n木马配置参数提取工具\nhttps://github.com/kevthehermit/RATDecoders\nShellphish编写的二进制分析工具（CTF向）\nhttps://github.com/angr/angr\n针对python的静态代码分析工具\nhttps://github.com/yinwang0/pysonar2\n一个自动化的脚本（shell）分析工具，用来给出警告和建议\nhttps://github.com/koalaman/shellcheck\n基于AST变换的简易Javascript反混淆辅助工具\nhttps://github.com/ChiChou/etacsufbo\nEXP编写框架及工具：\n二进制EXP编写工具\nhttps://github.com/t00sh/rop-tool\nCTF Pwn 类题目脚本编写框架\nhttps://github.com/Gallopsled/pwntools\nan easy-to-use io library for pwning development\nhttps://github.com/zTrix/zio\n跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）\nhttps://github.com/frida/frida\n隐写：\n隐写检测工具\nhttps://github.com/abeluck/stegdetect\n各类安全资料:\n域渗透教程\nhttps://github.com/l3m0n/pentest_study\npython security教程（原文链接http://www.primalsecurity.net/tutorials/python-tutorials/）\nhttps://github.com/smartFlash/pySecurity\ndata_hacking合集\nhttps://github.com/ClickSecurity/data_hacking\nmobile-security-wiki\nhttps://github.com/exploitprotocol/mobile-security-wiki\n书籍《reverse-engineering-for-beginners》\nhttps://github.com/veficos/reverse-engineering-for-beginners\n一些信息安全标准及设备配置\nhttps://github.com/luyg24/IT_security\nAPT相关笔记\nhttps://github.com/kbandla/APTnotes\nKcon资料\nhttps://github.com/knownsec/KCon\nctf及黑客资源合集\nhttps://github.com/bt3gl/My-Gray-Hacker-Resources\nctf和安全工具大合集\nhttps://github.com/zardus/ctf-tools\n《DO NOT FUCK WITH A HACKER》\nhttps://github.com/citypw/DNFWAH\n各类CTF资源\n近年ctf writeup大全\nhttps://github.com/ctfs/write-ups-2016\nhttps://github.com/ctfs/write-ups-2015\nhttps://github.com/ctfs/write-ups-2014\nfbctf竞赛平台Demo\nhttps://github.com/facebook/fbctf\nctf Resources\nhttps://github.com/ctfs/resources\n各类编程资源:\n大礼包（什么都有）\nhttps://github.com/bayandin/awesome-awesomeness\nbash-handbook\nhttps://github.com/denysdovhan/bash-handbook\npython资源大全\nhttps://github.com/jobbole/awesome-python-cn\ngit学习资料\nhttps://github.com/xirong/my-git\n安卓开源代码解析\nhttps://github.com/android-cn/android-open-project-analysis\npython框架，库，资源大合集\nhttps://github.com/vinta/awesome-python\nJS 正则表达式库（用于简化构造复杂的JS正则表达式）\nhttps://github.com/VerbalExpressions/JSVerbalExpressions\nPython：\npython 正则表达式库（用于简化构造复杂的python正则表达式）\nhttps://github.com/VerbalExpressions/PythonVerbalExpressions\npython任务管理以及命令执行库\nhttps://github.com/pyinvoke/invoke\npython exe打包库\nhttps://github.com/pyinstaller/pyinstaller\npy3 爬虫框架\nhttps://github.com/orf/cyborg\n一个提供底层接口数据包编程和网络协议支持的python库\nhttps://github.com/CoreSecurity/impacket\npython requests 库\nhttps://github.com/kennethreitz/requests\npython 实用工具合集\nhttps://github.com/mahmoud/boltons\npython爬虫系统\nhttps://github.com/binux/pyspider\nctf向 python工具包\nhttps://github.com/P1kachu/v0lt\n科学上网：\n科学上网工具\nhttps://github.com/XX-net/XX-Net\n福利：\n微信自动抢红包动态库\nhttps://github.com/east520/AutoGetRedEnv\n微信抢红包插件（安卓版）\nhttps://github.com/geeeeeeeeek/WeChatLuckyMoney\n神器\nhttps://github.com/yangyangwithgnu/hardseed\n本文出自 RedFree's Blog，转载时请注明出处及相应链接。\n本文永久链接: http://py4.me/blog/?p=124\n","slug":"Github-安全类Repo收集整理-转载","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi100bnsifymw12dj3q","content":"<p>漏洞及渗透练习平台：<br>\nWebGoat漏洞练习环境<br>\n<a href=\"https://github.com/WebGoat/WebGoat\" target=\"_blank\" rel=\"noopener\">https://github.com/WebGoat/WebGoat</a><br>\n<a href=\"https://github.com/WebGoat/WebGoat-Legacy\" target=\"_blank\" rel=\"noopener\">https://github.com/WebGoat/WebGoat-Legacy</a><br>\nDamn Vulnerable Web Application(漏洞练习平台)<br>\n<a href=\"https://github.com/RandomStorm/DVWA\" target=\"_blank\" rel=\"noopener\">https://github.com/RandomStorm/DVWA</a><br>\n数据库注入练习平台<br>\n<a href=\"https://github.com/Audi-1/sqli-labs\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs</a><br>\n用node编写的漏洞练习平台，like OWASP Node Goat<br>\n<a href=\"https://github.com/cr0hn/vulnerable-node\" target=\"_blank\" rel=\"noopener\">https://github.com/cr0hn/vulnerable-node</a></p>\n<a id=\"more\"></a>\n<p>花式扫描器 ：<br>\n端口扫描器Nmap<br>\n<a href=\"https://github.com/nmap/nmap\" target=\"_blank\" rel=\"noopener\">https://github.com/nmap/nmap</a><br>\n本地网络扫描器<br>\n<a href=\"https://github.com/SkyLined/LocalNetworkScanner\" target=\"_blank\" rel=\"noopener\">https://github.com/SkyLined/LocalNetworkScanner</a><br>\n子域名扫描器<br>\n<a href=\"https://github.com/lijiejie/subDomainsBrute\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/subDomainsBrute</a><br>\n漏洞路由扫描器<br>\n<a href=\"https://github.com/jh00nbr/Routerhunter-2.0\" target=\"_blank\" rel=\"noopener\">https://github.com/jh00nbr/Routerhunter-2.0</a><br>\n迷你批量信息泄漏扫描脚本<br>\n<a href=\"https://github.com/lijiejie/BBScan\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/BBScan</a><br>\nWaf类型检测工具<br>\n<a href=\"https://github.com/EnableSecurity/wafw00f\" target=\"_blank\" rel=\"noopener\">https://github.com/EnableSecurity/wafw00f</a><br>\n信息搜集工具 :<br>\n社工插件，可查找以email、phone、username的注册的所有网站账号信息<br>\n<a href=\"https://github.com/n0tr00t/Sreg\" target=\"_blank\" rel=\"noopener\">https://github.com/n0tr00t/Sreg</a><br>\nGithub信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息<br>\n<a href=\"https://github.com/sea-god/gitscan\" target=\"_blank\" rel=\"noopener\">https://github.com/sea-god/gitscan</a><br>\ngithub Repo信息搜集工具<br>\n<a href=\"https://github.com/metac0rtex/GitHarvester\" target=\"_blank\" rel=\"noopener\">https://github.com/metac0rtex/GitHarvester</a><br>\nWEB：<br>\nwebshell大合集<br>\n<a href=\"https://github.com/tennc/webshell\" target=\"_blank\" rel=\"noopener\">https://github.com/tennc/webshell</a><br>\n渗透以及web攻击脚本<br>\n<a href=\"https://github.com/brianwrf/hackUtils\" target=\"_blank\" rel=\"noopener\">https://github.com/brianwrf/hackUtils</a><br>\nweb渗透小工具大合集<br>\n<a href=\"https://github.com/rootphantomer/hack_tools_for_me\" target=\"_blank\" rel=\"noopener\">https://github.com/rootphantomer/hack_tools_for_me</a><br>\nXSS数据接收平台<br>\n<a href=\"https://github.com/firesunCN/BlueLotus_XSSReceiver\" target=\"_blank\" rel=\"noopener\">https://github.com/firesunCN/BlueLotus_XSSReceiver</a><br>\nXSS与CSRF工具<br>\n<a href=\"https://github.com/evilcos/xssor\" target=\"_blank\" rel=\"noopener\">https://github.com/evilcos/xssor</a><br>\nShort for command injection exploiter，web向命令注入检测工具<br>\n<a href=\"https://github.com/stasinopoulos/commix\" target=\"_blank\" rel=\"noopener\">https://github.com/stasinopoulos/commix</a><br>\n数据库注入工具<br>\n<a href=\"https://github.com/sqlmapproject/sqlmap\" target=\"_blank\" rel=\"noopener\">https://github.com/sqlmapproject/sqlmap</a><br>\nWeb代理，通过加载sqlmap api进行sqli实时检测<br>\n<a href=\"https://github.com/zt2/sqli-hunter\" target=\"_blank\" rel=\"noopener\">https://github.com/zt2/sqli-hunter</a><br>\n新版中国菜刀<br>\n<a href=\"https://github.com/Chora10/Cknife\" target=\"_blank\" rel=\"noopener\">https://github.com/Chora10/Cknife</a><br>\n.git泄露利用EXP<br>\n<a href=\"https://github.com/lijiejie/GitHack\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/GitHack</a><br>\n浏览器攻击框架<br>\n<a href=\"https://github.com/beefproject/beef\" target=\"_blank\" rel=\"noopener\">https://github.com/beefproject/beef</a><br>\n自动化绕过WAF脚本<br>\n<a href=\"https://github.com/khalilbijjou/WAFNinja\" target=\"_blank\" rel=\"noopener\">https://github.com/khalilbijjou/WAFNinja</a><br>\nhttp命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）<br>\n<a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"noopener\">https://github.com/jkbrzt/httpie</a><br>\n浏览器调试利器<br>\n<a href=\"https://github.com/firebug/firebug\" target=\"_blank\" rel=\"noopener\">https://github.com/firebug/firebug</a><br>\n一款开源WAF<br>\n<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">https://github.com/SpiderLabs/ModSecurity</a><br>\nwindows域渗透工具：<br>\nwindows渗透神器<br>\n<a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"noopener\">https://github.com/gentilkiwi/mimikatz</a><br>\nPowershell渗透库合集<br>\n<a href=\"https://github.com/PowerShellMafia/PowerSploit\" target=\"_blank\" rel=\"noopener\">https://github.com/PowerShellMafia/PowerSploit</a><br>\nPowershell tools合集<br>\n<a href=\"https://github.com/clymb3r/PowerShell\" target=\"_blank\" rel=\"noopener\">https://github.com/clymb3r/PowerShell</a><br>\nFuzz:<br>\nWeb向Fuzz工具<br>\n<a href=\"https://github.com/xmendez/wfuzz\" target=\"_blank\" rel=\"noopener\">https://github.com/xmendez/wfuzz</a><br>\nHTTP暴力破解，撞库攻击脚本<br>\n<a href=\"https://github.com/lijiejie/htpwdScan\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/htpwdScan</a><br>\n漏洞利用及攻击框架：<br>\nmsf<br>\n<a href=\"https://github.com/rapid7/metasploit-framework\" target=\"_blank\" rel=\"noopener\">https://github.com/rapid7/metasploit-framework</a><br>\nPoc调用框架，可加载Pocsuite,Tangscan，Beebeeto等<br>\n<a href=\"https://github.com/erevus-cn/pocscan\" target=\"_blank\" rel=\"noopener\">https://github.com/erevus-cn/pocscan</a><br>\nPocsuite<br>\n<a href=\"https://github.com/knownsec/Pocsuite\" target=\"_blank\" rel=\"noopener\">https://github.com/knownsec/Pocsuite</a><br>\nBeebeeto<br>\n<a href=\"https://github.com/n0tr00t/Beebeeto-framework\" target=\"_blank\" rel=\"noopener\">https://github.com/n0tr00t/Beebeeto-framework</a><br>\n漏洞POC&amp;EXP:<br>\nExploitDB官方git版本<br>\n<a href=\"https://github.com/offensive-security/exploit-database\" target=\"_blank\" rel=\"noopener\">https://github.com/offensive-security/exploit-database</a><br>\nphp漏洞代码分析<br>\n<a href=\"https://github.com/80vul/phpcodz\" target=\"_blank\" rel=\"noopener\">https://github.com/80vul/phpcodz</a><br>\nSimple test for CVE-2016-2107<br>\n<a href=\"https://github.com/FiloSottile/CVE-2016-2107\" target=\"_blank\" rel=\"noopener\">https://github.com/FiloSottile/CVE-2016-2107</a><br>\nCVE-2015-7547 POC<br>\n<a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"noopener\">https://github.com/fjserna/CVE-2015-7547</a><br>\nJAVA反序列化POC生成工具<br>\n<a href=\"https://github.com/frohoff/ysoserial\" target=\"_blank\" rel=\"noopener\">https://github.com/frohoff/ysoserial</a><br>\nJAVA反序列化EXP<br>\n<a href=\"https://github.com/foxglovesec/JavaUnserializeExploits\" target=\"_blank\" rel=\"noopener\">https://github.com/foxglovesec/JavaUnserializeExploits</a><br>\nJenkins CommonCollections EXP<br>\n<a href=\"https://github.com/CaledoniaProject/jenkins-cli-exploit\" target=\"_blank\" rel=\"noopener\">https://github.com/CaledoniaProject/jenkins-cli-exploit</a><br>\nCVE-2015-2426 EXP (windows内核提权)<br>\n<a href=\"https://github.com/vlad902/hacking-team-windows-kernel-lpe\" target=\"_blank\" rel=\"noopener\">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a><br>\nuse docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)<br>\n<a href=\"https://github.com/hxer/vulnapp\" target=\"_blank\" rel=\"noopener\">https://github.com/hxer/vulnapp</a><br>\nphp7缓存覆写漏洞Demo及相关工具<br>\n<a href=\"https://github.com/GoSecure/php7-opcache-override\" target=\"_blank\" rel=\"noopener\">https://github.com/GoSecure/php7-opcache-override</a><br>\nXcodeGhost木马样本<br>\n<a href=\"https://github.com/XcodeGhostSource/XcodeGhost\" target=\"_blank\" rel=\"noopener\">https://github.com/XcodeGhostSource/XcodeGhost</a><br>\n中间人攻击及钓鱼<br>\n中间人攻击框架<br>\n<a href=\"https://github.com/secretsquirrel/the-backdoor-factory\" target=\"_blank\" rel=\"noopener\">https://github.com/secretsquirrel/the-backdoor-factory</a><br>\n<a href=\"https://github.com/secretsquirrel/BDFProxy\" target=\"_blank\" rel=\"noopener\">https://github.com/secretsquirrel/BDFProxy</a><br>\n<a href=\"https://github.com/byt3bl33d3r/MITMf\" target=\"_blank\" rel=\"noopener\">https://github.com/byt3bl33d3r/MITMf</a><br>\nInject code, jam wifi, and spy on wifi users<br>\n<a href=\"https://github.com/DanMcInerney/LANs.py\" target=\"_blank\" rel=\"noopener\">https://github.com/DanMcInerney/LANs.py</a><br>\n可扩展的中间人代理工具<br>\n<a href=\"https://github.com/intrepidusgroup/mallory\" target=\"_blank\" rel=\"noopener\">https://github.com/intrepidusgroup/mallory</a><br>\nwifi钓鱼<br>\n<a href=\"https://github.com/sophron/wifiphisher\" target=\"_blank\" rel=\"noopener\">https://github.com/sophron/wifiphisher</a><br>\n密码破解：<br>\n密码破解工具<br>\n<a href=\"https://github.com/shinnok/johnny\" target=\"_blank\" rel=\"noopener\">https://github.com/shinnok/johnny</a><br>\n本地存储的各类密码提取利器<br>\n<a href=\"https://github.com/AlessandroZ/LaZagne\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne</a><br>\n二进制及代码分析工具：<br>\n二进制分析工具<br>\n<a href=\"https://github.com/devttys0/binwalk\" target=\"_blank\" rel=\"noopener\">https://github.com/devttys0/binwalk</a><br>\n系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息<br>\n<a href=\"https://github.com/quarkslab/binmap\" target=\"_blank\" rel=\"noopener\">https://github.com/quarkslab/binmap</a><br>\nrp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn’t support the FAT binaries) x86/x64 binaries.<br>\n<a href=\"https://github.com/0vercl0k/rp\" target=\"_blank\" rel=\"noopener\">https://github.com/0vercl0k/rp</a><br>\nWindows Exploit Development工具<br>\n<a href=\"https://github.com/lillypad/badger\" target=\"_blank\" rel=\"noopener\">https://github.com/lillypad/badger</a><br>\n二进制静态分析工具（python）<br>\n<a href=\"https://github.com/bdcht/amoco\" target=\"_blank\" rel=\"noopener\">https://github.com/bdcht/amoco</a><br>\nPython Exploit Development Assistance for GDB<br>\n<a href=\"https://github.com/longld/peda\" target=\"_blank\" rel=\"noopener\">https://github.com/longld/peda</a><br>\n对BillGates Linux Botnet系木马活动的监控工具<br>\n<a href=\"https://github.com/ValdikSS/billgates-botnet-tracker\" target=\"_blank\" rel=\"noopener\">https://github.com/ValdikSS/billgates-botnet-tracker</a><br>\n木马配置参数提取工具<br>\n<a href=\"https://github.com/kevthehermit/RATDecoders\" target=\"_blank\" rel=\"noopener\">https://github.com/kevthehermit/RATDecoders</a><br>\nShellphish编写的二进制分析工具（CTF向）<br>\n<a href=\"https://github.com/angr/angr\" target=\"_blank\" rel=\"noopener\">https://github.com/angr/angr</a><br>\n针对python的静态代码分析工具<br>\n<a href=\"https://github.com/yinwang0/pysonar2\" target=\"_blank\" rel=\"noopener\">https://github.com/yinwang0/pysonar2</a><br>\n一个自动化的脚本（shell）分析工具，用来给出警告和建议<br>\n<a href=\"https://github.com/koalaman/shellcheck\" target=\"_blank\" rel=\"noopener\">https://github.com/koalaman/shellcheck</a><br>\n基于AST变换的简易Javascript反混淆辅助工具<br>\n<a href=\"https://github.com/ChiChou/etacsufbo\" target=\"_blank\" rel=\"noopener\">https://github.com/ChiChou/etacsufbo</a><br>\nEXP编写框架及工具：<br>\n二进制EXP编写工具<br>\n<a href=\"https://github.com/t00sh/rop-tool\" target=\"_blank\" rel=\"noopener\">https://github.com/t00sh/rop-tool</a><br>\nCTF Pwn 类题目脚本编写框架<br>\n<a href=\"https://github.com/Gallopsled/pwntools\" target=\"_blank\" rel=\"noopener\">https://github.com/Gallopsled/pwntools</a><br>\nan easy-to-use io library for pwning development<br>\n<a href=\"https://github.com/zTrix/zio\" target=\"_blank\" rel=\"noopener\">https://github.com/zTrix/zio</a><br>\n跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）<br>\n<a href=\"https://github.com/frida/frida\" target=\"_blank\" rel=\"noopener\">https://github.com/frida/frida</a><br>\n隐写：<br>\n隐写检测工具<br>\n<a href=\"https://github.com/abeluck/stegdetect\" target=\"_blank\" rel=\"noopener\">https://github.com/abeluck/stegdetect</a><br>\n各类安全资料:<br>\n域渗透教程<br>\n<a href=\"https://github.com/l3m0n/pentest_study\" target=\"_blank\" rel=\"noopener\">https://github.com/l3m0n/pentest_study</a><br>\npython security教程（原文链接http://www.primalsecurity.net/tutorials/python-tutorials/）<br>\n<a href=\"https://github.com/smartFlash/pySecurity\" target=\"_blank\" rel=\"noopener\">https://github.com/smartFlash/pySecurity</a><br>\ndata_hacking合集<br>\n<a href=\"https://github.com/ClickSecurity/data_hacking\" target=\"_blank\" rel=\"noopener\">https://github.com/ClickSecurity/data_hacking</a><br>\nmobile-security-wiki<br>\n<a href=\"https://github.com/exploitprotocol/mobile-security-wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/exploitprotocol/mobile-security-wiki</a><br>\n书籍《reverse-engineering-for-beginners》<br>\n<a href=\"https://github.com/veficos/reverse-engineering-for-beginners\" target=\"_blank\" rel=\"noopener\">https://github.com/veficos/reverse-engineering-for-beginners</a><br>\n一些信息安全标准及设备配置<br>\n<a href=\"https://github.com/luyg24/IT_security\" target=\"_blank\" rel=\"noopener\">https://github.com/luyg24/IT_security</a><br>\nAPT相关笔记<br>\n<a href=\"https://github.com/kbandla/APTnotes\" target=\"_blank\" rel=\"noopener\">https://github.com/kbandla/APTnotes</a><br>\nKcon资料<br>\n<a href=\"https://github.com/knownsec/KCon\" target=\"_blank\" rel=\"noopener\">https://github.com/knownsec/KCon</a><br>\nctf及黑客资源合集<br>\n<a href=\"https://github.com/bt3gl/My-Gray-Hacker-Resources\" target=\"_blank\" rel=\"noopener\">https://github.com/bt3gl/My-Gray-Hacker-Resources</a><br>\nctf和安全工具大合集<br>\n<a href=\"https://github.com/zardus/ctf-tools\" target=\"_blank\" rel=\"noopener\">https://github.com/zardus/ctf-tools</a><br>\n《DO NOT FUCK WITH A HACKER》<br>\n<a href=\"https://github.com/citypw/DNFWAH\" target=\"_blank\" rel=\"noopener\">https://github.com/citypw/DNFWAH</a><br>\n各类CTF资源<br>\n近年ctf writeup大全<br>\n<a href=\"https://github.com/ctfs/write-ups-2016\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2016</a><br>\n<a href=\"https://github.com/ctfs/write-ups-2015\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2015</a><br>\n<a href=\"https://github.com/ctfs/write-ups-2014\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2014</a><br>\nfbctf竞赛平台Demo<br>\n<a href=\"https://github.com/facebook/fbctf\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/fbctf</a><br>\nctf Resources<br>\n<a href=\"https://github.com/ctfs/resources\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/resources</a><br>\n各类编程资源:<br>\n大礼包（什么都有）<br>\n<a href=\"https://github.com/bayandin/awesome-awesomeness\" target=\"_blank\" rel=\"noopener\">https://github.com/bayandin/awesome-awesomeness</a><br>\nbash-handbook<br>\n<a href=\"https://github.com/denysdovhan/bash-handbook\" target=\"_blank\" rel=\"noopener\">https://github.com/denysdovhan/bash-handbook</a><br>\npython资源大全<br>\n<a href=\"https://github.com/jobbole/awesome-python-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/jobbole/awesome-python-cn</a><br>\ngit学习资料<br>\n<a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"noopener\">https://github.com/xirong/my-git</a><br>\n安卓开源代码解析<br>\n<a href=\"https://github.com/android-cn/android-open-project-analysis\" target=\"_blank\" rel=\"noopener\">https://github.com/android-cn/android-open-project-analysis</a><br>\npython框架，库，资源大合集<br>\n<a href=\"https://github.com/vinta/awesome-python\" target=\"_blank\" rel=\"noopener\">https://github.com/vinta/awesome-python</a><br>\nJS 正则表达式库（用于简化构造复杂的JS正则表达式）<br>\n<a href=\"https://github.com/VerbalExpressions/JSVerbalExpressions\" target=\"_blank\" rel=\"noopener\">https://github.com/VerbalExpressions/JSVerbalExpressions</a><br>\nPython：<br>\npython 正则表达式库（用于简化构造复杂的python正则表达式）<br>\n<a href=\"https://github.com/VerbalExpressions/PythonVerbalExpressions\" target=\"_blank\" rel=\"noopener\">https://github.com/VerbalExpressions/PythonVerbalExpressions</a><br>\npython任务管理以及命令执行库<br>\n<a href=\"https://github.com/pyinvoke/invoke\" target=\"_blank\" rel=\"noopener\">https://github.com/pyinvoke/invoke</a><br>\npython exe打包库<br>\n<a href=\"https://github.com/pyinstaller/pyinstaller\" target=\"_blank\" rel=\"noopener\">https://github.com/pyinstaller/pyinstaller</a><br>\npy3 爬虫框架<br>\n<a href=\"https://github.com/orf/cyborg\" target=\"_blank\" rel=\"noopener\">https://github.com/orf/cyborg</a><br>\n一个提供底层接口数据包编程和网络协议支持的python库<br>\n<a href=\"https://github.com/CoreSecurity/impacket\" target=\"_blank\" rel=\"noopener\">https://github.com/CoreSecurity/impacket</a><br>\npython requests 库<br>\n<a href=\"https://github.com/kennethreitz/requests\" target=\"_blank\" rel=\"noopener\">https://github.com/kennethreitz/requests</a><br>\npython 实用工具合集<br>\n<a href=\"https://github.com/mahmoud/boltons\" target=\"_blank\" rel=\"noopener\">https://github.com/mahmoud/boltons</a><br>\npython爬虫系统<br>\n<a href=\"https://github.com/binux/pyspider\" target=\"_blank\" rel=\"noopener\">https://github.com/binux/pyspider</a><br>\nctf向 python工具包<br>\n<a href=\"https://github.com/P1kachu/v0lt\" target=\"_blank\" rel=\"noopener\">https://github.com/P1kachu/v0lt</a><br>\n科学上网：<br>\n科学上网工具<br>\n<a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"noopener\">https://github.com/XX-net/XX-Net</a><br>\n福利：<br>\n微信自动抢红包动态库<br>\n<a href=\"https://github.com/east520/AutoGetRedEnv\" target=\"_blank\" rel=\"noopener\">https://github.com/east520/AutoGetRedEnv</a><br>\n微信抢红包插件（安卓版）<br>\n<a href=\"https://github.com/geeeeeeeeek/WeChatLuckyMoney\" target=\"_blank\" rel=\"noopener\">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a><br>\n神器<br>\n<a href=\"https://github.com/yangyangwithgnu/hardseed\" target=\"_blank\" rel=\"noopener\">https://github.com/yangyangwithgnu/hardseed</a><br>\n本文出自 RedFree’s Blog，转载时请注明出处及相应链接。<br>\n本文永久链接: <a href=\"http://py4.me/blog/?p=124\" target=\"_blank\" rel=\"noopener\">http://py4.me/blog/?p=124</a></p>\n","site":{"data":{}},"excerpt":"<p>漏洞及渗透练习平台：<br>\nWebGoat漏洞练习环境<br>\n<a href=\"https://github.com/WebGoat/WebGoat\" target=\"_blank\" rel=\"noopener\">https://github.com/WebGoat/WebGoat</a><br>\n<a href=\"https://github.com/WebGoat/WebGoat-Legacy\" target=\"_blank\" rel=\"noopener\">https://github.com/WebGoat/WebGoat-Legacy</a><br>\nDamn Vulnerable Web Application(漏洞练习平台)<br>\n<a href=\"https://github.com/RandomStorm/DVWA\" target=\"_blank\" rel=\"noopener\">https://github.com/RandomStorm/DVWA</a><br>\n数据库注入练习平台<br>\n<a href=\"https://github.com/Audi-1/sqli-labs\" target=\"_blank\" rel=\"noopener\">https://github.com/Audi-1/sqli-labs</a><br>\n用node编写的漏洞练习平台，like OWASP Node Goat<br>\n<a href=\"https://github.com/cr0hn/vulnerable-node\" target=\"_blank\" rel=\"noopener\">https://github.com/cr0hn/vulnerable-node</a></p>","more":"<p>花式扫描器 ：<br>\n端口扫描器Nmap<br>\n<a href=\"https://github.com/nmap/nmap\" target=\"_blank\" rel=\"noopener\">https://github.com/nmap/nmap</a><br>\n本地网络扫描器<br>\n<a href=\"https://github.com/SkyLined/LocalNetworkScanner\" target=\"_blank\" rel=\"noopener\">https://github.com/SkyLined/LocalNetworkScanner</a><br>\n子域名扫描器<br>\n<a href=\"https://github.com/lijiejie/subDomainsBrute\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/subDomainsBrute</a><br>\n漏洞路由扫描器<br>\n<a href=\"https://github.com/jh00nbr/Routerhunter-2.0\" target=\"_blank\" rel=\"noopener\">https://github.com/jh00nbr/Routerhunter-2.0</a><br>\n迷你批量信息泄漏扫描脚本<br>\n<a href=\"https://github.com/lijiejie/BBScan\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/BBScan</a><br>\nWaf类型检测工具<br>\n<a href=\"https://github.com/EnableSecurity/wafw00f\" target=\"_blank\" rel=\"noopener\">https://github.com/EnableSecurity/wafw00f</a><br>\n信息搜集工具 :<br>\n社工插件，可查找以email、phone、username的注册的所有网站账号信息<br>\n<a href=\"https://github.com/n0tr00t/Sreg\" target=\"_blank\" rel=\"noopener\">https://github.com/n0tr00t/Sreg</a><br>\nGithub信息搜集，可实时扫描查询git最新上传有关邮箱账号密码信息<br>\n<a href=\"https://github.com/sea-god/gitscan\" target=\"_blank\" rel=\"noopener\">https://github.com/sea-god/gitscan</a><br>\ngithub Repo信息搜集工具<br>\n<a href=\"https://github.com/metac0rtex/GitHarvester\" target=\"_blank\" rel=\"noopener\">https://github.com/metac0rtex/GitHarvester</a><br>\nWEB：<br>\nwebshell大合集<br>\n<a href=\"https://github.com/tennc/webshell\" target=\"_blank\" rel=\"noopener\">https://github.com/tennc/webshell</a><br>\n渗透以及web攻击脚本<br>\n<a href=\"https://github.com/brianwrf/hackUtils\" target=\"_blank\" rel=\"noopener\">https://github.com/brianwrf/hackUtils</a><br>\nweb渗透小工具大合集<br>\n<a href=\"https://github.com/rootphantomer/hack_tools_for_me\" target=\"_blank\" rel=\"noopener\">https://github.com/rootphantomer/hack_tools_for_me</a><br>\nXSS数据接收平台<br>\n<a href=\"https://github.com/firesunCN/BlueLotus_XSSReceiver\" target=\"_blank\" rel=\"noopener\">https://github.com/firesunCN/BlueLotus_XSSReceiver</a><br>\nXSS与CSRF工具<br>\n<a href=\"https://github.com/evilcos/xssor\" target=\"_blank\" rel=\"noopener\">https://github.com/evilcos/xssor</a><br>\nShort for command injection exploiter，web向命令注入检测工具<br>\n<a href=\"https://github.com/stasinopoulos/commix\" target=\"_blank\" rel=\"noopener\">https://github.com/stasinopoulos/commix</a><br>\n数据库注入工具<br>\n<a href=\"https://github.com/sqlmapproject/sqlmap\" target=\"_blank\" rel=\"noopener\">https://github.com/sqlmapproject/sqlmap</a><br>\nWeb代理，通过加载sqlmap api进行sqli实时检测<br>\n<a href=\"https://github.com/zt2/sqli-hunter\" target=\"_blank\" rel=\"noopener\">https://github.com/zt2/sqli-hunter</a><br>\n新版中国菜刀<br>\n<a href=\"https://github.com/Chora10/Cknife\" target=\"_blank\" rel=\"noopener\">https://github.com/Chora10/Cknife</a><br>\n.git泄露利用EXP<br>\n<a href=\"https://github.com/lijiejie/GitHack\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/GitHack</a><br>\n浏览器攻击框架<br>\n<a href=\"https://github.com/beefproject/beef\" target=\"_blank\" rel=\"noopener\">https://github.com/beefproject/beef</a><br>\n自动化绕过WAF脚本<br>\n<a href=\"https://github.com/khalilbijjou/WAFNinja\" target=\"_blank\" rel=\"noopener\">https://github.com/khalilbijjou/WAFNinja</a><br>\nhttp命令行客户端，可以从命令行构造发送各种http请求（类似于Curl）<br>\n<a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"noopener\">https://github.com/jkbrzt/httpie</a><br>\n浏览器调试利器<br>\n<a href=\"https://github.com/firebug/firebug\" target=\"_blank\" rel=\"noopener\">https://github.com/firebug/firebug</a><br>\n一款开源WAF<br>\n<a href=\"https://github.com/SpiderLabs/ModSecurity\" target=\"_blank\" rel=\"noopener\">https://github.com/SpiderLabs/ModSecurity</a><br>\nwindows域渗透工具：<br>\nwindows渗透神器<br>\n<a href=\"https://github.com/gentilkiwi/mimikatz\" target=\"_blank\" rel=\"noopener\">https://github.com/gentilkiwi/mimikatz</a><br>\nPowershell渗透库合集<br>\n<a href=\"https://github.com/PowerShellMafia/PowerSploit\" target=\"_blank\" rel=\"noopener\">https://github.com/PowerShellMafia/PowerSploit</a><br>\nPowershell tools合集<br>\n<a href=\"https://github.com/clymb3r/PowerShell\" target=\"_blank\" rel=\"noopener\">https://github.com/clymb3r/PowerShell</a><br>\nFuzz:<br>\nWeb向Fuzz工具<br>\n<a href=\"https://github.com/xmendez/wfuzz\" target=\"_blank\" rel=\"noopener\">https://github.com/xmendez/wfuzz</a><br>\nHTTP暴力破解，撞库攻击脚本<br>\n<a href=\"https://github.com/lijiejie/htpwdScan\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/htpwdScan</a><br>\n漏洞利用及攻击框架：<br>\nmsf<br>\n<a href=\"https://github.com/rapid7/metasploit-framework\" target=\"_blank\" rel=\"noopener\">https://github.com/rapid7/metasploit-framework</a><br>\nPoc调用框架，可加载Pocsuite,Tangscan，Beebeeto等<br>\n<a href=\"https://github.com/erevus-cn/pocscan\" target=\"_blank\" rel=\"noopener\">https://github.com/erevus-cn/pocscan</a><br>\nPocsuite<br>\n<a href=\"https://github.com/knownsec/Pocsuite\" target=\"_blank\" rel=\"noopener\">https://github.com/knownsec/Pocsuite</a><br>\nBeebeeto<br>\n<a href=\"https://github.com/n0tr00t/Beebeeto-framework\" target=\"_blank\" rel=\"noopener\">https://github.com/n0tr00t/Beebeeto-framework</a><br>\n漏洞POC&amp;EXP:<br>\nExploitDB官方git版本<br>\n<a href=\"https://github.com/offensive-security/exploit-database\" target=\"_blank\" rel=\"noopener\">https://github.com/offensive-security/exploit-database</a><br>\nphp漏洞代码分析<br>\n<a href=\"https://github.com/80vul/phpcodz\" target=\"_blank\" rel=\"noopener\">https://github.com/80vul/phpcodz</a><br>\nSimple test for CVE-2016-2107<br>\n<a href=\"https://github.com/FiloSottile/CVE-2016-2107\" target=\"_blank\" rel=\"noopener\">https://github.com/FiloSottile/CVE-2016-2107</a><br>\nCVE-2015-7547 POC<br>\n<a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"noopener\">https://github.com/fjserna/CVE-2015-7547</a><br>\nJAVA反序列化POC生成工具<br>\n<a href=\"https://github.com/frohoff/ysoserial\" target=\"_blank\" rel=\"noopener\">https://github.com/frohoff/ysoserial</a><br>\nJAVA反序列化EXP<br>\n<a href=\"https://github.com/foxglovesec/JavaUnserializeExploits\" target=\"_blank\" rel=\"noopener\">https://github.com/foxglovesec/JavaUnserializeExploits</a><br>\nJenkins CommonCollections EXP<br>\n<a href=\"https://github.com/CaledoniaProject/jenkins-cli-exploit\" target=\"_blank\" rel=\"noopener\">https://github.com/CaledoniaProject/jenkins-cli-exploit</a><br>\nCVE-2015-2426 EXP (windows内核提权)<br>\n<a href=\"https://github.com/vlad902/hacking-team-windows-kernel-lpe\" target=\"_blank\" rel=\"noopener\">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a><br>\nuse docker to show web attack(php本地文件包含结合phpinfo getshell 以及ssrf结合curl的利用演示)<br>\n<a href=\"https://github.com/hxer/vulnapp\" target=\"_blank\" rel=\"noopener\">https://github.com/hxer/vulnapp</a><br>\nphp7缓存覆写漏洞Demo及相关工具<br>\n<a href=\"https://github.com/GoSecure/php7-opcache-override\" target=\"_blank\" rel=\"noopener\">https://github.com/GoSecure/php7-opcache-override</a><br>\nXcodeGhost木马样本<br>\n<a href=\"https://github.com/XcodeGhostSource/XcodeGhost\" target=\"_blank\" rel=\"noopener\">https://github.com/XcodeGhostSource/XcodeGhost</a><br>\n中间人攻击及钓鱼<br>\n中间人攻击框架<br>\n<a href=\"https://github.com/secretsquirrel/the-backdoor-factory\" target=\"_blank\" rel=\"noopener\">https://github.com/secretsquirrel/the-backdoor-factory</a><br>\n<a href=\"https://github.com/secretsquirrel/BDFProxy\" target=\"_blank\" rel=\"noopener\">https://github.com/secretsquirrel/BDFProxy</a><br>\n<a href=\"https://github.com/byt3bl33d3r/MITMf\" target=\"_blank\" rel=\"noopener\">https://github.com/byt3bl33d3r/MITMf</a><br>\nInject code, jam wifi, and spy on wifi users<br>\n<a href=\"https://github.com/DanMcInerney/LANs.py\" target=\"_blank\" rel=\"noopener\">https://github.com/DanMcInerney/LANs.py</a><br>\n可扩展的中间人代理工具<br>\n<a href=\"https://github.com/intrepidusgroup/mallory\" target=\"_blank\" rel=\"noopener\">https://github.com/intrepidusgroup/mallory</a><br>\nwifi钓鱼<br>\n<a href=\"https://github.com/sophron/wifiphisher\" target=\"_blank\" rel=\"noopener\">https://github.com/sophron/wifiphisher</a><br>\n密码破解：<br>\n密码破解工具<br>\n<a href=\"https://github.com/shinnok/johnny\" target=\"_blank\" rel=\"noopener\">https://github.com/shinnok/johnny</a><br>\n本地存储的各类密码提取利器<br>\n<a href=\"https://github.com/AlessandroZ/LaZagne\" target=\"_blank\" rel=\"noopener\">https://github.com/AlessandroZ/LaZagne</a><br>\n二进制及代码分析工具：<br>\n二进制分析工具<br>\n<a href=\"https://github.com/devttys0/binwalk\" target=\"_blank\" rel=\"noopener\">https://github.com/devttys0/binwalk</a><br>\n系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息<br>\n<a href=\"https://github.com/quarkslab/binmap\" target=\"_blank\" rel=\"noopener\">https://github.com/quarkslab/binmap</a><br>\nrp++ is a full-cpp written tool that aims to find ROP sequences in PE/Elf/Mach-O (doesn’t support the FAT binaries) x86/x64 binaries.<br>\n<a href=\"https://github.com/0vercl0k/rp\" target=\"_blank\" rel=\"noopener\">https://github.com/0vercl0k/rp</a><br>\nWindows Exploit Development工具<br>\n<a href=\"https://github.com/lillypad/badger\" target=\"_blank\" rel=\"noopener\">https://github.com/lillypad/badger</a><br>\n二进制静态分析工具（python）<br>\n<a href=\"https://github.com/bdcht/amoco\" target=\"_blank\" rel=\"noopener\">https://github.com/bdcht/amoco</a><br>\nPython Exploit Development Assistance for GDB<br>\n<a href=\"https://github.com/longld/peda\" target=\"_blank\" rel=\"noopener\">https://github.com/longld/peda</a><br>\n对BillGates Linux Botnet系木马活动的监控工具<br>\n<a href=\"https://github.com/ValdikSS/billgates-botnet-tracker\" target=\"_blank\" rel=\"noopener\">https://github.com/ValdikSS/billgates-botnet-tracker</a><br>\n木马配置参数提取工具<br>\n<a href=\"https://github.com/kevthehermit/RATDecoders\" target=\"_blank\" rel=\"noopener\">https://github.com/kevthehermit/RATDecoders</a><br>\nShellphish编写的二进制分析工具（CTF向）<br>\n<a href=\"https://github.com/angr/angr\" target=\"_blank\" rel=\"noopener\">https://github.com/angr/angr</a><br>\n针对python的静态代码分析工具<br>\n<a href=\"https://github.com/yinwang0/pysonar2\" target=\"_blank\" rel=\"noopener\">https://github.com/yinwang0/pysonar2</a><br>\n一个自动化的脚本（shell）分析工具，用来给出警告和建议<br>\n<a href=\"https://github.com/koalaman/shellcheck\" target=\"_blank\" rel=\"noopener\">https://github.com/koalaman/shellcheck</a><br>\n基于AST变换的简易Javascript反混淆辅助工具<br>\n<a href=\"https://github.com/ChiChou/etacsufbo\" target=\"_blank\" rel=\"noopener\">https://github.com/ChiChou/etacsufbo</a><br>\nEXP编写框架及工具：<br>\n二进制EXP编写工具<br>\n<a href=\"https://github.com/t00sh/rop-tool\" target=\"_blank\" rel=\"noopener\">https://github.com/t00sh/rop-tool</a><br>\nCTF Pwn 类题目脚本编写框架<br>\n<a href=\"https://github.com/Gallopsled/pwntools\" target=\"_blank\" rel=\"noopener\">https://github.com/Gallopsled/pwntools</a><br>\nan easy-to-use io library for pwning development<br>\n<a href=\"https://github.com/zTrix/zio\" target=\"_blank\" rel=\"noopener\">https://github.com/zTrix/zio</a><br>\n跨平台注入工具（ Inject JavaScript to explore native apps on Windows, Mac, Linux, iOS and Android.）<br>\n<a href=\"https://github.com/frida/frida\" target=\"_blank\" rel=\"noopener\">https://github.com/frida/frida</a><br>\n隐写：<br>\n隐写检测工具<br>\n<a href=\"https://github.com/abeluck/stegdetect\" target=\"_blank\" rel=\"noopener\">https://github.com/abeluck/stegdetect</a><br>\n各类安全资料:<br>\n域渗透教程<br>\n<a href=\"https://github.com/l3m0n/pentest_study\" target=\"_blank\" rel=\"noopener\">https://github.com/l3m0n/pentest_study</a><br>\npython security教程（原文链接http://www.primalsecurity.net/tutorials/python-tutorials/）<br>\n<a href=\"https://github.com/smartFlash/pySecurity\" target=\"_blank\" rel=\"noopener\">https://github.com/smartFlash/pySecurity</a><br>\ndata_hacking合集<br>\n<a href=\"https://github.com/ClickSecurity/data_hacking\" target=\"_blank\" rel=\"noopener\">https://github.com/ClickSecurity/data_hacking</a><br>\nmobile-security-wiki<br>\n<a href=\"https://github.com/exploitprotocol/mobile-security-wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/exploitprotocol/mobile-security-wiki</a><br>\n书籍《reverse-engineering-for-beginners》<br>\n<a href=\"https://github.com/veficos/reverse-engineering-for-beginners\" target=\"_blank\" rel=\"noopener\">https://github.com/veficos/reverse-engineering-for-beginners</a><br>\n一些信息安全标准及设备配置<br>\n<a href=\"https://github.com/luyg24/IT_security\" target=\"_blank\" rel=\"noopener\">https://github.com/luyg24/IT_security</a><br>\nAPT相关笔记<br>\n<a href=\"https://github.com/kbandla/APTnotes\" target=\"_blank\" rel=\"noopener\">https://github.com/kbandla/APTnotes</a><br>\nKcon资料<br>\n<a href=\"https://github.com/knownsec/KCon\" target=\"_blank\" rel=\"noopener\">https://github.com/knownsec/KCon</a><br>\nctf及黑客资源合集<br>\n<a href=\"https://github.com/bt3gl/My-Gray-Hacker-Resources\" target=\"_blank\" rel=\"noopener\">https://github.com/bt3gl/My-Gray-Hacker-Resources</a><br>\nctf和安全工具大合集<br>\n<a href=\"https://github.com/zardus/ctf-tools\" target=\"_blank\" rel=\"noopener\">https://github.com/zardus/ctf-tools</a><br>\n《DO NOT FUCK WITH A HACKER》<br>\n<a href=\"https://github.com/citypw/DNFWAH\" target=\"_blank\" rel=\"noopener\">https://github.com/citypw/DNFWAH</a><br>\n各类CTF资源<br>\n近年ctf writeup大全<br>\n<a href=\"https://github.com/ctfs/write-ups-2016\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2016</a><br>\n<a href=\"https://github.com/ctfs/write-ups-2015\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2015</a><br>\n<a href=\"https://github.com/ctfs/write-ups-2014\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/write-ups-2014</a><br>\nfbctf竞赛平台Demo<br>\n<a href=\"https://github.com/facebook/fbctf\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/fbctf</a><br>\nctf Resources<br>\n<a href=\"https://github.com/ctfs/resources\" target=\"_blank\" rel=\"noopener\">https://github.com/ctfs/resources</a><br>\n各类编程资源:<br>\n大礼包（什么都有）<br>\n<a href=\"https://github.com/bayandin/awesome-awesomeness\" target=\"_blank\" rel=\"noopener\">https://github.com/bayandin/awesome-awesomeness</a><br>\nbash-handbook<br>\n<a href=\"https://github.com/denysdovhan/bash-handbook\" target=\"_blank\" rel=\"noopener\">https://github.com/denysdovhan/bash-handbook</a><br>\npython资源大全<br>\n<a href=\"https://github.com/jobbole/awesome-python-cn\" target=\"_blank\" rel=\"noopener\">https://github.com/jobbole/awesome-python-cn</a><br>\ngit学习资料<br>\n<a href=\"https://github.com/xirong/my-git\" target=\"_blank\" rel=\"noopener\">https://github.com/xirong/my-git</a><br>\n安卓开源代码解析<br>\n<a href=\"https://github.com/android-cn/android-open-project-analysis\" target=\"_blank\" rel=\"noopener\">https://github.com/android-cn/android-open-project-analysis</a><br>\npython框架，库，资源大合集<br>\n<a href=\"https://github.com/vinta/awesome-python\" target=\"_blank\" rel=\"noopener\">https://github.com/vinta/awesome-python</a><br>\nJS 正则表达式库（用于简化构造复杂的JS正则表达式）<br>\n<a href=\"https://github.com/VerbalExpressions/JSVerbalExpressions\" target=\"_blank\" rel=\"noopener\">https://github.com/VerbalExpressions/JSVerbalExpressions</a><br>\nPython：<br>\npython 正则表达式库（用于简化构造复杂的python正则表达式）<br>\n<a href=\"https://github.com/VerbalExpressions/PythonVerbalExpressions\" target=\"_blank\" rel=\"noopener\">https://github.com/VerbalExpressions/PythonVerbalExpressions</a><br>\npython任务管理以及命令执行库<br>\n<a href=\"https://github.com/pyinvoke/invoke\" target=\"_blank\" rel=\"noopener\">https://github.com/pyinvoke/invoke</a><br>\npython exe打包库<br>\n<a href=\"https://github.com/pyinstaller/pyinstaller\" target=\"_blank\" rel=\"noopener\">https://github.com/pyinstaller/pyinstaller</a><br>\npy3 爬虫框架<br>\n<a href=\"https://github.com/orf/cyborg\" target=\"_blank\" rel=\"noopener\">https://github.com/orf/cyborg</a><br>\n一个提供底层接口数据包编程和网络协议支持的python库<br>\n<a href=\"https://github.com/CoreSecurity/impacket\" target=\"_blank\" rel=\"noopener\">https://github.com/CoreSecurity/impacket</a><br>\npython requests 库<br>\n<a href=\"https://github.com/kennethreitz/requests\" target=\"_blank\" rel=\"noopener\">https://github.com/kennethreitz/requests</a><br>\npython 实用工具合集<br>\n<a href=\"https://github.com/mahmoud/boltons\" target=\"_blank\" rel=\"noopener\">https://github.com/mahmoud/boltons</a><br>\npython爬虫系统<br>\n<a href=\"https://github.com/binux/pyspider\" target=\"_blank\" rel=\"noopener\">https://github.com/binux/pyspider</a><br>\nctf向 python工具包<br>\n<a href=\"https://github.com/P1kachu/v0lt\" target=\"_blank\" rel=\"noopener\">https://github.com/P1kachu/v0lt</a><br>\n科学上网：<br>\n科学上网工具<br>\n<a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"noopener\">https://github.com/XX-net/XX-Net</a><br>\n福利：<br>\n微信自动抢红包动态库<br>\n<a href=\"https://github.com/east520/AutoGetRedEnv\" target=\"_blank\" rel=\"noopener\">https://github.com/east520/AutoGetRedEnv</a><br>\n微信抢红包插件（安卓版）<br>\n<a href=\"https://github.com/geeeeeeeeek/WeChatLuckyMoney\" target=\"_blank\" rel=\"noopener\">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a><br>\n神器<br>\n<a href=\"https://github.com/yangyangwithgnu/hardseed\" target=\"_blank\" rel=\"noopener\">https://github.com/yangyangwithgnu/hardseed</a><br>\n本文出自 RedFree’s Blog，转载时请注明出处及相应链接。<br>\n本文永久链接: <a href=\"http://py4.me/blog/?p=124\" target=\"_blank\" rel=\"noopener\">http://py4.me/blog/?p=124</a></p>"},{"title":"AsyncTask源码了解","date":"2018-04-11T03:13:33.000Z","_content":"\n简单了解下AsyncTask源码，作为以后复习时用。\n\n\n<!-- more -->\n\n>package: android.os;\n\n功能：在进行异步请求时，解决子线程和主线程之间的通讯等。\n\n此类为：抽象类，因此不能实例化，需要继承自它，再使用。\n\n#### 源码解析\n\n##### AsyncTask 类包含：\n \n - 3个静态内部类 [AsyncTaskResult、InternalHandler、SerialExector]\n - 1个静态内部抽象类 [WorkerRunnable]\n - 1个枚举类 [Status]\n \n##### 线程池部分：\n\n```\n /**\n     * An {@link Executor} that can be used to execute tasks in parallel.\n     */\n    public static final Executor THREAD_POOL_EXECUTOR;\n\n    static {\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n                sPoolWorkQueue, sThreadFactory);\n        threadPoolExecutor.allowCoreThreadTimeOut(true);\n        THREAD_POOL_EXECUTOR = threadPoolExecutor;\n    }\n       \n```\n其中参数：\n\n```\n\tprivate static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();\n\t// 核心线程数最小为2， 最大为4，根据cpu的核数确定。\n    private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));\n    // 最大线程池数量为 cpu 的核数的2倍 + 1\n    private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;\n    // 非核心线程数存活时间为30s\n    private static final int KEEP_ALIVE_SECONDS = 30;  \n```\n\n```\n阻塞队列长度为128\nprivate static final BlockingQueue<Runnable> sPoolWorkQueue =\n            new LinkedBlockingQueue<Runnable>(128);\n\n```\n\n##### 使用中重要的方法：\n\n```\n// 任务开始前需要的操作：主线程\nprotected void onPreExecute() {}\n// 抽象类，必须要实现。 耗时的操作：子线程\nprotected abstract Result doInBackground(Params... params);\n// 后台任务执行的进度，用于显示进度条：主线程\nprotected void onProgressUpdate(Progress... values) {}\n// 任务执行完成后，需要调用的操作：主线程\nprotected void onPostExecute(Result result) {}\n\n```\n\n##### execute执行方法：\n\n```\n第一种：需要传入调度器和参数\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params)\n第二种：内部调用了第一种方式，使用默认的调度器，传入参数即可\npublic final AsyncTask<Params, Progress, Result> execute(Params... params) \n            \n第三种：通过默认调度器执行runnable方法\npublic static void execute(Runnable runnable)\n\n```\n\n##### 默认调度器：sDefaultExecutor\n\n```\nprivate static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;\n\npublic static final Executor SERIAL_EXECUTOR = new SerialExecutor();\n\nprivate static class SerialExecutor implements Executor {\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n        Runnable mActive;\n\n        public synchronized void execute(final Runnable r) {\n            mTasks.offer(new Runnable() {\n                public void run() {\n                    try {\n                        r.run();\n                    } finally {\n                        scheduleNext();\n                    }\n                }\n            });\n            if (mActive == null) {\n                scheduleNext();\n            }\n        }\n\n        protected synchronized void scheduleNext() {\n            if ((mActive = mTasks.poll()) != null) {\n                THREAD_POOL_EXECUTOR.execute(mActive);\n            }\n        }\n    }\n\n\n```\nSerialExecutor 介绍\n\n1. SerialExecutor是通过ArrayDeque这个队列管理Runnable的，当我们启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null, 第一次运行肯定是null了，于是调用scheduleNext()方法。这个队列会从头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR.execute(mActive)方法，去执行取出的Runnable对象。\n2. execute 和 scheduleNext 都被synchronized修饰，因此这两个方法拥有同一把对象锁，不可以同时运行，在execute方法中，r.run()方法为子线程中的耗时任务，当执行完成后，最终会进入到finally中调用scheduleNext去取下一个top任务。\n3. mTasks.offer是每次来了task都放到ArrayDeque的尾部，保证先来的先被执行。\n\n##### executeOnExecutor()方法：\n\n```\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params) {\n        if (mStatus != Status.PENDING) {\n            switch (mStatus) {\n                case RUNNING:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task is already running.\");\n                case FINISHED:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task has already been executed \"\n                            + \"(a task can be executed only once)\");\n            }\n        }\n\n        mStatus = Status.RUNNING;\n\n        onPreExecute();\n\n        mWorker.mParams = params;\n        exec.execute(mFuture);\n\n        return this;\n    }\n```\n\nexecuteOnExecutor方法中执行了onPreExecute(),然后执行了exec.execute(mFuture);\n\n其中Future为：\n\n```\nmFuture = new FutureTask<Result>(mWorker) {\n            @Override\n            protected void done() {\n                try {\n                    postResultIfNotInvoked(get());\n                } catch (InterruptedException e) {\n                    android.util.Log.w(LOG_TAG, e);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(\"An error occurred while executing doInBackground()\",\n                            e.getCause());\n                } catch (CancellationException e) {\n                    postResultIfNotInvoked(null);\n                }\n            }\n        };\n```\n\n从executeOnExecutor方法执行中可以看出，AsyncTask内，在主线程中先执行了onPreExecute()方法，然后在线程中调用了doInBackground()方法，任务执行完成后，通过postResult 或者 postResultIfNotInvoked 方法发送消息到主线程\n\n\n##### postResult方法\n\n```\nprivate void postResultIfNotInvoked(Result result) {\n        final boolean wasTaskInvoked = mTaskInvoked.get();\n        if (!wasTaskInvoked) {\n            postResult(result);\n        }\n    }\n\n    private Result postResult(Result result) {\n        @SuppressWarnings(\"unchecked\")\n        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,\n                new AsyncTaskResult<Result>(this, result));\n        message.sendToTarget();\n        return result;\n    }\n```\n\npostResult方法的作用即为任务结束后，发送message给主线程，反馈Result结果。\n\n```\n private static class InternalHandler extends Handler {\n        public InternalHandler(Looper looper) {\n            super(looper);\n        }\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n        @Override\n        public void handleMessage(Message msg) {\n            AsyncTaskResult<?> result = (AsyncTaskResult<?>) msg.obj;\n            switch (msg.what) {\n                case MESSAGE_POST_RESULT:\n                    // There is only one result\n                    result.mTask.finish(result.mData[0]);\n                    break;\n                case MESSAGE_POST_PROGRESS:\n                    result.mTask.onProgressUpdate(result.mData);\n                    break;\n            }\n        }\n    }\n\n```\n接收结果的为InternalHandler类，接收到结果并调用mTask的finish方法并把结果返回过去。\n\n##### finish方法\n\n\n```\nprivate void finish(Result result) {\n        if (isCancelled()) {\n            onCancelled(result);\n        } else {\n            onPostExecute(result);\n        }\n        mStatus = Status.FINISHED;\n    }\n```\n当Task结束后，会调用finish方法，如AsyncTask已经被取消，则会返回onCancelled回调，当未被取消则会调用onPostExecute回调。因此，onPostExecute回调也是主线程。\n\n##### 总结：\n\n过去一直在用AsyncTask，也知道怎样调用，但并不知道它的工作原理，经过我们分析源码可以看到，AsyncTask为我们做了很好的线程管理(在应用中滥用线程，会造成线程过多引起很严重的问题)，提供了执行前，执行中进度条更新，执行后等回调操作，便利了我们使用。 \n","source":"_posts/AsyncTask源码了解.md","raw":"---\ntitle: AsyncTask源码了解\ndate: 2018-04-11 11:13:33\ntags: [AsyncTask, android]\ncategories: android\n---\n\n简单了解下AsyncTask源码，作为以后复习时用。\n\n\n<!-- more -->\n\n>package: android.os;\n\n功能：在进行异步请求时，解决子线程和主线程之间的通讯等。\n\n此类为：抽象类，因此不能实例化，需要继承自它，再使用。\n\n#### 源码解析\n\n##### AsyncTask 类包含：\n \n - 3个静态内部类 [AsyncTaskResult、InternalHandler、SerialExector]\n - 1个静态内部抽象类 [WorkerRunnable]\n - 1个枚举类 [Status]\n \n##### 线程池部分：\n\n```\n /**\n     * An {@link Executor} that can be used to execute tasks in parallel.\n     */\n    public static final Executor THREAD_POOL_EXECUTOR;\n\n    static {\n        ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,\n                sPoolWorkQueue, sThreadFactory);\n        threadPoolExecutor.allowCoreThreadTimeOut(true);\n        THREAD_POOL_EXECUTOR = threadPoolExecutor;\n    }\n       \n```\n其中参数：\n\n```\n\tprivate static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();\n\t// 核心线程数最小为2， 最大为4，根据cpu的核数确定。\n    private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));\n    // 最大线程池数量为 cpu 的核数的2倍 + 1\n    private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;\n    // 非核心线程数存活时间为30s\n    private static final int KEEP_ALIVE_SECONDS = 30;  \n```\n\n```\n阻塞队列长度为128\nprivate static final BlockingQueue<Runnable> sPoolWorkQueue =\n            new LinkedBlockingQueue<Runnable>(128);\n\n```\n\n##### 使用中重要的方法：\n\n```\n// 任务开始前需要的操作：主线程\nprotected void onPreExecute() {}\n// 抽象类，必须要实现。 耗时的操作：子线程\nprotected abstract Result doInBackground(Params... params);\n// 后台任务执行的进度，用于显示进度条：主线程\nprotected void onProgressUpdate(Progress... values) {}\n// 任务执行完成后，需要调用的操作：主线程\nprotected void onPostExecute(Result result) {}\n\n```\n\n##### execute执行方法：\n\n```\n第一种：需要传入调度器和参数\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params)\n第二种：内部调用了第一种方式，使用默认的调度器，传入参数即可\npublic final AsyncTask<Params, Progress, Result> execute(Params... params) \n            \n第三种：通过默认调度器执行runnable方法\npublic static void execute(Runnable runnable)\n\n```\n\n##### 默认调度器：sDefaultExecutor\n\n```\nprivate static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;\n\npublic static final Executor SERIAL_EXECUTOR = new SerialExecutor();\n\nprivate static class SerialExecutor implements Executor {\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n        Runnable mActive;\n\n        public synchronized void execute(final Runnable r) {\n            mTasks.offer(new Runnable() {\n                public void run() {\n                    try {\n                        r.run();\n                    } finally {\n                        scheduleNext();\n                    }\n                }\n            });\n            if (mActive == null) {\n                scheduleNext();\n            }\n        }\n\n        protected synchronized void scheduleNext() {\n            if ((mActive = mTasks.poll()) != null) {\n                THREAD_POOL_EXECUTOR.execute(mActive);\n            }\n        }\n    }\n\n\n```\nSerialExecutor 介绍\n\n1. SerialExecutor是通过ArrayDeque这个队列管理Runnable的，当我们启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null, 第一次运行肯定是null了，于是调用scheduleNext()方法。这个队列会从头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR.execute(mActive)方法，去执行取出的Runnable对象。\n2. execute 和 scheduleNext 都被synchronized修饰，因此这两个方法拥有同一把对象锁，不可以同时运行，在execute方法中，r.run()方法为子线程中的耗时任务，当执行完成后，最终会进入到finally中调用scheduleNext去取下一个top任务。\n3. mTasks.offer是每次来了task都放到ArrayDeque的尾部，保证先来的先被执行。\n\n##### executeOnExecutor()方法：\n\n```\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params) {\n        if (mStatus != Status.PENDING) {\n            switch (mStatus) {\n                case RUNNING:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task is already running.\");\n                case FINISHED:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task has already been executed \"\n                            + \"(a task can be executed only once)\");\n            }\n        }\n\n        mStatus = Status.RUNNING;\n\n        onPreExecute();\n\n        mWorker.mParams = params;\n        exec.execute(mFuture);\n\n        return this;\n    }\n```\n\nexecuteOnExecutor方法中执行了onPreExecute(),然后执行了exec.execute(mFuture);\n\n其中Future为：\n\n```\nmFuture = new FutureTask<Result>(mWorker) {\n            @Override\n            protected void done() {\n                try {\n                    postResultIfNotInvoked(get());\n                } catch (InterruptedException e) {\n                    android.util.Log.w(LOG_TAG, e);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(\"An error occurred while executing doInBackground()\",\n                            e.getCause());\n                } catch (CancellationException e) {\n                    postResultIfNotInvoked(null);\n                }\n            }\n        };\n```\n\n从executeOnExecutor方法执行中可以看出，AsyncTask内，在主线程中先执行了onPreExecute()方法，然后在线程中调用了doInBackground()方法，任务执行完成后，通过postResult 或者 postResultIfNotInvoked 方法发送消息到主线程\n\n\n##### postResult方法\n\n```\nprivate void postResultIfNotInvoked(Result result) {\n        final boolean wasTaskInvoked = mTaskInvoked.get();\n        if (!wasTaskInvoked) {\n            postResult(result);\n        }\n    }\n\n    private Result postResult(Result result) {\n        @SuppressWarnings(\"unchecked\")\n        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,\n                new AsyncTaskResult<Result>(this, result));\n        message.sendToTarget();\n        return result;\n    }\n```\n\npostResult方法的作用即为任务结束后，发送message给主线程，反馈Result结果。\n\n```\n private static class InternalHandler extends Handler {\n        public InternalHandler(Looper looper) {\n            super(looper);\n        }\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n        @Override\n        public void handleMessage(Message msg) {\n            AsyncTaskResult<?> result = (AsyncTaskResult<?>) msg.obj;\n            switch (msg.what) {\n                case MESSAGE_POST_RESULT:\n                    // There is only one result\n                    result.mTask.finish(result.mData[0]);\n                    break;\n                case MESSAGE_POST_PROGRESS:\n                    result.mTask.onProgressUpdate(result.mData);\n                    break;\n            }\n        }\n    }\n\n```\n接收结果的为InternalHandler类，接收到结果并调用mTask的finish方法并把结果返回过去。\n\n##### finish方法\n\n\n```\nprivate void finish(Result result) {\n        if (isCancelled()) {\n            onCancelled(result);\n        } else {\n            onPostExecute(result);\n        }\n        mStatus = Status.FINISHED;\n    }\n```\n当Task结束后，会调用finish方法，如AsyncTask已经被取消，则会返回onCancelled回调，当未被取消则会调用onPostExecute回调。因此，onPostExecute回调也是主线程。\n\n##### 总结：\n\n过去一直在用AsyncTask，也知道怎样调用，但并不知道它的工作原理，经过我们分析源码可以看到，AsyncTask为我们做了很好的线程管理(在应用中滥用线程，会造成线程过多引起很严重的问题)，提供了执行前，执行中进度条更新，执行后等回调操作，便利了我们使用。 \n","slug":"AsyncTask源码了解","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi200bpsifyyjz2t3mj","content":"<p>简单了解下AsyncTask源码，作为以后复习时用。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>package: android.os;</p>\n</blockquote>\n<p>功能：在进行异步请求时，解决子线程和主线程之间的通讯等。</p>\n<p>此类为：抽象类，因此不能实例化，需要继承自它，再使用。</p>\n<h4 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\"></a> 源码解析</h4>\n<h5 id=\"asynctask-类包含\"><a class=\"markdownIt-Anchor\" href=\"#asynctask-类包含\"></a> AsyncTask 类包含：</h5>\n<ul>\n<li>3个静态内部类 [AsyncTaskResult、InternalHandler、SerialExector]</li>\n<li>1个静态内部抽象类 [WorkerRunnable]</li>\n<li>1个枚举类 [Status]</li>\n</ul>\n<h5 id=\"线程池部分\"><a class=\"markdownIt-Anchor\" href=\"#线程池部分\"></a> 线程池部分：</h5>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * An &#123;@link Executor&#125; that can be used to<span class=\"built_in\"> execute </span>tasks in parallel.</span><br><span class=\"line\">    */</span><br><span class=\"line\">  <span class=\"keyword\"> public</span><span class=\"keyword\"> static</span><span class=\"keyword\"> final</span> Executor THREAD_POO<span class=\"class\">L_EXECUTOR;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\"> static</span> &#123;</span><br><span class=\"line\">       ThreadPoolExecutor threadPoolExecutor =<span class=\"built_in\"> new </span>ThreadPoolExecutor(</span><br><span class=\"line\">               CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class=\"line\">               sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\">       threadPoolExecutor.allowCoreThreadTimeOut(true);</span><br><span class=\"line\">       THREAD_POO<span class=\"class\">L_EXECUTOR = threadPoolExecutor;</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>其中参数：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"><span class=\"comment\">// 核心线程数最小为2， 最大为4，根据cpu的核数确定。</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> CORE_POOL_SIZE = Math.max(<span class=\"number\">2</span>, Math.min(CPU_COUNT - <span class=\"number\">1</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">   <span class=\"comment\">// 最大线程池数量为 cpu 的核数的2倍 + 1</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 非核心线程数存活时间为30s</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> KEEP_ALIVE_SECONDS = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">阻塞队列长度为<span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">128</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用中重要的方法\"><a class=\"markdownIt-Anchor\" href=\"#使用中重要的方法\"></a> 使用中重要的方法：</h5>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 任务开始前需要的操作：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象类，必须要实现。 耗时的操作：子线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Result <span class=\"title\">doInBackground</span>(<span class=\"params\">Params... <span class=\"keyword\">params</span></span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 后台任务执行的进度，用于显示进度条：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span>(<span class=\"params\">Progress... values</span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 任务执行完成后，需要调用的操作：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span>(<span class=\"params\">Result result</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"execute执行方法\"><a class=\"markdownIt-Anchor\" href=\"#execute执行方法\"></a> execute执行方法：</h5>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：需要传入调度器和参数</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;<span class=\"keyword\">Params</span>, Progress, <span class=\"keyword\">Result</span>&gt; executeOnExecutor(Executor exec,</span><br><span class=\"line\">            <span class=\"keyword\">Params</span>... <span class=\"keyword\">params</span>)</span><br><span class=\"line\">第二种：内部调用了第一种方式，使用默认的调度器，传入参数即可</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;<span class=\"keyword\">Params</span>, Progress, <span class=\"keyword\">Result</span>&gt; execute(<span class=\"keyword\">Params</span>... <span class=\"keyword\">params</span>) </span><br><span class=\"line\">            </span><br><span class=\"line\">第三种：通过默认调度器执行runnable方法</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void execute(Runnable runnable)</span><br></pre></td></tr></table></figure>\n<h5 id=\"默认调度器sdefaultexecutor\"><a class=\"markdownIt-Anchor\" href=\"#默认调度器sdefaultexecutor\"></a> 默认调度器：sDefaultExecutor</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Executor SERIAL_EXECUTOR = <span class=\"keyword\">new</span> SerialExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class=\"keyword\">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class=\"line\">        Runnable mActive;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable r)</span> </span>&#123;</span><br><span class=\"line\">            mTasks.offer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        r.run();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        scheduleNext();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                scheduleNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mActive = mTasks.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>SerialExecutor 介绍</p>\n<ol>\n<li>SerialExecutor是通过ArrayDeque这个队列管理Runnable的，当我们启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null, 第一次运行肯定是null了，于是调用scheduleNext()方法。这个队列会从头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR.execute(mActive)方法，去执行取出的Runnable对象。</li>\n<li>execute 和 scheduleNext 都被synchronized修饰，因此这两个方法拥有同一把对象锁，不可以同时运行，在execute方法中，r.run()方法为子线程中的耗时任务，当执行完成后，最终会进入到finally中调用scheduleNext去取下一个top任务。</li>\n<li>mTasks.offer是每次来了task都放到ArrayDeque的尾部，保证先来的先被执行。</li>\n</ol>\n<h5 id=\"executeonexecutor方法\"><a class=\"markdownIt-Anchor\" href=\"#executeonexecutor方法\"></a> executeOnExecutor()方法：</h5>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> final AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">executeOnExecutor</span>(<span class=\"params\">Executor exec,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Params... <span class=\"keyword\">params</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (mStatus) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> RUNNING:</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" the task is already running.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">case</span> FINISHED:</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" the task has already been executed \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"(a task can be executed only once)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mStatus = Status.RUNNING;</span><br><span class=\"line\"></span><br><span class=\"line\">        onPreExecute();</span><br><span class=\"line\"></span><br><span class=\"line\">        mWorker.mParams = <span class=\"keyword\">params</span>;</span><br><span class=\"line\">        exec.execute(mFuture);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>executeOnExecutor方法中执行了onPreExecute(),然后执行了exec.execute(mFuture);</p>\n<p>其中Future为：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mFuture = <span class=\"keyword\">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    postResultIfNotInvoked(get());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    android.util.Log.w(LOG_TAG, e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"An error occurred while executing doInBackground()\"</span>,</span><br><span class=\"line\">                            e.getCause());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</span><br><span class=\"line\">                    postResultIfNotInvoked(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>从executeOnExecutor方法执行中可以看出，AsyncTask内，在主线程中先执行了onPreExecute()方法，然后在线程中调用了doInBackground()方法，任务执行完成后，通过postResult 或者 postResultIfNotInvoked 方法发送消息到主线程</p>\n<h5 id=\"postresult方法\"><a class=\"markdownIt-Anchor\" href=\"#postresult方法\"></a> postResult方法</h5>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postResultIfNotInvoked</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!wasTaskInvoked) &#123;</span><br><span class=\"line\">            postResult(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\">Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</span><br><span class=\"line\">        message.sendToTarget();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>postResult方法的作用即为任务结束后，发送message给主线程，反馈Result结果。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">       public <span class=\"type\">InternalHandler</span>(<span class=\"type\">Looper</span> looper) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>(looper);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       public void handleMessage(<span class=\"type\">Message</span> msg) &#123;</span><br><span class=\"line\">           <span class=\"type\">AsyncTaskResult</span>&lt;?&gt; result = (<span class=\"type\">AsyncTaskResult</span>&lt;?&gt;) msg.obj;</span><br><span class=\"line\">           switch (msg.what) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"type\">MESSAGE_POST_RESULT</span>:</span><br><span class=\"line\">                   <span class=\"comment\">// There is only one result</span></span><br><span class=\"line\">                   result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"type\">MESSAGE_POST_PROGRESS</span>:</span><br><span class=\"line\">                   result.mTask.onProgressUpdate(result.mData);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>接收结果的为InternalHandler类，接收到结果并调用mTask的finish方法并把结果返回过去。</p>\n<h5 id=\"finish方法\"><a class=\"markdownIt-Anchor\" href=\"#finish方法\"></a> finish方法</h5>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">private</span> <span class=\"variable\">void</span> <span class=\"function\"><span class=\"title\">finish</span>(<span class=\"variable\"><span class=\"class\">Result</span></span> <span class=\"variable\"><span class=\"class\">result</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"variable\"><span class=\"keyword\">if</span></span> (<span class=\"title\">isCancelled</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">onCancelled</span>(<span class=\"variable\"><span class=\"class\">result</span></span>);</span></span><br><span class=\"line\"><span class=\"function\">        &#125; <span class=\"variable\"><span class=\"keyword\">else</span></span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">onPostExecute</span>(<span class=\"variable\"><span class=\"class\">result</span></span>);</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"variable\">mStatus</span> = <span class=\"variable\">Status</span>.FINISHED;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>当Task结束后，会调用finish方法，如AsyncTask已经被取消，则会返回onCancelled回调，当未被取消则会调用onPostExecute回调。因此，onPostExecute回调也是主线程。</p>\n<h5 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结：</h5>\n<p>过去一直在用AsyncTask，也知道怎样调用，但并不知道它的工作原理，经过我们分析源码可以看到，AsyncTask为我们做了很好的线程管理(在应用中滥用线程，会造成线程过多引起很严重的问题)，提供了执行前，执行中进度条更新，执行后等回调操作，便利了我们使用。</p>\n","site":{"data":{}},"excerpt":"<p>简单了解下AsyncTask源码，作为以后复习时用。</p>","more":"<blockquote>\n<p>package: android.os;</p>\n</blockquote>\n<p>功能：在进行异步请求时，解决子线程和主线程之间的通讯等。</p>\n<p>此类为：抽象类，因此不能实例化，需要继承自它，再使用。</p>\n<h4 id=\"源码解析\"><a class=\"markdownIt-Anchor\" href=\"#源码解析\"></a> 源码解析</h4>\n<h5 id=\"asynctask-类包含\"><a class=\"markdownIt-Anchor\" href=\"#asynctask-类包含\"></a> AsyncTask 类包含：</h5>\n<ul>\n<li>3个静态内部类 [AsyncTaskResult、InternalHandler、SerialExector]</li>\n<li>1个静态内部抽象类 [WorkerRunnable]</li>\n<li>1个枚举类 [Status]</li>\n</ul>\n<h5 id=\"线程池部分\"><a class=\"markdownIt-Anchor\" href=\"#线程池部分\"></a> 线程池部分：</h5>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">    * An &#123;@link Executor&#125; that can be used to<span class=\"built_in\"> execute </span>tasks in parallel.</span><br><span class=\"line\">    */</span><br><span class=\"line\">  <span class=\"keyword\"> public</span><span class=\"keyword\"> static</span><span class=\"keyword\"> final</span> Executor THREAD_POO<span class=\"class\">L_EXECUTOR;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\"> static</span> &#123;</span><br><span class=\"line\">       ThreadPoolExecutor threadPoolExecutor =<span class=\"built_in\"> new </span>ThreadPoolExecutor(</span><br><span class=\"line\">               CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS,</span><br><span class=\"line\">               sPoolWorkQueue, sThreadFactory);</span><br><span class=\"line\">       threadPoolExecutor.allowCoreThreadTimeOut(true);</span><br><span class=\"line\">       THREAD_POO<span class=\"class\">L_EXECUTOR = threadPoolExecutor;</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>其中参数：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> CPU_COUNT = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\"><span class=\"comment\">// 核心线程数最小为2， 最大为4，根据cpu的核数确定。</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> CORE_POOL_SIZE = Math.max(<span class=\"number\">2</span>, Math.min(CPU_COUNT - <span class=\"number\">1</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\">   <span class=\"comment\">// 最大线程池数量为 cpu 的核数的2倍 + 1</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> MAXIMUM_POOL_SIZE = CPU_COUNT * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"comment\">// 非核心线程数存活时间为30s</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> static <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> KEEP_ALIVE_SECONDS = <span class=\"number\">30</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">阻塞队列长度为<span class=\"number\">128</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Runnable&gt; sPoolWorkQueue =</span><br><span class=\"line\">            <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">128</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用中重要的方法\"><a class=\"markdownIt-Anchor\" href=\"#使用中重要的方法\"></a> 使用中重要的方法：</h5>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 任务开始前需要的操作：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 抽象类，必须要实现。 耗时的操作：子线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Result <span class=\"title\">doInBackground</span>(<span class=\"params\">Params... <span class=\"keyword\">params</span></span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 后台任务执行的进度，用于显示进度条：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span>(<span class=\"params\">Progress... values</span>)</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 任务执行完成后，需要调用的操作：主线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span>(<span class=\"params\">Result result</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"execute执行方法\"><a class=\"markdownIt-Anchor\" href=\"#execute执行方法\"></a> execute执行方法：</h5>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一种：需要传入调度器和参数</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;<span class=\"keyword\">Params</span>, Progress, <span class=\"keyword\">Result</span>&gt; executeOnExecutor(Executor exec,</span><br><span class=\"line\">            <span class=\"keyword\">Params</span>... <span class=\"keyword\">params</span>)</span><br><span class=\"line\">第二种：内部调用了第一种方式，使用默认的调度器，传入参数即可</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;<span class=\"keyword\">Params</span>, Progress, <span class=\"keyword\">Result</span>&gt; execute(<span class=\"keyword\">Params</span>... <span class=\"keyword\">params</span>) </span><br><span class=\"line\">            </span><br><span class=\"line\">第三种：通过默认调度器执行runnable方法</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> void execute(Runnable runnable)</span><br></pre></td></tr></table></figure>\n<h5 id=\"默认调度器sdefaultexecutor\"><a class=\"markdownIt-Anchor\" href=\"#默认调度器sdefaultexecutor\"></a> 默认调度器：sDefaultExecutor</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Executor sDefaultExecutor = SERIAL_EXECUTOR;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Executor SERIAL_EXECUTOR = <span class=\"keyword\">new</span> SerialExecutor();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class=\"keyword\">new</span> ArrayDeque&lt;Runnable&gt;();</span><br><span class=\"line\">        Runnable mActive;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable r)</span> </span>&#123;</span><br><span class=\"line\">            mTasks.offer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        r.run();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                        scheduleNext();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mActive == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                scheduleNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mActive = mTasks.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                THREAD_POOL_EXECUTOR.execute(mActive);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>SerialExecutor 介绍</p>\n<ol>\n<li>SerialExecutor是通过ArrayDeque这个队列管理Runnable的，当我们启动了很多个任务，首先在第一次运行execute()方法的时候，会调用ArrayDeque的offer()方法将传入的Runnable对象添加到队列的尾部，然后判断mActive对象是不是等于null, 第一次运行肯定是null了，于是调用scheduleNext()方法。这个队列会从头部取值，并赋值给mActive对象，然后调用THREAD_POOL_EXECUTOR.execute(mActive)方法，去执行取出的Runnable对象。</li>\n<li>execute 和 scheduleNext 都被synchronized修饰，因此这两个方法拥有同一把对象锁，不可以同时运行，在execute方法中，r.run()方法为子线程中的耗时任务，当执行完成后，最终会进入到finally中调用scheduleNext去取下一个top任务。</li>\n<li>mTasks.offer是每次来了task都放到ArrayDeque的尾部，保证先来的先被执行。</li>\n</ol>\n<h5 id=\"executeonexecutor方法\"><a class=\"markdownIt-Anchor\" href=\"#executeonexecutor方法\"></a> executeOnExecutor()方法：</h5>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> final AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">executeOnExecutor</span>(<span class=\"params\">Executor exec,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Params... <span class=\"keyword\">params</span></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mStatus != Status.PENDING) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (mStatus) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> RUNNING:</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" the task is already running.\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">case</span> FINISHED:</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></span><br><span class=\"line\">                            + <span class=\"string\">\" the task has already been executed \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"(a task can be executed only once)\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mStatus = Status.RUNNING;</span><br><span class=\"line\"></span><br><span class=\"line\">        onPreExecute();</span><br><span class=\"line\"></span><br><span class=\"line\">        mWorker.mParams = <span class=\"keyword\">params</span>;</span><br><span class=\"line\">        exec.execute(mFuture);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>executeOnExecutor方法中执行了onPreExecute(),然后执行了exec.execute(mFuture);</p>\n<p>其中Future为：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mFuture = <span class=\"keyword\">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    postResultIfNotInvoked(get());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    android.util.Log.w(LOG_TAG, e);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"An error occurred while executing doInBackground()\"</span>,</span><br><span class=\"line\">                            e.getCause());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</span><br><span class=\"line\">                    postResultIfNotInvoked(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br></pre></td></tr></table></figure>\n<p>从executeOnExecutor方法执行中可以看出，AsyncTask内，在主线程中先执行了onPreExecute()方法，然后在线程中调用了doInBackground()方法，任务执行完成后，通过postResult 或者 postResultIfNotInvoked 方法发送消息到主线程</p>\n<h5 id=\"postresult方法\"><a class=\"markdownIt-Anchor\" href=\"#postresult方法\"></a> postResult方法</h5>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postResultIfNotInvoked</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> wasTaskInvoked = mTaskInvoked.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!wasTaskInvoked) &#123;</span><br><span class=\"line\">            postResult(result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\">Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</span><br><span class=\"line\">        message.sendToTarget();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>postResult方法的作用即为任务结束后，发送message给主线程，反馈Result结果。</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> static <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">       public <span class=\"type\">InternalHandler</span>(<span class=\"type\">Looper</span> looper) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>(looper);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       public void handleMessage(<span class=\"type\">Message</span> msg) &#123;</span><br><span class=\"line\">           <span class=\"type\">AsyncTaskResult</span>&lt;?&gt; result = (<span class=\"type\">AsyncTaskResult</span>&lt;?&gt;) msg.obj;</span><br><span class=\"line\">           switch (msg.what) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"type\">MESSAGE_POST_RESULT</span>:</span><br><span class=\"line\">                   <span class=\"comment\">// There is only one result</span></span><br><span class=\"line\">                   result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> <span class=\"type\">MESSAGE_POST_PROGRESS</span>:</span><br><span class=\"line\">                   result.mTask.onProgressUpdate(result.mData);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>接收结果的为InternalHandler类，接收到结果并调用mTask的finish方法并把结果返回过去。</p>\n<h5 id=\"finish方法\"><a class=\"markdownIt-Anchor\" href=\"#finish方法\"></a> finish方法</h5>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">private</span> <span class=\"variable\">void</span> <span class=\"function\"><span class=\"title\">finish</span>(<span class=\"variable\"><span class=\"class\">Result</span></span> <span class=\"variable\"><span class=\"class\">result</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"variable\"><span class=\"keyword\">if</span></span> (<span class=\"title\">isCancelled</span>()) &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">onCancelled</span>(<span class=\"variable\"><span class=\"class\">result</span></span>);</span></span><br><span class=\"line\"><span class=\"function\">        &#125; <span class=\"variable\"><span class=\"keyword\">else</span></span> &#123;</span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"title\">onPostExecute</span>(<span class=\"variable\"><span class=\"class\">result</span></span>);</span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"variable\">mStatus</span> = <span class=\"variable\">Status</span>.FINISHED;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br></pre></td></tr></table></figure>\n<p>当Task结束后，会调用finish方法，如AsyncTask已经被取消，则会返回onCancelled回调，当未被取消则会调用onPostExecute回调。因此，onPostExecute回调也是主线程。</p>\n<h5 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\"></a> 总结：</h5>\n<p>过去一直在用AsyncTask，也知道怎样调用，但并不知道它的工作原理，经过我们分析源码可以看到，AsyncTask为我们做了很好的线程管理(在应用中滥用线程，会造成线程过多引起很严重的问题)，提供了执行前，执行中进度条更新，执行后等回调操作，便利了我们使用。</p>"},{"title":"EditText 的使用及值得注意的地方","date":"2016-09-01T04:54:29.000Z","_content":"\n>来源：http://www.jianshu.com/p/1f05bb1fde3e\n作者：张明云（@UperOne）\n\nAndroid上有很多输入法应用，每种输入法都有各自的特点，输入法多数时候是和EditText配合使用，结合我自己的亲身实践分享一下使用EditText过程中遇到的一些问题及解决方法。\n\n<!-- more -->\n### 设置默认输入法  \n有时候为了提高用户体验，在弹出输入法时需要设置默认的输入状态，比如单词应用弹出输入法时，输入法最好是在英文输入状态下。如果是字典应用，弹出输入法时最好是在中文输入状态下，Android并没有提供设置默认的输入状态的接口，但我们可以通过如下方法一样能够达到想要的效果：\n\n#### 默认中文：\n```\nmEditText.setInputType(EditorInfo.TYPE_CLASS_TEXT);\n```\n\n#### 默认英文：\n```\nmEditText.setInputType(EditorInfo.TYPE_TEXT_VARIATION_URI);\n```\n\n### 打开和关闭输入法\n手动控制输入法的开关状态也能提升用户体验，比如：\n- 有的搜索框会有一个清除按钮，点击清除按钮时就应该弹出输入法，因为用户清除搜索内容的目的多数时候是需要输入新的内容；\n- 执行搜索时应该隐藏输入法，因为显示输入法时会遮挡搜索结果，用户体验不太好；\n- 闹钟来时或者有其它window弹出时应该隐藏输入法，因为输入法也是window，如果不隐藏可能导致输入法遮挡住了其它window等用户体验不太友好的问题。\n\n#### 打开输入法：\n```\nprivate void open(Context context, View editText){\n    InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputMethodManager.showSoftInput(editText, 0);\n}\n```\n#### 关闭输入法：\n```\nprivate void close(Context context, View editText){\n    InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), 0);\n}\n```\n### 监听EditText的输入状态\n- 类似新浪微博，在输入内容时会提示还可以输入多少字；\n- 有的搜索引擎，输入内容时实时显示搜索结果；\n- 有的输入框有输入长度限制，输入内容超过长度限制时弹出提示信息。\n\n上面这些都可以通过监听EditText的输入状态来实现，具体实现方式如下：\n```\nmInputEditTxt.addTextChangedListener(new TextWatcher() {\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        }\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            System.out.println(\"监听EditText输入内容的变化，在这里可以监听输入内容的长度。\");\n        }\n        @Override\n        public void afterTextChanged(Editable s) {\n            System.out.println(\"这里可以实现所输即所得，用户输入的同时可以立即在这里根据输入内容执行操作，显示搜索结果！\");\n        }\n    });\n```\n\n#### 监听输入法中的回车按钮\n\n比如搜狗输入法的右下角有一个回车按钮，我们希望用户点击它时也执行确认功能，可以通过监听EditText的按键点击事件来实现：\n\n```\n/**\n   * 监听输入法按键\n     *\n     * */\n    mInputEditTxt.setOnKeyListener(new OnKeyListener() {\n        @Override\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_UP) {\n                System.out.println(\"手指弹起时执行确认功能\");\n                return true;\n            }\n\n            return false;\n        }\n    });\n\n```\n\n#### 改变输入法中回车按钮的显示内容\n\n如果回车按钮是执行搜索功能，则回车按钮上显示”搜索”，如果是执行发送功能，则显示”发送”,如果是下一步，则显示”下一步”。\n\n实现这个功能需要调用EditText的setImeOptions方法：\n```\n/**\n*\n* IME_ACTION_SEARCH 搜索\n* IME_ACTION_SEND 发送\n* IME_ACTION_NEXT 下一步\n* IME_ACTION_DONE 完成\n*/\nmInputEditTxt.setImeOptions(EditorInfo.IME_ACTION_SEARCH);\n```\n\n#### 限制输入内容\n\n有时候我们根本就不想用户输入一些杂七杂八的内容，因为这需要程序针对输入的内容做各种处理，如果处理不当还会有好多不可预见的问题，索性在输入内容时就禁止用户输入一些非法字符，这可以通过下面的方式实现，新建一个类InputTxtFilter：\n\n```\npublic class InputTxtFilter{\n    public static final int INPUT_TYPE_EN = 0x01;\n    public static final int INPUT_TYPE_CH = 0x02;\n    private static final String[] SPELL = new String[]{\n        \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"ā\",\"á\",\"ǎ\",\"à\",\"ō\",\"ó\",\"ǒ\",\"ò\",\"ē\",\"é\",\"ě\",\"è\",\"ī\",\"í\",\"ǐ\",\"ì\",\"ū\",\"ú\",\"ǔ\",\"ù\",\"ǖ\",\"ǘ\",\"ǚ\",\"ǜ\",\"ü\"\n    };\n    private static char[] chineseParam = new char[]{'」','，','。','？','…','：','～','【','＃','、','％','＊','＆','＄','（','‘','’','“','”','『','〔','｛','【'\n        ,'￥','￡','‖','〖','《','「','》','〗','】','｝','〕','』','”','）','！','；','—'};\n\n    private InputTxtFilter( ){\n\n    }\n\n    public static void inputFilter( final Context context, final EditText editText, final int type, final int inputLimit){\n        InputFilter[] filters = new InputFilter[1];\n        filters[0] = new InputFilter.LengthFilter(inputLimit){\n            public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend){\n                boolean isRightCharater = false;\n                if(type == INPUT_TYPE_EN){\n                    isRightCharater = isLetter(source.toString());\n                }else if(type == INPUT_TYPE_CH){\n                    isRightCharater = isChineseWord(source.toString());\n                }\n\n                if ( !isRightCharater|| dest.toString( ).length( )>=inputLimit ){\n                    return \"\";\n                }\n\n                return source;\n            }\n        };\n        editText.setFilters(filters);\n    }\n\n    /**\n     * 检测String是否全是中文\n     *\n     */\n    public static boolean isChineseWord( String name ){\n        boolean res=true;\n        char[] cTemp = name.toCharArray( );\n\n        for( int i = 0; i < name.length( ); i++ ){\n            if( !isChinese( cTemp[ i ] ) ){\n                res=false;\n                break;\n            }\n        }\n\n        return res;\n    }\n\n    /**\n     * 是否为英文字母\n     *\n     * */\n    public static boolean isLetter( String inputStr ){\n        char[] inputArray = inputStr.toCharArray( );\n        List<String> spellList = Arrays.asList( SPELL );\n\n        for( char input : inputArray ){\n            if( !spellList.contains( input + \"\" ) ){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 判定输入汉字\n     * @param c\n     */\n    public static boolean isChinese( char c ){\n        for( char param : chineseParam ){\n            if( param == c ){\n                return false;\n            }\n        }\n\n        Character.UnicodeBlock ub = Character.UnicodeBlock.of( c );\n        if ( ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS\n            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS\n            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\n            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION\n            || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION\n            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS ){\n            return true;\n        }\n\n        return false;\n    }\n}\n\n```\n在初始化EditText时，调用InputTxtFilter的inputFilter方法，传入输入长度限制、输入内容的类型限制等即可，eg：\n\n```\nInputTxtFilter.inputFilter(this, mInputEditTxt, InputTxtFilter.INPUT_TYPE_EN, 5);\n```\n\n### 屏蔽EditText的复制、粘贴功能\n在低版本的Android SDK中，如果对EditText的输入长度有限制时，长按EditText并将选中的内容拖动到EditText输入框中，如果这时候的长度超过了EditText的输入长度限制，程序会直接崩溃掉，在高版本的Android SDK中这个问题已经改了，如果出现上面的情况会直接清空输入框中的内容，为了避免这种讨厌的问题，我们可以屏蔽EditText的复制和粘贴功能，只需要屏蔽EditText的长按响应即可：\n\n```\n/**\n     * 屏蔽复制、粘贴功能\n     *\n     * */\n    mInputEditTxt.setCustomSelectionActionModeCallback(new ActionMode.Callback() {\n        public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\n            return false;\n        }\n\n        public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\n            return false;\n        }\n\n        public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\n            return false;\n        }\n\n        @Override\n        public void onDestroyActionMode(ActionMode mode) {\n\n        }\n    });\n\n    mInputEditTxt.setLongClickable(false);\n\n```\n","source":"_posts/EditText-的使用及值得注意的地方.md","raw":"---\ntitle: EditText 的使用及值得注意的地方\ndate: 2016-09-01 12:54:29\ntags: [EditText]\ncategories: android\n---\n\n>来源：http://www.jianshu.com/p/1f05bb1fde3e\n作者：张明云（@UperOne）\n\nAndroid上有很多输入法应用，每种输入法都有各自的特点，输入法多数时候是和EditText配合使用，结合我自己的亲身实践分享一下使用EditText过程中遇到的一些问题及解决方法。\n\n<!-- more -->\n### 设置默认输入法  \n有时候为了提高用户体验，在弹出输入法时需要设置默认的输入状态，比如单词应用弹出输入法时，输入法最好是在英文输入状态下。如果是字典应用，弹出输入法时最好是在中文输入状态下，Android并没有提供设置默认的输入状态的接口，但我们可以通过如下方法一样能够达到想要的效果：\n\n#### 默认中文：\n```\nmEditText.setInputType(EditorInfo.TYPE_CLASS_TEXT);\n```\n\n#### 默认英文：\n```\nmEditText.setInputType(EditorInfo.TYPE_TEXT_VARIATION_URI);\n```\n\n### 打开和关闭输入法\n手动控制输入法的开关状态也能提升用户体验，比如：\n- 有的搜索框会有一个清除按钮，点击清除按钮时就应该弹出输入法，因为用户清除搜索内容的目的多数时候是需要输入新的内容；\n- 执行搜索时应该隐藏输入法，因为显示输入法时会遮挡搜索结果，用户体验不太好；\n- 闹钟来时或者有其它window弹出时应该隐藏输入法，因为输入法也是window，如果不隐藏可能导致输入法遮挡住了其它window等用户体验不太友好的问题。\n\n#### 打开输入法：\n```\nprivate void open(Context context, View editText){\n    InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputMethodManager.showSoftInput(editText, 0);\n}\n```\n#### 关闭输入法：\n```\nprivate void close(Context context, View editText){\n    InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n    inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), 0);\n}\n```\n### 监听EditText的输入状态\n- 类似新浪微博，在输入内容时会提示还可以输入多少字；\n- 有的搜索引擎，输入内容时实时显示搜索结果；\n- 有的输入框有输入长度限制，输入内容超过长度限制时弹出提示信息。\n\n上面这些都可以通过监听EditText的输入状态来实现，具体实现方式如下：\n```\nmInputEditTxt.addTextChangedListener(new TextWatcher() {\n        @Override\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        }\n        @Override\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            System.out.println(\"监听EditText输入内容的变化，在这里可以监听输入内容的长度。\");\n        }\n        @Override\n        public void afterTextChanged(Editable s) {\n            System.out.println(\"这里可以实现所输即所得，用户输入的同时可以立即在这里根据输入内容执行操作，显示搜索结果！\");\n        }\n    });\n```\n\n#### 监听输入法中的回车按钮\n\n比如搜狗输入法的右下角有一个回车按钮，我们希望用户点击它时也执行确认功能，可以通过监听EditText的按键点击事件来实现：\n\n```\n/**\n   * 监听输入法按键\n     *\n     * */\n    mInputEditTxt.setOnKeyListener(new OnKeyListener() {\n        @Override\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\n            if (keyCode == KeyEvent.KEYCODE_ENTER && event.getAction() == KeyEvent.ACTION_UP) {\n                System.out.println(\"手指弹起时执行确认功能\");\n                return true;\n            }\n\n            return false;\n        }\n    });\n\n```\n\n#### 改变输入法中回车按钮的显示内容\n\n如果回车按钮是执行搜索功能，则回车按钮上显示”搜索”，如果是执行发送功能，则显示”发送”,如果是下一步，则显示”下一步”。\n\n实现这个功能需要调用EditText的setImeOptions方法：\n```\n/**\n*\n* IME_ACTION_SEARCH 搜索\n* IME_ACTION_SEND 发送\n* IME_ACTION_NEXT 下一步\n* IME_ACTION_DONE 完成\n*/\nmInputEditTxt.setImeOptions(EditorInfo.IME_ACTION_SEARCH);\n```\n\n#### 限制输入内容\n\n有时候我们根本就不想用户输入一些杂七杂八的内容，因为这需要程序针对输入的内容做各种处理，如果处理不当还会有好多不可预见的问题，索性在输入内容时就禁止用户输入一些非法字符，这可以通过下面的方式实现，新建一个类InputTxtFilter：\n\n```\npublic class InputTxtFilter{\n    public static final int INPUT_TYPE_EN = 0x01;\n    public static final int INPUT_TYPE_CH = 0x02;\n    private static final String[] SPELL = new String[]{\n        \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"ā\",\"á\",\"ǎ\",\"à\",\"ō\",\"ó\",\"ǒ\",\"ò\",\"ē\",\"é\",\"ě\",\"è\",\"ī\",\"í\",\"ǐ\",\"ì\",\"ū\",\"ú\",\"ǔ\",\"ù\",\"ǖ\",\"ǘ\",\"ǚ\",\"ǜ\",\"ü\"\n    };\n    private static char[] chineseParam = new char[]{'」','，','。','？','…','：','～','【','＃','、','％','＊','＆','＄','（','‘','’','“','”','『','〔','｛','【'\n        ,'￥','￡','‖','〖','《','「','》','〗','】','｝','〕','』','”','）','！','；','—'};\n\n    private InputTxtFilter( ){\n\n    }\n\n    public static void inputFilter( final Context context, final EditText editText, final int type, final int inputLimit){\n        InputFilter[] filters = new InputFilter[1];\n        filters[0] = new InputFilter.LengthFilter(inputLimit){\n            public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend){\n                boolean isRightCharater = false;\n                if(type == INPUT_TYPE_EN){\n                    isRightCharater = isLetter(source.toString());\n                }else if(type == INPUT_TYPE_CH){\n                    isRightCharater = isChineseWord(source.toString());\n                }\n\n                if ( !isRightCharater|| dest.toString( ).length( )>=inputLimit ){\n                    return \"\";\n                }\n\n                return source;\n            }\n        };\n        editText.setFilters(filters);\n    }\n\n    /**\n     * 检测String是否全是中文\n     *\n     */\n    public static boolean isChineseWord( String name ){\n        boolean res=true;\n        char[] cTemp = name.toCharArray( );\n\n        for( int i = 0; i < name.length( ); i++ ){\n            if( !isChinese( cTemp[ i ] ) ){\n                res=false;\n                break;\n            }\n        }\n\n        return res;\n    }\n\n    /**\n     * 是否为英文字母\n     *\n     * */\n    public static boolean isLetter( String inputStr ){\n        char[] inputArray = inputStr.toCharArray( );\n        List<String> spellList = Arrays.asList( SPELL );\n\n        for( char input : inputArray ){\n            if( !spellList.contains( input + \"\" ) ){\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 判定输入汉字\n     * @param c\n     */\n    public static boolean isChinese( char c ){\n        for( char param : chineseParam ){\n            if( param == c ){\n                return false;\n            }\n        }\n\n        Character.UnicodeBlock ub = Character.UnicodeBlock.of( c );\n        if ( ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS\n            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS\n            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\n            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION\n            || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION\n            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS ){\n            return true;\n        }\n\n        return false;\n    }\n}\n\n```\n在初始化EditText时，调用InputTxtFilter的inputFilter方法，传入输入长度限制、输入内容的类型限制等即可，eg：\n\n```\nInputTxtFilter.inputFilter(this, mInputEditTxt, InputTxtFilter.INPUT_TYPE_EN, 5);\n```\n\n### 屏蔽EditText的复制、粘贴功能\n在低版本的Android SDK中，如果对EditText的输入长度有限制时，长按EditText并将选中的内容拖动到EditText输入框中，如果这时候的长度超过了EditText的输入长度限制，程序会直接崩溃掉，在高版本的Android SDK中这个问题已经改了，如果出现上面的情况会直接清空输入框中的内容，为了避免这种讨厌的问题，我们可以屏蔽EditText的复制和粘贴功能，只需要屏蔽EditText的长按响应即可：\n\n```\n/**\n     * 屏蔽复制、粘贴功能\n     *\n     * */\n    mInputEditTxt.setCustomSelectionActionModeCallback(new ActionMode.Callback() {\n        public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {\n            return false;\n        }\n\n        public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {\n            return false;\n        }\n\n        public boolean onActionItemClicked(ActionMode actionMode, MenuItem menuItem) {\n            return false;\n        }\n\n        @Override\n        public void onDestroyActionMode(ActionMode mode) {\n\n        }\n    });\n\n    mInputEditTxt.setLongClickable(false);\n\n```\n","slug":"EditText-的使用及值得注意的地方","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi400bssifyk0o0md3j","content":"<blockquote>\n<p>来源：<a href=\"http://www.jianshu.com/p/1f05bb1fde3e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f05bb1fde3e</a><br>\n作者：张明云（@UperOne）</p>\n</blockquote>\n<p>Android上有很多输入法应用，每种输入法都有各自的特点，输入法多数时候是和EditText配合使用，结合我自己的亲身实践分享一下使用EditText过程中遇到的一些问题及解决方法。</p>\n<a id=\"more\"></a>\n<h3 id=\"设置默认输入法\"><a class=\"markdownIt-Anchor\" href=\"#设置默认输入法\"></a> 设置默认输入法</h3>\n<p>有时候为了提高用户体验，在弹出输入法时需要设置默认的输入状态，比如单词应用弹出输入法时，输入法最好是在英文输入状态下。如果是字典应用，弹出输入法时最好是在中文输入状态下，Android并没有提供设置默认的输入状态的接口，但我们可以通过如下方法一样能够达到想要的效果：</p>\n<h4 id=\"默认中文\"><a class=\"markdownIt-Anchor\" href=\"#默认中文\"></a> 默认中文：</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mEditText</span><span class=\"selector-class\">.setInputType</span>(<span class=\"selector-tag\">EditorInfo</span><span class=\"selector-class\">.TYPE_CLASS_TEXT</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"默认英文\"><a class=\"markdownIt-Anchor\" href=\"#默认英文\"></a> 默认英文：</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mEditText</span><span class=\"selector-class\">.setInputType</span>(<span class=\"selector-tag\">EditorInfo</span><span class=\"selector-class\">.TYPE_TEXT_VARIATION_URI</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开和关闭输入法\"><a class=\"markdownIt-Anchor\" href=\"#打开和关闭输入法\"></a> 打开和关闭输入法</h3>\n<p>手动控制输入法的开关状态也能提升用户体验，比如：</p>\n<ul>\n<li>有的搜索框会有一个清除按钮，点击清除按钮时就应该弹出输入法，因为用户清除搜索内容的目的多数时候是需要输入新的内容；</li>\n<li>执行搜索时应该隐藏输入法，因为显示输入法时会遮挡搜索结果，用户体验不太好；</li>\n<li>闹钟来时或者有其它window弹出时应该隐藏输入法，因为输入法也是window，如果不隐藏可能导致输入法遮挡住了其它window等用户体验不太友好的问题。</li>\n</ul>\n<h4 id=\"打开输入法\"><a class=\"markdownIt-Anchor\" href=\"#打开输入法\"></a> 打开输入法：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void open(<span class=\"built_in\">Context</span> <span class=\"built_in\">context</span>, View editText)&#123;</span><br><span class=\"line\">    InputMethodManager inputMethodManager = (InputMethodManager) <span class=\"built_in\">context</span>.getSystemService(<span class=\"built_in\">Context</span>.INPUT_METHOD_SERVICE)<span class=\"comment\">;</span></span><br><span class=\"line\">    inputMethodManager.<span class=\"keyword\">showSoftInput(editText, </span><span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭输入法\"><a class=\"markdownIt-Anchor\" href=\"#关闭输入法\"></a> 关闭输入法：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void <span class=\"keyword\">close(Context </span><span class=\"built_in\">context</span>, View editText)&#123;</span><br><span class=\"line\">    InputMethodManager inputMethodManager = (InputMethodManager) <span class=\"built_in\">context</span>.getSystemService(<span class=\"built_in\">Context</span>.INPUT_METHOD_SERVICE)<span class=\"comment\">;</span></span><br><span class=\"line\">    inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听edittext的输入状态\"><a class=\"markdownIt-Anchor\" href=\"#监听edittext的输入状态\"></a> 监听EditText的输入状态</h3>\n<ul>\n<li>类似新浪微博，在输入内容时会提示还可以输入多少字；</li>\n<li>有的搜索引擎，输入内容时实时显示搜索结果；</li>\n<li>有的输入框有输入长度限制，输入内容超过长度限制时弹出提示信息。</li>\n</ul>\n<p>上面这些都可以通过监听EditText的输入状态来实现，具体实现方式如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mInputEditTxt.add<span class=\"constructor\">TextChangedListener(<span class=\"params\">new</span> TextWatcher()</span> &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void before<span class=\"constructor\">TextChanged(CharSequence <span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">start</span>, <span class=\"params\">int</span> <span class=\"params\">count</span>, <span class=\"params\">int</span> <span class=\"params\">after</span>)</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void on<span class=\"constructor\">TextChanged(CharSequence <span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">start</span>, <span class=\"params\">int</span> <span class=\"params\">before</span>, <span class=\"params\">int</span> <span class=\"params\">count</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"监听EditText输入内容的变化，在这里可以监听输入内容的长度。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void after<span class=\"constructor\">TextChanged(Editable <span class=\"params\">s</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"这里可以实现所输即所得，用户输入的同时可以立即在这里根据输入内容执行操作，显示搜索结果！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"监听输入法中的回车按钮\"><a class=\"markdownIt-Anchor\" href=\"#监听输入法中的回车按钮\"></a> 监听输入法中的回车按钮</h4>\n<p>比如搜狗输入法的右下角有一个回车按钮，我们希望用户点击它时也执行确认功能，可以通过监听EditText的按键点击事件来实现：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 监听输入法按键</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    mInputEditTxt.set<span class=\"constructor\">OnKeyListener(<span class=\"params\">new</span> OnKeyListener()</span> &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean on<span class=\"constructor\">Key(View <span class=\"params\">v</span>, <span class=\"params\">int</span> <span class=\"params\">keyCode</span>, KeyEvent <span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keyCode<span class=\"operator\"> == </span>KeyEvent.KEYCODE_ENTER<span class=\"operator\"> &amp;&amp; </span>event.get<span class=\"constructor\">Action()</span><span class=\"operator\"> == </span>KeyEvent.ACTION_UP) &#123;</span><br><span class=\"line\">                <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"手指弹起时执行确认功能\"</span>);</span><br><span class=\"line\">                return <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"改变输入法中回车按钮的显示内容\"><a class=\"markdownIt-Anchor\" href=\"#改变输入法中回车按钮的显示内容\"></a> 改变输入法中回车按钮的显示内容</h4>\n<p>如果回车按钮是执行搜索功能，则回车按钮上显示”搜索”，如果是执行发送功能，则显示”发送”,如果是下一步，则显示”下一步”。</p>\n<p>实现这个功能需要调用EditText的setImeOptions方法：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*<span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>SEARCH 搜索</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>SEND 发送</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>NEXT 下一步</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>DONE 完成</span><br><span class=\"line\"><span class=\"strong\">*/</span></span><br><span class=\"line\"><span class=\"strong\">mInputEditTxt.setImeOptions(EditorInfo.IME_ACTION_SEARCH);</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"限制输入内容\"><a class=\"markdownIt-Anchor\" href=\"#限制输入内容\"></a> 限制输入内容</h4>\n<p>有时候我们根本就不想用户输入一些杂七杂八的内容，因为这需要程序针对输入的内容做各种处理，如果处理不当还会有好多不可预见的问题，索性在输入内容时就禁止用户输入一些非法字符，这可以通过下面的方式实现，新建一个类InputTxtFilter：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> InputTxtFilter&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INPUT_TYPE_EN = <span class=\"number\">0</span>x01;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INPUT_TYPE_CH = <span class=\"number\">0</span>x02;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] SPELL = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">        <span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>,<span class=\"string\">\"f\"</span>,<span class=\"string\">\"g\"</span>,<span class=\"string\">\"h\"</span>,<span class=\"string\">\"i\"</span>,<span class=\"string\">\"j\"</span>,<span class=\"string\">\"k\"</span>,<span class=\"string\">\"l\"</span>,<span class=\"string\">\"m\"</span>,<span class=\"string\">\"n\"</span>,<span class=\"string\">\"o\"</span>,<span class=\"string\">\"p\"</span>,<span class=\"string\">\"q\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"string\">\"s\"</span>,<span class=\"string\">\"t\"</span>,<span class=\"string\">\"u\"</span>,<span class=\"string\">\"v\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"string\">\"x\"</span>,<span class=\"string\">\"y\"</span>,<span class=\"string\">\"z\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ā\"</span>,<span class=\"string\">\"á\"</span>,<span class=\"string\">\"ǎ\"</span>,<span class=\"string\">\"à\"</span>,<span class=\"string\">\"ō\"</span>,<span class=\"string\">\"ó\"</span>,<span class=\"string\">\"ǒ\"</span>,<span class=\"string\">\"ò\"</span>,<span class=\"string\">\"ē\"</span>,<span class=\"string\">\"é\"</span>,<span class=\"string\">\"ě\"</span>,<span class=\"string\">\"è\"</span>,<span class=\"string\">\"ī\"</span>,<span class=\"string\">\"í\"</span>,<span class=\"string\">\"ǐ\"</span>,<span class=\"string\">\"ì\"</span>,<span class=\"string\">\"ū\"</span>,<span class=\"string\">\"ú\"</span>,<span class=\"string\">\"ǔ\"</span>,<span class=\"string\">\"ù\"</span>,<span class=\"string\">\"ǖ\"</span>,<span class=\"string\">\"ǘ\"</span>,<span class=\"string\">\"ǚ\"</span>,<span class=\"string\">\"ǜ\"</span>,<span class=\"string\">\"ü\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] chineseParam = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[]&#123;<span class=\"string\">'」'</span>,<span class=\"string\">'，'</span>,<span class=\"string\">'。'</span>,<span class=\"string\">'？'</span>,<span class=\"string\">'…'</span>,<span class=\"string\">'：'</span>,<span class=\"string\">'～'</span>,<span class=\"string\">'【'</span>,<span class=\"string\">'＃'</span>,<span class=\"string\">'、'</span>,<span class=\"string\">'％'</span>,<span class=\"string\">'＊'</span>,<span class=\"string\">'＆'</span>,<span class=\"string\">'＄'</span>,<span class=\"string\">'（'</span>,<span class=\"string\">'‘'</span>,<span class=\"string\">'’'</span>,<span class=\"string\">'“'</span>,<span class=\"string\">'”'</span>,<span class=\"string\">'『'</span>,<span class=\"string\">'〔'</span>,<span class=\"string\">'｛'</span>,<span class=\"string\">'【'</span></span><br><span class=\"line\">        ,<span class=\"string\">'￥'</span>,<span class=\"string\">'￡'</span>,<span class=\"string\">'‖'</span>,<span class=\"string\">'〖'</span>,<span class=\"string\">'《'</span>,<span class=\"string\">'「'</span>,<span class=\"string\">'》'</span>,<span class=\"string\">'〗'</span>,<span class=\"string\">'】'</span>,<span class=\"string\">'｝'</span>,<span class=\"string\">'〕'</span>,<span class=\"string\">'』'</span>,<span class=\"string\">'”'</span>,<span class=\"string\">'）'</span>,<span class=\"string\">'！'</span>,<span class=\"string\">'；'</span>,<span class=\"string\">'—'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InputTxtFilter( )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> inputFilter( <span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> EditText editText, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> inputLimit)&#123;</span><br><span class=\"line\">        InputFilter[] filters = <span class=\"keyword\">new</span> InputFilter[<span class=\"number\">1</span>];</span><br><span class=\"line\">        filters[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> InputFilter.LengthFilter(inputLimit)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> CharSequence filter(CharSequence <span class=\"keyword\">source</span>, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, Spanned dest, <span class=\"keyword\">int</span> dstart, <span class=\"keyword\">int</span> dend)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isRightCharater = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(type == INPUT_TYPE_EN)&#123;</span><br><span class=\"line\">                    isRightCharater = isLetter(<span class=\"keyword\">source</span>.toString());</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == INPUT_TYPE_CH)&#123;</span><br><span class=\"line\">                    isRightCharater = isChineseWord(<span class=\"keyword\">source</span>.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( !isRightCharater|| dest.toString( ).length( )&gt;=inputLimit )&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">source</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        editText.setFilters(filters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检测String是否全是中文</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isChineseWord( String name )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> res=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] cTemp = name.toCharArray( );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; name.length( ); i++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !isChinese( cTemp[ i ] ) )&#123;</span><br><span class=\"line\">                res=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否为英文字母</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isLetter( String inputStr )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] inputArray = inputStr.toCharArray( );</span><br><span class=\"line\">        List&lt;String&gt; spellList = Arrays.<span class=\"keyword\">asList</span>( SPELL );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">char</span> input : inputArray )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !spellList.contains( input + <span class=\"string\">\"\"</span> ) )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判定输入汉字</span></span><br><span class=\"line\"><span class=\"comment\">     * @param c</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isChinese( <span class=\"keyword\">char</span> c )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">char</span> param : chineseParam )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( param == c )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Character.UnicodeBlock ub = Character.UnicodeBlock.of( c );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在初始化EditText时，调用InputTxtFilter的inputFilter方法，传入输入长度限制、输入内容的类型限制等即可，eg：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">InputTxtFilter</span>.</span></span>input<span class=\"constructor\">Filter(<span class=\"params\">this</span>, <span class=\"params\">mInputEditTxt</span>, InputTxtFilter.INPUT_TYPE_EN, 5)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"屏蔽edittext的复制-粘贴功能\"><a class=\"markdownIt-Anchor\" href=\"#屏蔽edittext的复制-粘贴功能\"></a> 屏蔽EditText的复制、粘贴功能</h3>\n<p>在低版本的Android SDK中，如果对EditText的输入长度有限制时，长按EditText并将选中的内容拖动到EditText输入框中，如果这时候的长度超过了EditText的输入长度限制，程序会直接崩溃掉，在高版本的Android SDK中这个问题已经改了，如果出现上面的情况会直接清空输入框中的内容，为了避免这种讨厌的问题，我们可以屏蔽EditText的复制和粘贴功能，只需要屏蔽EditText的长按响应即可：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 屏蔽复制、粘贴功能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    mInputEditTxt.setCustomSelectionActionModeCallback(<span class=\"keyword\">new</span> ActionMode.Callback() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onCreateActionMode</span><span class=\"params\">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareActionMode</span><span class=\"params\">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode actionMode, MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroyActionMode</span><span class=\"params\">(ActionMode mode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mInputEditTxt.setLongClickable(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>来源：<a href=\"http://www.jianshu.com/p/1f05bb1fde3e\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/1f05bb1fde3e</a><br>\n作者：张明云（@UperOne）</p>\n</blockquote>\n<p>Android上有很多输入法应用，每种输入法都有各自的特点，输入法多数时候是和EditText配合使用，结合我自己的亲身实践分享一下使用EditText过程中遇到的一些问题及解决方法。</p>","more":"<h3 id=\"设置默认输入法\"><a class=\"markdownIt-Anchor\" href=\"#设置默认输入法\"></a> 设置默认输入法</h3>\n<p>有时候为了提高用户体验，在弹出输入法时需要设置默认的输入状态，比如单词应用弹出输入法时，输入法最好是在英文输入状态下。如果是字典应用，弹出输入法时最好是在中文输入状态下，Android并没有提供设置默认的输入状态的接口，但我们可以通过如下方法一样能够达到想要的效果：</p>\n<h4 id=\"默认中文\"><a class=\"markdownIt-Anchor\" href=\"#默认中文\"></a> 默认中文：</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mEditText</span><span class=\"selector-class\">.setInputType</span>(<span class=\"selector-tag\">EditorInfo</span><span class=\"selector-class\">.TYPE_CLASS_TEXT</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"默认英文\"><a class=\"markdownIt-Anchor\" href=\"#默认英文\"></a> 默认英文：</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mEditText</span><span class=\"selector-class\">.setInputType</span>(<span class=\"selector-tag\">EditorInfo</span><span class=\"selector-class\">.TYPE_TEXT_VARIATION_URI</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开和关闭输入法\"><a class=\"markdownIt-Anchor\" href=\"#打开和关闭输入法\"></a> 打开和关闭输入法</h3>\n<p>手动控制输入法的开关状态也能提升用户体验，比如：</p>\n<ul>\n<li>有的搜索框会有一个清除按钮，点击清除按钮时就应该弹出输入法，因为用户清除搜索内容的目的多数时候是需要输入新的内容；</li>\n<li>执行搜索时应该隐藏输入法，因为显示输入法时会遮挡搜索结果，用户体验不太好；</li>\n<li>闹钟来时或者有其它window弹出时应该隐藏输入法，因为输入法也是window，如果不隐藏可能导致输入法遮挡住了其它window等用户体验不太友好的问题。</li>\n</ul>\n<h4 id=\"打开输入法\"><a class=\"markdownIt-Anchor\" href=\"#打开输入法\"></a> 打开输入法：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void open(<span class=\"built_in\">Context</span> <span class=\"built_in\">context</span>, View editText)&#123;</span><br><span class=\"line\">    InputMethodManager inputMethodManager = (InputMethodManager) <span class=\"built_in\">context</span>.getSystemService(<span class=\"built_in\">Context</span>.INPUT_METHOD_SERVICE)<span class=\"comment\">;</span></span><br><span class=\"line\">    inputMethodManager.<span class=\"keyword\">showSoftInput(editText, </span><span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"关闭输入法\"><a class=\"markdownIt-Anchor\" href=\"#关闭输入法\"></a> 关闭输入法：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void <span class=\"keyword\">close(Context </span><span class=\"built_in\">context</span>, View editText)&#123;</span><br><span class=\"line\">    InputMethodManager inputMethodManager = (InputMethodManager) <span class=\"built_in\">context</span>.getSystemService(<span class=\"built_in\">Context</span>.INPUT_METHOD_SERVICE)<span class=\"comment\">;</span></span><br><span class=\"line\">    inputMethodManager.hideSoftInputFromWindow(editText.getWindowToken(), <span class=\"number\">0</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"监听edittext的输入状态\"><a class=\"markdownIt-Anchor\" href=\"#监听edittext的输入状态\"></a> 监听EditText的输入状态</h3>\n<ul>\n<li>类似新浪微博，在输入内容时会提示还可以输入多少字；</li>\n<li>有的搜索引擎，输入内容时实时显示搜索结果；</li>\n<li>有的输入框有输入长度限制，输入内容超过长度限制时弹出提示信息。</li>\n</ul>\n<p>上面这些都可以通过监听EditText的输入状态来实现，具体实现方式如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mInputEditTxt.add<span class=\"constructor\">TextChangedListener(<span class=\"params\">new</span> TextWatcher()</span> &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void before<span class=\"constructor\">TextChanged(CharSequence <span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">start</span>, <span class=\"params\">int</span> <span class=\"params\">count</span>, <span class=\"params\">int</span> <span class=\"params\">after</span>)</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void on<span class=\"constructor\">TextChanged(CharSequence <span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">start</span>, <span class=\"params\">int</span> <span class=\"params\">before</span>, <span class=\"params\">int</span> <span class=\"params\">count</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"监听EditText输入内容的变化，在这里可以监听输入内容的长度。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void after<span class=\"constructor\">TextChanged(Editable <span class=\"params\">s</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"这里可以实现所输即所得，用户输入的同时可以立即在这里根据输入内容执行操作，显示搜索结果！\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"监听输入法中的回车按钮\"><a class=\"markdownIt-Anchor\" href=\"#监听输入法中的回车按钮\"></a> 监听输入法中的回车按钮</h4>\n<p>比如搜狗输入法的右下角有一个回车按钮，我们希望用户点击它时也执行确认功能，可以通过监听EditText的按键点击事件来实现：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 监听输入法按键</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    mInputEditTxt.set<span class=\"constructor\">OnKeyListener(<span class=\"params\">new</span> OnKeyListener()</span> &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public boolean on<span class=\"constructor\">Key(View <span class=\"params\">v</span>, <span class=\"params\">int</span> <span class=\"params\">keyCode</span>, KeyEvent <span class=\"params\">event</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (keyCode<span class=\"operator\"> == </span>KeyEvent.KEYCODE_ENTER<span class=\"operator\"> &amp;&amp; </span>event.get<span class=\"constructor\">Action()</span><span class=\"operator\"> == </span>KeyEvent.ACTION_UP) &#123;</span><br><span class=\"line\">                <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">System</span>.</span></span>out.println(<span class=\"string\">\"手指弹起时执行确认功能\"</span>);</span><br><span class=\"line\">                return <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"改变输入法中回车按钮的显示内容\"><a class=\"markdownIt-Anchor\" href=\"#改变输入法中回车按钮的显示内容\"></a> 改变输入法中回车按钮的显示内容</h4>\n<p>如果回车按钮是执行搜索功能，则回车按钮上显示”搜索”，如果是执行发送功能，则显示”发送”,如果是下一步，则显示”下一步”。</p>\n<p>实现这个功能需要调用EditText的setImeOptions方法：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*<span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>SEARCH 搜索</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>SEND 发送</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>NEXT 下一步</span><br><span class=\"line\"><span class=\"bullet\">* </span>IME<span class=\"emphasis\">_ACTION_</span>DONE 完成</span><br><span class=\"line\"><span class=\"strong\">*/</span></span><br><span class=\"line\"><span class=\"strong\">mInputEditTxt.setImeOptions(EditorInfo.IME_ACTION_SEARCH);</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"限制输入内容\"><a class=\"markdownIt-Anchor\" href=\"#限制输入内容\"></a> 限制输入内容</h4>\n<p>有时候我们根本就不想用户输入一些杂七杂八的内容，因为这需要程序针对输入的内容做各种处理，如果处理不当还会有好多不可预见的问题，索性在输入内容时就禁止用户输入一些非法字符，这可以通过下面的方式实现，新建一个类InputTxtFilter：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> InputTxtFilter&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INPUT_TYPE_EN = <span class=\"number\">0</span>x01;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> INPUT_TYPE_CH = <span class=\"number\">0</span>x02;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] SPELL = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">        <span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"d\"</span>,<span class=\"string\">\"e\"</span>,<span class=\"string\">\"f\"</span>,<span class=\"string\">\"g\"</span>,<span class=\"string\">\"h\"</span>,<span class=\"string\">\"i\"</span>,<span class=\"string\">\"j\"</span>,<span class=\"string\">\"k\"</span>,<span class=\"string\">\"l\"</span>,<span class=\"string\">\"m\"</span>,<span class=\"string\">\"n\"</span>,<span class=\"string\">\"o\"</span>,<span class=\"string\">\"p\"</span>,<span class=\"string\">\"q\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"string\">\"s\"</span>,<span class=\"string\">\"t\"</span>,<span class=\"string\">\"u\"</span>,<span class=\"string\">\"v\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"string\">\"x\"</span>,<span class=\"string\">\"y\"</span>,<span class=\"string\">\"z\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"ā\"</span>,<span class=\"string\">\"á\"</span>,<span class=\"string\">\"ǎ\"</span>,<span class=\"string\">\"à\"</span>,<span class=\"string\">\"ō\"</span>,<span class=\"string\">\"ó\"</span>,<span class=\"string\">\"ǒ\"</span>,<span class=\"string\">\"ò\"</span>,<span class=\"string\">\"ē\"</span>,<span class=\"string\">\"é\"</span>,<span class=\"string\">\"ě\"</span>,<span class=\"string\">\"è\"</span>,<span class=\"string\">\"ī\"</span>,<span class=\"string\">\"í\"</span>,<span class=\"string\">\"ǐ\"</span>,<span class=\"string\">\"ì\"</span>,<span class=\"string\">\"ū\"</span>,<span class=\"string\">\"ú\"</span>,<span class=\"string\">\"ǔ\"</span>,<span class=\"string\">\"ù\"</span>,<span class=\"string\">\"ǖ\"</span>,<span class=\"string\">\"ǘ\"</span>,<span class=\"string\">\"ǚ\"</span>,<span class=\"string\">\"ǜ\"</span>,<span class=\"string\">\"ü\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">char</span>[] chineseParam = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[]&#123;<span class=\"string\">'」'</span>,<span class=\"string\">'，'</span>,<span class=\"string\">'。'</span>,<span class=\"string\">'？'</span>,<span class=\"string\">'…'</span>,<span class=\"string\">'：'</span>,<span class=\"string\">'～'</span>,<span class=\"string\">'【'</span>,<span class=\"string\">'＃'</span>,<span class=\"string\">'、'</span>,<span class=\"string\">'％'</span>,<span class=\"string\">'＊'</span>,<span class=\"string\">'＆'</span>,<span class=\"string\">'＄'</span>,<span class=\"string\">'（'</span>,<span class=\"string\">'‘'</span>,<span class=\"string\">'’'</span>,<span class=\"string\">'“'</span>,<span class=\"string\">'”'</span>,<span class=\"string\">'『'</span>,<span class=\"string\">'〔'</span>,<span class=\"string\">'｛'</span>,<span class=\"string\">'【'</span></span><br><span class=\"line\">        ,<span class=\"string\">'￥'</span>,<span class=\"string\">'￡'</span>,<span class=\"string\">'‖'</span>,<span class=\"string\">'〖'</span>,<span class=\"string\">'《'</span>,<span class=\"string\">'「'</span>,<span class=\"string\">'》'</span>,<span class=\"string\">'〗'</span>,<span class=\"string\">'】'</span>,<span class=\"string\">'｝'</span>,<span class=\"string\">'〕'</span>,<span class=\"string\">'』'</span>,<span class=\"string\">'”'</span>,<span class=\"string\">'）'</span>,<span class=\"string\">'！'</span>,<span class=\"string\">'；'</span>,<span class=\"string\">'—'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InputTxtFilter( )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> inputFilter( <span class=\"keyword\">final</span> Context context, <span class=\"keyword\">final</span> EditText editText, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> type, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> inputLimit)&#123;</span><br><span class=\"line\">        InputFilter[] filters = <span class=\"keyword\">new</span> InputFilter[<span class=\"number\">1</span>];</span><br><span class=\"line\">        filters[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> InputFilter.LengthFilter(inputLimit)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> CharSequence filter(CharSequence <span class=\"keyword\">source</span>, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end, Spanned dest, <span class=\"keyword\">int</span> dstart, <span class=\"keyword\">int</span> dend)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> isRightCharater = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(type == INPUT_TYPE_EN)&#123;</span><br><span class=\"line\">                    isRightCharater = isLetter(<span class=\"keyword\">source</span>.toString());</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == INPUT_TYPE_CH)&#123;</span><br><span class=\"line\">                    isRightCharater = isChineseWord(<span class=\"keyword\">source</span>.toString());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( !isRightCharater|| dest.toString( ).length( )&gt;=inputLimit )&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">source</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        editText.setFilters(filters);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检测String是否全是中文</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isChineseWord( String name )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> res=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] cTemp = name.toCharArray( );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; name.length( ); i++ )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !isChinese( cTemp[ i ] ) )&#123;</span><br><span class=\"line\">                res=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否为英文字母</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isLetter( String inputStr )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] inputArray = inputStr.toCharArray( );</span><br><span class=\"line\">        List&lt;String&gt; spellList = Arrays.<span class=\"keyword\">asList</span>( SPELL );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">char</span> input : inputArray )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( !spellList.contains( input + <span class=\"string\">\"\"</span> ) )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判定输入汉字</span></span><br><span class=\"line\"><span class=\"comment\">     * @param c</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isChinese( <span class=\"keyword\">char</span> c )&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">char</span> param : chineseParam )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( param == c )&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Character.UnicodeBlock ub = Character.UnicodeBlock.of( c );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION</span><br><span class=\"line\">            || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS )&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在初始化EditText时，调用InputTxtFilter的inputFilter方法，传入输入长度限制、输入内容的类型限制等即可，eg：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">InputTxtFilter</span>.</span></span>input<span class=\"constructor\">Filter(<span class=\"params\">this</span>, <span class=\"params\">mInputEditTxt</span>, InputTxtFilter.INPUT_TYPE_EN, 5)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"屏蔽edittext的复制-粘贴功能\"><a class=\"markdownIt-Anchor\" href=\"#屏蔽edittext的复制-粘贴功能\"></a> 屏蔽EditText的复制、粘贴功能</h3>\n<p>在低版本的Android SDK中，如果对EditText的输入长度有限制时，长按EditText并将选中的内容拖动到EditText输入框中，如果这时候的长度超过了EditText的输入长度限制，程序会直接崩溃掉，在高版本的Android SDK中这个问题已经改了，如果出现上面的情况会直接清空输入框中的内容，为了避免这种讨厌的问题，我们可以屏蔽EditText的复制和粘贴功能，只需要屏蔽EditText的长按响应即可：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 屏蔽复制、粘贴功能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    mInputEditTxt.setCustomSelectionActionModeCallback(<span class=\"keyword\">new</span> ActionMode.Callback() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onCreateActionMode</span><span class=\"params\">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onPrepareActionMode</span><span class=\"params\">(ActionMode actionMode, Menu menu)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onActionItemClicked</span><span class=\"params\">(ActionMode actionMode, MenuItem menuItem)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDestroyActionMode</span><span class=\"params\">(ActionMode mode)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mInputEditTxt.setLongClickable(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>"},{"title":"JNI-日志","date":"2019-01-07T08:56:32.000Z","_content":"\n#### 框架\n\nAndroid 日志框架把日志消息分成4个日志缓冲区：\n\n- Main: 主要应用程序的日志信息\n- Event: 系统事件\n- Radio: Radio相关的日志信息\n- System: 调试时产生的低级系统调试信息\n\n这 4 个缓冲区以伪设备的形式保存在/dev/log 系统目录中。因为移动平台上的 I/O 操作代价很大，所以日志信息要保存到内存中，而不能保存在永久性存储器(例如磁盘)中。为了有效控制对存储日志信息的内存空间的利用， logger 模块把日志信息放在固定大小的缓冲区。 Main、radio 和 system 日志以自由文本的格式保存在 64KB的日志缓存区中。事件日志信息带有额外的二进制形式信息，因此保存在256KB的日志缓存区中。\n\n<!-- more -->\n\n#### 原生日志API\n\n开发者不希望直接与Logger内核模块进行交互。 Android 运行库系统提供了一组 API 调用以便于 Java 代码和原生代码向 logger 内核模块发送日志信息。通过 android/log.h 头文件来展示原生代码的日志 API。为了使用日志函数，原生代码需要先包含该头文件\n\n```\n#include <android.h>\n```\n除了要包含合适的头文件，还需要动态修改 Android.mk 文件从而将原生模块与日志库进行链接，可以通过构建系统变量 `LOCAL_LDLIBS` 完成该操作， 该构建系统变量必须被放在共享库构建片段的include语句之前；否则它将不起作用。\n\n```\n动态链接原生模块与日志库\nLOCAL_MODULE := hello-jni\n...\nLOCAL_LDLIBS += -llog\n...\ninclude $(BUILD_SHARED_LIBRARY)\n```\n##### 1.日志消息\n通过日志API发送给logger 模块的每个日志条目都具有以下字段：\n* Priority: 取值分别为：verbose、debug、info、warning、error 和 fatal,表示日志信息的重要程度。支持的日志优先级在android/log.h头文件中声明，\n\n```\n//支持的日志优先级\ntypedef enum android_LogPriority {\n...\nANDROID_LOG_VERBOSE,\nANDROID_LOG_DEBUG,\nANDROID_LOG_INFO,\nANDROID_LOG_WARN,\nANDROID_LOG_ERROR,\nANDROID_LOG_FATAL,\n...\n} android_LogPriority;\n\n```\n* Tag: 标识产生日志信息的组件，Logcat 和 DDMS 工具可以基于这个标签值过滤日志信息。标签值应该尽可能小。\n* Message: 用于存放实际日志信息。在每一个日志消息后自动追加一个换行符，因为循环的日志缓存区很小，因此强烈建议应用程序的日志信息大小尽量保持合适。\n\n##### 2.日志函数\n`android/log.h`头文件也声明了一系列函数，这些函数主要用于原生代码生成日志消息。\n\n* `_android_log_write`:可用于生成一个简单的字符串作为日志信息。它包括日志优先级、日志标签和日志消息。\n\n```\n//生成简单的日志消息\n_android_log_write(ANDROID_LOG_WARN, \"hello-jni\", \"warning log.\");\n```\n\n* `_android_log_print`:可用于生成一个格式化字符串为日志消息。它包括日志优先级、日志标签、字符串格式和格式中指定个数的其他参数， \n\n```\n//生成格式化的日志消息\n_android_log_print(ANDROID_LOG_ERROR, \"hello-jni\", \"Failed with errno %d\", errno);\n```\n\n* `_android_log_vprint`: 除了参数传递方式外，其他功能与`_android_log_print` 函数完全相同，`_android_log_vprint` 函数用va_list 传递附加参数， 而 `_android_log_print` 函数中以连续参数的方式改为传递参数。如果想要调用日志函数时给当前函数的参数个数动态变化时，该函数的优势就会体现出来。\n\n```\n// 传递的参数个数变化时生成日志消息\nvoid log_verbose(const char* format, ...){\n\tva_list args;\n\t\n\tva_start(args, format);\n\t_android_log_vprint(ANDROID_LOG_VERBOSE, \"hello-jni\", format, args);\n\tva_end(args);\n}\n...\nvoid example()\n{\n\tlog_verbose(\"Errno is now %d\", errno);\n}\n```\n\n* `_android_log_assert`: 用于记录断言失败。与其他的日志函数比较，它不包括日志优先级，但总是将所有的日志记录为fatal, 如果附加了调试器，它也SIGTRAP 当前进程以通过 debugger 进一步检查。\n\n```\n// 生成断言失败日志\nif(0!=errno){\n\t_android_log_assert(\"0!=errno\", \"hello-jni\", \"There is an error.\");\n}\n\n```\n\n#### 受控制的日志\n\n在jni目录下，添加文件`my_log.h`\n\n```\n#pragma once\n/**\n * NDK的基本日志框架\n */\n\n#include <android/log.h>\n\n#define MY_LOG_LEVEL_VERBOSE 1\n#define MY_LOG_LEVEL_DEBUG 2\n#define MY_LOG_LEVEL_INFO 3\n#define MY_LOG_LEVEL_WARNING 4\n#define MY_LOG_LEVEL_ERROR 5\n#define MY_LOG_LEVEL_FATAL 6\n#define MY_LOG_LEVEL_SILENT 7\n\n#ifndef MY_LOG_TAG\n#\tdefine MY_LOG_TAG  __FILE__\n#endif\n\n#ifndef MY_LOG_LEVEL\n#\tdefine MY_LOG_LEVEL\tMY_LOG_LEVEL_VERBOSE\n#endif\n\n#define MY_LOG_NOOP (void) 0\n\n#define MY_LOG_PRINT(level, fmt, ...) \\\n\t_android_log_print(level, MY_LOG_TAG, \"(%s:%u) %s: \" fmt, \\\n\t\t\t__FILE__, __LINE__, __PRETTY_FUNCTION__, ##__VA_ARGS__)\n\n#if MY_LOG_LEVEL_VERBOSE >= MY_LOG_LEVEL\n#\tdefine MY_LOG_VERBOSE(fmt,...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_VERBOSE, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_VERBOSE(...) MY_LOG_NOOP\n#endif\n\n\n#if\tMY_LOG_LEVEL_DEBUG >= MY_LOG_LEVEL\n#\tdefine MY_LOG_DEBUG(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_DEBUG, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_DEBUG(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_INFO >= MY_LOG_LEVEL\n#\tdefine MY_LOG_INFO(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_INFO, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_INFO(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_WARNING >= MY_LOG_LEVEL\n#\tdefine MY_LOG_WARNING(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_WARN, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_WARING(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_ERROR >= MY_LOG_LEVEL\n#\tdefine MY_LOG_ERROR(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_ERROR, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_ERROR(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_FATAL >= MY_LOG_LEVEL\n#\tdefine MY_LOG_FATAL(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_FATAL, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_FATAL(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_FATAL >= MY_LOG_LEVEL\n#\tdefine MY_LOG_ASSERT(expression, fmt, ...) \\\n\tif(!(expression)) \\\n\t{ \\\n\t\t__android_log_assert(#expression, MY_LOG_TAG, \\\n\t\t\t\tfmt, ##__VA_ARGS__); \\\n\t}\n#else\n#\tdefine MY_LOG_ASSERT(...) MY_LOG_NOOP\n#endif\n\n\n```\n\n现在可以在原生函数中添加日志声明语句。\n>在原生函数中添加日志声明语句\n\n```\njstring Java_com.example_hellojni_HelloJni_stringFromJNI(JNIEnv* env, jobject thiz)\n{\n\tMY_LOG_VERBOSE(\"The stringFromJNI is called.\");\n\tMY_LOG_DEBUG(\"env=%p thiz=%p\", env, thiz);\n\tMY_LOG_ASSERT(0 != env, \"JNIENV cannot be NULL.\");\n\tMY_LOG_INFO(\"Returning a new string.\");\n\t\n\treturn (*env)->NewStringUTF(env, \"Hello from JNI!\");\n}\n\n```\n\n更新 `Android.mk`\n\n* 1.日志标签\n\n> 通过 MY_LOG_TAG 构建变量定义日志标签\n\n```\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := \\\"hello-jni\\\"\n\n```\n\n* 2.日志等级\n\n>定义默认的日志等级\n\n```\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := \\\"hello-jni\\\"\n\n# 定义基于构建类型的默认日志等级\nifeq ($(APP_OPTIM), release)\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR\nelse\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE\nendif\n\n```\n\n* 3.应用日志配置\n\n在定义`MY_LOG_TAG` 和 `MY_LOG_LEVEL` 构建系统变量时，可以将日志系统配置应用在模块中。\n\n```\n// 将日志系统配置应用在模块中\n\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := hello-jni\n# 定义基于构建类型的默认日志等级\nifeq ($(APP_OPTIM), release)\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR\nelse\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE\nendif\n\n# 追加编译标记\nLOCAL_CFLAGS += -DMY_LOG_TAG=$(MY_LOG_TAG)\nLOCAL_CFLAGS += -DMY_LOG_LEVEL=$(MY_LOG_LEVEL)\n\n# 动态链接日志库\nLOCAL_LDLIBS += -llog\n\n```\n\n\n##### 控制台日志\n\n默认情况下，控制台文件描述符--STDOUT 和 STDERR 在Android 平台上是不可见的。要想将这些日志消息重定向到 Android 系统日志中， 需要打开一个命令提示符或一个终端窗口，并执行如下所示的ADB命令。\n\n```\n// 将控制台日志重定向到 Android 系统日志中\nadb shell stop\nadb shell setprop log.redirect-stdio true\nadb shell start\n\n```\n在重新启动应用程序时，用Logcat视图可以看到控制台日志信息。\n","source":"_posts/JNI-日志.md","raw":"---\ntitle: JNI-日志\ndate: 2019-01-07 16:56:32\ntags: [android, ndk, jni, java]\ncategories: android\n---\n\n#### 框架\n\nAndroid 日志框架把日志消息分成4个日志缓冲区：\n\n- Main: 主要应用程序的日志信息\n- Event: 系统事件\n- Radio: Radio相关的日志信息\n- System: 调试时产生的低级系统调试信息\n\n这 4 个缓冲区以伪设备的形式保存在/dev/log 系统目录中。因为移动平台上的 I/O 操作代价很大，所以日志信息要保存到内存中，而不能保存在永久性存储器(例如磁盘)中。为了有效控制对存储日志信息的内存空间的利用， logger 模块把日志信息放在固定大小的缓冲区。 Main、radio 和 system 日志以自由文本的格式保存在 64KB的日志缓存区中。事件日志信息带有额外的二进制形式信息，因此保存在256KB的日志缓存区中。\n\n<!-- more -->\n\n#### 原生日志API\n\n开发者不希望直接与Logger内核模块进行交互。 Android 运行库系统提供了一组 API 调用以便于 Java 代码和原生代码向 logger 内核模块发送日志信息。通过 android/log.h 头文件来展示原生代码的日志 API。为了使用日志函数，原生代码需要先包含该头文件\n\n```\n#include <android.h>\n```\n除了要包含合适的头文件，还需要动态修改 Android.mk 文件从而将原生模块与日志库进行链接，可以通过构建系统变量 `LOCAL_LDLIBS` 完成该操作， 该构建系统变量必须被放在共享库构建片段的include语句之前；否则它将不起作用。\n\n```\n动态链接原生模块与日志库\nLOCAL_MODULE := hello-jni\n...\nLOCAL_LDLIBS += -llog\n...\ninclude $(BUILD_SHARED_LIBRARY)\n```\n##### 1.日志消息\n通过日志API发送给logger 模块的每个日志条目都具有以下字段：\n* Priority: 取值分别为：verbose、debug、info、warning、error 和 fatal,表示日志信息的重要程度。支持的日志优先级在android/log.h头文件中声明，\n\n```\n//支持的日志优先级\ntypedef enum android_LogPriority {\n...\nANDROID_LOG_VERBOSE,\nANDROID_LOG_DEBUG,\nANDROID_LOG_INFO,\nANDROID_LOG_WARN,\nANDROID_LOG_ERROR,\nANDROID_LOG_FATAL,\n...\n} android_LogPriority;\n\n```\n* Tag: 标识产生日志信息的组件，Logcat 和 DDMS 工具可以基于这个标签值过滤日志信息。标签值应该尽可能小。\n* Message: 用于存放实际日志信息。在每一个日志消息后自动追加一个换行符，因为循环的日志缓存区很小，因此强烈建议应用程序的日志信息大小尽量保持合适。\n\n##### 2.日志函数\n`android/log.h`头文件也声明了一系列函数，这些函数主要用于原生代码生成日志消息。\n\n* `_android_log_write`:可用于生成一个简单的字符串作为日志信息。它包括日志优先级、日志标签和日志消息。\n\n```\n//生成简单的日志消息\n_android_log_write(ANDROID_LOG_WARN, \"hello-jni\", \"warning log.\");\n```\n\n* `_android_log_print`:可用于生成一个格式化字符串为日志消息。它包括日志优先级、日志标签、字符串格式和格式中指定个数的其他参数， \n\n```\n//生成格式化的日志消息\n_android_log_print(ANDROID_LOG_ERROR, \"hello-jni\", \"Failed with errno %d\", errno);\n```\n\n* `_android_log_vprint`: 除了参数传递方式外，其他功能与`_android_log_print` 函数完全相同，`_android_log_vprint` 函数用va_list 传递附加参数， 而 `_android_log_print` 函数中以连续参数的方式改为传递参数。如果想要调用日志函数时给当前函数的参数个数动态变化时，该函数的优势就会体现出来。\n\n```\n// 传递的参数个数变化时生成日志消息\nvoid log_verbose(const char* format, ...){\n\tva_list args;\n\t\n\tva_start(args, format);\n\t_android_log_vprint(ANDROID_LOG_VERBOSE, \"hello-jni\", format, args);\n\tva_end(args);\n}\n...\nvoid example()\n{\n\tlog_verbose(\"Errno is now %d\", errno);\n}\n```\n\n* `_android_log_assert`: 用于记录断言失败。与其他的日志函数比较，它不包括日志优先级，但总是将所有的日志记录为fatal, 如果附加了调试器，它也SIGTRAP 当前进程以通过 debugger 进一步检查。\n\n```\n// 生成断言失败日志\nif(0!=errno){\n\t_android_log_assert(\"0!=errno\", \"hello-jni\", \"There is an error.\");\n}\n\n```\n\n#### 受控制的日志\n\n在jni目录下，添加文件`my_log.h`\n\n```\n#pragma once\n/**\n * NDK的基本日志框架\n */\n\n#include <android/log.h>\n\n#define MY_LOG_LEVEL_VERBOSE 1\n#define MY_LOG_LEVEL_DEBUG 2\n#define MY_LOG_LEVEL_INFO 3\n#define MY_LOG_LEVEL_WARNING 4\n#define MY_LOG_LEVEL_ERROR 5\n#define MY_LOG_LEVEL_FATAL 6\n#define MY_LOG_LEVEL_SILENT 7\n\n#ifndef MY_LOG_TAG\n#\tdefine MY_LOG_TAG  __FILE__\n#endif\n\n#ifndef MY_LOG_LEVEL\n#\tdefine MY_LOG_LEVEL\tMY_LOG_LEVEL_VERBOSE\n#endif\n\n#define MY_LOG_NOOP (void) 0\n\n#define MY_LOG_PRINT(level, fmt, ...) \\\n\t_android_log_print(level, MY_LOG_TAG, \"(%s:%u) %s: \" fmt, \\\n\t\t\t__FILE__, __LINE__, __PRETTY_FUNCTION__, ##__VA_ARGS__)\n\n#if MY_LOG_LEVEL_VERBOSE >= MY_LOG_LEVEL\n#\tdefine MY_LOG_VERBOSE(fmt,...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_VERBOSE, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_VERBOSE(...) MY_LOG_NOOP\n#endif\n\n\n#if\tMY_LOG_LEVEL_DEBUG >= MY_LOG_LEVEL\n#\tdefine MY_LOG_DEBUG(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_DEBUG, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_DEBUG(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_INFO >= MY_LOG_LEVEL\n#\tdefine MY_LOG_INFO(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_INFO, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_INFO(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_WARNING >= MY_LOG_LEVEL\n#\tdefine MY_LOG_WARNING(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_WARN, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_WARING(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_ERROR >= MY_LOG_LEVEL\n#\tdefine MY_LOG_ERROR(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_ERROR, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_ERROR(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_FATAL >= MY_LOG_LEVEL\n#\tdefine MY_LOG_FATAL(fmt, ...) \\\n\tMY_LOG_PRINT(ANDROID_LOG_FATAL, fmt, ##__VA_ARGS__)\n#else\n#\tdefine MY_LOG_FATAL(...) MY_LOG_NOOP\n#endif\n\n#if MY_LOG_LEVEL_FATAL >= MY_LOG_LEVEL\n#\tdefine MY_LOG_ASSERT(expression, fmt, ...) \\\n\tif(!(expression)) \\\n\t{ \\\n\t\t__android_log_assert(#expression, MY_LOG_TAG, \\\n\t\t\t\tfmt, ##__VA_ARGS__); \\\n\t}\n#else\n#\tdefine MY_LOG_ASSERT(...) MY_LOG_NOOP\n#endif\n\n\n```\n\n现在可以在原生函数中添加日志声明语句。\n>在原生函数中添加日志声明语句\n\n```\njstring Java_com.example_hellojni_HelloJni_stringFromJNI(JNIEnv* env, jobject thiz)\n{\n\tMY_LOG_VERBOSE(\"The stringFromJNI is called.\");\n\tMY_LOG_DEBUG(\"env=%p thiz=%p\", env, thiz);\n\tMY_LOG_ASSERT(0 != env, \"JNIENV cannot be NULL.\");\n\tMY_LOG_INFO(\"Returning a new string.\");\n\t\n\treturn (*env)->NewStringUTF(env, \"Hello from JNI!\");\n}\n\n```\n\n更新 `Android.mk`\n\n* 1.日志标签\n\n> 通过 MY_LOG_TAG 构建变量定义日志标签\n\n```\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := \\\"hello-jni\\\"\n\n```\n\n* 2.日志等级\n\n>定义默认的日志等级\n\n```\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := \\\"hello-jni\\\"\n\n# 定义基于构建类型的默认日志等级\nifeq ($(APP_OPTIM), release)\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR\nelse\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE\nendif\n\n```\n\n* 3.应用日志配置\n\n在定义`MY_LOG_TAG` 和 `MY_LOG_LEVEL` 构建系统变量时，可以将日志系统配置应用在模块中。\n\n```\n// 将日志系统配置应用在模块中\n\nLOCAL_MODULE := hello-jni\n...\n# 定义日志标签\nMY_LOG_TAG := hello-jni\n# 定义基于构建类型的默认日志等级\nifeq ($(APP_OPTIM), release)\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR\nelse\n\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE\nendif\n\n# 追加编译标记\nLOCAL_CFLAGS += -DMY_LOG_TAG=$(MY_LOG_TAG)\nLOCAL_CFLAGS += -DMY_LOG_LEVEL=$(MY_LOG_LEVEL)\n\n# 动态链接日志库\nLOCAL_LDLIBS += -llog\n\n```\n\n\n##### 控制台日志\n\n默认情况下，控制台文件描述符--STDOUT 和 STDERR 在Android 平台上是不可见的。要想将这些日志消息重定向到 Android 系统日志中， 需要打开一个命令提示符或一个终端窗口，并执行如下所示的ADB命令。\n\n```\n// 将控制台日志重定向到 Android 系统日志中\nadb shell stop\nadb shell setprop log.redirect-stdio true\nadb shell start\n\n```\n在重新启动应用程序时，用Logcat视图可以看到控制台日志信息。\n","slug":"JNI-日志","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi500bwsify73x9wmno","content":"<h4 id=\"框架\"><a class=\"markdownIt-Anchor\" href=\"#框架\"></a> 框架</h4>\n<p>Android 日志框架把日志消息分成4个日志缓冲区：</p>\n<ul>\n<li>Main: 主要应用程序的日志信息</li>\n<li>Event: 系统事件</li>\n<li>Radio: Radio相关的日志信息</li>\n<li>System: 调试时产生的低级系统调试信息</li>\n</ul>\n<p>这 4 个缓冲区以伪设备的形式保存在/dev/log 系统目录中。因为移动平台上的 I/O 操作代价很大，所以日志信息要保存到内存中，而不能保存在永久性存储器(例如磁盘)中。为了有效控制对存储日志信息的内存空间的利用， logger 模块把日志信息放在固定大小的缓冲区。 Main、radio 和 system 日志以自由文本的格式保存在 64KB的日志缓存区中。事件日志信息带有额外的二进制形式信息，因此保存在256KB的日志缓存区中。</p>\n<a id=\"more\"></a>\n<h4 id=\"原生日志api\"><a class=\"markdownIt-Anchor\" href=\"#原生日志api\"></a> 原生日志API</h4>\n<p>开发者不希望直接与Logger内核模块进行交互。 Android 运行库系统提供了一组 API 调用以便于 Java 代码和原生代码向 logger 内核模块发送日志信息。通过 android/log.h 头文件来展示原生代码的日志 API。为了使用日志函数，原生代码需要先包含该头文件</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>除了要包含合适的头文件，还需要动态修改 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件从而将原生模块与日志库进行链接，可以通过构建系统变量 <code>LOCAL_LDLIBS</code> 完成该操作， 该构建系统变量必须被放在共享库构建片段的include语句之前；否则它将不起作用。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态链接原生模块与日志库</span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_LDLIBS += -llog</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1日志消息\"><a class=\"markdownIt-Anchor\" href=\"#1日志消息\"></a> 1.日志消息</h5>\n<p>通过日志API发送给logger 模块的每个日志条目都具有以下字段：</p>\n<ul>\n<li>Priority: 取值分别为：verbose、debug、info、warning、error 和 fatal,表示日志信息的重要程度。支持的日志优先级在android/log.h头文件中声明，</li>\n</ul>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//支持的日志优先级</span><br><span class=\"line\">typedef enum android_LogPriority &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_VERBOSE</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_DEBUG</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_INFO</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_WARN</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_ERROR</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_FATAL</span>,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; android_LogPriority;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Tag: 标识产生日志信息的组件，Logcat 和 DDMS 工具可以基于这个标签值过滤日志信息。标签值应该尽可能小。</li>\n<li>Message: 用于存放实际日志信息。在每一个日志消息后自动追加一个换行符，因为循环的日志缓存区很小，因此强烈建议应用程序的日志信息大小尽量保持合适。</li>\n</ul>\n<h5 id=\"2日志函数\"><a class=\"markdownIt-Anchor\" href=\"#2日志函数\"></a> 2.日志函数</h5>\n<p><code>android/log.h</code>头文件也声明了一系列函数，这些函数主要用于原生代码生成日志消息。</p>\n<ul>\n<li><code>_android_log_write</code>:可用于生成一个简单的字符串作为日志信息。它包括日志优先级、日志标签和日志消息。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成简单的日志消息</span></span><br><span class=\"line\"><span class=\"selector-tag\">_android_log_write</span>(ANDROID_LOG_WARN, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"warning log.\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_print</code>:可用于生成一个格式化字符串为日志消息。它包括日志优先级、日志标签、字符串格式和格式中指定个数的其他参数，</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成格式化的日志消息</span></span><br><span class=\"line\"><span class=\"constructor\">_android_log_print(ANDROID_LOG_ERROR, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"Failed with errno %d\"</span>, <span class=\"params\">errno</span>)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_vprint</code>: 除了参数传递方式外，其他功能与<code>_android_log_print</code> 函数完全相同，<code>_android_log_vprint</code> 函数用va_list 传递附加参数， 而 <code>_android_log_print</code> 函数中以连续参数的方式改为传递参数。如果想要调用日志函数时给当前函数的参数个数动态变化时，该函数的优势就会体现出来。</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传递的参数个数变化时生成日志消息</span></span><br><span class=\"line\">void log<span class=\"constructor\">_verbose(<span class=\"params\">const</span> <span class=\"params\">char</span><span class=\"operator\">*</span> <span class=\"params\">format</span>, <span class=\"operator\">...</span>)</span>&#123;</span><br><span class=\"line\">\tva_list args;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tva<span class=\"constructor\">_start(<span class=\"params\">args</span>, <span class=\"params\">format</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">_android_log_vprint(ANDROID_LOG_VERBOSE, <span class=\"string\">\"hello-jni\"</span>, <span class=\"params\">format</span>, <span class=\"params\">args</span>)</span>;</span><br><span class=\"line\">\tva<span class=\"constructor\">_end(<span class=\"params\">args</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">void example<span class=\"literal\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tlog<span class=\"constructor\">_verbose(<span class=\"string\">\"Errno is now %d\"</span>, <span class=\"params\">errno</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_assert</code>: 用于记录断言失败。与其他的日志函数比较，它不包括日志优先级，但总是将所有的日志记录为fatal, 如果附加了调试器，它也SIGTRAP 当前进程以通过 debugger 进一步检查。</li>\n</ul>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成断言失败日志</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">0</span>!=errno)&#123;</span><br><span class=\"line\">\t<span class=\"number\">_</span>android<span class=\"number\">_</span>log<span class=\"number\">_</span><span class=\"keyword\">assert</span>(<span class=\"string\">\"0!=errno\"</span>, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"There is an error.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"受控制的日志\"><a class=\"markdownIt-Anchor\" href=\"#受控制的日志\"></a> 受控制的日志</h4>\n<p>在jni目录下，添加文件<code>my_log.h</code></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#pragma once</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * NDK的基本日志框架</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &lt;android/log.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_VERBOSE <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_DEBUG <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_INFO <span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_WARNING <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_ERROR <span class=\"number\">5</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_FATAL <span class=\"number\">6</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_SILENT <span class=\"number\">7</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MY_LOG_TAG</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_TAG  __FILE__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL\tMY_LOG_LEVEL_VERBOSE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_NOOP (void) <span class=\"number\">0</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_PRINT(level, fmt, ...) \\</span></span><br><span class=\"line\">\t_android_log_print(level, MY_LOG_TAG, <span class=\"string\">\"(%s:%u) %s: \"</span> fmt, \\</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">__FILE__</span>, <span class=\"keyword\">__LINE__</span>, __PRETTY_FUNCTION__, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_VERBOSE &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_VERBOSE(fmt,...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_VERBOSE, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_VERBOSE(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span>\tMY_LOG_LEVEL_DEBUG &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_DEBUG(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_DEBUG, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_DEBUG(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_INFO &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_INFO(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_INFO, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_INFO(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_WARNING &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_WARNING(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_WARN, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_WARING(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_ERROR &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ERROR(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_ERROR, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ERROR(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_FATAL(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_FATAL, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_FATAL(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ASSERT(expression, fmt, ...) \\</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(expression)) \\</span><br><span class=\"line\">\t&#123; \\</span><br><span class=\"line\">\t\t__android_log_assert(<span class=\"meta\">#expression, MY_LOG_TAG, \\</span></span><br><span class=\"line\">\t\t\t\tfmt, <span class=\"meta\">##__VA_ARGS__); \\</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ASSERT(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>现在可以在原生函数中添加日志声明语句。</p>\n<blockquote>\n<p>在原生函数中添加日志声明语句</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstring <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Java_com</span>.</span></span>example<span class=\"constructor\">_hellojni_HelloJni_stringFromJNI(JNIEnv<span class=\"operator\">*</span> <span class=\"params\">env</span>, <span class=\"params\">jobject</span> <span class=\"params\">thiz</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_VERBOSE(<span class=\"string\">\"The stringFromJNI is called.\"</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_DEBUG(<span class=\"string\">\"env=%p thiz=%p\"</span>, <span class=\"params\">env</span>, <span class=\"params\">thiz</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_ASSERT(0 != <span class=\"params\">env</span>, <span class=\"string\">\"JNIENV cannot be NULL.\"</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_INFO(<span class=\"string\">\"Returning a new string.\"</span>)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn (*env)-&gt;<span class=\"constructor\">NewStringUTF(<span class=\"params\">env</span>, <span class=\"string\">\"Hello from JNI!\"</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新 <code>Android.mk</code></p>\n<ul>\n<li>1.日志标签</li>\n</ul>\n<blockquote>\n<p>通过 MY_LOG_TAG 构建变量定义日志标签</p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\">MY_LOG_TAG := \\<span class=\"string\">\"hello-jni\\\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.日志等级</li>\n</ul>\n<blockquote>\n<p>定义默认的日志等级</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">LOCAL_MODULE</span> :<span class=\"string\">= hello-jni</span></span><br><span class=\"line\"><span class=\"attr\">...</span></span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\"><span class=\"attr\">MY_LOG_TAG</span> :<span class=\"string\">= \\\"hello-jni\\\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义基于构建类型的默认日志等级</span></span><br><span class=\"line\"><span class=\"attr\">ifeq</span> <span class=\"string\">($(APP_OPTIM), release)</span></span><br><span class=\"line\">\t<span class=\"attr\">MY_LOG_LEVEL</span> :<span class=\"string\">= MY_LOG_LEVEL_ERROR</span></span><br><span class=\"line\"><span class=\"attr\">else</span></span><br><span class=\"line\">\t<span class=\"attr\">MY_LOG_LEVEL</span> :<span class=\"string\">= MY_LOG_LEVEL_VERBOSE</span></span><br><span class=\"line\"><span class=\"attr\">endif</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.应用日志配置</li>\n</ul>\n<p>在定义<code>MY_LOG_TAG</code> 和 <code>MY_LOG_LEVEL</code> 构建系统变量时，可以将日志系统配置应用在模块中。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将日志系统配置应用在模块中</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\">MY_LOG_TAG := hello-jni</span><br><span class=\"line\"><span class=\"comment\"># 定义基于构建类型的默认日志等级</span></span><br><span class=\"line\"><span class=\"keyword\">ifeq</span> (<span class=\"variable\">$(APP_OPTIM)</span>, release)</span><br><span class=\"line\">\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 追加编译标记</span></span><br><span class=\"line\">LOCAL_CFLAGS += -DMY_LOG_TAG=<span class=\"variable\">$(MY_LOG_TAG)</span></span><br><span class=\"line\">LOCAL_CFLAGS += -DMY_LOG_LEVEL=<span class=\"variable\">$(MY_LOG_LEVEL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态链接日志库</span></span><br><span class=\"line\">LOCAL_LDLIBS += -llog</span><br></pre></td></tr></table></figure>\n<h5 id=\"控制台日志\"><a class=\"markdownIt-Anchor\" href=\"#控制台日志\"></a> 控制台日志</h5>\n<p>默认情况下，控制台文件描述符–STDOUT 和 STDERR 在Android 平台上是不可见的。要想将这些日志消息重定向到 Android 系统日志中， 需要打开一个命令提示符或一个终端窗口，并执行如下所示的ADB命令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将控制台日志重定向到 Android 系统日志中</span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> stop</span></span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> setprop log.redirect-stdio <span class=\"literal\">true</span></span></span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> start</span></span><br></pre></td></tr></table></figure>\n<p>在重新启动应用程序时，用Logcat视图可以看到控制台日志信息。</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"框架\"><a class=\"markdownIt-Anchor\" href=\"#框架\"></a> 框架</h4>\n<p>Android 日志框架把日志消息分成4个日志缓冲区：</p>\n<ul>\n<li>Main: 主要应用程序的日志信息</li>\n<li>Event: 系统事件</li>\n<li>Radio: Radio相关的日志信息</li>\n<li>System: 调试时产生的低级系统调试信息</li>\n</ul>\n<p>这 4 个缓冲区以伪设备的形式保存在/dev/log 系统目录中。因为移动平台上的 I/O 操作代价很大，所以日志信息要保存到内存中，而不能保存在永久性存储器(例如磁盘)中。为了有效控制对存储日志信息的内存空间的利用， logger 模块把日志信息放在固定大小的缓冲区。 Main、radio 和 system 日志以自由文本的格式保存在 64KB的日志缓存区中。事件日志信息带有额外的二进制形式信息，因此保存在256KB的日志缓存区中。</p>","more":"<h4 id=\"原生日志api\"><a class=\"markdownIt-Anchor\" href=\"#原生日志api\"></a> 原生日志API</h4>\n<p>开发者不希望直接与Logger内核模块进行交互。 Android 运行库系统提供了一组 API 调用以便于 Java 代码和原生代码向 logger 内核模块发送日志信息。通过 android/log.h 头文件来展示原生代码的日志 API。为了使用日志函数，原生代码需要先包含该头文件</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;android.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>除了要包含合适的头文件，还需要动态修改 <a href=\"http://Android.mk\" target=\"_blank\" rel=\"noopener\">Android.mk</a> 文件从而将原生模块与日志库进行链接，可以通过构建系统变量 <code>LOCAL_LDLIBS</code> 完成该操作， 该构建系统变量必须被放在共享库构建片段的include语句之前；否则它将不起作用。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态链接原生模块与日志库</span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\">LOCAL_LDLIBS += -llog</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"variable\">$(BUILD_SHARED_LIBRARY)</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"1日志消息\"><a class=\"markdownIt-Anchor\" href=\"#1日志消息\"></a> 1.日志消息</h5>\n<p>通过日志API发送给logger 模块的每个日志条目都具有以下字段：</p>\n<ul>\n<li>Priority: 取值分别为：verbose、debug、info、warning、error 和 fatal,表示日志信息的重要程度。支持的日志优先级在android/log.h头文件中声明，</li>\n</ul>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//支持的日志优先级</span><br><span class=\"line\">typedef enum android_LogPriority &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_VERBOSE</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_DEBUG</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_INFO</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_WARN</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_ERROR</span>,</span><br><span class=\"line\"><span class=\"type\">ANDROID_LOG_FATAL</span>,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125; android_LogPriority;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Tag: 标识产生日志信息的组件，Logcat 和 DDMS 工具可以基于这个标签值过滤日志信息。标签值应该尽可能小。</li>\n<li>Message: 用于存放实际日志信息。在每一个日志消息后自动追加一个换行符，因为循环的日志缓存区很小，因此强烈建议应用程序的日志信息大小尽量保持合适。</li>\n</ul>\n<h5 id=\"2日志函数\"><a class=\"markdownIt-Anchor\" href=\"#2日志函数\"></a> 2.日志函数</h5>\n<p><code>android/log.h</code>头文件也声明了一系列函数，这些函数主要用于原生代码生成日志消息。</p>\n<ul>\n<li><code>_android_log_write</code>:可用于生成一个简单的字符串作为日志信息。它包括日志优先级、日志标签和日志消息。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成简单的日志消息</span></span><br><span class=\"line\"><span class=\"selector-tag\">_android_log_write</span>(ANDROID_LOG_WARN, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"warning log.\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_print</code>:可用于生成一个格式化字符串为日志消息。它包括日志优先级、日志标签、字符串格式和格式中指定个数的其他参数，</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成格式化的日志消息</span></span><br><span class=\"line\"><span class=\"constructor\">_android_log_print(ANDROID_LOG_ERROR, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"Failed with errno %d\"</span>, <span class=\"params\">errno</span>)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_vprint</code>: 除了参数传递方式外，其他功能与<code>_android_log_print</code> 函数完全相同，<code>_android_log_vprint</code> 函数用va_list 传递附加参数， 而 <code>_android_log_print</code> 函数中以连续参数的方式改为传递参数。如果想要调用日志函数时给当前函数的参数个数动态变化时，该函数的优势就会体现出来。</li>\n</ul>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传递的参数个数变化时生成日志消息</span></span><br><span class=\"line\">void log<span class=\"constructor\">_verbose(<span class=\"params\">const</span> <span class=\"params\">char</span><span class=\"operator\">*</span> <span class=\"params\">format</span>, <span class=\"operator\">...</span>)</span>&#123;</span><br><span class=\"line\">\tva_list args;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tva<span class=\"constructor\">_start(<span class=\"params\">args</span>, <span class=\"params\">format</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">_android_log_vprint(ANDROID_LOG_VERBOSE, <span class=\"string\">\"hello-jni\"</span>, <span class=\"params\">format</span>, <span class=\"params\">args</span>)</span>;</span><br><span class=\"line\">\tva<span class=\"constructor\">_end(<span class=\"params\">args</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">void example<span class=\"literal\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tlog<span class=\"constructor\">_verbose(<span class=\"string\">\"Errno is now %d\"</span>, <span class=\"params\">errno</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>_android_log_assert</code>: 用于记录断言失败。与其他的日志函数比较，它不包括日志优先级，但总是将所有的日志记录为fatal, 如果附加了调试器，它也SIGTRAP 当前进程以通过 debugger 进一步检查。</li>\n</ul>\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成断言失败日志</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"number\">0</span>!=errno)&#123;</span><br><span class=\"line\">\t<span class=\"number\">_</span>android<span class=\"number\">_</span>log<span class=\"number\">_</span><span class=\"keyword\">assert</span>(<span class=\"string\">\"0!=errno\"</span>, <span class=\"string\">\"hello-jni\"</span>, <span class=\"string\">\"There is an error.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"受控制的日志\"><a class=\"markdownIt-Anchor\" href=\"#受控制的日志\"></a> 受控制的日志</h4>\n<p>在jni目录下，添加文件<code>my_log.h</code></p>\n<figure class=\"highlight hsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#pragma once</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * NDK的基本日志框架</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> &lt;android/log.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_VERBOSE <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_DEBUG <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_INFO <span class=\"number\">3</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_WARNING <span class=\"number\">4</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_ERROR <span class=\"number\">5</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_FATAL <span class=\"number\">6</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL_SILENT <span class=\"number\">7</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MY_LOG_TAG</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_TAG  __FILE__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_LEVEL\tMY_LOG_LEVEL_VERBOSE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_NOOP (void) <span class=\"number\">0</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MY_LOG_PRINT(level, fmt, ...) \\</span></span><br><span class=\"line\">\t_android_log_print(level, MY_LOG_TAG, <span class=\"string\">\"(%s:%u) %s: \"</span> fmt, \\</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">__FILE__</span>, <span class=\"keyword\">__LINE__</span>, __PRETTY_FUNCTION__, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_VERBOSE &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_VERBOSE(fmt,...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_VERBOSE, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_VERBOSE(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span>\tMY_LOG_LEVEL_DEBUG &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_DEBUG(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_DEBUG, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_DEBUG(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_INFO &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_INFO(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_INFO, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_INFO(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_WARNING &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_WARNING(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_WARN, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_WARING(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_ERROR &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ERROR(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_ERROR, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ERROR(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_FATAL(fmt, ...) \\</span></span><br><span class=\"line\">\tMY_LOG_PRINT(ANDROID_LOG_FATAL, fmt, <span class=\"meta\">##__VA_ARGS__)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_FATAL(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> MY_LOG_LEVEL_FATAL &gt;= MY_LOG_LEVEL</span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ASSERT(expression, fmt, ...) \\</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!(expression)) \\</span><br><span class=\"line\">\t&#123; \\</span><br><span class=\"line\">\t\t__android_log_assert(<span class=\"meta\">#expression, MY_LOG_TAG, \\</span></span><br><span class=\"line\">\t\t\t\tfmt, <span class=\"meta\">##__VA_ARGS__); \\</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\">#\t<span class=\"meta-keyword\">define</span> MY_LOG_ASSERT(...) MY_LOG_NOOP</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>现在可以在原生函数中添加日志声明语句。</p>\n<blockquote>\n<p>在原生函数中添加日志声明语句</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstring <span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Java_com</span>.</span></span>example<span class=\"constructor\">_hellojni_HelloJni_stringFromJNI(JNIEnv<span class=\"operator\">*</span> <span class=\"params\">env</span>, <span class=\"params\">jobject</span> <span class=\"params\">thiz</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_VERBOSE(<span class=\"string\">\"The stringFromJNI is called.\"</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_DEBUG(<span class=\"string\">\"env=%p thiz=%p\"</span>, <span class=\"params\">env</span>, <span class=\"params\">thiz</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_ASSERT(0 != <span class=\"params\">env</span>, <span class=\"string\">\"JNIENV cannot be NULL.\"</span>)</span>;</span><br><span class=\"line\">\t<span class=\"constructor\">MY_LOG_INFO(<span class=\"string\">\"Returning a new string.\"</span>)</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn (*env)-&gt;<span class=\"constructor\">NewStringUTF(<span class=\"params\">env</span>, <span class=\"string\">\"Hello from JNI!\"</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新 <code>Android.mk</code></p>\n<ul>\n<li>1.日志标签</li>\n</ul>\n<blockquote>\n<p>通过 MY_LOG_TAG 构建变量定义日志标签</p>\n</blockquote>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\">MY_LOG_TAG := \\<span class=\"string\">\"hello-jni\\\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.日志等级</li>\n</ul>\n<blockquote>\n<p>定义默认的日志等级</p>\n</blockquote>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">LOCAL_MODULE</span> :<span class=\"string\">= hello-jni</span></span><br><span class=\"line\"><span class=\"attr\">...</span></span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\"><span class=\"attr\">MY_LOG_TAG</span> :<span class=\"string\">= \\\"hello-jni\\\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义基于构建类型的默认日志等级</span></span><br><span class=\"line\"><span class=\"attr\">ifeq</span> <span class=\"string\">($(APP_OPTIM), release)</span></span><br><span class=\"line\">\t<span class=\"attr\">MY_LOG_LEVEL</span> :<span class=\"string\">= MY_LOG_LEVEL_ERROR</span></span><br><span class=\"line\"><span class=\"attr\">else</span></span><br><span class=\"line\">\t<span class=\"attr\">MY_LOG_LEVEL</span> :<span class=\"string\">= MY_LOG_LEVEL_VERBOSE</span></span><br><span class=\"line\"><span class=\"attr\">endif</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.应用日志配置</li>\n</ul>\n<p>在定义<code>MY_LOG_TAG</code> 和 <code>MY_LOG_LEVEL</code> 构建系统变量时，可以将日志系统配置应用在模块中。</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将日志系统配置应用在模块中</span><br><span class=\"line\"></span><br><span class=\"line\">LOCAL_MODULE := hello-jni</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\"># 定义日志标签</span></span><br><span class=\"line\">MY_LOG_TAG := hello-jni</span><br><span class=\"line\"><span class=\"comment\"># 定义基于构建类型的默认日志等级</span></span><br><span class=\"line\"><span class=\"keyword\">ifeq</span> (<span class=\"variable\">$(APP_OPTIM)</span>, release)</span><br><span class=\"line\">\tMY_LOG_LEVEL := MY_LOG_LEVEL_ERROR</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tMY_LOG_LEVEL := MY_LOG_LEVEL_VERBOSE</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 追加编译标记</span></span><br><span class=\"line\">LOCAL_CFLAGS += -DMY_LOG_TAG=<span class=\"variable\">$(MY_LOG_TAG)</span></span><br><span class=\"line\">LOCAL_CFLAGS += -DMY_LOG_LEVEL=<span class=\"variable\">$(MY_LOG_LEVEL)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 动态链接日志库</span></span><br><span class=\"line\">LOCAL_LDLIBS += -llog</span><br></pre></td></tr></table></figure>\n<h5 id=\"控制台日志\"><a class=\"markdownIt-Anchor\" href=\"#控制台日志\"></a> 控制台日志</h5>\n<p>默认情况下，控制台文件描述符–STDOUT 和 STDERR 在Android 平台上是不可见的。要想将这些日志消息重定向到 Android 系统日志中， 需要打开一个命令提示符或一个终端窗口，并执行如下所示的ADB命令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将控制台日志重定向到 Android 系统日志中</span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> stop</span></span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> setprop log.redirect-stdio <span class=\"literal\">true</span></span></span><br><span class=\"line\">adb <span class=\"keyword\">shell</span><span class=\"bash\"> start</span></span><br></pre></td></tr></table></figure>\n<p>在重新启动应用程序时，用Logcat视图可以看到控制台日志信息。</p>"},{"title":"JNI-数据类型","date":"2019-01-03T09:36:46.000Z","_content":"\n### JNI的数据类型\n\nJava 中有两种数据类型：\n\n- 基本数据类型：布尔型、字节型、字符型、短整型、整型、长整型、浮点型和双精度类型。\n- 引用类型：字符串类型、数组类及其他类。\n\n<!-- more -->\n\nJava 基本数据类型\n\n|Java 类型| JNI类型| C/C++类型| 大小 |\n|:--:|:--:|:--:|:--:|\n|boolean| jboolean|unsigned char| 无符号8位|\n|byte|jbyte|char| 有符号8位|\n|char|jchar|unsigned short| 无符号16位|\n|short|jshort|short|有符号16位|\n|int|jint|int|有符号32位|\n|long|jlong|long long|有符号64位|\n|float|jfloat|float|32位|\n|double|jdouble|double|64位|\n\nJava 引用类型映射\n\n|Java 类型| 原生类型|\n|:--:|:--:|\n|java.lang.Class|jclass|\n|java.lang.Throwable|jthrowable|\n|java.lang.String|jstring|\n|Other objects|jobjects|\n|java.lang.Object]|jobjectArray|\n|boolean[]|jbooleanArray|\n|char[]|jcharArray|\n|short[]|jshortArray|\n|byte[]|jbyteArray|\n|char[]|jcharArray|\n|short[]|jshortArray|\n|int[]|jintArray|\n|long[]|jlongArray|\n|float[]|jfloatArray|\n|double[]|jdoubleArray|\n|Other arrays|jarray|\n\n#### 对引用数据类型的操作\n\n##### 字符串操作\n\nJNI把 Java 字符串当成应用类型处理。这些引用类型并不像原生 C 字符串一样可以直接使用， JNI 提供了 Java 字符串与C字符串之间相互转化的必要函数。因为Java字符串对象是不可变的，因此JNI不提供任何修改现有的Java字符串内容的函数。\n\nJNI支持Unicode编码格式和UTF-8编码格式的字符串，还提供两组函数通过JNIEnv接口指针处理这些字符串编码。\n\n* 1.创建字符串\n\t\n\t可以在原生代码中用 NewString 函数构建Unicode编码格式的字符串实例，用NewStringUTF函数构建UTF-8编码格式的字符串实例。这些函数以一个C字符串为参数，并返回一个Java字符串引用类型jstring值。\n\n\t```\njstring javaString;\njavaString = (*env)->NewStringUTF(env, \"Hello world!\");\n```\n\t在内存溢出的情况下，这些函数返回NULL以通过原生代码虚拟机中抛出异常，这样原生代码就会停止运行。\n\n* 2.把 Java 字符串转换成 C 字符串\n\n\t为了在原生代码中使用 Java 字符串，需要先将 Java 字符串转换成 C 字符串。用 GetStringChars 函数可以将Unicode格式的Java字符串转换成 C 字符串， 用GetStringUTFChars 函数可以将UTF-8格式的Java字符串转换成C字符串。 这些函数的第三个参数均为可选参数，该可选参数名是isCopy, 它让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。\n\t\n\t```\n\t\t\t\t将Java字符串转换成C字符串\n\t\t\n\t\tconst jbyte* str;\n\t\tjboolean isCopy;\n\t\t\n\t\tstr = (*env)->GetStringUTFChars(env, javaString, &isCopy);\n\t\tif(0 != str){\n\t\t\tprintf(\"Java string: %s\", str);\n\t\t\t\n\t\t\tif(JNI_TRUE == isCopy){\n\t\t\t\tprintf(\"C string is a copy of the Java string.\")\n\t\t\t} else {\n\t\t\t\tprintf(\"C string points to actual string.\");\n\t\t\t}\n\t\t}\n\t\n\t```\n* 3.释放字符串\n\n\t通过JNI GetStringChars 函数和 GetStringUTFChars 函数获得的C字符串在原生代码中使用完之后需要正确地释放，否则将会引起内存泄露。 JNI提供了 ReleaseStringChars 函数释放 Unicode编码格式的字符串，而用ReleaseStringUTFChars函数释放UTF-8编码格式的字符串。\n\t\n\t```\n\t释放 JNI 函数返回的 C 字符串\n\t(*env)->ReleaseStringUTFChars(env, javaString, str);\n\t```\n\t\n##### 数组操作\n\nJNI 把 Java 数组当成引用类型来处理，JNI提供必要的函数访问和处理Java数组。\n\n* 1.创建数组\n\n\t用 New&lt;Type&gt;Array 函数在原生代码中创建数组实例，其中&lt;Type&gt;可以是 Int, Char 和 Boolean 等，例如 NewIntArray。使用这些函数时应该以参数的形式给出数组的大小。\n\t\n\t```\n\t\t在原生代码中创建数组\n\t\t\n\t\tjintArray javaArray;\n\t\tjavaArray = (*env)->NewIntArray(env, 10);\n\t\tif(0 != javaArray){\n\t\t\t/* 现在可以使用数组了。 */\n\t\t}\n\t\t\n\t```\n\t与 NewString 函数一样，在内存溢出的情况下，New&lt;Type&gt;Array 函数将返回 NULL 以通知原生代码虚拟机中有异常抛出，这样原生代码就会停止运行。\n* 2.访问数组元素\n\n\tJNI 提供两种访问 Java 数组元素的方法，可以将数组的代码复制成C数组或者让JNI提供直接指向数组元素的指针。\n\t\n* 3.对副本的操作\n\n\tGet&lt;Type&gt;ArrayRegion 函数将给定的基本Java数组复制到给定的C数组中。\n\t\n\t```\n\t\t将Java数组区复制到C数组中\n\t\tjint nativeArray[10];\n\t\t(*env)->GetIntArrayRegion(env, javaArray, 0, 10, nativeArray);\n\t```\n\t原生代码可以像使用普通的C数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，可以使用 Set&lt;Type&gt;ArrayRegion 函数将C数组复制回Java数组中。\n\t\n\t```\n\t\t从C数组向Java数组提交所作的修改\n\t\t\n\t\t(*env)->SetIntArrayRegion(env, javaArray, 0, 10, nativeArray);\n\t```\n\t当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，原生代码只获取或设置数组元素区域而不是获取整个数组。另外，JNI 提供了不同的函数集以获得数组元素而非其副本的直接指针。\n\t\n* 4.对直接指针的操作\n\t\n\t可能的话，原生代码可以用Get&lt;Type&gt;ArrayElements函数获取指向数组元素的直接指针。函数带有三个参数，第三个参数是可选参数，该可选参数名是isCopy, 让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。\n\t\n\t```\n\t\t获得指向Java数组元素的直接指针\n\t\t\n\t\tjint* nativeDirectArray;\n\t\tjboolean isCopy;\n\t\t\n\t\tnativeDirectArray = (*env)->GetIntArrayElements(env, javaArray, &isCopy);\n\t```\n\t因为可以像普通的C数组一样访问和处理数组元素，因此JNI没提供访问和处理数组元素的方法，JNI 要求原生代码用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用JNI提供的 Release&lt;Type&gt;ArrayElements函数释放 Get&lt;Type&gt;ArrayElements函数返回C数组。\n\t\n\t```\n\t\t\t释放指向Java数组元素的直接指针\n\t\t\t(*env)->ReleaseIntArrayElements(env, javaArray, nativeDirectArray, 0);\n\t```\n\t该函数带有四个函数，第四个函数是释放模式，下面列出了支持的释放模式列表。\n\t\n|释放模式|动作|\n|:--:|:--:|\n|0| 将内容复制回来并是否原生数组|\n|JNI_COMMIT| 将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组|\n|JNI_ABORT| 释放原生数组但不用将内容复制回来|\n\t\n\t\n##### NIO操作\n原生I/O（NIO）在缓冲管理区、大规模网络和文件I/O及字符集支持方面的性能有所改进。JNI提供了在原生代码中使用NIO的函数。与数组操作相比，NIO缓冲区的数据传送性能较好，更适合在原生代码和Java应用程序之间传送大量数据。\n\n* 1.创建直接字节缓冲区\n\n\t原生代码可以创建Java应用程序使用的直接字节缓冲区，该过程是以一个原生C字节数组为基础，下面列出了NewDirectByteBuffer的使用。\n\t\n\t```\n\t\t基于给定的C字节数组创建字节缓冲区\n\t\t\n\t\tunsigned char* buffer = (unsigned char*) malloc(1024);\n\t\t...\n\t\tjobject directBuffer;\n\t\tdirectBuffer = (*env)->NewDirectByteBuffer(env, buffer, 1024);\n\t\t\n\t```\n\t**注意**\n\t\n\t原生方法中的内存分配超出了虚拟机的管理范围，且不能用虚拟机的垃圾回收器回收原生方法中的内存。原生函数应该通过释放未使用的内存分配以避免内存泄露来正确管理内存。\n\t\n* 2.直接字节缓冲区获取\n\n\tJava应用程序中也可以创建直接字节缓冲区，在原生代码中调用 GetDirectBufferAddress 函数可以获得原生字节数组的内存地址。\n\t\n\t```\n\t\t通过Java字节缓冲区获取原生字节数组\n\t\t\n\t\tunsigned char* buffer;\n\t\tbuffer = (unsigned char*)(*env)->GetDirectBufferAddress(env, directBuffer);\n\t\t\n\t```\n\t\n##### 访问域\n\nJava 有两类域：实例域和静态域。类的每个实例都有自己的实例域副本，而一个类的所有实例共享同一个静态域。\n\nJNI提供了访问两类域的函数，下面代码显示了带有静态域和实例域的Java类\n\n```\n\t带有静态域和实例域的 Java 类\n\t\n\tpublic class JavaClass {\n\t\t/** 实例域 */\n\t\tprivate String instanceField = \"Instance Field\";\n\t\t/** 静态域 */\n\t\tprivate static String staticField = \"Static Field\";\n\t\t...\n\t}\n```\n\n* 1.获取域ID\n\n\tJNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID,用GetObjectClass 函数获得 class 对象，\n\t\n\t```\n\t\t用对象引用获取类\n\t\tjclass clazz;\n\t\tclazz = (*env)->GetObjectClass(env, instance);\n\t\t\n\t```\n\t有两个获得域ID的函数分别适用于不同类型域，GetFieldId 函数用于获取实例域，如下：\n\t\n\t```\n\t\t获取实例域的域ID\n\t\t\n\t\tjfieldID instanceFieldId;\n\t\tinstanceFieldId = (*env)->GetFieldID(env, clazz, \"instanceField\", \"Ljava/lang/String;\")\n\t\t\n\t```\n\t\n\tGetStaticFieldId用于获取静态域ID， 这两个函数均返回 jfieldID 类型的域ID.\n\t\n\t```\n\t\t获得静态域的域ID\n\t\t\n\t\tjfieldID staticFieldId;\n\t\t\n\t\tstaticFieldId = (*env)->GetStaticFieldID(env, clazz, \"staticField\", \"Ljava/lang/String;\");\n\t\t\n\t```\n\t两个函数的最后一个参数是Java中表示域类型的域描述符。在上述示例代码中，\"Ljava/lang/String\" 表明域类型是String。\n\t\n\t>为了提高应用程序的性能，可以缓存域ID。一般总是缓存使用最频繁的域ID。\n\t\n* 2.获取域\n\n\t在获得域ID之后，可以用Get&lt;Type&gt;Field 函数获得实际的实例域，\n\t\n\t```\n\t\t获得实例域\n\t\t\n\t\tjstring instanceField;\n\t\tinstanceField = (*env)->GetObjectField(env, instance, instanceFieldId);\n\t\n\t```\n\t用GetStatic&lt;Type&gt;Field函数获得静态域\n\t\n\t```\n\t\t获得静态域\n\t\tjstring staticField;\n\t\tstaticField = (*env)->GetStaticObjectField(env, clazz, staticFieldId);\n\t\n\t```\n\t在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。\n\t\n\t>获得单个域值需要调用两到三个JNI函数，原生代码回到Java中获取每个单独的域值，这给应用程序增加了额外的负担，进而导致性能下降。强烈建议将所有需要的参数传递给原生方法调用，而不是让原生代码回到Java中。\n\t\n##### 调用方法\n\n与域一样，Java中有两类方法：实例方法和静态方法。JNI 提供访问两类方法的函数， 如下代码给出了含有一个静态方法和一个实例方法的Java类。\n\n```\n\t带有静态方法和实例方法的Java类\n\t\n\tpublic class JavaClass {\n\t\t/**\n\t\t * 实例方法\n\t\t */\t\n\t\tprivate String instanceMethod(){\n\t\t\treturn \"instance Method\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * 静态方法\n\t\t */\n\t\tprivate static String staticMethod(){\n\t\t\treturn \"Static Method\";\n\t\t}\n\t\t...\n\t}\n```\n\n* 1.获取方法ID\n\n\tJNI 提供了用方法ID访问两类方法的途径，可以用给定的实例的 class 对象获得方法ID。 用GetMethodID 函数获得实例方法的方法ID,\n\t\n\t```\n\t\t获得实例方法的方法ID\n\t\tjmethodID instanceMethodId;\n\t\tinstanceMethodId = (*env)->GetMethodID(env, clazz, \"instanceMethod\", \"()Ljava/lang/String;\");\n\t```\n\t用GetStaticMethodID 函数获得静态域的方法ID， 两个函数均返回 jmethodID 类型的方法ID.\n\t\n\t```\t\n\t\t获得静态方法的方法ID\n\t\t\n\t\tjmethodID staticMethodId;\n\t\tstaticMethodId = (*env)->GetStaticMethodID(env, clazz, \"staticMethod\", \"()Ljava/lang/String;\");\n\t\n\t```\n\t与字段ID获取方法一样，两个函数的最后一个参数均表示方法描述符，在Java中它表示方法签名。\n\t\n\t>为了提升应用程序性能，可以缓存方法ID。一般总是缓存使用最频繁的方法ID。\n\t\n* 2.调用方法\n\n\t可以以方法ID为参数通过Call&lt;Type&gt;Method 类函数调用实际的实例方法， 如下：\n\t\n\t```\n\t\t调用实例方法\n\t\tjstring instanceMethodResult;\n\t\tinstanceMethodResult = (*env)->CallStringMethod(env, instance, instanceMethodId);\n\t```\n\t用CallStatic&lt;Type&gt;Field类函数调用静态方法，如下：\n\t\n\t```\n\t\t调用静态方法\n\t\tjstring staticMethodResult;\n\t\tstaticMethodResult = (*env)->CallStaticStringMethod(env, clazz, staticMethodId);\n\t\n\t```\n\t在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。\n\t\n\t>Java和原生代码之间的转换是代价较大的操作，强烈建议规划Java代码和原生代码的任务时考虑这种代价，最小化这种转换可以大大提高应用程序的性能。\n\t\n* 3.域和方法的描述符\n\n下表为 Java类型签名映射\n\t\n|Java 类型| 签名 |\n|:--:|:--:|\n|Boolean | Z|\n|Byte|B|\n|Char|C|\n|Short|S|\n|Int|I|\n|Long|J|\n|fully-qualified-class|Lfully-qualified-class;|\n|type[]|[type|\n|method type|(arg-type)ret-type|\n\t\n>用类型签名映射手工生成域和方法描述符并让它们与Java代码同步是一件非常繁琐的任务。通常都是借助Java的类文件反汇编程序：javap\n\t\n\t","source":"_posts/JNI-数据类型.md","raw":"---\ntitle: JNI-数据类型\ndate: 2019-01-03 17:36:46\ntags: [jni, java, android]\ncategories: android\n---\n\n### JNI的数据类型\n\nJava 中有两种数据类型：\n\n- 基本数据类型：布尔型、字节型、字符型、短整型、整型、长整型、浮点型和双精度类型。\n- 引用类型：字符串类型、数组类及其他类。\n\n<!-- more -->\n\nJava 基本数据类型\n\n|Java 类型| JNI类型| C/C++类型| 大小 |\n|:--:|:--:|:--:|:--:|\n|boolean| jboolean|unsigned char| 无符号8位|\n|byte|jbyte|char| 有符号8位|\n|char|jchar|unsigned short| 无符号16位|\n|short|jshort|short|有符号16位|\n|int|jint|int|有符号32位|\n|long|jlong|long long|有符号64位|\n|float|jfloat|float|32位|\n|double|jdouble|double|64位|\n\nJava 引用类型映射\n\n|Java 类型| 原生类型|\n|:--:|:--:|\n|java.lang.Class|jclass|\n|java.lang.Throwable|jthrowable|\n|java.lang.String|jstring|\n|Other objects|jobjects|\n|java.lang.Object]|jobjectArray|\n|boolean[]|jbooleanArray|\n|char[]|jcharArray|\n|short[]|jshortArray|\n|byte[]|jbyteArray|\n|char[]|jcharArray|\n|short[]|jshortArray|\n|int[]|jintArray|\n|long[]|jlongArray|\n|float[]|jfloatArray|\n|double[]|jdoubleArray|\n|Other arrays|jarray|\n\n#### 对引用数据类型的操作\n\n##### 字符串操作\n\nJNI把 Java 字符串当成应用类型处理。这些引用类型并不像原生 C 字符串一样可以直接使用， JNI 提供了 Java 字符串与C字符串之间相互转化的必要函数。因为Java字符串对象是不可变的，因此JNI不提供任何修改现有的Java字符串内容的函数。\n\nJNI支持Unicode编码格式和UTF-8编码格式的字符串，还提供两组函数通过JNIEnv接口指针处理这些字符串编码。\n\n* 1.创建字符串\n\t\n\t可以在原生代码中用 NewString 函数构建Unicode编码格式的字符串实例，用NewStringUTF函数构建UTF-8编码格式的字符串实例。这些函数以一个C字符串为参数，并返回一个Java字符串引用类型jstring值。\n\n\t```\njstring javaString;\njavaString = (*env)->NewStringUTF(env, \"Hello world!\");\n```\n\t在内存溢出的情况下，这些函数返回NULL以通过原生代码虚拟机中抛出异常，这样原生代码就会停止运行。\n\n* 2.把 Java 字符串转换成 C 字符串\n\n\t为了在原生代码中使用 Java 字符串，需要先将 Java 字符串转换成 C 字符串。用 GetStringChars 函数可以将Unicode格式的Java字符串转换成 C 字符串， 用GetStringUTFChars 函数可以将UTF-8格式的Java字符串转换成C字符串。 这些函数的第三个参数均为可选参数，该可选参数名是isCopy, 它让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。\n\t\n\t```\n\t\t\t\t将Java字符串转换成C字符串\n\t\t\n\t\tconst jbyte* str;\n\t\tjboolean isCopy;\n\t\t\n\t\tstr = (*env)->GetStringUTFChars(env, javaString, &isCopy);\n\t\tif(0 != str){\n\t\t\tprintf(\"Java string: %s\", str);\n\t\t\t\n\t\t\tif(JNI_TRUE == isCopy){\n\t\t\t\tprintf(\"C string is a copy of the Java string.\")\n\t\t\t} else {\n\t\t\t\tprintf(\"C string points to actual string.\");\n\t\t\t}\n\t\t}\n\t\n\t```\n* 3.释放字符串\n\n\t通过JNI GetStringChars 函数和 GetStringUTFChars 函数获得的C字符串在原生代码中使用完之后需要正确地释放，否则将会引起内存泄露。 JNI提供了 ReleaseStringChars 函数释放 Unicode编码格式的字符串，而用ReleaseStringUTFChars函数释放UTF-8编码格式的字符串。\n\t\n\t```\n\t释放 JNI 函数返回的 C 字符串\n\t(*env)->ReleaseStringUTFChars(env, javaString, str);\n\t```\n\t\n##### 数组操作\n\nJNI 把 Java 数组当成引用类型来处理，JNI提供必要的函数访问和处理Java数组。\n\n* 1.创建数组\n\n\t用 New&lt;Type&gt;Array 函数在原生代码中创建数组实例，其中&lt;Type&gt;可以是 Int, Char 和 Boolean 等，例如 NewIntArray。使用这些函数时应该以参数的形式给出数组的大小。\n\t\n\t```\n\t\t在原生代码中创建数组\n\t\t\n\t\tjintArray javaArray;\n\t\tjavaArray = (*env)->NewIntArray(env, 10);\n\t\tif(0 != javaArray){\n\t\t\t/* 现在可以使用数组了。 */\n\t\t}\n\t\t\n\t```\n\t与 NewString 函数一样，在内存溢出的情况下，New&lt;Type&gt;Array 函数将返回 NULL 以通知原生代码虚拟机中有异常抛出，这样原生代码就会停止运行。\n* 2.访问数组元素\n\n\tJNI 提供两种访问 Java 数组元素的方法，可以将数组的代码复制成C数组或者让JNI提供直接指向数组元素的指针。\n\t\n* 3.对副本的操作\n\n\tGet&lt;Type&gt;ArrayRegion 函数将给定的基本Java数组复制到给定的C数组中。\n\t\n\t```\n\t\t将Java数组区复制到C数组中\n\t\tjint nativeArray[10];\n\t\t(*env)->GetIntArrayRegion(env, javaArray, 0, 10, nativeArray);\n\t```\n\t原生代码可以像使用普通的C数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，可以使用 Set&lt;Type&gt;ArrayRegion 函数将C数组复制回Java数组中。\n\t\n\t```\n\t\t从C数组向Java数组提交所作的修改\n\t\t\n\t\t(*env)->SetIntArrayRegion(env, javaArray, 0, 10, nativeArray);\n\t```\n\t当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，原生代码只获取或设置数组元素区域而不是获取整个数组。另外，JNI 提供了不同的函数集以获得数组元素而非其副本的直接指针。\n\t\n* 4.对直接指针的操作\n\t\n\t可能的话，原生代码可以用Get&lt;Type&gt;ArrayElements函数获取指向数组元素的直接指针。函数带有三个参数，第三个参数是可选参数，该可选参数名是isCopy, 让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。\n\t\n\t```\n\t\t获得指向Java数组元素的直接指针\n\t\t\n\t\tjint* nativeDirectArray;\n\t\tjboolean isCopy;\n\t\t\n\t\tnativeDirectArray = (*env)->GetIntArrayElements(env, javaArray, &isCopy);\n\t```\n\t因为可以像普通的C数组一样访问和处理数组元素，因此JNI没提供访问和处理数组元素的方法，JNI 要求原生代码用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用JNI提供的 Release&lt;Type&gt;ArrayElements函数释放 Get&lt;Type&gt;ArrayElements函数返回C数组。\n\t\n\t```\n\t\t\t释放指向Java数组元素的直接指针\n\t\t\t(*env)->ReleaseIntArrayElements(env, javaArray, nativeDirectArray, 0);\n\t```\n\t该函数带有四个函数，第四个函数是释放模式，下面列出了支持的释放模式列表。\n\t\n|释放模式|动作|\n|:--:|:--:|\n|0| 将内容复制回来并是否原生数组|\n|JNI_COMMIT| 将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组|\n|JNI_ABORT| 释放原生数组但不用将内容复制回来|\n\t\n\t\n##### NIO操作\n原生I/O（NIO）在缓冲管理区、大规模网络和文件I/O及字符集支持方面的性能有所改进。JNI提供了在原生代码中使用NIO的函数。与数组操作相比，NIO缓冲区的数据传送性能较好，更适合在原生代码和Java应用程序之间传送大量数据。\n\n* 1.创建直接字节缓冲区\n\n\t原生代码可以创建Java应用程序使用的直接字节缓冲区，该过程是以一个原生C字节数组为基础，下面列出了NewDirectByteBuffer的使用。\n\t\n\t```\n\t\t基于给定的C字节数组创建字节缓冲区\n\t\t\n\t\tunsigned char* buffer = (unsigned char*) malloc(1024);\n\t\t...\n\t\tjobject directBuffer;\n\t\tdirectBuffer = (*env)->NewDirectByteBuffer(env, buffer, 1024);\n\t\t\n\t```\n\t**注意**\n\t\n\t原生方法中的内存分配超出了虚拟机的管理范围，且不能用虚拟机的垃圾回收器回收原生方法中的内存。原生函数应该通过释放未使用的内存分配以避免内存泄露来正确管理内存。\n\t\n* 2.直接字节缓冲区获取\n\n\tJava应用程序中也可以创建直接字节缓冲区，在原生代码中调用 GetDirectBufferAddress 函数可以获得原生字节数组的内存地址。\n\t\n\t```\n\t\t通过Java字节缓冲区获取原生字节数组\n\t\t\n\t\tunsigned char* buffer;\n\t\tbuffer = (unsigned char*)(*env)->GetDirectBufferAddress(env, directBuffer);\n\t\t\n\t```\n\t\n##### 访问域\n\nJava 有两类域：实例域和静态域。类的每个实例都有自己的实例域副本，而一个类的所有实例共享同一个静态域。\n\nJNI提供了访问两类域的函数，下面代码显示了带有静态域和实例域的Java类\n\n```\n\t带有静态域和实例域的 Java 类\n\t\n\tpublic class JavaClass {\n\t\t/** 实例域 */\n\t\tprivate String instanceField = \"Instance Field\";\n\t\t/** 静态域 */\n\t\tprivate static String staticField = \"Static Field\";\n\t\t...\n\t}\n```\n\n* 1.获取域ID\n\n\tJNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID,用GetObjectClass 函数获得 class 对象，\n\t\n\t```\n\t\t用对象引用获取类\n\t\tjclass clazz;\n\t\tclazz = (*env)->GetObjectClass(env, instance);\n\t\t\n\t```\n\t有两个获得域ID的函数分别适用于不同类型域，GetFieldId 函数用于获取实例域，如下：\n\t\n\t```\n\t\t获取实例域的域ID\n\t\t\n\t\tjfieldID instanceFieldId;\n\t\tinstanceFieldId = (*env)->GetFieldID(env, clazz, \"instanceField\", \"Ljava/lang/String;\")\n\t\t\n\t```\n\t\n\tGetStaticFieldId用于获取静态域ID， 这两个函数均返回 jfieldID 类型的域ID.\n\t\n\t```\n\t\t获得静态域的域ID\n\t\t\n\t\tjfieldID staticFieldId;\n\t\t\n\t\tstaticFieldId = (*env)->GetStaticFieldID(env, clazz, \"staticField\", \"Ljava/lang/String;\");\n\t\t\n\t```\n\t两个函数的最后一个参数是Java中表示域类型的域描述符。在上述示例代码中，\"Ljava/lang/String\" 表明域类型是String。\n\t\n\t>为了提高应用程序的性能，可以缓存域ID。一般总是缓存使用最频繁的域ID。\n\t\n* 2.获取域\n\n\t在获得域ID之后，可以用Get&lt;Type&gt;Field 函数获得实际的实例域，\n\t\n\t```\n\t\t获得实例域\n\t\t\n\t\tjstring instanceField;\n\t\tinstanceField = (*env)->GetObjectField(env, instance, instanceFieldId);\n\t\n\t```\n\t用GetStatic&lt;Type&gt;Field函数获得静态域\n\t\n\t```\n\t\t获得静态域\n\t\tjstring staticField;\n\t\tstaticField = (*env)->GetStaticObjectField(env, clazz, staticFieldId);\n\t\n\t```\n\t在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。\n\t\n\t>获得单个域值需要调用两到三个JNI函数，原生代码回到Java中获取每个单独的域值，这给应用程序增加了额外的负担，进而导致性能下降。强烈建议将所有需要的参数传递给原生方法调用，而不是让原生代码回到Java中。\n\t\n##### 调用方法\n\n与域一样，Java中有两类方法：实例方法和静态方法。JNI 提供访问两类方法的函数， 如下代码给出了含有一个静态方法和一个实例方法的Java类。\n\n```\n\t带有静态方法和实例方法的Java类\n\t\n\tpublic class JavaClass {\n\t\t/**\n\t\t * 实例方法\n\t\t */\t\n\t\tprivate String instanceMethod(){\n\t\t\treturn \"instance Method\";\n\t\t}\n\t\t\n\t\t/**\n\t\t * 静态方法\n\t\t */\n\t\tprivate static String staticMethod(){\n\t\t\treturn \"Static Method\";\n\t\t}\n\t\t...\n\t}\n```\n\n* 1.获取方法ID\n\n\tJNI 提供了用方法ID访问两类方法的途径，可以用给定的实例的 class 对象获得方法ID。 用GetMethodID 函数获得实例方法的方法ID,\n\t\n\t```\n\t\t获得实例方法的方法ID\n\t\tjmethodID instanceMethodId;\n\t\tinstanceMethodId = (*env)->GetMethodID(env, clazz, \"instanceMethod\", \"()Ljava/lang/String;\");\n\t```\n\t用GetStaticMethodID 函数获得静态域的方法ID， 两个函数均返回 jmethodID 类型的方法ID.\n\t\n\t```\t\n\t\t获得静态方法的方法ID\n\t\t\n\t\tjmethodID staticMethodId;\n\t\tstaticMethodId = (*env)->GetStaticMethodID(env, clazz, \"staticMethod\", \"()Ljava/lang/String;\");\n\t\n\t```\n\t与字段ID获取方法一样，两个函数的最后一个参数均表示方法描述符，在Java中它表示方法签名。\n\t\n\t>为了提升应用程序性能，可以缓存方法ID。一般总是缓存使用最频繁的方法ID。\n\t\n* 2.调用方法\n\n\t可以以方法ID为参数通过Call&lt;Type&gt;Method 类函数调用实际的实例方法， 如下：\n\t\n\t```\n\t\t调用实例方法\n\t\tjstring instanceMethodResult;\n\t\tinstanceMethodResult = (*env)->CallStringMethod(env, instance, instanceMethodId);\n\t```\n\t用CallStatic&lt;Type&gt;Field类函数调用静态方法，如下：\n\t\n\t```\n\t\t调用静态方法\n\t\tjstring staticMethodResult;\n\t\tstaticMethodResult = (*env)->CallStaticStringMethod(env, clazz, staticMethodId);\n\t\n\t```\n\t在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。\n\t\n\t>Java和原生代码之间的转换是代价较大的操作，强烈建议规划Java代码和原生代码的任务时考虑这种代价，最小化这种转换可以大大提高应用程序的性能。\n\t\n* 3.域和方法的描述符\n\n下表为 Java类型签名映射\n\t\n|Java 类型| 签名 |\n|:--:|:--:|\n|Boolean | Z|\n|Byte|B|\n|Char|C|\n|Short|S|\n|Int|I|\n|Long|J|\n|fully-qualified-class|Lfully-qualified-class;|\n|type[]|[type|\n|method type|(arg-type)ret-type|\n\t\n>用类型签名映射手工生成域和方法描述符并让它们与Java代码同步是一件非常繁琐的任务。通常都是借助Java的类文件反汇编程序：javap\n\t\n\t","slug":"JNI-数据类型","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi600bysify0udtw1bo","content":"<h3 id=\"jni的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#jni的数据类型\"></a> JNI的数据类型</h3>\n<p>Java 中有两种数据类型：</p>\n<ul>\n<li>基本数据类型：布尔型、字节型、字符型、短整型、整型、长整型、浮点型和双精度类型。</li>\n<li>引用类型：字符串类型、数组类及其他类。</li>\n</ul>\n<a id=\"more\"></a>\n<p>Java 基本数据类型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">JNI类型</th>\n<th style=\"text-align:center\">C/C++类型</th>\n<th style=\"text-align:center\">大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n<td style=\"text-align:center\">unsigned char</td>\n<td style=\"text-align:center\">无符号8位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">有符号8位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n<td style=\"text-align:center\">unsigned short</td>\n<td style=\"text-align:center\">无符号16位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">有符号16位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">有符号32位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n<td style=\"text-align:center\">long long</td>\n<td style=\"text-align:center\">有符号64位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">32位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">64位</td>\n</tr>\n</tbody>\n</table>\n<p>Java 引用类型映射</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">原生类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">java.lang.Class</td>\n<td style=\"text-align:center\">jclass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.Throwable</td>\n<td style=\"text-align:center\">jthrowable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.String</td>\n<td style=\"text-align:center\">jstring</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Other objects</td>\n<td style=\"text-align:center\">jobjects</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.Object]</td>\n<td style=\"text-align:center\">jobjectArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean[]</td>\n<td style=\"text-align:center\">jbooleanArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte[]</td>\n<td style=\"text-align:center\">jbyteArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int[]</td>\n<td style=\"text-align:center\">jintArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long[]</td>\n<td style=\"text-align:center\">jlongArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float[]</td>\n<td style=\"text-align:center\">jfloatArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double[]</td>\n<td style=\"text-align:center\">jdoubleArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Other arrays</td>\n<td style=\"text-align:center\">jarray</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"对引用数据类型的操作\"><a class=\"markdownIt-Anchor\" href=\"#对引用数据类型的操作\"></a> 对引用数据类型的操作</h4>\n<h5 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\"></a> 字符串操作</h5>\n<p>JNI把 Java 字符串当成应用类型处理。这些引用类型并不像原生 C 字符串一样可以直接使用， JNI 提供了 Java 字符串与C字符串之间相互转化的必要函数。因为Java字符串对象是不可变的，因此JNI不提供任何修改现有的Java字符串内容的函数。</p>\n<p>JNI支持Unicode编码格式和UTF-8编码格式的字符串，还提供两组函数通过JNIEnv接口指针处理这些字符串编码。</p>\n<ul>\n<li>\n<p>1.创建字符串</p>\n<p>可以在原生代码中用 NewString 函数构建Unicode编码格式的字符串实例，用NewStringUTF函数构建UTF-8编码格式的字符串实例。这些函数以一个C字符串为参数，并返回一个Java字符串引用类型jstring值。</p>\n  <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstring javaString<span class=\"comment\">;</span></span><br><span class=\"line\">javaString = (<span class=\"name\">*env</span>)-&gt;NewStringUTF(<span class=\"name\">env</span>, <span class=\"string\">\"Hello world!\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数返回NULL以通过原生代码虚拟机中抛出异常，这样原生代码就会停止运行。</p>\n</li>\n<li>\n<p>2.把 Java 字符串转换成 C 字符串</p>\n<p>为了在原生代码中使用 Java 字符串，需要先将 Java 字符串转换成 C 字符串。用 GetStringChars 函数可以将Unicode格式的Java字符串转换成 C 字符串， 用GetStringUTFChars 函数可以将UTF-8格式的Java字符串转换成C字符串。 这些函数的第三个参数均为可选参数，该可选参数名是isCopy, 它让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t将<span class=\"keyword\">Java字符串转换成C字符串</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">const </span><span class=\"keyword\">jbyte* </span>str<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">jboolean </span>isCopy<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = (*env)-&gt;GetStringUTFChars(env, <span class=\"keyword\">javaString, </span>&amp;isCopy)<span class=\"comment\">;</span></span><br><span class=\"line\">if(<span class=\"number\">0</span> != str)&#123;</span><br><span class=\"line\">\tprintf(<span class=\"string\">\"Java string: %s\"</span>, str)<span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif(<span class=\"keyword\">JNI_TRUE </span>== isCopy)&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">\"C string is a copy of the Java string.\"</span>)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">\"C string points to actual string.\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>3.释放字符串</p>\n<p>通过JNI GetStringChars 函数和 GetStringUTFChars 函数获得的C字符串在原生代码中使用完之后需要正确地释放，否则将会引起内存泄露。 JNI提供了 ReleaseStringChars 函数释放 Unicode编码格式的字符串，而用ReleaseStringUTFChars函数释放UTF-8编码格式的字符串。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">释放 JNI 函数返回的 C 字符串</span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">ReleaseStringUTFChars(<span class=\"params\">env</span>, <span class=\"params\">javaString</span>, <span class=\"params\">str</span>)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"数组操作\"><a class=\"markdownIt-Anchor\" href=\"#数组操作\"></a> 数组操作</h5>\n<p>JNI 把 Java 数组当成引用类型来处理，JNI提供必要的函数访问和处理Java数组。</p>\n<ul>\n<li>\n<p>1.创建数组</p>\n<p>用 New&lt;Type&gt;Array 函数在原生代码中创建数组实例，其中&lt;Type&gt;可以是 Int, Char 和 Boolean 等，例如 NewIntArray。使用这些函数时应该以参数的形式给出数组的大小。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在原生代码中创建数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jintArray </span><span class=\"keyword\">javaArray;</span></span><br><span class=\"line\"><span class=\"keyword\">javaArray </span>= (*env)-&gt;NewIntArray(env, <span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">if(<span class=\"number\">0</span> != <span class=\"keyword\">javaArray)&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">\t</span><span class=\"comment\">/* 现在可以使用数组了。 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与 NewString 函数一样，在内存溢出的情况下，New&lt;Type&gt;Array 函数将返回 NULL 以通知原生代码虚拟机中有异常抛出，这样原生代码就会停止运行。</p>\n</li>\n<li>\n<p>2.访问数组元素</p>\n<p>JNI 提供两种访问 Java 数组元素的方法，可以将数组的代码复制成C数组或者让JNI提供直接指向数组元素的指针。</p>\n</li>\n<li>\n<p>3.对副本的操作</p>\n<p>Get&lt;Type&gt;ArrayRegion 函数将给定的基本Java数组复制到给定的C数组中。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将<span class=\"keyword\">Java数组区复制到C数组中</span></span><br><span class=\"line\"><span class=\"keyword\">jint </span>nativeArray[<span class=\"number\">10</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">(*env)-&gt;GetIntArrayRegion(env, <span class=\"keyword\">javaArray, </span><span class=\"number\">0</span>, <span class=\"number\">10</span>, nativeArray)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>原生代码可以像使用普通的C数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，可以使用 Set&lt;Type&gt;ArrayRegion 函数将C数组复制回Java数组中。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从C数组向Java数组提交所作的修改</span><br><span class=\"line\"></span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">SetIntArrayRegion(<span class=\"params\">env</span>, <span class=\"params\">javaArray</span>, 0, 10, <span class=\"params\">nativeArray</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，原生代码只获取或设置数组元素区域而不是获取整个数组。另外，JNI 提供了不同的函数集以获得数组元素而非其副本的直接指针。</p>\n</li>\n<li>\n<p>4.对直接指针的操作</p>\n<p>可能的话，原生代码可以用Get&lt;Type&gt;ArrayElements函数获取指向数组元素的直接指针。函数带有三个参数，第三个参数是可选参数，该可选参数名是isCopy, 让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得指向<span class=\"keyword\">Java数组元素的直接指针</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">jint* </span>nativeDirectArray<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">jboolean </span>isCopy<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">nativeDirectArray = (*env)-&gt;GetIntArrayElements(env, <span class=\"keyword\">javaArray, </span>&amp;isCopy)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>因为可以像普通的C数组一样访问和处理数组元素，因此JNI没提供访问和处理数组元素的方法，JNI 要求原生代码用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用JNI提供的 Release&lt;Type&gt;ArrayElements函数释放 Get&lt;Type&gt;ArrayElements函数返回C数组。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">释放指向Java数组元素的直接指针</span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">ReleaseIntArrayElements(<span class=\"params\">env</span>, <span class=\"params\">javaArray</span>, <span class=\"params\">nativeDirectArray</span>, 0)</span>;</span><br></pre></td></tr></table></figure>\n<p>该函数带有四个函数，第四个函数是释放模式，下面列出了支持的释放模式列表。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">释放模式</th>\n<th style=\"text-align:center\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">将内容复制回来并是否原生数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JNI_COMMIT</td>\n<td style=\"text-align:center\">将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JNI_ABORT</td>\n<td style=\"text-align:center\">释放原生数组但不用将内容复制回来</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"nio操作\"><a class=\"markdownIt-Anchor\" href=\"#nio操作\"></a> NIO操作</h5>\n<p>原生I/O（NIO）在缓冲管理区、大规模网络和文件I/O及字符集支持方面的性能有所改进。JNI提供了在原生代码中使用NIO的函数。与数组操作相比，NIO缓冲区的数据传送性能较好，更适合在原生代码和Java应用程序之间传送大量数据。</p>\n<ul>\n<li>\n<p>1.创建直接字节缓冲区</p>\n<p>原生代码可以创建Java应用程序使用的直接字节缓冲区，该过程是以一个原生C字节数组为基础，下面列出了NewDirectByteBuffer的使用。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于给定的C字节数组创建字节缓冲区</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char* <span class=\"keyword\">buffer </span>= (unsigned char*) malloc(<span class=\"number\">1024</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">jobject </span><span class=\"keyword\">directBuffer;</span></span><br><span class=\"line\"><span class=\"keyword\">directBuffer </span>= (*env)-&gt;NewDirectByteBuffer(env, <span class=\"keyword\">buffer, </span><span class=\"number\">1024</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<p>原生方法中的内存分配超出了虚拟机的管理范围，且不能用虚拟机的垃圾回收器回收原生方法中的内存。原生函数应该通过释放未使用的内存分配以避免内存泄露来正确管理内存。</p>\n</li>\n<li>\n<p>2.直接字节缓冲区获取</p>\n<p>Java应用程序中也可以创建直接字节缓冲区，在原生代码中调用 GetDirectBufferAddress 函数可以获得原生字节数组的内存地址。</p>\n  <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过Java字节缓冲区获取原生字节数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"><span class=\"built_in\">buffer</span> = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)(*env)-&gt;GetDirectBufferAddress(env, directBuffer);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"访问域\"><a class=\"markdownIt-Anchor\" href=\"#访问域\"></a> 访问域</h5>\n<p>Java 有两类域：实例域和静态域。类的每个实例都有自己的实例域副本，而一个类的所有实例共享同一个静态域。</p>\n<p>JNI提供了访问两类域的函数，下面代码显示了带有静态域和实例域的Java类</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">带有静态域和实例域的 Java 类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 实例域 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">String</span> instanceField = <span class=\"string\">\"Instance Field\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/** 静态域 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> staticField = <span class=\"string\">\"Static Field\"</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>1.获取域ID</p>\n<p>JNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID,用GetObjectClass 函数获得 class 对象，</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用对象引用获取类</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetObjectClass(env, instance);</span><br></pre></td></tr></table></figure>\n<p>有两个获得域ID的函数分别适用于不同类型域，GetFieldId 函数用于获取实例域，如下：</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取实例域的域ID</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID instanceFieldId;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">instanceFieldId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetFieldID(env, clazz, <span class=\"string\">\"instanceField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>)</span><br></pre></td></tr></table></figure>\n<p>GetStaticFieldId用于获取静态域ID， 这两个函数均返回 jfieldID 类型的域ID.</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态域的域ID</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID staticFieldId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">staticFieldId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetStaticFieldID(env, clazz, <span class=\"string\">\"staticField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>两个函数的最后一个参数是Java中表示域类型的域描述符。在上述示例代码中，“Ljava/lang/String” 表明域类型是String。</p>\n<blockquote>\n<p>为了提高应用程序的性能，可以缓存域ID。一般总是缓存使用最频繁的域ID。</p>\n</blockquote>\n</li>\n<li>\n<p>2.获取域</p>\n<p>在获得域ID之后，可以用Get&lt;Type&gt;Field 函数获得实际的实例域，</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得实例域</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jstring </span><span class=\"keyword\">instanceField;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceField </span>= (*env)-&gt;GetObjectField(env, <span class=\"keyword\">instance, </span><span class=\"keyword\">instanceFieldId);</span></span><br></pre></td></tr></table></figure>\n<p>用GetStatic&lt;Type&gt;Field函数获得静态域</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态域</span><br><span class=\"line\">jstring staticField;</span><br><span class=\"line\">staticField = (*env)-&gt;<span class=\"constructor\">GetStaticObjectField(<span class=\"params\">env</span>, <span class=\"params\">clazz</span>, <span class=\"params\">staticFieldId</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p>\n<blockquote>\n<p>获得单个域值需要调用两到三个JNI函数，原生代码回到Java中获取每个单独的域值，这给应用程序增加了额外的负担，进而导致性能下降。强烈建议将所有需要的参数传递给原生方法调用，而不是让原生代码回到Java中。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"调用方法\"><a class=\"markdownIt-Anchor\" href=\"#调用方法\"></a> 调用方法</h5>\n<p>与域一样，Java中有两类方法：实例方法和静态方法。JNI 提供访问两类方法的函数， 如下代码给出了含有一个静态方法和一个实例方法的Java类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">带有静态方法和实例方法的Java类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 实例方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span>\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">instanceMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"instance Method\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 静态方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">staticMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Static Method\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>1.获取方法ID</p>\n<p>JNI 提供了用方法ID访问两类方法的途径，可以用给定的实例的 class 对象获得方法ID。 用GetMethodID 函数获得实例方法的方法ID,</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得实例方法的方法ID</span><br><span class=\"line\"><span class=\"keyword\">jmethodID </span><span class=\"keyword\">instanceMethodId;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceMethodId </span>= (*env)-&gt;GetMethodID(env, clazz, <span class=\"string\">\"instanceMethod\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>用GetStaticMethodID 函数获得静态域的方法ID， 两个函数均返回 jmethodID 类型的方法ID.</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态方法的方法ID</span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID staticMethodId;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">staticMethodId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetStaticMethodID(env, clazz, <span class=\"string\">\"staticMethod\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>与字段ID获取方法一样，两个函数的最后一个参数均表示方法描述符，在Java中它表示方法签名。</p>\n<blockquote>\n<p>为了提升应用程序性能，可以缓存方法ID。一般总是缓存使用最频繁的方法ID。</p>\n</blockquote>\n</li>\n<li>\n<p>2.调用方法</p>\n<p>可以以方法ID为参数通过Call&lt;Type&gt;Method 类函数调用实际的实例方法， 如下：</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用实例方法</span><br><span class=\"line\"><span class=\"keyword\">jstring </span><span class=\"keyword\">instanceMethodResult;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceMethodResult </span>= (*env)-&gt;CallStringMethod(env, <span class=\"keyword\">instance, </span><span class=\"keyword\">instanceMethodId);</span></span><br></pre></td></tr></table></figure>\n<p>用CallStatic&lt;Type&gt;Field类函数调用静态方法，如下：</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用静态方法</span><br><span class=\"line\">jstring staticMethodResult;</span><br><span class=\"line\">staticMethodResult = (*env)-&gt;<span class=\"constructor\">CallStaticStringMethod(<span class=\"params\">env</span>, <span class=\"params\">clazz</span>, <span class=\"params\">staticMethodId</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p>\n<blockquote>\n<p>Java和原生代码之间的转换是代价较大的操作，强烈建议规划Java代码和原生代码的任务时考虑这种代价，最小化这种转换可以大大提高应用程序的性能。</p>\n</blockquote>\n</li>\n<li>\n<p>3.域和方法的描述符</p>\n</li>\n</ul>\n<p>下表为 Java类型签名映射</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Char</td>\n<td style=\"text-align:center\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">S</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int</td>\n<td style=\"text-align:center\">I</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fully-qualified-class</td>\n<td style=\"text-align:center\">Lfully-qualified-class;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type[]</td>\n<td style=\"text-align:center\">[type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method type</td>\n<td style=\"text-align:center\">(arg-type)ret-type</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>用类型签名映射手工生成域和方法描述符并让它们与Java代码同步是一件非常繁琐的任务。通常都是借助Java的类文件反汇编程序：javap</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"jni的数据类型\"><a class=\"markdownIt-Anchor\" href=\"#jni的数据类型\"></a> JNI的数据类型</h3>\n<p>Java 中有两种数据类型：</p>\n<ul>\n<li>基本数据类型：布尔型、字节型、字符型、短整型、整型、长整型、浮点型和双精度类型。</li>\n<li>引用类型：字符串类型、数组类及其他类。</li>\n</ul>","more":"<p>Java 基本数据类型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">JNI类型</th>\n<th style=\"text-align:center\">C/C++类型</th>\n<th style=\"text-align:center\">大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">jboolean</td>\n<td style=\"text-align:center\">unsigned char</td>\n<td style=\"text-align:center\">无符号8位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte</td>\n<td style=\"text-align:center\">jbyte</td>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">有符号8位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">jchar</td>\n<td style=\"text-align:center\">unsigned short</td>\n<td style=\"text-align:center\">无符号16位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">jshort</td>\n<td style=\"text-align:center\">short</td>\n<td style=\"text-align:center\">有符号16位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">jint</td>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">有符号32位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">jlong</td>\n<td style=\"text-align:center\">long long</td>\n<td style=\"text-align:center\">有符号64位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">jfloat</td>\n<td style=\"text-align:center\">float</td>\n<td style=\"text-align:center\">32位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">jdouble</td>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">64位</td>\n</tr>\n</tbody>\n</table>\n<p>Java 引用类型映射</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">原生类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">java.lang.Class</td>\n<td style=\"text-align:center\">jclass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.Throwable</td>\n<td style=\"text-align:center\">jthrowable</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.String</td>\n<td style=\"text-align:center\">jstring</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Other objects</td>\n<td style=\"text-align:center\">jobjects</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">java.lang.Object]</td>\n<td style=\"text-align:center\">jobjectArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean[]</td>\n<td style=\"text-align:center\">jbooleanArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">byte[]</td>\n<td style=\"text-align:center\">jbyteArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char[]</td>\n<td style=\"text-align:center\">jcharArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">short[]</td>\n<td style=\"text-align:center\">jshortArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">int[]</td>\n<td style=\"text-align:center\">jintArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long[]</td>\n<td style=\"text-align:center\">jlongArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">float[]</td>\n<td style=\"text-align:center\">jfloatArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double[]</td>\n<td style=\"text-align:center\">jdoubleArray</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Other arrays</td>\n<td style=\"text-align:center\">jarray</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"对引用数据类型的操作\"><a class=\"markdownIt-Anchor\" href=\"#对引用数据类型的操作\"></a> 对引用数据类型的操作</h4>\n<h5 id=\"字符串操作\"><a class=\"markdownIt-Anchor\" href=\"#字符串操作\"></a> 字符串操作</h5>\n<p>JNI把 Java 字符串当成应用类型处理。这些引用类型并不像原生 C 字符串一样可以直接使用， JNI 提供了 Java 字符串与C字符串之间相互转化的必要函数。因为Java字符串对象是不可变的，因此JNI不提供任何修改现有的Java字符串内容的函数。</p>\n<p>JNI支持Unicode编码格式和UTF-8编码格式的字符串，还提供两组函数通过JNIEnv接口指针处理这些字符串编码。</p>\n<ul>\n<li>\n<p>1.创建字符串</p>\n<p>可以在原生代码中用 NewString 函数构建Unicode编码格式的字符串实例，用NewStringUTF函数构建UTF-8编码格式的字符串实例。这些函数以一个C字符串为参数，并返回一个Java字符串引用类型jstring值。</p>\n  <figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jstring javaString<span class=\"comment\">;</span></span><br><span class=\"line\">javaString = (<span class=\"name\">*env</span>)-&gt;NewStringUTF(<span class=\"name\">env</span>, <span class=\"string\">\"Hello world!\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数返回NULL以通过原生代码虚拟机中抛出异常，这样原生代码就会停止运行。</p>\n</li>\n<li>\n<p>2.把 Java 字符串转换成 C 字符串</p>\n<p>为了在原生代码中使用 Java 字符串，需要先将 Java 字符串转换成 C 字符串。用 GetStringChars 函数可以将Unicode格式的Java字符串转换成 C 字符串， 用GetStringUTFChars 函数可以将UTF-8格式的Java字符串转换成C字符串。 这些函数的第三个参数均为可选参数，该可选参数名是isCopy, 它让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t将<span class=\"keyword\">Java字符串转换成C字符串</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">const </span><span class=\"keyword\">jbyte* </span>str<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">jboolean </span>isCopy<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">str = (*env)-&gt;GetStringUTFChars(env, <span class=\"keyword\">javaString, </span>&amp;isCopy)<span class=\"comment\">;</span></span><br><span class=\"line\">if(<span class=\"number\">0</span> != str)&#123;</span><br><span class=\"line\">\tprintf(<span class=\"string\">\"Java string: %s\"</span>, str)<span class=\"comment\">;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tif(<span class=\"keyword\">JNI_TRUE </span>== isCopy)&#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">\"C string is a copy of the Java string.\"</span>)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tprintf(<span class=\"string\">\"C string points to actual string.\"</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>3.释放字符串</p>\n<p>通过JNI GetStringChars 函数和 GetStringUTFChars 函数获得的C字符串在原生代码中使用完之后需要正确地释放，否则将会引起内存泄露。 JNI提供了 ReleaseStringChars 函数释放 Unicode编码格式的字符串，而用ReleaseStringUTFChars函数释放UTF-8编码格式的字符串。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">释放 JNI 函数返回的 C 字符串</span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">ReleaseStringUTFChars(<span class=\"params\">env</span>, <span class=\"params\">javaString</span>, <span class=\"params\">str</span>)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"数组操作\"><a class=\"markdownIt-Anchor\" href=\"#数组操作\"></a> 数组操作</h5>\n<p>JNI 把 Java 数组当成引用类型来处理，JNI提供必要的函数访问和处理Java数组。</p>\n<ul>\n<li>\n<p>1.创建数组</p>\n<p>用 New&lt;Type&gt;Array 函数在原生代码中创建数组实例，其中&lt;Type&gt;可以是 Int, Char 和 Boolean 等，例如 NewIntArray。使用这些函数时应该以参数的形式给出数组的大小。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在原生代码中创建数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jintArray </span><span class=\"keyword\">javaArray;</span></span><br><span class=\"line\"><span class=\"keyword\">javaArray </span>= (*env)-&gt;NewIntArray(env, <span class=\"number\">10</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">if(<span class=\"number\">0</span> != <span class=\"keyword\">javaArray)&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">\t</span><span class=\"comment\">/* 现在可以使用数组了。 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与 NewString 函数一样，在内存溢出的情况下，New&lt;Type&gt;Array 函数将返回 NULL 以通知原生代码虚拟机中有异常抛出，这样原生代码就会停止运行。</p>\n</li>\n<li>\n<p>2.访问数组元素</p>\n<p>JNI 提供两种访问 Java 数组元素的方法，可以将数组的代码复制成C数组或者让JNI提供直接指向数组元素的指针。</p>\n</li>\n<li>\n<p>3.对副本的操作</p>\n<p>Get&lt;Type&gt;ArrayRegion 函数将给定的基本Java数组复制到给定的C数组中。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将<span class=\"keyword\">Java数组区复制到C数组中</span></span><br><span class=\"line\"><span class=\"keyword\">jint </span>nativeArray[<span class=\"number\">10</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">(*env)-&gt;GetIntArrayRegion(env, <span class=\"keyword\">javaArray, </span><span class=\"number\">0</span>, <span class=\"number\">10</span>, nativeArray)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>原生代码可以像使用普通的C数组一样使用和修改数组元素。当原生代码想将所做的修改提交给Java数组时，可以使用 Set&lt;Type&gt;ArrayRegion 函数将C数组复制回Java数组中。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从C数组向Java数组提交所作的修改</span><br><span class=\"line\"></span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">SetIntArrayRegion(<span class=\"params\">env</span>, <span class=\"params\">javaArray</span>, 0, 10, <span class=\"params\">nativeArray</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>当数组很大时，为了对数组进行操作而复制数组会引起性能问题。在这种情况下，如果可能的话，原生代码只获取或设置数组元素区域而不是获取整个数组。另外，JNI 提供了不同的函数集以获得数组元素而非其副本的直接指针。</p>\n</li>\n<li>\n<p>4.对直接指针的操作</p>\n<p>可能的话，原生代码可以用Get&lt;Type&gt;ArrayElements函数获取指向数组元素的直接指针。函数带有三个参数，第三个参数是可选参数，该可选参数名是isCopy, 让调用者确定返回的C字符串地址指向副本还是指向堆中的固定对象。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得指向<span class=\"keyword\">Java数组元素的直接指针</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">jint* </span>nativeDirectArray<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">jboolean </span>isCopy<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">nativeDirectArray = (*env)-&gt;GetIntArrayElements(env, <span class=\"keyword\">javaArray, </span>&amp;isCopy)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>因为可以像普通的C数组一样访问和处理数组元素，因此JNI没提供访问和处理数组元素的方法，JNI 要求原生代码用完这些指针立即释放，否则会出现内存溢出。原生代码可以使用JNI提供的 Release&lt;Type&gt;ArrayElements函数释放 Get&lt;Type&gt;ArrayElements函数返回C数组。</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">释放指向Java数组元素的直接指针</span><br><span class=\"line\">(*env)-&gt;<span class=\"constructor\">ReleaseIntArrayElements(<span class=\"params\">env</span>, <span class=\"params\">javaArray</span>, <span class=\"params\">nativeDirectArray</span>, 0)</span>;</span><br></pre></td></tr></table></figure>\n<p>该函数带有四个函数，第四个函数是释放模式，下面列出了支持的释放模式列表。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">释放模式</th>\n<th style=\"text-align:center\">动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">将内容复制回来并是否原生数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JNI_COMMIT</td>\n<td style=\"text-align:center\">将内容复制回来但不释放原生数组，一般用于周期性地更新一个Java数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JNI_ABORT</td>\n<td style=\"text-align:center\">释放原生数组但不用将内容复制回来</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"nio操作\"><a class=\"markdownIt-Anchor\" href=\"#nio操作\"></a> NIO操作</h5>\n<p>原生I/O（NIO）在缓冲管理区、大规模网络和文件I/O及字符集支持方面的性能有所改进。JNI提供了在原生代码中使用NIO的函数。与数组操作相比，NIO缓冲区的数据传送性能较好，更适合在原生代码和Java应用程序之间传送大量数据。</p>\n<ul>\n<li>\n<p>1.创建直接字节缓冲区</p>\n<p>原生代码可以创建Java应用程序使用的直接字节缓冲区，该过程是以一个原生C字节数组为基础，下面列出了NewDirectByteBuffer的使用。</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于给定的C字节数组创建字节缓冲区</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char* <span class=\"keyword\">buffer </span>= (unsigned char*) malloc(<span class=\"number\">1024</span>)<span class=\"comment\">;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">jobject </span><span class=\"keyword\">directBuffer;</span></span><br><span class=\"line\"><span class=\"keyword\">directBuffer </span>= (*env)-&gt;NewDirectByteBuffer(env, <span class=\"keyword\">buffer, </span><span class=\"number\">1024</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong></p>\n<p>原生方法中的内存分配超出了虚拟机的管理范围，且不能用虚拟机的垃圾回收器回收原生方法中的内存。原生函数应该通过释放未使用的内存分配以避免内存泄露来正确管理内存。</p>\n</li>\n<li>\n<p>2.直接字节缓冲区获取</p>\n<p>Java应用程序中也可以创建直接字节缓冲区，在原生代码中调用 GetDirectBufferAddress 函数可以获得原生字节数组的内存地址。</p>\n  <figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过Java字节缓冲区获取原生字节数组</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* <span class=\"built_in\">buffer</span>;</span><br><span class=\"line\"><span class=\"built_in\">buffer</span> = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)(*env)-&gt;GetDirectBufferAddress(env, directBuffer);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"访问域\"><a class=\"markdownIt-Anchor\" href=\"#访问域\"></a> 访问域</h5>\n<p>Java 有两类域：实例域和静态域。类的每个实例都有自己的实例域副本，而一个类的所有实例共享同一个静态域。</p>\n<p>JNI提供了访问两类域的函数，下面代码显示了带有静态域和实例域的Java类</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">带有静态域和实例域的 Java 类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/** 实例域 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">String</span> instanceField = <span class=\"string\">\"Instance Field\"</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/** 静态域 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> staticField = <span class=\"string\">\"Static Field\"</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>1.获取域ID</p>\n<p>JNI提供了用域ID访问两类域的方法，可以通过给定实例的class对象获取域ID,用GetObjectClass 函数获得 class 对象，</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用对象引用获取类</span><br><span class=\"line\">jclass clazz;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">clazz</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetObjectClass(env, instance);</span><br></pre></td></tr></table></figure>\n<p>有两个获得域ID的函数分别适用于不同类型域，GetFieldId 函数用于获取实例域，如下：</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取实例域的域ID</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID instanceFieldId;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">instanceFieldId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetFieldID(env, clazz, <span class=\"string\">\"instanceField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>)</span><br></pre></td></tr></table></figure>\n<p>GetStaticFieldId用于获取静态域ID， 这两个函数均返回 jfieldID 类型的域ID.</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态域的域ID</span><br><span class=\"line\"></span><br><span class=\"line\">jfieldID staticFieldId;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">staticFieldId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetStaticFieldID(env, clazz, <span class=\"string\">\"staticField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>两个函数的最后一个参数是Java中表示域类型的域描述符。在上述示例代码中，“Ljava/lang/String” 表明域类型是String。</p>\n<blockquote>\n<p>为了提高应用程序的性能，可以缓存域ID。一般总是缓存使用最频繁的域ID。</p>\n</blockquote>\n</li>\n<li>\n<p>2.获取域</p>\n<p>在获得域ID之后，可以用Get&lt;Type&gt;Field 函数获得实际的实例域，</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得实例域</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">jstring </span><span class=\"keyword\">instanceField;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceField </span>= (*env)-&gt;GetObjectField(env, <span class=\"keyword\">instance, </span><span class=\"keyword\">instanceFieldId);</span></span><br></pre></td></tr></table></figure>\n<p>用GetStatic&lt;Type&gt;Field函数获得静态域</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态域</span><br><span class=\"line\">jstring staticField;</span><br><span class=\"line\">staticField = (*env)-&gt;<span class=\"constructor\">GetStaticObjectField(<span class=\"params\">env</span>, <span class=\"params\">clazz</span>, <span class=\"params\">staticFieldId</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p>\n<blockquote>\n<p>获得单个域值需要调用两到三个JNI函数，原生代码回到Java中获取每个单独的域值，这给应用程序增加了额外的负担，进而导致性能下降。强烈建议将所有需要的参数传递给原生方法调用，而不是让原生代码回到Java中。</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"调用方法\"><a class=\"markdownIt-Anchor\" href=\"#调用方法\"></a> 调用方法</h5>\n<p>与域一样，Java中有两类方法：实例方法和静态方法。JNI 提供访问两类方法的函数， 如下代码给出了含有一个静态方法和一个实例方法的Java类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">带有静态方法和实例方法的Java类</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaClass</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 实例方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span>\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">instanceMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"instance Method\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 静态方法</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">staticMethod</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Static Method\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>1.获取方法ID</p>\n<p>JNI 提供了用方法ID访问两类方法的途径，可以用给定的实例的 class 对象获得方法ID。 用GetMethodID 函数获得实例方法的方法ID,</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得实例方法的方法ID</span><br><span class=\"line\"><span class=\"keyword\">jmethodID </span><span class=\"keyword\">instanceMethodId;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceMethodId </span>= (*env)-&gt;GetMethodID(env, clazz, <span class=\"string\">\"instanceMethod\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>用GetStaticMethodID 函数获得静态域的方法ID， 两个函数均返回 jmethodID 类型的方法ID.</p>\n  <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获得静态方法的方法ID</span><br><span class=\"line\"></span><br><span class=\"line\">jmethodID staticMethodId;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">staticMethodId</span> = <span class=\"params\">(*env)</span>-&gt;</span>GetStaticMethodID(env, clazz, <span class=\"string\">\"staticMethod\"</span>, <span class=\"string\">\"()Ljava/lang/String;\"</span>);</span><br></pre></td></tr></table></figure>\n<p>与字段ID获取方法一样，两个函数的最后一个参数均表示方法描述符，在Java中它表示方法签名。</p>\n<blockquote>\n<p>为了提升应用程序性能，可以缓存方法ID。一般总是缓存使用最频繁的方法ID。</p>\n</blockquote>\n</li>\n<li>\n<p>2.调用方法</p>\n<p>可以以方法ID为参数通过Call&lt;Type&gt;Method 类函数调用实际的实例方法， 如下：</p>\n  <figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用实例方法</span><br><span class=\"line\"><span class=\"keyword\">jstring </span><span class=\"keyword\">instanceMethodResult;</span></span><br><span class=\"line\"><span class=\"keyword\">instanceMethodResult </span>= (*env)-&gt;CallStringMethod(env, <span class=\"keyword\">instance, </span><span class=\"keyword\">instanceMethodId);</span></span><br></pre></td></tr></table></figure>\n<p>用CallStatic&lt;Type&gt;Field类函数调用静态方法，如下：</p>\n  <figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用静态方法</span><br><span class=\"line\">jstring staticMethodResult;</span><br><span class=\"line\">staticMethodResult = (*env)-&gt;<span class=\"constructor\">CallStaticStringMethod(<span class=\"params\">env</span>, <span class=\"params\">clazz</span>, <span class=\"params\">staticMethodId</span>)</span>;</span><br></pre></td></tr></table></figure>\n<p>在内存溢出的情况下，这些函数均返回NULL，此时原生代码不会继续执行。</p>\n<blockquote>\n<p>Java和原生代码之间的转换是代价较大的操作，强烈建议规划Java代码和原生代码的任务时考虑这种代价，最小化这种转换可以大大提高应用程序的性能。</p>\n</blockquote>\n</li>\n<li>\n<p>3.域和方法的描述符</p>\n</li>\n</ul>\n<p>下表为 Java类型签名映射</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java 类型</th>\n<th style=\"text-align:center\">签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Char</td>\n<td style=\"text-align:center\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">S</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int</td>\n<td style=\"text-align:center\">I</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fully-qualified-class</td>\n<td style=\"text-align:center\">Lfully-qualified-class;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type[]</td>\n<td style=\"text-align:center\">[type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method type</td>\n<td style=\"text-align:center\">(arg-type)ret-type</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>用类型签名映射手工生成域和方法描述符并让它们与Java代码同步是一件非常繁琐的任务。通常都是借助Java的类文件反汇编程序：javap</p>\n</blockquote>"},{"title":"MySQL常用命令总结","date":"2017-11-16T04:41:35.000Z","_content":"\n### 一、连接MYSQL\n\n格式： mysql -h主机地址 -u用户名 －p用户密码\n或者： mysql -u 用户名 -p // 回车后要求输入密码，密码不可见\n\n<!-- more -->\n#### 1、连接到本机上的MYSQL\n首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是如果-p后带有用户密码，那么-p与密码之间必须没有空格，否则让你重新输入密码.例如以下都是合法的登陆：(帐号：root   密码:123)\n```\nmysql -u root -p\nmysql -uroot -p\nmysql -uroot -p123\n```\n如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql>\n\n#### 2、连接到远程主机上的MYSQL\n假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：\nmysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）\n\n#### 3、退出MYSQL命令\n```\nexit （回车）\n```\n\n### 二、修改密码\n格式：mysqladmin -u用户名 -p旧密码 password 新密码\n\n#### 1、给root加个密码ab12\n首先在DOS下进入目录mysql\\bin，然后键入以下命令\nmysqladmin -u root -password ab12\n注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。\n\n#### 2、再将root的密码改为djg345\nmysqladmin -u root -p ab12 password djg345\n（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）\n\n#### 3、命令行修改root密码\n```\nmysql> UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;\nmysql> FLUSH PRIVILEGES;\n```\n\n#### 4、显示当前的user\n```\nmysql> SELECT USER();\n```\n\n### 三、增加新用户\n格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”\n#### 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。\n\n首先用root用户连入MYSQL，然后键入以下命令：\ngrant select,insert,update,delete on *.* to test1”%\" Identified by “abc”;\n但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。\n\n#### 2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）\n\n这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。\n```\ngrant select,insert,update,delete on mydb.* to test2@localhost identifiedby \"abc\";\n```\n如果你不想test2有密码，可以再打一个命令将密码消掉。\n```\ngrant select,insert,update,delete on mydb.* to test2@localhost identified by \"\";\n```\n\n### 四、操作技巧\n1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。\n也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。\n2、你可以使用光标上下键调出以前的命令。\n\n### 五、对数据库的操作\n#### 1、显示当前数据库服务器中的数据库列表：\n```\nmysql> SHOW DATABASES;\n```\n**注意**:mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。\n\n#### 2、显示数据库中的数据表：\n```\nmysql> USE 库名；\nmysql> SHOW TABLES;\n```\n\n#### 3、显示use的数据库名：\n```\nmysql> SELECT DATABASE();\n```\n\n#### 4、建立数据库：\n```\nmysql> CREATE DATABASE 库名;\n```\n#### 5、删除数据库：\n```\nmysql> DROP DATABASE 库名;\n```\n#### 6、导入.sql文件命令：\n```\nmysql> USE 数据库名;\nmysql> SOURCE d:/mysql.sql;\n```\n也可以在DOS环境下键入以下命令进行导入：\n```\nmysql -uroot -proot databasename < databasename.sql\n```\n**注意**:导入前请保证mysql中必须有databasename这个数据库;\n\n### 六、备份数据库：\n注意，mysqldump命令在DOS的 mysql\\bin 目录下执行,不能在mysql环境下执行，因此，不能以分号“;”结尾。若已登陆mysql，请运行退出命令mysql> exit\n\n#### 1.导出整个数据库\n导出文件默认是存在mysql\\bin目录下\n```\nmysqldump -u用户名 -p数据库名 > 导出的文件名\nmysqldump -uroot -p123456 database_name > outfile_name.sql\n```\n\n#### 2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u user_name -p database_name table_name > outfile_name.sql\n```\n\n#### 3.导出一个数据库结构\n```\nmysqldump -u user_name -p -d –add-drop-table database_name > outfile_name.sql\n-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table\n```\n#### 4.带语言参数导出\n```\nmysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name > outfile_name.sql\n```\n\n### 七、将文本数据转到数据库中\n#### 1、文本数据应符合的格式\n字段数据之间用tab键隔开，null值用\\n来代替.例：\n```\n3 rose 大连二中 1976-10-10\n4 mike 大连一中 1975-12-23\n```\n假设你把这两组数据存为school.txt文件，放在c盘根目录下。\n#### 2、数据传入命令\n```\nmysql> load data local infile \"c:\\school.txt\" into table 表名;\n```\n**注意**:你最好将文件复制到mysql\\bin目录下，并且要先用use命令打表所在的库。\n\n### 八、对表的操作\n#### 1、显示数据表的结构：\n```\nmysql> DESCRIBE 表名; （DESC 表名）\n```\n#### 2、建立数据表：\n```\nmysql> USE 库名; //进入数据库\nmysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));\n```\n\n#### 3、删除数据表：\n```\nmysql> DROP TABLE 表名；\n```\n\n#### 4、重命名数据表\n```\nalter table t1 rename t2;\n```\n\n#### 5、显示表中的记录：\n```\nmysql> SELECT * FROM 表名;\n```\n\n#### 6、往表中插入记录：\n```\nmysql> INSERT INTO 表名 VALUES (”hyq”,”M”);\n```\n\n#### 7、更新表中数据：\n```\nmysql-> UPDATE 表名 SET 字段名1=’a',字段名2=’b’ WHERE 字段名3=’c';\n```\n\n#### 8、将表中记录清空：\n```\nmysql> DELETE FROM 表名;\n```\n#### 9、用文本方式将数据装入数据表中：\n```\nmysql> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;\n```\n\n#### 10、 显示表的定义\n还可以看到表的约束，例如外键\n```\nmysql> SHOW CREATE TABLE yourtablename\n```\n还可以通过 mysqldump 将表的完整定义转储到文件中，当然包括外键定义。\n还可以通过下面的指令列出表 T 的外键约束：\n```\nmysql> SHOW TABLE STATUS FROM yourdatabasename LIKE 'T'  \n```\n外键约束将会在表注释中列出。\n\n### 存储过程\n#### 11、创建存储过程\n\n```\nCREATE PROCEDURE procedureName (in paramentName type, in paramentName type,……)\nBEGIN\nSQL sentences;\nEND\n```\n\n#### 12、调用存储过程\n```\nmysql> CALL procedureName(paramentList);\n例：mysql> CALL addMoney(12, 500);\n```\n\n#### 13、查看特定数据库的存储过程\n```\n方法一：mysql> SELECT `name` FROM mysql.proc WHERE db = 'your_db_name' AND `type` = 'PROCEDURE';\n方法二：mysql> show procedure status;\n```\n\n#### 14、删除存储过程\n```\nmysql> DROP PROCEDURE procedure_name;\nmysql> DROP PROCEDURE IF EXISTS procedure_name;\n```\n\n#### 15、查看指定的存储过程定义\n```\nmysql> SHOW CREATE PROCEDURE proc_name;\nmysql> SHOW CREATE FUNCTION func_name;\n---------- 示例一-----------\nmysql> DELIMITER\nmysql>USE‘dbname‘\n\n//选择数据库\nmysql> DROP PROCEDURE IF EXISTS `addMoney`\n//如果存在同名存储过程，则删除之mysql>CREATEDEFINER=‘root‘@‘localhost‘PROCEDURE‘addMoney‘(INxidINT(5),INxmoneyINT(6))mysql>BEGINmysql>UPDATEUSERuSETu.money=u.money+xmoneyWHEREu.id=xid;//分号\";\"不会导致语句执行，因为当前的分割符被定义为\n\nmysql> END$$   //终止\nmysql> DELIMITER ;    //把分割符改回分号\";\"\nmysql> call addMoney(5,1000); //执行存储过程\n---------- 示例二-----------\nmysql> delimiter //\nmysql> create procedure proc_name (in parameter integer)\nmysql> begin\nmysql> if parameter=0 then\nmysql> select * from user order by id asc;\nmysql> else\nmysql> select * from user order by id desc;\nmysql> end if;\nmysql> end;\nmysql> //        //此处“//”为终止符\nmysql> delimiter ;\nmysql> show warnings;\nmysql> call proc_name(1);\nmysql> call proc_name(0);\n\n```\n\n### 九、修改表的列属性的操作\n\n1. 为了改变列a，从INTEGER改为TINYINT NOT NULL(名字一样)，\n并且改变列b，从CHAR(10)改为CHAR(20)，同时重命名它，从b改为c:\n```\nmysql> ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);\n```\n2. 增加一个新TIMESTAMP列，名为d：\n```\nmysql> ALTER TABLE t2 ADD d TIMESTAMP;\n```\n3. 在列d上增加一个索引，并且使列a为主键：\n```\nmysql> ALTER TABLE t2 ADD INDEX (d), ADD PRIMARY KEY (a);\n```\n4. 删除列c：\n```\nmysql> ALTER TABLE t2 DROP COLUMN c;\n```\n5. 增加一个新的AUTO_INCREMENT整数列，命名为c：\n```\nmysql> ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,ADD INDEX (c);\n```\n注意，我们索引了c，因为AUTO_INCREMENT柱必须被索引，并且另外我们声明c为NOT NULL，\n因为索引了的列不能是NULL\n\n### 十、一个建库和建表以及插入数据的实例\n\n```\ndrop database if exists school; //如果存在SCHOOL则删除\ncreate database school; //建立库SCHOOL\nuse school; //打开库SCHOOL\ncreate table teacher //建立表TEACHER\n(\nid int(3) auto_increment not null primary key,\nname char(10) not null,\naddress varchar(50) default ‘深圳’,\nyear date\n); //建表结束\n//以下为插入字段\ninsert into teacher values('','allen','大连一中','1976-10-10');\ninsert into teacher values('','jack','大连二中','1975-12-23');\n如果你在mysql提示符键入上面的命令也可以，但不方便调试。\n（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\下，并在DOS状态进入目录\\mysql\\bin，然后键入以下命令：\nmysql -uroot -p密码 < c:\\school.sql\n如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。\n（2）或者进入命令行后使用 mysql> source c:\\school.sql; 也可以将school.sql文件导入数据库中。\n```\n","source":"_posts/MySQL常用命令总结.md","raw":"---\ntitle: MySQL常用命令总结\ndate: 2017-11-16 12:41:35\ntags: [mysql]\ncategories: mysql\n---\n\n### 一、连接MYSQL\n\n格式： mysql -h主机地址 -u用户名 －p用户密码\n或者： mysql -u 用户名 -p // 回车后要求输入密码，密码不可见\n\n<!-- more -->\n#### 1、连接到本机上的MYSQL\n首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是如果-p后带有用户密码，那么-p与密码之间必须没有空格，否则让你重新输入密码.例如以下都是合法的登陆：(帐号：root   密码:123)\n```\nmysql -u root -p\nmysql -uroot -p\nmysql -uroot -p123\n```\n如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql>\n\n#### 2、连接到远程主机上的MYSQL\n假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：\nmysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）\n\n#### 3、退出MYSQL命令\n```\nexit （回车）\n```\n\n### 二、修改密码\n格式：mysqladmin -u用户名 -p旧密码 password 新密码\n\n#### 1、给root加个密码ab12\n首先在DOS下进入目录mysql\\bin，然后键入以下命令\nmysqladmin -u root -password ab12\n注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。\n\n#### 2、再将root的密码改为djg345\nmysqladmin -u root -p ab12 password djg345\n（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）\n\n#### 3、命令行修改root密码\n```\nmysql> UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;\nmysql> FLUSH PRIVILEGES;\n```\n\n#### 4、显示当前的user\n```\nmysql> SELECT USER();\n```\n\n### 三、增加新用户\n格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”\n#### 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。\n\n首先用root用户连入MYSQL，然后键入以下命令：\ngrant select,insert,update,delete on *.* to test1”%\" Identified by “abc”;\n但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。\n\n#### 2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）\n\n这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。\n```\ngrant select,insert,update,delete on mydb.* to test2@localhost identifiedby \"abc\";\n```\n如果你不想test2有密码，可以再打一个命令将密码消掉。\n```\ngrant select,insert,update,delete on mydb.* to test2@localhost identified by \"\";\n```\n\n### 四、操作技巧\n1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。\n也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。\n2、你可以使用光标上下键调出以前的命令。\n\n### 五、对数据库的操作\n#### 1、显示当前数据库服务器中的数据库列表：\n```\nmysql> SHOW DATABASES;\n```\n**注意**:mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。\n\n#### 2、显示数据库中的数据表：\n```\nmysql> USE 库名；\nmysql> SHOW TABLES;\n```\n\n#### 3、显示use的数据库名：\n```\nmysql> SELECT DATABASE();\n```\n\n#### 4、建立数据库：\n```\nmysql> CREATE DATABASE 库名;\n```\n#### 5、删除数据库：\n```\nmysql> DROP DATABASE 库名;\n```\n#### 6、导入.sql文件命令：\n```\nmysql> USE 数据库名;\nmysql> SOURCE d:/mysql.sql;\n```\n也可以在DOS环境下键入以下命令进行导入：\n```\nmysql -uroot -proot databasename < databasename.sql\n```\n**注意**:导入前请保证mysql中必须有databasename这个数据库;\n\n### 六、备份数据库：\n注意，mysqldump命令在DOS的 mysql\\bin 目录下执行,不能在mysql环境下执行，因此，不能以分号“;”结尾。若已登陆mysql，请运行退出命令mysql> exit\n\n#### 1.导出整个数据库\n导出文件默认是存在mysql\\bin目录下\n```\nmysqldump -u用户名 -p数据库名 > 导出的文件名\nmysqldump -uroot -p123456 database_name > outfile_name.sql\n```\n\n#### 2.导出一个表\n```\nmysqldump -u 用户名 -p 数据库名 表名> 导出的文件名\nmysqldump -u user_name -p database_name table_name > outfile_name.sql\n```\n\n#### 3.导出一个数据库结构\n```\nmysqldump -u user_name -p -d –add-drop-table database_name > outfile_name.sql\n-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table\n```\n#### 4.带语言参数导出\n```\nmysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name > outfile_name.sql\n```\n\n### 七、将文本数据转到数据库中\n#### 1、文本数据应符合的格式\n字段数据之间用tab键隔开，null值用\\n来代替.例：\n```\n3 rose 大连二中 1976-10-10\n4 mike 大连一中 1975-12-23\n```\n假设你把这两组数据存为school.txt文件，放在c盘根目录下。\n#### 2、数据传入命令\n```\nmysql> load data local infile \"c:\\school.txt\" into table 表名;\n```\n**注意**:你最好将文件复制到mysql\\bin目录下，并且要先用use命令打表所在的库。\n\n### 八、对表的操作\n#### 1、显示数据表的结构：\n```\nmysql> DESCRIBE 表名; （DESC 表名）\n```\n#### 2、建立数据表：\n```\nmysql> USE 库名; //进入数据库\nmysql> CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));\n```\n\n#### 3、删除数据表：\n```\nmysql> DROP TABLE 表名；\n```\n\n#### 4、重命名数据表\n```\nalter table t1 rename t2;\n```\n\n#### 5、显示表中的记录：\n```\nmysql> SELECT * FROM 表名;\n```\n\n#### 6、往表中插入记录：\n```\nmysql> INSERT INTO 表名 VALUES (”hyq”,”M”);\n```\n\n#### 7、更新表中数据：\n```\nmysql-> UPDATE 表名 SET 字段名1=’a',字段名2=’b’ WHERE 字段名3=’c';\n```\n\n#### 8、将表中记录清空：\n```\nmysql> DELETE FROM 表名;\n```\n#### 9、用文本方式将数据装入数据表中：\n```\nmysql> LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;\n```\n\n#### 10、 显示表的定义\n还可以看到表的约束，例如外键\n```\nmysql> SHOW CREATE TABLE yourtablename\n```\n还可以通过 mysqldump 将表的完整定义转储到文件中，当然包括外键定义。\n还可以通过下面的指令列出表 T 的外键约束：\n```\nmysql> SHOW TABLE STATUS FROM yourdatabasename LIKE 'T'  \n```\n外键约束将会在表注释中列出。\n\n### 存储过程\n#### 11、创建存储过程\n\n```\nCREATE PROCEDURE procedureName (in paramentName type, in paramentName type,……)\nBEGIN\nSQL sentences;\nEND\n```\n\n#### 12、调用存储过程\n```\nmysql> CALL procedureName(paramentList);\n例：mysql> CALL addMoney(12, 500);\n```\n\n#### 13、查看特定数据库的存储过程\n```\n方法一：mysql> SELECT `name` FROM mysql.proc WHERE db = 'your_db_name' AND `type` = 'PROCEDURE';\n方法二：mysql> show procedure status;\n```\n\n#### 14、删除存储过程\n```\nmysql> DROP PROCEDURE procedure_name;\nmysql> DROP PROCEDURE IF EXISTS procedure_name;\n```\n\n#### 15、查看指定的存储过程定义\n```\nmysql> SHOW CREATE PROCEDURE proc_name;\nmysql> SHOW CREATE FUNCTION func_name;\n---------- 示例一-----------\nmysql> DELIMITER\nmysql>USE‘dbname‘\n\n//选择数据库\nmysql> DROP PROCEDURE IF EXISTS `addMoney`\n//如果存在同名存储过程，则删除之mysql>CREATEDEFINER=‘root‘@‘localhost‘PROCEDURE‘addMoney‘(INxidINT(5),INxmoneyINT(6))mysql>BEGINmysql>UPDATEUSERuSETu.money=u.money+xmoneyWHEREu.id=xid;//分号\";\"不会导致语句执行，因为当前的分割符被定义为\n\nmysql> END$$   //终止\nmysql> DELIMITER ;    //把分割符改回分号\";\"\nmysql> call addMoney(5,1000); //执行存储过程\n---------- 示例二-----------\nmysql> delimiter //\nmysql> create procedure proc_name (in parameter integer)\nmysql> begin\nmysql> if parameter=0 then\nmysql> select * from user order by id asc;\nmysql> else\nmysql> select * from user order by id desc;\nmysql> end if;\nmysql> end;\nmysql> //        //此处“//”为终止符\nmysql> delimiter ;\nmysql> show warnings;\nmysql> call proc_name(1);\nmysql> call proc_name(0);\n\n```\n\n### 九、修改表的列属性的操作\n\n1. 为了改变列a，从INTEGER改为TINYINT NOT NULL(名字一样)，\n并且改变列b，从CHAR(10)改为CHAR(20)，同时重命名它，从b改为c:\n```\nmysql> ALTER TABLE t2 MODIFY a TINYINT NOT NULL, CHANGE b c CHAR(20);\n```\n2. 增加一个新TIMESTAMP列，名为d：\n```\nmysql> ALTER TABLE t2 ADD d TIMESTAMP;\n```\n3. 在列d上增加一个索引，并且使列a为主键：\n```\nmysql> ALTER TABLE t2 ADD INDEX (d), ADD PRIMARY KEY (a);\n```\n4. 删除列c：\n```\nmysql> ALTER TABLE t2 DROP COLUMN c;\n```\n5. 增加一个新的AUTO_INCREMENT整数列，命名为c：\n```\nmysql> ALTER TABLE t2 ADD c INT UNSIGNED NOT NULL AUTO_INCREMENT,ADD INDEX (c);\n```\n注意，我们索引了c，因为AUTO_INCREMENT柱必须被索引，并且另外我们声明c为NOT NULL，\n因为索引了的列不能是NULL\n\n### 十、一个建库和建表以及插入数据的实例\n\n```\ndrop database if exists school; //如果存在SCHOOL则删除\ncreate database school; //建立库SCHOOL\nuse school; //打开库SCHOOL\ncreate table teacher //建立表TEACHER\n(\nid int(3) auto_increment not null primary key,\nname char(10) not null,\naddress varchar(50) default ‘深圳’,\nyear date\n); //建表结束\n//以下为插入字段\ninsert into teacher values('','allen','大连一中','1976-10-10');\ninsert into teacher values('','jack','大连二中','1975-12-23');\n如果你在mysql提示符键入上面的命令也可以，但不方便调试。\n（1）你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\下，并在DOS状态进入目录\\mysql\\bin，然后键入以下命令：\nmysql -uroot -p密码 < c:\\school.sql\n如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。\n（2）或者进入命令行后使用 mysql> source c:\\school.sql; 也可以将school.sql文件导入数据库中。\n```\n","slug":"MySQL常用命令总结","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi700c2sifykr1jjff5","content":"<h3 id=\"一-连接mysql\"><a class=\"markdownIt-Anchor\" href=\"#一-连接mysql\"></a> 一、连接MYSQL</h3>\n<p>格式： mysql -h主机地址 -u用户名 －p用户密码<br>\n或者： mysql -u 用户名 -p // 回车后要求输入密码，密码不可见</p>\n<a id=\"more\"></a>\n<h4 id=\"1-连接到本机上的mysql\"><a class=\"markdownIt-Anchor\" href=\"#1-连接到本机上的mysql\"></a> 1、连接到本机上的MYSQL</h4>\n<p>首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是如果-p后带有用户密码，那么-p与密码之间必须没有空格，否则让你重新输入密码.例如以下都是合法的登陆：(帐号：root   密码:123)</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">mysql -uroot -p123</span><br></pre></td></tr></table></figure>\n<p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p>\n<h4 id=\"2-连接到远程主机上的mysql\"><a class=\"markdownIt-Anchor\" href=\"#2-连接到远程主机上的mysql\"></a> 2、连接到远程主机上的MYSQL</h4>\n<p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>\nmysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</p>\n<h4 id=\"3-退出mysql命令\"><a class=\"markdownIt-Anchor\" href=\"#3-退出mysql命令\"></a> 3、退出MYSQL命令</h4>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exit</span> （回车）</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-修改密码\"><a class=\"markdownIt-Anchor\" href=\"#二-修改密码\"></a> 二、修改密码</h3>\n<p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>\n<h4 id=\"1-给root加个密码ab12\"><a class=\"markdownIt-Anchor\" href=\"#1-给root加个密码ab12\"></a> 1、给root加个密码ab12</h4>\n<p>首先在DOS下进入目录mysql\\bin，然后键入以下命令<br>\nmysqladmin -u root -password ab12<br>\n注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p>\n<h4 id=\"2-再将root的密码改为djg345\"><a class=\"markdownIt-Anchor\" href=\"#2-再将root的密码改为djg345\"></a> 2、再将root的密码改为djg345</h4>\n<p>mysqladmin -u root -p ab12 password djg345<br>\n（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</p>\n<h4 id=\"3-命令行修改root密码\"><a class=\"markdownIt-Anchor\" href=\"#3-命令行修改root密码\"></a> 3、命令行修改root密码</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">UPDATE</span> mysql.<span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">password</span>=<span class=\"keyword\">PASSWORD</span>(’新密码’) <span class=\"keyword\">WHERE</span> <span class=\"keyword\">User</span>=’root’;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-显示当前的user\"><a class=\"markdownIt-Anchor\" href=\"#4-显示当前的user\"></a> 4、显示当前的user</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-增加新用户\"><a class=\"markdownIt-Anchor\" href=\"#三-增加新用户\"></a> 三、增加新用户</h3>\n<p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p>\n<h4 id=\"1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限\"><a class=\"markdownIt-Anchor\" href=\"#1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限\"></a> 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。</h4>\n<p>首先用root用户连入MYSQL，然后键入以下命令：<br>\ngrant select,insert,update,delete on <em>.</em> to test1”%&quot; Identified by “abc”;<br>\n但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p>\n<h4 id=\"2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机\"><a class=\"markdownIt-Anchor\" href=\"#2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机\"></a> 2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）</h4>\n<p>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>,<span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> mydb.* <span class=\"keyword\">to</span> test2@localhost identifiedby <span class=\"string\">\"abc\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>,<span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> mydb.* <span class=\"keyword\">to</span> test2@localhost <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">\"\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-操作技巧\"><a class=\"markdownIt-Anchor\" href=\"#四-操作技巧\"></a> 四、操作技巧</h3>\n<p>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。<br>\n也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。<br>\n2、你可以使用光标上下键调出以前的命令。</p>\n<h3 id=\"五-对数据库的操作\"><a class=\"markdownIt-Anchor\" href=\"#五-对数据库的操作\"></a> 五、对数据库的操作</h3>\n<h4 id=\"1-显示当前数据库服务器中的数据库列表\"><a class=\"markdownIt-Anchor\" href=\"#1-显示当前数据库服务器中的数据库列表\"></a> 1、显示当前数据库服务器中的数据库列表：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW </span>DATABASES<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p>\n<h4 id=\"2-显示数据库中的数据表\"><a class=\"markdownIt-Anchor\" href=\"#2-显示数据库中的数据表\"></a> 2、显示数据库中的数据表：</h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">USE</span> 库名；</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-显示use的数据库名\"><a class=\"markdownIt-Anchor\" href=\"#3-显示use的数据库名\"></a> 3、显示use的数据库名：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATABASE</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-建立数据库\"><a class=\"markdownIt-Anchor\" href=\"#4-建立数据库\"></a> 4、建立数据库：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-删除数据库\"><a class=\"markdownIt-Anchor\" href=\"#5-删除数据库\"></a> 5、删除数据库：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-导入sql文件命令\"><a class=\"markdownIt-Anchor\" href=\"#6-导入sql文件命令\"></a> 6、导入.sql文件命令：</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">USE</span> 数据库名;</span><br><span class=\"line\">mysql&gt; SOURCE d:/mysql.sql;</span><br></pre></td></tr></table></figure>\n<p>也可以在DOS环境下键入以下命令进行导入：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-uroot</span> <span class=\"selector-tag\">-proot</span> <span class=\"selector-tag\">databasename</span> &lt; <span class=\"selector-tag\">databasename</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:导入前请保证mysql中必须有databasename这个数据库;</p>\n<h3 id=\"六-备份数据库\"><a class=\"markdownIt-Anchor\" href=\"#六-备份数据库\"></a> 六、备份数据库：</h3>\n<p>注意，mysqldump命令在DOS的 mysql\\bin 目录下执行,不能在mysql环境下执行，因此，不能以分号“;”结尾。若已登陆mysql，请运行退出命令mysql&gt; exit</p>\n<h4 id=\"1导出整个数据库\"><a class=\"markdownIt-Anchor\" href=\"#1导出整个数据库\"></a> 1.导出整个数据库</h4>\n<p>导出文件默认是存在mysql\\bin目录下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u用户名 -p数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-uroot -p123456 database_name &gt; outfile_name.sql</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2导出一个表\"><a class=\"markdownIt-Anchor\" href=\"#2导出一个表\"></a> 2.导出一个表</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u 用户名 -<span class=\"selector-tag\">p</span> 数据库名 表名&gt; 导出的文件名</span><br><span class=\"line\">mysqldump -u user_name -<span class=\"selector-tag\">p</span> database_name table_name &gt; outfile_name.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"3导出一个数据库结构\"><a class=\"markdownIt-Anchor\" href=\"#3导出一个数据库结构\"></a> 3.导出一个数据库结构</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u user_name -p -d –<span class=\"keyword\">add</span>-<span class=\"keyword\">drop</span>-<span class=\"keyword\">table</span> database_name &gt; outfile_name.<span class=\"keyword\">sql</span></span><br><span class=\"line\">-d 没有数据 –<span class=\"keyword\">add</span>-<span class=\"keyword\">drop</span>-<span class=\"keyword\">table</span> 在每个<span class=\"keyword\">create</span>语句之前增加一个<span class=\"keyword\">drop</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4带语言参数导出\"><a class=\"markdownIt-Anchor\" href=\"#4带语言参数导出\"></a> 4.带语言参数导出</h4>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">mysqldump </span>-<span class=\"string\">uroot </span>-p –<span class=\"string\">default-character-</span><span class=\"string\">set=</span><span class=\"string\">latin1 </span>–<span class=\"built_in\">set-charset=gbk</span> –<span class=\"string\">skip-opt </span><span class=\"string\">database_name </span>&gt; <span class=\"string\">outfile_name.</span><span class=\"string\">sql</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"七-将文本数据转到数据库中\"><a class=\"markdownIt-Anchor\" href=\"#七-将文本数据转到数据库中\"></a> 七、将文本数据转到数据库中</h3>\n<h4 id=\"1-文本数据应符合的格式\"><a class=\"markdownIt-Anchor\" href=\"#1-文本数据应符合的格式\"></a> 1、文本数据应符合的格式</h4>\n<p>字段数据之间用tab键隔开，null值用\\n来代替.例：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">3 </span>rose 大连二中 <span class=\"number\">1976</span>-<span class=\"number\">10</span>-<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span>mike 大连一中 <span class=\"number\">1975</span>-<span class=\"number\">12</span>-<span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n<p>假设你把这两组数据存为school.txt文件，放在c盘根目录下。</p>\n<h4 id=\"2-数据传入命令\"><a class=\"markdownIt-Anchor\" href=\"#2-数据传入命令\"></a> 2、数据传入命令</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">load</span> data <span class=\"keyword\">local</span> infile \"c:\\school.txt\" <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:你最好将文件复制到mysql\\bin目录下，并且要先用use命令打表所在的库。</p>\n<h3 id=\"八-对表的操作\"><a class=\"markdownIt-Anchor\" href=\"#八-对表的操作\"></a> 八、对表的操作</h3>\n<h4 id=\"1-显示数据表的结构\"><a class=\"markdownIt-Anchor\" href=\"#1-显示数据表的结构\"></a> 1、显示数据表的结构：</h4>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DESCRIBE</span> 表名; （<span class=\"keyword\">DESC</span> 表名）</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-建立数据表\"><a class=\"markdownIt-Anchor\" href=\"#2-建立数据表\"></a> 2、建立数据表：</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; USE 库名; //进入数据库</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名 (字段名 <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>), 字段名 <span class=\"type\">CHAR</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-删除数据表\"><a class=\"markdownIt-Anchor\" href=\"#3-删除数据表\"></a> 3、删除数据表：</h4>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP <span class=\"keyword\">TABLE</span> 表名；</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-重命名数据表\"><a class=\"markdownIt-Anchor\" href=\"#4-重命名数据表\"></a> 4、重命名数据表</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">rename</span> t2;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-显示表中的记录\"><a class=\"markdownIt-Anchor\" href=\"#5-显示表中的记录\"></a> 5、显示表中的记录：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-往表中插入记录\"><a class=\"markdownIt-Anchor\" href=\"#6-往表中插入记录\"></a> 6、往表中插入记录：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表名 <span class=\"keyword\">VALUES</span> (”hyq”,”M”);</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-更新表中数据\"><a class=\"markdownIt-Anchor\" href=\"#7-更新表中数据\"></a> 7、更新表中数据：</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql-&gt; UPDATE 表名 <span class=\"builtin-name\">SET</span> 字段名<span class=\"attribute\">1</span>=’a',字段名2=’b’ WHERE 字段名<span class=\"attribute\">3</span>=’c';</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-将表中记录清空\"><a class=\"markdownIt-Anchor\" href=\"#8-将表中记录清空\"></a> 8、将表中记录清空：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-用文本方式将数据装入数据表中\"><a class=\"markdownIt-Anchor\" href=\"#9-用文本方式将数据装入数据表中\"></a> 9、用文本方式将数据装入数据表中：</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">LOAD</span> DATA <span class=\"keyword\">LOCAL</span> INFILE “D:/mysql.txt” <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"10-显示表的定义\"><a class=\"markdownIt-Anchor\" href=\"#10-显示表的定义\"></a> 10、 显示表的定义</h4>\n<p>还可以看到表的约束，例如外键</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> yourtablename</span><br></pre></td></tr></table></figure>\n<p>还可以通过 mysqldump 将表的完整定义转储到文件中，当然包括外键定义。<br>\n还可以通过下面的指令列出表 T 的外键约束：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> <span class=\"keyword\">TABLE</span> STATUS <span class=\"keyword\">FROM</span> yourdatabasename <span class=\"keyword\">LIKE</span> <span class=\"string\">'T'</span></span><br></pre></td></tr></table></figure>\n<p>外键约束将会在表注释中列出。</p>\n<h3 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\"></a> 存储过程</h3>\n<h4 id=\"11-创建存储过程\"><a class=\"markdownIt-Anchor\" href=\"#11-创建存储过程\"></a> 11、创建存储过程</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">procedureName</span> <span class=\"params\">(<span class=\"keyword\">in</span> paramentName <span class=\"keyword\">type</span>, <span class=\"keyword\">in</span> paramentName <span class=\"keyword\">type</span>,……)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BEGIN</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SQL</span> <span class=\"title\">sentences</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"12-调用存储过程\"><a class=\"markdownIt-Anchor\" href=\"#12-调用存储过程\"></a> 12、调用存储过程</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CALL procedureName(paramentList)<span class=\"comment\">;</span></span><br><span class=\"line\">例：mysql&gt; CALL <span class=\"keyword\">addMoney(12, </span><span class=\"number\">500</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"13-查看特定数据库的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#13-查看特定数据库的存储过程\"></a> 13、查看特定数据库的存储过程</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：mysql&gt; <span class=\"keyword\">SELECT</span> `name` <span class=\"keyword\">FROM</span> mysql.proc <span class=\"keyword\">WHERE</span> db = <span class=\"string\">'your_db_name'</span> <span class=\"keyword\">AND</span> `<span class=\"keyword\">type</span>` = <span class=\"string\">'PROCEDURE'</span>;</span><br><span class=\"line\">方法二：mysql&gt; show <span class=\"function\"><span class=\"keyword\">procedure</span> <span class=\"title\">status</span>;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"14-删除存储过程\"><a class=\"markdownIt-Anchor\" href=\"#14-删除存储过程\"></a> 14、删除存储过程</h4>\n<figure class=\"highlight cal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">procedure_name</span>;</span></span><br><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">IF</span> <span class=\"title\">EXISTS</span> <span class=\"title\">procedure_name</span>;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"15-查看指定的存储过程定义\"><a class=\"markdownIt-Anchor\" href=\"#15-查看指定的存储过程定义\"></a> 15、查看指定的存储过程定义</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW <span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">proc_name</span>;</span></span><br><span class=\"line\">mysql&gt; SHOW <span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">FUNCTION</span> <span class=\"title\">func_name</span>;</span></span><br><span class=\"line\">---------- 示例一-----------</span><br><span class=\"line\">mysql&gt; DELIMITER</span><br><span class=\"line\">mysql&gt;USE‘dbname‘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选择数据库</span></span><br><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">IF</span> <span class=\"title\">EXISTS</span> `<span class=\"title\">addMoney</span>`</span></span><br><span class=\"line\"><span class=\"function\">//如果存在同名存储过程，则删除之<span class=\"title\">mysql</span>&gt;<span class=\"title\">CREATEDEFINER</span>=‘<span class=\"title\">root</span>‘@‘<span class=\"title\">localhost</span>‘<span class=\"title\">PROCEDURE</span>‘<span class=\"title\">addMoney</span>‘<span class=\"params\">(INxidINT(5)</span>,<span class=\"title\">INxmoneyINT</span><span class=\"params\">(6)</span>)<span class=\"title\">mysql</span>&gt;<span class=\"title\">BEGINmysql</span>&gt;<span class=\"title\">UPDATEUSERuSETu</span>.<span class=\"title\">money</span>=<span class=\"title\">u</span>.<span class=\"title\">money</span>+<span class=\"title\">xmoneyWHEREu</span>.<span class=\"title\">id</span>=<span class=\"title\">xid</span>;</span><span class=\"comment\">//分号\";\"不会导致语句执行，因为当前的分割符被定义为</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">END</span>$$   <span class=\"comment\">//终止</span></span><br><span class=\"line\">mysql&gt; DELIMITER ;    <span class=\"comment\">//把分割符改回分号\";\"</span></span><br><span class=\"line\">mysql&gt; call addMoney(<span class=\"number\">5</span>,<span class=\"number\">1000</span>); <span class=\"comment\">//执行存储过程</span></span><br><span class=\"line\">---------- 示例二-----------</span><br><span class=\"line\">mysql&gt; delimiter <span class=\"comment\">//</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">create</span> <span class=\"function\"><span class=\"keyword\">procedure</span> <span class=\"title\">proc_name</span> <span class=\"params\">(<span class=\"keyword\">in</span> parameter integer)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">begin</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">if</span> <span class=\"title\">parameter</span>=0 <span class=\"title\">then</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">select</span> * <span class=\"title\">from</span> <span class=\"title\">user</span> <span class=\"title\">order</span> <span class=\"title\">by</span> <span class=\"title\">id</span> <span class=\"title\">asc</span>;</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">else</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> user <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">end</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"comment\">//        //此处“//”为终止符</span></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\">mysql&gt; show warnings;</span><br><span class=\"line\">mysql&gt; call proc_name(<span class=\"number\">1</span>);</span><br><span class=\"line\">mysql&gt; call proc_name(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"九-修改表的列属性的操作\"><a class=\"markdownIt-Anchor\" href=\"#九-修改表的列属性的操作\"></a> 九、修改表的列属性的操作</h3>\n<ol>\n<li>为了改变列a，从INTEGER改为TINYINT NOT NULL(名字一样)，<br>\n并且改变列b，从CHAR(10)改为CHAR(20)，同时重命名它，从b改为c:</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 MODIFY a TINYINT <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, CHANGE b c <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>增加一个新TIMESTAMP列，名为d：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">ADD</span> d <span class=\"type\">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在列d上增加一个索引，并且使列a为主键：</li>\n</ol>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"meta\">ALTER</span> <span class=\"meta\">TABLE</span> t2 <span class=\"meta\">ADD</span> <span class=\"meta\">INDEX</span> (d), <span class=\"meta\">ADD</span> <span class=\"meta\">PRIMARY</span> <span class=\"meta\">KEY</span> (a);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删除列c：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> c;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>增加一个新的AUTO_INCREMENT整数列，命名为c：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">ADD</span> c <span class=\"type\">INT</span> UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,<span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> (c);</span><br></pre></td></tr></table></figure>\n<p>注意，我们索引了c，因为AUTO_INCREMENT柱必须被索引，并且另外我们声明c为NOT NULL，<br>\n因为索引了的列不能是NULL</p>\n<h3 id=\"十-一个建库和建表以及插入数据的实例\"><a class=\"markdownIt-Anchor\" href=\"#十-一个建库和建表以及插入数据的实例\"></a> 十、一个建库和建表以及插入数据的实例</h3>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> school; //如果存在SCHOOL则删除</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> school; //建立库SCHOOL</span><br><span class=\"line\">use school; //打开库SCHOOL</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> teacher //建立表TEACHER</span><br><span class=\"line\">(</span><br><span class=\"line\">id <span class=\"type\">int</span>(<span class=\"number\">3</span>) auto_increment <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">primary key</span>,</span><br><span class=\"line\"><span class=\"type\">name</span> <span class=\"type\">char</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">address <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">default</span> ‘深圳’,</span><br><span class=\"line\">year <span class=\"type\">date</span></span><br><span class=\"line\">); //建表结束</span><br><span class=\"line\">//以下为插入字段</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher <span class=\"keyword\">values</span>(<span class=\"string\">''</span>,<span class=\"string\">'allen'</span>,<span class=\"string\">'大连一中'</span>,<span class=\"string\">'1976-10-10'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher <span class=\"keyword\">values</span>(<span class=\"string\">''</span>,<span class=\"string\">'jack'</span>,<span class=\"string\">'大连二中'</span>,<span class=\"string\">'1975-12-23'</span>);</span><br><span class=\"line\">如果你在mysql提示符键入上面的命令也可以，但不方便调试。</span><br><span class=\"line\">（<span class=\"number\">1</span>）你可以将以上命令原样写入一个文本文件中，假设为school.<span class=\"keyword\">sql</span>，然后复制到c:\\下，并在DOS状态进入目录\\mysql\\bin，然后键入以下命令：</span><br><span class=\"line\">mysql -uroot -p密码 &lt; c:\\school.<span class=\"keyword\">sql</span></span><br><span class=\"line\">如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</span><br><span class=\"line\">（<span class=\"number\">2</span>）或者进入命令行后使用 mysql&gt; source c:\\school.<span class=\"keyword\">sql</span>; 也可以将school.<span class=\"keyword\">sql</span>文件导入数据库中。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"一-连接mysql\"><a class=\"markdownIt-Anchor\" href=\"#一-连接mysql\"></a> 一、连接MYSQL</h3>\n<p>格式： mysql -h主机地址 -u用户名 －p用户密码<br>\n或者： mysql -u 用户名 -p // 回车后要求输入密码，密码不可见</p>","more":"<h4 id=\"1-连接到本机上的mysql\"><a class=\"markdownIt-Anchor\" href=\"#1-连接到本机上的mysql\"></a> 1、连接到本机上的MYSQL</h4>\n<p>首先打开DOS窗口，然后进入目录mysql\\bin，再键入命令mysql -u root -p，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是如果-p后带有用户密码，那么-p与密码之间必须没有空格，否则让你重新输入密码.例如以下都是合法的登陆：(帐号：root   密码:123)</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">mysql -uroot -p123</span><br></pre></td></tr></table></figure>\n<p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p>\n<h4 id=\"2-连接到远程主机上的mysql\"><a class=\"markdownIt-Anchor\" href=\"#2-连接到远程主机上的mysql\"></a> 2、连接到远程主机上的MYSQL</h4>\n<p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：<br>\nmysql -h110.110.110.110 -u root -p 123;（注:u与root之间可以不用加空格，其它也一样）</p>\n<h4 id=\"3-退出mysql命令\"><a class=\"markdownIt-Anchor\" href=\"#3-退出mysql命令\"></a> 3、退出MYSQL命令</h4>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">exit</span> （回车）</span><br></pre></td></tr></table></figure>\n<h3 id=\"二-修改密码\"><a class=\"markdownIt-Anchor\" href=\"#二-修改密码\"></a> 二、修改密码</h3>\n<p>格式：mysqladmin -u用户名 -p旧密码 password 新密码</p>\n<h4 id=\"1-给root加个密码ab12\"><a class=\"markdownIt-Anchor\" href=\"#1-给root加个密码ab12\"></a> 1、给root加个密码ab12</h4>\n<p>首先在DOS下进入目录mysql\\bin，然后键入以下命令<br>\nmysqladmin -u root -password ab12<br>\n注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p>\n<h4 id=\"2-再将root的密码改为djg345\"><a class=\"markdownIt-Anchor\" href=\"#2-再将root的密码改为djg345\"></a> 2、再将root的密码改为djg345</h4>\n<p>mysqladmin -u root -p ab12 password djg345<br>\n（注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符）</p>\n<h4 id=\"3-命令行修改root密码\"><a class=\"markdownIt-Anchor\" href=\"#3-命令行修改root密码\"></a> 3、命令行修改root密码</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">UPDATE</span> mysql.<span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> <span class=\"keyword\">password</span>=<span class=\"keyword\">PASSWORD</span>(’新密码’) <span class=\"keyword\">WHERE</span> <span class=\"keyword\">User</span>=’root’;</span><br><span class=\"line\">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-显示当前的user\"><a class=\"markdownIt-Anchor\" href=\"#4-显示当前的user\"></a> 4、显示当前的user</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">USER</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-增加新用户\"><a class=\"markdownIt-Anchor\" href=\"#三-增加新用户\"></a> 三、增加新用户</h3>\n<p>格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</p>\n<h4 id=\"1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限\"><a class=\"markdownIt-Anchor\" href=\"#1-增加一个用户test1密码为abc让他可以在任何主机上登录并对所有数据库有查询-插入-修改-删除的权限\"></a> 1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。</h4>\n<p>首先用root用户连入MYSQL，然后键入以下命令：<br>\ngrant select,insert,update,delete on <em>.</em> to test1”%&quot; Identified by “abc”;<br>\n但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</p>\n<h4 id=\"2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机\"><a class=\"markdownIt-Anchor\" href=\"#2-增加一个用户test2密码为abc让他只可以在localhost上登录并可以对数据库mydb进行查询-插入-修改-删除的操作localhost指本地主机即mysql数据库所在的那台主机\"></a> 2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机）</h4>\n<p>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>,<span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> mydb.* <span class=\"keyword\">to</span> test2@localhost identifiedby <span class=\"string\">\"abc\"</span>;</span><br></pre></td></tr></table></figure>\n<p>如果你不想test2有密码，可以再打一个命令将密码消掉。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span>,<span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> mydb.* <span class=\"keyword\">to</span> test2@localhost <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">\"\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四-操作技巧\"><a class=\"markdownIt-Anchor\" href=\"#四-操作技巧\"></a> 四、操作技巧</h3>\n<p>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。<br>\n也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。<br>\n2、你可以使用光标上下键调出以前的命令。</p>\n<h3 id=\"五-对数据库的操作\"><a class=\"markdownIt-Anchor\" href=\"#五-对数据库的操作\"></a> 五、对数据库的操作</h3>\n<h4 id=\"1-显示当前数据库服务器中的数据库列表\"><a class=\"markdownIt-Anchor\" href=\"#1-显示当前数据库服务器中的数据库列表\"></a> 1、显示当前数据库服务器中的数据库列表：</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW </span>DATABASES<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p>\n<h4 id=\"2-显示数据库中的数据表\"><a class=\"markdownIt-Anchor\" href=\"#2-显示数据库中的数据表\"></a> 2、显示数据库中的数据表：</h4>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">USE</span> 库名；</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-显示use的数据库名\"><a class=\"markdownIt-Anchor\" href=\"#3-显示use的数据库名\"></a> 3、显示use的数据库名：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> <span class=\"keyword\">DATABASE</span>();</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-建立数据库\"><a class=\"markdownIt-Anchor\" href=\"#4-建立数据库\"></a> 4、建立数据库：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-删除数据库\"><a class=\"markdownIt-Anchor\" href=\"#5-删除数据库\"></a> 5、删除数据库：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DROP</span> <span class=\"keyword\">DATABASE</span> 库名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-导入sql文件命令\"><a class=\"markdownIt-Anchor\" href=\"#6-导入sql文件命令\"></a> 6、导入.sql文件命令：</h4>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">USE</span> 数据库名;</span><br><span class=\"line\">mysql&gt; SOURCE d:/mysql.sql;</span><br></pre></td></tr></table></figure>\n<p>也可以在DOS环境下键入以下命令进行导入：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">mysql</span> <span class=\"selector-tag\">-uroot</span> <span class=\"selector-tag\">-proot</span> <span class=\"selector-tag\">databasename</span> &lt; <span class=\"selector-tag\">databasename</span><span class=\"selector-class\">.sql</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:导入前请保证mysql中必须有databasename这个数据库;</p>\n<h3 id=\"六-备份数据库\"><a class=\"markdownIt-Anchor\" href=\"#六-备份数据库\"></a> 六、备份数据库：</h3>\n<p>注意，mysqldump命令在DOS的 mysql\\bin 目录下执行,不能在mysql环境下执行，因此，不能以分号“;”结尾。若已登陆mysql，请运行退出命令mysql&gt; exit</p>\n<h4 id=\"1导出整个数据库\"><a class=\"markdownIt-Anchor\" href=\"#1导出整个数据库\"></a> 1.导出整个数据库</h4>\n<p>导出文件默认是存在mysql\\bin目录下</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-u用户名 -p数据库名 &gt; 导出的文件名</span></span><br><span class=\"line\"><span class=\"attr\">mysqldump</span> <span class=\"string\">-uroot -p123456 database_name &gt; outfile_name.sql</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2导出一个表\"><a class=\"markdownIt-Anchor\" href=\"#2导出一个表\"></a> 2.导出一个表</h4>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u 用户名 -<span class=\"selector-tag\">p</span> 数据库名 表名&gt; 导出的文件名</span><br><span class=\"line\">mysqldump -u user_name -<span class=\"selector-tag\">p</span> database_name table_name &gt; outfile_name.sql</span><br></pre></td></tr></table></figure>\n<h4 id=\"3导出一个数据库结构\"><a class=\"markdownIt-Anchor\" href=\"#3导出一个数据库结构\"></a> 3.导出一个数据库结构</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump -u user_name -p -d –<span class=\"keyword\">add</span>-<span class=\"keyword\">drop</span>-<span class=\"keyword\">table</span> database_name &gt; outfile_name.<span class=\"keyword\">sql</span></span><br><span class=\"line\">-d 没有数据 –<span class=\"keyword\">add</span>-<span class=\"keyword\">drop</span>-<span class=\"keyword\">table</span> 在每个<span class=\"keyword\">create</span>语句之前增加一个<span class=\"keyword\">drop</span> <span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4带语言参数导出\"><a class=\"markdownIt-Anchor\" href=\"#4带语言参数导出\"></a> 4.带语言参数导出</h4>\n<figure class=\"highlight dsconfig\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">mysqldump </span>-<span class=\"string\">uroot </span>-p –<span class=\"string\">default-character-</span><span class=\"string\">set=</span><span class=\"string\">latin1 </span>–<span class=\"built_in\">set-charset=gbk</span> –<span class=\"string\">skip-opt </span><span class=\"string\">database_name </span>&gt; <span class=\"string\">outfile_name.</span><span class=\"string\">sql</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"七-将文本数据转到数据库中\"><a class=\"markdownIt-Anchor\" href=\"#七-将文本数据转到数据库中\"></a> 七、将文本数据转到数据库中</h3>\n<h4 id=\"1-文本数据应符合的格式\"><a class=\"markdownIt-Anchor\" href=\"#1-文本数据应符合的格式\"></a> 1、文本数据应符合的格式</h4>\n<p>字段数据之间用tab键隔开，null值用\\n来代替.例：</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">3 </span>rose 大连二中 <span class=\"number\">1976</span>-<span class=\"number\">10</span>-<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"symbol\">4 </span>mike 大连一中 <span class=\"number\">1975</span>-<span class=\"number\">12</span>-<span class=\"number\">23</span></span><br></pre></td></tr></table></figure>\n<p>假设你把这两组数据存为school.txt文件，放在c盘根目录下。</p>\n<h4 id=\"2-数据传入命令\"><a class=\"markdownIt-Anchor\" href=\"#2-数据传入命令\"></a> 2、数据传入命令</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">load</span> data <span class=\"keyword\">local</span> infile \"c:\\school.txt\" <span class=\"keyword\">into</span> <span class=\"keyword\">table</span> 表名;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>:你最好将文件复制到mysql\\bin目录下，并且要先用use命令打表所在的库。</p>\n<h3 id=\"八-对表的操作\"><a class=\"markdownIt-Anchor\" href=\"#八-对表的操作\"></a> 八、对表的操作</h3>\n<h4 id=\"1-显示数据表的结构\"><a class=\"markdownIt-Anchor\" href=\"#1-显示数据表的结构\"></a> 1、显示数据表的结构：</h4>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DESCRIBE</span> 表名; （<span class=\"keyword\">DESC</span> 表名）</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-建立数据表\"><a class=\"markdownIt-Anchor\" href=\"#2-建立数据表\"></a> 2、建立数据表：</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; USE 库名; //进入数据库</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名 (字段名 <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>), 字段名 <span class=\"type\">CHAR</span>(<span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-删除数据表\"><a class=\"markdownIt-Anchor\" href=\"#3-删除数据表\"></a> 3、删除数据表：</h4>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP <span class=\"keyword\">TABLE</span> 表名；</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-重命名数据表\"><a class=\"markdownIt-Anchor\" href=\"#4-重命名数据表\"></a> 4、重命名数据表</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t1 <span class=\"keyword\">rename</span> t2;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-显示表中的记录\"><a class=\"markdownIt-Anchor\" href=\"#5-显示表中的记录\"></a> 5、显示表中的记录：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-往表中插入记录\"><a class=\"markdownIt-Anchor\" href=\"#6-往表中插入记录\"></a> 6、往表中插入记录：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> 表名 <span class=\"keyword\">VALUES</span> (”hyq”,”M”);</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-更新表中数据\"><a class=\"markdownIt-Anchor\" href=\"#7-更新表中数据\"></a> 7、更新表中数据：</h4>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql-&gt; UPDATE 表名 <span class=\"builtin-name\">SET</span> 字段名<span class=\"attribute\">1</span>=’a',字段名2=’b’ WHERE 字段名<span class=\"attribute\">3</span>=’c';</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-将表中记录清空\"><a class=\"markdownIt-Anchor\" href=\"#8-将表中记录清空\"></a> 8、将表中记录清空：</h4>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-用文本方式将数据装入数据表中\"><a class=\"markdownIt-Anchor\" href=\"#9-用文本方式将数据装入数据表中\"></a> 9、用文本方式将数据装入数据表中：</h4>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">LOAD</span> DATA <span class=\"keyword\">LOCAL</span> INFILE “D:/mysql.txt” <span class=\"keyword\">INTO</span> <span class=\"keyword\">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>\n<h4 id=\"10-显示表的定义\"><a class=\"markdownIt-Anchor\" href=\"#10-显示表的定义\"></a> 10、 显示表的定义</h4>\n<p>还可以看到表的约束，例如外键</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> yourtablename</span><br></pre></td></tr></table></figure>\n<p>还可以通过 mysqldump 将表的完整定义转储到文件中，当然包括外键定义。<br>\n还可以通过下面的指令列出表 T 的外键约束：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">SHOW</span> <span class=\"keyword\">TABLE</span> STATUS <span class=\"keyword\">FROM</span> yourdatabasename <span class=\"keyword\">LIKE</span> <span class=\"string\">'T'</span></span><br></pre></td></tr></table></figure>\n<p>外键约束将会在表注释中列出。</p>\n<h3 id=\"存储过程\"><a class=\"markdownIt-Anchor\" href=\"#存储过程\"></a> 存储过程</h3>\n<h4 id=\"11-创建存储过程\"><a class=\"markdownIt-Anchor\" href=\"#11-创建存储过程\"></a> 11、创建存储过程</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">procedureName</span> <span class=\"params\">(<span class=\"keyword\">in</span> paramentName <span class=\"keyword\">type</span>, <span class=\"keyword\">in</span> paramentName <span class=\"keyword\">type</span>,……)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">BEGIN</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">SQL</span> <span class=\"title\">sentences</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"12-调用存储过程\"><a class=\"markdownIt-Anchor\" href=\"#12-调用存储过程\"></a> 12、调用存储过程</h4>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; CALL procedureName(paramentList)<span class=\"comment\">;</span></span><br><span class=\"line\">例：mysql&gt; CALL <span class=\"keyword\">addMoney(12, </span><span class=\"number\">500</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"13-查看特定数据库的存储过程\"><a class=\"markdownIt-Anchor\" href=\"#13-查看特定数据库的存储过程\"></a> 13、查看特定数据库的存储过程</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方法一：mysql&gt; <span class=\"keyword\">SELECT</span> `name` <span class=\"keyword\">FROM</span> mysql.proc <span class=\"keyword\">WHERE</span> db = <span class=\"string\">'your_db_name'</span> <span class=\"keyword\">AND</span> `<span class=\"keyword\">type</span>` = <span class=\"string\">'PROCEDURE'</span>;</span><br><span class=\"line\">方法二：mysql&gt; show <span class=\"function\"><span class=\"keyword\">procedure</span> <span class=\"title\">status</span>;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"14-删除存储过程\"><a class=\"markdownIt-Anchor\" href=\"#14-删除存储过程\"></a> 14、删除存储过程</h4>\n<figure class=\"highlight cal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">procedure_name</span>;</span></span><br><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">IF</span> <span class=\"title\">EXISTS</span> <span class=\"title\">procedure_name</span>;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"15-查看指定的存储过程定义\"><a class=\"markdownIt-Anchor\" href=\"#15-查看指定的存储过程定义\"></a> 15、查看指定的存储过程定义</h4>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW <span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">proc_name</span>;</span></span><br><span class=\"line\">mysql&gt; SHOW <span class=\"keyword\">CREATE</span> <span class=\"function\"><span class=\"keyword\">FUNCTION</span> <span class=\"title\">func_name</span>;</span></span><br><span class=\"line\">---------- 示例一-----------</span><br><span class=\"line\">mysql&gt; DELIMITER</span><br><span class=\"line\">mysql&gt;USE‘dbname‘</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//选择数据库</span></span><br><span class=\"line\">mysql&gt; DROP <span class=\"function\"><span class=\"keyword\">PROCEDURE</span> <span class=\"title\">IF</span> <span class=\"title\">EXISTS</span> `<span class=\"title\">addMoney</span>`</span></span><br><span class=\"line\"><span class=\"function\">//如果存在同名存储过程，则删除之<span class=\"title\">mysql</span>&gt;<span class=\"title\">CREATEDEFINER</span>=‘<span class=\"title\">root</span>‘@‘<span class=\"title\">localhost</span>‘<span class=\"title\">PROCEDURE</span>‘<span class=\"title\">addMoney</span>‘<span class=\"params\">(INxidINT(5)</span>,<span class=\"title\">INxmoneyINT</span><span class=\"params\">(6)</span>)<span class=\"title\">mysql</span>&gt;<span class=\"title\">BEGINmysql</span>&gt;<span class=\"title\">UPDATEUSERuSETu</span>.<span class=\"title\">money</span>=<span class=\"title\">u</span>.<span class=\"title\">money</span>+<span class=\"title\">xmoneyWHEREu</span>.<span class=\"title\">id</span>=<span class=\"title\">xid</span>;</span><span class=\"comment\">//分号\";\"不会导致语句执行，因为当前的分割符被定义为</span></span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">END</span>$$   <span class=\"comment\">//终止</span></span><br><span class=\"line\">mysql&gt; DELIMITER ;    <span class=\"comment\">//把分割符改回分号\";\"</span></span><br><span class=\"line\">mysql&gt; call addMoney(<span class=\"number\">5</span>,<span class=\"number\">1000</span>); <span class=\"comment\">//执行存储过程</span></span><br><span class=\"line\">---------- 示例二-----------</span><br><span class=\"line\">mysql&gt; delimiter <span class=\"comment\">//</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">create</span> <span class=\"function\"><span class=\"keyword\">procedure</span> <span class=\"title\">proc_name</span> <span class=\"params\">(<span class=\"keyword\">in</span> parameter integer)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">begin</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">if</span> <span class=\"title\">parameter</span>=0 <span class=\"title\">then</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mysql</span>&gt; <span class=\"title\">select</span> * <span class=\"title\">from</span> <span class=\"title\">user</span> <span class=\"title\">order</span> <span class=\"title\">by</span> <span class=\"title\">id</span> <span class=\"title\">asc</span>;</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">else</span></span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> user <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> id <span class=\"keyword\">desc</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"keyword\">end</span>;</span><br><span class=\"line\">mysql&gt; <span class=\"comment\">//        //此处“//”为终止符</span></span><br><span class=\"line\">mysql&gt; delimiter ;</span><br><span class=\"line\">mysql&gt; show warnings;</span><br><span class=\"line\">mysql&gt; call proc_name(<span class=\"number\">1</span>);</span><br><span class=\"line\">mysql&gt; call proc_name(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"九-修改表的列属性的操作\"><a class=\"markdownIt-Anchor\" href=\"#九-修改表的列属性的操作\"></a> 九、修改表的列属性的操作</h3>\n<ol>\n<li>为了改变列a，从INTEGER改为TINYINT NOT NULL(名字一样)，<br>\n并且改变列b，从CHAR(10)改为CHAR(20)，同时重命名它，从b改为c:</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 MODIFY a TINYINT <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>, CHANGE b c <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>增加一个新TIMESTAMP列，名为d：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">ADD</span> d <span class=\"type\">TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在列d上增加一个索引，并且使列a为主键：</li>\n</ol>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"meta\">ALTER</span> <span class=\"meta\">TABLE</span> t2 <span class=\"meta\">ADD</span> <span class=\"meta\">INDEX</span> (d), <span class=\"meta\">ADD</span> <span class=\"meta\">PRIMARY</span> <span class=\"meta\">KEY</span> (a);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>删除列c：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> c;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>增加一个新的AUTO_INCREMENT整数列，命名为c：</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> t2 <span class=\"keyword\">ADD</span> c <span class=\"type\">INT</span> UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,<span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> (c);</span><br></pre></td></tr></table></figure>\n<p>注意，我们索引了c，因为AUTO_INCREMENT柱必须被索引，并且另外我们声明c为NOT NULL，<br>\n因为索引了的列不能是NULL</p>\n<h3 id=\"十-一个建库和建表以及插入数据的实例\"><a class=\"markdownIt-Anchor\" href=\"#十-一个建库和建表以及插入数据的实例\"></a> 十、一个建库和建表以及插入数据的实例</h3>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> school; //如果存在SCHOOL则删除</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> school; //建立库SCHOOL</span><br><span class=\"line\">use school; //打开库SCHOOL</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> teacher //建立表TEACHER</span><br><span class=\"line\">(</span><br><span class=\"line\">id <span class=\"type\">int</span>(<span class=\"number\">3</span>) auto_increment <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">primary key</span>,</span><br><span class=\"line\"><span class=\"type\">name</span> <span class=\"type\">char</span>(<span class=\"number\">10</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">address <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">default</span> ‘深圳’,</span><br><span class=\"line\">year <span class=\"type\">date</span></span><br><span class=\"line\">); //建表结束</span><br><span class=\"line\">//以下为插入字段</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher <span class=\"keyword\">values</span>(<span class=\"string\">''</span>,<span class=\"string\">'allen'</span>,<span class=\"string\">'大连一中'</span>,<span class=\"string\">'1976-10-10'</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> teacher <span class=\"keyword\">values</span>(<span class=\"string\">''</span>,<span class=\"string\">'jack'</span>,<span class=\"string\">'大连二中'</span>,<span class=\"string\">'1975-12-23'</span>);</span><br><span class=\"line\">如果你在mysql提示符键入上面的命令也可以，但不方便调试。</span><br><span class=\"line\">（<span class=\"number\">1</span>）你可以将以上命令原样写入一个文本文件中，假设为school.<span class=\"keyword\">sql</span>，然后复制到c:\\下，并在DOS状态进入目录\\mysql\\bin，然后键入以下命令：</span><br><span class=\"line\">mysql -uroot -p密码 &lt; c:\\school.<span class=\"keyword\">sql</span></span><br><span class=\"line\">如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。</span><br><span class=\"line\">（<span class=\"number\">2</span>）或者进入命令行后使用 mysql&gt; source c:\\school.<span class=\"keyword\">sql</span>; 也可以将school.<span class=\"keyword\">sql</span>文件导入数据库中。</span><br></pre></td></tr></table></figure>"},{"title":"WebView调用本地的图片选择","date":"2016-05-19T08:21:20.000Z","_content":"\n## Android中WebView调用本地图片选择器\n\n-----\n默认的情况下WebView是不能调用本地图片选择器的，Android的默认浏览器是支持的，因此我可以断定这是完全能做到的\n\n在做的过程中，确实遇到了一些问题，开始以为是特殊手机原因，后来调查才确定是AndroidSDK的版本问题\n\n* Android 3.0 以前的版本\n* Android 3.x 版本\n* Android 4.x 版本\n* Android 5.x 版本\n\n<!-- more -->\n> 主要区别：为 5.x版本以前为ValueCallback&lt;Uri&gt;\n> 从5.x版本返回的是ValueCallback&lt;Uri[]&gt;\n> 因此只用单独一种的话可能会有一些版本不能用，曾经我就犯过这样的错误\n\n具体实现方式，请看下面的代码部分：\n\n### MainActivity.java 代码如下：\n\n```\n\npublic class MainActivity extends Activity {\n\tpublic  ValueCallback<Uri> mUploadMessage;\n\tpublic ValueCallback<Uri[]> mUploadMessageForAndroid5;\n\tpublic final static int FILECHOOSER_RESULTCODE = 1;\n\tpublic final static int FILECHOOSER_RESULTCODE_FOR_ANDORID_5 = 2;\n\tProgressDialog progressBar;\n\tprivate WebView mWebView;\n\tprivate ImageButton btnBack;\n\n\tprivate static final String remoteUrl = \"http://kefu.easemob.com/webim/im.html?tenantId=35\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        initView();\n    }\n\n    @SuppressLint(\"NewApi\") private void initView(){\n    \tmWebView = (WebView) findViewById(R.id.webview);\n    \tbtnBack = (ImageButton) findViewById(R.id.back);\n    \tbtnBack.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinish();\n\t\t\t}\n\t\t});\n    \tprogressBar = new ProgressDialog(this);\n    \tprogressBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n    \tmWebView.getSettings().setJavaScriptEnabled(true);\n    \tmWebView.getSettings().setAppCacheEnabled(false);\n    \tmWebView.getSettings().setDomStorageEnabled(true);\n    \tmWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);\n    \tif(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){\n    \t\tmWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n    \t}\n    \tmWebView.loadUrl(remoteUrl);\n    \tmWebView.setWebViewClient(new WebViewClient(){\n    \t\t@Override\n    \t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n    \t\t\thandler.sendEmptyMessage(0);\n    \t\t\tview.loadUrl(url);\n    \t\t\treturn true;\n    \t\t}\n    \t});\n    \tmWebView.setWebChromeClient(new WebChromeClient(){\n    \t\t@Override\n    \t\tpublic void onProgressChanged(WebView view, int newProgress) {\n    \t\t\tif(newProgress == 100){\n    \t\t\t\thandler.sendEmptyMessage(1);//如果全部载入，隐藏进度对话框\n    \t\t\t}\n\n    \t\t\tsuper.onProgressChanged(view, newProgress);\n    \t\t}\n\n    \t\t//扩展支持alert事件\n    \t\t@Override\n    \t\tpublic boolean onJsAlert(WebView view, String url, String message,\n    \t\t\t\tJsResult result) {\n    \t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(view.getContext());\n    \t\t\tbuilder.setTitle(\"提示\").setMessage(message).setPositiveButton(\"确定\", null);\n    \t\t\tbuilder.setCancelable(false);\n    \t\t\tbuilder.setIcon(R.drawable.ic_launcher);\n    \t\t\tAlertDialog dialog = builder.create();\n    \t\t\tdialog.show();\n    \t\t\tresult.confirm();\n    \t\t\treturn true;\n    \t\t}\n\n    \t\t//扩展浏览器上传文件\n    \t\t//3.0++版本\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n    \t\t//3.0--版本\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n\n    \t\t// For Android > 5.0\n    \t\tpublic boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> uploadMsg, WebChromeClient.FileChooserParams fileChooserParams){\n    \t\t\topenFileChooserImplForAndroid5(uploadMsg);\n    \t\t\treturn true;\n    \t\t}\n\n    \t});\n    }\n\n    private void openFileChooserImpl(ValueCallback<Uri> uploadMsg){\n    \tmUploadMessage = uploadMsg;\n    \tIntent i = new Intent(Intent.ACTION_GET_CONTENT);\n    \ti.addCategory(Intent.CATEGORY_OPENABLE);\n    \ti.setType(\"image/*\");\n    \tstartActivityForResult(Intent.createChooser(i, \"File Chooser\"), FILECHOOSER_RESULTCODE);\n    }\n\n    private void openFileChooserImplForAndroid5(ValueCallback<Uri[]> uploadMsg){\n    \tmUploadMessageForAndroid5 = uploadMsg;\n    \tIntent contentSelectionIntent = new Intent(Intent.ACTION_GET_CONTENT);\n    \tcontentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);\n    \tcontentSelectionIntent.setType(\"image/*\");\n\n    \tIntent chooserIntent = new Intent(Intent.ACTION_CHOOSER);\n    \tchooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);\n    \tchooserIntent.putExtra(Intent.EXTRA_TITLE, \"Image Chooser\");\n    \tstartActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE_FOR_ANDORID_5);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n    \tif(mWebView.canGoBack() && event.getKeyCode() == KeyEvent.KEYCODE_BACK){\n    \t\t//获取历史列表\n    \t\tWebBackForwardList mWebBackForwardList = mWebView.copyBackForwardList();\n    \t\t//判断当前历史列表是否最顶端，其实canGoBack已经判断过\n    \t\tif(mWebBackForwardList.getCurrentIndex() > 0){\n    \t\t\tmWebView.goBack();\n    \t\t\treturn true;\n    \t\t}\n    \t}\n    \treturn super.onKeyDown(keyCode, event);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    \tif(requestCode == FILECHOOSER_RESULTCODE){\n    \t\tif(null == mUploadMessage)\n    \t\t\treturn;\n    \t\tUri result = intent == null || resultCode != RESULT_OK ? null : intent.getData();\n    \t\tmUploadMessage.onReceiveValue(result);\n    \t\tmUploadMessage = null;\n    \t}else if(requestCode == FILECHOOSER_RESULTCODE_FOR_ANDORID_5){\n    \t\tif(null == mUploadMessageForAndroid5)\n    \t\t\treturn;\n    \t\tUri result = (intent == null || resultCode != RESULT_OK) ? null: intent.getData();\n    \t\tif(result != null){\n    \t\t\tmUploadMessageForAndroid5.onReceiveValue(new Uri[]{result});\n    \t\t}else{\n    \t\t\tmUploadMessageForAndroid5.onReceiveValue(new Uri[]{});\n    \t\t}\n    \t\tmUploadMessageForAndroid5 = null;\n    \t}\n    }\n\n    private Handler handler = new Handler(){\n    \tpublic void handleMessage(android.os.Message msg) {//定义一个Handler， 用于处理下载线程与UI间通讯\n    \t\tif(!Thread.currentThread().isInterrupted()){\n    \t\t\tswitch(msg.what){\n    \t\t\tcase 0:\n    \t\t\t\tprogressBar.show();//显示进度框\n    \t\t\t\tbreak;\n    \t\t\tcase 1:\n    \t\t\t\tprogressBar.hide();//隐藏进度对话框不可使用dismiss()、cancel()，否则再次调用show()时,显示的对话框小圆圈不会动\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\tsuper.handleMessage(msg);\n    \t};\n    };\n}\n\n```\n### activity_main.xml的代码\n\n```\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"45dip\"\n        android:background=\"@android:color/darker_gray\"\n        >\n        <ImageButton\n            android:id=\"@+id/back\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@android:drawable/ic_delete\"\n            android:layout_centerVertical=\"true\"\n            />\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"WebViewDemo\"\n            android:layout_centerVertical=\"true\"\n            android:layout_centerHorizontal=\"true\"\n            />\n    </RelativeLayout>\n    <WebView\n        android:id=\"@+id/webview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        />\n</LinearLayout>\n\n```\n\n### 最后在AndroidManifest.xml中不要忘记权限\n\n```\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"/>\n```\n什么？你告诉我你不喜欢自己写？好吧，我提供源码下载。\n\n[Demo源码下载](http://7xpj58.com1.z0.glb.clouddn.com/WebViewTest.zip)\n\n\n到此结束，欢迎提供bug和意见！\n","source":"_posts/WebView调用本地的图片选择.md","raw":"---\ntitle: WebView调用本地的图片选择\ndate: 2016-05-19 16:21:20\ntags: [android, WebView]\ncategories: android\n---\n\n## Android中WebView调用本地图片选择器\n\n-----\n默认的情况下WebView是不能调用本地图片选择器的，Android的默认浏览器是支持的，因此我可以断定这是完全能做到的\n\n在做的过程中，确实遇到了一些问题，开始以为是特殊手机原因，后来调查才确定是AndroidSDK的版本问题\n\n* Android 3.0 以前的版本\n* Android 3.x 版本\n* Android 4.x 版本\n* Android 5.x 版本\n\n<!-- more -->\n> 主要区别：为 5.x版本以前为ValueCallback&lt;Uri&gt;\n> 从5.x版本返回的是ValueCallback&lt;Uri[]&gt;\n> 因此只用单独一种的话可能会有一些版本不能用，曾经我就犯过这样的错误\n\n具体实现方式，请看下面的代码部分：\n\n### MainActivity.java 代码如下：\n\n```\n\npublic class MainActivity extends Activity {\n\tpublic  ValueCallback<Uri> mUploadMessage;\n\tpublic ValueCallback<Uri[]> mUploadMessageForAndroid5;\n\tpublic final static int FILECHOOSER_RESULTCODE = 1;\n\tpublic final static int FILECHOOSER_RESULTCODE_FOR_ANDORID_5 = 2;\n\tProgressDialog progressBar;\n\tprivate WebView mWebView;\n\tprivate ImageButton btnBack;\n\n\tprivate static final String remoteUrl = \"http://kefu.easemob.com/webim/im.html?tenantId=35\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        initView();\n    }\n\n    @SuppressLint(\"NewApi\") private void initView(){\n    \tmWebView = (WebView) findViewById(R.id.webview);\n    \tbtnBack = (ImageButton) findViewById(R.id.back);\n    \tbtnBack.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinish();\n\t\t\t}\n\t\t});\n    \tprogressBar = new ProgressDialog(this);\n    \tprogressBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);\n    \tmWebView.getSettings().setJavaScriptEnabled(true);\n    \tmWebView.getSettings().setAppCacheEnabled(false);\n    \tmWebView.getSettings().setDomStorageEnabled(true);\n    \tmWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);\n    \tif(Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){\n    \t\tmWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);\n    \t}\n    \tmWebView.loadUrl(remoteUrl);\n    \tmWebView.setWebViewClient(new WebViewClient(){\n    \t\t@Override\n    \t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n    \t\t\thandler.sendEmptyMessage(0);\n    \t\t\tview.loadUrl(url);\n    \t\t\treturn true;\n    \t\t}\n    \t});\n    \tmWebView.setWebChromeClient(new WebChromeClient(){\n    \t\t@Override\n    \t\tpublic void onProgressChanged(WebView view, int newProgress) {\n    \t\t\tif(newProgress == 100){\n    \t\t\t\thandler.sendEmptyMessage(1);//如果全部载入，隐藏进度对话框\n    \t\t\t}\n\n    \t\t\tsuper.onProgressChanged(view, newProgress);\n    \t\t}\n\n    \t\t//扩展支持alert事件\n    \t\t@Override\n    \t\tpublic boolean onJsAlert(WebView view, String url, String message,\n    \t\t\t\tJsResult result) {\n    \t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(view.getContext());\n    \t\t\tbuilder.setTitle(\"提示\").setMessage(message).setPositiveButton(\"确定\", null);\n    \t\t\tbuilder.setCancelable(false);\n    \t\t\tbuilder.setIcon(R.drawable.ic_launcher);\n    \t\t\tAlertDialog dialog = builder.create();\n    \t\t\tdialog.show();\n    \t\t\tresult.confirm();\n    \t\t\treturn true;\n    \t\t}\n\n    \t\t//扩展浏览器上传文件\n    \t\t//3.0++版本\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n    \t\t//3.0--版本\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n\n    \t\tpublic void openFileChooser(ValueCallback<Uri> uploadMsg, String acceptType, String capture){\n    \t\t\topenFileChooserImpl(uploadMsg);\n    \t\t}\n\n    \t\t// For Android > 5.0\n    \t\tpublic boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> uploadMsg, WebChromeClient.FileChooserParams fileChooserParams){\n    \t\t\topenFileChooserImplForAndroid5(uploadMsg);\n    \t\t\treturn true;\n    \t\t}\n\n    \t});\n    }\n\n    private void openFileChooserImpl(ValueCallback<Uri> uploadMsg){\n    \tmUploadMessage = uploadMsg;\n    \tIntent i = new Intent(Intent.ACTION_GET_CONTENT);\n    \ti.addCategory(Intent.CATEGORY_OPENABLE);\n    \ti.setType(\"image/*\");\n    \tstartActivityForResult(Intent.createChooser(i, \"File Chooser\"), FILECHOOSER_RESULTCODE);\n    }\n\n    private void openFileChooserImplForAndroid5(ValueCallback<Uri[]> uploadMsg){\n    \tmUploadMessageForAndroid5 = uploadMsg;\n    \tIntent contentSelectionIntent = new Intent(Intent.ACTION_GET_CONTENT);\n    \tcontentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);\n    \tcontentSelectionIntent.setType(\"image/*\");\n\n    \tIntent chooserIntent = new Intent(Intent.ACTION_CHOOSER);\n    \tchooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);\n    \tchooserIntent.putExtra(Intent.EXTRA_TITLE, \"Image Chooser\");\n    \tstartActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE_FOR_ANDORID_5);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n    \tif(mWebView.canGoBack() && event.getKeyCode() == KeyEvent.KEYCODE_BACK){\n    \t\t//获取历史列表\n    \t\tWebBackForwardList mWebBackForwardList = mWebView.copyBackForwardList();\n    \t\t//判断当前历史列表是否最顶端，其实canGoBack已经判断过\n    \t\tif(mWebBackForwardList.getCurrentIndex() > 0){\n    \t\t\tmWebView.goBack();\n    \t\t\treturn true;\n    \t\t}\n    \t}\n    \treturn super.onKeyDown(keyCode, event);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    \tif(requestCode == FILECHOOSER_RESULTCODE){\n    \t\tif(null == mUploadMessage)\n    \t\t\treturn;\n    \t\tUri result = intent == null || resultCode != RESULT_OK ? null : intent.getData();\n    \t\tmUploadMessage.onReceiveValue(result);\n    \t\tmUploadMessage = null;\n    \t}else if(requestCode == FILECHOOSER_RESULTCODE_FOR_ANDORID_5){\n    \t\tif(null == mUploadMessageForAndroid5)\n    \t\t\treturn;\n    \t\tUri result = (intent == null || resultCode != RESULT_OK) ? null: intent.getData();\n    \t\tif(result != null){\n    \t\t\tmUploadMessageForAndroid5.onReceiveValue(new Uri[]{result});\n    \t\t}else{\n    \t\t\tmUploadMessageForAndroid5.onReceiveValue(new Uri[]{});\n    \t\t}\n    \t\tmUploadMessageForAndroid5 = null;\n    \t}\n    }\n\n    private Handler handler = new Handler(){\n    \tpublic void handleMessage(android.os.Message msg) {//定义一个Handler， 用于处理下载线程与UI间通讯\n    \t\tif(!Thread.currentThread().isInterrupted()){\n    \t\t\tswitch(msg.what){\n    \t\t\tcase 0:\n    \t\t\t\tprogressBar.show();//显示进度框\n    \t\t\t\tbreak;\n    \t\t\tcase 1:\n    \t\t\t\tprogressBar.hide();//隐藏进度对话框不可使用dismiss()、cancel()，否则再次调用show()时,显示的对话框小圆圈不会动\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t\tsuper.handleMessage(msg);\n    \t};\n    };\n}\n\n```\n### activity_main.xml的代码\n\n```\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"45dip\"\n        android:background=\"@android:color/darker_gray\"\n        >\n        <ImageButton\n            android:id=\"@+id/back\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:background=\"@android:drawable/ic_delete\"\n            android:layout_centerVertical=\"true\"\n            />\n\n        <TextView\n            android:id=\"@+id/title\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"WebViewDemo\"\n            android:layout_centerVertical=\"true\"\n            android:layout_centerHorizontal=\"true\"\n            />\n    </RelativeLayout>\n    <WebView\n        android:id=\"@+id/webview\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        />\n</LinearLayout>\n\n```\n\n### 最后在AndroidManifest.xml中不要忘记权限\n\n```\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"/>\n```\n什么？你告诉我你不喜欢自己写？好吧，我提供源码下载。\n\n[Demo源码下载](http://7xpj58.com1.z0.glb.clouddn.com/WebViewTest.zip)\n\n\n到此结束，欢迎提供bug和意见！\n","slug":"WebView调用本地的图片选择","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi800c5sifyktvdsb09","content":"<h2 id=\"android中webview调用本地图片选择器\"><a class=\"markdownIt-Anchor\" href=\"#android中webview调用本地图片选择器\"></a> Android中WebView调用本地图片选择器</h2>\n<hr>\n<p>默认的情况下WebView是不能调用本地图片选择器的，Android的默认浏览器是支持的，因此我可以断定这是完全能做到的</p>\n<p>在做的过程中，确实遇到了一些问题，开始以为是特殊手机原因，后来调查才确定是AndroidSDK的版本问题</p>\n<ul>\n<li>Android 3.0 以前的版本</li>\n<li>Android 3.x 版本</li>\n<li>Android 4.x 版本</li>\n<li>Android 5.x 版本</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>主要区别：为 5.x版本以前为ValueCallback&lt;Uri&gt;<br>\n从5.x版本返回的是ValueCallback&lt;Uri[]&gt;<br>\n因此只用单独一种的话可能会有一些版本不能用，曾经我就犯过这样的错误</p>\n</blockquote>\n<p>具体实现方式，请看下面的代码部分：</p>\n<h3 id=\"mainactivityjava-代码如下\"><a class=\"markdownIt-Anchor\" href=\"#mainactivityjava-代码如下\"></a> MainActivity.java 代码如下：</h3>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>  ValueCallback&lt;Uri&gt; mUploadMessage;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ValueCallback&lt;Uri[]&gt; mUploadMessageForAndroid5;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FILECHOOSER_RESULTCODE = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FILECHOOSER_RESULTCODE_FOR_ANDORID_5 = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tProgressDialog progressBar;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> WebView mWebView;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ImageButton btnBack;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String remoteUrl = <span class=\"string\">\"http://kefu.easemob.com/webim/im.html?tenantId=35\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"NewApi\"</span>) <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \tmWebView = (WebView) findViewById(R.id.webview);</span><br><span class=\"line\">    \tbtnBack = (ImageButton) findViewById(R.id.back);</span><br><span class=\"line\">    \tbtnBack.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tfinish();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">    \tprogressBar = <span class=\"keyword\">new</span> ProgressDialog(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    \tprogressBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);</span><br><span class=\"line\">    \tmWebView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setAppCacheEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setDomStorageEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;</span><br><span class=\"line\">    \t\tmWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tmWebView.loadUrl(remoteUrl);</span><br><span class=\"line\">    \tmWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \t\t\tview.loadUrl(url);</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    \tmWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">if</span>(newProgress == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">1</span>);<span class=\"comment\">//如果全部载入，隐藏进度对话框</span></span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">//扩展支持alert事件</span></span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onJsAlert(WebView view, String url, String message,</span><br><span class=\"line\">    \t\t\t\tJsResult result) &#123;</span><br><span class=\"line\">    \t\t\tAlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(view.getContext());</span><br><span class=\"line\">    \t\t\tbuilder.setTitle(<span class=\"string\">\"提示\"</span>).setMessage(message).setPositiveButton(<span class=\"string\">\"确定\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    \t\t\tbuilder.setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    \t\t\tbuilder.setIcon(R.drawable.ic_launcher);</span><br><span class=\"line\">    \t\t\tAlertDialog dialog = builder.create();</span><br><span class=\"line\">    \t\t\tdialog.show();</span><br><span class=\"line\">    \t\t\tresult.confirm();</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">//扩展浏览器上传文件</span></span><br><span class=\"line\">    \t\t<span class=\"comment\">//3.0++版本</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//3.0--版本</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// For Android &gt; 5.0</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onShowFileChooser</span><span class=\"params\">(WebView webView, ValueCallback&lt;Uri[]&gt; uploadMsg, WebChromeClient.FileChooserParams fileChooserParams)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImplForAndroid5(uploadMsg);</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooserImpl</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \tmUploadMessage = uploadMsg;</span><br><span class=\"line\">    \tIntent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">    \ti.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">    \ti.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">    \tstartActivityForResult(Intent.createChooser(i, <span class=\"string\">\"File Chooser\"</span>), FILECHOOSER_RESULTCODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooserImplForAndroid5</span><span class=\"params\">(ValueCallback&lt;Uri[]&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \tmUploadMessageForAndroid5 = uploadMsg;</span><br><span class=\"line\">    \tIntent contentSelectionIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">    \tcontentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">    \tcontentSelectionIntent.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \tIntent chooserIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_CHOOSER);</span><br><span class=\"line\">    \tchooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);</span><br><span class=\"line\">    \tchooserIntent.putExtra(Intent.EXTRA_TITLE, <span class=\"string\">\"Image Chooser\"</span>);</span><br><span class=\"line\">    \tstartActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE_FOR_ANDORID_5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mWebView.canGoBack() &amp;&amp; event.getKeyCode() == KeyEvent.KEYCODE_BACK)&#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//获取历史列表</span></span><br><span class=\"line\">    \t\tWebBackForwardList mWebBackForwardList = mWebView.copyBackForwardList();</span><br><span class=\"line\">    \t\t<span class=\"comment\">//判断当前历史列表是否最顶端，其实canGoBack已经判断过</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(mWebBackForwardList.getCurrentIndex() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    \t\t\tmWebView.goBack();</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">onKeyDown</span><span class=\"params\">(keyCode, event)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(requestCode == FILECHOOSER_RESULTCODE)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mUploadMessage)</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t\tUri result = intent == <span class=\"keyword\">null</span> || resultCode != RESULT_OK ? <span class=\"keyword\">null</span> : intent.getData();</span><br><span class=\"line\">    \t\tmUploadMessage.onReceiveValue(result);</span><br><span class=\"line\">    \t\tmUploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span><span class=\"params\">(requestCode == FILECHOOSER_RESULTCODE_FOR_ANDORID_5)</span></span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mUploadMessageForAndroid5)</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t\tUri result = (intent == <span class=\"keyword\">null</span> || resultCode != RESULT_OK) ? <span class=\"keyword\">null</span>: intent.getData();</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\t\tmUploadMessageForAndroid5.onReceiveValue(<span class=\"keyword\">new</span> Uri[]&#123;result&#125;);</span><br><span class=\"line\">    \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tmUploadMessageForAndroid5.onReceiveValue(<span class=\"keyword\">new</span> Uri[]&#123;&#125;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tmUploadMessageForAndroid5 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(android.os.Message msg)</span> </span>&#123;<span class=\"comment\">//定义一个Handler， 用于处理下载线程与UI间通讯</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">switch</span>(msg.what)&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    \t\t\t\tprogressBar.show();<span class=\"comment\">//显示进度框</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t\t\t\tprogressBar.hide();<span class=\"comment\">//隐藏进度对话框不可使用dismiss()、cancel()，否则再次调用show()时,显示的对话框小圆圈不会动</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"activity_mainxml的代码\"><a class=\"markdownIt-Anchor\" href=\"#activity_mainxml的代码\"></a> activity_main.xml的代码</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"45dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/darker_gray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/back\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:drawable/ic_delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewDemo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后在androidmanifestxml中不要忘记权限\"><a class=\"markdownIt-Anchor\" href=\"#最后在androidmanifestxml中不要忘记权限\"></a> 最后在AndroidManifest.xml中不要忘记权限</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>什么？你告诉我你不喜欢自己写？好吧，我提供源码下载。</p>\n<p><a href=\"http://7xpj58.com1.z0.glb.clouddn.com/WebViewTest.zip\" target=\"_blank\" rel=\"noopener\">Demo源码下载</a></p>\n<p>到此结束，欢迎提供bug和意见！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"android中webview调用本地图片选择器\"><a class=\"markdownIt-Anchor\" href=\"#android中webview调用本地图片选择器\"></a> Android中WebView调用本地图片选择器</h2>\n<hr>\n<p>默认的情况下WebView是不能调用本地图片选择器的，Android的默认浏览器是支持的，因此我可以断定这是完全能做到的</p>\n<p>在做的过程中，确实遇到了一些问题，开始以为是特殊手机原因，后来调查才确定是AndroidSDK的版本问题</p>\n<ul>\n<li>Android 3.0 以前的版本</li>\n<li>Android 3.x 版本</li>\n<li>Android 4.x 版本</li>\n<li>Android 5.x 版本</li>\n</ul>","more":"<blockquote>\n<p>主要区别：为 5.x版本以前为ValueCallback&lt;Uri&gt;<br>\n从5.x版本返回的是ValueCallback&lt;Uri[]&gt;<br>\n因此只用单独一种的话可能会有一些版本不能用，曾经我就犯过这样的错误</p>\n</blockquote>\n<p>具体实现方式，请看下面的代码部分：</p>\n<h3 id=\"mainactivityjava-代码如下\"><a class=\"markdownIt-Anchor\" href=\"#mainactivityjava-代码如下\"></a> MainActivity.java 代码如下：</h3>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>  ValueCallback&lt;Uri&gt; mUploadMessage;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ValueCallback&lt;Uri[]&gt; mUploadMessageForAndroid5;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FILECHOOSER_RESULTCODE = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FILECHOOSER_RESULTCODE_FOR_ANDORID_5 = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tProgressDialog progressBar;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> WebView mWebView;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ImageButton btnBack;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String remoteUrl = <span class=\"string\">\"http://kefu.easemob.com/webim/im.html?tenantId=35\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressLint</span>(<span class=\"string\">\"NewApi\"</span>) <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    \tmWebView = (WebView) findViewById(R.id.webview);</span><br><span class=\"line\">    \tbtnBack = (ImageButton) findViewById(R.id.back);</span><br><span class=\"line\">    \tbtnBack.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tfinish();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">    \tprogressBar = <span class=\"keyword\">new</span> ProgressDialog(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    \tprogressBar.setProgressStyle(ProgressDialog.STYLE_SPINNER);</span><br><span class=\"line\">    \tmWebView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setAppCacheEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setDomStorageEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    \tmWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123;</span><br><span class=\"line\">    \t\tmWebView.getSettings().setMixedContentMode(WebSettings.MIXED_CONTENT_ALWAYS_ALLOW);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tmWebView.loadUrl(remoteUrl);</span><br><span class=\"line\">    \tmWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient()&#123;</span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \t\t\tview.loadUrl(url);</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    \tmWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient()&#123;</span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">if</span>(newProgress == <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">handler</span>.sendEmptyMessage(<span class=\"number\">1</span>);<span class=\"comment\">//如果全部载入，隐藏进度对话框</span></span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">//扩展支持alert事件</span></span><br><span class=\"line\">    \t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> onJsAlert(WebView view, String url, String message,</span><br><span class=\"line\">    \t\t\t\tJsResult result) &#123;</span><br><span class=\"line\">    \t\t\tAlertDialog.Builder builder = <span class=\"keyword\">new</span> AlertDialog.Builder(view.getContext());</span><br><span class=\"line\">    \t\t\tbuilder.setTitle(<span class=\"string\">\"提示\"</span>).setMessage(message).setPositiveButton(<span class=\"string\">\"确定\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    \t\t\tbuilder.setCancelable(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    \t\t\tbuilder.setIcon(R.drawable.ic_launcher);</span><br><span class=\"line\">    \t\t\tAlertDialog dialog = builder.create();</span><br><span class=\"line\">    \t\t\tdialog.show();</span><br><span class=\"line\">    \t\t\tresult.confirm();</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">//扩展浏览器上传文件</span></span><br><span class=\"line\">    \t\t<span class=\"comment\">//3.0++版本</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//3.0--版本</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImpl(uploadMsg);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t\t<span class=\"comment\">// For Android &gt; 5.0</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onShowFileChooser</span><span class=\"params\">(WebView webView, ValueCallback&lt;Uri[]&gt; uploadMsg, WebChromeClient.FileChooserParams fileChooserParams)</span></span>&#123;</span><br><span class=\"line\">    \t\t\topenFileChooserImplForAndroid5(uploadMsg);</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooserImpl</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \tmUploadMessage = uploadMsg;</span><br><span class=\"line\">    \tIntent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">    \ti.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">    \ti.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\">    \tstartActivityForResult(Intent.createChooser(i, <span class=\"string\">\"File Chooser\"</span>), FILECHOOSER_RESULTCODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">openFileChooserImplForAndroid5</span><span class=\"params\">(ValueCallback&lt;Uri[]&gt; uploadMsg)</span></span>&#123;</span><br><span class=\"line\">    \tmUploadMessageForAndroid5 = uploadMsg;</span><br><span class=\"line\">    \tIntent contentSelectionIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">    \tcontentSelectionIntent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">    \tcontentSelectionIntent.setType(<span class=\"string\">\"image/*\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    \tIntent chooserIntent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_CHOOSER);</span><br><span class=\"line\">    \tchooserIntent.putExtra(Intent.EXTRA_INTENT, contentSelectionIntent);</span><br><span class=\"line\">    \tchooserIntent.putExtra(Intent.EXTRA_TITLE, <span class=\"string\">\"Image Chooser\"</span>);</span><br><span class=\"line\">    \tstartActivityForResult(chooserIntent, FILECHOOSER_RESULTCODE_FOR_ANDORID_5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">onKeyDown</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(mWebView.canGoBack() &amp;&amp; event.getKeyCode() == KeyEvent.KEYCODE_BACK)&#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//获取历史列表</span></span><br><span class=\"line\">    \t\tWebBackForwardList mWebBackForwardList = mWebView.copyBackForwardList();</span><br><span class=\"line\">    \t\t<span class=\"comment\">//判断当前历史列表是否最顶端，其实canGoBack已经判断过</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(mWebBackForwardList.getCurrentIndex() &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    \t\t\tmWebView.goBack();</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.<span class=\"title\">onKeyDown</span><span class=\"params\">(keyCode, event)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(requestCode == FILECHOOSER_RESULTCODE)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mUploadMessage)</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t\tUri result = intent == <span class=\"keyword\">null</span> || resultCode != RESULT_OK ? <span class=\"keyword\">null</span> : intent.getData();</span><br><span class=\"line\">    \t\tmUploadMessage.onReceiveValue(result);</span><br><span class=\"line\">    \t\tmUploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;<span class=\"function\"><span class=\"keyword\">else</span> <span class=\"title\">if</span><span class=\"params\">(requestCode == FILECHOOSER_RESULTCODE_FOR_ANDORID_5)</span></span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == mUploadMessageForAndroid5)</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t\tUri result = (intent == <span class=\"keyword\">null</span> || resultCode != RESULT_OK) ? <span class=\"keyword\">null</span>: intent.getData();</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(result != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\t\tmUploadMessageForAndroid5.onReceiveValue(<span class=\"keyword\">new</span> Uri[]&#123;result&#125;);</span><br><span class=\"line\">    \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tmUploadMessageForAndroid5.onReceiveValue(<span class=\"keyword\">new</span> Uri[]&#123;&#125;);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tmUploadMessageForAndroid5 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler <span class=\"keyword\">handler</span> = <span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(android.os.Message msg)</span> </span>&#123;<span class=\"comment\">//定义一个Handler， 用于处理下载线程与UI间通讯</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(!Thread.currentThread().isInterrupted())&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">switch</span>(msg.what)&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    \t\t\t\tprogressBar.show();<span class=\"comment\">//显示进度框</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    \t\t\t\tprogressBar.hide();<span class=\"comment\">//隐藏进度对话框不可使用dismiss()、cancel()，否则再次调用show()时,显示的对话框小圆圈不会动</span></span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\t\t&#125;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">    \t&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"activity_mainxml的代码\"><a class=\"markdownIt-Anchor\" href=\"#activity_mainxml的代码\"></a> activity_main.xml的代码</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"45dip\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/darker_gray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/back\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:drawable/ic_delete\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">\"WebViewDemo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_centerHorizontal</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/webview\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"最后在androidmanifestxml中不要忘记权限\"><a class=\"markdownIt-Anchor\" href=\"#最后在androidmanifestxml中不要忘记权限\"></a> 最后在AndroidManifest.xml中不要忘记权限</h3>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.WRITE_EXTERNAL_STORAGE\"</span>/&gt;</span><br><span class=\"line\">&lt;uses-permission android:<span class=\"attribute\">name</span>=<span class=\"string\">\"android.permission.MOUNT_UNMOUNT_FILESYSTEMS\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>什么？你告诉我你不喜欢自己写？好吧，我提供源码下载。</p>\n<p><a href=\"http://7xpj58.com1.z0.glb.clouddn.com/WebViewTest.zip\" target=\"_blank\" rel=\"noopener\">Demo源码下载</a></p>\n<p>到此结束，欢迎提供bug和意见！</p>"},{"title":"linux之cut用法","date":"2016-08-29T08:10:16.000Z","_content":"\ncut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。\n\n<!-- more -->\n(1) 其语法格式为：\n<font color=\"red\">cut [-bn] [file] 或 cut [-c] [file] 或者 cut [-df] [file]</font>\n\n使用说明\ncut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</br>\n如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。\n\n主要参数\n* -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。\n* -c ：以字符为单位进行分割。\n* -d ：自定义分隔符，默认为制表符。\n* -f  ：与-d一起使用，指定显示哪个区域。\n* -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br />范围之内，该字符将被写出；否则，该字符将被排除。\n\n（2）cut一般以什么为依据呢? 也就是说，我怎么告诉cut我想定位到的剪切内容呢?\n\ncut命令主要是接受三个定位方法：\n第一，字节（bytes），用选项-b\n第二，字符（characters），用选项-c\n第三，域（fields），用选项-f\n\n3）以“字节”定位\n举个例子吧，当你执行ps命令时，会输出类似如下的内容：\n[rocrocket@rocrocket programming]$ who\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n如果我们想提取每一行的第3个字节，就这样：\n[rocrocket@rocrocket programming]$ who|cut -b 3\nc\nc\nc\n\n4） 如果“字节”定位中，我想提取第3，第4、第5和第8个字节，怎么办?\n-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：\n[rocrocket@rocrocket programming]$ who|cut -b 3-5,8\ncroe\ncroe\ncroe\n但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。可不能颠倒定位的顺序哦。这个例子就可以说明这个问题：\n\n[rocrocket@rocrocket programming]$ who|cut -b 8,3-5\ncroe\ncroe\ncroe\n（5） 还有哪些类似“3-5”这样的小技巧，列举一下吧!\n\n[rocrocket@rocrocket programming]$ who\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n[rocrocket@rocrocket programming]$ who|cut -b -3\nroc\nroc\nroc\n[rocrocket@rocrocket programming]$ who|cut -b 3-\ncrocket :0           2009-01-08 11:07\ncrocket pts/0        2009-01-08 11:23 (:0.0)\ncrocket pts/1        2009-01-08 14:15 (:0.0)\n想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。\n如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。看：\n\n[rocrocket@rocrocket programming]$ who|cut -b -3,3-\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n（6）给个以字符为定位标志的最简单的例子吧!\n\n下面例子你似曾相识，提取第3，第4，第5和第8个字符：\n\n[rocrocket@rocrocket programming]$ who|cut -c 3-5,8\ncroe\ncroe\ncroe\n不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt\n星期一\n星期二\n星期三\n星期四\n[rocrocket@rocrocket programming]$ cut -b 3 cut_ch.txt\n�\n�\n�\n�\n[rocrocket@rocrocket programming]$ cut -c 3 cut_ch.txt\n一\n二\n三\n四\n看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。\n既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。\n当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。例子如下：\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -b 2\n�\n�\n�\n�\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 2\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 1,2,3\n星\n星\n星\n星\n（7）域是怎么回事呢？解释解释:)\n\n为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。\n\n我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！\n\n以/etc/passwd的前五行内容为例：\n\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1\nroot\nbin\ndaemon\nadm\nlp\n看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！\n当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：\n\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5\nroot:0:0:root\nbin:1:1:bin\ndaemon:2:2:daemon\nadm:3:4:adm\nlp:4:7:lp\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7\nroot:0:0:root:/bin/bash\nbin:1:1:bin:/sbin/nologin\ndaemon:2:2:daemon:/sbin/nologin\nadm:3:4:adm:/sbin/nologin\nlp:4:7:lp:/sbin/nologin\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f -2\nroot:x\nbin:x\ndaemon:x\nadm:x\nlp:x\n（8）如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？\n\n有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt\nthis is tab finish.\nthis is several space      finish.\n[rocrocket@rocrocket programming]$ sed -n l tab_space.txt\nthis is tab\\tfinish.$\nthis is several space      finish.$\n看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。\n通过此方法即可以判断制表符和空格了。\n注意，上面sed -n后面的字符是L的小写字母哦，不要看错。\n\n（9）我应该在cut -d中用什么符号来设定制表符或空格呢?\n\n其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。\n\n如果你设定一个空格为间隔符，那么就这样：\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ' ' -f 1\nthis\nthis\n注意，两个单引号之间可确实要有一个空格哦，不能偷懒。\n而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ' ' -f 1\ncut: the delimiter must be a single character\nTry `cut --help' for more information.\n\n（10）cut有哪些缺陷和不足？\n\n猜出来了吧？对，就是在处理多空格时。\n如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容\n","source":"_posts/linux之cut用法.md","raw":"---\ntitle: linux之cut用法\ndate: 2016-08-29 16:10:16\ntags: [linux]\ncategories: linux\n---\n\ncut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。\n\n<!-- more -->\n(1) 其语法格式为：\n<font color=\"red\">cut [-bn] [file] 或 cut [-c] [file] 或者 cut [-df] [file]</font>\n\n使用说明\ncut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</br>\n如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。\n\n主要参数\n* -b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。\n* -c ：以字符为单位进行分割。\n* -d ：自定义分隔符，默认为制表符。\n* -f  ：与-d一起使用，指定显示哪个区域。\n* -n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br />范围之内，该字符将被写出；否则，该字符将被排除。\n\n（2）cut一般以什么为依据呢? 也就是说，我怎么告诉cut我想定位到的剪切内容呢?\n\ncut命令主要是接受三个定位方法：\n第一，字节（bytes），用选项-b\n第二，字符（characters），用选项-c\n第三，域（fields），用选项-f\n\n3）以“字节”定位\n举个例子吧，当你执行ps命令时，会输出类似如下的内容：\n[rocrocket@rocrocket programming]$ who\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n如果我们想提取每一行的第3个字节，就这样：\n[rocrocket@rocrocket programming]$ who|cut -b 3\nc\nc\nc\n\n4） 如果“字节”定位中，我想提取第3，第4、第5和第8个字节，怎么办?\n-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：\n[rocrocket@rocrocket programming]$ who|cut -b 3-5,8\ncroe\ncroe\ncroe\n但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。可不能颠倒定位的顺序哦。这个例子就可以说明这个问题：\n\n[rocrocket@rocrocket programming]$ who|cut -b 8,3-5\ncroe\ncroe\ncroe\n（5） 还有哪些类似“3-5”这样的小技巧，列举一下吧!\n\n[rocrocket@rocrocket programming]$ who\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n[rocrocket@rocrocket programming]$ who|cut -b -3\nroc\nroc\nroc\n[rocrocket@rocrocket programming]$ who|cut -b 3-\ncrocket :0           2009-01-08 11:07\ncrocket pts/0        2009-01-08 11:23 (:0.0)\ncrocket pts/1        2009-01-08 14:15 (:0.0)\n想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。\n如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。看：\n\n[rocrocket@rocrocket programming]$ who|cut -b -3,3-\nrocrocket :0           2009-01-08 11:07\nrocrocket pts/0        2009-01-08 11:23 (:0.0)\nrocrocket pts/1        2009-01-08 14:15 (:0.0)\n（6）给个以字符为定位标志的最简单的例子吧!\n\n下面例子你似曾相识，提取第3，第4，第5和第8个字符：\n\n[rocrocket@rocrocket programming]$ who|cut -c 3-5,8\ncroe\ncroe\ncroe\n不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt\n星期一\n星期二\n星期三\n星期四\n[rocrocket@rocrocket programming]$ cut -b 3 cut_ch.txt\n�\n�\n�\n�\n[rocrocket@rocrocket programming]$ cut -c 3 cut_ch.txt\n一\n二\n三\n四\n看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。\n既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。\n当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。例子如下：\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -b 2\n�\n�\n�\n�\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 2\n\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 1,2,3\n星\n星\n星\n星\n（7）域是怎么回事呢？解释解释:)\n\n为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。\n\n我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！\n\n以/etc/passwd的前五行内容为例：\n\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1\nroot\nbin\ndaemon\nadm\nlp\n看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！\n当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：\n\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5\nroot:0:0:root\nbin:1:1:bin\ndaemon:2:2:daemon\nadm:3:4:adm\nlp:4:7:lp\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7\nroot:0:0:root:/bin/bash\nbin:1:1:bin:/sbin/nologin\ndaemon:2:2:daemon:/sbin/nologin\nadm:3:4:adm:/sbin/nologin\nlp:4:7:lp:/sbin/nologin\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f -2\nroot:x\nbin:x\ndaemon:x\nadm:x\nlp:x\n（8）如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？\n\n有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt\nthis is tab finish.\nthis is several space      finish.\n[rocrocket@rocrocket programming]$ sed -n l tab_space.txt\nthis is tab\\tfinish.$\nthis is several space      finish.$\n看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。\n通过此方法即可以判断制表符和空格了。\n注意，上面sed -n后面的字符是L的小写字母哦，不要看错。\n\n（9）我应该在cut -d中用什么符号来设定制表符或空格呢?\n\n其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。\n\n如果你设定一个空格为间隔符，那么就这样：\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ' ' -f 1\nthis\nthis\n注意，两个单引号之间可确实要有一个空格哦，不能偷懒。\n而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。\n\n[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ' ' -f 1\ncut: the delimiter must be a single character\nTry `cut --help' for more information.\n\n（10）cut有哪些缺陷和不足？\n\n猜出来了吧？对，就是在处理多空格时。\n如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容\n","slug":"linux之cut用法","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi900casifysb2vip90","content":"<p>cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。</p>\n<a id=\"more\"></a>\n<p>(1) 其语法格式为：<br>\n<font color=\"red\">cut [-bn] [file] 或 cut [-c] [file] 或者 cut [-df] [file]</font></p>\n<p>使用说明<br>\ncut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br><br>\n如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p>\n<p>主要参数</p>\n<ul>\n<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>\n<li>-c ：以字符为单位进行分割。</li>\n<li>-d ：自定义分隔符，默认为制表符。</li>\n<li>-f  ：与-d一起使用，指定显示哪个区域。</li>\n<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</li>\n</ul>\n<p>（2）cut一般以什么为依据呢? 也就是说，我怎么告诉cut我想定位到的剪切内容呢?</p>\n<p>cut命令主要是接受三个定位方法：<br>\n第一，字节（bytes），用选项-b<br>\n第二，字符（characters），用选项-c<br>\n第三，域（fields），用选项-f</p>\n<p>3）以“字节”定位<br>\n举个例子吧，当你执行ps命令时，会输出类似如下的内容：<br>\n[rocrocket@rocrocket programming]$ who<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n如果我们想提取每一行的第3个字节，就这样：<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3<br>\nc<br>\nc<br>\nc</p>\n<p>4） 如果“字节”定位中，我想提取第3，第4、第5和第8个字节，怎么办?<br>\n-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3-5,8<br>\ncroe<br>\ncroe<br>\ncroe<br>\n但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。可不能颠倒定位的顺序哦。这个例子就可以说明这个问题：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -b 8,3-5<br>\ncroe<br>\ncroe<br>\ncroe<br>\n（5） 还有哪些类似“3-5”这样的小技巧，列举一下吧!</p>\n<p>[rocrocket@rocrocket programming]$ who<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n[rocrocket@rocrocket programming]$ who|cut -b -3<br>\nroc<br>\nroc<br>\nroc<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3-<br>\ncrocket :0           2009-01-08 11:07<br>\ncrocket pts/0        2009-01-08 11:23 (:0.0)<br>\ncrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。<br>\n如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。看：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -b -3,3-<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n（6）给个以字符为定位标志的最简单的例子吧!</p>\n<p>下面例子你似曾相识，提取第3，第4，第5和第8个字符：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -c 3-5,8<br>\ncroe<br>\ncroe<br>\ncroe<br>\n不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt<br>\n星期一<br>\n星期二<br>\n星期三<br>\n星期四<br>\n[rocrocket@rocrocket programming]$ cut -b 3 cut_ch.txt<br>\n�<br>\n�<br>\n�<br>\n�<br>\n[rocrocket@rocrocket programming]$ cut -c 3 cut_ch.txt<br>\n一<br>\n二<br>\n三<br>\n四<br>\n看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。<br>\n既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。<br>\n当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。例子如下：</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -b 2<br>\n�<br>\n�<br>\n�<br>\n�<br>\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 2</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 1,2,3<br>\n星<br>\n星<br>\n星<br>\n星<br>\n（7）域是怎么回事呢？解释解释:)</p>\n<p>为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。</p>\n<p>我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！</p>\n<p>以/etc/passwd的前五行内容为例：</p>\n<p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5<br>\nroot❌0:0:root:/root:/bin/bash<br>\nbin❌1:1:bin:/bin:/sbin/nologin<br>\ndaemon❌2:2:daemon:/sbin:/sbin/nologin<br>\nadm❌3:4:adm:/var/adm:/sbin/nologin<br>\nlp❌4:7:lp:/var/spool/lpd:/sbin/nologin<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1<br>\nroot<br>\nbin<br>\ndaemon<br>\nadm<br>\nlp<br>\n看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！<br>\n当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：</p>\n<p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5<br>\nroot:0:0:root<br>\nbin:1:1:bin<br>\ndaemon:2:2:daemon<br>\nadm:3:4:adm<br>\nlp:4:7:lp<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7<br>\nroot:0:0:root:/bin/bash<br>\nbin:1:1:bin:/sbin/nologin<br>\ndaemon:2:2:daemon:/sbin/nologin<br>\nadm:3:4:adm:/sbin/nologin<br>\nlp:4:7:lp:/sbin/nologin<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f -2<br>\nroot:x<br>\nbin:x<br>\ndaemon:x<br>\nadm:x<br>\nlp:x<br>\n（8）如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？</p>\n<p>有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt<br>\nthis is tab finish.<br>\nthis is several space      finish.<br>\n[rocrocket@rocrocket programming]$ sed -n l tab_space.txt<br>\nthis is tab\\tfinish.<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>s</mi><mi>h</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\nthis is several space      finish.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">.</span></span></span></span><br>\n看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。<br>\n通过此方法即可以判断制表符和空格了。<br>\n注意，上面sed -n后面的字符是L的小写字母哦，不要看错。</p>\n<p>（9）我应该在cut -d中用什么符号来设定制表符或空格呢?</p>\n<p>其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。</p>\n<p>如果你设定一个空格为间隔符，那么就这样：</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>\nthis<br>\nthis<br>\n注意，两个单引号之间可确实要有一个空格哦，不能偷懒。<br>\n而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>\ncut: the delimiter must be a single character<br>\nTry `cut --help’ for more information.</p>\n<p>（10）cut有哪些缺陷和不足？</p>\n<p>猜出来了吧？对，就是在处理多空格时。<br>\n如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容</p>\n","site":{"data":{}},"excerpt":"<p>cut是一个选取命令，就是将一段数据经过分析，取出我们想要的。一般来说，选取信息通常是针对“行”来进行分析的，并不是整篇信息分析的。</p>","more":"<p>(1) 其语法格式为：<br>\n<font color=\"red\">cut [-bn] [file] 或 cut [-c] [file] 或者 cut [-df] [file]</font></p>\n<p>使用说明<br>\ncut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。<br><br>\n如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p>\n<p>主要参数</p>\n<ul>\n<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>\n<li>-c ：以字符为单位进行分割。</li>\n<li>-d ：自定义分隔符，默认为制表符。</li>\n<li>-f  ：与-d一起使用，指定显示哪个区域。</li>\n<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除。</li>\n</ul>\n<p>（2）cut一般以什么为依据呢? 也就是说，我怎么告诉cut我想定位到的剪切内容呢?</p>\n<p>cut命令主要是接受三个定位方法：<br>\n第一，字节（bytes），用选项-b<br>\n第二，字符（characters），用选项-c<br>\n第三，域（fields），用选项-f</p>\n<p>3）以“字节”定位<br>\n举个例子吧，当你执行ps命令时，会输出类似如下的内容：<br>\n[rocrocket@rocrocket programming]$ who<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n如果我们想提取每一行的第3个字节，就这样：<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3<br>\nc<br>\nc<br>\nc</p>\n<p>4） 如果“字节”定位中，我想提取第3，第4、第5和第8个字节，怎么办?<br>\n-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3-5,8<br>\ncroe<br>\ncroe<br>\ncroe<br>\n但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。可不能颠倒定位的顺序哦。这个例子就可以说明这个问题：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -b 8,3-5<br>\ncroe<br>\ncroe<br>\ncroe<br>\n（5） 还有哪些类似“3-5”这样的小技巧，列举一下吧!</p>\n<p>[rocrocket@rocrocket programming]$ who<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n[rocrocket@rocrocket programming]$ who|cut -b -3<br>\nroc<br>\nroc<br>\nroc<br>\n[rocrocket@rocrocket programming]$ who|cut -b 3-<br>\ncrocket :0           2009-01-08 11:07<br>\ncrocket pts/0        2009-01-08 11:23 (:0.0)<br>\ncrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。<br>\n如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。看：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -b -3,3-<br>\nrocrocket :0           2009-01-08 11:07<br>\nrocrocket pts/0        2009-01-08 11:23 (:0.0)<br>\nrocrocket pts/1        2009-01-08 14:15 (:0.0)<br>\n（6）给个以字符为定位标志的最简单的例子吧!</p>\n<p>下面例子你似曾相识，提取第3，第4，第5和第8个字符：</p>\n<p>[rocrocket@rocrocket programming]$ who|cut -c 3-5,8<br>\ncroe<br>\ncroe<br>\ncroe<br>\n不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt<br>\n星期一<br>\n星期二<br>\n星期三<br>\n星期四<br>\n[rocrocket@rocrocket programming]$ cut -b 3 cut_ch.txt<br>\n�<br>\n�<br>\n�<br>\n�<br>\n[rocrocket@rocrocket programming]$ cut -c 3 cut_ch.txt<br>\n一<br>\n二<br>\n三<br>\n四<br>\n看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。<br>\n既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。<br>\n当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。例子如下：</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -b 2<br>\n�<br>\n�<br>\n�<br>\n�<br>\n[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 2</p>\n<p>[rocrocket@rocrocket programming]$ cat cut_ch.txt |cut -nb 1,2,3<br>\n星<br>\n星<br>\n星<br>\n星<br>\n（7）域是怎么回事呢？解释解释:)</p>\n<p>为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。</p>\n<p>我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！</p>\n<p>以/etc/passwd的前五行内容为例：</p>\n<p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5<br>\nroot❌0:0:root:/root:/bin/bash<br>\nbin❌1:1:bin:/bin:/sbin/nologin<br>\ndaemon❌2:2:daemon:/sbin:/sbin/nologin<br>\nadm❌3:4:adm:/var/adm:/sbin/nologin<br>\nlp❌4:7:lp:/var/spool/lpd:/sbin/nologin<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1<br>\nroot<br>\nbin<br>\ndaemon<br>\nadm<br>\nlp<br>\n看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！<br>\n当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：</p>\n<p>[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5<br>\nroot:0:0:root<br>\nbin:1:1:bin<br>\ndaemon:2:2:daemon<br>\nadm:3:4:adm<br>\nlp:4:7:lp<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7<br>\nroot:0:0:root:/bin/bash<br>\nbin:1:1:bin:/sbin/nologin<br>\ndaemon:2:2:daemon:/sbin/nologin<br>\nadm:3:4:adm:/sbin/nologin<br>\nlp:4:7:lp:/sbin/nologin<br>\n[rocrocket@rocrocket programming]$ cat /etc/passwd|head -n 5|cut -d : -f -2<br>\nroot:x<br>\nbin:x<br>\ndaemon:x<br>\nadm:x<br>\nlp:x<br>\n（8）如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？</p>\n<p>有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt<br>\nthis is tab finish.<br>\nthis is several space      finish.<br>\n[rocrocket@rocrocket programming]$ sed -n l tab_space.txt<br>\nthis is tab\\tfinish.<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>a</mi><mi>l</mi><mi>s</mi><mi>p</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>f</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>s</mi><mi>h</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\nthis is several space      finish.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">t</span><span class=\"mord mathdefault\">h</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">p</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">n</span><span class=\"mord mathdefault\">i</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">h</span><span class=\"mord\">.</span></span></span></span><br>\n看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。<br>\n通过此方法即可以判断制表符和空格了。<br>\n注意，上面sed -n后面的字符是L的小写字母哦，不要看错。</p>\n<p>（9）我应该在cut -d中用什么符号来设定制表符或空格呢?</p>\n<p>其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。</p>\n<p>如果你设定一个空格为间隔符，那么就这样：</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>\nthis<br>\nthis<br>\n注意，两个单引号之间可确实要有一个空格哦，不能偷懒。<br>\n而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。</p>\n<p>[rocrocket@rocrocket programming]$ cat tab_space.txt |cut -d ’ ’ -f 1<br>\ncut: the delimiter must be a single character<br>\nTry `cut --help’ for more information.</p>\n<p>（10）cut有哪些缺陷和不足？</p>\n<p>猜出来了吧？对，就是在处理多空格时。<br>\n如果文件里面的某些域是由若干个空格来间隔的，那么用cut就有点麻烦了，因为cut只擅长处理“以一个字符间隔”的文本内容</p>"},{"title":"iPhone开发-常用组件","date":"2017-11-15T09:35:41.000Z","_content":"\n### 1. UIButton\n\n```\n CGRect frame = CGRectMake(0, 100, 80, 40);\n UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n button.frame = frame;\n [button setTitle:@\"click\" forState: UIControlStateNormal];\n button.backgroundColor = [UIColor greenColor];\n [button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];\n [self.view addSubview:button];\n\n -(void) buttonClicked:(UIButton *)button\n {\n   //添加code\n }\n```\n### 2. UIAlertView\n\n```\nUIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"标题\" message:@\"你的内存已满\" delegate:self cancelButtonTitle:@\"取消\" otherButtonTitles:nil, nil];\n   [alert show];\n\n```\n\n\n<!-- more -->\n### 3. UILabel\n\n```\nUILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 10, 200, 34)];\nlabel.textColor =[UIColor grayColor];\nlabel.font =[UIFont systemFontOfSize:18];\nlabel.text =@\"创建一个文本\";\nlabel.lineBreakMode = NSLineBreakByCharWrapping;\nlabel.numberOfLines = 0;\nlabel.backgroundColor =[UIColor grayColor];\nlabel.textAlignment = NSTextAlignmentCenter;\n```\n\n### 4. UITextField\n\n```\n\nUITextField *textField =[[UITextField alloc]initWithFrame:CGRectMake(10, 44, self.view.bounds.size.width-20,30)];\n textField.borderStyle = UITextBorderStyleRoundedRect;\n textField.placeholder = @\"请输入用户名\";\n textField.clearButtonMode = UITextFieldViewModeAlways;\n textField.delegate = self;\n textField.textColor = [UIColor grayColor];\n textField.keyboardType = UIKeyboardTypeDefault;\n textField.returnKeyType = UIReturnKeyDone;\n textField.clearButtonMode = UITextFieldViewModeWhileEditing;\n```\n\n### 5.UISlider\n\n```\nUISlider *slider =[[UISlider alloc]initWithFrame:CGRectMake(0, 100, 200, 33)];\n  [slider addTarget:self action:@selector(onChangeHandler:) forControlEvents:UIControlEventValueChanged];\n  [self.view addSubview:slider];\n\n-(void) onChangeHandler:(UISlider *) slider\n{\n    float value = slider.value;\n}\n```\n\n### 6.UISegmentedControl\n\n```\nUISegmentedControl *seg= [[UISegmentedControl alloc]initWithItems:@[@\"骑士\",@\"勇士\"]];\n   [self.view addSubview:seg];\n   seg.frame =CGRectMake(20, 200, 200, 33);\n   [seg addTarget:self action:@selector(onSelect:) forControlEvents:UIControlEventValueChanged];\n\n-(void) onSelect:(UISegmentedControl *) control\n{\n   NSInteger index = control.selectedSegmentIndex;\n    if (index==0)\n    {\n        NSLog(@\"点击骑士\");\n    }\n    else\n    {\n        NSLog(@\"点击勇士\");\n    }\n\n}\n\n```\n\n### 7.UIViewImage\n\n```\nUIImageView *imageView =[[UIImageView alloc]initWithImage:[UIImage imageNamed:@\"head.png\" ]];\nimageView.layer.cornerRadius = 4.0;\n```\n### 8.UISwitch\n\n```\nUISwitch *uiSwitch=[[UISwitch alloc]initWithFrame:CGRectMake(20, 200, 100, 33)];\n   [self.view addSubview:uiSwitch];\n   [uiSwitch setOn:YES animated:YES];\n   [uiSwitch addTarget:self action:@selector(onChange:) forControlEvents:UIControlEventValueChanged];\n\n-(void) onChange:(UISwitch *) uiswitch\n{\n  BOOL isOn =  uiswitch.isOn;\n  //两种方式输出真假值\n  NSLog(@\"%@\",  [NSNumber numberWithBool:isOn].stringValue);\n  NSLog(@\"%@\",  isOn ? @\"YES\":@\"NO\");\n}\n\n```\n\n### 9.UIActionSheet\n\n```\nUIActionSheet *actionSheet = [[UIActionSheet alloc]initWithTitle:nil delegate:self cancelButtonTitle:@\"取消\" destructiveButtonTitle:@\"微信\" otherButtonTitles:@\"新浪微博\",@\"腾讯微博\", nil];\nactionSheet.actionSheetStyle = UIActionSheetStyleDefault;\n[actionSheet showInView:self.view];\n\n-(void) actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if(buttonIndex == 0)\n    {\n        NSLog(@\"微信\");\n    }\n    else if(buttonIndex ==1)\n    {\n        NSLog(@\"新浪微博\");\n    }\n    else if(buttonIndex == 2)\n    {\n        NSLog(@\"腾讯微博\");\n    }\n}\n\n```\n### 10.UIWindow\n\n```\nUIWindow *window =[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n```\n\n### 11.UIBarButtonItem\n\n```\n//左边\nself.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"话题\" style:UIBarButtonItemStylePlain target:self action:@selector(showMenu)];\n //右边\nself.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"话题\" style:UIBarButtonItemStylePlain target:self action:@selector(showMenu)];\n\n-(void) showMenu\n{\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"ShowMenuCmd\" object:nil];\n}\n```\n\n### 12.UIWebView\n  UIWebView 的本地加载HTML页面\n```\nCGRect rect = [UIScreen mainScreen].bounds;\nUIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, rect .size.width,rect.size.height)];\n[self.view addSubview:self.webView];\n[webView setUserInteractionEnabled:YES];//是否支持交互\nNSString *path =  [[NSBundle mainBundle] pathForResource:@\"index\" ofType:@\"html\"];\nNSURL *url = [NSURL fileURLWithPath:path];\n[webView loadRequest:[NSURLRequest requestWithURL:url]];   \nwebView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;\n```\n### 13.UIPickerView\n选择器创建与代理设置\n\n```\nNSArray *pickerArray =@[@\"勇士\",@\"火箭\",@\"湖人\",@\"雷霆\"];\nUIPickerView *pickerView =[[UIPickerView alloc]init];\n[self.view addSubview:self.pickerView];\npickerView.frame =(CGRect){0,self.view.frame.size.height-160,320,180};\npickerView.delegate = self;//设置代理\npickerView.dataSource = self;//设置代理\npickerView.backgroundColor = [UIColor orangeColor];\n\n - (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView\n{\n    return 1;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component\n{\n    return [pickerArray count];\n}\n-(NSString *) pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component\n{\n  return [pickerArray objectAtIndex:row];\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component\n{\n  NSLog(@\"点击选择了\");\n}\n```\n\n### 14.UIScrollView\n\n```\nUIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 40, 200, 100)];\nscrollView.backgroundColor =  [UIColor blueColor];\n\n    CGFloat y=20;\n    for (int i=0; i<30;i++)\n    {\n        UILabel *lab = [[UILabel alloc]init];\n        lab.text = @\"第一章 约定的开始\";\n        [lab sizeToFit];\n        CGRect f= lab.frame;\n        f.origin.y = i*22;\n        lab.frame =f;\n        [scrollView addSubview:lab];\n        y += lab.bounds.size.height +10;\n    }\n    CGSize sz=scrollView.bounds.size;\n    sz.height = y;\n    scrollView.contentSize = sz;\n```\n\n### 15.UIProgressView\n  进度条\n```\nUIProgressView *progressView =[[UIProgressView alloc]initWithProgressViewStyle:UIProgressViewStyleDefault];\n  [self.view addSubview:progressView];\n  [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(onTimer:) userInfo:progressView repeats:YES];\n\n-(void) onTimer:(NSTimer *) timer\n{\nUIProgressView *progress =(UIProgressView *) timer.userInfo;\n  progress.progress += 0.1;\n  if(progress.progress == 1.0)\n  {\n      progress.progress =0;\n  }\n}\n```\n\n### 16.UIActivityIndicatorView\n活动指示器\n```\nUIActivityIndicatorView *activityView= [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];\n  [self.view addSubview:activityView];\n  [activityView startAnimating];//播放动画\n  [activityView stopAnimating];//停止动画\n  [activityView isAnimating];//判断是否在播放动画\n  self.view.backgroundColor=[UIColor orangeColor];//背景设置颜色方便预览该组件\n```\n\n### 17.UINavigationBar\n  UINavigationBar 导航栏 需要抱一个导航栏目UINavigationItem\n\n```\nUINavigationBar *navbar =[[UINavigationBar alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44)];\n [self.view addSubview:navbar];\n UIBarButtonItem *leftButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"菜单\" style:UIBarButtonItemStylePlain target:self action:@selector(onSelectLeft:)];\n UIBarButtonItem *rightButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"设置\" style:UIBarButtonItemStylePlain target:self action:@selector(onSelectRight:)];\n UINavigationItem *navigationItem =[[UINavigationItem alloc]initWithTitle:@\"我爱IOS\"];\n [navbar pushNavigationItem:navigationItem animated:NO];\n [navigationItem setLeftBarButtonItem:leftButtonItem];\n [navigationItem setRightBarButtonItem:rightButtonItem];\n\n-(void) onSelectLeft:(UIBarButtonItem *) button\n{\n   NSLog(@\"点击左边\");\n}\n\n-(void) onSelectRight:(UIBarButtonItem *) button\n{\n   NSLog(@\"点击右边\");\n}\n```\n\n### 18.UITabBar\n\n```\nUITabBar *tabBar =[[UITabBar alloc]initWithFrame:CGRectMake(0, [UIScreen mainScreen].bounds.size.height-44, self.view.frame.size.width, 44)];\n[self.view addSubview:tabBar];\nUITabBarItem *firstBarItem =[[UITabBarItem alloc]initWithTitle:@\"首页\" image:nil tag:1];\nUITabBarItem *secondBarItem =[[UITabBarItem alloc]initWithTitle:@\"我的\" image:nil tag:2];\n[tabBar setItems:@[firstBarItem,secondBarItem]];\n```\n\n### 19.UIApplication\n\n```\nNSURL *appStoreUrl = [NSURL URLWithString:@\"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;mt=8\"];\n[[UIApplication sharedApplication] openURL:appStoreUrl];\n```\n\n```\n  //退出编辑\n [[UIApplication sharedApplication].keyWindow endEditing:YES];\n\n  //设置网络状态\n [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];//开启\n [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];//关闭\n```\n\n### 20.UIRefreshControl\n  刷新组件，继承了UITableController 有refreshControl 属性存在\n```\nUIRefreshControl *refreshControl = [[UIRefreshControl alloc]init];\n  refreshControl.attributedTitle = [[NSAttributedString alloc]initWithString:@\"刷新中..\"];\n  [refreshControl addTarget:self action:@selector(refreshTableView) forControlEvents:UIControlEventValueChanged];\n  self.refreshControl = refreshControl;\n\n\n-(void) refreshTableView\n{\n  //刷新后请求\n}\n```\n\n### 21.UIImagePickerController\n查看相册\n```\nUIImagePickerController *pickerController = [[UIImagePickerController alloc]init];\npickerController.sourceType  = UIImagePickerControllerSourceTypePhotoLibrary;\npickerController.delegate = self;\n[self presentViewController:pickerController animated:YES completion:nil];\n\n-(void) imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n\n  if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])\n  {\n     UIImage *image =  [info objectForKey:UIImagePickerControllerOriginalImage];\n     self.imageView.image = image;\n  }\n\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\n### 22.UICollectionView\n\n```\nUICollectionViewFlowLayout* flowLayout = [[UICollectionViewFlowLayout alloc]init];\nflowLayout.itemSize = CGSizeMake(120, 120);\n[flowLayout setScrollDirection:UICollectionViewScrollDirectionVertical];\nUICollectionView *collectionView = [[UICollectionView alloc]initWithFrame:rect collectionViewLayout:flowLayout ];\ncollectionView.backgroundColor = [UIColor whiteColor];\ncollectionView.dataSource = self;\ncollectionView.delegate = self;\n[self.view addSubview:self.collectionView];\n\n-(NSInteger) collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section\n{\n    return  1;\n}\n\n-(UICollectionViewCell *) collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@\"NodeCell\" forIndexPath:indexPath];\n    return cell;\n}\n\n\n-(void) collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    //选中子项\n}\n```\n### 23.MPMoviePlayerController\n  视频控制\n```\nNSURL *url = [NSURL URLWithString:@\"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\"];\nMPMoviePlayerController  *player =[[MPMoviePlayerController alloc]initWithContentURL:url];\nplayer.fullscreen = YES;\nCGRect winRect = [[UIScreen mainScreen] applicationFrame];\nCGRect rect = CGRectMake(0,0,winRect.size.height, winRect.size.width);\nplayer.controlStyle = MPMovieControlStyleDefault;\nplayer.view.frame = rect;\nplayer.view.center = CGPointMake(rect.size.width/2, rect.size.height/2);  \n[player.view setTransform:CGAffineTransformMakeRotation(M_PI/2)];\nlayer.scalingMode = MPMovieScalingModeAspectFill;\n[player play];\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playCompleteFun:) name:MPMoviePlayerPlaybackDidFinishNotification object:nil];\n[self.view addSubview:player.view];\n\n-(void) playCompleteFun:(NSNotification *) notification\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerPlaybackDidFinishNotification object:nil];\n}\n```\n### 常用的一些代码片段记录\n\n#### 视频截图\n```\n- (UIImage *) captureFromView: (UIView *) aView\n{    \n    UIGraphicsBeginImageContext(aView.frame.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [aView.layer renderInContext:context];\n    UIImage *image= UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();     \n    return image;\n}\n```\n\n#### 遇到block的情况下转为self\n\n```\n__weak typeof(self)weakSelf = self;\n__storng typeof(self)strongSelf = self;\n```\n\n### 常用的一些Build setting 记录\n\n#### Bitcode 的开启和关闭\n![bitcode](http://7xpj58.com1.z0.glb.clouddn.com/20150923200746917)\n\n#### pch文件开启和配置路径位置\n需要则在Precompile Prefix Header 开启 默认关闭\n##### Prefix Header 则配置相应的路径\n例如：**$(SRCROOT)/PrefixHeader.pch**\n![PrefixHeader](http://7xpj58.com1.z0.glb.clouddn.com/20150923201059584)\n\n##### Library Search Paths\n![Search Paths](http://7xpj58.com1.z0.glb.clouddn.com/20150923201555972)\n\n##### Product Name 产品名字设置\n![Product BundleId](http://7xpj58.com1.z0.glb.clouddn.com/20150923201750634)\n\n##### Other Linker Flags -Objc 设置\n![Other linker](http://7xpj58.com1.z0.glb.clouddn.com/20150923202008456)\n","source":"_posts/iPhone开发-常用组件.md","raw":"---\ntitle: iPhone开发-常用组件\ndate: 2017-11-15 17:35:41\ntags: [ios]\ncategories: ios\n---\n\n### 1. UIButton\n\n```\n CGRect frame = CGRectMake(0, 100, 80, 40);\n UIButton *button = [UIButton buttonWithType:UIButtonTypeRoundedRect];\n button.frame = frame;\n [button setTitle:@\"click\" forState: UIControlStateNormal];\n button.backgroundColor = [UIColor greenColor];\n [button addTarget:self action:@selector(buttonClicked:) forControlEvents:UIControlEventTouchUpInside];\n [self.view addSubview:button];\n\n -(void) buttonClicked:(UIButton *)button\n {\n   //添加code\n }\n```\n### 2. UIAlertView\n\n```\nUIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"标题\" message:@\"你的内存已满\" delegate:self cancelButtonTitle:@\"取消\" otherButtonTitles:nil, nil];\n   [alert show];\n\n```\n\n\n<!-- more -->\n### 3. UILabel\n\n```\nUILabel *label =[[UILabel alloc]initWithFrame:CGRectMake(0, 10, 200, 34)];\nlabel.textColor =[UIColor grayColor];\nlabel.font =[UIFont systemFontOfSize:18];\nlabel.text =@\"创建一个文本\";\nlabel.lineBreakMode = NSLineBreakByCharWrapping;\nlabel.numberOfLines = 0;\nlabel.backgroundColor =[UIColor grayColor];\nlabel.textAlignment = NSTextAlignmentCenter;\n```\n\n### 4. UITextField\n\n```\n\nUITextField *textField =[[UITextField alloc]initWithFrame:CGRectMake(10, 44, self.view.bounds.size.width-20,30)];\n textField.borderStyle = UITextBorderStyleRoundedRect;\n textField.placeholder = @\"请输入用户名\";\n textField.clearButtonMode = UITextFieldViewModeAlways;\n textField.delegate = self;\n textField.textColor = [UIColor grayColor];\n textField.keyboardType = UIKeyboardTypeDefault;\n textField.returnKeyType = UIReturnKeyDone;\n textField.clearButtonMode = UITextFieldViewModeWhileEditing;\n```\n\n### 5.UISlider\n\n```\nUISlider *slider =[[UISlider alloc]initWithFrame:CGRectMake(0, 100, 200, 33)];\n  [slider addTarget:self action:@selector(onChangeHandler:) forControlEvents:UIControlEventValueChanged];\n  [self.view addSubview:slider];\n\n-(void) onChangeHandler:(UISlider *) slider\n{\n    float value = slider.value;\n}\n```\n\n### 6.UISegmentedControl\n\n```\nUISegmentedControl *seg= [[UISegmentedControl alloc]initWithItems:@[@\"骑士\",@\"勇士\"]];\n   [self.view addSubview:seg];\n   seg.frame =CGRectMake(20, 200, 200, 33);\n   [seg addTarget:self action:@selector(onSelect:) forControlEvents:UIControlEventValueChanged];\n\n-(void) onSelect:(UISegmentedControl *) control\n{\n   NSInteger index = control.selectedSegmentIndex;\n    if (index==0)\n    {\n        NSLog(@\"点击骑士\");\n    }\n    else\n    {\n        NSLog(@\"点击勇士\");\n    }\n\n}\n\n```\n\n### 7.UIViewImage\n\n```\nUIImageView *imageView =[[UIImageView alloc]initWithImage:[UIImage imageNamed:@\"head.png\" ]];\nimageView.layer.cornerRadius = 4.0;\n```\n### 8.UISwitch\n\n```\nUISwitch *uiSwitch=[[UISwitch alloc]initWithFrame:CGRectMake(20, 200, 100, 33)];\n   [self.view addSubview:uiSwitch];\n   [uiSwitch setOn:YES animated:YES];\n   [uiSwitch addTarget:self action:@selector(onChange:) forControlEvents:UIControlEventValueChanged];\n\n-(void) onChange:(UISwitch *) uiswitch\n{\n  BOOL isOn =  uiswitch.isOn;\n  //两种方式输出真假值\n  NSLog(@\"%@\",  [NSNumber numberWithBool:isOn].stringValue);\n  NSLog(@\"%@\",  isOn ? @\"YES\":@\"NO\");\n}\n\n```\n\n### 9.UIActionSheet\n\n```\nUIActionSheet *actionSheet = [[UIActionSheet alloc]initWithTitle:nil delegate:self cancelButtonTitle:@\"取消\" destructiveButtonTitle:@\"微信\" otherButtonTitles:@\"新浪微博\",@\"腾讯微博\", nil];\nactionSheet.actionSheetStyle = UIActionSheetStyleDefault;\n[actionSheet showInView:self.view];\n\n-(void) actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n    if(buttonIndex == 0)\n    {\n        NSLog(@\"微信\");\n    }\n    else if(buttonIndex ==1)\n    {\n        NSLog(@\"新浪微博\");\n    }\n    else if(buttonIndex == 2)\n    {\n        NSLog(@\"腾讯微博\");\n    }\n}\n\n```\n### 10.UIWindow\n\n```\nUIWindow *window =[[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds];\n```\n\n### 11.UIBarButtonItem\n\n```\n//左边\nself.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"话题\" style:UIBarButtonItemStylePlain target:self action:@selector(showMenu)];\n //右边\nself.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"话题\" style:UIBarButtonItemStylePlain target:self action:@selector(showMenu)];\n\n-(void) showMenu\n{\n    [[NSNotificationCenter defaultCenter] postNotificationName:@\"ShowMenuCmd\" object:nil];\n}\n```\n\n### 12.UIWebView\n  UIWebView 的本地加载HTML页面\n```\nCGRect rect = [UIScreen mainScreen].bounds;\nUIWebView *webView = [[UIWebView alloc] initWithFrame:CGRectMake(0, 0, rect .size.width,rect.size.height)];\n[self.view addSubview:self.webView];\n[webView setUserInteractionEnabled:YES];//是否支持交互\nNSString *path =  [[NSBundle mainBundle] pathForResource:@\"index\" ofType:@\"html\"];\nNSURL *url = [NSURL fileURLWithPath:path];\n[webView loadRequest:[NSURLRequest requestWithURL:url]];   \nwebView.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;\n```\n### 13.UIPickerView\n选择器创建与代理设置\n\n```\nNSArray *pickerArray =@[@\"勇士\",@\"火箭\",@\"湖人\",@\"雷霆\"];\nUIPickerView *pickerView =[[UIPickerView alloc]init];\n[self.view addSubview:self.pickerView];\npickerView.frame =(CGRect){0,self.view.frame.size.height-160,320,180};\npickerView.delegate = self;//设置代理\npickerView.dataSource = self;//设置代理\npickerView.backgroundColor = [UIColor orangeColor];\n\n - (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView\n{\n    return 1;\n}\n\n- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component\n{\n    return [pickerArray count];\n}\n-(NSString *) pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component\n{\n  return [pickerArray objectAtIndex:row];\n}\n\n- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component\n{\n  NSLog(@\"点击选择了\");\n}\n```\n\n### 14.UIScrollView\n\n```\nUIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 40, 200, 100)];\nscrollView.backgroundColor =  [UIColor blueColor];\n\n    CGFloat y=20;\n    for (int i=0; i<30;i++)\n    {\n        UILabel *lab = [[UILabel alloc]init];\n        lab.text = @\"第一章 约定的开始\";\n        [lab sizeToFit];\n        CGRect f= lab.frame;\n        f.origin.y = i*22;\n        lab.frame =f;\n        [scrollView addSubview:lab];\n        y += lab.bounds.size.height +10;\n    }\n    CGSize sz=scrollView.bounds.size;\n    sz.height = y;\n    scrollView.contentSize = sz;\n```\n\n### 15.UIProgressView\n  进度条\n```\nUIProgressView *progressView =[[UIProgressView alloc]initWithProgressViewStyle:UIProgressViewStyleDefault];\n  [self.view addSubview:progressView];\n  [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(onTimer:) userInfo:progressView repeats:YES];\n\n-(void) onTimer:(NSTimer *) timer\n{\nUIProgressView *progress =(UIProgressView *) timer.userInfo;\n  progress.progress += 0.1;\n  if(progress.progress == 1.0)\n  {\n      progress.progress =0;\n  }\n}\n```\n\n### 16.UIActivityIndicatorView\n活动指示器\n```\nUIActivityIndicatorView *activityView= [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhiteLarge];\n  [self.view addSubview:activityView];\n  [activityView startAnimating];//播放动画\n  [activityView stopAnimating];//停止动画\n  [activityView isAnimating];//判断是否在播放动画\n  self.view.backgroundColor=[UIColor orangeColor];//背景设置颜色方便预览该组件\n```\n\n### 17.UINavigationBar\n  UINavigationBar 导航栏 需要抱一个导航栏目UINavigationItem\n\n```\nUINavigationBar *navbar =[[UINavigationBar alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44)];\n [self.view addSubview:navbar];\n UIBarButtonItem *leftButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"菜单\" style:UIBarButtonItemStylePlain target:self action:@selector(onSelectLeft:)];\n UIBarButtonItem *rightButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"设置\" style:UIBarButtonItemStylePlain target:self action:@selector(onSelectRight:)];\n UINavigationItem *navigationItem =[[UINavigationItem alloc]initWithTitle:@\"我爱IOS\"];\n [navbar pushNavigationItem:navigationItem animated:NO];\n [navigationItem setLeftBarButtonItem:leftButtonItem];\n [navigationItem setRightBarButtonItem:rightButtonItem];\n\n-(void) onSelectLeft:(UIBarButtonItem *) button\n{\n   NSLog(@\"点击左边\");\n}\n\n-(void) onSelectRight:(UIBarButtonItem *) button\n{\n   NSLog(@\"点击右边\");\n}\n```\n\n### 18.UITabBar\n\n```\nUITabBar *tabBar =[[UITabBar alloc]initWithFrame:CGRectMake(0, [UIScreen mainScreen].bounds.size.height-44, self.view.frame.size.width, 44)];\n[self.view addSubview:tabBar];\nUITabBarItem *firstBarItem =[[UITabBarItem alloc]initWithTitle:@\"首页\" image:nil tag:1];\nUITabBarItem *secondBarItem =[[UITabBarItem alloc]initWithTitle:@\"我的\" image:nil tag:2];\n[tabBar setItems:@[firstBarItem,secondBarItem]];\n```\n\n### 19.UIApplication\n\n```\nNSURL *appStoreUrl = [NSURL URLWithString:@\"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;mt=8\"];\n[[UIApplication sharedApplication] openURL:appStoreUrl];\n```\n\n```\n  //退出编辑\n [[UIApplication sharedApplication].keyWindow endEditing:YES];\n\n  //设置网络状态\n [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];//开启\n [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];//关闭\n```\n\n### 20.UIRefreshControl\n  刷新组件，继承了UITableController 有refreshControl 属性存在\n```\nUIRefreshControl *refreshControl = [[UIRefreshControl alloc]init];\n  refreshControl.attributedTitle = [[NSAttributedString alloc]initWithString:@\"刷新中..\"];\n  [refreshControl addTarget:self action:@selector(refreshTableView) forControlEvents:UIControlEventValueChanged];\n  self.refreshControl = refreshControl;\n\n\n-(void) refreshTableView\n{\n  //刷新后请求\n}\n```\n\n### 21.UIImagePickerController\n查看相册\n```\nUIImagePickerController *pickerController = [[UIImagePickerController alloc]init];\npickerController.sourceType  = UIImagePickerControllerSourceTypePhotoLibrary;\npickerController.delegate = self;\n[self presentViewController:pickerController animated:YES completion:nil];\n\n-(void) imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info\n{\n\n  if([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary])\n  {\n     UIImage *image =  [info objectForKey:UIImagePickerControllerOriginalImage];\n     self.imageView.image = image;\n  }\n\n    [self dismissViewControllerAnimated:YES completion:nil];\n}\n```\n\n### 22.UICollectionView\n\n```\nUICollectionViewFlowLayout* flowLayout = [[UICollectionViewFlowLayout alloc]init];\nflowLayout.itemSize = CGSizeMake(120, 120);\n[flowLayout setScrollDirection:UICollectionViewScrollDirectionVertical];\nUICollectionView *collectionView = [[UICollectionView alloc]initWithFrame:rect collectionViewLayout:flowLayout ];\ncollectionView.backgroundColor = [UIColor whiteColor];\ncollectionView.dataSource = self;\ncollectionView.delegate = self;\n[self.view addSubview:self.collectionView];\n\n-(NSInteger) collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section\n{\n    return  1;\n}\n\n-(UICollectionViewCell *) collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@\"NodeCell\" forIndexPath:indexPath];\n    return cell;\n}\n\n\n-(void) collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath\n{\n    //选中子项\n}\n```\n### 23.MPMoviePlayerController\n  视频控制\n```\nNSURL *url = [NSURL URLWithString:@\"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\"];\nMPMoviePlayerController  *player =[[MPMoviePlayerController alloc]initWithContentURL:url];\nplayer.fullscreen = YES;\nCGRect winRect = [[UIScreen mainScreen] applicationFrame];\nCGRect rect = CGRectMake(0,0,winRect.size.height, winRect.size.width);\nplayer.controlStyle = MPMovieControlStyleDefault;\nplayer.view.frame = rect;\nplayer.view.center = CGPointMake(rect.size.width/2, rect.size.height/2);  \n[player.view setTransform:CGAffineTransformMakeRotation(M_PI/2)];\nlayer.scalingMode = MPMovieScalingModeAspectFill;\n[player play];\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(playCompleteFun:) name:MPMoviePlayerPlaybackDidFinishNotification object:nil];\n[self.view addSubview:player.view];\n\n-(void) playCompleteFun:(NSNotification *) notification\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:MPMoviePlayerPlaybackDidFinishNotification object:nil];\n}\n```\n### 常用的一些代码片段记录\n\n#### 视频截图\n```\n- (UIImage *) captureFromView: (UIView *) aView\n{    \n    UIGraphicsBeginImageContext(aView.frame.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    [aView.layer renderInContext:context];\n    UIImage *image= UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();     \n    return image;\n}\n```\n\n#### 遇到block的情况下转为self\n\n```\n__weak typeof(self)weakSelf = self;\n__storng typeof(self)strongSelf = self;\n```\n\n### 常用的一些Build setting 记录\n\n#### Bitcode 的开启和关闭\n![bitcode](http://7xpj58.com1.z0.glb.clouddn.com/20150923200746917)\n\n#### pch文件开启和配置路径位置\n需要则在Precompile Prefix Header 开启 默认关闭\n##### Prefix Header 则配置相应的路径\n例如：**$(SRCROOT)/PrefixHeader.pch**\n![PrefixHeader](http://7xpj58.com1.z0.glb.clouddn.com/20150923201059584)\n\n##### Library Search Paths\n![Search Paths](http://7xpj58.com1.z0.glb.clouddn.com/20150923201555972)\n\n##### Product Name 产品名字设置\n![Product BundleId](http://7xpj58.com1.z0.glb.clouddn.com/20150923201750634)\n\n##### Other Linker Flags -Objc 设置\n![Other linker](http://7xpj58.com1.z0.glb.clouddn.com/20150923202008456)\n","slug":"iPhone开发-常用组件","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxi900cdsifyuhbwzz7n","content":"<h3 id=\"1-uibutton\"><a class=\"markdownIt-Anchor\" href=\"#1-uibutton\"></a> 1. UIButton</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"built_in\">UIButton</span> *button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeRoundedRect</span>];</span><br><span class=\"line\">button.frame = frame;</span><br><span class=\"line\">[button setTitle:<span class=\"string\">@\"click\"</span> forState: <span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">button.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">[button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClicked:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:button];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) buttonClicked:(<span class=\"built_in\">UIButton</span> *)button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//添加code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-uialertview\"><a class=\"markdownIt-Anchor\" href=\"#2-uialertview\"></a> 2. UIAlertView</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIAlertView *alert = [[UIAlertView alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"标题\"</span> <span class=\"string\">message:</span>@<span class=\"string\">\"你的内存已满\"</span> <span class=\"string\">delegate:</span>self <span class=\"string\">cancelButtonTitle:</span>@<span class=\"string\">\"取消\"</span> <span class=\"string\">otherButtonTitles:</span>nil, nil];</span><br><span class=\"line\">   [alert show];</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"3-uilabel\"><a class=\"markdownIt-Anchor\" href=\"#3-uilabel\"></a> 3. UILabel</h3>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UILabel *<span class=\"keyword\">label</span><span class=\"bash\"> =[[UILabel alloc]initWithFrame:CGRectMake(0, 10, 200, 34)];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">textColor =[UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">font =[UIFont systemFontOfSize:18];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">text =@<span class=\"string\">\"创建一个文本\"</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">lineBreakMode = NSLineBreakByCharWrapping;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">numberOfLines = 0;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">backgroundColor =[UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">textAlignment = NSTextAlignmentCenter;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-uitextfield\"><a class=\"markdownIt-Anchor\" href=\"#4-uitextfield\"></a> 4. UITextField</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UITextField</span> *textField =[[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">10</span>, <span class=\"number\">44</span>, <span class=\"keyword\">self</span>.view.bounds.size.width<span class=\"number\">-20</span>,<span class=\"number\">30</span>)];</span><br><span class=\"line\"> textField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</span><br><span class=\"line\"> textField.placeholder = <span class=\"string\">@\"请输入用户名\"</span>;</span><br><span class=\"line\"> textField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</span><br><span class=\"line\"> textField.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"> textField.textColor = [<span class=\"built_in\">UIColor</span> grayColor];</span><br><span class=\"line\"> textField.keyboardType = <span class=\"built_in\">UIKeyboardTypeDefault</span>;</span><br><span class=\"line\"> textField.returnKeyType = <span class=\"built_in\">UIReturnKeyDone</span>;</span><br><span class=\"line\"> textField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeWhileEditing</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5uislider\"><a class=\"markdownIt-Anchor\" href=\"#5uislider\"></a> 5.UISlider</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UISlider *slider =[[UISlider alloc]<span class=\"string\">initWithFrame:</span>CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">33</span>)];</span><br><span class=\"line\">  [slider <span class=\"string\">addTarget:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(<span class=\"string\">onChangeHandler:</span>) <span class=\"string\">forControlEvents:</span>UIControlEventValueChanged];</span><br><span class=\"line\">  [self.view <span class=\"string\">addSubview:</span>slider];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) <span class=\"string\">onChangeHandler:</span>(UISlider *) slider</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> value = slider.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6uisegmentedcontrol\"><a class=\"markdownIt-Anchor\" href=\"#6uisegmentedcontrol\"></a> 6.UISegmentedControl</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UISegmentedControl</span> *seg= [[<span class=\"built_in\">UISegmentedControl</span> alloc]initWithItems:@[<span class=\"string\">@\"骑士\"</span>,<span class=\"string\">@\"勇士\"</span>]];</span><br><span class=\"line\">   [<span class=\"keyword\">self</span>.view addSubview:seg];</span><br><span class=\"line\">   seg.frame =<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">33</span>);</span><br><span class=\"line\">   [seg addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelect:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelect:(<span class=\"built_in\">UISegmentedControl</span> *) control</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSInteger</span> index = control.selectedSegmentIndex;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击骑士\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击勇士\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7uiviewimage\"><a class=\"markdownIt-Anchor\" href=\"#7uiviewimage\"></a> 7.UIViewImage</h3>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImageView *imageView =<span class=\"string\">[[UIImageView alloc]initWithImage:[UIImage imageNamed:@\"head.png\" ]]</span>;</span><br><span class=\"line\">imageView.layer.cornerRadius = <span class=\"number\">4.0</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8uiswitch\"><a class=\"markdownIt-Anchor\" href=\"#8uiswitch\"></a> 8.UISwitch</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UISwitch</span> *uiSwitch=[[<span class=\"built_in\">UISwitch</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">33</span>)];</span><br><span class=\"line\">   [<span class=\"keyword\">self</span>.view addSubview:uiSwitch];</span><br><span class=\"line\">   [uiSwitch setOn:<span class=\"literal\">YES</span> animated:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">   [uiSwitch addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onChange:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onChange:(<span class=\"built_in\">UISwitch</span> *) uiswitch</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">BOOL</span> isOn =  uiswitch.isOn;</span><br><span class=\"line\">  <span class=\"comment\">//两种方式输出真假值</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,  [<span class=\"built_in\">NSNumber</span> numberWithBool:isOn].stringValue);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,  isOn ? <span class=\"string\">@\"YES\"</span>:<span class=\"string\">@\"NO\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9uiactionsheet\"><a class=\"markdownIt-Anchor\" href=\"#9uiactionsheet\"></a> 9.UIActionSheet</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIActionSheet</span> *actionSheet = [[<span class=\"built_in\">UIActionSheet</span> alloc]initWithTitle:<span class=\"literal\">nil</span> delegate:<span class=\"keyword\">self</span> cancelButtonTitle:<span class=\"string\">@\"取消\"</span> destructiveButtonTitle:<span class=\"string\">@\"微信\"</span> otherButtonTitles:<span class=\"string\">@\"新浪微博\"</span>,<span class=\"string\">@\"腾讯微博\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">actionSheet.actionSheetStyle = <span class=\"built_in\">UIActionSheetStyleDefault</span>;</span><br><span class=\"line\">[actionSheet showInView:<span class=\"keyword\">self</span>.view];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) actionSheet:(<span class=\"built_in\">UIActionSheet</span> *)actionSheet clickedButtonAtIndex:(<span class=\"built_in\">NSInteger</span>)buttonIndex</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(buttonIndex == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"微信\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(buttonIndex ==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"新浪微博\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(buttonIndex == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"腾讯微博\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10uiwindow\"><a class=\"markdownIt-Anchor\" href=\"#10uiwindow\"></a> 10.UIWindow</h3>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWindow *window =<span class=\"comment\">[<span class=\"comment\">[UIWindow alloc]</span>initWithFrame:<span class=\"comment\">[UIScreen mainScreen]</span>.bounds]</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11uibarbuttonitem\"><a class=\"markdownIt-Anchor\" href=\"#11uibarbuttonitem\"></a> 11.UIBarButtonItem</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//左边</span></span><br><span class=\"line\">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"话题\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(showMenu)];</span><br><span class=\"line\"> <span class=\"comment\">//右边</span></span><br><span class=\"line\">self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"话题\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(showMenu)];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) showMenu</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] <span class=\"string\">postNotificationName:</span>@<span class=\"string\">\"ShowMenuCmd\"</span> <span class=\"string\">object:</span>nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12uiwebview\"><a class=\"markdownIt-Anchor\" href=\"#12uiwebview\"></a> 12.UIWebView</h3>\n<p>UIWebView 的本地加载HTML页面</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> rect = [<span class=\"built_in\">UIScreen</span> mainScreen].bounds;</span><br><span class=\"line\"><span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, rect .size.width,rect.size.height)];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.webView];</span><br><span class=\"line\">[webView setUserInteractionEnabled:<span class=\"literal\">YES</span>];<span class=\"comment\">//是否支持交互</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *path =  [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"index\"</span> ofType:<span class=\"string\">@\"html\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:path];</span><br><span class=\"line\">[webView loadRequest:[<span class=\"built_in\">NSURLRequest</span> requestWithURL:url]];   </span><br><span class=\"line\">webView.autoresizingMask = <span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span> | <span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13uipickerview\"><a class=\"markdownIt-Anchor\" href=\"#13uipickerview\"></a> 13.UIPickerView</h3>\n<p>选择器创建与代理设置</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *pickerArray =@[<span class=\"string\">@\"勇士\"</span>,<span class=\"string\">@\"火箭\"</span>,<span class=\"string\">@\"湖人\"</span>,<span class=\"string\">@\"雷霆\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">UIPickerView</span> *pickerView =[[<span class=\"built_in\">UIPickerView</span> alloc]init];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.pickerView];</span><br><span class=\"line\">pickerView.frame =(<span class=\"built_in\">CGRect</span>)&#123;<span class=\"number\">0</span>,<span class=\"keyword\">self</span>.view.frame.size.height<span class=\"number\">-160</span>,<span class=\"number\">320</span>,<span class=\"number\">180</span>&#125;;</span><br><span class=\"line\">pickerView.delegate = <span class=\"keyword\">self</span>;<span class=\"comment\">//设置代理</span></span><br><span class=\"line\">pickerView.dataSource = <span class=\"keyword\">self</span>;<span class=\"comment\">//设置代理</span></span><br><span class=\"line\">pickerView.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</span><br><span class=\"line\"></span><br><span class=\"line\"> - (<span class=\"built_in\">NSInteger</span>)numberOfComponentsInPickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSInteger</span>)pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView numberOfRowsInComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pickerArray count];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *) pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView titleForRow:(<span class=\"built_in\">NSInteger</span>)row forComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [pickerArray objectAtIndex:row];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView didSelectRow:(<span class=\"built_in\">NSInteger</span>)row inComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击选择了\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14uiscrollview\"><a class=\"markdownIt-Anchor\" href=\"#14uiscrollview\"></a> 14.UIScrollView</h3>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIScrollView *<span class=\"keyword\">scrollView </span>= [[UIScrollView alloc] initWithFrame:CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">scrollView.backgroundColor </span>=  [UIColor <span class=\"keyword\">blueColor];</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   CGFloat y=<span class=\"number\">20</span><span class=\"comment\">;</span></span><br><span class=\"line\">    for (int i=<span class=\"number\">0</span><span class=\"comment\">; i&lt;30;i++)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        UILabel *lab = [[UILabel alloc]init]<span class=\"comment\">;</span></span><br><span class=\"line\">        lab<span class=\"meta\">.text</span> = @<span class=\"string\">\"第一章 约定的开始\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">        [lab sizeToFit]<span class=\"comment\">;</span></span><br><span class=\"line\">        CGRect f= lab.frame<span class=\"comment\">;</span></span><br><span class=\"line\">        f.<span class=\"keyword\">origin.y </span>= i*<span class=\"number\">22</span><span class=\"comment\">;</span></span><br><span class=\"line\">        lab.frame =f<span class=\"comment\">;</span></span><br><span class=\"line\">        [<span class=\"keyword\">scrollView </span><span class=\"keyword\">addSubview:lab];</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       y += lab.<span class=\"keyword\">bounds.size.height </span>+<span class=\"number\">10</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CGSize sz=<span class=\"keyword\">scrollView.bounds.size;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   sz.height = y<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">scrollView.contentSize </span>= sz<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"15uiprogressview\"><a class=\"markdownIt-Anchor\" href=\"#15uiprogressview\"></a> 15.UIProgressView</h3>\n<p>进度条</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIProgressView</span> *progressView =[[<span class=\"built_in\">UIProgressView</span> alloc]initWithProgressViewStyle:<span class=\"built_in\">UIProgressViewStyleDefault</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.view addSubview:progressView];</span><br><span class=\"line\">  [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">1.0</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(onTimer:) userInfo:progressView repeats:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onTimer:(<span class=\"built_in\">NSTimer</span> *) timer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">UIProgressView</span> *progress =(<span class=\"built_in\">UIProgressView</span> *) timer.userInfo;</span><br><span class=\"line\">  progress.progress += <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(progress.progress == <span class=\"number\">1.0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      progress.progress =<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16uiactivityindicatorview\"><a class=\"markdownIt-Anchor\" href=\"#16uiactivityindicatorview\"></a> 16.UIActivityIndicatorView</h3>\n<p>活动指示器</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIActivityIndicatorView</span> *activityView= [[<span class=\"built_in\">UIActivityIndicatorView</span> alloc]initWithActivityIndicatorStyle:<span class=\"built_in\">UIActivityIndicatorViewStyleWhiteLarge</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.view addSubview:activityView];</span><br><span class=\"line\">  [activityView startAnimating];<span class=\"comment\">//播放动画</span></span><br><span class=\"line\">  [activityView stopAnimating];<span class=\"comment\">//停止动画</span></span><br><span class=\"line\">  [activityView isAnimating];<span class=\"comment\">//判断是否在播放动画</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.view.backgroundColor=[<span class=\"built_in\">UIColor</span> orangeColor];<span class=\"comment\">//背景设置颜色方便预览该组件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17uinavigationbar\"><a class=\"markdownIt-Anchor\" href=\"#17uinavigationbar\"></a> 17.UINavigationBar</h3>\n<p>UINavigationBar 导航栏 需要抱一个导航栏目UINavigationItem</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UINavigationBar</span> *navbar =[[<span class=\"built_in\">UINavigationBar</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">44</span>)];</span><br><span class=\"line\"> [<span class=\"keyword\">self</span>.view addSubview:navbar];</span><br><span class=\"line\"> <span class=\"built_in\">UIBarButtonItem</span> *leftButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"菜单\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelectLeft:)];</span><br><span class=\"line\"> <span class=\"built_in\">UIBarButtonItem</span> *rightButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"设置\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelectRight:)];</span><br><span class=\"line\"> <span class=\"built_in\">UINavigationItem</span> *navigationItem =[[<span class=\"built_in\">UINavigationItem</span> alloc]initWithTitle:<span class=\"string\">@\"我爱IOS\"</span>];</span><br><span class=\"line\"> [navbar pushNavigationItem:navigationItem animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"> [navigationItem setLeftBarButtonItem:leftButtonItem];</span><br><span class=\"line\"> [navigationItem setRightBarButtonItem:rightButtonItem];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelectLeft:(<span class=\"built_in\">UIBarButtonItem</span> *) button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击左边\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelectRight:(<span class=\"built_in\">UIBarButtonItem</span> *) button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击右边\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"18uitabbar\"><a class=\"markdownIt-Anchor\" href=\"#18uitabbar\"></a> 18.UITabBar</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UITabBar</span> *tabBar =[[<span class=\"built_in\">UITabBar</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, [<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.height<span class=\"number\">-44</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">44</span>)];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:tabBar];</span><br><span class=\"line\"><span class=\"built_in\">UITabBarItem</span> *firstBarItem =[[<span class=\"built_in\">UITabBarItem</span> alloc]initWithTitle:<span class=\"string\">@\"首页\"</span> image:<span class=\"literal\">nil</span> tag:<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">UITabBarItem</span> *secondBarItem =[[<span class=\"built_in\">UITabBarItem</span> alloc]initWithTitle:<span class=\"string\">@\"我的\"</span> image:<span class=\"literal\">nil</span> tag:<span class=\"number\">2</span>];</span><br><span class=\"line\">[tabBar setItems:@[firstBarItem,secondBarItem]];</span><br></pre></td></tr></table></figure>\n<h3 id=\"19uiapplication\"><a class=\"markdownIt-Anchor\" href=\"#19uiapplication\"></a> 19.UIApplication</h3>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSURL *appStoreUrl = [NSURL URLWithString:@<span class=\"string\">\"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;amp;mt=8\"</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">[[UIApplication <span class=\"keyword\">sharedApplication] </span>openURL:appStoreUrl]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//退出编辑</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span><span class=\"selector-class\">.keyWindow</span> <span class=\"selector-tag\">endEditing</span><span class=\"selector-pseudo\">:YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//设置网络状态</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span> <span class=\"selector-tag\">setNetworkActivityIndicatorVisible</span><span class=\"selector-pseudo\">:YES</span>];<span class=\"comment\">//开启</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span> <span class=\"selector-tag\">setNetworkActivityIndicatorVisible</span><span class=\"selector-pseudo\">:NO</span>];<span class=\"comment\">//关闭</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"20uirefreshcontrol\"><a class=\"markdownIt-Anchor\" href=\"#20uirefreshcontrol\"></a> 20.UIRefreshControl</h3>\n<p>刷新组件，继承了UITableController 有refreshControl 属性存在</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIRefreshControl</span> *refreshControl = [[<span class=\"built_in\">UIRefreshControl</span> alloc]init];</span><br><span class=\"line\">  refreshControl.attributedTitle = [[<span class=\"built_in\">NSAttributedString</span> alloc]initWithString:<span class=\"string\">@\"刷新中..\"</span>];</span><br><span class=\"line\">  [refreshControl addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(refreshTableView) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.refreshControl = refreshControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) refreshTableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//刷新后请求</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"21uiimagepickercontroller\"><a class=\"markdownIt-Anchor\" href=\"#21uiimagepickercontroller\"></a> 21.UIImagePickerController</h3>\n<p>查看相册</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImagePickerController</span> *pickerController = [[<span class=\"built_in\">UIImagePickerController</span> alloc]init];</span><br><span class=\"line\">pickerController.sourceType  = <span class=\"built_in\">UIImagePickerControllerSourceTypePhotoLibrary</span>;</span><br><span class=\"line\">pickerController.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> presentViewController:pickerController animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) imagePickerController:(<span class=\"built_in\">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class=\"built_in\">NSDictionary</span> *)info</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>([<span class=\"built_in\">UIImagePickerController</span> isSourceTypeAvailable:<span class=\"built_in\">UIImagePickerControllerSourceTypePhotoLibrary</span>])</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     <span class=\"built_in\">UIImage</span> *image =  [info objectForKey:<span class=\"built_in\">UIImagePickerControllerOriginalImage</span>];</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.imageView.image = image;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"22uicollectionview\"><a class=\"markdownIt-Anchor\" href=\"#22uicollectionview\"></a> 22.UICollectionView</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UICollectionViewFlowLayout</span>* flowLayout = [[<span class=\"built_in\">UICollectionViewFlowLayout</span> alloc]init];</span><br><span class=\"line\">flowLayout.itemSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">120</span>, <span class=\"number\">120</span>);</span><br><span class=\"line\">[flowLayout setScrollDirection:<span class=\"built_in\">UICollectionViewScrollDirectionVertical</span>];</span><br><span class=\"line\"><span class=\"built_in\">UICollectionView</span> *collectionView = [[<span class=\"built_in\">UICollectionView</span> alloc]initWithFrame:rect collectionViewLayout:flowLayout ];</span><br><span class=\"line\">collectionView.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">collectionView.dataSource = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">collectionView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.collectionView];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">NSInteger</span>) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView numberOfItemsInSection:(<span class=\"built_in\">NSInteger</span>)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UICollectionViewCell</span> *) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *cell = [collectionView dequeueReusableCellWithReuseIdentifier:<span class=\"string\">@\"NodeCell\"</span> forIndexPath:indexPath];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//选中子项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23mpmovieplayercontroller\"><a class=\"markdownIt-Anchor\" href=\"#23mpmovieplayercontroller\"></a> 23.MPMoviePlayerController</h3>\n<p>视频控制</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span>  *player =[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</span><br><span class=\"line\">player.fullscreen = <span class=\"literal\">YES</span>;</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> winRect = [[<span class=\"built_in\">UIScreen</span> mainScreen] applicationFrame];</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,winRect.size.height, winRect.size.width);</span><br><span class=\"line\">player.controlStyle = <span class=\"built_in\">MPMovieControlStyleDefault</span>;</span><br><span class=\"line\">player.view.frame = rect;</span><br><span class=\"line\">player.view.center = <span class=\"built_in\">CGPointMake</span>(rect.size.width/<span class=\"number\">2</span>, rect.size.height/<span class=\"number\">2</span>);  </span><br><span class=\"line\">[player.view setTransform:<span class=\"built_in\">CGAffineTransformMakeRotation</span>(M_PI/<span class=\"number\">2</span>)];</span><br><span class=\"line\">layer.scalingMode = <span class=\"built_in\">MPMovieScalingModeAspectFill</span>;</span><br><span class=\"line\">[player play];</span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playCompleteFun:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:player.view];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) playCompleteFun:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的一些代码片段记录\"><a class=\"markdownIt-Anchor\" href=\"#常用的一些代码片段记录\"></a> 常用的一些代码片段记录</h3>\n<h4 id=\"视频截图\"><a class=\"markdownIt-Anchor\" href=\"#视频截图\"></a> 视频截图</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">UIImage</span> *) captureFromView: (<span class=\"built_in\">UIView</span> *) aView</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(aView.frame.size);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [aView.layer renderInContext:context];</span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *image= <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到block的情况下转为self\"><a class=\"markdownIt-Anchor\" href=\"#遇到block的情况下转为self\"></a> 遇到block的情况下转为self</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>)weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">__storng <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>)strongSelf = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的一些build-setting-记录\"><a class=\"markdownIt-Anchor\" href=\"#常用的一些build-setting-记录\"></a> 常用的一些Build setting 记录</h3>\n<h4 id=\"bitcode-的开启和关闭\"><a class=\"markdownIt-Anchor\" href=\"#bitcode-的开启和关闭\"></a> Bitcode 的开启和关闭</h4>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923200746917\" alt=\"bitcode\"></p>\n<h4 id=\"pch文件开启和配置路径位置\"><a class=\"markdownIt-Anchor\" href=\"#pch文件开启和配置路径位置\"></a> pch文件开启和配置路径位置</h4>\n<p>需要则在Precompile Prefix Header 开启 默认关闭</p>\n<h5 id=\"prefix-header-则配置相应的路径\"><a class=\"markdownIt-Anchor\" href=\"#prefix-header-则配置相应的路径\"></a> Prefix Header 则配置相应的路径</h5>\n<p>例如：<strong>$(SRCROOT)/PrefixHeader.pch</strong><br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201059584\" alt=\"PrefixHeader\"></p>\n<h5 id=\"library-search-paths\"><a class=\"markdownIt-Anchor\" href=\"#library-search-paths\"></a> Library Search Paths</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201555972\" alt=\"Search Paths\"></p>\n<h5 id=\"product-name-产品名字设置\"><a class=\"markdownIt-Anchor\" href=\"#product-name-产品名字设置\"></a> Product Name 产品名字设置</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201750634\" alt=\"Product BundleId\"></p>\n<h5 id=\"other-linker-flags-objc-设置\"><a class=\"markdownIt-Anchor\" href=\"#other-linker-flags-objc-设置\"></a> Other Linker Flags -Objc 设置</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923202008456\" alt=\"Other linker\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-uibutton\"><a class=\"markdownIt-Anchor\" href=\"#1-uibutton\"></a> 1. UIButton</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> frame = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">80</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"built_in\">UIButton</span> *button = [<span class=\"built_in\">UIButton</span> buttonWithType:<span class=\"built_in\">UIButtonTypeRoundedRect</span>];</span><br><span class=\"line\">button.frame = frame;</span><br><span class=\"line\">[button setTitle:<span class=\"string\">@\"click\"</span> forState: <span class=\"built_in\">UIControlStateNormal</span>];</span><br><span class=\"line\">button.backgroundColor = [<span class=\"built_in\">UIColor</span> greenColor];</span><br><span class=\"line\">[button addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(buttonClicked:) forControlEvents:<span class=\"built_in\">UIControlEventTouchUpInside</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:button];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) buttonClicked:(<span class=\"built_in\">UIButton</span> *)button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//添加code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-uialertview\"><a class=\"markdownIt-Anchor\" href=\"#2-uialertview\"></a> 2. UIAlertView</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIAlertView *alert = [[UIAlertView alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"标题\"</span> <span class=\"string\">message:</span>@<span class=\"string\">\"你的内存已满\"</span> <span class=\"string\">delegate:</span>self <span class=\"string\">cancelButtonTitle:</span>@<span class=\"string\">\"取消\"</span> <span class=\"string\">otherButtonTitles:</span>nil, nil];</span><br><span class=\"line\">   [alert show];</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"3-uilabel\"><a class=\"markdownIt-Anchor\" href=\"#3-uilabel\"></a> 3. UILabel</h3>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UILabel *<span class=\"keyword\">label</span><span class=\"bash\"> =[[UILabel alloc]initWithFrame:CGRectMake(0, 10, 200, 34)];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">textColor =[UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">font =[UIFont systemFontOfSize:18];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">text =@<span class=\"string\">\"创建一个文本\"</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">lineBreakMode = NSLineBreakByCharWrapping;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">numberOfLines = 0;</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">backgroundColor =[UIColor grayColor];</span></span><br><span class=\"line\"><span class=\"keyword\">label</span>.<span class=\"bash\">textAlignment = NSTextAlignmentCenter;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-uitextfield\"><a class=\"markdownIt-Anchor\" href=\"#4-uitextfield\"></a> 4. UITextField</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">UITextField</span> *textField =[[<span class=\"built_in\">UITextField</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">10</span>, <span class=\"number\">44</span>, <span class=\"keyword\">self</span>.view.bounds.size.width<span class=\"number\">-20</span>,<span class=\"number\">30</span>)];</span><br><span class=\"line\"> textField.borderStyle = <span class=\"built_in\">UITextBorderStyleRoundedRect</span>;</span><br><span class=\"line\"> textField.placeholder = <span class=\"string\">@\"请输入用户名\"</span>;</span><br><span class=\"line\"> textField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeAlways</span>;</span><br><span class=\"line\"> textField.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"> textField.textColor = [<span class=\"built_in\">UIColor</span> grayColor];</span><br><span class=\"line\"> textField.keyboardType = <span class=\"built_in\">UIKeyboardTypeDefault</span>;</span><br><span class=\"line\"> textField.returnKeyType = <span class=\"built_in\">UIReturnKeyDone</span>;</span><br><span class=\"line\"> textField.clearButtonMode = <span class=\"built_in\">UITextFieldViewModeWhileEditing</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5uislider\"><a class=\"markdownIt-Anchor\" href=\"#5uislider\"></a> 5.UISlider</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UISlider *slider =[[UISlider alloc]<span class=\"string\">initWithFrame:</span>CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">33</span>)];</span><br><span class=\"line\">  [slider <span class=\"string\">addTarget:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(<span class=\"string\">onChangeHandler:</span>) <span class=\"string\">forControlEvents:</span>UIControlEventValueChanged];</span><br><span class=\"line\">  [self.view <span class=\"string\">addSubview:</span>slider];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) <span class=\"string\">onChangeHandler:</span>(UISlider *) slider</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> value = slider.value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6uisegmentedcontrol\"><a class=\"markdownIt-Anchor\" href=\"#6uisegmentedcontrol\"></a> 6.UISegmentedControl</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UISegmentedControl</span> *seg= [[<span class=\"built_in\">UISegmentedControl</span> alloc]initWithItems:@[<span class=\"string\">@\"骑士\"</span>,<span class=\"string\">@\"勇士\"</span>]];</span><br><span class=\"line\">   [<span class=\"keyword\">self</span>.view addSubview:seg];</span><br><span class=\"line\">   seg.frame =<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">200</span>, <span class=\"number\">33</span>);</span><br><span class=\"line\">   [seg addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelect:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelect:(<span class=\"built_in\">UISegmentedControl</span> *) control</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSInteger</span> index = control.selectedSegmentIndex;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击骑士\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击勇士\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7uiviewimage\"><a class=\"markdownIt-Anchor\" href=\"#7uiviewimage\"></a> 7.UIViewImage</h3>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImageView *imageView =<span class=\"string\">[[UIImageView alloc]initWithImage:[UIImage imageNamed:@\"head.png\" ]]</span>;</span><br><span class=\"line\">imageView.layer.cornerRadius = <span class=\"number\">4.0</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8uiswitch\"><a class=\"markdownIt-Anchor\" href=\"#8uiswitch\"></a> 8.UISwitch</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UISwitch</span> *uiSwitch=[[<span class=\"built_in\">UISwitch</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">20</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>, <span class=\"number\">33</span>)];</span><br><span class=\"line\">   [<span class=\"keyword\">self</span>.view addSubview:uiSwitch];</span><br><span class=\"line\">   [uiSwitch setOn:<span class=\"literal\">YES</span> animated:<span class=\"literal\">YES</span>];</span><br><span class=\"line\">   [uiSwitch addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onChange:) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onChange:(<span class=\"built_in\">UISwitch</span> *) uiswitch</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">BOOL</span> isOn =  uiswitch.isOn;</span><br><span class=\"line\">  <span class=\"comment\">//两种方式输出真假值</span></span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,  [<span class=\"built_in\">NSNumber</span> numberWithBool:isOn].stringValue);</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,  isOn ? <span class=\"string\">@\"YES\"</span>:<span class=\"string\">@\"NO\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9uiactionsheet\"><a class=\"markdownIt-Anchor\" href=\"#9uiactionsheet\"></a> 9.UIActionSheet</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIActionSheet</span> *actionSheet = [[<span class=\"built_in\">UIActionSheet</span> alloc]initWithTitle:<span class=\"literal\">nil</span> delegate:<span class=\"keyword\">self</span> cancelButtonTitle:<span class=\"string\">@\"取消\"</span> destructiveButtonTitle:<span class=\"string\">@\"微信\"</span> otherButtonTitles:<span class=\"string\">@\"新浪微博\"</span>,<span class=\"string\">@\"腾讯微博\"</span>, <span class=\"literal\">nil</span>];</span><br><span class=\"line\">actionSheet.actionSheetStyle = <span class=\"built_in\">UIActionSheetStyleDefault</span>;</span><br><span class=\"line\">[actionSheet showInView:<span class=\"keyword\">self</span>.view];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) actionSheet:(<span class=\"built_in\">UIActionSheet</span> *)actionSheet clickedButtonAtIndex:(<span class=\"built_in\">NSInteger</span>)buttonIndex</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(buttonIndex == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"微信\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(buttonIndex ==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"新浪微博\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(buttonIndex == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"腾讯微博\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"10uiwindow\"><a class=\"markdownIt-Anchor\" href=\"#10uiwindow\"></a> 10.UIWindow</h3>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIWindow *window =<span class=\"comment\">[<span class=\"comment\">[UIWindow alloc]</span>initWithFrame:<span class=\"comment\">[UIScreen mainScreen]</span>.bounds]</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11uibarbuttonitem\"><a class=\"markdownIt-Anchor\" href=\"#11uibarbuttonitem\"></a> 11.UIBarButtonItem</h3>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//左边</span></span><br><span class=\"line\">self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"话题\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(showMenu)];</span><br><span class=\"line\"> <span class=\"comment\">//右边</span></span><br><span class=\"line\">self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]<span class=\"string\">initWithTitle:</span>@<span class=\"string\">\"话题\"</span> <span class=\"string\">style:</span>UIBarButtonItemStylePlain <span class=\"string\">target:</span>self <span class=\"string\">action:</span><span class=\"meta\">@selector</span>(showMenu)];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) showMenu</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[NSNotificationCenter defaultCenter] <span class=\"string\">postNotificationName:</span>@<span class=\"string\">\"ShowMenuCmd\"</span> <span class=\"string\">object:</span>nil];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"12uiwebview\"><a class=\"markdownIt-Anchor\" href=\"#12uiwebview\"></a> 12.UIWebView</h3>\n<p>UIWebView 的本地加载HTML页面</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">CGRect</span> rect = [<span class=\"built_in\">UIScreen</span> mainScreen].bounds;</span><br><span class=\"line\"><span class=\"built_in\">UIWebView</span> *webView = [[<span class=\"built_in\">UIWebView</span> alloc] initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, rect .size.width,rect.size.height)];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.webView];</span><br><span class=\"line\">[webView setUserInteractionEnabled:<span class=\"literal\">YES</span>];<span class=\"comment\">//是否支持交互</span></span><br><span class=\"line\"><span class=\"built_in\">NSString</span> *path =  [[<span class=\"built_in\">NSBundle</span> mainBundle] pathForResource:<span class=\"string\">@\"index\"</span> ofType:<span class=\"string\">@\"html\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> fileURLWithPath:path];</span><br><span class=\"line\">[webView loadRequest:[<span class=\"built_in\">NSURLRequest</span> requestWithURL:url]];   </span><br><span class=\"line\">webView.autoresizingMask = <span class=\"built_in\">UIViewAutoresizingFlexibleHeight</span> | <span class=\"built_in\">UIViewAutoresizingFlexibleWidth</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13uipickerview\"><a class=\"markdownIt-Anchor\" href=\"#13uipickerview\"></a> 13.UIPickerView</h3>\n<p>选择器创建与代理设置</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSArray</span> *pickerArray =@[<span class=\"string\">@\"勇士\"</span>,<span class=\"string\">@\"火箭\"</span>,<span class=\"string\">@\"湖人\"</span>,<span class=\"string\">@\"雷霆\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">UIPickerView</span> *pickerView =[[<span class=\"built_in\">UIPickerView</span> alloc]init];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.pickerView];</span><br><span class=\"line\">pickerView.frame =(<span class=\"built_in\">CGRect</span>)&#123;<span class=\"number\">0</span>,<span class=\"keyword\">self</span>.view.frame.size.height<span class=\"number\">-160</span>,<span class=\"number\">320</span>,<span class=\"number\">180</span>&#125;;</span><br><span class=\"line\">pickerView.delegate = <span class=\"keyword\">self</span>;<span class=\"comment\">//设置代理</span></span><br><span class=\"line\">pickerView.dataSource = <span class=\"keyword\">self</span>;<span class=\"comment\">//设置代理</span></span><br><span class=\"line\">pickerView.backgroundColor = [<span class=\"built_in\">UIColor</span> orangeColor];</span><br><span class=\"line\"></span><br><span class=\"line\"> - (<span class=\"built_in\">NSInteger</span>)numberOfComponentsInPickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"built_in\">NSInteger</span>)pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView numberOfRowsInComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [pickerArray count];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-(<span class=\"built_in\">NSString</span> *) pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView titleForRow:(<span class=\"built_in\">NSInteger</span>)row forComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [pickerArray objectAtIndex:row];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)pickerView:(<span class=\"built_in\">UIPickerView</span> *)pickerView didSelectRow:(<span class=\"built_in\">NSInteger</span>)row inComponent:(<span class=\"built_in\">NSInteger</span>)component</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击选择了\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"14uiscrollview\"><a class=\"markdownIt-Anchor\" href=\"#14uiscrollview\"></a> 14.UIScrollView</h3>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIScrollView *<span class=\"keyword\">scrollView </span>= [[UIScrollView alloc] initWithFrame:CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">40</span>, <span class=\"number\">200</span>, <span class=\"number\">100</span>)]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"keyword\">scrollView.backgroundColor </span>=  [UIColor <span class=\"keyword\">blueColor];</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   CGFloat y=<span class=\"number\">20</span><span class=\"comment\">;</span></span><br><span class=\"line\">    for (int i=<span class=\"number\">0</span><span class=\"comment\">; i&lt;30;i++)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        UILabel *lab = [[UILabel alloc]init]<span class=\"comment\">;</span></span><br><span class=\"line\">        lab<span class=\"meta\">.text</span> = @<span class=\"string\">\"第一章 约定的开始\"</span><span class=\"comment\">;</span></span><br><span class=\"line\">        [lab sizeToFit]<span class=\"comment\">;</span></span><br><span class=\"line\">        CGRect f= lab.frame<span class=\"comment\">;</span></span><br><span class=\"line\">        f.<span class=\"keyword\">origin.y </span>= i*<span class=\"number\">22</span><span class=\"comment\">;</span></span><br><span class=\"line\">        lab.frame =f<span class=\"comment\">;</span></span><br><span class=\"line\">        [<span class=\"keyword\">scrollView </span><span class=\"keyword\">addSubview:lab];</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>       y += lab.<span class=\"keyword\">bounds.size.height </span>+<span class=\"number\">10</span><span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CGSize sz=<span class=\"keyword\">scrollView.bounds.size;</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   sz.height = y<span class=\"comment\">;</span></span><br><span class=\"line\">    <span class=\"keyword\">scrollView.contentSize </span>= sz<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"15uiprogressview\"><a class=\"markdownIt-Anchor\" href=\"#15uiprogressview\"></a> 15.UIProgressView</h3>\n<p>进度条</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIProgressView</span> *progressView =[[<span class=\"built_in\">UIProgressView</span> alloc]initWithProgressViewStyle:<span class=\"built_in\">UIProgressViewStyleDefault</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.view addSubview:progressView];</span><br><span class=\"line\">  [<span class=\"built_in\">NSTimer</span> scheduledTimerWithTimeInterval:<span class=\"number\">1.0</span> target:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(onTimer:) userInfo:progressView repeats:<span class=\"literal\">YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onTimer:(<span class=\"built_in\">NSTimer</span> *) timer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">UIProgressView</span> *progress =(<span class=\"built_in\">UIProgressView</span> *) timer.userInfo;</span><br><span class=\"line\">  progress.progress += <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(progress.progress == <span class=\"number\">1.0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      progress.progress =<span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"16uiactivityindicatorview\"><a class=\"markdownIt-Anchor\" href=\"#16uiactivityindicatorview\"></a> 16.UIActivityIndicatorView</h3>\n<p>活动指示器</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIActivityIndicatorView</span> *activityView= [[<span class=\"built_in\">UIActivityIndicatorView</span> alloc]initWithActivityIndicatorStyle:<span class=\"built_in\">UIActivityIndicatorViewStyleWhiteLarge</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.view addSubview:activityView];</span><br><span class=\"line\">  [activityView startAnimating];<span class=\"comment\">//播放动画</span></span><br><span class=\"line\">  [activityView stopAnimating];<span class=\"comment\">//停止动画</span></span><br><span class=\"line\">  [activityView isAnimating];<span class=\"comment\">//判断是否在播放动画</span></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.view.backgroundColor=[<span class=\"built_in\">UIColor</span> orangeColor];<span class=\"comment\">//背景设置颜色方便预览该组件</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17uinavigationbar\"><a class=\"markdownIt-Anchor\" href=\"#17uinavigationbar\"></a> 17.UINavigationBar</h3>\n<p>UINavigationBar 导航栏 需要抱一个导航栏目UINavigationItem</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UINavigationBar</span> *navbar =[[<span class=\"built_in\">UINavigationBar</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">44</span>)];</span><br><span class=\"line\"> [<span class=\"keyword\">self</span>.view addSubview:navbar];</span><br><span class=\"line\"> <span class=\"built_in\">UIBarButtonItem</span> *leftButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"菜单\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelectLeft:)];</span><br><span class=\"line\"> <span class=\"built_in\">UIBarButtonItem</span> *rightButtonItem = [[<span class=\"built_in\">UIBarButtonItem</span> alloc]initWithTitle:<span class=\"string\">@\"设置\"</span> style:<span class=\"built_in\">UIBarButtonItemStylePlain</span> target:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(onSelectRight:)];</span><br><span class=\"line\"> <span class=\"built_in\">UINavigationItem</span> *navigationItem =[[<span class=\"built_in\">UINavigationItem</span> alloc]initWithTitle:<span class=\"string\">@\"我爱IOS\"</span>];</span><br><span class=\"line\"> [navbar pushNavigationItem:navigationItem animated:<span class=\"literal\">NO</span>];</span><br><span class=\"line\"> [navigationItem setLeftBarButtonItem:leftButtonItem];</span><br><span class=\"line\"> [navigationItem setRightBarButtonItem:rightButtonItem];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelectLeft:(<span class=\"built_in\">UIBarButtonItem</span> *) button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击左边\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) onSelectRight:(<span class=\"built_in\">UIBarButtonItem</span> *) button</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"点击右边\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"18uitabbar\"><a class=\"markdownIt-Anchor\" href=\"#18uitabbar\"></a> 18.UITabBar</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UITabBar</span> *tabBar =[[<span class=\"built_in\">UITabBar</span> alloc]initWithFrame:<span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>, [<span class=\"built_in\">UIScreen</span> mainScreen].bounds.size.height<span class=\"number\">-44</span>, <span class=\"keyword\">self</span>.view.frame.size.width, <span class=\"number\">44</span>)];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:tabBar];</span><br><span class=\"line\"><span class=\"built_in\">UITabBarItem</span> *firstBarItem =[[<span class=\"built_in\">UITabBarItem</span> alloc]initWithTitle:<span class=\"string\">@\"首页\"</span> image:<span class=\"literal\">nil</span> tag:<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">UITabBarItem</span> *secondBarItem =[[<span class=\"built_in\">UITabBarItem</span> alloc]initWithTitle:<span class=\"string\">@\"我的\"</span> image:<span class=\"literal\">nil</span> tag:<span class=\"number\">2</span>];</span><br><span class=\"line\">[tabBar setItems:@[firstBarItem,secondBarItem]];</span><br></pre></td></tr></table></figure>\n<h3 id=\"19uiapplication\"><a class=\"markdownIt-Anchor\" href=\"#19uiapplication\"></a> 19.UIApplication</h3>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSURL *appStoreUrl = [NSURL URLWithString:@<span class=\"string\">\"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=291586600&amp;amp;amp;mt=8\"</span>]<span class=\"comment\">;</span></span><br><span class=\"line\">[[UIApplication <span class=\"keyword\">sharedApplication] </span>openURL:appStoreUrl]<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//退出编辑</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span><span class=\"selector-class\">.keyWindow</span> <span class=\"selector-tag\">endEditing</span><span class=\"selector-pseudo\">:YES</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//设置网络状态</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span> <span class=\"selector-tag\">setNetworkActivityIndicatorVisible</span><span class=\"selector-pseudo\">:YES</span>];<span class=\"comment\">//开启</span></span><br><span class=\"line\"><span class=\"selector-attr\">[[UIApplication sharedApplication]</span> <span class=\"selector-tag\">setNetworkActivityIndicatorVisible</span><span class=\"selector-pseudo\">:NO</span>];<span class=\"comment\">//关闭</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"20uirefreshcontrol\"><a class=\"markdownIt-Anchor\" href=\"#20uirefreshcontrol\"></a> 20.UIRefreshControl</h3>\n<p>刷新组件，继承了UITableController 有refreshControl 属性存在</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIRefreshControl</span> *refreshControl = [[<span class=\"built_in\">UIRefreshControl</span> alloc]init];</span><br><span class=\"line\">  refreshControl.attributedTitle = [[<span class=\"built_in\">NSAttributedString</span> alloc]initWithString:<span class=\"string\">@\"刷新中..\"</span>];</span><br><span class=\"line\">  [refreshControl addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(refreshTableView) forControlEvents:<span class=\"built_in\">UIControlEventValueChanged</span>];</span><br><span class=\"line\">  <span class=\"keyword\">self</span>.refreshControl = refreshControl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) refreshTableView</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//刷新后请求</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"21uiimagepickercontroller\"><a class=\"markdownIt-Anchor\" href=\"#21uiimagepickercontroller\"></a> 21.UIImagePickerController</h3>\n<p>查看相册</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UIImagePickerController</span> *pickerController = [[<span class=\"built_in\">UIImagePickerController</span> alloc]init];</span><br><span class=\"line\">pickerController.sourceType  = <span class=\"built_in\">UIImagePickerControllerSourceTypePhotoLibrary</span>;</span><br><span class=\"line\">pickerController.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span> presentViewController:pickerController animated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) imagePickerController:(<span class=\"built_in\">UIImagePickerController</span> *)picker didFinishPickingMediaWithInfo:(<span class=\"built_in\">NSDictionary</span> *)info</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>([<span class=\"built_in\">UIImagePickerController</span> isSourceTypeAvailable:<span class=\"built_in\">UIImagePickerControllerSourceTypePhotoLibrary</span>])</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">     <span class=\"built_in\">UIImage</span> *image =  [info objectForKey:<span class=\"built_in\">UIImagePickerControllerOriginalImage</span>];</span><br><span class=\"line\">     <span class=\"keyword\">self</span>.imageView.image = image;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"keyword\">self</span> dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"22uicollectionview\"><a class=\"markdownIt-Anchor\" href=\"#22uicollectionview\"></a> 22.UICollectionView</h3>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">UICollectionViewFlowLayout</span>* flowLayout = [[<span class=\"built_in\">UICollectionViewFlowLayout</span> alloc]init];</span><br><span class=\"line\">flowLayout.itemSize = <span class=\"built_in\">CGSizeMake</span>(<span class=\"number\">120</span>, <span class=\"number\">120</span>);</span><br><span class=\"line\">[flowLayout setScrollDirection:<span class=\"built_in\">UICollectionViewScrollDirectionVertical</span>];</span><br><span class=\"line\"><span class=\"built_in\">UICollectionView</span> *collectionView = [[<span class=\"built_in\">UICollectionView</span> alloc]initWithFrame:rect collectionViewLayout:flowLayout ];</span><br><span class=\"line\">collectionView.backgroundColor = [<span class=\"built_in\">UIColor</span> whiteColor];</span><br><span class=\"line\">collectionView.dataSource = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">collectionView.delegate = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:<span class=\"keyword\">self</span>.collectionView];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">NSInteger</span>) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView numberOfItemsInSection:(<span class=\"built_in\">NSInteger</span>)section</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"built_in\">UICollectionViewCell</span> *) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">UICollectionViewCell</span> *cell = [collectionView dequeueReusableCellWithReuseIdentifier:<span class=\"string\">@\"NodeCell\"</span> forIndexPath:indexPath];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) collectionView:(<span class=\"built_in\">UICollectionView</span> *)collectionView didSelectItemAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//选中子项</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23mpmovieplayercontroller\"><a class=\"markdownIt-Anchor\" href=\"#23mpmovieplayercontroller\"></a> 23.MPMoviePlayerController</h3>\n<p>视频控制</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSURL</span> *url = [<span class=\"built_in\">NSURL</span> URLWithString:<span class=\"string\">@\"http://devimages.apple.com/iphone/samples/bipbop/bipbopall.m3u8\"</span>];</span><br><span class=\"line\"><span class=\"built_in\">MPMoviePlayerController</span>  *player =[[<span class=\"built_in\">MPMoviePlayerController</span> alloc]initWithContentURL:url];</span><br><span class=\"line\">player.fullscreen = <span class=\"literal\">YES</span>;</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> winRect = [[<span class=\"built_in\">UIScreen</span> mainScreen] applicationFrame];</span><br><span class=\"line\"><span class=\"built_in\">CGRect</span> rect = <span class=\"built_in\">CGRectMake</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,winRect.size.height, winRect.size.width);</span><br><span class=\"line\">player.controlStyle = <span class=\"built_in\">MPMovieControlStyleDefault</span>;</span><br><span class=\"line\">player.view.frame = rect;</span><br><span class=\"line\">player.view.center = <span class=\"built_in\">CGPointMake</span>(rect.size.width/<span class=\"number\">2</span>, rect.size.height/<span class=\"number\">2</span>);  </span><br><span class=\"line\">[player.view setTransform:<span class=\"built_in\">CGAffineTransformMakeRotation</span>(M_PI/<span class=\"number\">2</span>)];</span><br><span class=\"line\">layer.scalingMode = <span class=\"built_in\">MPMovieScalingModeAspectFill</span>;</span><br><span class=\"line\">[player play];</span><br><span class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span> selector:<span class=\"keyword\">@selector</span>(playCompleteFun:) name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.view addSubview:player.view];</span><br><span class=\"line\"></span><br><span class=\"line\">-(<span class=\"keyword\">void</span>) playCompleteFun:(<span class=\"built_in\">NSNotification</span> *) notification</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:<span class=\"built_in\">MPMoviePlayerPlaybackDidFinishNotification</span> object:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的一些代码片段记录\"><a class=\"markdownIt-Anchor\" href=\"#常用的一些代码片段记录\"></a> 常用的一些代码片段记录</h3>\n<h4 id=\"视频截图\"><a class=\"markdownIt-Anchor\" href=\"#视频截图\"></a> 视频截图</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">UIImage</span> *) captureFromView: (<span class=\"built_in\">UIView</span> *) aView</span><br><span class=\"line\">&#123;    </span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsBeginImageContext</span>(aView.frame.size);</span><br><span class=\"line\">    <span class=\"built_in\">CGContextRef</span> context = <span class=\"built_in\">UIGraphicsGetCurrentContext</span>();</span><br><span class=\"line\">    [aView.layer renderInContext:context];</span><br><span class=\"line\">    <span class=\"built_in\">UIImage</span> *image= <span class=\"built_in\">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class=\"line\">    <span class=\"built_in\">UIGraphicsEndImageContext</span>();     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"遇到block的情况下转为self\"><a class=\"markdownIt-Anchor\" href=\"#遇到block的情况下转为self\"></a> 遇到block的情况下转为self</h4>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__<span class=\"keyword\">weak</span> <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>)weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\">__storng <span class=\"keyword\">typeof</span>(<span class=\"keyword\">self</span>)strongSelf = <span class=\"keyword\">self</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用的一些build-setting-记录\"><a class=\"markdownIt-Anchor\" href=\"#常用的一些build-setting-记录\"></a> 常用的一些Build setting 记录</h3>\n<h4 id=\"bitcode-的开启和关闭\"><a class=\"markdownIt-Anchor\" href=\"#bitcode-的开启和关闭\"></a> Bitcode 的开启和关闭</h4>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923200746917\" alt=\"bitcode\"></p>\n<h4 id=\"pch文件开启和配置路径位置\"><a class=\"markdownIt-Anchor\" href=\"#pch文件开启和配置路径位置\"></a> pch文件开启和配置路径位置</h4>\n<p>需要则在Precompile Prefix Header 开启 默认关闭</p>\n<h5 id=\"prefix-header-则配置相应的路径\"><a class=\"markdownIt-Anchor\" href=\"#prefix-header-则配置相应的路径\"></a> Prefix Header 则配置相应的路径</h5>\n<p>例如：<strong>$(SRCROOT)/PrefixHeader.pch</strong><br>\n<img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201059584\" alt=\"PrefixHeader\"></p>\n<h5 id=\"library-search-paths\"><a class=\"markdownIt-Anchor\" href=\"#library-search-paths\"></a> Library Search Paths</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201555972\" alt=\"Search Paths\"></p>\n<h5 id=\"product-name-产品名字设置\"><a class=\"markdownIt-Anchor\" href=\"#product-name-产品名字设置\"></a> Product Name 产品名字设置</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923201750634\" alt=\"Product BundleId\"></p>\n<h5 id=\"other-linker-flags-objc-设置\"><a class=\"markdownIt-Anchor\" href=\"#other-linker-flags-objc-设置\"></a> Other Linker Flags -Objc 设置</h5>\n<p><img src=\"http://7xpj58.com1.z0.glb.clouddn.com/20150923202008456\" alt=\"Other linker\"></p>"},{"title":"std string常用函数","date":"2021-04-19T06:13:52.000Z","_content":"\n### std string常用函数\n\n<!-- more -->\n\n#### string类的构造函数\n\n```\nstring(const char *s); // 用c字符串s初始化\nstring(int n, char c); // 用户n个字符c初始化\n\n```\n\n此外，string类还支持默认构造函数和复制构造函数，\n如string s1; string s2=\"hello\"; 都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常\n\n#### string类的字符操作:\n\n```\nconst char &operator[](int n) const;\nconst char &at(int n)const;\nchar &operator[](int n);\nchar &at(int n);\n\noperator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。\n\nconst char *data() const; // 返回一个非null终止的c字符数组\nconst char *c_str() const; // 返回一个以null终止的c字符数组\n\nint copy(char *s, int n, int pos = 0) const; // 把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。\n```\n\n#### string的特性描述：\n\n```\nint capacity() const; // 返回当前容量(即string中不必增加内存即可存放的元素个数)\n\nint max_size() const; // 返回string对象中可存放的最大字符串的长度\n\nint size() const; // 返回当前字符串的大小\n\nint length() const; // 返回当前字符串的长度\nbool empty() const; // 当前字符串是否为空\n\nvoid resize(int len, char c); // 把字符串当前大小置为len, 并用字符c填充不足的部分\n```\n\n#### string类的输入输出操作：\n\nstring 类重载运算符operator>>用于输入，同样重载运算符operator<<用于输出操作。\n\n```\ngetline(istream &in, string &s); 用于从输入流in中读取字符串到s中，以'\\n'分开\n```\n\n#### string的赋值\n\n```\nstring &operator=(const string &s); // 把字符串s赋给当前字符串\nstring &assign(const char *s); // 用c类型字符串s赋值\nstring &assign(const char *s, int n); // 用c字符串s开始的n个字符赋值\nstring &assign(const string &s); // 把字符串s赋给当前字符串\nstring &assign(int n, char c); // 用n个字符c赋值给当前字符串\n\nstring &assign(const string &s, int start, int n); // 把字符串s中从start开始的n个字符赋给当前字符串\nstring &assign(const_iterator first, const_iterator last); // 把first和last迭代器之间的部分赋给字符串\n```\n\n#### string的连接\n\n```\nstring &operator+=(const string &s); // 把字符串s连接到当前字符串的结尾\nstring &append(const char *s); // 把c类型的字符串s连接到当前字符串的结尾\nstring &append(const char *s, int n); // 把c类型字符串s的前n个字符串连接到当前字符串结尾\nstring &append(const string &s); // 同operator+=()\nstring &append(const string &s, int pos, int n); // 把字符串s中从pos开始的n个字符连接到当前字符串的结尾\nstring &append(int n, char c); // 在当前字符串结尾添加n个字符c\nstring &append(const_iterator first, const_iterator last); // 把迭代器first和last之间的部分连接到当前字符串的结尾\n```\n\n#### string的比较\n\n```\nbool operator==(const string &s1, const string &s2) const; // 比较两个字符串是否相等\n// 运算符\">\",\"<\",\">=\",\"<=\"均被重载用于字符串的比较;\nint compare(const string &s) const; // 比较当前字符串和s的大小\n\nint compare(int pos, int n, const string &s) const; // 比较当前字符串从pos开始的n个字符组成的字符串与s的大小\nint compare(int pos, int n, const string &s, int pos2, int n2) const; // 比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2字符组成的字符串的大小\nint compare(const char *s) const;\nint compare(int pos, int n, const char *s) const;\nint compare(int pos, int n, const char *s, int pos2)  const;\n```\n**compare** 函数在**>**时返回1， **<**时返回-1, **==** 时返回0\n\n#### string 的子串\n\n```\nstring substr(int pos = 0, int n = npos) const; // 返回pos开始的n个字符组成的字符串\n```\n\n#### string 的交换\n\n```\nvoid swap(string &s2); // 交换当前字符串与s2的值\n```\n\n#### string 的查找函数\n\n```\nint find(char c, int pos = 0) const; // 从pos开始查找字符c在当前字符串的位置\n\nint find(const char *s, int pos = 0) const; // 从pos开始查找字符串s在当前串中的位置\n\nint find(const char *s, int pos, int n) const; // 从pos开始查找字符串s中前n个字符在当前串中的位置\n\nint find(const string &s, int pos = 0) const; // 从pos开始查找字符串s在当前串中的位置\n\n// 从查找成功时返回的位置，失败返回string::npos的值\n\nint rfind(char c, int pos = npos) const; // 从pos开始从后向前查找字符c在当前串中的位置。\n\nint rfind(const char *s, int pos = npos) const; \nint rfind(const char *s, int pos, int n = npos) const;\nint rfind(const string &s, int pos = npos) const;\n// 从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败返回string::npos的值\n\nint find_first_of(char c, int pos = 0) const; // 从pos开始查找字符c第一次出现的位置\n\nint find_first_of(const char *s, int pos=0) const;\nint find_first_of(const char *s, int pos, int n) const;\nint find_first_of(const string &s, int pos = 0) const;\n// 从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos\n\nint find_first_not_of(char c, int pos = 0) const;\nint find_first_not_of(const char *s, int pos=0) const;\nint find_first_not_of(const char *s, int pos, int n) const;\nint find_first_not_of(const char *s, int pos, int n) const;\nint find_first_not_of(const string &s, int pos = 0) const;\n// 从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos\n\n\nint find_last_of(char c, int pos = npos) const;\nint find_last_of(const char *s, int pos = npos) const;\nint find_last_of(const char *s, int pos, int n = npos) const;\nint find_last_of(const string &s, int pos = npos) const;\n\nint find_last_not_of(char c, int pos = npos) const;\nint find_last_not_of(const char *s, int pos = npos) const;\nint find_last_not_of(const char *s, int pos, int n) const;\nint find_last_not_of(const char *s, int pos = npos) const;\n// find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找\n```\n\n#### string类的替换函数:\n\n```\nstring &replace(int p0, int n0, const char *s); // 删除从p0开始的n0个字符，然后在p0处插入串s\nstring &replace(int p0, int n0, const char *s, int n); // 删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符\nstring &replace(int p0, int n0, const string &s, int pos, int n); // 删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符\nstring &replace(iterator first0, iterator last0, const char *s); // 把[first0, last0)之间的部分替换为字符串s\nstring &replace(iterator first0, iterator last0, const char *s, int n); // 把[first0, last0）之间的部分替换为字符串s\nstring &replace(iterator first0, iterator last0, int n, char c); // 把[first0, last0) 之间的部分替换为n个字符c\nstring &replace(iterator first0, iterator last0, const_iterator first, const_iterator last); // 把[first0, last0)之间的部分替换成[first, last)之间的字符串\n\n```\n\n#### string类的插入函数\n\n```\nstring &insert(int p0, const char *s);\nstring &insert(int p0, const char *s, int n);\nstring &insert(int p0, const string &s);\nstring &insert(int p0, const string &s, int pos, int n);\n// 前4个函数在p0位置插入字符串s中pos开始的前n个字符\nstring &insert(int p0, int n, char c); // 此函数在p0处插入n个字符c\niterator insert(iterator it, char c); // 在it处插入字符c，返回插入后迭代器的位置\nvoid insert(iterator it, const_iterator first, const_iterator last); // 在it处插入[first, last)之间的字符\nvoid insert(iterator it, int n, char c); // 在it处插入n个字符c\n```\n\n#### string类的删除函数\n\n```\niterator erase(iterator first, iterator last); // 删除[first, last) 之间的所有字符，返回删除后迭代器的位置\niterator erase(iterator it); // 删除it指向的字符串，返回删除后迭代器的位置\nstring &erase(int pos=0, int n = npos); // 删除pos开始的n个字符，返回修改后的字符串\n```\n#### string类的迭代器处理\n\n```\nstring类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。\n用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：\nconst_iterator begin() const;\nconst_iterator begin(); // 返回string的起始位置\nconst_iterator end() const;\nconst_iterator end(); // 返回string的最后一个字符后面的位置\nconst_iterator rbegin() const;\niterator rbegin(); // 返回string 的最后一个字符的位置\nconst_iterator rend() const;\nconst_iterator rend(); // 返回string的第一个字符位置的前面\n\nrbegin和rend用于从后向前的迭代访问，通过设置迭代器string::reverse_iterator，string::const_reverse_iterator实现\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/std-string常用函数.md","raw":"---\ntitle: std string常用函数\ndate: 2021-04-19 14:13:52\ntags: [stl, string, c++]\ncategories: cpp\n---\n\n### std string常用函数\n\n<!-- more -->\n\n#### string类的构造函数\n\n```\nstring(const char *s); // 用c字符串s初始化\nstring(int n, char c); // 用户n个字符c初始化\n\n```\n\n此外，string类还支持默认构造函数和复制构造函数，\n如string s1; string s2=\"hello\"; 都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常\n\n#### string类的字符操作:\n\n```\nconst char &operator[](int n) const;\nconst char &at(int n)const;\nchar &operator[](int n);\nchar &at(int n);\n\noperator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。\n\nconst char *data() const; // 返回一个非null终止的c字符数组\nconst char *c_str() const; // 返回一个以null终止的c字符数组\n\nint copy(char *s, int n, int pos = 0) const; // 把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。\n```\n\n#### string的特性描述：\n\n```\nint capacity() const; // 返回当前容量(即string中不必增加内存即可存放的元素个数)\n\nint max_size() const; // 返回string对象中可存放的最大字符串的长度\n\nint size() const; // 返回当前字符串的大小\n\nint length() const; // 返回当前字符串的长度\nbool empty() const; // 当前字符串是否为空\n\nvoid resize(int len, char c); // 把字符串当前大小置为len, 并用字符c填充不足的部分\n```\n\n#### string类的输入输出操作：\n\nstring 类重载运算符operator>>用于输入，同样重载运算符operator<<用于输出操作。\n\n```\ngetline(istream &in, string &s); 用于从输入流in中读取字符串到s中，以'\\n'分开\n```\n\n#### string的赋值\n\n```\nstring &operator=(const string &s); // 把字符串s赋给当前字符串\nstring &assign(const char *s); // 用c类型字符串s赋值\nstring &assign(const char *s, int n); // 用c字符串s开始的n个字符赋值\nstring &assign(const string &s); // 把字符串s赋给当前字符串\nstring &assign(int n, char c); // 用n个字符c赋值给当前字符串\n\nstring &assign(const string &s, int start, int n); // 把字符串s中从start开始的n个字符赋给当前字符串\nstring &assign(const_iterator first, const_iterator last); // 把first和last迭代器之间的部分赋给字符串\n```\n\n#### string的连接\n\n```\nstring &operator+=(const string &s); // 把字符串s连接到当前字符串的结尾\nstring &append(const char *s); // 把c类型的字符串s连接到当前字符串的结尾\nstring &append(const char *s, int n); // 把c类型字符串s的前n个字符串连接到当前字符串结尾\nstring &append(const string &s); // 同operator+=()\nstring &append(const string &s, int pos, int n); // 把字符串s中从pos开始的n个字符连接到当前字符串的结尾\nstring &append(int n, char c); // 在当前字符串结尾添加n个字符c\nstring &append(const_iterator first, const_iterator last); // 把迭代器first和last之间的部分连接到当前字符串的结尾\n```\n\n#### string的比较\n\n```\nbool operator==(const string &s1, const string &s2) const; // 比较两个字符串是否相等\n// 运算符\">\",\"<\",\">=\",\"<=\"均被重载用于字符串的比较;\nint compare(const string &s) const; // 比较当前字符串和s的大小\n\nint compare(int pos, int n, const string &s) const; // 比较当前字符串从pos开始的n个字符组成的字符串与s的大小\nint compare(int pos, int n, const string &s, int pos2, int n2) const; // 比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2字符组成的字符串的大小\nint compare(const char *s) const;\nint compare(int pos, int n, const char *s) const;\nint compare(int pos, int n, const char *s, int pos2)  const;\n```\n**compare** 函数在**>**时返回1， **<**时返回-1, **==** 时返回0\n\n#### string 的子串\n\n```\nstring substr(int pos = 0, int n = npos) const; // 返回pos开始的n个字符组成的字符串\n```\n\n#### string 的交换\n\n```\nvoid swap(string &s2); // 交换当前字符串与s2的值\n```\n\n#### string 的查找函数\n\n```\nint find(char c, int pos = 0) const; // 从pos开始查找字符c在当前字符串的位置\n\nint find(const char *s, int pos = 0) const; // 从pos开始查找字符串s在当前串中的位置\n\nint find(const char *s, int pos, int n) const; // 从pos开始查找字符串s中前n个字符在当前串中的位置\n\nint find(const string &s, int pos = 0) const; // 从pos开始查找字符串s在当前串中的位置\n\n// 从查找成功时返回的位置，失败返回string::npos的值\n\nint rfind(char c, int pos = npos) const; // 从pos开始从后向前查找字符c在当前串中的位置。\n\nint rfind(const char *s, int pos = npos) const; \nint rfind(const char *s, int pos, int n = npos) const;\nint rfind(const string &s, int pos = npos) const;\n// 从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败返回string::npos的值\n\nint find_first_of(char c, int pos = 0) const; // 从pos开始查找字符c第一次出现的位置\n\nint find_first_of(const char *s, int pos=0) const;\nint find_first_of(const char *s, int pos, int n) const;\nint find_first_of(const string &s, int pos = 0) const;\n// 从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos\n\nint find_first_not_of(char c, int pos = 0) const;\nint find_first_not_of(const char *s, int pos=0) const;\nint find_first_not_of(const char *s, int pos, int n) const;\nint find_first_not_of(const char *s, int pos, int n) const;\nint find_first_not_of(const string &s, int pos = 0) const;\n// 从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos\n\n\nint find_last_of(char c, int pos = npos) const;\nint find_last_of(const char *s, int pos = npos) const;\nint find_last_of(const char *s, int pos, int n = npos) const;\nint find_last_of(const string &s, int pos = npos) const;\n\nint find_last_not_of(char c, int pos = npos) const;\nint find_last_not_of(const char *s, int pos = npos) const;\nint find_last_not_of(const char *s, int pos, int n) const;\nint find_last_not_of(const char *s, int pos = npos) const;\n// find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找\n```\n\n#### string类的替换函数:\n\n```\nstring &replace(int p0, int n0, const char *s); // 删除从p0开始的n0个字符，然后在p0处插入串s\nstring &replace(int p0, int n0, const char *s, int n); // 删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符\nstring &replace(int p0, int n0, const string &s, int pos, int n); // 删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符\nstring &replace(iterator first0, iterator last0, const char *s); // 把[first0, last0)之间的部分替换为字符串s\nstring &replace(iterator first0, iterator last0, const char *s, int n); // 把[first0, last0）之间的部分替换为字符串s\nstring &replace(iterator first0, iterator last0, int n, char c); // 把[first0, last0) 之间的部分替换为n个字符c\nstring &replace(iterator first0, iterator last0, const_iterator first, const_iterator last); // 把[first0, last0)之间的部分替换成[first, last)之间的字符串\n\n```\n\n#### string类的插入函数\n\n```\nstring &insert(int p0, const char *s);\nstring &insert(int p0, const char *s, int n);\nstring &insert(int p0, const string &s);\nstring &insert(int p0, const string &s, int pos, int n);\n// 前4个函数在p0位置插入字符串s中pos开始的前n个字符\nstring &insert(int p0, int n, char c); // 此函数在p0处插入n个字符c\niterator insert(iterator it, char c); // 在it处插入字符c，返回插入后迭代器的位置\nvoid insert(iterator it, const_iterator first, const_iterator last); // 在it处插入[first, last)之间的字符\nvoid insert(iterator it, int n, char c); // 在it处插入n个字符c\n```\n\n#### string类的删除函数\n\n```\niterator erase(iterator first, iterator last); // 删除[first, last) 之间的所有字符，返回删除后迭代器的位置\niterator erase(iterator it); // 删除it指向的字符串，返回删除后迭代器的位置\nstring &erase(int pos=0, int n = npos); // 删除pos开始的n个字符，返回修改后的字符串\n```\n#### string类的迭代器处理\n\n```\nstring类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。\n用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：\nconst_iterator begin() const;\nconst_iterator begin(); // 返回string的起始位置\nconst_iterator end() const;\nconst_iterator end(); // 返回string的最后一个字符后面的位置\nconst_iterator rbegin() const;\niterator rbegin(); // 返回string 的最后一个字符的位置\nconst_iterator rend() const;\nconst_iterator rend(); // 返回string的第一个字符位置的前面\n\nrbegin和rend用于从后向前的迭代访问，通过设置迭代器string::reverse_iterator，string::const_reverse_iterator实现\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"std-string常用函数","published":1,"updated":"2021-04-19T07:29:56.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxia00chsifyn8ee7d4e","content":"<h3 id=\"std-string常用函数\"><a class=\"markdownIt-Anchor\" href=\"#std-string常用函数\"></a> std string常用函数</h3>\n<a id=\"more\"></a>\n<h4 id=\"string类的构造函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的构造函数\"></a> string类的构造函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s); <span class=\"comment\">// 用c字符串s初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span>(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c); <span class=\"comment\">// 用户n个字符c初始化</span></span><br></pre></td></tr></table></figure>\n<p>此外，string类还支持默认构造函数和复制构造函数，<br>\n如string s1; string s2=“hello”; 都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常</p>\n<h4 id=\"string类的字符操作\"><a class=\"markdownIt-Anchor\" href=\"#string类的字符操作\"></a> string类的字符操作:</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> &amp;<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> n) <span class=\"keyword\">const</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> &amp;<span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span><span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> &amp;<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> n);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> &amp;<span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回一个非null终止的c字符数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"title\">c_str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回一个以null终止的c字符数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的特性描述\"><a class=\"markdownIt-Anchor\" href=\"#string的特性描述\"></a> string的特性描述：</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">capacity</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前容量(即string中不必增加内存即可存放的元素个数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回string对象中可存放的最大字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前字符串的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前字符串的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 当前字符串是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> len, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 把字符串当前大小置为len, 并用字符c填充不足的部分</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的输入输出操作\"><a class=\"markdownIt-Anchor\" href=\"#string类的输入输出操作\"></a> string类的输入输出操作：</h4>\n<p>string 类重载运算符operator&gt;&gt;用于输入，同样重载运算符operator&lt;&lt;用于输出操作。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(istream &amp;<span class=\"keyword\">in</span>, <span class=\"keyword\">string</span> &amp;s); 用于从输入流<span class=\"keyword\">in</span>中读取字符串到s中，以<span class=\"string\">'\\n'</span>分开</span><br></pre></td></tr></table></figure>\n<h4 id=\"string的赋值\"><a class=\"markdownIt-Anchor\" href=\"#string的赋值\"></a> string的赋值</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s); <span class=\"comment\">// 把字符串s赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 用c类型字符串s赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 用c字符串s开始的n个字符赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>; <span class=\"comment\">// 把字符串s赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 用n个字符c赋值给当前字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把字符串s中从start开始的n个字符赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把first和last迭代器之间的部分赋给字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的连接\"><a class=\"markdownIt-Anchor\" href=\"#string的连接\"></a> string的连接</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> &amp;<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s); <span class=\"comment\">// 把字符串s连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 把c类型的字符串s连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把c类型字符串s的前n个字符串连接到当前字符串结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>; <span class=\"comment\">// 同operator+=()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把字符串s中从pos开始的n个字符连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在当前字符串结尾添加n个字符c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把迭代器first和last之间的部分连接到当前字符串的结尾</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的比较\"><a class=\"markdownIt-Anchor\" href=\"#string的比较\"></a> string的比较</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s1, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s2) <span class=\"keyword\">const</span>; <span class=\"comment\">// 比较两个字符串是否相等</span></span><br><span class=\"line\"><span class=\"comment\">// 运算符\"&gt;\",\"&lt;\",\"&gt;=\",\"&lt;=\"均被重载用于字符串的比较;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串和s的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串从pos开始的n个字符组成的字符串与s的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos2, <span class=\"keyword\">int</span> n2)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2字符组成的字符串的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> pos2)</span>  <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>compare</strong> 函数在**&gt;**时返回1， **&lt;**时返回-1, <strong>==</strong> 时返回0</p>\n<h4 id=\"string-的子串\"><a class=\"markdownIt-Anchor\" href=\"#string-的子串\"></a> string 的子串</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> substr(<span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>, <span class=\"built_in\">int</span> n = npos) <span class=\"keyword\">const</span>; <span class=\"comment\">// 返回pos开始的n个字符组成的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string-的交换\"><a class=\"markdownIt-Anchor\" href=\"#string-的交换\"></a> string 的交换</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s2)</span></span>; <span class=\"comment\">// 交换当前字符串与s2的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string-的查找函数\"><a class=\"markdownIt-Anchor\" href=\"#string-的查找函数\"></a> string 的查找函数</h4>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> find(<span class=\"built_in\">char</span> c, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符c在当前字符串的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos, <span class=\"built_in\">int</span> n) const; <span class=\"comment\">// 从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">string</span> &amp;s, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从查找成功时返回的位置，失败返回string::npos的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(<span class=\"built_in\">char</span> c, <span class=\"built_in\">int</span> pos = npos) const; <span class=\"comment\">// 从pos开始从后向前查找字符c在当前串中的位置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos = npos) const; </span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos, <span class=\"built_in\">int</span> n = npos) const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">string</span> &amp;s, <span class=\"built_in\">int</span> pos = npos) const;</span><br><span class=\"line\"><span class=\"comment\">// 从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败返回string::npos的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const; <span class=\"comment\">// 从pos开始查找字符c第一次出现的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>=0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// 从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>=0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// 从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的替换函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的替换函数\"></a> string类的替换函数:</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 把[first0, last0)之间的部分替换为字符串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把[first0, last0）之间的部分替换为字符串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 把[first0, last0) 之间的部分替换为n个字符c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把[first0, last0)之间的部分替换成[first, last)之间的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的插入函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的插入函数\"></a> string类的插入函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 前4个函数在p0位置插入字符串s中pos开始的前n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 此函数在p0处插入n个字符c</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span><span class=\"params\">(iterator it, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在it处插入字符c，返回插入后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(iterator it, const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 在it处插入[first, last)之间的字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(iterator it, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在it处插入n个字符c</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的删除函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的删除函数\"></a> string类的删除函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span><span class=\"params\">(iterator first, iterator last)</span></span>; <span class=\"comment\">// 删除[first, last) 之间的所有字符，返回删除后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span><span class=\"params\">(iterator it)</span></span>; <span class=\"comment\">// 删除it指向的字符串，返回删除后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">erase</span><span class=\"params\">(<span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>, <span class=\"keyword\">int</span> n = npos)</span></span>; <span class=\"comment\">// 删除pos开始的n个字符，返回修改后的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的迭代器处理\"><a class=\"markdownIt-Anchor\" href=\"#string类的迭代器处理\"></a> string类的迭代器处理</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</span><br><span class=\"line\">用<span class=\"built_in\">string</span>::iterator或<span class=\"built_in\">string</span>::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的起始位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的最后一个字符后面的位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rbegin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">rbegin</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string 的最后一个字符的位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rend</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的第一个字符位置的前面</span></span><br><span class=\"line\"></span><br><span class=\"line\">rbegin和rend用于从后向前的迭代访问，通过设置迭代器<span class=\"built_in\">string</span>::reverse_iterator，<span class=\"built_in\">string</span>::const_reverse_iterator实现</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"std-string常用函数\"><a class=\"markdownIt-Anchor\" href=\"#std-string常用函数\"></a> std string常用函数</h3>","more":"<h4 id=\"string类的构造函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的构造函数\"></a> string类的构造函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s); <span class=\"comment\">// 用c字符串s初始化</span></span><br><span class=\"line\"><span class=\"built_in\">string</span>(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c); <span class=\"comment\">// 用户n个字符c初始化</span></span><br></pre></td></tr></table></figure>\n<p>此外，string类还支持默认构造函数和复制构造函数，<br>\n如string s1; string s2=“hello”; 都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常</p>\n<h4 id=\"string类的字符操作\"><a class=\"markdownIt-Anchor\" href=\"#string类的字符操作\"></a> string类的字符操作:</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> &amp;<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> n) <span class=\"keyword\">const</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> &amp;<span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span><span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> &amp;<span class=\"keyword\">operator</span>[](<span class=\"keyword\">int</span> n);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> &amp;<span class=\"title\">at</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">operator</span>[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"title\">data</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回一个非null终止的c字符数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"title\">c_str</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回一个以null终止的c字符数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">copy</span><span class=\"params\">(<span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目。</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的特性描述\"><a class=\"markdownIt-Anchor\" href=\"#string的特性描述\"></a> string的特性描述：</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">capacity</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前容量(即string中不必增加内存即可存放的元素个数)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max_size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回string对象中可存放的最大字符串的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前字符串的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 返回当前字符串的长度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">empty</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 当前字符串是否为空</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> len, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 把字符串当前大小置为len, 并用字符c填充不足的部分</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的输入输出操作\"><a class=\"markdownIt-Anchor\" href=\"#string类的输入输出操作\"></a> string类的输入输出操作：</h4>\n<p>string 类重载运算符operator&gt;&gt;用于输入，同样重载运算符operator&lt;&lt;用于输出操作。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getline(istream &amp;<span class=\"keyword\">in</span>, <span class=\"keyword\">string</span> &amp;s); 用于从输入流<span class=\"keyword\">in</span>中读取字符串到s中，以<span class=\"string\">'\\n'</span>分开</span><br></pre></td></tr></table></figure>\n<h4 id=\"string的赋值\"><a class=\"markdownIt-Anchor\" href=\"#string的赋值\"></a> string的赋值</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s); <span class=\"comment\">// 把字符串s赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 用c类型字符串s赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 用c字符串s开始的n个字符赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>; <span class=\"comment\">// 把字符串s赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 用n个字符c赋值给当前字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把字符串s中从start开始的n个字符赋给当前字符串</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">assign</span><span class=\"params\">(const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把first和last迭代器之间的部分赋给字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的连接\"><a class=\"markdownIt-Anchor\" href=\"#string的连接\"></a> string的连接</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> &amp;<span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s); <span class=\"comment\">// 把字符串s连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 把c类型的字符串s连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把c类型字符串s的前n个字符串连接到当前字符串结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>; <span class=\"comment\">// 同operator+=()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把字符串s中从pos开始的n个字符连接到当前字符串的结尾</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在当前字符串结尾添加n个字符c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">append</span><span class=\"params\">(const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把迭代器first和last之间的部分连接到当前字符串的结尾</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string的比较\"><a class=\"markdownIt-Anchor\" href=\"#string的比较\"></a> string的比较</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s1, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s2) <span class=\"keyword\">const</span>; <span class=\"comment\">// 比较两个字符串是否相等</span></span><br><span class=\"line\"><span class=\"comment\">// 运算符\"&gt;\",\"&lt;\",\"&gt;=\",\"&lt;=\"均被重载用于字符串的比较;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串和s的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串从pos开始的n个字符组成的字符串与s的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos2, <span class=\"keyword\">int</span> n2)</span> <span class=\"keyword\">const</span></span>; <span class=\"comment\">// 比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2字符组成的字符串的大小</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> pos2)</span>  <span class=\"keyword\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>compare</strong> 函数在**&gt;**时返回1， **&lt;**时返回-1, <strong>==</strong> 时返回0</p>\n<h4 id=\"string-的子串\"><a class=\"markdownIt-Anchor\" href=\"#string-的子串\"></a> string 的子串</h4>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> substr(<span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>, <span class=\"built_in\">int</span> n = npos) <span class=\"keyword\">const</span>; <span class=\"comment\">// 返回pos开始的n个字符组成的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string-的交换\"><a class=\"markdownIt-Anchor\" href=\"#string-的交换\"></a> string 的交换</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"built_in\">string</span> &amp;s2)</span></span>; <span class=\"comment\">// 交换当前字符串与s2的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string-的查找函数\"><a class=\"markdownIt-Anchor\" href=\"#string-的查找函数\"></a> string 的查找函数</h4>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> find(<span class=\"built_in\">char</span> c, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符c在当前字符串的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos, <span class=\"built_in\">int</span> n) const; <span class=\"comment\">// 从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find(const <span class=\"built_in\">string</span> &amp;s, <span class=\"built_in\">int</span> pos = <span class=\"number\">0</span>) const; <span class=\"comment\">// 从pos开始查找字符串s在当前串中的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从查找成功时返回的位置，失败返回string::npos的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(<span class=\"built_in\">char</span> c, <span class=\"built_in\">int</span> pos = npos) const; <span class=\"comment\">// 从pos开始从后向前查找字符c在当前串中的位置。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos = npos) const; </span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">char</span> *s, <span class=\"built_in\">int</span> pos, <span class=\"built_in\">int</span> n = npos) const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> rfind(const <span class=\"built_in\">string</span> &amp;s, <span class=\"built_in\">int</span> pos = npos) const;</span><br><span class=\"line\"><span class=\"comment\">// 从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败返回string::npos的值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const; <span class=\"comment\">// 从pos开始查找字符c第一次出现的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>=0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// 从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>=0)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_first_not_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = 0)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// 从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_of(<span class=\"params\">const</span> <span class=\"params\">string</span> &amp;<span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">char</span> <span class=\"params\">c</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span>, <span class=\"params\">int</span> <span class=\"params\">n</span>)</span> const;</span><br><span class=\"line\"><span class=\"built_in\">int</span> find<span class=\"constructor\">_last_not_of(<span class=\"params\">const</span> <span class=\"params\">char</span> <span class=\"operator\">*</span><span class=\"params\">s</span>, <span class=\"params\">int</span> <span class=\"params\">pos</span> = <span class=\"params\">npos</span>)</span> const;</span><br><span class=\"line\"><span class=\"comment\">// find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的替换函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的替换函数\"></a> string类的替换函数:</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>; <span class=\"comment\">// 把[first0, last0)之间的部分替换为字符串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>; <span class=\"comment\">// 把[first0, last0）之间的部分替换为字符串s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 把[first0, last0) 之间的部分替换为n个字符c</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">replace</span><span class=\"params\">(iterator first0, iterator last0, const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 把[first0, last0)之间的部分替换成[first, last)之间的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的插入函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的插入函数\"></a> string类的插入函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> &amp;s, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 前4个函数在p0位置插入字符串s中pos开始的前n个字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> p0, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 此函数在p0处插入n个字符c</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">insert</span><span class=\"params\">(iterator it, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在it处插入字符c，返回插入后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(iterator it, const_iterator first, const_iterator last)</span></span>; <span class=\"comment\">// 在it处插入[first, last)之间的字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(iterator it, <span class=\"keyword\">int</span> n, <span class=\"keyword\">char</span> c)</span></span>; <span class=\"comment\">// 在it处插入n个字符c</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的删除函数\"><a class=\"markdownIt-Anchor\" href=\"#string类的删除函数\"></a> string类的删除函数</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span><span class=\"params\">(iterator first, iterator last)</span></span>; <span class=\"comment\">// 删除[first, last) 之间的所有字符，返回删除后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">erase</span><span class=\"params\">(iterator it)</span></span>; <span class=\"comment\">// 删除it指向的字符串，返回删除后迭代器的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">string</span> &amp;<span class=\"title\">erase</span><span class=\"params\">(<span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>, <span class=\"keyword\">int</span> n = npos)</span></span>; <span class=\"comment\">// 删除pos开始的n个字符，返回修改后的字符串</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"string类的迭代器处理\"><a class=\"markdownIt-Anchor\" href=\"#string类的迭代器处理\"></a> string类的迭代器处理</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span>类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</span><br><span class=\"line\">用<span class=\"built_in\">string</span>::iterator或<span class=\"built_in\">string</span>::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">begin</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的起始位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">end</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的最后一个字符后面的位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rbegin</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">iterator <span class=\"title\">rbegin</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string 的最后一个字符的位置</span></span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rend</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</span><br><span class=\"line\"><span class=\"function\">const_iterator <span class=\"title\">rend</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 返回string的第一个字符位置的前面</span></span><br><span class=\"line\"></span><br><span class=\"line\">rbegin和rend用于从后向前的迭代访问，通过设置迭代器<span class=\"built_in\">string</span>::reverse_iterator，<span class=\"built_in\">string</span>::const_reverse_iterator实现</span><br></pre></td></tr></table></figure>"},{"title":"音视频相关-视频协议","date":"2019-04-22T09:06:06.000Z","_content":"\n[【转载：51cto】](https://blog.51cto.com/2343338/411983)\n\n<!-- more -->\n\n#### 1.1 音视频协议、通讯协议介绍\n\n##### 1.1.1 两大标准制定组织\n这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（ISO）和国际电信联盟（ITU），相信IT行业的从业者没听说过这两个行业的人很少。\n\n在音视频压缩标准方面，mpeg系列的协议是ISO制定的标准，而H系列的协议则是ITU制定的标准。\n\n##### 1.1.2 视频协议\n目前主要的视频压缩协议有：H.261、H.263、H.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是H.261，它的算法现在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准H.264。H.264单看名字，感觉是ITU组织制定的，其实它还有一个名字叫mpeg-4 Part 10，翻译过来叫mpeg-4 第十部分，这是因为H.264是ISO和ITU组织共同制定的，版权共享。其实，一直以来，H系列的标准制定者和mpeg系列的标准制定者基本上就是同一群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。\n\n从应用的角度看，mpeg系列在消费类应用更广些，大家也更熟悉些，我们熟悉的VCD格式视频主要是mpeg-1，DVD的视频则是mpeg-2，早期大家看的电影在电脑上存盘文件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到最近的H.264。而H系列的标准，用得最多的是视频会议，从H.261到H.263，再到H.263 、H.263 等，再到现在的H.264。\n从技术角度说，H系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比H系列同一代的协议要出得晚些，算法也相对更先进些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到H系列协议的原因。\nH.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，H.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。\n除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。\n\n##### 1.1.3 音频协议\n音频协议也分两大类，ITU组织的主要是用于视频会议的G系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型的g.723支持5.9k/s这样的码率，而且语音音质还很不错。ISO的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 Audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比G系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。\n同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。\n\n##### 1.1.4 上层通讯协议\n在视频会议系统中，目前最流行的有H.323和SIP协议，在流媒体应用中，ISMA rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。\nH.323主要用于视频会议，被称为协议簇，我们前面提到的H系列视频压缩协议和G系列音频压缩协议都属于它的子协议。除了音视频编×××外；它还定义了各种数据应用，包括T.120、T.84、T.434等；另外还包括H.245控制信道、H.225.0呼叫信令信道以及RAS信道。详细的H.323的知识，这里就不深入介绍了。\n\nSIP是由IETF提出来的一个应用控制（信令）协议。正如名字所隐含的--用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。\n\nH.323和SIP分别是通信领域与因特网两大阵营推出的建议。 H.323企图把IP电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而SIP协议侧重于将IP电话作为因特网上的一个应用，较其实应用（如FTP，E-mail等）增加了信令和QoS的要求，它们支持的业务基本相同，也都利用RTP作为媒体传输的协议。但H.323是一个相对复杂的协议。\nRTSP主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用RTSP协议。 \n\n#### 1.2 音视频基本概念介绍 \n##### 1.2.1 视频的基本概念\n###### RGB和YUV\nRGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，BMP文件格式中的像素值等；而YUV主要指亮度和两个色差信号，被称为luminance和chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用YUV格式。\n\n###### YUV格式\nYUV文件格式又分很多种，如果算上存储格式，就更多了，比如YUV444、YUV422、YUV411、YUV420等等，视频压缩用到的是420格式，这是因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、progressive等。\n\n###### 帧率\n每秒钟图像的刷新速度。PAL制式的电视，帧率是25帧每秒，NTSC制式的电视帧率是29.97帧每秒。我们常用的电脑也有刷新率，一般来说，电脑的刷新率要在75赫兹以上，人眼才不会觉得闪。\n\n###### 隔行扫描(interlace)和逐行扫描(progressive)\n一般的电视上都是隔行扫描，而显示器都是逐行扫描。这里有一个场的概念，隔行扫描是一帧等于两场，而逐行扫描则是一帧就是一场。\n\n###### 码率\n它的单位是 bit per second，一般所有描述带宽的概念，单位都是bit，描述存储容量的单位一般都是大B，也就是BYTE（字节）。\n\n###### 分辨率\n图像的分辨率指的是它的像素数，一般用得最多的是CIF，也就是352\\*288，4cif自然就是指704\\*576，而D1的分辨率严格意义上是720\\*576，大小来说和4cif差不多了。当然现在还有很多高清的分辨率，这些我不是太了解，大家感兴趣可以查一下。另外，国外很多时候，对cif的高度取240，这是因为他们的帧率比我们高（29.97hz），自然，高度要小一些了。\n\n###### 实时与非实时\n主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。 延时\n也是形容编码器的一个重要指标，一般来说，200ms到300ms人的感觉不会很明显，到了500毫秒的话，还是可以很明显感觉到的。\n\n###### 音视频同步\n作为视频会议的应用，一般要求做到所谓的“唇同步”。基本的保证音视频同步的手段就是时间戳（time stamp）。\n\n###### 复合视频和S-Video\nNTSC和PAL彩色视频信号是这样构成的--首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多种数据“叠加”起来的，故称之为“复合视频”。S-Video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。它的 功能是将RGB三原色和亮度进行分离处理。\n\n###### NTSC、PAL和SECAM\n基带视频是一种简单的模拟信号，由视频模拟数据和视频同步数据构成，用于接收端正确地显示图像。信号的细节取决于应用的视频标准或者“制式”--NTSC（美国全国电视标准委员会，National Television Standards Committee）、PAL（逐行倒相，Phase Alternate Line）以及SECAM（顺序传送与存储彩色电视系统，法国采用的一种电视制式，SEquential Couleur Avec Memoire）。\n中国的电视信号一般都是PAL，而美日则是NTSC。这2个制式的帧率，图像尺寸都有所不同。\n线数\n我们在买摄像头的时候，经常会提到一个叫线数的概念，它其实就是分辨率中的高（height）。举个例子：PAL制式的D1图像，线数就是576。\n\n###### 亮度、饱和度和对比度\n英文名分别是：brightness、saturation和 contrast。这是三个表示图像的重要指标。\n\n##### 1.2.2 音频的基本概念\n\n###### 采样率\n音频的采样率其实类似视频的帧率，意思是每秒钟采样的次数。G.711的采样率是8k（人的语音大概就在这个频率范围以内），而mp3支持的典型采样率是 44.1kHz（超过人耳响应频率的2倍多一点——奈奎斯特定理）。很明显，mp3压缩的原始声音要比g.711好多了。\n\n###### 采样精度\n就是每个采样进行模数转换时的量化系数。G.711是8bit采样精度，而mp3典型的是16bit。\n\n###### 回声消除 \n视频会议应用中的音频最大问题。回声产生的原因很复杂，一般认为，在互联网中的语音传输，延时来源有三个：压缩延迟、分组传输延迟和处理延迟。语音压缩延迟是产生回声的主要延迟，例如在G.723.1标准中，压缩一帧（30ms）的最大延迟是37.5ms。分组传输延迟也是一个很重要的来源，测试表明，端到端的最大传输延迟可达250ms以上。处理延迟是指语音包的封装时延及其缓冲时延等。\n\n##### 1.3 视讯产品简介\n###### 1.3.1 MP4\n这是最近两年开始流行的新产品，它的定义其实业有些混乱。目前流行的说法是：只要和视频沾边的便携式播放器，都叫MP4。不过下面的图更能说明问题。\n\n###### 1.3.2 光端机\n一种完成电——光信号转换的设备。主要用于模拟远程视频监控系统，它可将远端的摄像头模拟信号转换成光信号传送到监控中心，配合监控中心的DVR使用。\n\n###### 1.3.3 视频会议MCU\n它是视频会议的核心设备之一。当参与视频会议的终端超过2个时，就必须通过MCU来召开会议。\nMCU的基本功能是媒体流转发和混音，并进行会议管理，随着视频会议的发展，MCU支持的功能也越来越多，比如：混屏、远程摄像头控制等功能。","source":"_posts/音视频相关-协议.md","raw":"---\ntitle: 音视频相关-视频协议\ndate: 2019-04-22 17:06:06\ntags: [音视频, 视频协议]\ncategories: 音视频\n---\n\n[【转载：51cto】](https://blog.51cto.com/2343338/411983)\n\n<!-- more -->\n\n#### 1.1 音视频协议、通讯协议介绍\n\n##### 1.1.1 两大标准制定组织\n这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（ISO）和国际电信联盟（ITU），相信IT行业的从业者没听说过这两个行业的人很少。\n\n在音视频压缩标准方面，mpeg系列的协议是ISO制定的标准，而H系列的协议则是ITU制定的标准。\n\n##### 1.1.2 视频协议\n目前主要的视频压缩协议有：H.261、H.263、H.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是H.261，它的算法现在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准H.264。H.264单看名字，感觉是ITU组织制定的，其实它还有一个名字叫mpeg-4 Part 10，翻译过来叫mpeg-4 第十部分，这是因为H.264是ISO和ITU组织共同制定的，版权共享。其实，一直以来，H系列的标准制定者和mpeg系列的标准制定者基本上就是同一群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。\n\n从应用的角度看，mpeg系列在消费类应用更广些，大家也更熟悉些，我们熟悉的VCD格式视频主要是mpeg-1，DVD的视频则是mpeg-2，早期大家看的电影在电脑上存盘文件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到最近的H.264。而H系列的标准，用得最多的是视频会议，从H.261到H.263，再到H.263 、H.263 等，再到现在的H.264。\n从技术角度说，H系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比H系列同一代的协议要出得晚些，算法也相对更先进些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到H系列协议的原因。\nH.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，H.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。\n除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。\n\n##### 1.1.3 音频协议\n音频协议也分两大类，ITU组织的主要是用于视频会议的G系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型的g.723支持5.9k/s这样的码率，而且语音音质还很不错。ISO的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 Audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比G系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。\n同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。\n\n##### 1.1.4 上层通讯协议\n在视频会议系统中，目前最流行的有H.323和SIP协议，在流媒体应用中，ISMA rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。\nH.323主要用于视频会议，被称为协议簇，我们前面提到的H系列视频压缩协议和G系列音频压缩协议都属于它的子协议。除了音视频编×××外；它还定义了各种数据应用，包括T.120、T.84、T.434等；另外还包括H.245控制信道、H.225.0呼叫信令信道以及RAS信道。详细的H.323的知识，这里就不深入介绍了。\n\nSIP是由IETF提出来的一个应用控制（信令）协议。正如名字所隐含的--用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。\n\nH.323和SIP分别是通信领域与因特网两大阵营推出的建议。 H.323企图把IP电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而SIP协议侧重于将IP电话作为因特网上的一个应用，较其实应用（如FTP，E-mail等）增加了信令和QoS的要求，它们支持的业务基本相同，也都利用RTP作为媒体传输的协议。但H.323是一个相对复杂的协议。\nRTSP主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用RTSP协议。 \n\n#### 1.2 音视频基本概念介绍 \n##### 1.2.1 视频的基本概念\n###### RGB和YUV\nRGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，BMP文件格式中的像素值等；而YUV主要指亮度和两个色差信号，被称为luminance和chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用YUV格式。\n\n###### YUV格式\nYUV文件格式又分很多种，如果算上存储格式，就更多了，比如YUV444、YUV422、YUV411、YUV420等等，视频压缩用到的是420格式，这是因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、progressive等。\n\n###### 帧率\n每秒钟图像的刷新速度。PAL制式的电视，帧率是25帧每秒，NTSC制式的电视帧率是29.97帧每秒。我们常用的电脑也有刷新率，一般来说，电脑的刷新率要在75赫兹以上，人眼才不会觉得闪。\n\n###### 隔行扫描(interlace)和逐行扫描(progressive)\n一般的电视上都是隔行扫描，而显示器都是逐行扫描。这里有一个场的概念，隔行扫描是一帧等于两场，而逐行扫描则是一帧就是一场。\n\n###### 码率\n它的单位是 bit per second，一般所有描述带宽的概念，单位都是bit，描述存储容量的单位一般都是大B，也就是BYTE（字节）。\n\n###### 分辨率\n图像的分辨率指的是它的像素数，一般用得最多的是CIF，也就是352\\*288，4cif自然就是指704\\*576，而D1的分辨率严格意义上是720\\*576，大小来说和4cif差不多了。当然现在还有很多高清的分辨率，这些我不是太了解，大家感兴趣可以查一下。另外，国外很多时候，对cif的高度取240，这是因为他们的帧率比我们高（29.97hz），自然，高度要小一些了。\n\n###### 实时与非实时\n主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。 延时\n也是形容编码器的一个重要指标，一般来说，200ms到300ms人的感觉不会很明显，到了500毫秒的话，还是可以很明显感觉到的。\n\n###### 音视频同步\n作为视频会议的应用，一般要求做到所谓的“唇同步”。基本的保证音视频同步的手段就是时间戳（time stamp）。\n\n###### 复合视频和S-Video\nNTSC和PAL彩色视频信号是这样构成的--首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多种数据“叠加”起来的，故称之为“复合视频”。S-Video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。它的 功能是将RGB三原色和亮度进行分离处理。\n\n###### NTSC、PAL和SECAM\n基带视频是一种简单的模拟信号，由视频模拟数据和视频同步数据构成，用于接收端正确地显示图像。信号的细节取决于应用的视频标准或者“制式”--NTSC（美国全国电视标准委员会，National Television Standards Committee）、PAL（逐行倒相，Phase Alternate Line）以及SECAM（顺序传送与存储彩色电视系统，法国采用的一种电视制式，SEquential Couleur Avec Memoire）。\n中国的电视信号一般都是PAL，而美日则是NTSC。这2个制式的帧率，图像尺寸都有所不同。\n线数\n我们在买摄像头的时候，经常会提到一个叫线数的概念，它其实就是分辨率中的高（height）。举个例子：PAL制式的D1图像，线数就是576。\n\n###### 亮度、饱和度和对比度\n英文名分别是：brightness、saturation和 contrast。这是三个表示图像的重要指标。\n\n##### 1.2.2 音频的基本概念\n\n###### 采样率\n音频的采样率其实类似视频的帧率，意思是每秒钟采样的次数。G.711的采样率是8k（人的语音大概就在这个频率范围以内），而mp3支持的典型采样率是 44.1kHz（超过人耳响应频率的2倍多一点——奈奎斯特定理）。很明显，mp3压缩的原始声音要比g.711好多了。\n\n###### 采样精度\n就是每个采样进行模数转换时的量化系数。G.711是8bit采样精度，而mp3典型的是16bit。\n\n###### 回声消除 \n视频会议应用中的音频最大问题。回声产生的原因很复杂，一般认为，在互联网中的语音传输，延时来源有三个：压缩延迟、分组传输延迟和处理延迟。语音压缩延迟是产生回声的主要延迟，例如在G.723.1标准中，压缩一帧（30ms）的最大延迟是37.5ms。分组传输延迟也是一个很重要的来源，测试表明，端到端的最大传输延迟可达250ms以上。处理延迟是指语音包的封装时延及其缓冲时延等。\n\n##### 1.3 视讯产品简介\n###### 1.3.1 MP4\n这是最近两年开始流行的新产品，它的定义其实业有些混乱。目前流行的说法是：只要和视频沾边的便携式播放器，都叫MP4。不过下面的图更能说明问题。\n\n###### 1.3.2 光端机\n一种完成电——光信号转换的设备。主要用于模拟远程视频监控系统，它可将远端的摄像头模拟信号转换成光信号传送到监控中心，配合监控中心的DVR使用。\n\n###### 1.3.3 视频会议MCU\n它是视频会议的核心设备之一。当参与视频会议的终端超过2个时，就必须通过MCU来召开会议。\nMCU的基本功能是媒体流转发和混音，并进行会议管理，随着视频会议的发展，MCU支持的功能也越来越多，比如：混屏、远程摄像头控制等功能。","slug":"音视频相关-协议","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxib00cksifygvj6qx9q","content":"<p><a href=\"https://blog.51cto.com/2343338/411983\" target=\"_blank\" rel=\"noopener\">【转载：51cto】</a></p>\n<a id=\"more\"></a>\n<h4 id=\"11-音视频协议-通讯协议介绍\"><a class=\"markdownIt-Anchor\" href=\"#11-音视频协议-通讯协议介绍\"></a> 1.1 音视频协议、通讯协议介绍</h4>\n<h5 id=\"111-两大标准制定组织\"><a class=\"markdownIt-Anchor\" href=\"#111-两大标准制定组织\"></a> 1.1.1 两大标准制定组织</h5>\n<p>这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（ISO）和国际电信联盟（ITU），相信IT行业的从业者没听说过这两个行业的人很少。</p>\n<p>在音视频压缩标准方面，mpeg系列的协议是ISO制定的标准，而H系列的协议则是ITU制定的标准。</p>\n<h5 id=\"112-视频协议\"><a class=\"markdownIt-Anchor\" href=\"#112-视频协议\"></a> 1.1.2 视频协议</h5>\n<p>目前主要的视频压缩协议有：H.261、H.263、H.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是H.261，它的算法现在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准H.264。H.264单看名字，感觉是ITU组织制定的，其实它还有一个名字叫mpeg-4 Part 10，翻译过来叫mpeg-4 第十部分，这是因为H.264是ISO和ITU组织共同制定的，版权共享。其实，一直以来，H系列的标准制定者和mpeg系列的标准制定者基本上就是同一群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。</p>\n<p>从应用的角度看，mpeg系列在消费类应用更广些，大家也更熟悉些，我们熟悉的VCD格式视频主要是mpeg-1，DVD的视频则是mpeg-2，早期大家看的电影在电脑上存盘文件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到最近的H.264。而H系列的标准，用得最多的是视频会议，从H.261到H.263，再到H.263 、H.263 等，再到现在的H.264。<br>\n从技术角度说，H系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比H系列同一代的协议要出得晚些，算法也相对更先进些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到H系列协议的原因。<br>\nH.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，H.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。<br>\n除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。</p>\n<h5 id=\"113-音频协议\"><a class=\"markdownIt-Anchor\" href=\"#113-音频协议\"></a> 1.1.3 音频协议</h5>\n<p>音频协议也分两大类，ITU组织的主要是用于视频会议的G系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型的g.723支持5.9k/s这样的码率，而且语音音质还很不错。ISO的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 Audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比G系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。<br>\n同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。</p>\n<h5 id=\"114-上层通讯协议\"><a class=\"markdownIt-Anchor\" href=\"#114-上层通讯协议\"></a> 1.1.4 上层通讯协议</h5>\n<p>在视频会议系统中，目前最流行的有H.323和SIP协议，在流媒体应用中，ISMA rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。<br>\nH.323主要用于视频会议，被称为协议簇，我们前面提到的H系列视频压缩协议和G系列音频压缩协议都属于它的子协议。除了音视频编×××外；它还定义了各种数据应用，包括T.120、T.84、T.434等；另外还包括H.245控制信道、H.225.0呼叫信令信道以及RAS信道。详细的H.323的知识，这里就不深入介绍了。</p>\n<p>SIP是由IETF提出来的一个应用控制（信令）协议。正如名字所隐含的–用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。</p>\n<p>H.323和SIP分别是通信领域与因特网两大阵营推出的建议。 H.323企图把IP电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而SIP协议侧重于将IP电话作为因特网上的一个应用，较其实应用（如FTP，E-mail等）增加了信令和QoS的要求，它们支持的业务基本相同，也都利用RTP作为媒体传输的协议。但H.323是一个相对复杂的协议。<br>\nRTSP主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用RTSP协议。</p>\n<h4 id=\"12-音视频基本概念介绍\"><a class=\"markdownIt-Anchor\" href=\"#12-音视频基本概念介绍\"></a> 1.2 音视频基本概念介绍</h4>\n<h5 id=\"121-视频的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#121-视频的基本概念\"></a> 1.2.1 视频的基本概念</h5>\n<h6 id=\"rgb和yuv\"><a class=\"markdownIt-Anchor\" href=\"#rgb和yuv\"></a> RGB和YUV</h6>\n<p>RGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，BMP文件格式中的像素值等；而YUV主要指亮度和两个色差信号，被称为luminance和chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用YUV格式。</p>\n<h6 id=\"yuv格式\"><a class=\"markdownIt-Anchor\" href=\"#yuv格式\"></a> YUV格式</h6>\n<p>YUV文件格式又分很多种，如果算上存储格式，就更多了，比如YUV444、YUV422、YUV411、YUV420等等，视频压缩用到的是420格式，这是因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、progressive等。</p>\n<h6 id=\"帧率\"><a class=\"markdownIt-Anchor\" href=\"#帧率\"></a> 帧率</h6>\n<p>每秒钟图像的刷新速度。PAL制式的电视，帧率是25帧每秒，NTSC制式的电视帧率是29.97帧每秒。我们常用的电脑也有刷新率，一般来说，电脑的刷新率要在75赫兹以上，人眼才不会觉得闪。</p>\n<h6 id=\"隔行扫描interlace和逐行扫描progressive\"><a class=\"markdownIt-Anchor\" href=\"#隔行扫描interlace和逐行扫描progressive\"></a> 隔行扫描(interlace)和逐行扫描(progressive)</h6>\n<p>一般的电视上都是隔行扫描，而显示器都是逐行扫描。这里有一个场的概念，隔行扫描是一帧等于两场，而逐行扫描则是一帧就是一场。</p>\n<h6 id=\"码率\"><a class=\"markdownIt-Anchor\" href=\"#码率\"></a> 码率</h6>\n<p>它的单位是 bit per second，一般所有描述带宽的概念，单位都是bit，描述存储容量的单位一般都是大B，也就是BYTE（字节）。</p>\n<h6 id=\"分辨率\"><a class=\"markdownIt-Anchor\" href=\"#分辨率\"></a> 分辨率</h6>\n<p>图像的分辨率指的是它的像素数，一般用得最多的是CIF，也就是352*288，4cif自然就是指704*576，而D1的分辨率严格意义上是720*576，大小来说和4cif差不多了。当然现在还有很多高清的分辨率，这些我不是太了解，大家感兴趣可以查一下。另外，国外很多时候，对cif的高度取240，这是因为他们的帧率比我们高（29.97hz），自然，高度要小一些了。</p>\n<h6 id=\"实时与非实时\"><a class=\"markdownIt-Anchor\" href=\"#实时与非实时\"></a> 实时与非实时</h6>\n<p>主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。 延时<br>\n也是形容编码器的一个重要指标，一般来说，200ms到300ms人的感觉不会很明显，到了500毫秒的话，还是可以很明显感觉到的。</p>\n<h6 id=\"音视频同步\"><a class=\"markdownIt-Anchor\" href=\"#音视频同步\"></a> 音视频同步</h6>\n<p>作为视频会议的应用，一般要求做到所谓的“唇同步”。基本的保证音视频同步的手段就是时间戳（time stamp）。</p>\n<h6 id=\"复合视频和s-video\"><a class=\"markdownIt-Anchor\" href=\"#复合视频和s-video\"></a> 复合视频和S-Video</h6>\n<p>NTSC和PAL彩色视频信号是这样构成的–首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多种数据“叠加”起来的，故称之为“复合视频”。S-Video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。它的 功能是将RGB三原色和亮度进行分离处理。</p>\n<h6 id=\"ntsc-pal和secam\"><a class=\"markdownIt-Anchor\" href=\"#ntsc-pal和secam\"></a> NTSC、PAL和SECAM</h6>\n<p>基带视频是一种简单的模拟信号，由视频模拟数据和视频同步数据构成，用于接收端正确地显示图像。信号的细节取决于应用的视频标准或者“制式”–NTSC（美国全国电视标准委员会，National Television Standards Committee）、PAL（逐行倒相，Phase Alternate Line）以及SECAM（顺序传送与存储彩色电视系统，法国采用的一种电视制式，SEquential Couleur Avec Memoire）。<br>\n中国的电视信号一般都是PAL，而美日则是NTSC。这2个制式的帧率，图像尺寸都有所不同。<br>\n线数<br>\n我们在买摄像头的时候，经常会提到一个叫线数的概念，它其实就是分辨率中的高（height）。举个例子：PAL制式的D1图像，线数就是576。</p>\n<h6 id=\"亮度-饱和度和对比度\"><a class=\"markdownIt-Anchor\" href=\"#亮度-饱和度和对比度\"></a> 亮度、饱和度和对比度</h6>\n<p>英文名分别是：brightness、saturation和 contrast。这是三个表示图像的重要指标。</p>\n<h5 id=\"122-音频的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#122-音频的基本概念\"></a> 1.2.2 音频的基本概念</h5>\n<h6 id=\"采样率\"><a class=\"markdownIt-Anchor\" href=\"#采样率\"></a> 采样率</h6>\n<p>音频的采样率其实类似视频的帧率，意思是每秒钟采样的次数。G.711的采样率是8k（人的语音大概就在这个频率范围以内），而mp3支持的典型采样率是 44.1kHz（超过人耳响应频率的2倍多一点——奈奎斯特定理）。很明显，mp3压缩的原始声音要比g.711好多了。</p>\n<h6 id=\"采样精度\"><a class=\"markdownIt-Anchor\" href=\"#采样精度\"></a> 采样精度</h6>\n<p>就是每个采样进行模数转换时的量化系数。G.711是8bit采样精度，而mp3典型的是16bit。</p>\n<h6 id=\"回声消除\"><a class=\"markdownIt-Anchor\" href=\"#回声消除\"></a> 回声消除</h6>\n<p>视频会议应用中的音频最大问题。回声产生的原因很复杂，一般认为，在互联网中的语音传输，延时来源有三个：压缩延迟、分组传输延迟和处理延迟。语音压缩延迟是产生回声的主要延迟，例如在G.723.1标准中，压缩一帧（30ms）的最大延迟是37.5ms。分组传输延迟也是一个很重要的来源，测试表明，端到端的最大传输延迟可达250ms以上。处理延迟是指语音包的封装时延及其缓冲时延等。</p>\n<h5 id=\"13-视讯产品简介\"><a class=\"markdownIt-Anchor\" href=\"#13-视讯产品简介\"></a> 1.3 视讯产品简介</h5>\n<h6 id=\"131-mp4\"><a class=\"markdownIt-Anchor\" href=\"#131-mp4\"></a> 1.3.1 MP4</h6>\n<p>这是最近两年开始流行的新产品，它的定义其实业有些混乱。目前流行的说法是：只要和视频沾边的便携式播放器，都叫MP4。不过下面的图更能说明问题。</p>\n<h6 id=\"132-光端机\"><a class=\"markdownIt-Anchor\" href=\"#132-光端机\"></a> 1.3.2 光端机</h6>\n<p>一种完成电——光信号转换的设备。主要用于模拟远程视频监控系统，它可将远端的摄像头模拟信号转换成光信号传送到监控中心，配合监控中心的DVR使用。</p>\n<h6 id=\"133-视频会议mcu\"><a class=\"markdownIt-Anchor\" href=\"#133-视频会议mcu\"></a> 1.3.3 视频会议MCU</h6>\n<p>它是视频会议的核心设备之一。当参与视频会议的终端超过2个时，就必须通过MCU来召开会议。<br>\nMCU的基本功能是媒体流转发和混音，并进行会议管理，随着视频会议的发展，MCU支持的功能也越来越多，比如：混屏、远程摄像头控制等功能。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://blog.51cto.com/2343338/411983\" target=\"_blank\" rel=\"noopener\">【转载：51cto】</a></p>","more":"<h4 id=\"11-音视频协议-通讯协议介绍\"><a class=\"markdownIt-Anchor\" href=\"#11-音视频协议-通讯协议介绍\"></a> 1.1 音视频协议、通讯协议介绍</h4>\n<h5 id=\"111-两大标准制定组织\"><a class=\"markdownIt-Anchor\" href=\"#111-两大标准制定组织\"></a> 1.1.1 两大标准制定组织</h5>\n<p>这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（ISO）和国际电信联盟（ITU），相信IT行业的从业者没听说过这两个行业的人很少。</p>\n<p>在音视频压缩标准方面，mpeg系列的协议是ISO制定的标准，而H系列的协议则是ITU制定的标准。</p>\n<h5 id=\"112-视频协议\"><a class=\"markdownIt-Anchor\" href=\"#112-视频协议\"></a> 1.1.2 视频协议</h5>\n<p>目前主要的视频压缩协议有：H.261、H.263、H.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是H.261，它的算法现在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准H.264。H.264单看名字，感觉是ITU组织制定的，其实它还有一个名字叫mpeg-4 Part 10，翻译过来叫mpeg-4 第十部分，这是因为H.264是ISO和ITU组织共同制定的，版权共享。其实，一直以来，H系列的标准制定者和mpeg系列的标准制定者基本上就是同一群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。</p>\n<p>从应用的角度看，mpeg系列在消费类应用更广些，大家也更熟悉些，我们熟悉的VCD格式视频主要是mpeg-1，DVD的视频则是mpeg-2，早期大家看的电影在电脑上存盘文件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到最近的H.264。而H系列的标准，用得最多的是视频会议，从H.261到H.263，再到H.263 、H.263 等，再到现在的H.264。<br>\n从技术角度说，H系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比H系列同一代的协议要出得晚些，算法也相对更先进些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到H系列协议的原因。<br>\nH.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，H.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。<br>\n除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。</p>\n<h5 id=\"113-音频协议\"><a class=\"markdownIt-Anchor\" href=\"#113-音频协议\"></a> 1.1.3 音频协议</h5>\n<p>音频协议也分两大类，ITU组织的主要是用于视频会议的G系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型的g.723支持5.9k/s这样的码率，而且语音音质还很不错。ISO的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 Audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比G系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。<br>\n同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。</p>\n<h5 id=\"114-上层通讯协议\"><a class=\"markdownIt-Anchor\" href=\"#114-上层通讯协议\"></a> 1.1.4 上层通讯协议</h5>\n<p>在视频会议系统中，目前最流行的有H.323和SIP协议，在流媒体应用中，ISMA rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。<br>\nH.323主要用于视频会议，被称为协议簇，我们前面提到的H系列视频压缩协议和G系列音频压缩协议都属于它的子协议。除了音视频编×××外；它还定义了各种数据应用，包括T.120、T.84、T.434等；另外还包括H.245控制信道、H.225.0呼叫信令信道以及RAS信道。详细的H.323的知识，这里就不深入介绍了。</p>\n<p>SIP是由IETF提出来的一个应用控制（信令）协议。正如名字所隐含的–用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。</p>\n<p>H.323和SIP分别是通信领域与因特网两大阵营推出的建议。 H.323企图把IP电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而SIP协议侧重于将IP电话作为因特网上的一个应用，较其实应用（如FTP，E-mail等）增加了信令和QoS的要求，它们支持的业务基本相同，也都利用RTP作为媒体传输的协议。但H.323是一个相对复杂的协议。<br>\nRTSP主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用RTSP协议。</p>\n<h4 id=\"12-音视频基本概念介绍\"><a class=\"markdownIt-Anchor\" href=\"#12-音视频基本概念介绍\"></a> 1.2 音视频基本概念介绍</h4>\n<h5 id=\"121-视频的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#121-视频的基本概念\"></a> 1.2.1 视频的基本概念</h5>\n<h6 id=\"rgb和yuv\"><a class=\"markdownIt-Anchor\" href=\"#rgb和yuv\"></a> RGB和YUV</h6>\n<p>RGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，BMP文件格式中的像素值等；而YUV主要指亮度和两个色差信号，被称为luminance和chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用YUV格式。</p>\n<h6 id=\"yuv格式\"><a class=\"markdownIt-Anchor\" href=\"#yuv格式\"></a> YUV格式</h6>\n<p>YUV文件格式又分很多种，如果算上存储格式，就更多了，比如YUV444、YUV422、YUV411、YUV420等等，视频压缩用到的是420格式，这是因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、progressive等。</p>\n<h6 id=\"帧率\"><a class=\"markdownIt-Anchor\" href=\"#帧率\"></a> 帧率</h6>\n<p>每秒钟图像的刷新速度。PAL制式的电视，帧率是25帧每秒，NTSC制式的电视帧率是29.97帧每秒。我们常用的电脑也有刷新率，一般来说，电脑的刷新率要在75赫兹以上，人眼才不会觉得闪。</p>\n<h6 id=\"隔行扫描interlace和逐行扫描progressive\"><a class=\"markdownIt-Anchor\" href=\"#隔行扫描interlace和逐行扫描progressive\"></a> 隔行扫描(interlace)和逐行扫描(progressive)</h6>\n<p>一般的电视上都是隔行扫描，而显示器都是逐行扫描。这里有一个场的概念，隔行扫描是一帧等于两场，而逐行扫描则是一帧就是一场。</p>\n<h6 id=\"码率\"><a class=\"markdownIt-Anchor\" href=\"#码率\"></a> 码率</h6>\n<p>它的单位是 bit per second，一般所有描述带宽的概念，单位都是bit，描述存储容量的单位一般都是大B，也就是BYTE（字节）。</p>\n<h6 id=\"分辨率\"><a class=\"markdownIt-Anchor\" href=\"#分辨率\"></a> 分辨率</h6>\n<p>图像的分辨率指的是它的像素数，一般用得最多的是CIF，也就是352*288，4cif自然就是指704*576，而D1的分辨率严格意义上是720*576，大小来说和4cif差不多了。当然现在还有很多高清的分辨率，这些我不是太了解，大家感兴趣可以查一下。另外，国外很多时候，对cif的高度取240，这是因为他们的帧率比我们高（29.97hz），自然，高度要小一些了。</p>\n<h6 id=\"实时与非实时\"><a class=\"markdownIt-Anchor\" href=\"#实时与非实时\"></a> 实时与非实时</h6>\n<p>主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。 延时<br>\n也是形容编码器的一个重要指标，一般来说，200ms到300ms人的感觉不会很明显，到了500毫秒的话，还是可以很明显感觉到的。</p>\n<h6 id=\"音视频同步\"><a class=\"markdownIt-Anchor\" href=\"#音视频同步\"></a> 音视频同步</h6>\n<p>作为视频会议的应用，一般要求做到所谓的“唇同步”。基本的保证音视频同步的手段就是时间戳（time stamp）。</p>\n<h6 id=\"复合视频和s-video\"><a class=\"markdownIt-Anchor\" href=\"#复合视频和s-video\"></a> 复合视频和S-Video</h6>\n<p>NTSC和PAL彩色视频信号是这样构成的–首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多种数据“叠加”起来的，故称之为“复合视频”。S-Video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。它的 功能是将RGB三原色和亮度进行分离处理。</p>\n<h6 id=\"ntsc-pal和secam\"><a class=\"markdownIt-Anchor\" href=\"#ntsc-pal和secam\"></a> NTSC、PAL和SECAM</h6>\n<p>基带视频是一种简单的模拟信号，由视频模拟数据和视频同步数据构成，用于接收端正确地显示图像。信号的细节取决于应用的视频标准或者“制式”–NTSC（美国全国电视标准委员会，National Television Standards Committee）、PAL（逐行倒相，Phase Alternate Line）以及SECAM（顺序传送与存储彩色电视系统，法国采用的一种电视制式，SEquential Couleur Avec Memoire）。<br>\n中国的电视信号一般都是PAL，而美日则是NTSC。这2个制式的帧率，图像尺寸都有所不同。<br>\n线数<br>\n我们在买摄像头的时候，经常会提到一个叫线数的概念，它其实就是分辨率中的高（height）。举个例子：PAL制式的D1图像，线数就是576。</p>\n<h6 id=\"亮度-饱和度和对比度\"><a class=\"markdownIt-Anchor\" href=\"#亮度-饱和度和对比度\"></a> 亮度、饱和度和对比度</h6>\n<p>英文名分别是：brightness、saturation和 contrast。这是三个表示图像的重要指标。</p>\n<h5 id=\"122-音频的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#122-音频的基本概念\"></a> 1.2.2 音频的基本概念</h5>\n<h6 id=\"采样率\"><a class=\"markdownIt-Anchor\" href=\"#采样率\"></a> 采样率</h6>\n<p>音频的采样率其实类似视频的帧率，意思是每秒钟采样的次数。G.711的采样率是8k（人的语音大概就在这个频率范围以内），而mp3支持的典型采样率是 44.1kHz（超过人耳响应频率的2倍多一点——奈奎斯特定理）。很明显，mp3压缩的原始声音要比g.711好多了。</p>\n<h6 id=\"采样精度\"><a class=\"markdownIt-Anchor\" href=\"#采样精度\"></a> 采样精度</h6>\n<p>就是每个采样进行模数转换时的量化系数。G.711是8bit采样精度，而mp3典型的是16bit。</p>\n<h6 id=\"回声消除\"><a class=\"markdownIt-Anchor\" href=\"#回声消除\"></a> 回声消除</h6>\n<p>视频会议应用中的音频最大问题。回声产生的原因很复杂，一般认为，在互联网中的语音传输，延时来源有三个：压缩延迟、分组传输延迟和处理延迟。语音压缩延迟是产生回声的主要延迟，例如在G.723.1标准中，压缩一帧（30ms）的最大延迟是37.5ms。分组传输延迟也是一个很重要的来源，测试表明，端到端的最大传输延迟可达250ms以上。处理延迟是指语音包的封装时延及其缓冲时延等。</p>\n<h5 id=\"13-视讯产品简介\"><a class=\"markdownIt-Anchor\" href=\"#13-视讯产品简介\"></a> 1.3 视讯产品简介</h5>\n<h6 id=\"131-mp4\"><a class=\"markdownIt-Anchor\" href=\"#131-mp4\"></a> 1.3.1 MP4</h6>\n<p>这是最近两年开始流行的新产品，它的定义其实业有些混乱。目前流行的说法是：只要和视频沾边的便携式播放器，都叫MP4。不过下面的图更能说明问题。</p>\n<h6 id=\"132-光端机\"><a class=\"markdownIt-Anchor\" href=\"#132-光端机\"></a> 1.3.2 光端机</h6>\n<p>一种完成电——光信号转换的设备。主要用于模拟远程视频监控系统，它可将远端的摄像头模拟信号转换成光信号传送到监控中心，配合监控中心的DVR使用。</p>\n<h6 id=\"133-视频会议mcu\"><a class=\"markdownIt-Anchor\" href=\"#133-视频会议mcu\"></a> 1.3.3 视频会议MCU</h6>\n<p>它是视频会议的核心设备之一。当参与视频会议的终端超过2个时，就必须通过MCU来召开会议。<br>\nMCU的基本功能是媒体流转发和混音，并进行会议管理，随着视频会议的发展，MCU支持的功能也越来越多，比如：混屏、远程摄像头控制等功能。</p>"},{"title":"查看被删的微信好友","date":"2016-04-01T06:33:06.000Z","_content":"## 查看被删的微信好友\n\n<!-- more -->\n\n[来自这里](https://github.com/0x5e/wechat-deleted-friends)\n\n> 原理：\n\n查看被删的微信好友\n原理就是新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的)\n用的是微信网页版的接口\n查询结果可能会引起一些心理上的不适,请小心使用.\nMac OS用法: 启动Terminal\n\n```\n\t$ python wechat.py\n\n```\n下面是wechat.py的代码\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom __future__ import print_function\n\nimport os\ntry:\n    from urllib import urlencode, quote_plus\nexcept ImportError:\n    from urllib.parse import urlencode, quote_plus\n\ntry:\n    import urllib2 as wdf_urllib\n    from cookielib import CookieJar\nexcept ImportError:\n    import urllib.request as wdf_urllib\n    from http.cookiejar import CookieJar\n\nimport re\nimport time\nimport xml.dom.minidom\nimport json\nimport sys\nimport math\nimport subprocess\nimport ssl\nimport thread\n\nDEBUG = False\n\nMAX_GROUP_NUM = 35  # 每组人数\nINTERFACE_CALLING_INTERVAL = 20  # 接口调用时间间隔, 间隔太短容易出现\"操作太频繁\", 会被限制操作半小时左右\nMAX_PROGRESS_LEN = 50\n\nQRImagePath = os.path.join(os.getcwd(), 'qrcode.jpg')\n\ntip = 0\nuuid = ''\n\nbase_uri = ''\nredirect_uri = ''\npush_uri = ''\n\nskey = ''\nwxsid = ''\nwxuin = ''\npass_ticket = ''\ndeviceId = 'e000000000000000'\n\nBaseRequest = {}\n\nContactList = []\nMy = []\nSyncKey = []\n\ntry:\n    xrange\n    range = xrange\nexcept:\n    # python 3\n    pass\n\n\ndef responseState(func, BaseResponse):\n    ErrMsg = BaseResponse['ErrMsg']\n    Ret = BaseResponse['Ret']\n    if DEBUG or Ret != 0:\n        print('func: %s, Ret: %d, ErrMsg: %s' % (func, Ret, ErrMsg))\n\n    if Ret != 0:\n        return False\n\n    return True\n\n\ndef getRequest(url, data=None):\n    try:\n        data = data.encode('utf-8')\n    except:\n        pass\n    finally:\n        return wdf_urllib.Request(url=url, data=data)\n\n\ndef getUUID():\n    global uuid\n\n    url = 'https://login.weixin.qq.com/jslogin'\n    params = {\n        'appid': 'wx782c26e4c19acffb',\n        'fun': 'new',\n        'lang': 'zh_CN',\n        '_': int(time.time()),\n    }\n\n    request = getRequest(url=url, data=urlencode(params))\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";\n    regx = r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n    uuid = pm.group(2)\n\n    if code == '200':\n        return True\n\n    return False\n\n\ndef showQRImage():\n    global tip\n\n    url = 'https://login.weixin.qq.com/qrcode/' + uuid\n    params = {\n        't': 'webwx',\n        '_': int(time.time()),\n    }\n\n    request = getRequest(url=url, data=urlencode(params))\n    response = wdf_urllib.urlopen(request)\n\n    tip = 1\n\n    f = open(QRImagePath, 'wb')\n    f.write(response.read())\n    f.close()\n\n    if sys.platform.find('darwin') >= 0:\n        subprocess.call(['open', QRImagePath])\n    elif sys.platform.find('linux') >= 0:\n        subprocess.call(['xdg-open', QRImagePath])\n    else:\n        os.startfile(QRImagePath)\n\n    print('请使用微信扫描二维码以登录')\n\n\ndef waitForLogin():\n    global tip, base_uri, redirect_uri, push_uri\n\n    url = 'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s' % (\n        tip, uuid, int(time.time()))\n\n    request = getRequest(url=url)\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.code=500;\n    regx = r'window.code=(\\d+);'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n\n    if code == '201':  # 已扫描\n        print('成功扫描,请在手机上点击确认以登录')\n        tip = 0\n    elif code == '200':  # 已登录\n        print('正在登录...')\n        regx = r'window.redirect_uri=\"(\\S+?)\";'\n        pm = re.search(regx, data)\n        redirect_uri = pm.group(1) + '&fun=new'\n        base_uri = redirect_uri[:redirect_uri.rfind('/')]\n\n        # push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)\n        services = [\n            ('wx2.qq.com', 'webpush2.weixin.qq.com'),\n            ('qq.com', 'webpush.weixin.qq.com'),\n            ('web1.wechat.com', 'webpush1.wechat.com'),\n            ('web2.wechat.com', 'webpush2.wechat.com'),\n            ('wechat.com', 'webpush.wechat.com'),\n            ('web1.wechatapp.com', 'webpush1.wechatapp.com'),\n        ]\n        push_uri = base_uri\n        for (searchUrl, pushUrl) in services:\n            if base_uri.find(searchUrl) >= 0:\n                push_uri = 'https://%s/cgi-bin/mmwebwx-bin' % pushUrl\n                break\n\n        # closeQRImage\n        if sys.platform.find('darwin') >= 0:  # for OSX with Preview\n            os.system(\"osascript -e 'quit app \\\"Preview\\\"'\")\n    elif code == '408':  # 超时\n        pass\n    # elif code == '400' or code == '500':\n\n    return code\n\n\ndef login():\n    global skey, wxsid, wxuin, pass_ticket, BaseRequest\n\n    request = getRequest(url=redirect_uri)\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    doc = xml.dom.minidom.parseString(data)\n    root = doc.documentElement\n\n    for node in root.childNodes:\n        if node.nodeName == 'skey':\n            skey = node.childNodes[0].data\n        elif node.nodeName == 'wxsid':\n            wxsid = node.childNodes[0].data\n        elif node.nodeName == 'wxuin':\n            wxuin = node.childNodes[0].data\n        elif node.nodeName == 'pass_ticket':\n            pass_ticket = node.childNodes[0].data\n\n    # print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,\n    # wxuin, pass_ticket))\n\n    if not all((skey, wxsid, wxuin, pass_ticket)):\n        return False\n\n    BaseRequest = {\n        'Uin': int(wxuin),\n        'Sid': wxsid,\n        'Skey': skey,\n        'DeviceID': deviceId,\n    }\n\n    return True\n\n\ndef webwxinit():\n\n    url = base_uri + \\\n        '/webwxinit?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxinit.json'), 'wb')\n        f.write(data)\n        f.close()\n\n    data = data.decode('utf-8', 'replace')\n\n    # print(data)\n\n    global ContactList, My, SyncKey\n    dic = json.loads(data)\n    ContactList = dic['ContactList']\n    My = dic['User']\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxinit', dic['BaseResponse'])\n    return state\n\n\ndef webwxgetcontact():\n\n    url = base_uri + \\\n        '/webwxgetcontact?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time()))\n\n    request = getRequest(url=url)\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxgetcontact.json'), 'wb')\n        f.write(data)\n        f.close()\n\n    # print(data)\n    data = data.decode('utf-8', 'replace')\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n\n    # 倒序遍历,不然删除的时候出问题..\n    SpecialUsers = [\"newsapp\", \"fmessage\", \"filehelper\", \"weibo\", \"qqmail\", \"tmessage\", \"qmessage\", \"qqsync\", \"floatbottle\", \"lbsapp\", \"shakeapp\", \"medianote\", \"qqfriend\", \"readerapp\", \"blogapp\", \"facebookapp\", \"masssendapp\",\n                    \"meishiapp\", \"feedsapp\", \"voip\", \"blogappweixin\", \"weixin\", \"brandsessionholder\", \"weixinreminder\", \"wxid_novlwrv3lqwv11\", \"gh_22b87fa7cb3c\", \"officialaccounts\", \"notification_messages\", \"wxitil\", \"userexperience_alarm\"]\n    for i in range(len(MemberList) - 1, -1, -1):\n        Member = MemberList[i]\n        if Member['VerifyFlag'] & 8 != 0:  # 公众号/服务号\n            MemberList.remove(Member)\n        elif Member['UserName'] in SpecialUsers:  # 特殊账号\n            MemberList.remove(Member)\n        elif Member['UserName'].find('@@') != -1:  # 群聊\n            MemberList.remove(Member)\n        elif Member['UserName'] == My['UserName']:  # 自己\n            MemberList.remove(Member)\n\n    return MemberList\n\n\ndef createChatroom(UserNames):\n    MemberList = [{'UserName': UserName} for UserName in UserNames]\n\n    url = base_uri + \\\n        '/webwxcreatechatroom?pass_ticket=%s&r=%s' % (\n            pass_ticket, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest,\n        'MemberCount': len(MemberList),\n        'MemberList': MemberList,\n        'Topic': '',\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    ChatRoomName = dic['ChatRoomName']\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # 被对方删除了\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # 被加入黑名单\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('createChatroom', dic['BaseResponse'])\n\n    return ChatRoomName, DeletedList, BlockedList\n\n\ndef deleteMember(ChatRoomName, UserNames):\n    url = base_uri + \\\n        '/webwxupdatechatroom?fun=delmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'DelMemberList': ','.join(UserNames),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n\n    state = responseState('deleteMember', dic['BaseResponse'])\n    return state\n\n\ndef addMember(ChatRoomName, UserNames):\n    url = base_uri + \\\n        '/webwxupdatechatroom?fun=addmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'AddMemberList': ','.join(UserNames),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # 被对方删除了\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # 被加入黑名单\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('addMember', dic['BaseResponse'])\n\n    return DeletedList, BlockedList\n\n\ndef syncKey():\n    SyncKeyItems = ['%s_%s' % (item['Key'], item['Val'])\n                    for item in SyncKey['List']]\n    SyncKeyStr = '|'.join(SyncKeyItems)\n    return SyncKeyStr\n\n\ndef syncCheck():\n    url = push_uri + '/synccheck?'\n    params = {\n        'skey': BaseRequest['Skey'],\n        'sid': BaseRequest['Sid'],\n        'uin': BaseRequest['Uin'],\n        'deviceId': BaseRequest['DeviceID'],\n        'synckey': syncKey(),\n        'r': int(time.time()),\n    }\n\n    request = getRequest(url=url + urlencode(params))\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.synccheck={retcode:\"0\",selector:\"2\"}\n    regx = r'window.synccheck={retcode:\"(\\d+)\",selector:\"(\\d+)\"}'\n    pm = re.search(regx, data)\n\n    retcode = pm.group(1)\n    selector = pm.group(2)\n\n    return selector\n\n\ndef webwxsync():\n    global SyncKey\n\n    url = base_uri + '/webwxsync?lang=zh_CN&skey=%s&sid=%s&pass_ticket=%s' % (\n        BaseRequest['Skey'], BaseRequest['Sid'], quote_plus(pass_ticket))\n    params = {\n        'BaseRequest': BaseRequest,\n        'SyncKey': SyncKey,\n        'rr': ~int(time.time()),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxsync', dic['BaseResponse'])\n    return state\n\n\ndef heartBeatLoop():\n    while True:\n        selector = syncCheck()\n        if selector != '0':\n            webwxsync()\n        time.sleep(1)\n\n\ndef main():\n\n    try:\n        ssl._create_default_https_context = ssl._create_unverified_context\n\n        opener = wdf_urllib.build_opener(\n            wdf_urllib.HTTPCookieProcessor(CookieJar()))\n        opener.addheaders = [\n            ('User-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36')]\n        wdf_urllib.install_opener(opener)\n    except:\n        pass\n\n    if not getUUID():\n        print('获取uuid失败')\n        return\n\n    print('正在获取二维码图片...')\n    showQRImage()\n    time.sleep(1)\n\n    while waitForLogin() != '200':\n        pass\n\n    os.remove(QRImagePath)\n\n    if not login():\n        print('登录失败')\n        return\n\n    if not webwxinit():\n        print('初始化失败')\n        return\n\n    MemberList = webwxgetcontact()\n\n    print('开启心跳线程')\n    thread.start_new_thread(heartBeatLoop, ())\n\n    MemberCount = len(MemberList)\n    print('通讯录共%s位好友' % MemberCount)\n\n    ChatRoomName = ''\n    result = []\n    d = {}\n    for Member in MemberList:\n        d[Member['UserName']] = (Member['NickName'].encode(\n            'utf-8'), Member['RemarkName'].encode('utf-8'))\n    print('开始查找...')\n    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))\n    for i in range(0, group_num):\n        UserNames = []\n        for j in range(0, MAX_GROUP_NUM):\n            if i * MAX_GROUP_NUM + j >= MemberCount:\n                break\n            Member = MemberList[i * MAX_GROUP_NUM + j]\n            UserNames.append(Member['UserName'])\n\n        # 新建群组/添加成员\n        if ChatRoomName == '':\n            (ChatRoomName, DeletedList, BlockedList) = createChatroom(\n                UserNames)\n        else:\n            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)\n\n        # todo BlockedList 被拉黑列表\n\n        DeletedCount = len(DeletedList)\n        if DeletedCount > 0:\n            result += DeletedList\n\n        # 删除成员\n        deleteMember(ChatRoomName, UserNames)\n\n        # 进度条\n        progress = MAX_PROGRESS_LEN * (i + 1) / group_num\n        print('[', '#' * progress, '-' * (MAX_PROGRESS_LEN - progress), ']', end=' ')\n        print('新发现你被%d人删除' % DeletedCount)\n        for i in range(DeletedCount):\n            if d[DeletedList[i]][1] != '':\n                print(d[DeletedList[i]][0] + '(%s)' % d[DeletedList[i]][1])\n            else:\n                print(d[DeletedList[i]][0])\n\n        if i != group_num - 1:\n            print('正在继续查找,请耐心等待...')\n            # 下一次进行接口调用需要等待的时间\n            time.sleep(INTERFACE_CALLING_INTERVAL)\n    # todo 删除群组\n\n    print('\\n结果汇总完毕,20s后可重试...')\n    resultNames = []\n    for r in result:\n        if d[r][1] != '':\n            resultNames.append(d[r][0] + '(%s)' % d[r][1])\n        else:\n            resultNames.append(d[r][0])\n\n    print('---------- 被删除的好友列表(共%d人) ----------' % len(result))\n    # 过滤emoji\n    resultNames = map(lambda x: re.sub(r'<span.+/span>', '', x), resultNames)\n    if len(resultNames):\n        print('\\n'.join(resultNames))\n    else:\n        print(\"无\")\n    print('---------------------------------------------')\n\n\n# windows下编码问题修复\n# http://blog.csdn.net/heyuxuanzee/article/details/8442718\n\n\nclass UnicodeStreamFilter:\n\n    def __init__(self, target):\n        self.target = target\n        self.encoding = 'utf-8'\n        self.errors = 'replace'\n        self.encode_to = self.target.encoding\n\n    def write(self, s):\n        if type(s) == str:\n            s = s.decode('utf-8')\n        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)\n        self.target.write(s)\n\nif sys.stdout.encoding == 'cp936':\n    sys.stdout = UnicodeStreamFilter(sys.stdout)\n\nif __name__ == '__main__':\n\n    print('本程序的查询结果可能会引起一些心理上的不适,请小心使用...')\n    main()\n    print('回车键退出...')\n```\n\n按照指示做即可。","source":"_posts/查看被删的微信好友.md","raw":"---\ntitle: 查看被删的微信好友\ndate: 2016-04-01 14:33:06\ntags: [wechat, 微信, python]\ncategories: python\n---\n## 查看被删的微信好友\n\n<!-- more -->\n\n[来自这里](https://github.com/0x5e/wechat-deleted-friends)\n\n> 原理：\n\n查看被删的微信好友\n原理就是新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的)\n用的是微信网页版的接口\n查询结果可能会引起一些心理上的不适,请小心使用.\nMac OS用法: 启动Terminal\n\n```\n\t$ python wechat.py\n\n```\n下面是wechat.py的代码\n\n```\n#!/usr/bin/env python\n# coding=utf-8\nfrom __future__ import print_function\n\nimport os\ntry:\n    from urllib import urlencode, quote_plus\nexcept ImportError:\n    from urllib.parse import urlencode, quote_plus\n\ntry:\n    import urllib2 as wdf_urllib\n    from cookielib import CookieJar\nexcept ImportError:\n    import urllib.request as wdf_urllib\n    from http.cookiejar import CookieJar\n\nimport re\nimport time\nimport xml.dom.minidom\nimport json\nimport sys\nimport math\nimport subprocess\nimport ssl\nimport thread\n\nDEBUG = False\n\nMAX_GROUP_NUM = 35  # 每组人数\nINTERFACE_CALLING_INTERVAL = 20  # 接口调用时间间隔, 间隔太短容易出现\"操作太频繁\", 会被限制操作半小时左右\nMAX_PROGRESS_LEN = 50\n\nQRImagePath = os.path.join(os.getcwd(), 'qrcode.jpg')\n\ntip = 0\nuuid = ''\n\nbase_uri = ''\nredirect_uri = ''\npush_uri = ''\n\nskey = ''\nwxsid = ''\nwxuin = ''\npass_ticket = ''\ndeviceId = 'e000000000000000'\n\nBaseRequest = {}\n\nContactList = []\nMy = []\nSyncKey = []\n\ntry:\n    xrange\n    range = xrange\nexcept:\n    # python 3\n    pass\n\n\ndef responseState(func, BaseResponse):\n    ErrMsg = BaseResponse['ErrMsg']\n    Ret = BaseResponse['Ret']\n    if DEBUG or Ret != 0:\n        print('func: %s, Ret: %d, ErrMsg: %s' % (func, Ret, ErrMsg))\n\n    if Ret != 0:\n        return False\n\n    return True\n\n\ndef getRequest(url, data=None):\n    try:\n        data = data.encode('utf-8')\n    except:\n        pass\n    finally:\n        return wdf_urllib.Request(url=url, data=data)\n\n\ndef getUUID():\n    global uuid\n\n    url = 'https://login.weixin.qq.com/jslogin'\n    params = {\n        'appid': 'wx782c26e4c19acffb',\n        'fun': 'new',\n        'lang': 'zh_CN',\n        '_': int(time.time()),\n    }\n\n    request = getRequest(url=url, data=urlencode(params))\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";\n    regx = r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n    uuid = pm.group(2)\n\n    if code == '200':\n        return True\n\n    return False\n\n\ndef showQRImage():\n    global tip\n\n    url = 'https://login.weixin.qq.com/qrcode/' + uuid\n    params = {\n        't': 'webwx',\n        '_': int(time.time()),\n    }\n\n    request = getRequest(url=url, data=urlencode(params))\n    response = wdf_urllib.urlopen(request)\n\n    tip = 1\n\n    f = open(QRImagePath, 'wb')\n    f.write(response.read())\n    f.close()\n\n    if sys.platform.find('darwin') >= 0:\n        subprocess.call(['open', QRImagePath])\n    elif sys.platform.find('linux') >= 0:\n        subprocess.call(['xdg-open', QRImagePath])\n    else:\n        os.startfile(QRImagePath)\n\n    print('请使用微信扫描二维码以登录')\n\n\ndef waitForLogin():\n    global tip, base_uri, redirect_uri, push_uri\n\n    url = 'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s' % (\n        tip, uuid, int(time.time()))\n\n    request = getRequest(url=url)\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.code=500;\n    regx = r'window.code=(\\d+);'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n\n    if code == '201':  # 已扫描\n        print('成功扫描,请在手机上点击确认以登录')\n        tip = 0\n    elif code == '200':  # 已登录\n        print('正在登录...')\n        regx = r'window.redirect_uri=\"(\\S+?)\";'\n        pm = re.search(regx, data)\n        redirect_uri = pm.group(1) + '&fun=new'\n        base_uri = redirect_uri[:redirect_uri.rfind('/')]\n\n        # push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)\n        services = [\n            ('wx2.qq.com', 'webpush2.weixin.qq.com'),\n            ('qq.com', 'webpush.weixin.qq.com'),\n            ('web1.wechat.com', 'webpush1.wechat.com'),\n            ('web2.wechat.com', 'webpush2.wechat.com'),\n            ('wechat.com', 'webpush.wechat.com'),\n            ('web1.wechatapp.com', 'webpush1.wechatapp.com'),\n        ]\n        push_uri = base_uri\n        for (searchUrl, pushUrl) in services:\n            if base_uri.find(searchUrl) >= 0:\n                push_uri = 'https://%s/cgi-bin/mmwebwx-bin' % pushUrl\n                break\n\n        # closeQRImage\n        if sys.platform.find('darwin') >= 0:  # for OSX with Preview\n            os.system(\"osascript -e 'quit app \\\"Preview\\\"'\")\n    elif code == '408':  # 超时\n        pass\n    # elif code == '400' or code == '500':\n\n    return code\n\n\ndef login():\n    global skey, wxsid, wxuin, pass_ticket, BaseRequest\n\n    request = getRequest(url=redirect_uri)\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    doc = xml.dom.minidom.parseString(data)\n    root = doc.documentElement\n\n    for node in root.childNodes:\n        if node.nodeName == 'skey':\n            skey = node.childNodes[0].data\n        elif node.nodeName == 'wxsid':\n            wxsid = node.childNodes[0].data\n        elif node.nodeName == 'wxuin':\n            wxuin = node.childNodes[0].data\n        elif node.nodeName == 'pass_ticket':\n            pass_ticket = node.childNodes[0].data\n\n    # print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,\n    # wxuin, pass_ticket))\n\n    if not all((skey, wxsid, wxuin, pass_ticket)):\n        return False\n\n    BaseRequest = {\n        'Uin': int(wxuin),\n        'Sid': wxsid,\n        'Skey': skey,\n        'DeviceID': deviceId,\n    }\n\n    return True\n\n\ndef webwxinit():\n\n    url = base_uri + \\\n        '/webwxinit?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxinit.json'), 'wb')\n        f.write(data)\n        f.close()\n\n    data = data.decode('utf-8', 'replace')\n\n    # print(data)\n\n    global ContactList, My, SyncKey\n    dic = json.loads(data)\n    ContactList = dic['ContactList']\n    My = dic['User']\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxinit', dic['BaseResponse'])\n    return state\n\n\ndef webwxgetcontact():\n\n    url = base_uri + \\\n        '/webwxgetcontact?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time()))\n\n    request = getRequest(url=url)\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxgetcontact.json'), 'wb')\n        f.write(data)\n        f.close()\n\n    # print(data)\n    data = data.decode('utf-8', 'replace')\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n\n    # 倒序遍历,不然删除的时候出问题..\n    SpecialUsers = [\"newsapp\", \"fmessage\", \"filehelper\", \"weibo\", \"qqmail\", \"tmessage\", \"qmessage\", \"qqsync\", \"floatbottle\", \"lbsapp\", \"shakeapp\", \"medianote\", \"qqfriend\", \"readerapp\", \"blogapp\", \"facebookapp\", \"masssendapp\",\n                    \"meishiapp\", \"feedsapp\", \"voip\", \"blogappweixin\", \"weixin\", \"brandsessionholder\", \"weixinreminder\", \"wxid_novlwrv3lqwv11\", \"gh_22b87fa7cb3c\", \"officialaccounts\", \"notification_messages\", \"wxitil\", \"userexperience_alarm\"]\n    for i in range(len(MemberList) - 1, -1, -1):\n        Member = MemberList[i]\n        if Member['VerifyFlag'] & 8 != 0:  # 公众号/服务号\n            MemberList.remove(Member)\n        elif Member['UserName'] in SpecialUsers:  # 特殊账号\n            MemberList.remove(Member)\n        elif Member['UserName'].find('@@') != -1:  # 群聊\n            MemberList.remove(Member)\n        elif Member['UserName'] == My['UserName']:  # 自己\n            MemberList.remove(Member)\n\n    return MemberList\n\n\ndef createChatroom(UserNames):\n    MemberList = [{'UserName': UserName} for UserName in UserNames]\n\n    url = base_uri + \\\n        '/webwxcreatechatroom?pass_ticket=%s&r=%s' % (\n            pass_ticket, int(time.time()))\n    params = {\n        'BaseRequest': BaseRequest,\n        'MemberCount': len(MemberList),\n        'MemberList': MemberList,\n        'Topic': '',\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    ChatRoomName = dic['ChatRoomName']\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # 被对方删除了\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # 被加入黑名单\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('createChatroom', dic['BaseResponse'])\n\n    return ChatRoomName, DeletedList, BlockedList\n\n\ndef deleteMember(ChatRoomName, UserNames):\n    url = base_uri + \\\n        '/webwxupdatechatroom?fun=delmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'DelMemberList': ','.join(UserNames),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n\n    state = responseState('deleteMember', dic['BaseResponse'])\n    return state\n\n\ndef addMember(ChatRoomName, UserNames):\n    url = base_uri + \\\n        '/webwxupdatechatroom?fun=addmember&pass_ticket=%s' % (pass_ticket)\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'AddMemberList': ','.join(UserNames),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # 被对方删除了\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # 被加入黑名单\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('addMember', dic['BaseResponse'])\n\n    return DeletedList, BlockedList\n\n\ndef syncKey():\n    SyncKeyItems = ['%s_%s' % (item['Key'], item['Val'])\n                    for item in SyncKey['List']]\n    SyncKeyStr = '|'.join(SyncKeyItems)\n    return SyncKeyStr\n\n\ndef syncCheck():\n    url = push_uri + '/synccheck?'\n    params = {\n        'skey': BaseRequest['Skey'],\n        'sid': BaseRequest['Sid'],\n        'uin': BaseRequest['Uin'],\n        'deviceId': BaseRequest['DeviceID'],\n        'synckey': syncKey(),\n        'r': int(time.time()),\n    }\n\n    request = getRequest(url=url + urlencode(params))\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    # window.synccheck={retcode:\"0\",selector:\"2\"}\n    regx = r'window.synccheck={retcode:\"(\\d+)\",selector:\"(\\d+)\"}'\n    pm = re.search(regx, data)\n\n    retcode = pm.group(1)\n    selector = pm.group(2)\n\n    return selector\n\n\ndef webwxsync():\n    global SyncKey\n\n    url = base_uri + '/webwxsync?lang=zh_CN&skey=%s&sid=%s&pass_ticket=%s' % (\n        BaseRequest['Skey'], BaseRequest['Sid'], quote_plus(pass_ticket))\n    params = {\n        'BaseRequest': BaseRequest,\n        'SyncKey': SyncKey,\n        'rr': ~int(time.time()),\n    }\n\n    request = getRequest(url=url, data=json.dumps(params))\n    request.add_header('ContentType', 'application/json; charset=UTF-8')\n    response = wdf_urllib.urlopen(request)\n    data = response.read().decode('utf-8', 'replace')\n\n    # print(data)\n\n    dic = json.loads(data)\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxsync', dic['BaseResponse'])\n    return state\n\n\ndef heartBeatLoop():\n    while True:\n        selector = syncCheck()\n        if selector != '0':\n            webwxsync()\n        time.sleep(1)\n\n\ndef main():\n\n    try:\n        ssl._create_default_https_context = ssl._create_unverified_context\n\n        opener = wdf_urllib.build_opener(\n            wdf_urllib.HTTPCookieProcessor(CookieJar()))\n        opener.addheaders = [\n            ('User-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36')]\n        wdf_urllib.install_opener(opener)\n    except:\n        pass\n\n    if not getUUID():\n        print('获取uuid失败')\n        return\n\n    print('正在获取二维码图片...')\n    showQRImage()\n    time.sleep(1)\n\n    while waitForLogin() != '200':\n        pass\n\n    os.remove(QRImagePath)\n\n    if not login():\n        print('登录失败')\n        return\n\n    if not webwxinit():\n        print('初始化失败')\n        return\n\n    MemberList = webwxgetcontact()\n\n    print('开启心跳线程')\n    thread.start_new_thread(heartBeatLoop, ())\n\n    MemberCount = len(MemberList)\n    print('通讯录共%s位好友' % MemberCount)\n\n    ChatRoomName = ''\n    result = []\n    d = {}\n    for Member in MemberList:\n        d[Member['UserName']] = (Member['NickName'].encode(\n            'utf-8'), Member['RemarkName'].encode('utf-8'))\n    print('开始查找...')\n    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))\n    for i in range(0, group_num):\n        UserNames = []\n        for j in range(0, MAX_GROUP_NUM):\n            if i * MAX_GROUP_NUM + j >= MemberCount:\n                break\n            Member = MemberList[i * MAX_GROUP_NUM + j]\n            UserNames.append(Member['UserName'])\n\n        # 新建群组/添加成员\n        if ChatRoomName == '':\n            (ChatRoomName, DeletedList, BlockedList) = createChatroom(\n                UserNames)\n        else:\n            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)\n\n        # todo BlockedList 被拉黑列表\n\n        DeletedCount = len(DeletedList)\n        if DeletedCount > 0:\n            result += DeletedList\n\n        # 删除成员\n        deleteMember(ChatRoomName, UserNames)\n\n        # 进度条\n        progress = MAX_PROGRESS_LEN * (i + 1) / group_num\n        print('[', '#' * progress, '-' * (MAX_PROGRESS_LEN - progress), ']', end=' ')\n        print('新发现你被%d人删除' % DeletedCount)\n        for i in range(DeletedCount):\n            if d[DeletedList[i]][1] != '':\n                print(d[DeletedList[i]][0] + '(%s)' % d[DeletedList[i]][1])\n            else:\n                print(d[DeletedList[i]][0])\n\n        if i != group_num - 1:\n            print('正在继续查找,请耐心等待...')\n            # 下一次进行接口调用需要等待的时间\n            time.sleep(INTERFACE_CALLING_INTERVAL)\n    # todo 删除群组\n\n    print('\\n结果汇总完毕,20s后可重试...')\n    resultNames = []\n    for r in result:\n        if d[r][1] != '':\n            resultNames.append(d[r][0] + '(%s)' % d[r][1])\n        else:\n            resultNames.append(d[r][0])\n\n    print('---------- 被删除的好友列表(共%d人) ----------' % len(result))\n    # 过滤emoji\n    resultNames = map(lambda x: re.sub(r'<span.+/span>', '', x), resultNames)\n    if len(resultNames):\n        print('\\n'.join(resultNames))\n    else:\n        print(\"无\")\n    print('---------------------------------------------')\n\n\n# windows下编码问题修复\n# http://blog.csdn.net/heyuxuanzee/article/details/8442718\n\n\nclass UnicodeStreamFilter:\n\n    def __init__(self, target):\n        self.target = target\n        self.encoding = 'utf-8'\n        self.errors = 'replace'\n        self.encode_to = self.target.encoding\n\n    def write(self, s):\n        if type(s) == str:\n            s = s.decode('utf-8')\n        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)\n        self.target.write(s)\n\nif sys.stdout.encoding == 'cp936':\n    sys.stdout = UnicodeStreamFilter(sys.stdout)\n\nif __name__ == '__main__':\n\n    print('本程序的查询结果可能会引起一些心理上的不适,请小心使用...')\n    main()\n    print('回车键退出...')\n```\n\n按照指示做即可。","slug":"查看被删的微信好友","published":1,"updated":"2020-07-20T11:29:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxij00dbsifyhbiyn581","content":"<h2 id=\"查看被删的微信好友\"><a class=\"markdownIt-Anchor\" href=\"#查看被删的微信好友\"></a> 查看被删的微信好友</h2>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/0x5e/wechat-deleted-friends\" target=\"_blank\" rel=\"noopener\">来自这里</a></p>\n<blockquote>\n<p>原理：</p>\n</blockquote>\n<p>查看被删的微信好友<br>\n原理就是新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的)<br>\n用的是微信网页版的接口<br>\n查询结果可能会引起一些心理上的不适,请小心使用.<br>\nMac OS用法: 启动Terminal</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">python</span> wechat.<span class=\"keyword\">py</span></span><br></pre></td></tr></table></figure>\n<p>下面是wechat.py的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> urlencode, quote_plus</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlencode, quote_plus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib2 <span class=\"keyword\">as</span> wdf_urllib</span><br><span class=\"line\">    <span class=\"keyword\">from</span> cookielib <span class=\"keyword\">import</span> CookieJar</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> wdf_urllib</span><br><span class=\"line\">    <span class=\"keyword\">from</span> http.cookiejar <span class=\"keyword\">import</span> CookieJar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.dom.minidom</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> ssl</span><br><span class=\"line\"><span class=\"keyword\">import</span> thread</span><br><span class=\"line\"></span><br><span class=\"line\">DEBUG = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_GROUP_NUM = <span class=\"number\">35</span>  <span class=\"comment\"># 每组人数</span></span><br><span class=\"line\">INTERFACE_CALLING_INTERVAL = <span class=\"number\">20</span>  <span class=\"comment\"># 接口调用时间间隔, 间隔太短容易出现\"操作太频繁\", 会被限制操作半小时左右</span></span><br><span class=\"line\">MAX_PROGRESS_LEN = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">QRImagePath = os.path.join(os.getcwd(), <span class=\"string\">'qrcode.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tip = <span class=\"number\">0</span></span><br><span class=\"line\">uuid = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_uri = <span class=\"string\">''</span></span><br><span class=\"line\">redirect_uri = <span class=\"string\">''</span></span><br><span class=\"line\">push_uri = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">skey = <span class=\"string\">''</span></span><br><span class=\"line\">wxsid = <span class=\"string\">''</span></span><br><span class=\"line\">wxuin = <span class=\"string\">''</span></span><br><span class=\"line\">pass_ticket = <span class=\"string\">''</span></span><br><span class=\"line\">deviceId = <span class=\"string\">'e000000000000000'</span></span><br><span class=\"line\"></span><br><span class=\"line\">BaseRequest = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ContactList = []</span><br><span class=\"line\">My = []</span><br><span class=\"line\">SyncKey = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    xrange</span><br><span class=\"line\">    range = xrange</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"comment\"># python 3</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">responseState</span><span class=\"params\">(func, BaseResponse)</span>:</span></span><br><span class=\"line\">    ErrMsg = BaseResponse[<span class=\"string\">'ErrMsg'</span>]</span><br><span class=\"line\">    Ret = BaseResponse[<span class=\"string\">'Ret'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG <span class=\"keyword\">or</span> Ret != <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'func: %s, Ret: %d, ErrMsg: %s'</span> % (func, Ret, ErrMsg))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Ret != <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRequest</span><span class=\"params\">(url, data=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        data = data.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wdf_urllib.Request(url=url, data=data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUUID</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/jslogin'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>: <span class=\"string\">'wx782c26e4c19acffb'</span>,</span><br><span class=\"line\">        <span class=\"string\">'fun'</span>: <span class=\"string\">'new'</span>,</span><br><span class=\"line\">        <span class=\"string\">'lang'</span>: <span class=\"string\">'zh_CN'</span>,</span><br><span class=\"line\">        <span class=\"string\">'_'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    code = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">    uuid = pm.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"string\">'200'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">showQRImage</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tip</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/qrcode/'</span> + uuid</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'t'</span>: <span class=\"string\">'webwx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'_'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\"></span><br><span class=\"line\">    tip = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    f = open(QRImagePath, <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">    f.write(response.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> sys.platform.find(<span class=\"string\">'darwin'</span>) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        subprocess.call([<span class=\"string\">'open'</span>, QRImagePath])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> sys.platform.find(<span class=\"string\">'linux'</span>) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        subprocess.call([<span class=\"string\">'xdg-open'</span>, QRImagePath])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.startfile(QRImagePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'请使用微信扫描二维码以登录'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waitForLogin</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tip, base_uri, redirect_uri, push_uri</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&amp;uuid=%s&amp;_=%s'</span> % (</span><br><span class=\"line\">        tip, uuid, int(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.code=500;</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.code=(\\d+);'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    code = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"string\">'201'</span>:  <span class=\"comment\"># 已扫描</span></span><br><span class=\"line\">        print(<span class=\"string\">'成功扫描,请在手机上点击确认以登录'</span>)</span><br><span class=\"line\">        tip = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> code == <span class=\"string\">'200'</span>:  <span class=\"comment\"># 已登录</span></span><br><span class=\"line\">        print(<span class=\"string\">'正在登录...'</span>)</span><br><span class=\"line\">        regx = <span class=\"string\">r'window.redirect_uri=\"(\\S+?)\";'</span></span><br><span class=\"line\">        pm = re.search(regx, data)</span><br><span class=\"line\">        redirect_uri = pm.group(<span class=\"number\">1</span>) + <span class=\"string\">'&amp;fun=new'</span></span><br><span class=\"line\">        base_uri = redirect_uri[:redirect_uri.rfind(<span class=\"string\">'/'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)</span></span><br><span class=\"line\">        services = [</span><br><span class=\"line\">            (<span class=\"string\">'wx2.qq.com'</span>, <span class=\"string\">'webpush2.weixin.qq.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'qq.com'</span>, <span class=\"string\">'webpush.weixin.qq.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web1.wechat.com'</span>, <span class=\"string\">'webpush1.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web2.wechat.com'</span>, <span class=\"string\">'webpush2.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'wechat.com'</span>, <span class=\"string\">'webpush.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web1.wechatapp.com'</span>, <span class=\"string\">'webpush1.wechatapp.com'</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        push_uri = base_uri</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (searchUrl, pushUrl) <span class=\"keyword\">in</span> services:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> base_uri.find(searchUrl) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                push_uri = <span class=\"string\">'https://%s/cgi-bin/mmwebwx-bin'</span> % pushUrl</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># closeQRImage</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sys.platform.find(<span class=\"string\">'darwin'</span>) &gt;= <span class=\"number\">0</span>:  <span class=\"comment\"># for OSX with Preview</span></span><br><span class=\"line\">            os.system(<span class=\"string\">\"osascript -e 'quit app \\\"Preview\\\"'\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> code == <span class=\"string\">'408'</span>:  <span class=\"comment\"># 超时</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\"># elif code == '400' or code == '500':</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> skey, wxsid, wxuin, pass_ticket, BaseRequest</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=redirect_uri)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    doc = xml.dom.minidom.parseString(data)</span><br><span class=\"line\">    root = doc.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> root.childNodes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.nodeName == <span class=\"string\">'skey'</span>:</span><br><span class=\"line\">            skey = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'wxsid'</span>:</span><br><span class=\"line\">            wxsid = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'wxuin'</span>:</span><br><span class=\"line\">            wxuin = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'pass_ticket'</span>:</span><br><span class=\"line\">            pass_ticket = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,</span></span><br><span class=\"line\">    <span class=\"comment\"># wxuin, pass_ticket))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> all((skey, wxsid, wxuin, pass_ticket)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    BaseRequest = &#123;</span><br><span class=\"line\">        <span class=\"string\">'Uin'</span>: int(wxuin),</span><br><span class=\"line\">        <span class=\"string\">'Sid'</span>: wxsid,</span><br><span class=\"line\">        <span class=\"string\">'Skey'</span>: skey,</span><br><span class=\"line\">        <span class=\"string\">'DeviceID'</span>: deviceId,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxinit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxinit?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, skey, int(time.time()))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG:</span><br><span class=\"line\">        f = open(os.path.join(os.getcwd(), <span class=\"string\">'webwxinit.json'</span>), <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        f.write(data)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = data.decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">global</span> ContactList, My, SyncKey</span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    ContactList = dic[<span class=\"string\">'ContactList'</span>]</span><br><span class=\"line\">    My = dic[<span class=\"string\">'User'</span>]</span><br><span class=\"line\">    SyncKey = dic[<span class=\"string\">'SyncKey'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'webwxinit'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxgetcontact</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxgetcontact?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, skey, int(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url)</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG:</span><br><span class=\"line\">        f = open(os.path.join(os.getcwd(), <span class=\"string\">'webwxgetcontact.json'</span>), <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        f.write(data)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\">    data = data.decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 倒序遍历,不然删除的时候出问题..</span></span><br><span class=\"line\">    SpecialUsers = [<span class=\"string\">\"newsapp\"</span>, <span class=\"string\">\"fmessage\"</span>, <span class=\"string\">\"filehelper\"</span>, <span class=\"string\">\"weibo\"</span>, <span class=\"string\">\"qqmail\"</span>, <span class=\"string\">\"tmessage\"</span>, <span class=\"string\">\"qmessage\"</span>, <span class=\"string\">\"qqsync\"</span>, <span class=\"string\">\"floatbottle\"</span>, <span class=\"string\">\"lbsapp\"</span>, <span class=\"string\">\"shakeapp\"</span>, <span class=\"string\">\"medianote\"</span>, <span class=\"string\">\"qqfriend\"</span>, <span class=\"string\">\"readerapp\"</span>, <span class=\"string\">\"blogapp\"</span>, <span class=\"string\">\"facebookapp\"</span>, <span class=\"string\">\"masssendapp\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"meishiapp\"</span>, <span class=\"string\">\"feedsapp\"</span>, <span class=\"string\">\"voip\"</span>, <span class=\"string\">\"blogappweixin\"</span>, <span class=\"string\">\"weixin\"</span>, <span class=\"string\">\"brandsessionholder\"</span>, <span class=\"string\">\"weixinreminder\"</span>, <span class=\"string\">\"wxid_novlwrv3lqwv11\"</span>, <span class=\"string\">\"gh_22b87fa7cb3c\"</span>, <span class=\"string\">\"officialaccounts\"</span>, <span class=\"string\">\"notification_messages\"</span>, <span class=\"string\">\"wxitil\"</span>, <span class=\"string\">\"userexperience_alarm\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(MemberList) - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        Member = MemberList[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'VerifyFlag'</span>] &amp; <span class=\"number\">8</span> != <span class=\"number\">0</span>:  <span class=\"comment\"># 公众号/服务号</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>] <span class=\"keyword\">in</span> SpecialUsers:  <span class=\"comment\"># 特殊账号</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>].find(<span class=\"string\">'@@'</span>) != <span class=\"number\">-1</span>:  <span class=\"comment\"># 群聊</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>] == My[<span class=\"string\">'UserName'</span>]:  <span class=\"comment\"># 自己</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MemberList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createChatroom</span><span class=\"params\">(UserNames)</span>:</span></span><br><span class=\"line\">    MemberList = [&#123;<span class=\"string\">'UserName'</span>: UserName&#125; <span class=\"keyword\">for</span> UserName <span class=\"keyword\">in</span> UserNames]</span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxcreatechatroom?pass_ticket=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, int(time.time()))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'MemberCount'</span>: len(MemberList),</span><br><span class=\"line\">        <span class=\"string\">'MemberList'</span>: MemberList,</span><br><span class=\"line\">        <span class=\"string\">'Topic'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    ChatRoomName = dic[<span class=\"string\">'ChatRoomName'</span>]</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\">    DeletedList = []</span><br><span class=\"line\">    BlockedList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">4</span>:  <span class=\"comment\"># 被对方删除了</span></span><br><span class=\"line\">            DeletedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">3</span>:  <span class=\"comment\"># 被加入黑名单</span></span><br><span class=\"line\">            BlockedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'createChatroom'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ChatRoomName, DeletedList, BlockedList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteMember</span><span class=\"params\">(ChatRoomName, UserNames)</span>:</span></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxupdatechatroom?fun=delmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'ChatRoomName'</span>: ChatRoomName,</span><br><span class=\"line\">        <span class=\"string\">'DelMemberList'</span>: <span class=\"string\">','</span>.join(UserNames),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'deleteMember'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addMember</span><span class=\"params\">(ChatRoomName, UserNames)</span>:</span></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxupdatechatroom?fun=addmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'ChatRoomName'</span>: ChatRoomName,</span><br><span class=\"line\">        <span class=\"string\">'AddMemberList'</span>: <span class=\"string\">','</span>.join(UserNames),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\">    DeletedList = []</span><br><span class=\"line\">    BlockedList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">4</span>:  <span class=\"comment\"># 被对方删除了</span></span><br><span class=\"line\">            DeletedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">3</span>:  <span class=\"comment\"># 被加入黑名单</span></span><br><span class=\"line\">            BlockedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'addMember'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DeletedList, BlockedList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">syncKey</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    SyncKeyItems = [<span class=\"string\">'%s_%s'</span> % (item[<span class=\"string\">'Key'</span>], item[<span class=\"string\">'Val'</span>])</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> SyncKey[<span class=\"string\">'List'</span>]]</span><br><span class=\"line\">    SyncKeyStr = <span class=\"string\">'|'</span>.join(SyncKeyItems)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SyncKeyStr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">syncCheck</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = push_uri + <span class=\"string\">'/synccheck?'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'skey'</span>: BaseRequest[<span class=\"string\">'Skey'</span>],</span><br><span class=\"line\">        <span class=\"string\">'sid'</span>: BaseRequest[<span class=\"string\">'Sid'</span>],</span><br><span class=\"line\">        <span class=\"string\">'uin'</span>: BaseRequest[<span class=\"string\">'Uin'</span>],</span><br><span class=\"line\">        <span class=\"string\">'deviceId'</span>: BaseRequest[<span class=\"string\">'DeviceID'</span>],</span><br><span class=\"line\">        <span class=\"string\">'synckey'</span>: syncKey(),</span><br><span class=\"line\">        <span class=\"string\">'r'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url + urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.synccheck=&#123;retcode:\"0\",selector:\"2\"&#125;</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.synccheck=&#123;retcode:\"(\\d+)\",selector:\"(\\d+)\"&#125;'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    retcode = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">    selector = pm.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selector</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxsync</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SyncKey</span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + <span class=\"string\">'/webwxsync?lang=zh_CN&amp;skey=%s&amp;sid=%s&amp;pass_ticket=%s'</span> % (</span><br><span class=\"line\">        BaseRequest[<span class=\"string\">'Skey'</span>], BaseRequest[<span class=\"string\">'Sid'</span>], quote_plus(pass_ticket))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'SyncKey'</span>: SyncKey,</span><br><span class=\"line\">        <span class=\"string\">'rr'</span>: ~int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    SyncKey = dic[<span class=\"string\">'SyncKey'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'webwxsync'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heartBeatLoop</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        selector = syncCheck()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> selector != <span class=\"string\">'0'</span>:</span><br><span class=\"line\">            webwxsync()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\">        opener = wdf_urllib.build_opener(</span><br><span class=\"line\">            wdf_urllib.HTTPCookieProcessor(CookieJar()))</span><br><span class=\"line\">        opener.addheaders = [</span><br><span class=\"line\">            (<span class=\"string\">'User-agent'</span>, <span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'</span>)]</span><br><span class=\"line\">        wdf_urllib.install_opener(opener)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> getUUID():</span><br><span class=\"line\">        print(<span class=\"string\">'获取uuid失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'正在获取二维码图片...'</span>)</span><br><span class=\"line\">    showQRImage()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> waitForLogin() != <span class=\"string\">'200'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    os.remove(QRImagePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> login():</span><br><span class=\"line\">        print(<span class=\"string\">'登录失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> webwxinit():</span><br><span class=\"line\">        print(<span class=\"string\">'初始化失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    MemberList = webwxgetcontact()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'开启心跳线程'</span>)</span><br><span class=\"line\">    thread.start_new_thread(heartBeatLoop, ())</span><br><span class=\"line\"></span><br><span class=\"line\">    MemberCount = len(MemberList)</span><br><span class=\"line\">    print(<span class=\"string\">'通讯录共%s位好友'</span> % MemberCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    ChatRoomName = <span class=\"string\">''</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        d[Member[<span class=\"string\">'UserName'</span>]] = (Member[<span class=\"string\">'NickName'</span>].encode(</span><br><span class=\"line\">            <span class=\"string\">'utf-8'</span>), Member[<span class=\"string\">'RemarkName'</span>].encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">'开始查找...'</span>)</span><br><span class=\"line\">    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, group_num):</span><br><span class=\"line\">        UserNames = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, MAX_GROUP_NUM):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i * MAX_GROUP_NUM + j &gt;= MemberCount:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            Member = MemberList[i * MAX_GROUP_NUM + j]</span><br><span class=\"line\">            UserNames.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新建群组/添加成员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ChatRoomName == <span class=\"string\">''</span>:</span><br><span class=\"line\">            (ChatRoomName, DeletedList, BlockedList) = createChatroom(</span><br><span class=\"line\">                UserNames)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># todo BlockedList 被拉黑列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">        DeletedCount = len(DeletedList)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> DeletedCount &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result += DeletedList</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 删除成员</span></span><br><span class=\"line\">        deleteMember(ChatRoomName, UserNames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 进度条</span></span><br><span class=\"line\">        progress = MAX_PROGRESS_LEN * (i + <span class=\"number\">1</span>) / group_num</span><br><span class=\"line\">        print(<span class=\"string\">'['</span>, <span class=\"string\">'#'</span> * progress, <span class=\"string\">'-'</span> * (MAX_PROGRESS_LEN - progress), <span class=\"string\">']'</span>, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'新发现你被%d人删除'</span> % DeletedCount)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(DeletedCount):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> d[DeletedList[i]][<span class=\"number\">1</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">                print(d[DeletedList[i]][<span class=\"number\">0</span>] + <span class=\"string\">'(%s)'</span> % d[DeletedList[i]][<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(d[DeletedList[i]][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i != group_num - <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'正在继续查找,请耐心等待...'</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 下一次进行接口调用需要等待的时间</span></span><br><span class=\"line\">            time.sleep(INTERFACE_CALLING_INTERVAL)</span><br><span class=\"line\">    <span class=\"comment\"># todo 删除群组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n结果汇总完毕,20s后可重试...'</span>)</span><br><span class=\"line\">    resultNames = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d[r][<span class=\"number\">1</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">            resultNames.append(d[r][<span class=\"number\">0</span>] + <span class=\"string\">'(%s)'</span> % d[r][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            resultNames.append(d[r][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'---------- 被删除的好友列表(共%d人) ----------'</span> % len(result))</span><br><span class=\"line\">    <span class=\"comment\"># 过滤emoji</span></span><br><span class=\"line\">    resultNames = map(<span class=\"keyword\">lambda</span> x: re.sub(<span class=\"string\">r'&lt;span.+/span&gt;'</span>, <span class=\"string\">''</span>, x), resultNames)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(resultNames):</span><br><span class=\"line\">        print(<span class=\"string\">'\\n'</span>.join(resultNames))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'---------------------------------------------'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># windows下编码问题修复</span></span><br><span class=\"line\"><span class=\"comment\"># http://blog.csdn.net/heyuxuanzee/article/details/8442718</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnicodeStreamFilter</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, target)</span>:</span></span><br><span class=\"line\">        self.target = target</span><br><span class=\"line\">        self.encoding = <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">        self.errors = <span class=\"string\">'replace'</span></span><br><span class=\"line\">        self.encode_to = self.target.encoding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> type(s) == str:</span><br><span class=\"line\">            s = s.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)</span><br><span class=\"line\">        self.target.write(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> sys.stdout.encoding == <span class=\"string\">'cp936'</span>:</span><br><span class=\"line\">    sys.stdout = UnicodeStreamFilter(sys.stdout)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'本程序的查询结果可能会引起一些心理上的不适,请小心使用...'</span>)</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    print(<span class=\"string\">'回车键退出...'</span>)</span><br></pre></td></tr></table></figure>\n<p>按照指示做即可。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"查看被删的微信好友\"><a class=\"markdownIt-Anchor\" href=\"#查看被删的微信好友\"></a> 查看被删的微信好友</h2>","more":"<p><a href=\"https://github.com/0x5e/wechat-deleted-friends\" target=\"_blank\" rel=\"noopener\">来自这里</a></p>\n<blockquote>\n<p>原理：</p>\n</blockquote>\n<p>查看被删的微信好友<br>\n原理就是新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的)<br>\n用的是微信网页版的接口<br>\n查询结果可能会引起一些心理上的不适,请小心使用.<br>\nMac OS用法: 启动Terminal</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">python</span> wechat.<span class=\"keyword\">py</span></span><br></pre></td></tr></table></figure>\n<p>下面是wechat.py的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># coding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> urlencode, quote_plus</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlencode, quote_plus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib2 <span class=\"keyword\">as</span> wdf_urllib</span><br><span class=\"line\">    <span class=\"keyword\">from</span> cookielib <span class=\"keyword\">import</span> CookieJar</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request <span class=\"keyword\">as</span> wdf_urllib</span><br><span class=\"line\">    <span class=\"keyword\">from</span> http.cookiejar <span class=\"keyword\">import</span> CookieJar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> xml.dom.minidom</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> ssl</span><br><span class=\"line\"><span class=\"keyword\">import</span> thread</span><br><span class=\"line\"></span><br><span class=\"line\">DEBUG = <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">MAX_GROUP_NUM = <span class=\"number\">35</span>  <span class=\"comment\"># 每组人数</span></span><br><span class=\"line\">INTERFACE_CALLING_INTERVAL = <span class=\"number\">20</span>  <span class=\"comment\"># 接口调用时间间隔, 间隔太短容易出现\"操作太频繁\", 会被限制操作半小时左右</span></span><br><span class=\"line\">MAX_PROGRESS_LEN = <span class=\"number\">50</span></span><br><span class=\"line\"></span><br><span class=\"line\">QRImagePath = os.path.join(os.getcwd(), <span class=\"string\">'qrcode.jpg'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tip = <span class=\"number\">0</span></span><br><span class=\"line\">uuid = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">base_uri = <span class=\"string\">''</span></span><br><span class=\"line\">redirect_uri = <span class=\"string\">''</span></span><br><span class=\"line\">push_uri = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\">skey = <span class=\"string\">''</span></span><br><span class=\"line\">wxsid = <span class=\"string\">''</span></span><br><span class=\"line\">wxuin = <span class=\"string\">''</span></span><br><span class=\"line\">pass_ticket = <span class=\"string\">''</span></span><br><span class=\"line\">deviceId = <span class=\"string\">'e000000000000000'</span></span><br><span class=\"line\"></span><br><span class=\"line\">BaseRequest = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ContactList = []</span><br><span class=\"line\">My = []</span><br><span class=\"line\">SyncKey = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    xrange</span><br><span class=\"line\">    range = xrange</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    <span class=\"comment\"># python 3</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">responseState</span><span class=\"params\">(func, BaseResponse)</span>:</span></span><br><span class=\"line\">    ErrMsg = BaseResponse[<span class=\"string\">'ErrMsg'</span>]</span><br><span class=\"line\">    Ret = BaseResponse[<span class=\"string\">'Ret'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG <span class=\"keyword\">or</span> Ret != <span class=\"number\">0</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'func: %s, Ret: %d, ErrMsg: %s'</span> % (func, Ret, ErrMsg))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> Ret != <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getRequest</span><span class=\"params\">(url, data=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        data = data.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wdf_urllib.Request(url=url, data=data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getUUID</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/jslogin'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'appid'</span>: <span class=\"string\">'wx782c26e4c19acffb'</span>,</span><br><span class=\"line\">        <span class=\"string\">'fun'</span>: <span class=\"string\">'new'</span>,</span><br><span class=\"line\">        <span class=\"string\">'lang'</span>: <span class=\"string\">'zh_CN'</span>,</span><br><span class=\"line\">        <span class=\"string\">'_'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    code = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">    uuid = pm.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"string\">'200'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">showQRImage</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tip</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/qrcode/'</span> + uuid</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'t'</span>: <span class=\"string\">'webwx'</span>,</span><br><span class=\"line\">        <span class=\"string\">'_'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\"></span><br><span class=\"line\">    tip = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    f = open(QRImagePath, <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">    f.write(response.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> sys.platform.find(<span class=\"string\">'darwin'</span>) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        subprocess.call([<span class=\"string\">'open'</span>, QRImagePath])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> sys.platform.find(<span class=\"string\">'linux'</span>) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">        subprocess.call([<span class=\"string\">'xdg-open'</span>, QRImagePath])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        os.startfile(QRImagePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'请使用微信扫描二维码以登录'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">waitForLogin</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tip, base_uri, redirect_uri, push_uri</span><br><span class=\"line\"></span><br><span class=\"line\">    url = <span class=\"string\">'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&amp;uuid=%s&amp;_=%s'</span> % (</span><br><span class=\"line\">        tip, uuid, int(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.code=500;</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.code=(\\d+);'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    code = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> code == <span class=\"string\">'201'</span>:  <span class=\"comment\"># 已扫描</span></span><br><span class=\"line\">        print(<span class=\"string\">'成功扫描,请在手机上点击确认以登录'</span>)</span><br><span class=\"line\">        tip = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> code == <span class=\"string\">'200'</span>:  <span class=\"comment\"># 已登录</span></span><br><span class=\"line\">        print(<span class=\"string\">'正在登录...'</span>)</span><br><span class=\"line\">        regx = <span class=\"string\">r'window.redirect_uri=\"(\\S+?)\";'</span></span><br><span class=\"line\">        pm = re.search(regx, data)</span><br><span class=\"line\">        redirect_uri = pm.group(<span class=\"number\">1</span>) + <span class=\"string\">'&amp;fun=new'</span></span><br><span class=\"line\">        base_uri = redirect_uri[:redirect_uri.rfind(<span class=\"string\">'/'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># push_uri与base_uri对应关系(排名分先后)(就是这么奇葩..)</span></span><br><span class=\"line\">        services = [</span><br><span class=\"line\">            (<span class=\"string\">'wx2.qq.com'</span>, <span class=\"string\">'webpush2.weixin.qq.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'qq.com'</span>, <span class=\"string\">'webpush.weixin.qq.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web1.wechat.com'</span>, <span class=\"string\">'webpush1.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web2.wechat.com'</span>, <span class=\"string\">'webpush2.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'wechat.com'</span>, <span class=\"string\">'webpush.wechat.com'</span>),</span><br><span class=\"line\">            (<span class=\"string\">'web1.wechatapp.com'</span>, <span class=\"string\">'webpush1.wechatapp.com'</span>),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        push_uri = base_uri</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (searchUrl, pushUrl) <span class=\"keyword\">in</span> services:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> base_uri.find(searchUrl) &gt;= <span class=\"number\">0</span>:</span><br><span class=\"line\">                push_uri = <span class=\"string\">'https://%s/cgi-bin/mmwebwx-bin'</span> % pushUrl</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># closeQRImage</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> sys.platform.find(<span class=\"string\">'darwin'</span>) &gt;= <span class=\"number\">0</span>:  <span class=\"comment\"># for OSX with Preview</span></span><br><span class=\"line\">            os.system(<span class=\"string\">\"osascript -e 'quit app \\\"Preview\\\"'\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> code == <span class=\"string\">'408'</span>:  <span class=\"comment\"># 超时</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"comment\"># elif code == '400' or code == '500':</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> code</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> skey, wxsid, wxuin, pass_ticket, BaseRequest</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=redirect_uri)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    doc = xml.dom.minidom.parseString(data)</span><br><span class=\"line\">    root = doc.documentElement</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> root.childNodes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.nodeName == <span class=\"string\">'skey'</span>:</span><br><span class=\"line\">            skey = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'wxsid'</span>:</span><br><span class=\"line\">            wxsid = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'wxuin'</span>:</span><br><span class=\"line\">            wxuin = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> node.nodeName == <span class=\"string\">'pass_ticket'</span>:</span><br><span class=\"line\">            pass_ticket = node.childNodes[<span class=\"number\">0</span>].data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,</span></span><br><span class=\"line\">    <span class=\"comment\"># wxuin, pass_ticket))</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> all((skey, wxsid, wxuin, pass_ticket)):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    BaseRequest = &#123;</span><br><span class=\"line\">        <span class=\"string\">'Uin'</span>: int(wxuin),</span><br><span class=\"line\">        <span class=\"string\">'Sid'</span>: wxsid,</span><br><span class=\"line\">        <span class=\"string\">'Skey'</span>: skey,</span><br><span class=\"line\">        <span class=\"string\">'DeviceID'</span>: deviceId,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxinit</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxinit?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, skey, int(time.time()))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG:</span><br><span class=\"line\">        f = open(os.path.join(os.getcwd(), <span class=\"string\">'webwxinit.json'</span>), <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        f.write(data)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    data = data.decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">global</span> ContactList, My, SyncKey</span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    ContactList = dic[<span class=\"string\">'ContactList'</span>]</span><br><span class=\"line\">    My = dic[<span class=\"string\">'User'</span>]</span><br><span class=\"line\">    SyncKey = dic[<span class=\"string\">'SyncKey'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'webwxinit'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxgetcontact</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxgetcontact?pass_ticket=%s&amp;skey=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, skey, int(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url)</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> DEBUG:</span><br><span class=\"line\">        f = open(os.path.join(os.getcwd(), <span class=\"string\">'webwxgetcontact.json'</span>), <span class=\"string\">'wb'</span>)</span><br><span class=\"line\">        f.write(data)</span><br><span class=\"line\">        f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\">    data = data.decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 倒序遍历,不然删除的时候出问题..</span></span><br><span class=\"line\">    SpecialUsers = [<span class=\"string\">\"newsapp\"</span>, <span class=\"string\">\"fmessage\"</span>, <span class=\"string\">\"filehelper\"</span>, <span class=\"string\">\"weibo\"</span>, <span class=\"string\">\"qqmail\"</span>, <span class=\"string\">\"tmessage\"</span>, <span class=\"string\">\"qmessage\"</span>, <span class=\"string\">\"qqsync\"</span>, <span class=\"string\">\"floatbottle\"</span>, <span class=\"string\">\"lbsapp\"</span>, <span class=\"string\">\"shakeapp\"</span>, <span class=\"string\">\"medianote\"</span>, <span class=\"string\">\"qqfriend\"</span>, <span class=\"string\">\"readerapp\"</span>, <span class=\"string\">\"blogapp\"</span>, <span class=\"string\">\"facebookapp\"</span>, <span class=\"string\">\"masssendapp\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"meishiapp\"</span>, <span class=\"string\">\"feedsapp\"</span>, <span class=\"string\">\"voip\"</span>, <span class=\"string\">\"blogappweixin\"</span>, <span class=\"string\">\"weixin\"</span>, <span class=\"string\">\"brandsessionholder\"</span>, <span class=\"string\">\"weixinreminder\"</span>, <span class=\"string\">\"wxid_novlwrv3lqwv11\"</span>, <span class=\"string\">\"gh_22b87fa7cb3c\"</span>, <span class=\"string\">\"officialaccounts\"</span>, <span class=\"string\">\"notification_messages\"</span>, <span class=\"string\">\"wxitil\"</span>, <span class=\"string\">\"userexperience_alarm\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(MemberList) - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        Member = MemberList[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'VerifyFlag'</span>] &amp; <span class=\"number\">8</span> != <span class=\"number\">0</span>:  <span class=\"comment\"># 公众号/服务号</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>] <span class=\"keyword\">in</span> SpecialUsers:  <span class=\"comment\"># 特殊账号</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>].find(<span class=\"string\">'@@'</span>) != <span class=\"number\">-1</span>:  <span class=\"comment\"># 群聊</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'UserName'</span>] == My[<span class=\"string\">'UserName'</span>]:  <span class=\"comment\"># 自己</span></span><br><span class=\"line\">            MemberList.remove(Member)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MemberList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">createChatroom</span><span class=\"params\">(UserNames)</span>:</span></span><br><span class=\"line\">    MemberList = [&#123;<span class=\"string\">'UserName'</span>: UserName&#125; <span class=\"keyword\">for</span> UserName <span class=\"keyword\">in</span> UserNames]</span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxcreatechatroom?pass_ticket=%s&amp;r=%s'</span> % (</span><br><span class=\"line\">            pass_ticket, int(time.time()))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'MemberCount'</span>: len(MemberList),</span><br><span class=\"line\">        <span class=\"string\">'MemberList'</span>: MemberList,</span><br><span class=\"line\">        <span class=\"string\">'Topic'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    ChatRoomName = dic[<span class=\"string\">'ChatRoomName'</span>]</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\">    DeletedList = []</span><br><span class=\"line\">    BlockedList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">4</span>:  <span class=\"comment\"># 被对方删除了</span></span><br><span class=\"line\">            DeletedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">3</span>:  <span class=\"comment\"># 被加入黑名单</span></span><br><span class=\"line\">            BlockedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'createChatroom'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ChatRoomName, DeletedList, BlockedList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deleteMember</span><span class=\"params\">(ChatRoomName, UserNames)</span>:</span></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxupdatechatroom?fun=delmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'ChatRoomName'</span>: ChatRoomName,</span><br><span class=\"line\">        <span class=\"string\">'DelMemberList'</span>: <span class=\"string\">','</span>.join(UserNames),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'deleteMember'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addMember</span><span class=\"params\">(ChatRoomName, UserNames)</span>:</span></span><br><span class=\"line\">    url = base_uri + \\</span><br><span class=\"line\">        <span class=\"string\">'/webwxupdatechatroom?fun=addmember&amp;pass_ticket=%s'</span> % (pass_ticket)</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'ChatRoomName'</span>: ChatRoomName,</span><br><span class=\"line\">        <span class=\"string\">'AddMemberList'</span>: <span class=\"string\">','</span>.join(UserNames),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    MemberList = dic[<span class=\"string\">'MemberList'</span>]</span><br><span class=\"line\">    DeletedList = []</span><br><span class=\"line\">    BlockedList = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">4</span>:  <span class=\"comment\"># 被对方删除了</span></span><br><span class=\"line\">            DeletedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> Member[<span class=\"string\">'MemberStatus'</span>] == <span class=\"number\">3</span>:  <span class=\"comment\"># 被加入黑名单</span></span><br><span class=\"line\">            BlockedList.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'addMember'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DeletedList, BlockedList</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">syncKey</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    SyncKeyItems = [<span class=\"string\">'%s_%s'</span> % (item[<span class=\"string\">'Key'</span>], item[<span class=\"string\">'Val'</span>])</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> SyncKey[<span class=\"string\">'List'</span>]]</span><br><span class=\"line\">    SyncKeyStr = <span class=\"string\">'|'</span>.join(SyncKeyItems)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SyncKeyStr</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">syncCheck</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = push_uri + <span class=\"string\">'/synccheck?'</span></span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'skey'</span>: BaseRequest[<span class=\"string\">'Skey'</span>],</span><br><span class=\"line\">        <span class=\"string\">'sid'</span>: BaseRequest[<span class=\"string\">'Sid'</span>],</span><br><span class=\"line\">        <span class=\"string\">'uin'</span>: BaseRequest[<span class=\"string\">'Uin'</span>],</span><br><span class=\"line\">        <span class=\"string\">'deviceId'</span>: BaseRequest[<span class=\"string\">'DeviceID'</span>],</span><br><span class=\"line\">        <span class=\"string\">'synckey'</span>: syncKey(),</span><br><span class=\"line\">        <span class=\"string\">'r'</span>: int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url + urlencode(params))</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># window.synccheck=&#123;retcode:\"0\",selector:\"2\"&#125;</span></span><br><span class=\"line\">    regx = <span class=\"string\">r'window.synccheck=&#123;retcode:\"(\\d+)\",selector:\"(\\d+)\"&#125;'</span></span><br><span class=\"line\">    pm = re.search(regx, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    retcode = pm.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">    selector = pm.group(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> selector</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">webwxsync</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> SyncKey</span><br><span class=\"line\"></span><br><span class=\"line\">    url = base_uri + <span class=\"string\">'/webwxsync?lang=zh_CN&amp;skey=%s&amp;sid=%s&amp;pass_ticket=%s'</span> % (</span><br><span class=\"line\">        BaseRequest[<span class=\"string\">'Skey'</span>], BaseRequest[<span class=\"string\">'Sid'</span>], quote_plus(pass_ticket))</span><br><span class=\"line\">    params = &#123;</span><br><span class=\"line\">        <span class=\"string\">'BaseRequest'</span>: BaseRequest,</span><br><span class=\"line\">        <span class=\"string\">'SyncKey'</span>: SyncKey,</span><br><span class=\"line\">        <span class=\"string\">'rr'</span>: ~int(time.time()),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request = getRequest(url=url, data=json.dumps(params))</span><br><span class=\"line\">    request.add_header(<span class=\"string\">'ContentType'</span>, <span class=\"string\">'application/json; charset=UTF-8'</span>)</span><br><span class=\"line\">    response = wdf_urllib.urlopen(request)</span><br><span class=\"line\">    data = response.read().decode(<span class=\"string\">'utf-8'</span>, <span class=\"string\">'replace'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># print(data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dic = json.loads(data)</span><br><span class=\"line\">    SyncKey = dic[<span class=\"string\">'SyncKey'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    state = responseState(<span class=\"string\">'webwxsync'</span>, dic[<span class=\"string\">'BaseResponse'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">heartBeatLoop</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        selector = syncCheck()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> selector != <span class=\"string\">'0'</span>:</span><br><span class=\"line\">            webwxsync()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\">        opener = wdf_urllib.build_opener(</span><br><span class=\"line\">            wdf_urllib.HTTPCookieProcessor(CookieJar()))</span><br><span class=\"line\">        opener.addheaders = [</span><br><span class=\"line\">            (<span class=\"string\">'User-agent'</span>, <span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'</span>)]</span><br><span class=\"line\">        wdf_urllib.install_opener(opener)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> getUUID():</span><br><span class=\"line\">        print(<span class=\"string\">'获取uuid失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'正在获取二维码图片...'</span>)</span><br><span class=\"line\">    showQRImage()</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> waitForLogin() != <span class=\"string\">'200'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    os.remove(QRImagePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> login():</span><br><span class=\"line\">        print(<span class=\"string\">'登录失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> webwxinit():</span><br><span class=\"line\">        print(<span class=\"string\">'初始化失败'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    MemberList = webwxgetcontact()</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'开启心跳线程'</span>)</span><br><span class=\"line\">    thread.start_new_thread(heartBeatLoop, ())</span><br><span class=\"line\"></span><br><span class=\"line\">    MemberCount = len(MemberList)</span><br><span class=\"line\">    print(<span class=\"string\">'通讯录共%s位好友'</span> % MemberCount)</span><br><span class=\"line\"></span><br><span class=\"line\">    ChatRoomName = <span class=\"string\">''</span></span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    d = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> Member <span class=\"keyword\">in</span> MemberList:</span><br><span class=\"line\">        d[Member[<span class=\"string\">'UserName'</span>]] = (Member[<span class=\"string\">'NickName'</span>].encode(</span><br><span class=\"line\">            <span class=\"string\">'utf-8'</span>), Member[<span class=\"string\">'RemarkName'</span>].encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    print(<span class=\"string\">'开始查找...'</span>)</span><br><span class=\"line\">    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, group_num):</span><br><span class=\"line\">        UserNames = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, MAX_GROUP_NUM):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i * MAX_GROUP_NUM + j &gt;= MemberCount:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            Member = MemberList[i * MAX_GROUP_NUM + j]</span><br><span class=\"line\">            UserNames.append(Member[<span class=\"string\">'UserName'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 新建群组/添加成员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ChatRoomName == <span class=\"string\">''</span>:</span><br><span class=\"line\">            (ChatRoomName, DeletedList, BlockedList) = createChatroom(</span><br><span class=\"line\">                UserNames)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># todo BlockedList 被拉黑列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">        DeletedCount = len(DeletedList)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> DeletedCount &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            result += DeletedList</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 删除成员</span></span><br><span class=\"line\">        deleteMember(ChatRoomName, UserNames)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 进度条</span></span><br><span class=\"line\">        progress = MAX_PROGRESS_LEN * (i + <span class=\"number\">1</span>) / group_num</span><br><span class=\"line\">        print(<span class=\"string\">'['</span>, <span class=\"string\">'#'</span> * progress, <span class=\"string\">'-'</span> * (MAX_PROGRESS_LEN - progress), <span class=\"string\">']'</span>, end=<span class=\"string\">' '</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'新发现你被%d人删除'</span> % DeletedCount)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(DeletedCount):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> d[DeletedList[i]][<span class=\"number\">1</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">                print(d[DeletedList[i]][<span class=\"number\">0</span>] + <span class=\"string\">'(%s)'</span> % d[DeletedList[i]][<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(d[DeletedList[i]][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i != group_num - <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">'正在继续查找,请耐心等待...'</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 下一次进行接口调用需要等待的时间</span></span><br><span class=\"line\">            time.sleep(INTERFACE_CALLING_INTERVAL)</span><br><span class=\"line\">    <span class=\"comment\"># todo 删除群组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'\\n结果汇总完毕,20s后可重试...'</span>)</span><br><span class=\"line\">    resultNames = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> d[r][<span class=\"number\">1</span>] != <span class=\"string\">''</span>:</span><br><span class=\"line\">            resultNames.append(d[r][<span class=\"number\">0</span>] + <span class=\"string\">'(%s)'</span> % d[r][<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            resultNames.append(d[r][<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'---------- 被删除的好友列表(共%d人) ----------'</span> % len(result))</span><br><span class=\"line\">    <span class=\"comment\"># 过滤emoji</span></span><br><span class=\"line\">    resultNames = map(<span class=\"keyword\">lambda</span> x: re.sub(<span class=\"string\">r'&lt;span.+/span&gt;'</span>, <span class=\"string\">''</span>, x), resultNames)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(resultNames):</span><br><span class=\"line\">        print(<span class=\"string\">'\\n'</span>.join(resultNames))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无\"</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'---------------------------------------------'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># windows下编码问题修复</span></span><br><span class=\"line\"><span class=\"comment\"># http://blog.csdn.net/heyuxuanzee/article/details/8442718</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UnicodeStreamFilter</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, target)</span>:</span></span><br><span class=\"line\">        self.target = target</span><br><span class=\"line\">        self.encoding = <span class=\"string\">'utf-8'</span></span><br><span class=\"line\">        self.errors = <span class=\"string\">'replace'</span></span><br><span class=\"line\">        self.encode_to = self.target.encoding</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> type(s) == str:</span><br><span class=\"line\">            s = s.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)</span><br><span class=\"line\">        self.target.write(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> sys.stdout.encoding == <span class=\"string\">'cp936'</span>:</span><br><span class=\"line\">    sys.stdout = UnicodeStreamFilter(sys.stdout)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">'本程序的查询结果可能会引起一些心理上的不适,请小心使用...'</span>)</span><br><span class=\"line\">    main()</span><br><span class=\"line\">    print(<span class=\"string\">'回车键退出...'</span>)</span><br></pre></td></tr></table></figure>\n<p>按照指示做即可。</p>"},{"title":"Gyp-学习记录","date":"2017-12-25T12:12:20.000Z","_content":"Gyp 学习记录\n\nGYP(Generate Your Projects)是由 Chromium 团队开发的跨平台自动化项目构建工具。\n\n##### gyp简述\nGYP的输入是.gyp和.gypi文件，.gypi文件是用于.gyp文件include使用的。.gyp文件就是符合特定格式的json文件。\n\ngyp文件中包含target，Visual C++下，gyp生成sln，target生成vcproj或vxcproj。\n\n<!-- more -->\n\n##### 1.1 设计目标\ngyp设计针对目标就是为了解决chromium浏览器构建问题，最重要的就是支持多平台的构建。因为Chromium内部都是c/c++文件，因此主要考虑方便c/c++程序的构建。设计时候还考虑到下面这些问题：\n\n* debug vs release\n* cross compile\n* toolchain interface\n\n##### 1.2 构建文件\n构建文件名字不固定，但是后缀通常是.gyp和.gypi(gyp included).构建文件内容就是python的一个数据结构.\nexample:\n\n```\n\t{ \n\t\t'target_defaults':{\n\t\t\t'defines':['DEBUG'],\n\t\t},\n\t\t'targets':[\n\t\t\t{\n\t\t\t\t'target_name':'test', #生成的文件.\n\t\t\t\t'type':'executable', #可执行程序.\n\t\t\t\t'sources':['test.cc'],\n\t\t\t\t'defines':['FOO']\n\t\t\t}\n\t\t]\n\t}\n```\n##### 1.3 .gyp文件剖析\n整个构建文件最顶层是一个字典，包含了下面这些key:\n\n- conditions //条件判断\n- includes // 包含的构建文件\n- target <sub>defualt</sub> //构建目标默认属性\n- targets // 构建目标列表\n- variables // 构建文件使用的变量\n\n###### 1.3.1 conditions\nconditions分两种行为。 普通的conditions就在load构建文件之后立即计算，另外一种是target(conditions)是在计算完成依赖之后然后来进行计算的，两个过程分别就是early and late phases阶段。对于conditions写法非常简单\n\n```\n\t'conditions':[\n\t\t['OS==Linux', {'sources':['linux_interface.cc']}]\n\t]\n```\n对于condition的判断，主要还是为了能够修改一些描述属性。从文档上来看，默认提供的条件就是OS判断，其他判断应该都是变量的判断。\n\n###### 1.3.2 targets\n\ntarget部分的话对target(default)里面设定的内容默认进行merge。比如上面例子的话，对于target/test来说，使用的define就会是-DDEBUG -DFOO.当然对于这种东西是可以进行其他策略选择的，比如如果修改成下面格式，那么就是直接替换：\n\n```\n'defines=':['FOO']\n```\n生成的defines就是-DFOO了。或者是可以剔除掉：\n\n```\n'defines!':['DEBUG']\n```\n生成的defines就没有任何内容了。通过在选项key后面添加操作符号来达到自定义目的(相对于全局环境).\n对于一个target包括了下面这些重要属性：\n\n- actions(list) //执行命令\n- all<sub>dependentsettings</sub>(dict) //如果依赖这个target的话，需要使用的设置\n- configurations(dict) 配置\n- defines(list) //对于C/C++的defines\n- dependencies(list) //依赖对象。如果是本文件的话那么直接引用，如果是其他文件的话，使用path/xxx.gyp:target.\n- direct<sub>dependentsetting</sub>(dict) //直接依赖这个target的话，需要使用的设置\n- include<sub>dirs</sub>(list) // 头文件目录\n- libraries(list)//目标需要链接的库\n- link<sub>settings</sub> //依赖这个target,需要使用的链接参数\n- sources(list) //源文件\n- target<sub>conditions</sub>(list) // 和conditions类似，但是是在完全计算之后然后来判断\n- target<sub>name</sub>(string) //名字\n- type //目标类型，现在只是支持static<sub>library</sub>,shared<sub>library</sub>,executable和none\n\n###### 1.3.3 includes\ngyp倾向的组织就是在toplevel上面存在一个gyp文件，可以存在子目录下面，但是子目录下面并不存放一个完整的构建文件， 通常只是存放构建文件的片段。为了区分，后缀为gypi。本身来说，这个gypi并不可以直接被gyp所接受生成native构建系统文件， 唯一的作用就是被toplevel的gyp文件进行include。如果对于Linux系统来说，最终生成的Makefile应该是一份大Makefile并且没有递归make的操作。 关于构造一个没有递归的Makefile是非常有价值的，不管是对于调试还是提升编译速度方面。可以参考文章Recusive Make Considered Harmful.\n一旦我们允许include子目录的gypi文件进来，我们就必须规定哪些字段应该是文件。原因是假设存在src目录下面有src/BUILD.gypi这样一个文件，sources内容如下:\n\n```\n'sources':['src.cc']\n```\n而在上层BUILD.gyp文件里面，使用includes语法：\n\n```\n'includes':['./src/BUILD.gypi']\n```\n那么在生成大Makefile的时候，我们必须清楚'sources'字段里面内容都是文件，不应该直接使用src.cc， 相反应该加上目录前缀src，\n最终应该使用src/src.cc这样一个文件。关于哪些字段里面内容是路径， 这个在gyp里面有详细规定，在后面小节里面我们也会提到。\n\n###### 1.3.4 actions\nactions是targets里面的一个特殊属性，主要是用来进行target的自定义操作的.\n每个action是一个dict，主要包含4个属性：\n\n- action<sub>name</sub>(string). //操作名称\n- input(list) //输入文件\n- outputs (list) //输出文件\n- actions(list) //命令\n\n有了这些属性就可以做一个完整的操作抽象。\n###### 1.3.5 variable\nvariables这个小节里面是进行变量的定义，格式是dict。下面是一个例子：\n\n```\n'variables':{\n    'common_files':['src/common.cc','src/interface.cc'],\n}\n```\n为了引用变量，我们可以这样写：\n\n```\n<(common_files)\n<@(common_files)\n>(common_files)\n>@(common_files)\n```\n\n总之引用变量必须加上(),同时在前面加上<,<@,>,>@的4种中一种前缀符号。关于前缀符号的含义， 会在后面的operator小节里面说明。\n对于变量类型，一共分为3类：\n\n- predefined variables //预定义变量\n- user-defined variables //用户定义变量\n- automatic variables //自动变量\n\n预定义变量比如OS(系统环境),EXECUTABLE<sub>SUFFIX</sub>(可执行文件后缀).用户自定义变量就不再赘述。\n自动变量类似于Makefile里面的$@,$这样的变量，好比反射。比如在target<sub>conditions</sub>部门的话，我们根据不同类型程序来做不同的condition:\n\n```\n'target_conditions':[\n\t['_type==static_library',{'source':['func.cc']}]\n]\n```\n这样对于target为static<sub>library</sub>都会联编func.cc这个文件了，自动变量就是属性名称之前加上构成的。\n存在自动变量非常必要。有时候我们在全局环境中，希望根据不同的条件来定义不同的行为，并且是在计算的同时在来做条件判断的。 这样就提出一个要求就是，条件判断部分必须有能力知道，当前到底在计算什么东西(反射)。\n##### 1.4 early and late phases\n对于变量展开和条件判断有两个不同的阶段：\n载入文件之后进行，就是early phase。\n计算完成之后进行，就是late phase。\n对于两个阶段允许不同操作是非常必要的。对于early phase这个肯定需要，而对于late phase的话， 有时候我们是希望了解到gyp处理完成某个target之后所有信息，然后进行判断的。\nps:comake2在设计的时候，就没有考虑late phase这个功能。造成没有办法在应用层添加延迟计算这样一个特性。 最终只能够是修改comake2代码来完成需求。\n\n##### 1.5 operator\n关于每个操作符号的含义：\n\n* x= //字段内容进行覆盖\n* x? //如果字段没有定义，那么就进行覆盖\n* x+ //字段内容进行merge\n* < (x) //early phase计算变量x，并且以string类型返回结果\n* > (x) //late phase计算变量x，并且以string类型返回结果\n* < @(x) //early phase计算变量x，并且以list类型返回结果\n* > @(x) //late phase计算变量x，并且以list类型返回结果\n* x! //从已有的x字段中排除部分\n* x/ //操作允许使用include/exclude，内容是一个正则表达式来进行包含和排除列表里面内容\n* < !(x) //认为x是一个shell command，得到执行结果作为string类型返回\n* < !@(x) //认为x是一个shell command，得到执行结果作为list类型返回\n\n##### 1.6 路径内容属性\n在includes这个小节提到了，gyp规定了某些属性的内容必须为路径。这些属性是：\n\n* files.\n* include<sub>dirs</sub>.\n* inputs.\n* libraries.\n* outputs.\n* sources.\n\n但是gyp对于里面的内容也做了一些特殊处理。对于内容来说，如果以下面这些字符开头：\n\n* / //绝对路径\n* $ //变量\n* - //链接参数比如-lm\n* < ,>,! //operator\n* 其他作为相对路径\n\n##### 1.7 在Ubuntu下使用gyp\n>安装工具： sudo apt-get install gyp\n\n###### 1.7.1 简单实例\nhello.c\n\n```\n#include <stdio.h>  \n  \nint main(){  \n    printf(\"hello gyp\\n\");  \n    return 0;  \n} \n```\n\nmain.gyp\n\n```\n{    \n   'targets': [    \n     {    \n       'target_name': 'hello',    \n       'type': 'executable',    \n       'sources': [    \n         'hello.c',    \n       ],    \n     },    \n   ],    \n }  \n```\n\n构建：\n\n```\ngyp --depth=./ main.gyp\n```\n编译\n``` \nmake\n```\n运行\n```\n./hello\n```\n\n###### 1.7.2 改进\n把上面的构建命令做成脚本 genPrj.sh\n\n```\n#!/bin/bash\ngyp --depth=./ --generator-output=./build main.gyp\n\nif [ -d build ]; then\n\tcd build\n\tmake\nfi\n\n```\n\n所有生成非源码文件都生成到了build目录下，看起来比较干净，在做一个清除脚本，清除就更省事了。do_clean.sh:\n\n```\n#!/bin/bash\nrm -rf build\n```\n\n###### 1.7.3 c++实例\n目录结构\n\n```\n|-- do_clean.sh\n|-- genPrj.sh\n|---src\n     |-- hello.cc\n     |-- main.gyp\n     |-- my_class\n           |-- my_class.cc\n           |-- my_class.h\n\n\n```\n\ngenPrj.sh\n\n```\n#!/bin/bash\ngyp --depth=. --generator-output=build src/main.gyp\n\nif [ -d build ]; then\n\tcd bulid\n\tmake\nfi\n```\n\nhello.cc\n\n```\n#include <stdio.h>\n#include \"my_class/my_class.h\"\nint main(int argc, char** argv){\n\tprintf(\"Hello world\\n\");\n\tMyClass my_class(100);\n\tmy_class.Fun1();\n}\n```\nmain.gyp\n\n```\n{    \n   'targets': [    \n     {    \n       'target_name': 'my_class',    \n       'type': 'executable',    \n       'sources': [    \n         'hello.cc',    \n         'my_class/my_class.h',    \n         'my_class/my_class.cc',    \n       ],    \n     },    \n   ],    \n } \n```\nmy_class.cc\n\n```\n#include \"my_class.h\"    \n#include <stdio.h>    \nvoid MyClass::Fun1() {    \n  printf(\"the value is %d\\n\", value_);    \n}  \n```\n\nmy_class.h\n\n```\nclass MyClass {    \npublic:    \n  MyClass(int value) : value_(value) {}    \n  void Fun1();    \nprivate:    \n  int value_;    \n}; \n```\n\n##### 1.8 ninja\n\ngyp是google为chromium项目开发的管理工具，功能类似于cmake。gyp只能产生编译脚本，真正的编译工作还有靠其他工具，例如: ninja。\n###### 1.8.1 安装gyp和ninja\n\n```\nsudo apt-get install gyp\nsudo apt-get install ninja-build\n```\n###### 1.8.2 一个简单的例子\n1. 首先准备一个源文件，我写了template_sample.cpp,代码如下：\n\n\t```\n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\ttemplate<typename T>  \n\t\tT add(T a, T b){ return a+b; }  \n\t\t  \n\t\tint main()  \n\t\t{  \n\t\t     cout<< add<int>(5,6)<<endl;  \n\t\t     cout<< add<double>(3.4,4.0)<<endl;  \n\t\t     return 0;  \n\t\t}   \t\n\t```\n2. 编写gyp使用的文件，build.gyp（后缀是.gyp即可，名字随意）\n\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'template_sample.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n3. 生成ninja脚本，命令如下：\n\n\t```\n\tgyp -depth=. -format=ninja ./build.gyp\n\t```\n\t\n\t其中`-depth=.` 表示在当前文件夹下寻找开始的gyp脚本，必须显示的指出gyp没有默认设置。 `-format=ninja` 表示要生成ninja的脚本，默认生成的是Makefile\n\t执行后，会在当前目录下生成一个out目录。其结构如下：\n\t\n\t```\n\t\tout\n\t\t|-- Default\n\t\t\t\t|-- an\n\t\t\t\t|-- build.ninja\n\t\t\t\t|-- obj\n\t\t\t\t\t  |-- an.ninja\n\t\t\t\t\t  |-- an.template_sample.o\n\t```\n\n4. 编译，执行如下命令：\n\t\n\t```\n\t\tninja -C out/Default\n\t```\n\t\n\t**注意**: -C是大写，执行成功后会在out/Default目录下生成一个叫做an的可执行文件，这个an就是在target_name字段指定的名字。\n\t\n5. clean整个工程重新编译\n\t\n\t目前，gyp没有提供clean的方案，所以只能手动删除out目录。\n\t\n###### 1.8.3 gyp脚本的编写\n\n1. 如何增加编译、链接参数\n\t编译参数一般增加在conditions字段，根据系统的不同增加cflags和ldflags,如下：\n\t\n\t```\n\t{  \n\t   'targets':[  \n\t        {  \n\t            'target_name':'an',  \n\t            'type':'executable',  \n\t            'dependencies':[],  \n\t            'defines':[],  \n\t            'include_dirs':[],  \n\t            'sources':[  \n\t                'template_sample.cpp',  \n\t            ],  \n\t            'conditions':[  \n\t              ['OS==\"win\"',{  \n\t                             'cflags':[],  \n\t                             'ldflags':[]  \n\t                         },{  \n\t                              'cflags':[  \n\t                                   '--std=c++11',  \n\t                               ],  \n\t                              'ldflags':[]  \n\t                         }  \n\t              ],  \n\t            ]  \n\t        }  \n\t    ],  \n\t}  \n\t\n\t```\n\t\n\t注意conditions字段的变化：`'OS=\"win\"'`是条件语句的后要有`,`号，第一个括号内表示条件为真时的参数，第二个括号表示条件为假时的参数。上面的例子中，我在不是win的系统上增加了`--std=c++11`这个参数。\n\t另外，这里有必要提一下链接顺序问题。在链接的时候，链接器对符号表的寻找是按照你输入的命令的顺序进行的，比如a.o需要libm.so的函数，那么libm.so在链接命令里就必须写在a.o的后面，因为链接器发现a.o有函数没有找到，就只会去他后面的库里找，如果你把libm.so写在前面，自然就找不到。所以在增加链接库的时候，不要在ldflags里增加-l类的参数，这类参数要加到libraries字段里 如：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'template_sample.cpp',  \n\t\t            ],  \n\t\t            'conditions':[  \n\t\t              ['OS==\"win\"',{  \n\t\t                             'cflags':[],  \n\t\t                             'ldflags':[]  \n\t\t                         },{  \n\t\t                              'cflags':[  \n\t\t                                   '--std=c++11',  \n\t\t                               ],  \n\t\t                              'ldflags':[]，  \n\t\t                              'libraries':[  \n\t\t                                  '-lm'  \n\t\t                              ]  \n\t\t                         }  \n\t\t              ],  \n\t\t            ]  \n\t\t        }  \n\t\t    ],  \n\t\t}  \n\t```\n\t\n2. 头文件路径设定 --include_dirs字段的使用\n\t有如下工程目录结构\n\t\n\t```\n\t\t|-- build.gyp\n\t\t|-- include\n\t\t|\t\t|-- define.h\n\t\t|-- main.cpp\n\t```\n\t\n\tmain.cpp的代码如下\n\t\n\t```\n\t\t#include \"defines.h\"  \n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\tint main(){  \n\t\t    cout<< MY_NUMBER <<endl;  \n\t\t    return 1;  \n\t\t}  \n\t```\n\t可见main.cpp文件引用了defines.h这个头文件，所以在编译的时候需要告诉编译系统到哪里去寻找这个defines.h文件。为此buid.gyp如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[  \n\t\t                'include'  \n\t\t            ],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n\t可以看出头文件的位置include在include_dirs字段中被指出。这里需要注意，两个单引号之间一定是文件的路径，不要包含不必要的空格等其他字符。\n\t\n3. 编译参数增加宏定义 --defines字段使用\n\t测试程序的源码如下：\n\t\n\t```\n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\t#ifdef BIG_NUMBER  \n\t\tint out_number = 10;   \n\t\t#else  \n\t\tint out_number = 1;  \n\t\t#endif  \n\t\tint main(){  \n\t\t    cout<< out_number <<endl;  \n\t\t    return 1;  \n\t\t}  \n\t```\n\t可以看出，如果BIG_NUMBER宏被定义，则输出为10 ，否则为1。在使用Makefile的时候，我们可以通过为gcc增加-DBIG_NUBMER参数的方式来定义这个宏。那在gyp管理的时候，我们就要使用defines字段，代码如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[  \n\t\t                 'BIG_NUMBER'  \n\t\t            ],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n4. 编译静态库(动态库)\n\t\n\t有时我们不是要输出一个可执行文件，而是要编译一个静态库或动态库。这就要修改type字段，上文中type字段使用了executable，实际还可以设置为`static_library`,修改后的gyp脚本如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'static_library',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t```\n这样在out/Default/obj的目录下就会生成一个liban.a的静态库。\n\t\n\t动态库的方式类似，只需把type字段设置为shared_library即可。\n\t另外还有一种使用变量的方法，在这里提前介绍一下。就是将type字段设置为`<(library)`,完整的代码如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'<(library)',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\n\t```\n\t然后在使用gyp工具的时候指定这个library的值，如：\n\t\n\t```\n\t\tgyp -depth=. -format=ninja -Dlibrary=static_library ./build.gyp\n\t```\n\t\n\t这样生成ninja脚本后，也可以生成静态库，这样做的好处是你可以在真正输出时再决定输出静态库还是动态库。尤其对于要一次生成多个库的情况下，这种方法尤其好用。\n\n##### 1.9 更多功能介绍\n\n###### 设计准则：\n- 关键字一致性：所有的关键字都和平台项目的配置字段相同\n- 通过前缀表明配置属于的特定平台。比如：`msvs_disabled_warnings`,`xcode_framework_dirs`\n\n**样例：**\n\n```\n\t{\n    \"target_defaults\": {\n        \"defines\": [\n            \"U_STATIC_IMPLEMENTATION\",\n            [\n                \"LOGFILE\",\n                \"foo.log\"\n            ]\n        ],\n        \"include_dirs\": [\n            \"..\"\n        ]\n    },\n    \"targets\": [\n        {\n            \"target_name\": \"foo\",\n            \"type\": \"static_library\",\n            \"sources\": [\n                \"foo/src/foo.cc\",\n                \"foo/src/foo_main.cc\"\n            ],\n            \"include_dirs\": [\n                \"foo\",\n                \"foo/include\"\n            ],\n            \"conditions\": [\n                [\n                    \"OS==mac\",\n                    {\n                        \"sources\": [\n                            \"platform_test_mac.mm\"\n                        ]\n                    }\n                ]\n            ],\n            \"direct_dependent_settings\": {\n                \"defines\": [\n                    \"UNIT_TEST\"\n                ],\n                \"include_dirs\": [\n                    \"foo\",\n                    \"foo/include\"\n                ]\n            }\n        }\n    ]\n}\n```\n\n**结构元素**\n\n.gyp文件中定义了一些targets和构建规则。\n\n下面的关键字可以定义在最顶层：\n\n- conditions:条件定义。 \n- includes:包含.gypi文件的列表\n\t\n\t```\n\t\t{\n\t\t\t\"targets\": [\n\t\t\t  {\n\t\t\t\t\"target_name\": \"Thread\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"includes\": [\n\t\t\t\t\"../common.gypi\",\n\t\t\t\t\"./thread.gypi\"\n\t\t\t\t]\n\t\t\t\t...\n\t\t\t  }\n\t\t\t]\n\t\t}\n\t```\n- target_defaults:默认的项目配置，每个项目(targets)的配置都需要从这个配置继承\n- targets:项目列表\n\n\t```\n\t\t{\n\t\t\t\"targets\": [\n\t\t\t{\n\t\t\t\t\"target_name\": \"hello1\",\n\t\t\t\t\"product_extension\": \"stuff\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"sources\": [\n\t\t\t\t\"hello.c\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"target_name\": \"hello2\",\n\t\t\t\t\"target_extension\": \"stuff\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"sources\": [\n\t\t\t\t\"hello.c\"\n\t\t\t\t]\n\t\t\t}\n\t\t\t]\n\t\t}\n\t```\n- variable: 定义了键值对，可以被其他地方以`<(varname)`的方式引用\n\n\t```\n\t\t{\n\t\t  'variables': {\n\t\t    'pi': 'import math; print math.pi',\n\t\t    'third_letters': \"<(other_letters)HIJK\",\n\t\t    'letters_list': 'ABCD',\n\t\t    'other_letters': '<(letters_list)EFG',\n\t\t    'check_included': '<(included_variable)',\n\t\t    'check_lists': [\n\t\t      '<(included_variable)',\n\t\t      '<(third_letters)',\n\t\t      \n\t\t    ],\n\t\t    'check_int': 5,\n\t\t    'check_str_int': '6',\n\t\t    'check_list_int': [\n\t\t      7,\n\t\t      '8',\n\t\t      9,\n\t\t      \n\t\t    ],\n\t\t    'not_int_1': ' 10',\n\t\t    'not_int_2': '11 ',\n\t\t    'not_int_3': '012',\n\t\t    'not_int_4': '13.0',\n\t\t    'not_int_5': '+14',\n\t\t    'negative_int': '-15',\n\t\t    'zero_int': '0',\n\t\t    \n\t\t  },\n\t\t  ...\n\t\t}\n\t```\n\t\n**项目(targets)**\n\n.gyp文件定义的一套构建项目的规则。targets中也可以包含`includes`,`conditions`和`variables`。下面的是一些targets中的专有字段：\n\n- target_name: 指定定义的target的名称\n- type: target的类型。支持`executable`、`static_library`、`shared_library`和`none`.其中`none`类型也很有用，可以作为处理资源、文档等特别项目的类型。例如，在Windows中,`none`将作为工具集类型的项目存在\n- product_extension:指定target生成目标的扩展名，不包含'.'\n- product_name: 指定tareget生成目标的文件名，与 `product_extension` 组成一个文件全名\n- dependencies:指定target依赖的其他target\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'a',\n\t\t      'type': 'static_library',\n\t\t      'dependencies': [\n\t\t        'b/b.gyp:b',\n\t\t        'c/c.gyp:*'\n\t\t      ],\n\t\t      'sources': [\n\t\t        'a.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ],\n\t\t  \n\t\t}\n\t\t}\n\t```\n\t\n- defines: 定义了预处理宏。类似于C/C++命令行编译中的-D或者/D选项\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'defines',\n\t\t      'type': 'executable',\n\t\t      'defines': [\n\t\t        'FOO',\n\t\t        'VALUE=1',\n\t\t        'PAREN_VALUE=(1+2+3)',\n\t\t        'HASH_VALUE=\"a#1\"',\n\t\t        \n\t\t      ],\n\t\t      'sources': [\n\t\t        'defines.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ]\n\t\t}\n\t\n\t```\n\t\n- include_dirs: 指定了包含文件的查找目录。类似于C/C++命令行编译中的-I或/I选项\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'includes',\n\t\t      'type': 'executable',\n\t\t      'dependencies': [\n\t\t        'subdir/subdir_includes.gyp:subdir_includes',\n\t\t        \n\t\t      ],\n\t\t      'cflags': [\n\t\t        '-Ishadow1',\n\t\t        \n\t\t      ],\n\t\t      'include_dirs': [\n\t\t        '.',\n\t\t        'inc1',\n\t\t        'shadow2',\n\t\t        'subdir/inc2',\n\t\t        \n\t\t      ],\n\t\t      'sources': [\n\t\t        'includes.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ],\n\t\t  \n\t\t}\n\t\n\t```\n- sources:列出了项目中的代码文件和一些项目相关的文件.`sources!`段中可以指定被排除的文件\n- configurations:为targets定义的一套构建配置。\n- link\\_settings:指定target需要链接的库。`executable`和`shared_library` 类型的target需要指定链接库。这个段内可以指定target中可包含的除了`configurations`、`target_name`和`type`的所有配置。可以与`all_dependent_settings`、`direct_dependent_setting`做对比\n- direct\\_dependent\\_settings:指定依赖本target的target设置。这个段内可以指定target中可包含的除了`configurations`、`target_name`和`type`的所有属性。可以与`all_dependent_settings`、`link_settings`做对比\n- all\\_dependent\\_settings:\n- libraries:指定target依赖的库，见`link_settings>libraries`\n\n\t```\n\t\t...\n\n\t\t'link_settings': {\n\t\t\n\t\t'libraries': [\n\t\t\n\t\t'libiconv.dylib',\n\t\t\n\t\t'<(ZLIB_DIR)contrib/minizip/libminizip.a',\n\t\t\n\t\t'libcurl.dylib',],\n\t\t\n\t\t},\n\t\t\n\t\t...\n\n\t\n\t```\n- actions:针对输入的文件，定义了一组自定义的构建动作。\n- copies:定义了一套拷贝动作。\n- rules:\n- target\\_conditions:类似于conditions,但是起左右的时间比conditions晚\n- msvs\\_precompiled\\_header:指定预编译头文件。只能用于Visual Studio\n- msvs\\_precompiled\\_source:指定预编译源文件。只能用于Visual Studio\n- msvs\\_prebuild:生成之前事件。只能用于Visual Studio\n- msvs\\_postbuild:生成之后事件。只能用于Visual Studio\n\n\t```\n\t\t'msvs_postbuild':r'copy \"${OutDir}${TargetName}\" \"C:\\${TargetName}\"'\n\t```\n\t\n- msvs\\_props:指定target的属性页文件(.vsprops)。只能用于Visual Studio\n- msvs\\_cygwin\\_shell:指定action运行在cygwin下。只能用于Visual Studio\n- msvs\\_cygwin\\_dirs:指定cygwin的目录。只能用于Visual Studio\n- xcode\\_config\\_file:在xcode中，指定target的配置文件(.xcconfig)。只能用于xcode\n- xcode\\_framework\\_dirs:在xcode中，指定框架的目录。只能用于xcode\n","source":"_posts/Gyp-学习记录.md","raw":"---\ntitle: Gyp-学习记录\ndate: 2017-12-25 20:12:20\ntags: [gyp]\ncategories: cpp\n---\nGyp 学习记录\n\nGYP(Generate Your Projects)是由 Chromium 团队开发的跨平台自动化项目构建工具。\n\n##### gyp简述\nGYP的输入是.gyp和.gypi文件，.gypi文件是用于.gyp文件include使用的。.gyp文件就是符合特定格式的json文件。\n\ngyp文件中包含target，Visual C++下，gyp生成sln，target生成vcproj或vxcproj。\n\n<!-- more -->\n\n##### 1.1 设计目标\ngyp设计针对目标就是为了解决chromium浏览器构建问题，最重要的就是支持多平台的构建。因为Chromium内部都是c/c++文件，因此主要考虑方便c/c++程序的构建。设计时候还考虑到下面这些问题：\n\n* debug vs release\n* cross compile\n* toolchain interface\n\n##### 1.2 构建文件\n构建文件名字不固定，但是后缀通常是.gyp和.gypi(gyp included).构建文件内容就是python的一个数据结构.\nexample:\n\n```\n\t{ \n\t\t'target_defaults':{\n\t\t\t'defines':['DEBUG'],\n\t\t},\n\t\t'targets':[\n\t\t\t{\n\t\t\t\t'target_name':'test', #生成的文件.\n\t\t\t\t'type':'executable', #可执行程序.\n\t\t\t\t'sources':['test.cc'],\n\t\t\t\t'defines':['FOO']\n\t\t\t}\n\t\t]\n\t}\n```\n##### 1.3 .gyp文件剖析\n整个构建文件最顶层是一个字典，包含了下面这些key:\n\n- conditions //条件判断\n- includes // 包含的构建文件\n- target <sub>defualt</sub> //构建目标默认属性\n- targets // 构建目标列表\n- variables // 构建文件使用的变量\n\n###### 1.3.1 conditions\nconditions分两种行为。 普通的conditions就在load构建文件之后立即计算，另外一种是target(conditions)是在计算完成依赖之后然后来进行计算的，两个过程分别就是early and late phases阶段。对于conditions写法非常简单\n\n```\n\t'conditions':[\n\t\t['OS==Linux', {'sources':['linux_interface.cc']}]\n\t]\n```\n对于condition的判断，主要还是为了能够修改一些描述属性。从文档上来看，默认提供的条件就是OS判断，其他判断应该都是变量的判断。\n\n###### 1.3.2 targets\n\ntarget部分的话对target(default)里面设定的内容默认进行merge。比如上面例子的话，对于target/test来说，使用的define就会是-DDEBUG -DFOO.当然对于这种东西是可以进行其他策略选择的，比如如果修改成下面格式，那么就是直接替换：\n\n```\n'defines=':['FOO']\n```\n生成的defines就是-DFOO了。或者是可以剔除掉：\n\n```\n'defines!':['DEBUG']\n```\n生成的defines就没有任何内容了。通过在选项key后面添加操作符号来达到自定义目的(相对于全局环境).\n对于一个target包括了下面这些重要属性：\n\n- actions(list) //执行命令\n- all<sub>dependentsettings</sub>(dict) //如果依赖这个target的话，需要使用的设置\n- configurations(dict) 配置\n- defines(list) //对于C/C++的defines\n- dependencies(list) //依赖对象。如果是本文件的话那么直接引用，如果是其他文件的话，使用path/xxx.gyp:target.\n- direct<sub>dependentsetting</sub>(dict) //直接依赖这个target的话，需要使用的设置\n- include<sub>dirs</sub>(list) // 头文件目录\n- libraries(list)//目标需要链接的库\n- link<sub>settings</sub> //依赖这个target,需要使用的链接参数\n- sources(list) //源文件\n- target<sub>conditions</sub>(list) // 和conditions类似，但是是在完全计算之后然后来判断\n- target<sub>name</sub>(string) //名字\n- type //目标类型，现在只是支持static<sub>library</sub>,shared<sub>library</sub>,executable和none\n\n###### 1.3.3 includes\ngyp倾向的组织就是在toplevel上面存在一个gyp文件，可以存在子目录下面，但是子目录下面并不存放一个完整的构建文件， 通常只是存放构建文件的片段。为了区分，后缀为gypi。本身来说，这个gypi并不可以直接被gyp所接受生成native构建系统文件， 唯一的作用就是被toplevel的gyp文件进行include。如果对于Linux系统来说，最终生成的Makefile应该是一份大Makefile并且没有递归make的操作。 关于构造一个没有递归的Makefile是非常有价值的，不管是对于调试还是提升编译速度方面。可以参考文章Recusive Make Considered Harmful.\n一旦我们允许include子目录的gypi文件进来，我们就必须规定哪些字段应该是文件。原因是假设存在src目录下面有src/BUILD.gypi这样一个文件，sources内容如下:\n\n```\n'sources':['src.cc']\n```\n而在上层BUILD.gyp文件里面，使用includes语法：\n\n```\n'includes':['./src/BUILD.gypi']\n```\n那么在生成大Makefile的时候，我们必须清楚'sources'字段里面内容都是文件，不应该直接使用src.cc， 相反应该加上目录前缀src，\n最终应该使用src/src.cc这样一个文件。关于哪些字段里面内容是路径， 这个在gyp里面有详细规定，在后面小节里面我们也会提到。\n\n###### 1.3.4 actions\nactions是targets里面的一个特殊属性，主要是用来进行target的自定义操作的.\n每个action是一个dict，主要包含4个属性：\n\n- action<sub>name</sub>(string). //操作名称\n- input(list) //输入文件\n- outputs (list) //输出文件\n- actions(list) //命令\n\n有了这些属性就可以做一个完整的操作抽象。\n###### 1.3.5 variable\nvariables这个小节里面是进行变量的定义，格式是dict。下面是一个例子：\n\n```\n'variables':{\n    'common_files':['src/common.cc','src/interface.cc'],\n}\n```\n为了引用变量，我们可以这样写：\n\n```\n<(common_files)\n<@(common_files)\n>(common_files)\n>@(common_files)\n```\n\n总之引用变量必须加上(),同时在前面加上<,<@,>,>@的4种中一种前缀符号。关于前缀符号的含义， 会在后面的operator小节里面说明。\n对于变量类型，一共分为3类：\n\n- predefined variables //预定义变量\n- user-defined variables //用户定义变量\n- automatic variables //自动变量\n\n预定义变量比如OS(系统环境),EXECUTABLE<sub>SUFFIX</sub>(可执行文件后缀).用户自定义变量就不再赘述。\n自动变量类似于Makefile里面的$@,$这样的变量，好比反射。比如在target<sub>conditions</sub>部门的话，我们根据不同类型程序来做不同的condition:\n\n```\n'target_conditions':[\n\t['_type==static_library',{'source':['func.cc']}]\n]\n```\n这样对于target为static<sub>library</sub>都会联编func.cc这个文件了，自动变量就是属性名称之前加上构成的。\n存在自动变量非常必要。有时候我们在全局环境中，希望根据不同的条件来定义不同的行为，并且是在计算的同时在来做条件判断的。 这样就提出一个要求就是，条件判断部分必须有能力知道，当前到底在计算什么东西(反射)。\n##### 1.4 early and late phases\n对于变量展开和条件判断有两个不同的阶段：\n载入文件之后进行，就是early phase。\n计算完成之后进行，就是late phase。\n对于两个阶段允许不同操作是非常必要的。对于early phase这个肯定需要，而对于late phase的话， 有时候我们是希望了解到gyp处理完成某个target之后所有信息，然后进行判断的。\nps:comake2在设计的时候，就没有考虑late phase这个功能。造成没有办法在应用层添加延迟计算这样一个特性。 最终只能够是修改comake2代码来完成需求。\n\n##### 1.5 operator\n关于每个操作符号的含义：\n\n* x= //字段内容进行覆盖\n* x? //如果字段没有定义，那么就进行覆盖\n* x+ //字段内容进行merge\n* < (x) //early phase计算变量x，并且以string类型返回结果\n* > (x) //late phase计算变量x，并且以string类型返回结果\n* < @(x) //early phase计算变量x，并且以list类型返回结果\n* > @(x) //late phase计算变量x，并且以list类型返回结果\n* x! //从已有的x字段中排除部分\n* x/ //操作允许使用include/exclude，内容是一个正则表达式来进行包含和排除列表里面内容\n* < !(x) //认为x是一个shell command，得到执行结果作为string类型返回\n* < !@(x) //认为x是一个shell command，得到执行结果作为list类型返回\n\n##### 1.6 路径内容属性\n在includes这个小节提到了，gyp规定了某些属性的内容必须为路径。这些属性是：\n\n* files.\n* include<sub>dirs</sub>.\n* inputs.\n* libraries.\n* outputs.\n* sources.\n\n但是gyp对于里面的内容也做了一些特殊处理。对于内容来说，如果以下面这些字符开头：\n\n* / //绝对路径\n* $ //变量\n* - //链接参数比如-lm\n* < ,>,! //operator\n* 其他作为相对路径\n\n##### 1.7 在Ubuntu下使用gyp\n>安装工具： sudo apt-get install gyp\n\n###### 1.7.1 简单实例\nhello.c\n\n```\n#include <stdio.h>  \n  \nint main(){  \n    printf(\"hello gyp\\n\");  \n    return 0;  \n} \n```\n\nmain.gyp\n\n```\n{    \n   'targets': [    \n     {    \n       'target_name': 'hello',    \n       'type': 'executable',    \n       'sources': [    \n         'hello.c',    \n       ],    \n     },    \n   ],    \n }  \n```\n\n构建：\n\n```\ngyp --depth=./ main.gyp\n```\n编译\n``` \nmake\n```\n运行\n```\n./hello\n```\n\n###### 1.7.2 改进\n把上面的构建命令做成脚本 genPrj.sh\n\n```\n#!/bin/bash\ngyp --depth=./ --generator-output=./build main.gyp\n\nif [ -d build ]; then\n\tcd build\n\tmake\nfi\n\n```\n\n所有生成非源码文件都生成到了build目录下，看起来比较干净，在做一个清除脚本，清除就更省事了。do_clean.sh:\n\n```\n#!/bin/bash\nrm -rf build\n```\n\n###### 1.7.3 c++实例\n目录结构\n\n```\n|-- do_clean.sh\n|-- genPrj.sh\n|---src\n     |-- hello.cc\n     |-- main.gyp\n     |-- my_class\n           |-- my_class.cc\n           |-- my_class.h\n\n\n```\n\ngenPrj.sh\n\n```\n#!/bin/bash\ngyp --depth=. --generator-output=build src/main.gyp\n\nif [ -d build ]; then\n\tcd bulid\n\tmake\nfi\n```\n\nhello.cc\n\n```\n#include <stdio.h>\n#include \"my_class/my_class.h\"\nint main(int argc, char** argv){\n\tprintf(\"Hello world\\n\");\n\tMyClass my_class(100);\n\tmy_class.Fun1();\n}\n```\nmain.gyp\n\n```\n{    \n   'targets': [    \n     {    \n       'target_name': 'my_class',    \n       'type': 'executable',    \n       'sources': [    \n         'hello.cc',    \n         'my_class/my_class.h',    \n         'my_class/my_class.cc',    \n       ],    \n     },    \n   ],    \n } \n```\nmy_class.cc\n\n```\n#include \"my_class.h\"    \n#include <stdio.h>    \nvoid MyClass::Fun1() {    \n  printf(\"the value is %d\\n\", value_);    \n}  \n```\n\nmy_class.h\n\n```\nclass MyClass {    \npublic:    \n  MyClass(int value) : value_(value) {}    \n  void Fun1();    \nprivate:    \n  int value_;    \n}; \n```\n\n##### 1.8 ninja\n\ngyp是google为chromium项目开发的管理工具，功能类似于cmake。gyp只能产生编译脚本，真正的编译工作还有靠其他工具，例如: ninja。\n###### 1.8.1 安装gyp和ninja\n\n```\nsudo apt-get install gyp\nsudo apt-get install ninja-build\n```\n###### 1.8.2 一个简单的例子\n1. 首先准备一个源文件，我写了template_sample.cpp,代码如下：\n\n\t```\n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\ttemplate<typename T>  \n\t\tT add(T a, T b){ return a+b; }  \n\t\t  \n\t\tint main()  \n\t\t{  \n\t\t     cout<< add<int>(5,6)<<endl;  \n\t\t     cout<< add<double>(3.4,4.0)<<endl;  \n\t\t     return 0;  \n\t\t}   \t\n\t```\n2. 编写gyp使用的文件，build.gyp（后缀是.gyp即可，名字随意）\n\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'template_sample.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n3. 生成ninja脚本，命令如下：\n\n\t```\n\tgyp -depth=. -format=ninja ./build.gyp\n\t```\n\t\n\t其中`-depth=.` 表示在当前文件夹下寻找开始的gyp脚本，必须显示的指出gyp没有默认设置。 `-format=ninja` 表示要生成ninja的脚本，默认生成的是Makefile\n\t执行后，会在当前目录下生成一个out目录。其结构如下：\n\t\n\t```\n\t\tout\n\t\t|-- Default\n\t\t\t\t|-- an\n\t\t\t\t|-- build.ninja\n\t\t\t\t|-- obj\n\t\t\t\t\t  |-- an.ninja\n\t\t\t\t\t  |-- an.template_sample.o\n\t```\n\n4. 编译，执行如下命令：\n\t\n\t```\n\t\tninja -C out/Default\n\t```\n\t\n\t**注意**: -C是大写，执行成功后会在out/Default目录下生成一个叫做an的可执行文件，这个an就是在target_name字段指定的名字。\n\t\n5. clean整个工程重新编译\n\t\n\t目前，gyp没有提供clean的方案，所以只能手动删除out目录。\n\t\n###### 1.8.3 gyp脚本的编写\n\n1. 如何增加编译、链接参数\n\t编译参数一般增加在conditions字段，根据系统的不同增加cflags和ldflags,如下：\n\t\n\t```\n\t{  \n\t   'targets':[  \n\t        {  \n\t            'target_name':'an',  \n\t            'type':'executable',  \n\t            'dependencies':[],  \n\t            'defines':[],  \n\t            'include_dirs':[],  \n\t            'sources':[  \n\t                'template_sample.cpp',  \n\t            ],  \n\t            'conditions':[  \n\t              ['OS==\"win\"',{  \n\t                             'cflags':[],  \n\t                             'ldflags':[]  \n\t                         },{  \n\t                              'cflags':[  \n\t                                   '--std=c++11',  \n\t                               ],  \n\t                              'ldflags':[]  \n\t                         }  \n\t              ],  \n\t            ]  \n\t        }  \n\t    ],  \n\t}  \n\t\n\t```\n\t\n\t注意conditions字段的变化：`'OS=\"win\"'`是条件语句的后要有`,`号，第一个括号内表示条件为真时的参数，第二个括号表示条件为假时的参数。上面的例子中，我在不是win的系统上增加了`--std=c++11`这个参数。\n\t另外，这里有必要提一下链接顺序问题。在链接的时候，链接器对符号表的寻找是按照你输入的命令的顺序进行的，比如a.o需要libm.so的函数，那么libm.so在链接命令里就必须写在a.o的后面，因为链接器发现a.o有函数没有找到，就只会去他后面的库里找，如果你把libm.so写在前面，自然就找不到。所以在增加链接库的时候，不要在ldflags里增加-l类的参数，这类参数要加到libraries字段里 如：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'template_sample.cpp',  \n\t\t            ],  \n\t\t            'conditions':[  \n\t\t              ['OS==\"win\"',{  \n\t\t                             'cflags':[],  \n\t\t                             'ldflags':[]  \n\t\t                         },{  \n\t\t                              'cflags':[  \n\t\t                                   '--std=c++11',  \n\t\t                               ],  \n\t\t                              'ldflags':[]，  \n\t\t                              'libraries':[  \n\t\t                                  '-lm'  \n\t\t                              ]  \n\t\t                         }  \n\t\t              ],  \n\t\t            ]  \n\t\t        }  \n\t\t    ],  \n\t\t}  \n\t```\n\t\n2. 头文件路径设定 --include_dirs字段的使用\n\t有如下工程目录结构\n\t\n\t```\n\t\t|-- build.gyp\n\t\t|-- include\n\t\t|\t\t|-- define.h\n\t\t|-- main.cpp\n\t```\n\t\n\tmain.cpp的代码如下\n\t\n\t```\n\t\t#include \"defines.h\"  \n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\tint main(){  \n\t\t    cout<< MY_NUMBER <<endl;  \n\t\t    return 1;  \n\t\t}  \n\t```\n\t可见main.cpp文件引用了defines.h这个头文件，所以在编译的时候需要告诉编译系统到哪里去寻找这个defines.h文件。为此buid.gyp如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[  \n\t\t                'include'  \n\t\t            ],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n\t可以看出头文件的位置include在include_dirs字段中被指出。这里需要注意，两个单引号之间一定是文件的路径，不要包含不必要的空格等其他字符。\n\t\n3. 编译参数增加宏定义 --defines字段使用\n\t测试程序的源码如下：\n\t\n\t```\n\t\t#include <iostream>  \n\t\tusing namespace std;  \n\t\t  \n\t\t#ifdef BIG_NUMBER  \n\t\tint out_number = 10;   \n\t\t#else  \n\t\tint out_number = 1;  \n\t\t#endif  \n\t\tint main(){  \n\t\t    cout<< out_number <<endl;  \n\t\t    return 1;  \n\t\t}  \n\t```\n\t可以看出，如果BIG_NUMBER宏被定义，则输出为10 ，否则为1。在使用Makefile的时候，我们可以通过为gcc增加-DBIG_NUBMER参数的方式来定义这个宏。那在gyp管理的时候，我们就要使用defines字段，代码如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'executable',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[  \n\t\t                 'BIG_NUMBER'  \n\t\t            ],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t\n\t```\n4. 编译静态库(动态库)\n\t\n\t有时我们不是要输出一个可执行文件，而是要编译一个静态库或动态库。这就要修改type字段，上文中type字段使用了executable，实际还可以设置为`static_library`,修改后的gyp脚本如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'static_library',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\t```\n这样在out/Default/obj的目录下就会生成一个liban.a的静态库。\n\t\n\t动态库的方式类似，只需把type字段设置为shared_library即可。\n\t另外还有一种使用变量的方法，在这里提前介绍一下。就是将type字段设置为`<(library)`,完整的代码如下：\n\t\n\t```\n\t\t{  \n\t\t   'targets':[  \n\t\t        {  \n\t\t            'target_name':'an',  \n\t\t            'type':'<(library)',  \n\t\t            'dependencies':[],  \n\t\t            'defines':[],  \n\t\t            'include_dirs':[],  \n\t\t            'sources':[  \n\t\t                'main.cpp',  \n\t\t            ],  \n\t\t            'conditions':[]  \n\t\t        }  \n\t\t    ],    \n\t\t}  \n\n\t```\n\t然后在使用gyp工具的时候指定这个library的值，如：\n\t\n\t```\n\t\tgyp -depth=. -format=ninja -Dlibrary=static_library ./build.gyp\n\t```\n\t\n\t这样生成ninja脚本后，也可以生成静态库，这样做的好处是你可以在真正输出时再决定输出静态库还是动态库。尤其对于要一次生成多个库的情况下，这种方法尤其好用。\n\n##### 1.9 更多功能介绍\n\n###### 设计准则：\n- 关键字一致性：所有的关键字都和平台项目的配置字段相同\n- 通过前缀表明配置属于的特定平台。比如：`msvs_disabled_warnings`,`xcode_framework_dirs`\n\n**样例：**\n\n```\n\t{\n    \"target_defaults\": {\n        \"defines\": [\n            \"U_STATIC_IMPLEMENTATION\",\n            [\n                \"LOGFILE\",\n                \"foo.log\"\n            ]\n        ],\n        \"include_dirs\": [\n            \"..\"\n        ]\n    },\n    \"targets\": [\n        {\n            \"target_name\": \"foo\",\n            \"type\": \"static_library\",\n            \"sources\": [\n                \"foo/src/foo.cc\",\n                \"foo/src/foo_main.cc\"\n            ],\n            \"include_dirs\": [\n                \"foo\",\n                \"foo/include\"\n            ],\n            \"conditions\": [\n                [\n                    \"OS==mac\",\n                    {\n                        \"sources\": [\n                            \"platform_test_mac.mm\"\n                        ]\n                    }\n                ]\n            ],\n            \"direct_dependent_settings\": {\n                \"defines\": [\n                    \"UNIT_TEST\"\n                ],\n                \"include_dirs\": [\n                    \"foo\",\n                    \"foo/include\"\n                ]\n            }\n        }\n    ]\n}\n```\n\n**结构元素**\n\n.gyp文件中定义了一些targets和构建规则。\n\n下面的关键字可以定义在最顶层：\n\n- conditions:条件定义。 \n- includes:包含.gypi文件的列表\n\t\n\t```\n\t\t{\n\t\t\t\"targets\": [\n\t\t\t  {\n\t\t\t\t\"target_name\": \"Thread\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"includes\": [\n\t\t\t\t\"../common.gypi\",\n\t\t\t\t\"./thread.gypi\"\n\t\t\t\t]\n\t\t\t\t...\n\t\t\t  }\n\t\t\t]\n\t\t}\n\t```\n- target_defaults:默认的项目配置，每个项目(targets)的配置都需要从这个配置继承\n- targets:项目列表\n\n\t```\n\t\t{\n\t\t\t\"targets\": [\n\t\t\t{\n\t\t\t\t\"target_name\": \"hello1\",\n\t\t\t\t\"product_extension\": \"stuff\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"sources\": [\n\t\t\t\t\"hello.c\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"target_name\": \"hello2\",\n\t\t\t\t\"target_extension\": \"stuff\",\n\t\t\t\t\"type\": \"executable\",\n\t\t\t\t\"sources\": [\n\t\t\t\t\"hello.c\"\n\t\t\t\t]\n\t\t\t}\n\t\t\t]\n\t\t}\n\t```\n- variable: 定义了键值对，可以被其他地方以`<(varname)`的方式引用\n\n\t```\n\t\t{\n\t\t  'variables': {\n\t\t    'pi': 'import math; print math.pi',\n\t\t    'third_letters': \"<(other_letters)HIJK\",\n\t\t    'letters_list': 'ABCD',\n\t\t    'other_letters': '<(letters_list)EFG',\n\t\t    'check_included': '<(included_variable)',\n\t\t    'check_lists': [\n\t\t      '<(included_variable)',\n\t\t      '<(third_letters)',\n\t\t      \n\t\t    ],\n\t\t    'check_int': 5,\n\t\t    'check_str_int': '6',\n\t\t    'check_list_int': [\n\t\t      7,\n\t\t      '8',\n\t\t      9,\n\t\t      \n\t\t    ],\n\t\t    'not_int_1': ' 10',\n\t\t    'not_int_2': '11 ',\n\t\t    'not_int_3': '012',\n\t\t    'not_int_4': '13.0',\n\t\t    'not_int_5': '+14',\n\t\t    'negative_int': '-15',\n\t\t    'zero_int': '0',\n\t\t    \n\t\t  },\n\t\t  ...\n\t\t}\n\t```\n\t\n**项目(targets)**\n\n.gyp文件定义的一套构建项目的规则。targets中也可以包含`includes`,`conditions`和`variables`。下面的是一些targets中的专有字段：\n\n- target_name: 指定定义的target的名称\n- type: target的类型。支持`executable`、`static_library`、`shared_library`和`none`.其中`none`类型也很有用，可以作为处理资源、文档等特别项目的类型。例如，在Windows中,`none`将作为工具集类型的项目存在\n- product_extension:指定target生成目标的扩展名，不包含'.'\n- product_name: 指定tareget生成目标的文件名，与 `product_extension` 组成一个文件全名\n- dependencies:指定target依赖的其他target\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'a',\n\t\t      'type': 'static_library',\n\t\t      'dependencies': [\n\t\t        'b/b.gyp:b',\n\t\t        'c/c.gyp:*'\n\t\t      ],\n\t\t      'sources': [\n\t\t        'a.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ],\n\t\t  \n\t\t}\n\t\t}\n\t```\n\t\n- defines: 定义了预处理宏。类似于C/C++命令行编译中的-D或者/D选项\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'defines',\n\t\t      'type': 'executable',\n\t\t      'defines': [\n\t\t        'FOO',\n\t\t        'VALUE=1',\n\t\t        'PAREN_VALUE=(1+2+3)',\n\t\t        'HASH_VALUE=\"a#1\"',\n\t\t        \n\t\t      ],\n\t\t      'sources': [\n\t\t        'defines.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ]\n\t\t}\n\t\n\t```\n\t\n- include_dirs: 指定了包含文件的查找目录。类似于C/C++命令行编译中的-I或/I选项\n\n\t```\n\t\t{\n\t\t  'targets': [\n\t\t    {\n\t\t      'target_name': 'includes',\n\t\t      'type': 'executable',\n\t\t      'dependencies': [\n\t\t        'subdir/subdir_includes.gyp:subdir_includes',\n\t\t        \n\t\t      ],\n\t\t      'cflags': [\n\t\t        '-Ishadow1',\n\t\t        \n\t\t      ],\n\t\t      'include_dirs': [\n\t\t        '.',\n\t\t        'inc1',\n\t\t        'shadow2',\n\t\t        'subdir/inc2',\n\t\t        \n\t\t      ],\n\t\t      'sources': [\n\t\t        'includes.c',\n\t\t        \n\t\t      ],\n\t\t      \n\t\t    },\n\t\t    \n\t\t  ],\n\t\t  \n\t\t}\n\t\n\t```\n- sources:列出了项目中的代码文件和一些项目相关的文件.`sources!`段中可以指定被排除的文件\n- configurations:为targets定义的一套构建配置。\n- link\\_settings:指定target需要链接的库。`executable`和`shared_library` 类型的target需要指定链接库。这个段内可以指定target中可包含的除了`configurations`、`target_name`和`type`的所有配置。可以与`all_dependent_settings`、`direct_dependent_setting`做对比\n- direct\\_dependent\\_settings:指定依赖本target的target设置。这个段内可以指定target中可包含的除了`configurations`、`target_name`和`type`的所有属性。可以与`all_dependent_settings`、`link_settings`做对比\n- all\\_dependent\\_settings:\n- libraries:指定target依赖的库，见`link_settings>libraries`\n\n\t```\n\t\t...\n\n\t\t'link_settings': {\n\t\t\n\t\t'libraries': [\n\t\t\n\t\t'libiconv.dylib',\n\t\t\n\t\t'<(ZLIB_DIR)contrib/minizip/libminizip.a',\n\t\t\n\t\t'libcurl.dylib',],\n\t\t\n\t\t},\n\t\t\n\t\t...\n\n\t\n\t```\n- actions:针对输入的文件，定义了一组自定义的构建动作。\n- copies:定义了一套拷贝动作。\n- rules:\n- target\\_conditions:类似于conditions,但是起左右的时间比conditions晚\n- msvs\\_precompiled\\_header:指定预编译头文件。只能用于Visual Studio\n- msvs\\_precompiled\\_source:指定预编译源文件。只能用于Visual Studio\n- msvs\\_prebuild:生成之前事件。只能用于Visual Studio\n- msvs\\_postbuild:生成之后事件。只能用于Visual Studio\n\n\t```\n\t\t'msvs_postbuild':r'copy \"${OutDir}${TargetName}\" \"C:\\${TargetName}\"'\n\t```\n\t\n- msvs\\_props:指定target的属性页文件(.vsprops)。只能用于Visual Studio\n- msvs\\_cygwin\\_shell:指定action运行在cygwin下。只能用于Visual Studio\n- msvs\\_cygwin\\_dirs:指定cygwin的目录。只能用于Visual Studio\n- xcode\\_config\\_file:在xcode中，指定target的配置文件(.xcconfig)。只能用于xcode\n- xcode\\_framework\\_dirs:在xcode中，指定框架的目录。只能用于xcode\n","slug":"Gyp-学习记录","published":1,"updated":"2021-04-19T04:54:35.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxjd00disify15d1ecuv","content":"<p>Gyp 学习记录</p>\n<p>GYP(Generate Your Projects)是由 Chromium 团队开发的跨平台自动化项目构建工具。</p>\n<h5 id=\"gyp简述\"><a class=\"markdownIt-Anchor\" href=\"#gyp简述\"></a> gyp简述</h5>\n<p>GYP的输入是.gyp和.gypi文件，.gypi文件是用于.gyp文件include使用的。.gyp文件就是符合特定格式的json文件。</p>\n<p>gyp文件中包含target，Visual C++下，gyp生成sln，target生成vcproj或vxcproj。</p>\n<a id=\"more\"></a>\n<h5 id=\"11-设计目标\"><a class=\"markdownIt-Anchor\" href=\"#11-设计目标\"></a> 1.1 设计目标</h5>\n<p>gyp设计针对目标就是为了解决chromium浏览器构建问题，最重要的就是支持多平台的构建。因为Chromium内部都是c/c<ins>文件，因此主要考虑方便c/c</ins>程序的构建。设计时候还考虑到下面这些问题：</p>\n<ul>\n<li>debug vs release</li>\n<li>cross compile</li>\n<li>toolchain interface</li>\n</ul>\n<h5 id=\"12-构建文件\"><a class=\"markdownIt-Anchor\" href=\"#12-构建文件\"></a> 1.2 构建文件</h5>\n<p>构建文件名字不固定，但是后缀通常是.gyp和.gypi(gyp included).构建文件内容就是python的一个数据结构.<br>\nexample:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"string\">'target_defaults'</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'defines'</span>:[<span class=\"string\">'DEBUG'</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'targets'</span>:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'target_name'</span>:<span class=\"string\">'test'</span>, #生成的文件.</span><br><span class=\"line\">\t\t\t<span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>, #可执行程序.</span><br><span class=\"line\">\t\t\t<span class=\"string\">'sources'</span>:[<span class=\"string\">'test.cc'</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">'defines'</span>:[<span class=\"string\">'FOO'</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"13-gyp文件剖析\"><a class=\"markdownIt-Anchor\" href=\"#13-gyp文件剖析\"></a> 1.3 .gyp文件剖析</h5>\n<p>整个构建文件最顶层是一个字典，包含了下面这些key:</p>\n<ul>\n<li>conditions //条件判断</li>\n<li>includes // 包含的构建文件</li>\n<li>target <sub>defualt</sub> //构建目标默认属性</li>\n<li>targets // 构建目标列表</li>\n<li>variables // 构建文件使用的变量</li>\n</ul>\n<h6 id=\"131-conditions\"><a class=\"markdownIt-Anchor\" href=\"#131-conditions\"></a> 1.3.1 conditions</h6>\n<p>conditions分两种行为。 普通的conditions就在load构建文件之后立即计算，另外一种是target(conditions)是在计算完成依赖之后然后来进行计算的，两个过程分别就是early and late phases阶段。对于conditions写法非常简单</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'conditions</span><span class=\"symbol\">':</span>[</span><br><span class=\"line\">\t[<span class=\"symbol\">'OS==Linux</span>', &#123;<span class=\"symbol\">'sources</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'linux_interface.cc</span>']&#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>对于condition的判断，主要还是为了能够修改一些描述属性。从文档上来看，默认提供的条件就是OS判断，其他判断应该都是变量的判断。</p>\n<h6 id=\"132-targets\"><a class=\"markdownIt-Anchor\" href=\"#132-targets\"></a> 1.3.2 targets</h6>\n<p>target部分的话对target(default)里面设定的内容默认进行merge。比如上面例子的话，对于target/test来说，使用的define就会是-DDEBUG -DFOO.当然对于这种东西是可以进行其他策略选择的，比如如果修改成下面格式，那么就是直接替换：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'defines=</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'FOO</span>']</span><br></pre></td></tr></table></figure>\n<p>生成的defines就是-DFOO了。或者是可以剔除掉：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'defines!</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'DEBUG</span>']</span><br></pre></td></tr></table></figure>\n<p>生成的defines就没有任何内容了。通过在选项key后面添加操作符号来达到自定义目的(相对于全局环境).<br>\n对于一个target包括了下面这些重要属性：</p>\n<ul>\n<li>actions(list) //执行命令</li>\n<li>all<sub>dependentsettings</sub>(dict) //如果依赖这个target的话，需要使用的设置</li>\n<li>configurations(dict) 配置</li>\n<li>defines(list) //对于C/C++的defines</li>\n<li>dependencies(list) //依赖对象。如果是本文件的话那么直接引用，如果是其他文件的话，使用path/xxx.gyp:target.</li>\n<li>direct<sub>dependentsetting</sub>(dict) //直接依赖这个target的话，需要使用的设置</li>\n<li>include<sub>dirs</sub>(list) // 头文件目录</li>\n<li>libraries(list)//目标需要链接的库</li>\n<li>link<sub>settings</sub> //依赖这个target,需要使用的链接参数</li>\n<li>sources(list) //源文件</li>\n<li>target<sub>conditions</sub>(list) // 和conditions类似，但是是在完全计算之后然后来判断</li>\n<li>target<sub>name</sub>(string) //名字</li>\n<li>type //目标类型，现在只是支持static<sub>library</sub>,shared<sub>library</sub>,executable和none</li>\n</ul>\n<h6 id=\"133-includes\"><a class=\"markdownIt-Anchor\" href=\"#133-includes\"></a> 1.3.3 includes</h6>\n<p>gyp倾向的组织就是在toplevel上面存在一个gyp文件，可以存在子目录下面，但是子目录下面并不存放一个完整的构建文件， 通常只是存放构建文件的片段。为了区分，后缀为gypi。本身来说，这个gypi并不可以直接被gyp所接受生成native构建系统文件， 唯一的作用就是被toplevel的gyp文件进行include。如果对于Linux系统来说，最终生成的Makefile应该是一份大Makefile并且没有递归make的操作。 关于构造一个没有递归的Makefile是非常有价值的，不管是对于调试还是提升编译速度方面。可以参考文章Recusive Make Considered Harmful.<br>\n一旦我们允许include子目录的gypi文件进来，我们就必须规定哪些字段应该是文件。原因是假设存在src目录下面有src/BUILD.gypi这样一个文件，sources内容如下:</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'sources</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'src.cc</span>']</span><br></pre></td></tr></table></figure>\n<p>而在上层BUILD.gyp文件里面，使用includes语法：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'includes</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'./src/BUILD.gypi</span>']</span><br></pre></td></tr></table></figure>\n<p>那么在生成大Makefile的时候，我们必须清楚’sources’字段里面内容都是文件，<a href=\"http://xn--src-628d49d4v4bo9hzq0bhndy92e.cc\" target=\"_blank\" rel=\"noopener\">不应该直接使用src.cc</a>， 相反应该加上目录前缀src，<br>\n最终应该使用src/src.cc这样一个文件。关于哪些字段里面内容是路径， 这个在gyp里面有详细规定，在后面小节里面我们也会提到。</p>\n<h6 id=\"134-actions\"><a class=\"markdownIt-Anchor\" href=\"#134-actions\"></a> 1.3.4 actions</h6>\n<p>actions是targets里面的一个特殊属性，主要是用来进行target的自定义操作的.<br>\n每个action是一个dict，主要包含4个属性：</p>\n<ul>\n<li>action<sub>name</sub>(string). //操作名称</li>\n<li>input(list) //输入文件</li>\n<li>outputs (list) //输出文件</li>\n<li>actions(list) //命令</li>\n</ul>\n<p>有了这些属性就可以做一个完整的操作抽象。</p>\n<h6 id=\"135-variable\"><a class=\"markdownIt-Anchor\" href=\"#135-variable\"></a> 1.3.5 variable</h6>\n<p>variables这个小节里面是进行变量的定义，格式是dict。下面是一个例子：</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'variables'</span>:&#123;</span><br><span class=\"line\">    <span class=\"symbol\">'common_files'</span>:[<span class=\"symbol\">'src</span>/common.cc',<span class=\"symbol\">'src</span>/interface.cc'],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了引用变量，我们可以这样写：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&lt;@<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&gt;<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&gt;@<span class=\"comment\">(common_files)</span></span><br></pre></td></tr></table></figure>\n<p>总之引用变量必须加上(),同时在前面加上&lt;,&lt;@,&gt;,&gt;@的4种中一种前缀符号。关于前缀符号的含义， 会在后面的operator小节里面说明。<br>\n对于变量类型，一共分为3类：</p>\n<ul>\n<li>predefined variables //预定义变量</li>\n<li>user-defined variables //用户定义变量</li>\n<li>automatic variables //自动变量</li>\n</ul>\n<p>预定义变量比如OS(系统环境),EXECUTABLE<sub>SUFFIX</sub>(可执行文件后缀).用户自定义变量就不再赘述。<br>\n自动变量类似于Makefile里面的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">@</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">@,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">@</span><span class=\"mpunct\">,</span></span></span></span>这样的变量，好比反射。比如在target<sub>conditions</sub>部门的话，我们根据不同类型程序来做不同的condition:</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'target_conditions</span><span class=\"symbol\">':</span>[</span><br><span class=\"line\">\t[<span class=\"symbol\">'_type==static_library</span>',&#123;<span class=\"symbol\">'source</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'func.cc</span>']&#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这样对于target为static<sub>library</sub>都会联编func.cc这个文件了，自动变量就是属性名称之前加上构成的。<br>\n存在自动变量非常必要。有时候我们在全局环境中，希望根据不同的条件来定义不同的行为，并且是在计算的同时在来做条件判断的。 这样就提出一个要求就是，条件判断部分必须有能力知道，当前到底在计算什么东西(反射)。</p>\n<h5 id=\"14-early-and-late-phases\"><a class=\"markdownIt-Anchor\" href=\"#14-early-and-late-phases\"></a> 1.4 early and late phases</h5>\n<p>对于变量展开和条件判断有两个不同的阶段：<br>\n载入文件之后进行，就是early phase。<br>\n计算完成之后进行，就是late phase。<br>\n对于两个阶段允许不同操作是非常必要的。对于early phase这个肯定需要，而对于late phase的话， 有时候我们是希望了解到gyp处理完成某个target之后所有信息，然后进行判断的。<br>\nps:comake2在设计的时候，就没有考虑late phase这个功能。造成没有办法在应用层添加延迟计算这样一个特性。 最终只能够是修改comake2代码来完成需求。</p>\n<h5 id=\"15-operator\"><a class=\"markdownIt-Anchor\" href=\"#15-operator\"></a> 1.5 operator</h5>\n<p>关于每个操作符号的含义：</p>\n<ul>\n<li>x= //字段内容进行覆盖</li>\n<li>x? //如果字段没有定义，那么就进行覆盖</li>\n<li>x+ //字段内容进行merge</li>\n<li>&lt; (x) //early phase计算变量x，并且以string类型返回结果</li>\n<li>\n<blockquote>\n<p>(x) //late phase计算变量x，并且以string类型返回结果</p>\n</blockquote>\n</li>\n<li>&lt; @(x) //early phase计算变量x，并且以list类型返回结果</li>\n<li>\n<blockquote>\n<p>@(x) //late phase计算变量x，并且以list类型返回结果</p>\n</blockquote>\n</li>\n<li>x! //从已有的x字段中排除部分</li>\n<li>x/ //操作允许使用include/exclude，内容是一个正则表达式来进行包含和排除列表里面内容</li>\n<li>&lt; !(x) //认为x是一个shell command，得到执行结果作为string类型返回</li>\n<li>&lt; !@(x) //认为x是一个shell command，得到执行结果作为list类型返回</li>\n</ul>\n<h5 id=\"16-路径内容属性\"><a class=\"markdownIt-Anchor\" href=\"#16-路径内容属性\"></a> 1.6 路径内容属性</h5>\n<p>在includes这个小节提到了，gyp规定了某些属性的内容必须为路径。这些属性是：</p>\n<ul>\n<li>files.</li>\n<li>include<sub>dirs</sub>.</li>\n<li>inputs.</li>\n<li>libraries.</li>\n<li>outputs.</li>\n<li>sources.</li>\n</ul>\n<p>但是gyp对于里面的内容也做了一些特殊处理。对于内容来说，如果以下面这些字符开头：</p>\n<ul>\n<li>/ //绝对路径</li>\n<li>$ //变量</li>\n<li>\n<ul>\n<li>//链接参数比如-lm</li>\n</ul>\n</li>\n<li>&lt; ,&gt;,! //operator</li>\n<li>其他作为相对路径</li>\n</ul>\n<h5 id=\"17-在ubuntu下使用gyp\"><a class=\"markdownIt-Anchor\" href=\"#17-在ubuntu下使用gyp\"></a> 1.7 在Ubuntu下使用gyp</h5>\n<blockquote>\n<p>安装工具： sudo apt-get install gyp</p>\n</blockquote>\n<h6 id=\"171-简单实例\"><a class=\"markdownIt-Anchor\" href=\"#171-简单实例\"></a> 1.7.1 简单实例</h6>\n<p>hello.c</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello gyp\\n\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main.gyp</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>: [    </span><br><span class=\"line\">     &#123;    </span><br><span class=\"line\">       <span class=\"string\">'target_name'</span>: <span class=\"string\">'hello'</span>,    </span><br><span class=\"line\">       <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,    </span><br><span class=\"line\">       <span class=\"string\">'sources'</span>: [    </span><br><span class=\"line\">         <span class=\"string\">'hello.c'</span>,    </span><br><span class=\"line\">       ],    </span><br><span class=\"line\">     &#125;,    </span><br><span class=\"line\">   ],    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>构建：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"params\">--depth=</span><span class=\"string\">./</span> main.gyp</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">make</span></span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./hello</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"172-改进\"><a class=\"markdownIt-Anchor\" href=\"#172-改进\"></a> 1.7.2 改进</h6>\n<p>把上面的构建命令做成脚本 <a href=\"http://genPrj.sh\" target=\"_blank\" rel=\"noopener\">genPrj.sh</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gyp --depth=./ --generator-output=./build main.gyp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d build ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> build</span><br><span class=\"line\">\tmake</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>所有生成非源码文件都生成到了build目录下，看起来比较干净，在做一个清除脚本，清除就更省事了。do_clean.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">rm -rf build</span><br></pre></td></tr></table></figure>\n<h6 id=\"173-c实例\"><a class=\"markdownIt-Anchor\" href=\"#173-c实例\"></a> 1.7.3 c++实例</h6>\n<p>目录结构</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|-- do_clean.sh</span></span><br><span class=\"line\"><span class=\"string\">|-- genPrj.sh</span></span><br><span class=\"line\"><span class=\"string\">|---src</span></span><br><span class=\"line\">     <span class=\"string\">|-- hello.cc</span></span><br><span class=\"line\">     <span class=\"string\">|-- main.gyp</span></span><br><span class=\"line\">     <span class=\"string\">|-- my_class</span></span><br><span class=\"line\">           <span class=\"string\">|-- my_class.cc</span></span><br><span class=\"line\">           <span class=\"string\">|-- my_class.h</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://genPrj.sh\" target=\"_blank\" rel=\"noopener\">genPrj.sh</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gyp --depth=. --generator-output=build src/main.gyp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d build ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> bulid</span><br><span class=\"line\">\tmake</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://hello.cc\" target=\"_blank\" rel=\"noopener\">hello.cc</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"my_class/my_class.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello world\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"function\">MyClass <span class=\"title\">my_class</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">\tmy_class.Fun1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main.gyp</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">   <span class=\"symbol\">'targets'</span>: [    </span><br><span class=\"line\">     &#123;    </span><br><span class=\"line\">       <span class=\"symbol\">'target_name'</span>: <span class=\"symbol\">'my_class'</span>,    </span><br><span class=\"line\">       <span class=\"symbol\">'type'</span>: <span class=\"symbol\">'executable'</span>,    </span><br><span class=\"line\">       <span class=\"symbol\">'sources'</span>: [    </span><br><span class=\"line\">         <span class=\"symbol\">'hello</span>.cc',    </span><br><span class=\"line\">         <span class=\"symbol\">'my_class</span>/my_class.h',    </span><br><span class=\"line\">         <span class=\"symbol\">'my_class</span>/my_class.cc',    </span><br><span class=\"line\">       ],    </span><br><span class=\"line\">     &#125;,    </span><br><span class=\"line\">   ],    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>my_class.cc</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"my_class.h\"</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;    </span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyClass::Fun1() &#123;    </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the value is %d\\n\"</span>, value_);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>my_class.h</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">  MyClass(<span class=\"keyword\">int</span> <span class=\"keyword\">value</span>) : value_(<span class=\"keyword\">value</span>) &#123;&#125;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fun1</span>(<span class=\"params\"></span>)</span>;    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:    </span><br><span class=\"line\">  <span class=\"keyword\">int</span> value_;    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"18-ninja\"><a class=\"markdownIt-Anchor\" href=\"#18-ninja\"></a> 1.8 ninja</h5>\n<p>gyp是google为chromium项目开发的管理工具，功能类似于cmake。gyp只能产生编译脚本，真正的编译工作还有靠其他工具，例如: ninja。</p>\n<h6 id=\"181-安装gyp和ninja\"><a class=\"markdownIt-Anchor\" href=\"#181-安装gyp和ninja\"></a> 1.8.1 安装gyp和ninja</h6>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install gyp</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install ninja-build</span><br></pre></td></tr></table></figure>\n<h6 id=\"182-一个简单的例子\"><a class=\"markdownIt-Anchor\" href=\"#182-一个简单的例子\"></a> 1.8.2 一个简单的例子</h6>\n<ol>\n<li>\n<p>首先准备一个源文件，我写了template_sample.cpp,代码如下：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;  </span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">add</span><span class=\"params\">(T a, T b)</span></span>&#123; <span class=\"keyword\">return</span> a+b; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt; add&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">5</span>,<span class=\"number\">6</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt; add&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">3.4</span>,<span class=\"number\">4.0</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编写gyp使用的文件，build.gyp（后缀是.gyp即可，名字随意）</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>生成ninja脚本，命令如下：</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"attribute\">-depth</span>=. <span class=\"attribute\">-format</span>=ninja ./build.gyp</span><br></pre></td></tr></table></figure>\n<p>其中<code>-depth=.</code> 表示在当前文件夹下寻找开始的gyp脚本，必须显示的指出gyp没有默认设置。 <code>-format=ninja</code> 表示要生成ninja的脚本，默认生成的是Makefile<br>\n执行后，会在当前目录下生成一个out目录。其结构如下：</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span></span><br><span class=\"line\">|<span class=\"comment\">-- Default</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- an</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- build.ninja</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- obj</span></span><br><span class=\"line\">\t\t\t  |<span class=\"comment\">-- an.ninja</span></span><br><span class=\"line\">\t\t\t  |<span class=\"comment\">-- an.template_sample.o</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编译，执行如下命令：</p>\n <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ninja -C <span class=\"keyword\">out</span>/<span class=\"keyword\">Default</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>: -C是大写，执行成功后会在out/Default目录下生成一个叫做an的可执行文件，这个an就是在target_name字段指定的名字。</p>\n</li>\n<li>\n<p>clean整个工程重新编译</p>\n<p>目前，gyp没有提供clean的方案，所以只能手动删除out目录。</p>\n</li>\n</ol>\n<h6 id=\"183-gyp脚本的编写\"><a class=\"markdownIt-Anchor\" href=\"#183-gyp脚本的编写\"></a> 1.8.3 gyp脚本的编写</h6>\n<ol>\n<li>\n<p>如何增加编译、链接参数<br>\n编译参数一般增加在conditions字段，根据系统的不同增加cflags和ldflags,如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[  </span><br><span class=\"line\">              [<span class=\"string\">'OS==\"win\"'</span>,&#123;  </span><br><span class=\"line\">                             <span class=\"string\">'cflags'</span>:[],  </span><br><span class=\"line\">                             <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;,&#123;  </span><br><span class=\"line\">                              <span class=\"string\">'cflags'</span>:[  </span><br><span class=\"line\">                                   <span class=\"string\">'--std=c++11'</span>,  </span><br><span class=\"line\">                               ],  </span><br><span class=\"line\">                              <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;  </span><br><span class=\"line\">              ],  </span><br><span class=\"line\">            ]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意conditions字段的变化：<code>'OS=&quot;win&quot;'</code>是条件语句的后要有<code>,</code>号，第一个括号内表示条件为真时的参数，第二个括号表示条件为假时的参数。上面的例子中，我在不是win的系统上增加了<code>--std=c++11</code>这个参数。<br>\n另外，这里有必要提一下链接顺序问题。在链接的时候，链接器对符号表的寻找是按照你输入的命令的顺序进行的，比如a.o需要libm.so的函数，那么libm.so在链接命令里就必须写在a.o的后面，因为链接器发现a.o有函数没有找到，就只会去他后面的库里找，如果你把libm.so写在前面，自然就找不到。所以在增加链接库的时候，不要在ldflags里增加-l类的参数，这类参数要加到libraries字段里 如：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[  </span><br><span class=\"line\">              [<span class=\"string\">'OS==\"win\"'</span>,&#123;  </span><br><span class=\"line\">                             <span class=\"string\">'cflags'</span>:[],  </span><br><span class=\"line\">                             <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;,&#123;  </span><br><span class=\"line\">                              <span class=\"string\">'cflags'</span>:[  </span><br><span class=\"line\">                                   <span class=\"string\">'--std=c++11'</span>,  </span><br><span class=\"line\">                               ],  </span><br><span class=\"line\">                              <span class=\"string\">'ldflags'</span>:[]，  </span><br><span class=\"line\">                              <span class=\"string\">'libraries'</span>:[  </span><br><span class=\"line\">                                  <span class=\"string\">'-lm'</span>  </span><br><span class=\"line\">                              ]  </span><br><span class=\"line\">                         &#125;  </span><br><span class=\"line\">              ],  </span><br><span class=\"line\">            ]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>头文件路径设定 --include_dirs字段的使用<br>\n有如下工程目录结构</p>\n <figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-- build.gyp</span></span><br><span class=\"line\">|<span class=\"string\">-- include</span></span><br><span class=\"line\">|<span class=\"string\">\t\t</span>|<span class=\"string\">-- define.h</span></span><br><span class=\"line\">|<span class=\"string\">-- main.cpp</span></span><br></pre></td></tr></table></figure>\n<p>main.cpp的代码如下</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"defines.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt; MY_NUMBER &lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见main.cpp文件引用了defines.h这个头文件，所以在编译的时候需要告诉编译系统到哪里去寻找这个defines.h文件。为此buid.gyp如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'include'</span>  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出头文件的位置include在include_dirs字段中被指出。这里需要注意，两个单引号之间一定是文件的路径，不要包含不必要的空格等其他字符。</p>\n</li>\n<li>\n<p>编译参数增加宏定义 --defines字段使用<br>\n测试程序的源码如下：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> BIG_NUMBER  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> out_number = <span class=\"number\">10</span>;   </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> out_number = <span class=\"number\">1</span>;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt; out_number &lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，如果BIG_NUMBER宏被定义，则输出为10 ，否则为1。在使用Makefile的时候，我们可以通过为gcc增加-DBIG_NUBMER参数的方式来定义这个宏。那在gyp管理的时候，我们就要使用defines字段，代码如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[  </span><br><span class=\"line\">                 <span class=\"string\">'BIG_NUMBER'</span>  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编译静态库(动态库)</p>\n<p>有时我们不是要输出一个可执行文件，而是要编译一个静态库或动态库。这就要修改type字段，上文中type字段使用了executable，实际还可以设置为<code>static_library</code>,修改后的gyp脚本如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'static_library'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样在out/Default/obj的目录下就会生成一个liban.a的静态库。</p>\n<pre><code>动态库的方式类似，只需把type字段设置为shared_library即可。\n另外还有一种使用变量的方法，在这里提前介绍一下。就是将type字段设置为`&lt;(library)`,完整的代码如下：\n\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'&lt;(library)'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n然后在使用gyp工具的时候指定这个library的值，如：\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"attribute\">-depth</span>=. <span class=\"attribute\">-format</span>=ninja <span class=\"attribute\">-Dlibrary</span>=static_library ./build.gyp</span><br></pre></td></tr></table></figure>\n\n\n这样生成ninja脚本后，也可以生成静态库，这样做的好处是你可以在真正输出时再决定输出静态库还是动态库。尤其对于要一次生成多个库的情况下，这种方法尤其好用。\n</code></pre>\n<h5 id=\"19-更多功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#19-更多功能介绍\"></a> 1.9 更多功能介绍</h5>\n<h6 id=\"设计准则\"><a class=\"markdownIt-Anchor\" href=\"#设计准则\"></a> 设计准则：</h6>\n<ul>\n<li>关键字一致性：所有的关键字都和平台项目的配置字段相同</li>\n<li>通过前缀表明配置属于的特定平台。比如：<code>msvs_disabled_warnings</code>,<code>xcode_framework_dirs</code></li>\n</ul>\n<p><strong>样例：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target_defaults\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"defines\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"U_STATIC_IMPLEMENTATION\"</span>,</span><br><span class=\"line\">            [</span><br><span class=\"line\">                <span class=\"string\">\"LOGFILE\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo.log\"</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"..\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"static_library\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\"foo/src/foo.cc\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo/src/foo_main.cc\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo/include\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"conditions\"</span>: [</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    <span class=\"string\">\"OS==mac\"</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">                            <span class=\"string\">\"platform_test_mac.mm\"</span></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"direct_dependent_settings\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"defines\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"UNIT_TEST\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"foo/include\"</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结构元素</strong></p>\n<p>.gyp文件中定义了一些targets和构建规则。</p>\n<p>下面的关键字可以定义在最顶层：</p>\n<ul>\n<li>\n<p>conditions:条件定义。</p>\n</li>\n<li>\n<p>includes:包含.gypi文件的列表</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"Thread\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"includes\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"../common.gypi\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"./thread.gypi\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>target_defaults:默认的项目配置，每个项目(targets)的配置都需要从这个配置继承</p>\n</li>\n<li>\n<p>targets:项目列表</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"hello1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"product_extension\"</span>: <span class=\"string\">\"stuff\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello.c\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"hello2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_extension\"</span>: <span class=\"string\">\"stuff\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello.c\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>variable: 定义了键值对，可以被其他地方以<code>&lt;(varname)</code>的方式引用</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'variables'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'pi'</span>: <span class=\"string\">'import math; print math.pi'</span>,</span><br><span class=\"line\">    <span class=\"string\">'third_letters'</span>: <span class=\"string\">\"&lt;(other_letters)HIJK\"</span>,</span><br><span class=\"line\">    <span class=\"string\">'letters_list'</span>: <span class=\"string\">'ABCD'</span>,</span><br><span class=\"line\">    <span class=\"string\">'other_letters'</span>: <span class=\"string\">'&lt;(letters_list)EFG'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_included'</span>: <span class=\"string\">'&lt;(included_variable)'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_lists'</span>: [</span><br><span class=\"line\">      <span class=\"string\">'&lt;(included_variable)'</span>,</span><br><span class=\"line\">      <span class=\"string\">'&lt;(third_letters)'</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'check_int'</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_str_int'</span>: <span class=\"string\">'6'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_list_int'</span>: [</span><br><span class=\"line\">      <span class=\"number\">7</span>,</span><br><span class=\"line\">      <span class=\"string\">'8'</span>,</span><br><span class=\"line\">      <span class=\"number\">9</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'not_int_1'</span>: <span class=\"string\">' 10'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_2'</span>: <span class=\"string\">'11 '</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_3'</span>: <span class=\"string\">'012'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_4'</span>: <span class=\"string\">'13.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_5'</span>: <span class=\"string\">'+14'</span>,</span><br><span class=\"line\">    <span class=\"string\">'negative_int'</span>: <span class=\"string\">'-15'</span>,</span><br><span class=\"line\">    <span class=\"string\">'zero_int'</span>: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>项目(targets)</strong></p>\n<p>.gyp文件定义的一套构建项目的规则。targets中也可以包含<code>includes</code>,<code>conditions</code>和<code>variables</code>。下面的是一些targets中的专有字段：</p>\n<ul>\n<li>\n<p>target_name: 指定定义的target的名称</p>\n</li>\n<li>\n<p>type: target的类型。支持<code>executable</code>、<code>static_library</code>、<code>shared_library</code>和<code>none</code>.其中<code>none</code>类型也很有用，可以作为处理资源、文档等特别项目的类型。例如，在Windows中,<code>none</code>将作为工具集类型的项目存在</p>\n</li>\n<li>\n<p>product_extension:指定target生成目标的扩展名，不包含’.’</p>\n</li>\n<li>\n<p>product_name: 指定tareget生成目标的文件名，与 <code>product_extension</code> 组成一个文件全名</p>\n</li>\n<li>\n<p>dependencies:指定target依赖的其他target</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'static_library'</span>,</span><br><span class=\"line\">      <span class=\"string\">'dependencies'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'b/b.gyp:b'</span>,</span><br><span class=\"line\">        <span class=\"string\">'c/c.gyp:*'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'a.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>defines: 定义了预处理宏。类似于C/C++命令行编译中的-D或者/D选项</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'defines'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,</span><br><span class=\"line\">      <span class=\"string\">'defines'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'FOO'</span>,</span><br><span class=\"line\">        <span class=\"string\">'VALUE=1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PAREN_VALUE=(1+2+3)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HASH_VALUE=\"a#1\"'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'defines.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>include_dirs: 指定了包含文件的查找目录。类似于C/C++命令行编译中的-I或/I选项</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'includes'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,</span><br><span class=\"line\">      <span class=\"string\">'dependencies'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'subdir/subdir_includes.gyp:subdir_includes'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'cflags'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'-Ishadow1'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'include_dirs'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'.'</span>,</span><br><span class=\"line\">        <span class=\"string\">'inc1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'shadow2'</span>,</span><br><span class=\"line\">        <span class=\"string\">'subdir/inc2'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'includes.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>sources:列出了项目中的代码文件和一些项目相关的文件.<code>sources!</code>段中可以指定被排除的文件</p>\n</li>\n<li>\n<p>configurations:为targets定义的一套构建配置。</p>\n</li>\n<li>\n<p>link_settings:指定target需要链接的库。<code>executable</code>和<code>shared_library</code> 类型的target需要指定链接库。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有配置。可以与<code>all_dependent_settings</code>、<code>direct_dependent_setting</code>做对比</p>\n</li>\n<li>\n<p>direct_dependent_settings:指定依赖本target的target设置。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有属性。可以与<code>all_dependent_settings</code>、<code>link_settings</code>做对比</p>\n</li>\n<li>\n<p>all_dependent_settings:</p>\n</li>\n<li>\n<p>libraries:指定target依赖的库，见<code>link_settings&gt;libraries</code></p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'link_settings'</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libraries'</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libiconv.dylib'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'&lt;(ZLIB_DIR)contrib/minizip/libminizip.a'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libcurl.dylib'</span>,],</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>actions:针对输入的文件，定义了一组自定义的构建动作。</p>\n</li>\n<li>\n<p>copies:定义了一套拷贝动作。</p>\n</li>\n<li>\n<p>rules:</p>\n</li>\n<li>\n<p>target_conditions:类似于conditions,但是起左右的时间比conditions晚</p>\n</li>\n<li>\n<p>msvs_precompiled_header:指定预编译头文件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_precompiled_source:指定预编译源文件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_prebuild:生成之前事件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_postbuild:生成之后事件。只能用于Visual Studio</p>\n  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'msvs_postbuild'</span>:<span class=\"string\">r'copy \"$&#123;OutDir&#125;$&#123;TargetName&#125;\" \"C:\\$&#123;TargetName&#125;\"'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>msvs_props:指定target的属性页文件(.vsprops)。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_cygwin_shell:指定action运行在cygwin下。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_cygwin_dirs:指定cygwin的目录。只能用于Visual Studio</p>\n</li>\n<li>\n<p>xcode_config_file:在xcode中，指定target的配置文件(.xcconfig)。只能用于xcode</p>\n</li>\n<li>\n<p>xcode_framework_dirs:在xcode中，指定框架的目录。只能用于xcode</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Gyp 学习记录</p>\n<p>GYP(Generate Your Projects)是由 Chromium 团队开发的跨平台自动化项目构建工具。</p>\n<h5 id=\"gyp简述\"><a class=\"markdownIt-Anchor\" href=\"#gyp简述\"></a> gyp简述</h5>\n<p>GYP的输入是.gyp和.gypi文件，.gypi文件是用于.gyp文件include使用的。.gyp文件就是符合特定格式的json文件。</p>\n<p>gyp文件中包含target，Visual C++下，gyp生成sln，target生成vcproj或vxcproj。</p>","more":"<h5 id=\"11-设计目标\"><a class=\"markdownIt-Anchor\" href=\"#11-设计目标\"></a> 1.1 设计目标</h5>\n<p>gyp设计针对目标就是为了解决chromium浏览器构建问题，最重要的就是支持多平台的构建。因为Chromium内部都是c/c<ins>文件，因此主要考虑方便c/c</ins>程序的构建。设计时候还考虑到下面这些问题：</p>\n<ul>\n<li>debug vs release</li>\n<li>cross compile</li>\n<li>toolchain interface</li>\n</ul>\n<h5 id=\"12-构建文件\"><a class=\"markdownIt-Anchor\" href=\"#12-构建文件\"></a> 1.2 构建文件</h5>\n<p>构建文件名字不固定，但是后缀通常是.gyp和.gypi(gyp included).构建文件内容就是python的一个数据结构.<br>\nexample:</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"string\">'target_defaults'</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">'defines'</span>:[<span class=\"string\">'DEBUG'</span>],</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">'targets'</span>:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">'target_name'</span>:<span class=\"string\">'test'</span>, #生成的文件.</span><br><span class=\"line\">\t\t\t<span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>, #可执行程序.</span><br><span class=\"line\">\t\t\t<span class=\"string\">'sources'</span>:[<span class=\"string\">'test.cc'</span>],</span><br><span class=\"line\">\t\t\t<span class=\"string\">'defines'</span>:[<span class=\"string\">'FOO'</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"13-gyp文件剖析\"><a class=\"markdownIt-Anchor\" href=\"#13-gyp文件剖析\"></a> 1.3 .gyp文件剖析</h5>\n<p>整个构建文件最顶层是一个字典，包含了下面这些key:</p>\n<ul>\n<li>conditions //条件判断</li>\n<li>includes // 包含的构建文件</li>\n<li>target <sub>defualt</sub> //构建目标默认属性</li>\n<li>targets // 构建目标列表</li>\n<li>variables // 构建文件使用的变量</li>\n</ul>\n<h6 id=\"131-conditions\"><a class=\"markdownIt-Anchor\" href=\"#131-conditions\"></a> 1.3.1 conditions</h6>\n<p>conditions分两种行为。 普通的conditions就在load构建文件之后立即计算，另外一种是target(conditions)是在计算完成依赖之后然后来进行计算的，两个过程分别就是early and late phases阶段。对于conditions写法非常简单</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'conditions</span><span class=\"symbol\">':</span>[</span><br><span class=\"line\">\t[<span class=\"symbol\">'OS==Linux</span>', &#123;<span class=\"symbol\">'sources</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'linux_interface.cc</span>']&#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>对于condition的判断，主要还是为了能够修改一些描述属性。从文档上来看，默认提供的条件就是OS判断，其他判断应该都是变量的判断。</p>\n<h6 id=\"132-targets\"><a class=\"markdownIt-Anchor\" href=\"#132-targets\"></a> 1.3.2 targets</h6>\n<p>target部分的话对target(default)里面设定的内容默认进行merge。比如上面例子的话，对于target/test来说，使用的define就会是-DDEBUG -DFOO.当然对于这种东西是可以进行其他策略选择的，比如如果修改成下面格式，那么就是直接替换：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'defines=</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'FOO</span>']</span><br></pre></td></tr></table></figure>\n<p>生成的defines就是-DFOO了。或者是可以剔除掉：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'defines!</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'DEBUG</span>']</span><br></pre></td></tr></table></figure>\n<p>生成的defines就没有任何内容了。通过在选项key后面添加操作符号来达到自定义目的(相对于全局环境).<br>\n对于一个target包括了下面这些重要属性：</p>\n<ul>\n<li>actions(list) //执行命令</li>\n<li>all<sub>dependentsettings</sub>(dict) //如果依赖这个target的话，需要使用的设置</li>\n<li>configurations(dict) 配置</li>\n<li>defines(list) //对于C/C++的defines</li>\n<li>dependencies(list) //依赖对象。如果是本文件的话那么直接引用，如果是其他文件的话，使用path/xxx.gyp:target.</li>\n<li>direct<sub>dependentsetting</sub>(dict) //直接依赖这个target的话，需要使用的设置</li>\n<li>include<sub>dirs</sub>(list) // 头文件目录</li>\n<li>libraries(list)//目标需要链接的库</li>\n<li>link<sub>settings</sub> //依赖这个target,需要使用的链接参数</li>\n<li>sources(list) //源文件</li>\n<li>target<sub>conditions</sub>(list) // 和conditions类似，但是是在完全计算之后然后来判断</li>\n<li>target<sub>name</sub>(string) //名字</li>\n<li>type //目标类型，现在只是支持static<sub>library</sub>,shared<sub>library</sub>,executable和none</li>\n</ul>\n<h6 id=\"133-includes\"><a class=\"markdownIt-Anchor\" href=\"#133-includes\"></a> 1.3.3 includes</h6>\n<p>gyp倾向的组织就是在toplevel上面存在一个gyp文件，可以存在子目录下面，但是子目录下面并不存放一个完整的构建文件， 通常只是存放构建文件的片段。为了区分，后缀为gypi。本身来说，这个gypi并不可以直接被gyp所接受生成native构建系统文件， 唯一的作用就是被toplevel的gyp文件进行include。如果对于Linux系统来说，最终生成的Makefile应该是一份大Makefile并且没有递归make的操作。 关于构造一个没有递归的Makefile是非常有价值的，不管是对于调试还是提升编译速度方面。可以参考文章Recusive Make Considered Harmful.<br>\n一旦我们允许include子目录的gypi文件进来，我们就必须规定哪些字段应该是文件。原因是假设存在src目录下面有src/BUILD.gypi这样一个文件，sources内容如下:</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'sources</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'src.cc</span>']</span><br></pre></td></tr></table></figure>\n<p>而在上层BUILD.gyp文件里面，使用includes语法：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'includes</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'./src/BUILD.gypi</span>']</span><br></pre></td></tr></table></figure>\n<p>那么在生成大Makefile的时候，我们必须清楚’sources’字段里面内容都是文件，<a href=\"http://xn--src-628d49d4v4bo9hzq0bhndy92e.cc\" target=\"_blank\" rel=\"noopener\">不应该直接使用src.cc</a>， 相反应该加上目录前缀src，<br>\n最终应该使用src/src.cc这样一个文件。关于哪些字段里面内容是路径， 这个在gyp里面有详细规定，在后面小节里面我们也会提到。</p>\n<h6 id=\"134-actions\"><a class=\"markdownIt-Anchor\" href=\"#134-actions\"></a> 1.3.4 actions</h6>\n<p>actions是targets里面的一个特殊属性，主要是用来进行target的自定义操作的.<br>\n每个action是一个dict，主要包含4个属性：</p>\n<ul>\n<li>action<sub>name</sub>(string). //操作名称</li>\n<li>input(list) //输入文件</li>\n<li>outputs (list) //输出文件</li>\n<li>actions(list) //命令</li>\n</ul>\n<p>有了这些属性就可以做一个完整的操作抽象。</p>\n<h6 id=\"135-variable\"><a class=\"markdownIt-Anchor\" href=\"#135-variable\"></a> 1.3.5 variable</h6>\n<p>variables这个小节里面是进行变量的定义，格式是dict。下面是一个例子：</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'variables'</span>:&#123;</span><br><span class=\"line\">    <span class=\"symbol\">'common_files'</span>:[<span class=\"symbol\">'src</span>/common.cc',<span class=\"symbol\">'src</span>/interface.cc'],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了引用变量，我们可以这样写：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&lt;@<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&gt;<span class=\"comment\">(common_files)</span></span><br><span class=\"line\">&gt;@<span class=\"comment\">(common_files)</span></span><br></pre></td></tr></table></figure>\n<p>总之引用变量必须加上(),同时在前面加上&lt;,&lt;@,&gt;,&gt;@的4种中一种前缀符号。关于前缀符号的含义， 会在后面的operator小节里面说明。<br>\n对于变量类型，一共分为3类：</p>\n<ul>\n<li>predefined variables //预定义变量</li>\n<li>user-defined variables //用户定义变量</li>\n<li>automatic variables //自动变量</li>\n</ul>\n<p>预定义变量比如OS(系统环境),EXECUTABLE<sub>SUFFIX</sub>(可执行文件后缀).用户自定义变量就不再赘述。<br>\n自动变量类似于Makefile里面的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">@</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">@,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">@</span><span class=\"mpunct\">,</span></span></span></span>这样的变量，好比反射。比如在target<sub>conditions</sub>部门的话，我们根据不同类型程序来做不同的condition:</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">'target_conditions</span><span class=\"symbol\">':</span>[</span><br><span class=\"line\">\t[<span class=\"symbol\">'_type==static_library</span>',&#123;<span class=\"symbol\">'source</span><span class=\"symbol\">':</span>[<span class=\"symbol\">'func.cc</span>']&#125;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这样对于target为static<sub>library</sub>都会联编func.cc这个文件了，自动变量就是属性名称之前加上构成的。<br>\n存在自动变量非常必要。有时候我们在全局环境中，希望根据不同的条件来定义不同的行为，并且是在计算的同时在来做条件判断的。 这样就提出一个要求就是，条件判断部分必须有能力知道，当前到底在计算什么东西(反射)。</p>\n<h5 id=\"14-early-and-late-phases\"><a class=\"markdownIt-Anchor\" href=\"#14-early-and-late-phases\"></a> 1.4 early and late phases</h5>\n<p>对于变量展开和条件判断有两个不同的阶段：<br>\n载入文件之后进行，就是early phase。<br>\n计算完成之后进行，就是late phase。<br>\n对于两个阶段允许不同操作是非常必要的。对于early phase这个肯定需要，而对于late phase的话， 有时候我们是希望了解到gyp处理完成某个target之后所有信息，然后进行判断的。<br>\nps:comake2在设计的时候，就没有考虑late phase这个功能。造成没有办法在应用层添加延迟计算这样一个特性。 最终只能够是修改comake2代码来完成需求。</p>\n<h5 id=\"15-operator\"><a class=\"markdownIt-Anchor\" href=\"#15-operator\"></a> 1.5 operator</h5>\n<p>关于每个操作符号的含义：</p>\n<ul>\n<li>x= //字段内容进行覆盖</li>\n<li>x? //如果字段没有定义，那么就进行覆盖</li>\n<li>x+ //字段内容进行merge</li>\n<li>&lt; (x) //early phase计算变量x，并且以string类型返回结果</li>\n<li>\n<blockquote>\n<p>(x) //late phase计算变量x，并且以string类型返回结果</p>\n</blockquote>\n</li>\n<li>&lt; @(x) //early phase计算变量x，并且以list类型返回结果</li>\n<li>\n<blockquote>\n<p>@(x) //late phase计算变量x，并且以list类型返回结果</p>\n</blockquote>\n</li>\n<li>x! //从已有的x字段中排除部分</li>\n<li>x/ //操作允许使用include/exclude，内容是一个正则表达式来进行包含和排除列表里面内容</li>\n<li>&lt; !(x) //认为x是一个shell command，得到执行结果作为string类型返回</li>\n<li>&lt; !@(x) //认为x是一个shell command，得到执行结果作为list类型返回</li>\n</ul>\n<h5 id=\"16-路径内容属性\"><a class=\"markdownIt-Anchor\" href=\"#16-路径内容属性\"></a> 1.6 路径内容属性</h5>\n<p>在includes这个小节提到了，gyp规定了某些属性的内容必须为路径。这些属性是：</p>\n<ul>\n<li>files.</li>\n<li>include<sub>dirs</sub>.</li>\n<li>inputs.</li>\n<li>libraries.</li>\n<li>outputs.</li>\n<li>sources.</li>\n</ul>\n<p>但是gyp对于里面的内容也做了一些特殊处理。对于内容来说，如果以下面这些字符开头：</p>\n<ul>\n<li>/ //绝对路径</li>\n<li>$ //变量</li>\n<li>\n<ul>\n<li>//链接参数比如-lm</li>\n</ul>\n</li>\n<li>&lt; ,&gt;,! //operator</li>\n<li>其他作为相对路径</li>\n</ul>\n<h5 id=\"17-在ubuntu下使用gyp\"><a class=\"markdownIt-Anchor\" href=\"#17-在ubuntu下使用gyp\"></a> 1.7 在Ubuntu下使用gyp</h5>\n<blockquote>\n<p>安装工具： sudo apt-get install gyp</p>\n</blockquote>\n<h6 id=\"171-简单实例\"><a class=\"markdownIt-Anchor\" href=\"#171-简单实例\"></a> 1.7.1 简单实例</h6>\n<p>hello.c</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello gyp\\n\"</span>);  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main.gyp</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>: [    </span><br><span class=\"line\">     &#123;    </span><br><span class=\"line\">       <span class=\"string\">'target_name'</span>: <span class=\"string\">'hello'</span>,    </span><br><span class=\"line\">       <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,    </span><br><span class=\"line\">       <span class=\"string\">'sources'</span>: [    </span><br><span class=\"line\">         <span class=\"string\">'hello.c'</span>,    </span><br><span class=\"line\">       ],    </span><br><span class=\"line\">     &#125;,    </span><br><span class=\"line\">   ],    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>构建：</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"params\">--depth=</span><span class=\"string\">./</span> main.gyp</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">make</span></span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./hello</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"172-改进\"><a class=\"markdownIt-Anchor\" href=\"#172-改进\"></a> 1.7.2 改进</h6>\n<p>把上面的构建命令做成脚本 <a href=\"http://genPrj.sh\" target=\"_blank\" rel=\"noopener\">genPrj.sh</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gyp --depth=./ --generator-output=./build main.gyp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d build ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> build</span><br><span class=\"line\">\tmake</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>所有生成非源码文件都生成到了build目录下，看起来比较干净，在做一个清除脚本，清除就更省事了。do_clean.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">rm -rf build</span><br></pre></td></tr></table></figure>\n<h6 id=\"173-c实例\"><a class=\"markdownIt-Anchor\" href=\"#173-c实例\"></a> 1.7.3 c++实例</h6>\n<p>目录结构</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">|-- do_clean.sh</span></span><br><span class=\"line\"><span class=\"string\">|-- genPrj.sh</span></span><br><span class=\"line\"><span class=\"string\">|---src</span></span><br><span class=\"line\">     <span class=\"string\">|-- hello.cc</span></span><br><span class=\"line\">     <span class=\"string\">|-- main.gyp</span></span><br><span class=\"line\">     <span class=\"string\">|-- my_class</span></span><br><span class=\"line\">           <span class=\"string\">|-- my_class.cc</span></span><br><span class=\"line\">           <span class=\"string\">|-- my_class.h</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://genPrj.sh\" target=\"_blank\" rel=\"noopener\">genPrj.sh</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">gyp --depth=. --generator-output=build src/main.gyp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d build ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">cd</span> bulid</span><br><span class=\"line\">\tmake</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://hello.cc\" target=\"_blank\" rel=\"noopener\">hello.cc</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"my_class/my_class.h\"</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello world\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"function\">MyClass <span class=\"title\">my_class</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">\tmy_class.Fun1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>main.gyp</p>\n<figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;    </span><br><span class=\"line\">   <span class=\"symbol\">'targets'</span>: [    </span><br><span class=\"line\">     &#123;    </span><br><span class=\"line\">       <span class=\"symbol\">'target_name'</span>: <span class=\"symbol\">'my_class'</span>,    </span><br><span class=\"line\">       <span class=\"symbol\">'type'</span>: <span class=\"symbol\">'executable'</span>,    </span><br><span class=\"line\">       <span class=\"symbol\">'sources'</span>: [    </span><br><span class=\"line\">         <span class=\"symbol\">'hello</span>.cc',    </span><br><span class=\"line\">         <span class=\"symbol\">'my_class</span>/my_class.h',    </span><br><span class=\"line\">         <span class=\"symbol\">'my_class</span>/my_class.cc',    </span><br><span class=\"line\">       ],    </span><br><span class=\"line\">     &#125;,    </span><br><span class=\"line\">   ],    </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>my_class.cc</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"my_class.h\"</span>    </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;    </span></span></span><br><span class=\"line\"><span class=\"keyword\">void</span> MyClass::Fun1() &#123;    </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"the value is %d\\n\"</span>, value_);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>my_class.h</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> &#123;    </span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">  MyClass(<span class=\"keyword\">int</span> <span class=\"keyword\">value</span>) : value_(<span class=\"keyword\">value</span>) &#123;&#125;    </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Fun1</span>(<span class=\"params\"></span>)</span>;    </span><br><span class=\"line\"><span class=\"keyword\">private</span>:    </span><br><span class=\"line\">  <span class=\"keyword\">int</span> value_;    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"18-ninja\"><a class=\"markdownIt-Anchor\" href=\"#18-ninja\"></a> 1.8 ninja</h5>\n<p>gyp是google为chromium项目开发的管理工具，功能类似于cmake。gyp只能产生编译脚本，真正的编译工作还有靠其他工具，例如: ninja。</p>\n<h6 id=\"181-安装gyp和ninja\"><a class=\"markdownIt-Anchor\" href=\"#181-安装gyp和ninja\"></a> 1.8.1 安装gyp和ninja</h6>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install gyp</span><br><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install ninja-build</span><br></pre></td></tr></table></figure>\n<h6 id=\"182-一个简单的例子\"><a class=\"markdownIt-Anchor\" href=\"#182-一个简单的例子\"></a> 1.8.2 一个简单的例子</h6>\n<ol>\n<li>\n<p>首先准备一个源文件，我写了template_sample.cpp,代码如下：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;  </span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">add</span><span class=\"params\">(T a, T b)</span></span>&#123; <span class=\"keyword\">return</span> a+b; &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt; add&lt;<span class=\"keyword\">int</span>&gt;(<span class=\"number\">5</span>,<span class=\"number\">6</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"built_in\">cout</span>&lt;&lt; add&lt;<span class=\"keyword\">double</span>&gt;(<span class=\"number\">3.4</span>,<span class=\"number\">4.0</span>)&lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编写gyp使用的文件，build.gyp（后缀是.gyp即可，名字随意）</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>生成ninja脚本，命令如下：</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"attribute\">-depth</span>=. <span class=\"attribute\">-format</span>=ninja ./build.gyp</span><br></pre></td></tr></table></figure>\n<p>其中<code>-depth=.</code> 表示在当前文件夹下寻找开始的gyp脚本，必须显示的指出gyp没有默认设置。 <code>-format=ninja</code> 表示要生成ninja的脚本，默认生成的是Makefile<br>\n执行后，会在当前目录下生成一个out目录。其结构如下：</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">out</span></span><br><span class=\"line\">|<span class=\"comment\">-- Default</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- an</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- build.ninja</span></span><br><span class=\"line\">\t\t|<span class=\"comment\">-- obj</span></span><br><span class=\"line\">\t\t\t  |<span class=\"comment\">-- an.ninja</span></span><br><span class=\"line\">\t\t\t  |<span class=\"comment\">-- an.template_sample.o</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编译，执行如下命令：</p>\n <figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ninja -C <span class=\"keyword\">out</span>/<span class=\"keyword\">Default</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>: -C是大写，执行成功后会在out/Default目录下生成一个叫做an的可执行文件，这个an就是在target_name字段指定的名字。</p>\n</li>\n<li>\n<p>clean整个工程重新编译</p>\n<p>目前，gyp没有提供clean的方案，所以只能手动删除out目录。</p>\n</li>\n</ol>\n<h6 id=\"183-gyp脚本的编写\"><a class=\"markdownIt-Anchor\" href=\"#183-gyp脚本的编写\"></a> 1.8.3 gyp脚本的编写</h6>\n<ol>\n<li>\n<p>如何增加编译、链接参数<br>\n编译参数一般增加在conditions字段，根据系统的不同增加cflags和ldflags,如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[  </span><br><span class=\"line\">              [<span class=\"string\">'OS==\"win\"'</span>,&#123;  </span><br><span class=\"line\">                             <span class=\"string\">'cflags'</span>:[],  </span><br><span class=\"line\">                             <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;,&#123;  </span><br><span class=\"line\">                              <span class=\"string\">'cflags'</span>:[  </span><br><span class=\"line\">                                   <span class=\"string\">'--std=c++11'</span>,  </span><br><span class=\"line\">                               ],  </span><br><span class=\"line\">                              <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;  </span><br><span class=\"line\">              ],  </span><br><span class=\"line\">            ]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意conditions字段的变化：<code>'OS=&quot;win&quot;'</code>是条件语句的后要有<code>,</code>号，第一个括号内表示条件为真时的参数，第二个括号表示条件为假时的参数。上面的例子中，我在不是win的系统上增加了<code>--std=c++11</code>这个参数。<br>\n另外，这里有必要提一下链接顺序问题。在链接的时候，链接器对符号表的寻找是按照你输入的命令的顺序进行的，比如a.o需要libm.so的函数，那么libm.so在链接命令里就必须写在a.o的后面，因为链接器发现a.o有函数没有找到，就只会去他后面的库里找，如果你把libm.so写在前面，自然就找不到。所以在增加链接库的时候，不要在ldflags里增加-l类的参数，这类参数要加到libraries字段里 如：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'template_sample.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[  </span><br><span class=\"line\">              [<span class=\"string\">'OS==\"win\"'</span>,&#123;  </span><br><span class=\"line\">                             <span class=\"string\">'cflags'</span>:[],  </span><br><span class=\"line\">                             <span class=\"string\">'ldflags'</span>:[]  </span><br><span class=\"line\">                         &#125;,&#123;  </span><br><span class=\"line\">                              <span class=\"string\">'cflags'</span>:[  </span><br><span class=\"line\">                                   <span class=\"string\">'--std=c++11'</span>,  </span><br><span class=\"line\">                               ],  </span><br><span class=\"line\">                              <span class=\"string\">'ldflags'</span>:[]，  </span><br><span class=\"line\">                              <span class=\"string\">'libraries'</span>:[  </span><br><span class=\"line\">                                  <span class=\"string\">'-lm'</span>  </span><br><span class=\"line\">                              ]  </span><br><span class=\"line\">                         &#125;  </span><br><span class=\"line\">              ],  </span><br><span class=\"line\">            ]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>头文件路径设定 --include_dirs字段的使用<br>\n有如下工程目录结构</p>\n <figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"string\">-- build.gyp</span></span><br><span class=\"line\">|<span class=\"string\">-- include</span></span><br><span class=\"line\">|<span class=\"string\">\t\t</span>|<span class=\"string\">-- define.h</span></span><br><span class=\"line\">|<span class=\"string\">-- main.cpp</span></span><br></pre></td></tr></table></figure>\n<p>main.cpp的代码如下</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"defines.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt; MY_NUMBER &lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见main.cpp文件引用了defines.h这个头文件，所以在编译的时候需要告诉编译系统到哪里去寻找这个defines.h文件。为此buid.gyp如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'include'</span>  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出头文件的位置include在include_dirs字段中被指出。这里需要注意，两个单引号之间一定是文件的路径，不要包含不必要的空格等其他字符。</p>\n</li>\n<li>\n<p>编译参数增加宏定义 --defines字段使用<br>\n测试程序的源码如下：</p>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> BIG_NUMBER  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> out_number = <span class=\"number\">10</span>;   </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span>  </span></span><br><span class=\"line\"><span class=\"keyword\">int</span> out_number = <span class=\"number\">1</span>;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt; out_number &lt;&lt;<span class=\"built_in\">endl</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，如果BIG_NUMBER宏被定义，则输出为10 ，否则为1。在使用Makefile的时候，我们可以通过为gcc增加-DBIG_NUBMER参数的方式来定义这个宏。那在gyp管理的时候，我们就要使用defines字段，代码如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'executable'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[  </span><br><span class=\"line\">                 <span class=\"string\">'BIG_NUMBER'</span>  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>编译静态库(动态库)</p>\n<p>有时我们不是要输出一个可执行文件，而是要编译一个静态库或动态库。这就要修改type字段，上文中type字段使用了executable，实际还可以设置为<code>static_library</code>,修改后的gyp脚本如下：</p>\n <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'static_library'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样在out/Default/obj的目录下就会生成一个liban.a的静态库。</p>\n<pre><code>动态库的方式类似，只需把type字段设置为shared_library即可。\n另外还有一种使用变量的方法，在这里提前介绍一下。就是将type字段设置为`&lt;(library)`,完整的代码如下：\n\n<figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;  </span><br><span class=\"line\">   <span class=\"string\">'targets'</span>:[  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"string\">'target_name'</span>:<span class=\"string\">'an'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'type'</span>:<span class=\"string\">'&lt;(library)'</span>,  </span><br><span class=\"line\">            <span class=\"string\">'dependencies'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'defines'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'include_dirs'</span>:[],  </span><br><span class=\"line\">            <span class=\"string\">'sources'</span>:[  </span><br><span class=\"line\">                <span class=\"string\">'main.cpp'</span>,  </span><br><span class=\"line\">            ],  </span><br><span class=\"line\">            <span class=\"string\">'conditions'</span>:[]  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    ],    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n然后在使用gyp工具的时候指定这个library的值，如：\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gyp <span class=\"attribute\">-depth</span>=. <span class=\"attribute\">-format</span>=ninja <span class=\"attribute\">-Dlibrary</span>=static_library ./build.gyp</span><br></pre></td></tr></table></figure>\n\n\n这样生成ninja脚本后，也可以生成静态库，这样做的好处是你可以在真正输出时再决定输出静态库还是动态库。尤其对于要一次生成多个库的情况下，这种方法尤其好用。\n</code></pre>\n<h5 id=\"19-更多功能介绍\"><a class=\"markdownIt-Anchor\" href=\"#19-更多功能介绍\"></a> 1.9 更多功能介绍</h5>\n<h6 id=\"设计准则\"><a class=\"markdownIt-Anchor\" href=\"#设计准则\"></a> 设计准则：</h6>\n<ul>\n<li>关键字一致性：所有的关键字都和平台项目的配置字段相同</li>\n<li>通过前缀表明配置属于的特定平台。比如：<code>msvs_disabled_warnings</code>,<code>xcode_framework_dirs</code></li>\n</ul>\n<p><strong>样例：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"target_defaults\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"defines\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"U_STATIC_IMPLEMENTATION\"</span>,</span><br><span class=\"line\">            [</span><br><span class=\"line\">                <span class=\"string\">\"LOGFILE\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo.log\"</span></span><br><span class=\"line\">            ]</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"..\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"static_library\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\"foo/src/foo.cc\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo/src/foo_main.cc\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">                <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"foo/include\"</span></span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"conditions\"</span>: [</span><br><span class=\"line\">                [</span><br><span class=\"line\">                    <span class=\"string\">\"OS==mac\"</span>,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">                            <span class=\"string\">\"platform_test_mac.mm\"</span></span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"attr\">\"direct_dependent_settings\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"defines\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"UNIT_TEST\"</span></span><br><span class=\"line\">                ],</span><br><span class=\"line\">                <span class=\"attr\">\"include_dirs\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"foo\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"foo/include\"</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>结构元素</strong></p>\n<p>.gyp文件中定义了一些targets和构建规则。</p>\n<p>下面的关键字可以定义在最顶层：</p>\n<ul>\n<li>\n<p>conditions:条件定义。</p>\n</li>\n<li>\n<p>includes:包含.gypi文件的列表</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"Thread\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"includes\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"../common.gypi\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"./thread.gypi\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>target_defaults:默认的项目配置，每个项目(targets)的配置都需要从这个配置继承</p>\n</li>\n<li>\n<p>targets:项目列表</p>\n  <figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"targets\"</span>: [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"hello1\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"product_extension\"</span>: <span class=\"string\">\"stuff\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello.c\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_name\"</span>: <span class=\"string\">\"hello2\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"target_extension\"</span>: <span class=\"string\">\"stuff\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"type\"</span>: <span class=\"string\">\"executable\"</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">\"sources\"</span>: [</span><br><span class=\"line\">\t\t<span class=\"string\">\"hello.c\"</span></span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>variable: 定义了键值对，可以被其他地方以<code>&lt;(varname)</code>的方式引用</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'variables'</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">'pi'</span>: <span class=\"string\">'import math; print math.pi'</span>,</span><br><span class=\"line\">    <span class=\"string\">'third_letters'</span>: <span class=\"string\">\"&lt;(other_letters)HIJK\"</span>,</span><br><span class=\"line\">    <span class=\"string\">'letters_list'</span>: <span class=\"string\">'ABCD'</span>,</span><br><span class=\"line\">    <span class=\"string\">'other_letters'</span>: <span class=\"string\">'&lt;(letters_list)EFG'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_included'</span>: <span class=\"string\">'&lt;(included_variable)'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_lists'</span>: [</span><br><span class=\"line\">      <span class=\"string\">'&lt;(included_variable)'</span>,</span><br><span class=\"line\">      <span class=\"string\">'&lt;(third_letters)'</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'check_int'</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_str_int'</span>: <span class=\"string\">'6'</span>,</span><br><span class=\"line\">    <span class=\"string\">'check_list_int'</span>: [</span><br><span class=\"line\">      <span class=\"number\">7</span>,</span><br><span class=\"line\">      <span class=\"string\">'8'</span>,</span><br><span class=\"line\">      <span class=\"number\">9</span>,</span><br><span class=\"line\">      </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'not_int_1'</span>: <span class=\"string\">' 10'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_2'</span>: <span class=\"string\">'11 '</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_3'</span>: <span class=\"string\">'012'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_4'</span>: <span class=\"string\">'13.0'</span>,</span><br><span class=\"line\">    <span class=\"string\">'not_int_5'</span>: <span class=\"string\">'+14'</span>,</span><br><span class=\"line\">    <span class=\"string\">'negative_int'</span>: <span class=\"string\">'-15'</span>,</span><br><span class=\"line\">    <span class=\"string\">'zero_int'</span>: <span class=\"string\">'0'</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>项目(targets)</strong></p>\n<p>.gyp文件定义的一套构建项目的规则。targets中也可以包含<code>includes</code>,<code>conditions</code>和<code>variables</code>。下面的是一些targets中的专有字段：</p>\n<ul>\n<li>\n<p>target_name: 指定定义的target的名称</p>\n</li>\n<li>\n<p>type: target的类型。支持<code>executable</code>、<code>static_library</code>、<code>shared_library</code>和<code>none</code>.其中<code>none</code>类型也很有用，可以作为处理资源、文档等特别项目的类型。例如，在Windows中,<code>none</code>将作为工具集类型的项目存在</p>\n</li>\n<li>\n<p>product_extension:指定target生成目标的扩展名，不包含’.’</p>\n</li>\n<li>\n<p>product_name: 指定tareget生成目标的文件名，与 <code>product_extension</code> 组成一个文件全名</p>\n</li>\n<li>\n<p>dependencies:指定target依赖的其他target</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'static_library'</span>,</span><br><span class=\"line\">      <span class=\"string\">'dependencies'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'b/b.gyp:b'</span>,</span><br><span class=\"line\">        <span class=\"string\">'c/c.gyp:*'</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'a.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>defines: 定义了预处理宏。类似于C/C++命令行编译中的-D或者/D选项</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'defines'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,</span><br><span class=\"line\">      <span class=\"string\">'defines'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'FOO'</span>,</span><br><span class=\"line\">        <span class=\"string\">'VALUE=1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'PAREN_VALUE=(1+2+3)'</span>,</span><br><span class=\"line\">        <span class=\"string\">'HASH_VALUE=\"a#1\"'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'defines.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>include_dirs: 指定了包含文件的查找目录。类似于C/C++命令行编译中的-I或/I选项</p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">'targets'</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'target_name'</span>: <span class=\"string\">'includes'</span>,</span><br><span class=\"line\">      <span class=\"string\">'type'</span>: <span class=\"string\">'executable'</span>,</span><br><span class=\"line\">      <span class=\"string\">'dependencies'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'subdir/subdir_includes.gyp:subdir_includes'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'cflags'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'-Ishadow1'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'include_dirs'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'.'</span>,</span><br><span class=\"line\">        <span class=\"string\">'inc1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'shadow2'</span>,</span><br><span class=\"line\">        <span class=\"string\">'subdir/inc2'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"string\">'sources'</span>: [</span><br><span class=\"line\">        <span class=\"string\">'includes.c'</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">      ],</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>sources:列出了项目中的代码文件和一些项目相关的文件.<code>sources!</code>段中可以指定被排除的文件</p>\n</li>\n<li>\n<p>configurations:为targets定义的一套构建配置。</p>\n</li>\n<li>\n<p>link_settings:指定target需要链接的库。<code>executable</code>和<code>shared_library</code> 类型的target需要指定链接库。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有配置。可以与<code>all_dependent_settings</code>、<code>direct_dependent_setting</code>做对比</p>\n</li>\n<li>\n<p>direct_dependent_settings:指定依赖本target的target设置。这个段内可以指定target中可包含的除了<code>configurations</code>、<code>target_name</code>和<code>type</code>的所有属性。可以与<code>all_dependent_settings</code>、<code>link_settings</code>做对比</p>\n</li>\n<li>\n<p>all_dependent_settings:</p>\n</li>\n<li>\n<p>libraries:指定target依赖的库，见<code>link_settings&gt;libraries</code></p>\n  <figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'link_settings'</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libraries'</span>: [</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libiconv.dylib'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'&lt;(ZLIB_DIR)contrib/minizip/libminizip.a'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'libcurl.dylib'</span>,],</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>actions:针对输入的文件，定义了一组自定义的构建动作。</p>\n</li>\n<li>\n<p>copies:定义了一套拷贝动作。</p>\n</li>\n<li>\n<p>rules:</p>\n</li>\n<li>\n<p>target_conditions:类似于conditions,但是起左右的时间比conditions晚</p>\n</li>\n<li>\n<p>msvs_precompiled_header:指定预编译头文件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_precompiled_source:指定预编译源文件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_prebuild:生成之前事件。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_postbuild:生成之后事件。只能用于Visual Studio</p>\n  <figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'msvs_postbuild'</span>:<span class=\"string\">r'copy \"$&#123;OutDir&#125;$&#123;TargetName&#125;\" \"C:\\$&#123;TargetName&#125;\"'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>msvs_props:指定target的属性页文件(.vsprops)。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_cygwin_shell:指定action运行在cygwin下。只能用于Visual Studio</p>\n</li>\n<li>\n<p>msvs_cygwin_dirs:指定cygwin的目录。只能用于Visual Studio</p>\n</li>\n<li>\n<p>xcode_config_file:在xcode中，指定target的配置文件(.xcconfig)。只能用于xcode</p>\n</li>\n<li>\n<p>xcode_framework_dirs:在xcode中，指定框架的目录。只能用于xcode</p>\n</li>\n</ul>"},{"title":"音视频相关-基础概念","date":"2019-04-22T02:32:39.000Z","_content":"\n### 第一部分：基础概念\n\n##### 媒体\n媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。 \n多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象 \n\n##### 多媒体技术\n多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。 \n\n<!-- more -->\n\n##### 流媒体\n流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。 \n\n##### 多媒体文件\n多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；\n\n##### 媒体编码\n媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。 转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式 \n\n##### 视频\n视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频 \n\n##### 音频\n音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音\n\n### 第二部分：视频文件格式\n\n#### 基本视频概念讲解\n\n##### 码率\n码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质 \n\n\n##### 帧\n帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。 一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。\n\n##### 帧率\n帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过更新率的帧率就浪费掉了。\n\n##### 关键帧\n关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键帧。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到\n2秒增加一个关键帧。\n\n#### 目前我们经常见的视频格式无非就是两大类： \n1、影像格式（Video） \n2、流媒体格式（Stream Video） \n\n#### 在影像格式中还可以根据出处划分为三大种：\n1. AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式 \n2. MOV格式：这是由苹果（Apple）公司提出的一种视频格式 \n3. MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。 \n\n#### 在流媒体格式中同样还可以划分为三种： \n1. RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。 \n2. MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。 \n3. ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。 \n4. FLV\n\n#### 具体视频文件格式详解： \n\n##### *. MPEG/.MPG/.DAT \nMPEG也是Motion Picture Experts Group 的缩写。这类格式包括了 MPEG-1, MPEG-2 和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在 VCD 的制作和一些视频片段下载的网络应用上面，大部分的 VCD 都是用 MPEG1 格式压缩的 ( 刻录软件自动将MPEG1转为 .DAT格式 ) ，使用 MPEG-1 的压缩算法，可以把一部 120 分钟长的电影压缩到 1.2 GB 左右大小。MPEG-2 则是应用在 DVD 的制作，同时在一些 HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用 MPEG-2 的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB 的大小（MPEG2的图像质量MPEG-1 与其无法比拟的）。 \n\n##### *.AVI\n它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的×××来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有 Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。\n\n##### *.RA/RM/RAM\n\n*.RM， Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash （Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO （RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用 56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。 \n \n##### *.MOV \n\nMOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列, 在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有 4 个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。\n\n##### *.ASF\n\nASF (Advanced Streaming format高级流格式)。ASF 是 MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了 MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为 ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比 VCD 差一点点并不出奇，但比同是视频“流”格式的 RAM 格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。\n\n##### *.WMV\n\nWMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。\n\n##### *. NAVI\n如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是 New AVI 的缩写，是一个名为 Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的 AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的 ASF 格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型 ASF 格式。 \n\n##### *.FLV \nFLV 是 FLASH VIDEO 的简称，是由Macromedia 公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson 公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash 中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。\n\n#### 视频文件转换： \n比较常见的视频格式转化有： \n\n```\n\nRM→ASF \nAVI→RMVB \ndat-->divx \nmpg-->divx \nvcd-->rm \ndat-->rm \nmpg,dat、avi、mov-->rm \n*-->FLV \n最近视频博客的兴起，导致了flv的快速发展\n\nAVI→MPEG(MPEG－1) \n例如有纪念性的家庭录影带，可以事先转换成AVI格式，再用软件将它转换成MPEG－1格式，然后用刻录器将MPEG－1格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 \nMPEG(MPEG－1)→AVI \n从MPEG到AVI文件之间的转换，为磁盘节省空间。\nMPEG(MPEG－1)→ASF \n将vcd文件转码后实现VOD点播和直播。\n\nASF→MPEG(MPEG－1) \n由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上MPEG－1，所以转换之前，请三思而后行。 \n\nDVD(MPEG－2)→VCD (MPEG－1) \n由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成MPEG－1格式的视频文件，留在硬盘上观看或是刻成VCD光盘。 \ndat/mpg->mp3 \nCD-->wav,mp3,wma \nrm-->mp3 \nmp3-->wma\n```\n\n以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。 \n\n比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需 要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则： \n\n1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD->RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。 \n\n2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。 \n\n#### 音视频压缩编码标准：\n\n多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有： \n\n1. MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC； \n音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的 \n2. H.26X系列：包括H261、H262、H263、H263+、H263++、H264 \n3. 微软windows media系列： 视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10 ；音频编码有Windows Media audeo v1/v2/7/8/9 \n4. Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10 ；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等 \n5. QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264 ；音频编码有QDesign Music 2、Apple MPEG-4 AAC \n6. 其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式 \n各视频编码的应用场合简要：[http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx](http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx)这里讲的挺详细的 \n\n---\n1. Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1； \n2. 在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。 \n3. MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。 \n4. MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右 \n5. Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准） \n6. H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。 \n7. H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是\"ITU-T建议H.262\"和\"ISO/IEC 13818-2\"。这两个标准在所有的文字叙述上都是相同的。 \n8. H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的 \n9. H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。 \n10. H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。 \n11. H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。 \n12. Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。 \n13. Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。 \n14. Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少 \n15. Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。 \n16. RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。 \n17. RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。 \n18. RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。 \n19. RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。 \n20. Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。 \n21. Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。 \n22. Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。 \n23. Ogg 是 Xiph.org 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。 \n24. On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。 \n25. Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。 \n26. M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。 \n\n#### 各音频编码的应用场合简要： \n1. MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps \n2. MPEG Audio Layer 2典型数据压缩率是1：4---1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码 \n3. MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10---1：12，即每个立体声信号为128到112 kbps \n4. MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio 不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。 \n5. MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布 \n6. 杜比数字AC-3技术也就是5.1声道技术 \n7. Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。 \n8. Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化 \n9. Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。 \n10. RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。 \n11. RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。 \n12. RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。 \n13. RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。 \n14. QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。 \n15. Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。 \n\n#### 四种主流的视频压缩编码标准：\n\n##### 1、Windows Media Video 9 \n　　\n　　相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　 \n官方网站：http://www.microsoft.com \n\n##### 2、Real Video 9 \n\n玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。 \n官方网址：http://www.realnetworks.com \n\n##### 3、DivX \n　　历史介绍： \nISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。 \n1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。 \nDivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。 \n看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。 \n接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码--XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。 \nDivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。 \n官方网站：http://www.divx.com \n\n##### 4、Koepi's XviD Codec \n\n相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。 \n官方网站：http://roeder.goe.net/~koepi \n\n#### 视频压缩基本概念：\n\n##### 一、有损和无损压缩：\n在视频压缩中有损（Lossy ）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。 \n\n##### 二、帧内和帧间压缩：\n帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。\n采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。 \n\n##### 三、对称和不对称编码：\n对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。\n\n### 第三部分：音频文件格式 \n\n一些音视频的参数含义: \n\n**声道**：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍： \n\n**1.单声道**：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。 \n\n**2.立体声**：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。 \n\n**3.准立体声**：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。 \n\n**4.四声道环绕**：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。\n\n**5. 5.1声道** 5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。 \n\n\n##### 一.WMA\n　　WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。 \n优点 \nWMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。 \n缺点 \n在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。\n##### 二.VQF\n　　VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。 \n但是VQF不支持\"流\"，这可能也是为什么现在它完全被WMA压下去的一个主要原因.\n\n##### 三.MP3\nMP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用 MPEG Audio Layer 3 的技术，将音乐以1:10 甚至 1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　 \nMP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步; 其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE 和 DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS, 在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.\n\n##### 四.MP3PRO\n　　MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication 频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO. \n\n##### 五.OGG\n　　OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因 \n在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　 \nOgg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。\n　　OGG Vorbis这种编码也远比90年×××发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。\n　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。\n##### 六. MPC\n　　MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。 \nMPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了 \n较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了. 但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.\n##### 七.ATRAC\n　　ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。 \nATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。 \nATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。 \n.\n##### 八. APE　\n　　 APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey''s Audio这个软件进行“瘦身”压缩为 APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过 Monkey''s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”， Monkey''s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的 APE音频文件是可以直接被播放的。 Monkey''s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。 \n和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了 Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.\n##### 九. WAV\n　　WAV是录音时用的标准的windows文件格式，文件的扩展名为“ .wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。 \nWAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。 \n　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟 44khz 采样率的WAV文件就会占用10M硬盘空间！ \n它通常作为制作高质量音乐的中间体\n##### 十.RM\n　　Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。\nRM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。 \nRM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。","source":"_posts/音视频相关-基础概念.md","raw":"---\ntitle: 音视频相关-基础概念\ndate: 2019-04-22 10:32:39\ntags: [音视频]\ncategories: 音视频\n---\n\n### 第一部分：基础概念\n\n##### 媒体\n媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。 \n多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象 \n\n##### 多媒体技术\n多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。 \n\n<!-- more -->\n\n##### 流媒体\n流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。 \n\n##### 多媒体文件\n多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；\n\n##### 媒体编码\n媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。 转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式 \n\n##### 视频\n视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频 \n\n##### 音频\n音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音\n\n### 第二部分：视频文件格式\n\n#### 基本视频概念讲解\n\n##### 码率\n码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质 \n\n\n##### 帧\n帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。 一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。\n\n##### 帧率\n帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过更新率的帧率就浪费掉了。\n\n##### 关键帧\n关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键帧。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到\n2秒增加一个关键帧。\n\n#### 目前我们经常见的视频格式无非就是两大类： \n1、影像格式（Video） \n2、流媒体格式（Stream Video） \n\n#### 在影像格式中还可以根据出处划分为三大种：\n1. AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式 \n2. MOV格式：这是由苹果（Apple）公司提出的一种视频格式 \n3. MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。 \n\n#### 在流媒体格式中同样还可以划分为三种： \n1. RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。 \n2. MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。 \n3. ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。 \n4. FLV\n\n#### 具体视频文件格式详解： \n\n##### *. MPEG/.MPG/.DAT \nMPEG也是Motion Picture Experts Group 的缩写。这类格式包括了 MPEG-1, MPEG-2 和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在 VCD 的制作和一些视频片段下载的网络应用上面，大部分的 VCD 都是用 MPEG1 格式压缩的 ( 刻录软件自动将MPEG1转为 .DAT格式 ) ，使用 MPEG-1 的压缩算法，可以把一部 120 分钟长的电影压缩到 1.2 GB 左右大小。MPEG-2 则是应用在 DVD 的制作，同时在一些 HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用 MPEG-2 的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB 的大小（MPEG2的图像质量MPEG-1 与其无法比拟的）。 \n\n##### *.AVI\n它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的×××来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有 Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。\n\n##### *.RA/RM/RAM\n\n*.RM， Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash （Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO （RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用 56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。 \n \n##### *.MOV \n\nMOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列, 在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有 4 个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。\n\n##### *.ASF\n\nASF (Advanced Streaming format高级流格式)。ASF 是 MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了 MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为 ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比 VCD 差一点点并不出奇，但比同是视频“流”格式的 RAM 格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。\n\n##### *.WMV\n\nWMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。\n\n##### *. NAVI\n如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是 New AVI 的缩写，是一个名为 Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的 AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的 ASF 格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型 ASF 格式。 \n\n##### *.FLV \nFLV 是 FLASH VIDEO 的简称，是由Macromedia 公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson 公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash 中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。\n\n#### 视频文件转换： \n比较常见的视频格式转化有： \n\n```\n\nRM→ASF \nAVI→RMVB \ndat-->divx \nmpg-->divx \nvcd-->rm \ndat-->rm \nmpg,dat、avi、mov-->rm \n*-->FLV \n最近视频博客的兴起，导致了flv的快速发展\n\nAVI→MPEG(MPEG－1) \n例如有纪念性的家庭录影带，可以事先转换成AVI格式，再用软件将它转换成MPEG－1格式，然后用刻录器将MPEG－1格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 \nMPEG(MPEG－1)→AVI \n从MPEG到AVI文件之间的转换，为磁盘节省空间。\nMPEG(MPEG－1)→ASF \n将vcd文件转码后实现VOD点播和直播。\n\nASF→MPEG(MPEG－1) \n由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上MPEG－1，所以转换之前，请三思而后行。 \n\nDVD(MPEG－2)→VCD (MPEG－1) \n由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成MPEG－1格式的视频文件，留在硬盘上观看或是刻成VCD光盘。 \ndat/mpg->mp3 \nCD-->wav,mp3,wma \nrm-->mp3 \nmp3-->wma\n```\n\n以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。 \n\n比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需 要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则： \n\n1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD->RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。 \n\n2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。 \n\n#### 音视频压缩编码标准：\n\n多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有： \n\n1. MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC； \n音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的 \n2. H.26X系列：包括H261、H262、H263、H263+、H263++、H264 \n3. 微软windows media系列： 视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10 ；音频编码有Windows Media audeo v1/v2/7/8/9 \n4. Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10 ；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等 \n5. QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264 ；音频编码有QDesign Music 2、Apple MPEG-4 AAC \n6. 其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式 \n各视频编码的应用场合简要：[http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx](http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx)这里讲的挺详细的 \n\n---\n1. Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1； \n2. 在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。 \n3. MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。 \n4. MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右 \n5. Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准） \n6. H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。 \n7. H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是\"ITU-T建议H.262\"和\"ISO/IEC 13818-2\"。这两个标准在所有的文字叙述上都是相同的。 \n8. H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的 \n9. H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。 \n10. H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。 \n11. H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。 \n12. Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。 \n13. Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。 \n14. Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少 \n15. Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。 \n16. RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。 \n17. RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。 \n18. RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。 \n19. RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。 \n20. Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。 \n21. Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。 \n22. Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。 \n23. Ogg 是 Xiph.org 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。 \n24. On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。 \n25. Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。 \n26. M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。 \n\n#### 各音频编码的应用场合简要： \n1. MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps \n2. MPEG Audio Layer 2典型数据压缩率是1：4---1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码 \n3. MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10---1：12，即每个立体声信号为128到112 kbps \n4. MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio 不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。 \n5. MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布 \n6. 杜比数字AC-3技术也就是5.1声道技术 \n7. Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。 \n8. Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化 \n9. Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。 \n10. RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。 \n11. RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。 \n12. RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。 \n13. RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。 \n14. QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。 \n15. Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。 \n\n#### 四种主流的视频压缩编码标准：\n\n##### 1、Windows Media Video 9 \n　　\n　　相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　 \n官方网站：http://www.microsoft.com \n\n##### 2、Real Video 9 \n\n玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。 \n官方网址：http://www.realnetworks.com \n\n##### 3、DivX \n　　历史介绍： \nISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。 \n1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。 \nDivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。 \n看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。 \n接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码--XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。 \nDivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。 \n官方网站：http://www.divx.com \n\n##### 4、Koepi's XviD Codec \n\n相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。 \n官方网站：http://roeder.goe.net/~koepi \n\n#### 视频压缩基本概念：\n\n##### 一、有损和无损压缩：\n在视频压缩中有损（Lossy ）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。 \n\n##### 二、帧内和帧间压缩：\n帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。\n采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。 \n\n##### 三、对称和不对称编码：\n对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。\n\n### 第三部分：音频文件格式 \n\n一些音视频的参数含义: \n\n**声道**：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍： \n\n**1.单声道**：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。 \n\n**2.立体声**：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。 \n\n**3.准立体声**：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。 \n\n**4.四声道环绕**：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。\n\n**5. 5.1声道** 5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。 \n\n\n##### 一.WMA\n　　WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。 \n优点 \nWMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。 \n缺点 \n在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。\n##### 二.VQF\n　　VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。 \n但是VQF不支持\"流\"，这可能也是为什么现在它完全被WMA压下去的一个主要原因.\n\n##### 三.MP3\nMP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用 MPEG Audio Layer 3 的技术，将音乐以1:10 甚至 1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　 \nMP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步; 其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE 和 DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS, 在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.\n\n##### 四.MP3PRO\n　　MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication 频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO. \n\n##### 五.OGG\n　　OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因 \n在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　 \nOgg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。\n　　OGG Vorbis这种编码也远比90年×××发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。\n　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。\n##### 六. MPC\n　　MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。 \nMPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了 \n较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了. 但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.\n##### 七.ATRAC\n　　ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。 \nATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。 \nATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。 \n.\n##### 八. APE　\n　　 APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey''s Audio这个软件进行“瘦身”压缩为 APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过 Monkey''s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”， Monkey''s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的 APE音频文件是可以直接被播放的。 Monkey''s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。 \n和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了 Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.\n##### 九. WAV\n　　WAV是录音时用的标准的windows文件格式，文件的扩展名为“ .wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。 \nWAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。 \n　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟 44khz 采样率的WAV文件就会占用10M硬盘空间！ \n它通常作为制作高质量音乐的中间体\n##### 十.RM\n　　Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。\nRM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。 \nRM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。","slug":"音视频相关-基础概念","published":1,"updated":"2020-07-20T11:41:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknpirxjo00dmsify19a7z2fz","content":"<h3 id=\"第一部分基础概念\"><a class=\"markdownIt-Anchor\" href=\"#第一部分基础概念\"></a> 第一部分：基础概念</h3>\n<h5 id=\"媒体\"><a class=\"markdownIt-Anchor\" href=\"#媒体\"></a> 媒体</h5>\n<p>媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。<br>\n多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象</p>\n<h5 id=\"多媒体技术\"><a class=\"markdownIt-Anchor\" href=\"#多媒体技术\"></a> 多媒体技术</h5>\n<p>多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。</p>\n<a id=\"more\"></a>\n<h5 id=\"流媒体\"><a class=\"markdownIt-Anchor\" href=\"#流媒体\"></a> 流媒体</h5>\n<p>流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。</p>\n<h5 id=\"多媒体文件\"><a class=\"markdownIt-Anchor\" href=\"#多媒体文件\"></a> 多媒体文件</h5>\n<p>多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；</p>\n<h5 id=\"媒体编码\"><a class=\"markdownIt-Anchor\" href=\"#媒体编码\"></a> 媒体编码</h5>\n<p>媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。 转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式</p>\n<h5 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\"></a> 视频</h5>\n<p>视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频</p>\n<h5 id=\"音频\"><a class=\"markdownIt-Anchor\" href=\"#音频\"></a> 音频</h5>\n<p>音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音</p>\n<h3 id=\"第二部分视频文件格式\"><a class=\"markdownIt-Anchor\" href=\"#第二部分视频文件格式\"></a> 第二部分：视频文件格式</h3>\n<h4 id=\"基本视频概念讲解\"><a class=\"markdownIt-Anchor\" href=\"#基本视频概念讲解\"></a> 基本视频概念讲解</h4>\n<h5 id=\"码率\"><a class=\"markdownIt-Anchor\" href=\"#码率\"></a> 码率</h5>\n<p>码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质</p>\n<h5 id=\"帧\"><a class=\"markdownIt-Anchor\" href=\"#帧\"></a> 帧</h5>\n<p>帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。 一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。</p>\n<h5 id=\"帧率\"><a class=\"markdownIt-Anchor\" href=\"#帧率\"></a> 帧率</h5>\n<p>帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过更新率的帧率就浪费掉了。</p>\n<h5 id=\"关键帧\"><a class=\"markdownIt-Anchor\" href=\"#关键帧\"></a> 关键帧</h5>\n<p>关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键帧。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到<br>\n2秒增加一个关键帧。</p>\n<h4 id=\"目前我们经常见的视频格式无非就是两大类\"><a class=\"markdownIt-Anchor\" href=\"#目前我们经常见的视频格式无非就是两大类\"></a> 目前我们经常见的视频格式无非就是两大类：</h4>\n<p>1、影像格式（Video）<br>\n2、流媒体格式（Stream Video）</p>\n<h4 id=\"在影像格式中还可以根据出处划分为三大种\"><a class=\"markdownIt-Anchor\" href=\"#在影像格式中还可以根据出处划分为三大种\"></a> 在影像格式中还可以根据出处划分为三大种：</h4>\n<ol>\n<li>AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式</li>\n<li>MOV格式：这是由苹果（Apple）公司提出的一种视频格式</li>\n<li>MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。</li>\n</ol>\n<h4 id=\"在流媒体格式中同样还可以划分为三种\"><a class=\"markdownIt-Anchor\" href=\"#在流媒体格式中同样还可以划分为三种\"></a> 在流媒体格式中同样还可以划分为三种：</h4>\n<ol>\n<li>RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。</li>\n<li>MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。</li>\n<li>ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。</li>\n<li>FLV</li>\n</ol>\n<h4 id=\"具体视频文件格式详解\"><a class=\"markdownIt-Anchor\" href=\"#具体视频文件格式详解\"></a> 具体视频文件格式详解：</h4>\n<h5 id=\"mpegmpgdat\"><a class=\"markdownIt-Anchor\" href=\"#mpegmpgdat\"></a> *. MPEG/.MPG/.DAT</h5>\n<p>MPEG也是Motion Picture Experts Group 的缩写。这类格式包括了 MPEG-1, MPEG-2 和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在 VCD 的制作和一些视频片段下载的网络应用上面，大部分的 VCD 都是用 MPEG1 格式压缩的 ( 刻录软件自动将MPEG1转为 .DAT格式 ) ，使用 MPEG-1 的压缩算法，可以把一部 120 分钟长的电影压缩到 1.2 GB 左右大小。MPEG-2 则是应用在 DVD 的制作，同时在一些 HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用 MPEG-2 的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB 的大小（MPEG2的图像质量MPEG-1 与其无法比拟的）。</p>\n<h5 id=\"avi\"><a class=\"markdownIt-Anchor\" href=\"#avi\"></a> *.AVI</h5>\n<p>它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的×××来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有 Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。</p>\n<h5 id=\"rarmram\"><a class=\"markdownIt-Anchor\" href=\"#rarmram\"></a> *.RA/RM/RAM</h5>\n<p>*.RM， Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash （Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO （RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用 56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。</p>\n<h5 id=\"mov\"><a class=\"markdownIt-Anchor\" href=\"#mov\"></a> *.MOV</h5>\n<p>MOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列, 在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有 4 个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。</p>\n<h5 id=\"asf\"><a class=\"markdownIt-Anchor\" href=\"#asf\"></a> *.ASF</h5>\n<p>ASF (Advanced Streaming format高级流格式)。ASF 是 MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了 MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为 ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比 VCD 差一点点并不出奇，但比同是视频“流”格式的 RAM 格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。</p>\n<h5 id=\"wmv\"><a class=\"markdownIt-Anchor\" href=\"#wmv\"></a> *.WMV</h5>\n<p>WMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。</p>\n<h5 id=\"navi\"><a class=\"markdownIt-Anchor\" href=\"#navi\"></a> *. NAVI</h5>\n<p>如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是 New AVI 的缩写，是一个名为 Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的 AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的 ASF 格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型 ASF 格式。</p>\n<h5 id=\"flv\"><a class=\"markdownIt-Anchor\" href=\"#flv\"></a> *.FLV</h5>\n<p>FLV 是 FLASH VIDEO 的简称，是由Macromedia 公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson 公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash 中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。</p>\n<h4 id=\"视频文件转换\"><a class=\"markdownIt-Anchor\" href=\"#视频文件转换\"></a> 视频文件转换：</h4>\n<p>比较常见的视频格式转化有：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">RM→ASF </span><br><span class=\"line\"><span class=\"built_in\">AVI</span>→RMVB </span><br><span class=\"line\">dat--&gt;divx </span><br><span class=\"line\">mpg--&gt;divx </span><br><span class=\"line\">vcd--&gt;rm </span><br><span class=\"line\">dat--&gt;rm </span><br><span class=\"line\">mpg,dat、avi、mov--&gt;rm </span><br><span class=\"line\">*--&gt;FLV </span><br><span class=\"line\">最近视频博客的兴起，导致了flv的快速发展</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">AVI</span>→<span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">例如有纪念性的家庭录影带，可以事先转换成<span class=\"built_in\">AVI</span>格式，再用软件将它转换成<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式，然后用刻录器将<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 </span><br><span class=\"line\"><span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>)→<span class=\"built_in\">AVI</span> </span><br><span class=\"line\">从<span class=\"built_in\">MPEG</span>到<span class=\"built_in\">AVI</span>文件之间的转换，为磁盘节省空间。</span><br><span class=\"line\"><span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>)→ASF </span><br><span class=\"line\">将vcd文件转码后实现VOD点播和直播。</span><br><span class=\"line\"></span><br><span class=\"line\">ASF→<span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>，所以转换之前，请三思而后行。 </span><br><span class=\"line\"></span><br><span class=\"line\">DVD(<span class=\"built_in\">MPEG</span>－<span class=\"number\">2</span>)→VCD (<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式的视频文件，留在硬盘上观看或是刻成VCD光盘。 </span><br><span class=\"line\">dat/mpg-&gt;mp3 </span><br><span class=\"line\">CD--&gt;wav,mp3,wma </span><br><span class=\"line\">rm--&gt;mp3 </span><br><span class=\"line\">mp3--&gt;wma</span><br></pre></td></tr></table></figure>\n<p>以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。</p>\n<p>比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需 要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则：</p>\n<p>1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD-&gt;RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。</p>\n<p>2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。</p>\n<h4 id=\"音视频压缩编码标准\"><a class=\"markdownIt-Anchor\" href=\"#音视频压缩编码标准\"></a> 音视频压缩编码标准：</h4>\n<p>多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有：</p>\n<ol>\n<li>MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC；<br>\n音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的</li>\n<li>H.26X系列：包括H261、H262、H263、H263+、H263++、H264</li>\n<li>微软windows media系列： 视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10 ；音频编码有Windows Media audeo v1/v2/7/8/9</li>\n<li>Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10 ；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等</li>\n<li>QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264 ；音频编码有QDesign Music 2、Apple MPEG-4 AAC</li>\n<li>其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式<br>\n各视频编码的应用场合简要：<a href=\"http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx</a>这里讲的挺详细的</li>\n</ol>\n<hr>\n<ol>\n<li>Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1；</li>\n<li>在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。</li>\n<li>MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。</li>\n<li>MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右</li>\n<li>Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准）</li>\n<li>H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。</li>\n<li>H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是&quot;ITU-T建议H.262&quot;和&quot;ISO/IEC 13818-2&quot;。这两个标准在所有的文字叙述上都是相同的。</li>\n<li>H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的</li>\n<li>H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。</li>\n<li>H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。</li>\n<li>H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。</li>\n<li>Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。</li>\n<li>Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。</li>\n<li>Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少</li>\n<li>Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。</li>\n<li>RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。</li>\n<li>RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。</li>\n<li>RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。</li>\n<li>RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。</li>\n<li>Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。</li>\n<li>Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。</li>\n<li>Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。</li>\n<li>Ogg 是 <a href=\"http://Xiph.org\" target=\"_blank\" rel=\"noopener\">Xiph.org</a> 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。</li>\n<li>On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。</li>\n<li>Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。</li>\n<li>M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。</li>\n</ol>\n<h4 id=\"各音频编码的应用场合简要\"><a class=\"markdownIt-Anchor\" href=\"#各音频编码的应用场合简要\"></a> 各音频编码的应用场合简要：</h4>\n<ol>\n<li>MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps</li>\n<li>MPEG Audio Layer 2典型数据压缩率是1：4—1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码</li>\n<li>MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10—1：12，即每个立体声信号为128到112 kbps</li>\n<li>MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio 不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。</li>\n<li>MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布</li>\n<li>杜比数字AC-3技术也就是5.1声道技术</li>\n<li>Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。</li>\n<li>Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化</li>\n<li>Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。</li>\n<li>RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。</li>\n<li>RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。</li>\n<li>RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。</li>\n<li>RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。</li>\n<li>QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。</li>\n<li>Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。</li>\n</ol>\n<h4 id=\"四种主流的视频压缩编码标准\"><a class=\"markdownIt-Anchor\" href=\"#四种主流的视频压缩编码标准\"></a> 四种主流的视频压缩编码标准：</h4>\n<h5 id=\"1-windows-media-video-9\"><a class=\"markdownIt-Anchor\" href=\"#1-windows-media-video-9\"></a> 1、Windows Media Video 9</h5>\n<p>相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　<br>\n官方网站：<a href=\"http://www.microsoft.com\" target=\"_blank\" rel=\"noopener\">http://www.microsoft.com</a></p>\n<h5 id=\"2-real-video-9\"><a class=\"markdownIt-Anchor\" href=\"#2-real-video-9\"></a> 2、Real Video 9</h5>\n<p>玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。<br>\n官方网址：<a href=\"http://www.realnetworks.com\" target=\"_blank\" rel=\"noopener\">http://www.realnetworks.com</a></p>\n<h5 id=\"3-divx\"><a class=\"markdownIt-Anchor\" href=\"#3-divx\"></a> 3、DivX</h5>\n<p>历史介绍：<br>\nISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。<br>\n1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。<br>\nDivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。<br>\n看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。<br>\n接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码–XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。<br>\nDivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。<br>\n官方网站：<a href=\"http://www.divx.com\" target=\"_blank\" rel=\"noopener\">http://www.divx.com</a></p>\n<h5 id=\"4-koepis-xvid-codec\"><a class=\"markdownIt-Anchor\" href=\"#4-koepis-xvid-codec\"></a> 4、Koepi’s XviD Codec</h5>\n<p>相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。<br>\n官方网站：<a href=\"http://roeder.goe.net/~koepi\" target=\"_blank\" rel=\"noopener\">http://roeder.goe.net/~koepi</a></p>\n<h4 id=\"视频压缩基本概念\"><a class=\"markdownIt-Anchor\" href=\"#视频压缩基本概念\"></a> 视频压缩基本概念：</h4>\n<h5 id=\"一-有损和无损压缩\"><a class=\"markdownIt-Anchor\" href=\"#一-有损和无损压缩\"></a> 一、有损和无损压缩：</h5>\n<p>在视频压缩中有损（Lossy ）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。</p>\n<h5 id=\"二-帧内和帧间压缩\"><a class=\"markdownIt-Anchor\" href=\"#二-帧内和帧间压缩\"></a> 二、帧内和帧间压缩：</h5>\n<p>帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。<br>\n采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>\n<h5 id=\"三-对称和不对称编码\"><a class=\"markdownIt-Anchor\" href=\"#三-对称和不对称编码\"></a> 三、对称和不对称编码：</h5>\n<p>对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。</p>\n<h3 id=\"第三部分音频文件格式\"><a class=\"markdownIt-Anchor\" href=\"#第三部分音频文件格式\"></a> 第三部分：音频文件格式</h3>\n<p>一些音视频的参数含义:</p>\n<p><strong>声道</strong>：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍：</p>\n<p><strong>1.单声道</strong>：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。</p>\n<p><strong>2.立体声</strong>：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。</p>\n<p><strong>3.准立体声</strong>：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。</p>\n<p><strong>4.四声道环绕</strong>：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。</p>\n<p><strong>5. 5.1声道</strong> 5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。</p>\n<h5 id=\"一wma\"><a class=\"markdownIt-Anchor\" href=\"#一wma\"></a> 一.WMA</h5>\n<p>WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。<br>\n优点<br>\nWMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。<br>\n缺点<br>\n在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。</p>\n<h5 id=\"二vqf\"><a class=\"markdownIt-Anchor\" href=\"#二vqf\"></a> 二.VQF</h5>\n<p>VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。<br>\n但是VQF不支持&quot;流&quot;，这可能也是为什么现在它完全被WMA压下去的一个主要原因.</p>\n<h5 id=\"三mp3\"><a class=\"markdownIt-Anchor\" href=\"#三mp3\"></a> 三.MP3</h5>\n<p>MP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用 MPEG Audio Layer 3 的技术，将音乐以1:10 甚至 1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　<br>\nMP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步; 其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE 和 DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS, 在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.</p>\n<h5 id=\"四mp3pro\"><a class=\"markdownIt-Anchor\" href=\"#四mp3pro\"></a> 四.MP3PRO</h5>\n<p>MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication 频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO.</p>\n<h5 id=\"五ogg\"><a class=\"markdownIt-Anchor\" href=\"#五ogg\"></a> 五.OGG</h5>\n<p>OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因<br>\n在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　<br>\nOgg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。<br>\n　　OGG Vorbis这种编码也远比90年×××发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。<br>\n　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。</p>\n<h5 id=\"六-mpc\"><a class=\"markdownIt-Anchor\" href=\"#六-mpc\"></a> 六. MPC</h5>\n<p>MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。<br>\nMPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了<br>\n较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了. 但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.</p>\n<h5 id=\"七atrac\"><a class=\"markdownIt-Anchor\" href=\"#七atrac\"></a> 七.ATRAC</h5>\n<p>ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。<br>\nATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。<br>\nATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。<br>\n.</p>\n<h5 id=\"八-ape\"><a class=\"markdownIt-Anchor\" href=\"#八-ape\"></a> 八. APE</h5>\n<p>APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey’‘s Audio这个软件进行“瘦身”压缩为 APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过 Monkey’‘s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”， Monkey’‘s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的 APE音频文件是可以直接被播放的。 Monkey’'s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。<br>\n和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了 Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.</p>\n<h5 id=\"九-wav\"><a class=\"markdownIt-Anchor\" href=\"#九-wav\"></a> 九. WAV</h5>\n<p>WAV是录音时用的标准的windows文件格式，文件的扩展名为“ .wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。<br>\nWAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。<br>\n　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟 44khz 采样率的WAV文件就会占用10M硬盘空间！<br>\n它通常作为制作高质量音乐的中间体</p>\n<h5 id=\"十rm\"><a class=\"markdownIt-Anchor\" href=\"#十rm\"></a> 十.RM</h5>\n<p>Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。<br>\nRM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。<br>\nRM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"第一部分基础概念\"><a class=\"markdownIt-Anchor\" href=\"#第一部分基础概念\"></a> 第一部分：基础概念</h3>\n<h5 id=\"媒体\"><a class=\"markdownIt-Anchor\" href=\"#媒体\"></a> 媒体</h5>\n<p>媒体：是表示，传输，存储信息的载体，常人们见到的文字、声音、图像、图形等都是表示信息的媒体。<br>\n多媒体： 是声音、动画、文字、图像和录像等各种媒体的组合，以图文并茂，生动活泼的动态形式表现出来，给人以很强的视觉冲击力，留下深刻印象</p>\n<h5 id=\"多媒体技术\"><a class=\"markdownIt-Anchor\" href=\"#多媒体技术\"></a> 多媒体技术</h5>\n<p>多媒体技术：是将文字、声音、图形、静态图像、动态图像与计算集成在一起的技术。它要解决的问题是计算机进一步帮助人类按最自然的和最习惯的方式接受和处理信息。</p>","more":"<h5 id=\"流媒体\"><a class=\"markdownIt-Anchor\" href=\"#流媒体\"></a> 流媒体</h5>\n<p>流媒体 ：流媒体是指采用流式传输的方式在Internet播放的连续时基媒体格式，实际指的是一种新的媒体传送方式，而不是一种新的媒体格式（在网络上传输音/视频等多媒体信息现在主要有下载和流式传输两种方式）流式传输分两种方法：实时流式传输方式(Realtime streaming)和顺序流式传输方式(progressive streaming)。</p>\n<h5 id=\"多媒体文件\"><a class=\"markdownIt-Anchor\" href=\"#多媒体文件\"></a> 多媒体文件</h5>\n<p>多媒体文件：是既包括视频又包括音频，甚至还带有脚本的一个集合，也可以叫容器；</p>\n<h5 id=\"媒体编码\"><a class=\"markdownIt-Anchor\" href=\"#媒体编码\"></a> 媒体编码</h5>\n<p>媒体编码：是文件当中的视频和音频所采用的压缩算法。也就是说一个avi的文件，当中的视频编码有可能是A，也可能是B，而其音频编码有可能是1，也有可能是2。 转码 ：指将一段多媒体包括音频、视频或者其他的内容从一种编码格式转换成为另外一种编码格式</p>\n<h5 id=\"视频\"><a class=\"markdownIt-Anchor\" href=\"#视频\"></a> 视频</h5>\n<p>视频：连续的图象变化每秒超过24帧（Frame）画面以上时，根据视觉暂留原理，人眼无法辨别单幅的静态画面，看上去是平滑连续的视觉效果，这样连续的画面叫做视频</p>\n<h5 id=\"音频\"><a class=\"markdownIt-Anchor\" href=\"#音频\"></a> 音频</h5>\n<p>音频 ：人类能听到的声音都成为音频，但是一般我们所说到的音频时存储在计算机里的声音</p>\n<h3 id=\"第二部分视频文件格式\"><a class=\"markdownIt-Anchor\" href=\"#第二部分视频文件格式\"></a> 第二部分：视频文件格式</h3>\n<h4 id=\"基本视频概念讲解\"><a class=\"markdownIt-Anchor\" href=\"#基本视频概念讲解\"></a> 基本视频概念讲解</h4>\n<h5 id=\"码率\"><a class=\"markdownIt-Anchor\" href=\"#码率\"></a> 码率</h5>\n<p>码率：码率就是数据传输时单位时间传送的数据位数,一般我们用的单位是kbps即千位每秒。 通俗一点的理解就是取样率，单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件体积与取样率是成正比的，所以几乎所有的编码格式重视的都是如何用最低的码率达到最少的失真。但是因为编码算法不一样，所以也不能用码率来统一衡量音质或者画质</p>\n<h5 id=\"帧\"><a class=\"markdownIt-Anchor\" href=\"#帧\"></a> 帧</h5>\n<p>帧：帧就是一段数据的组合，它是数据传输的基本单位。就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。 一帧就是一副静止的画面，连续的帧就形成动画，如电视图像等。</p>\n<h5 id=\"帧率\"><a class=\"markdownIt-Anchor\" href=\"#帧率\"></a> 帧率</h5>\n<p>帧率：帧率即每秒显示帧数，帧率表示图形处理器处理场时每秒钟能够更新的次数。高的帧率可以得到更流畅、更逼真的动画。一般来说30fps就是可以接受的，但是将性能提升至60fps则可以明显提升交互感和逼真感，但是一般来说超过75fps一般就不容易察觉到有明显的流畅度提升了。如果帧率超过屏幕刷新率只会浪费图形处理的能力，因为监视器不能以这么快的速度更新，这样超过更新率的帧率就浪费掉了。</p>\n<h5 id=\"关键帧\"><a class=\"markdownIt-Anchor\" href=\"#关键帧\"></a> 关键帧</h5>\n<p>关键帧：相当于二维动画中的原画，指角色或者物体运动或变化中的关键动作所处的那一帧，它包含了图像的所有信息，后来帧仅包含了改变了的信息。如果你没有足够的关键帧，你的影片品质可能比较差，因为所有的帧从别的帧处产生。对于一般的用途，一个比较好的原则是每5秒设一个关键帧。但如果时那种实时传输的流文件，那么要考虑传输网络的可靠度，所以要1到<br>\n2秒增加一个关键帧。</p>\n<h4 id=\"目前我们经常见的视频格式无非就是两大类\"><a class=\"markdownIt-Anchor\" href=\"#目前我们经常见的视频格式无非就是两大类\"></a> 目前我们经常见的视频格式无非就是两大类：</h4>\n<p>1、影像格式（Video）<br>\n2、流媒体格式（Stream Video）</p>\n<h4 id=\"在影像格式中还可以根据出处划分为三大种\"><a class=\"markdownIt-Anchor\" href=\"#在影像格式中还可以根据出处划分为三大种\"></a> 在影像格式中还可以根据出处划分为三大种：</h4>\n<ol>\n<li>AVI格式：这是由微软（Microsoft）提出，具有“悠久历史”的一种视频格式</li>\n<li>MOV格式：这是由苹果（Apple）公司提出的一种视频格式</li>\n<li>MPEG/MPG/DAT：这是由国际标准化组织ISO(International Standards Organization)与IEC(International Electronic Committee)联合开发的一种编码视频格式。MPEG是运动图像压缩算法的国际标准，现已被几乎所有的计算机平台共同支持。</li>\n</ol>\n<h4 id=\"在流媒体格式中同样还可以划分为三种\"><a class=\"markdownIt-Anchor\" href=\"#在流媒体格式中同样还可以划分为三种\"></a> 在流媒体格式中同样还可以划分为三种：</h4>\n<ol>\n<li>RM格式：这是由Real Networks公司开发的一种新型流式视频文件格式。</li>\n<li>MOV/QT格式：MOV也可以作为一种流文件格式。QuickTime能够通过Internet提供实时的数字化信息流、工作流与文件回放功能，为了适应这一网络多媒体应用，QuickTime为多种流行的浏览器软件提供了相应的QuickTime Viewer插件（Plug－in），能够在浏览器中实现多媒体数据的实时回放。</li>\n<li>ASF格式：这是由微软公司开发的流媒体格式，是一个在Internet上实时传播多媒体的技术标准。</li>\n<li>FLV</li>\n</ol>\n<h4 id=\"具体视频文件格式详解\"><a class=\"markdownIt-Anchor\" href=\"#具体视频文件格式详解\"></a> 具体视频文件格式详解：</h4>\n<h5 id=\"mpegmpgdat\"><a class=\"markdownIt-Anchor\" href=\"#mpegmpgdat\"></a> *. MPEG/.MPG/.DAT</h5>\n<p>MPEG也是Motion Picture Experts Group 的缩写。这类格式包括了 MPEG-1, MPEG-2 和 MPEG-4在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为目前其正在被广泛地应用在 VCD 的制作和一些视频片段下载的网络应用上面，大部分的 VCD 都是用 MPEG1 格式压缩的 ( 刻录软件自动将MPEG1转为 .DAT格式 ) ，使用 MPEG-1 的压缩算法，可以把一部 120 分钟长的电影压缩到 1.2 GB 左右大小。MPEG-2 则是应用在 DVD 的制作，同时在一些 HDTV（高清晰电视广播）和一些高要求视频编辑、处理上面也有相当多的应用。使用 MPEG-2 的压缩算法压缩一部 120 分钟长的电影可以压缩到 5-8 GB 的大小（MPEG2的图像质量MPEG-1 与其无法比拟的）。</p>\n<h5 id=\"avi\"><a class=\"markdownIt-Anchor\" href=\"#avi\"></a> *.AVI</h5>\n<p>它的英文全称为Audio Video Interleaved，即音频视频交错格式。是将语音和影像同步组合在一起的文件格式。它对视频文件采用了一种有损压缩方式，但压缩比较高，因此尽管面面质量不是太好，但其应用范围仍然非常广泛。AVI支持256色和RLE压缩。AVI信息主要应用在多媒体光盘上，用来保存电视、电影等各种影像信息。它于1992年被Microsoft公司推出，随Windows3.1一起被人们所认识和熟知。所谓“音频视频交错”，就是可以将视频和音频交织在一起进行同步播放。这种视频格式的优点是图像质量好，可以跨多个平台使用，其缺点是体积过于庞大，而且更加糟糕的是压缩标准不统一，最普遍的现象就是高版本Windows媒体播放器播放不了采用早期编码编辑的AVI格式视频，而低版本Windows媒体播放器又播放不了采用最新编码编辑的AVI格式视频，所以我们在进行一些AVI格式的视频播放时常会出现由于视频编码问题而造成的视频不能播放或即使能够播放，但存在不能调节播放进度和播放时只有声音没有图像等一些莫名其妙的问题，如果用户在进行AVI格式的视频播放时遇到了这些问题，可以通过下载相应的×××来解决。是目前视频文件的主流。 这种格式的文件随处可见，比如一些游戏、教育软件的片头，多媒体光盘中，都会有不少的 AVI 。现在，在WINDOWS 95或98里都能直接播放AVI，同一种格式的avi文件有可能采用不同的编码方式，最常见的有 Intel Indeo（R）Video R3.2（像游戏过场动画等，是目前使用最广泛的一种avi编码技术）、Microsoft video 等。</p>\n<h5 id=\"rarmram\"><a class=\"markdownIt-Anchor\" href=\"#rarmram\"></a> *.RA/RM/RAM</h5>\n<p>*.RM， Real Networks公司所制定的音频/视频压缩规范Real Media中的一种，Real Player能做的就是利用Internet资源对这些符合Real Media技术规范的音频/视频进行实况转播。在Real Media规范中主要包括三类文件：RealAudio、Real Video和Real Flash （Real Networks公司与Macromedia公司合作推出的新一代高压缩比动画格式）。REAL VIDEO （RA、RAM）格式由一开始就是定位就是在视频流应用方面的，也可以说是视频流技术的始创者。它可以在用 56K MODEM 拨号上网的条件实现不间断的视频播放，从RealVideo的定位来看，就是牺牲画面质量来换取可连续观看性。其实RealVideo也可以实现不错的画面质量，由于RealVideo可以拥有非常高的压缩效率，很多人把VCD编码成RealVideo格式的，这样一来，一张光盘上可以存放好几部电影。REAL VIDEO存在颜色还原不准确的问题，RealVideo就不太适合专业的场合，但RealVideo出色的压缩效率和支持流式播放的特征，使得RealVideo在网络和娱乐场合占有不错的市场份额。</p>\n<h5 id=\"mov\"><a class=\"markdownIt-Anchor\" href=\"#mov\"></a> *.MOV</h5>\n<p>MOV格式，美国Apple公司开发的一种视频格式，默认的播放器是苹果的QuickTimePlayer。具有较高的压缩比率和较完美的视频清晰度等特点，但是其最大的特点还是跨平台性，即不仅能支持MacOS，同样也能支持Windows系列, 在所有视频格式当中，也许MOV格式是最不知名的。也许你会听说过QuickTime，MOV格式的文件正是由它来播放的。在PC几乎一统天下的今天，从Apple移植过来的MOV格式自然是受到排挤的。它具有跨平台、存储空间要求小的技术特点，而采用了有损压缩方式的MOV格式文件，画面效果较AVI格式要稍微好一些。到目前为止，它共有 4 个版本，其中以 4.0 版本的压缩率最好。这种编码支持16位图像深度的帧内压缩和帧间压缩，帧率每秒10帧以上。现在这种格式有些非编软件也可以对它时行处理，其中包括ADOBE公司的专业级多媒体视频处理软件AFTEREFFECT和PREMIERE。</p>\n<h5 id=\"asf\"><a class=\"markdownIt-Anchor\" href=\"#asf\"></a> *.ASF</h5>\n<p>ASF (Advanced Streaming format高级流格式)。ASF 是 MICROSOFT 为了和现在的 Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件压缩格式。ASF使用了 MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为 ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比 VCD 差一点点并不出奇，但比同是视频“流”格式的 RAM 格式要好。 ASF支持任意的压缩/解压缩编码方式，并可以使用任何一种底层网络传输协议，具有很大的灵活性。ASF流文件的数据速率可以在28.8Kbps到3Mbps之间变化。用户可以根据自己应用环境和网络条件选择一个合适的速率，实现VOD点播和直播。</p>\n<h5 id=\"wmv\"><a class=\"markdownIt-Anchor\" href=\"#wmv\"></a> *.WMV</h5>\n<p>WMV是微软推出的一种流媒体格式，它是ASF的升级延伸，在同等视频质量下，WMV格式的体积非常小，因此很适合在网上播放和传输。微软希望用其取代QuickTime之类的技术标准以及WAV、AVI之类的文件扩展名。WMV的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。</p>\n<h5 id=\"navi\"><a class=\"markdownIt-Anchor\" href=\"#navi\"></a> *. NAVI</h5>\n<p>如果你发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是 New AVI 的缩写，是一个名为 Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的 AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的 ASF 格式的一些不足，让 NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型 ASF 格式。</p>\n<h5 id=\"flv\"><a class=\"markdownIt-Anchor\" href=\"#flv\"></a> *.FLV</h5>\n<p>FLV 是 FLASH VIDEO 的简称，是由Macromedia 公司开发的属于自己的流式视频格式。FLV也就是随着Flash MX的推出发展而来的视频格式，是在sorenson 公司的压缩算法的基础上开发出来的。FLV格式不仅可以轻松的导入Flash 中，速度极快，并且能其到保护版权的作用，并且可以不通过本地的微软或者REAL播放器播放视频。Flash MX 2004对其提供了完美的支持，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。</p>\n<h4 id=\"视频文件转换\"><a class=\"markdownIt-Anchor\" href=\"#视频文件转换\"></a> 视频文件转换：</h4>\n<p>比较常见的视频格式转化有：</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">RM→ASF </span><br><span class=\"line\"><span class=\"built_in\">AVI</span>→RMVB </span><br><span class=\"line\">dat--&gt;divx </span><br><span class=\"line\">mpg--&gt;divx </span><br><span class=\"line\">vcd--&gt;rm </span><br><span class=\"line\">dat--&gt;rm </span><br><span class=\"line\">mpg,dat、avi、mov--&gt;rm </span><br><span class=\"line\">*--&gt;FLV </span><br><span class=\"line\">最近视频博客的兴起，导致了flv的快速发展</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">AVI</span>→<span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">例如有纪念性的家庭录影带，可以事先转换成<span class=\"built_in\">AVI</span>格式，再用软件将它转换成<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式，然后用刻录器将<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式文件刻录光盘片，得到的就是普通的VCD光盘了，可以拿到任何VCD播放器上播放。 </span><br><span class=\"line\"><span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>)→<span class=\"built_in\">AVI</span> </span><br><span class=\"line\">从<span class=\"built_in\">MPEG</span>到<span class=\"built_in\">AVI</span>文件之间的转换，为磁盘节省空间。</span><br><span class=\"line\"><span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>)→ASF </span><br><span class=\"line\">将vcd文件转码后实现VOD点播和直播。</span><br><span class=\"line\"></span><br><span class=\"line\">ASF→<span class=\"built_in\">MPEG</span>(<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">由于ASF视频格式的先天限制，一般来说它的图像质量往往比不上<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>，所以转换之前，请三思而后行。 </span><br><span class=\"line\"></span><br><span class=\"line\">DVD(<span class=\"built_in\">MPEG</span>－<span class=\"number\">2</span>)→VCD (<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>) </span><br><span class=\"line\">由于DVD驱动器尚未普及以及DVD光盘成本昂贵等客观原因，DVD影片一直未能像VCD一样流行。但我们可以将喜爱的DVD影片转换成<span class=\"built_in\">MPEG</span>－<span class=\"number\">1</span>格式的视频文件，留在硬盘上观看或是刻成VCD光盘。 </span><br><span class=\"line\">dat/mpg-&gt;mp3 </span><br><span class=\"line\">CD--&gt;wav,mp3,wma </span><br><span class=\"line\">rm--&gt;mp3 </span><br><span class=\"line\">mp3--&gt;wma</span><br></pre></td></tr></table></figure>\n<p>以上列举的视频格式转化都是比较常见的，当然了，说到底，是有这方面的实际应用需求才会出现这方面的视频转化需要。</p>\n<p>比如说，要把一部VCD（也就是MPEG1编码的视频文件）制作成可以在线观看的影片，最大的瓶颈就在于文件尺寸的改变，并且要能够适应网络的特点，这样原始的格式就不能满足需 要，必须要转化成互联网视频播放规范的流媒体格式才可以，比如说是RM或者ASF，这就是需要，所以针对影像格式转化为流媒体格式的软件也就应用而生了，还有现在非常流行的MPEG4视频压缩技术，它能够把一张DVD压缩到一张CD上去，并且视频效果也不会有太大的变化，至少在我们普通用户看来也是非常不错的，而文件体积则大大减小了，这就要求有能够把DVD转化成MPEG4文件的软件出现，但是如果有人想要把RM转化成MPEG1（VCD），就没有太大的实际意义了，因为这样并不能给视频效果带来太大的提升，反而文件尺寸大了许多，所以我们很少能够看到这样的转化软件，其他的也类似，所以，在视频转化领域，可以参照以下两个原则：</p>\n<p>1 有明确的应用方向：就是说一种视频格式转化成另一种视频格式，必须要有明确的应用方向，即目标格式能够有很广泛的应用价值，而不是说为了转化而转化，比如上文所说的VCD-&gt;RM，它的应用方向就是网络播放，因为现在在线电影是一个很大的市场和网络的应用方向。</p>\n<p>2 能够提升播放价值： 就是说一种视频格式转化成另一种视频格式除了有明确的应用方向外，还要考虑转化是不是有价值，如果说转化后的文件播放效果没有明显提升，但是文件尺寸却大了一倍，我想这样亏本的买卖是没有人会去做的，RM转化成VCD就没有实际的意义，原因如前文所述，而DVD转化成MPEG4价值就很大，不说转化后的播放效果，单说成本就降低了不少。</p>\n<h4 id=\"音视频压缩编码标准\"><a class=\"markdownIt-Anchor\" href=\"#音视频压缩编码标准\"></a> 音视频压缩编码标准：</h4>\n<p>多媒体编辑码方式就是指通过特定的压缩技术，将某个视频格式的文件转换成另一种视频格式文件的方式，现在主要的编码方式有：</p>\n<ol>\n<li>MPEG系列： 视频编码方面主要是Mpeg1、Mpeg2、Mpeg4、Mpeg4 AVC；<br>\n音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的</li>\n<li>H.26X系列：包括H261、H262、H263、H263+、H263++、H264</li>\n<li>微软windows media系列： 视频编码有Mpeg-4 v1/v2/v3、Windows Media Video 7/8/9/10 ；音频编码有Windows Media audeo v1/v2/7/8/9</li>\n<li>Real Media系列： 视频编码有RealVideo G2、RealVideo 8/9/10 ；音频编码有RealAudio cook/sipro、RealAudio AAC/AACPlus等</li>\n<li>QuickTime系列： 视频编码有Sorenson Video 3、Apple MPEG-4、Apple H.264 ；音频编码有QDesign Music 2、Apple MPEG-4 AAC</li>\n<li>其它，如：Ogg、On2-vpx、flash vidio，以及M-JPEG视频压缩方式<br>\n各视频编码的应用场合简要：<a href=\"http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/luchy/archive/2007/03/27/1542478.aspx</a>这里讲的挺详细的</li>\n</ol>\n<hr>\n<ol>\n<li>Mpeg1较早的视频编码，质量比较差，主要用于 CD-ROM 存储视频，国内最为大家熟悉的就是 VCD（Video CD），他的视频编码就是采用 MPEG-1；</li>\n<li>在 MPEG-1 的基础上开发的一种视频编码，它的质量远远好于 MPEG-1，所以被运用在了 DVD-Video 上面，MPEG-2 是 DVD-Video 唯一指定的视频编码。MPEG-2 不光运用于 DVD-Video ，现在大部分 HDTV（高清电视）也采用 MPEG-2 编码，分辨率达到了 1920x1080。</li>\n<li>MPEG-3是MPEG组织制定的视频和音频压缩标准。本来的目标是为HDTV提供20-40Mbps视频压缩技术。在标准制定的过程中，委员会很快发现MPEG-2可以取得类似的效果。随后，MPEG-3项目停止了。</li>\n<li>MPEG-4是为了适应网络的需求，采用一系列新技术，以最少的数据获得最佳的图像质量为目标的新一代编码方式。主要应用在数字电视、动态图像、互联网、实时多媒体监控、移动多媒体通信、Internet／intranet上的视频流与可视游戏、DVD上的交互多媒体应用等方面。Divx，xvid，ms mpeg4都是采用mpeg-4视频编码的。对于普通用户来说，MPEG-4在目前来说最有吸引力的地方还在于它能在普通CD-ROM上基本实现DVD的质量；用MPEG-4压缩算法的ASF(Advanced Streaming format，高级格式流)可以将120分钟的电影压缩为300MB左右的视频流；采用MPEG-4压缩算法的DIVX视频编码技术可以将120分钟的电影压缩600MB左右</li>\n<li>Mpeg4 AVC和 MPEG-4 是两种不同的编码，主要是在极低码率下 MPEG-4 表现并不好，而 AVC 更加适合低带宽传输。在高码率上，AVC 的表现也要好过 MPEG-4，所以现在大有取代 MPEG-4 的趋势。下一代 HD DVD 和 Blue Ray Disc 已经正式接纳 AVC 为视频编码方案之一，相信 AVC 的发展前途会非常好。AVC/H.264极有可能成为下一代视频格式，（avs，中国标准）</li>\n<li>H.261是ITU-T为在综合业务数字网(ISDN)上开展双向声像业务(可视电话、视频会议)而制定的，它是最早的运动图像压缩标准，它详细制定了视频编码的各个部分，包括运动补偿的帧间预测、DCT变换、量化、熵编码，以及与固定速率的信道相适配的速率控制等部分。</li>\n<li>H.262是由ITU-T的VCEG组织和ISO/IEC的MPEG组织联合制定的，所以制定完成后分别成为了两个组织的标准，正式名称是&quot;ITU-T建议H.262&quot;和&quot;ISO/IEC 13818-2&quot;。这两个标准在所有的文字叙述上都是相同的。</li>\n<li>H.263是ITU-T为低于64kb/s的窄带通信信道制定的视频编码标准，它是在H.261基础上发展起来的</li>\n<li>H263+是H.263 的第二个版本，加入了许多新技术来扩展 H.263 的应用范围。</li>\n<li>H.263++是在 H.263+ 上增加了几个选项，来增强码流在恶劣信道上的抗误码性能，同时提高增强编码效率。</li>\n<li>H.264也就是前面提到的 MPEG-4 AVC。H.264是由ISO/IEC与ITU-T组成的联合视频组(JVT)制定的新一代视频压缩编码标准。在ISO/IEC中该标准命名为AVC (Advanced Video Coding)，作为MPEG-4标准的第10个选项；在ITU-T中正式命名为H.264标准。</li>\n<li>Microsoft MPEG-4 v1/v2/v3，最早的 ASF 采用的视频编码，基于 MPEG-4 技术开发，DivX3.11 就是基于 Microsoft MPEG-4 v3 破解出来的，后来才进行了重写。</li>\n<li>Windows Media Video 7，Microsoft 正式开发的第一个 Windows Media Video，开始脱离了 MPEG-4，和 MPEG-4 不兼容，从这一点上可见微软的野心。可惜这个版本压缩效果非常烂，打破了微软一飞冲天的美梦，不过它在压缩速度上非常快，现在网络上有很多采用这种格式压缩的 WMV。</li>\n<li>Windows Media Video 8，在 WMV7 基础上改进的版本，质量上面进不了不少</li>\n<li>Windows Media Video 9，微软的重头戏，不光是这一个编码，V9 系列更是一个平台，让微软有足够的能力挑战 MPEG，ITU 等标准化组织。虽然这个版本并没有微软吹得那么厉害，特别是低码率下比较差，不过跟以前版本相比进步还是非常多的。特别是 WMV HD 的应用，让微软也跻身视频标准领域。</li>\n<li>RealVideo G2，早期的 RealVideo 编码，质量比较糟糕，不过那时在网络上算是很先进了，毕竟当时能用网络看视频的人不多。</li>\n<li>RealVideo 8，随着 RealPlayer 8 推出的视频格式，是现在主流的网络视频编码之一。编码速度较慢，质量也只能算一般。</li>\n<li>RealVideo 9，RealNetworks 开发的新一代编码，质量进步了很多，特别是在底码率下，而且编码速度很快，做到了速与质的很好统一。</li>\n<li>RealVideo 10，在 RealVideo 9 基础上加入了一些参数，如 EHQ 等，更加精确控制码率，和 RealVideo 9 兼容。</li>\n<li>Sorenson Video 3，Sorenson Media 公司随 QuickTime 5 发布的编码器，质量很不错，已经成为 QuickTime 的标准视频编码，网络上大部分电影预告片都采用这种编码。</li>\n<li>Apple MPEG-4，Apple 公司自己开发的 MPEG-4 编码器，随 QuickTime 6 发布，质量很差。</li>\n<li>Apple H.264，Apple 公司自己开发的 H.264 编码器，随 QuickTime 7 发布，支持 HDTV。</li>\n<li>Ogg 是 <a href=\"http://Xiph.org\" target=\"_blank\" rel=\"noopener\">Xiph.org</a> 基金会发起的一个开放源代码项目，包括视频音频，服务器，传输系统，客户端，硬件支持等，最为大家熟悉的就是音频 Ogg Vorbis，它被认为是迄今为止 128kbps 码率上最好的编码器。</li>\n<li>On2 VPX系列，On2 公司开发了一系列优秀的视频编码，现在应用得最多的恐怕是 Nullsoft Video 的视频，它们就采用了 VP3，VP5，VP6 视频编码。</li>\n<li>Flash Video，Macromedia 公司推出的多媒体格式，主要用于在 Flash 中压缩视频。视频采用 Sorenson 公司的 Spark 编码器，音频采用 MP3，质量比较差。传闻下一代 Flash Video 准备使用 On2 VP6 ，那将让视频质量得到一个量的提升。</li>\n<li>M-JPEG（Motion-JoinPhotographicExpertsGroup）技术即运动静止图像（或逐帧）压缩技术，广泛应用于非线性编辑领域可精确到帧编辑和多层图像处理，把运动的视频序列作为连续的静止图像来处理，这种压缩方式单独完整地压缩每一帧，在编辑过程中可随机存储每一帧，可进行精确到帧的编辑，此外M-JPEG的压缩和解压缩是对称的，可由相同的硬件和软件实现。</li>\n</ol>\n<h4 id=\"各音频编码的应用场合简要\"><a class=\"markdownIt-Anchor\" href=\"#各音频编码的应用场合简要\"></a> 各音频编码的应用场合简要：</h4>\n<ol>\n<li>MPEG Audio Layer 1典型数据压缩率是1：4，即每个立体声信号为384 kbps</li>\n<li>MPEG Audio Layer 2典型数据压缩率是1：4—1：8，即每个立体声信号为256到192 kbps。MPEG Audio Layer1/2主要用于vcd，svcd的音频编码</li>\n<li>MPEG Audio Layer 3，也就是大名鼎鼎的mp3，已经成为网络音频的主流格式，能在128kbps的码率下接近cd音质。典型数据压缩率是1：10—1：12，即每个立体声信号为128到112 kbps</li>\n<li>MPEG-2 AAC（Advanced Audio Coding）是在1997年由以Bosi、Brandenburg、Johnston等为首的音频编码研究提出的，它总结了MPEG-1、MPEG-2和AC-3等的长处，在MPEG 系统上进一步改进了很多新的功能，大大增强了编码的灵活度，在保证音质的同时更大限度地压缩了码率。它和传统的mpeg audio 不兼容，在理论上质量要高于mp3，并且支持多声道，在96kbps的码率范围内能接近cd音质，比mp3更加适合低码率传输；同时，MPEG-2 AAC已经成为MPEG-4标准中高质量音频编码的核心，是下一代音频压缩标准。</li>\n<li>MPEG-4 AAC：是MPEG-4标准音频编码标准的一部分，apple公司自己开发有这种 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布</li>\n<li>杜比数字AC-3技术也就是5.1声道技术</li>\n<li>Windows Media Audio v1/v2，微软最早的音频编码技术，用于 ASF 中，后来被破解也用在 DivX Audio 中，质量比较差。</li>\n<li>Windows Media Audio 7/8/9，随着各种不同的 WMV 而推出的相应的音频编码，质量节节提升，不过还没有达到 64kbps CD音质的神化</li>\n<li>Windows Media Audio 9 Professional，WMA9 中出现的新编码，主要用于多声道编码和高采样率音频的编码，质量不错。</li>\n<li>RealAudio Cook，早期的音频编码，但是在现在看来，仍然质量不错，可惜最高码率 96kbps。应用到了两代音频编码中：RealAudio G2、RealAudio 8。</li>\n<li>RealAudio Sipro，采用了 Sipro 语音编码技术，主要针对语音编码，应用在更早期的 RealAudio 4.0、RealAudio 5.0 中。</li>\n<li>RealAudio AAC，AAC 音频编码，用于 RealAudio 10 中。</li>\n<li>RealAudio aacPlus，aacPlus 音频编码，用于 RealAudio 10 中，不过并没有随 RealProducer 发行，需要单独购买。</li>\n<li>QDesign Music 2，QDesign Music 的第二个版本，也是最后一个版本，在时下这些先进的音频编码面前，它已经没有生命力了，主要应用于网上的电影预告片。</li>\n<li>Apple MPEG-4 AAC，Apple 公司自己开发的 AAC 编码器，质量非常好，是最优秀的 AAC 编码器之一，随 QuickTime 6 发布。</li>\n</ol>\n<h4 id=\"四种主流的视频压缩编码标准\"><a class=\"markdownIt-Anchor\" href=\"#四种主流的视频压缩编码标准\"></a> 四种主流的视频压缩编码标准：</h4>\n<h5 id=\"1-windows-media-video-9\"><a class=\"markdownIt-Anchor\" href=\"#1-windows-media-video-9\"></a> 1、Windows Media Video 9</h5>\n<p>相比起其他三种图像压缩技术，WMV可能是使用率最高的视频编码格式。原因十分简单，如果想使自己的影片直接给网上其他用户观看到的话，利用微软自身的视频编码标准是最简单的做法。因为只要用户的电脑中有Windows Media Player(媒体播放器)，就能够播放WMV影片，而且不用额外安装Codec（编码），所以兼容性方面完全不用担心。借助Windows Media 9.0 Series的新技术，Windows Media Video 9.0比旧的8.0版有多达15-50%的压缩率提高。而且与MPEG-4画质相比时，其容量大小只需一半即可达到。加上配合Windows Media Service 9.0服务器，在Streaming media（流媒体）方面也有更佳的表现。　　<br>\n官方网站：<a href=\"http://www.microsoft.com\" target=\"_blank\" rel=\"noopener\">http://www.microsoft.com</a></p>\n<h5 id=\"2-real-video-9\"><a class=\"markdownIt-Anchor\" href=\"#2-real-video-9\"></a> 2、Real Video 9</h5>\n<p>玩电脑时间长的朋友都知道，Real Video是多年前市场上最普及的音乐、图像格式。不过随着MP3、WMV及WMV等的兴起，已经使Real Media格式的普及率大不如前。但现在全世界仍然有许多的电脑玩家是Real Video的支持者，网上供下载的影片很多也是RM或RMVB格式。　RealNetwork新推出了一套名为Helix Producer的工具（也就是Real Producer 9），其中的RealVideo 9在图像压缩编码技术方面作出重大优化，无论在下载或Streaming时都声称比Windows Media 9出色，能够以一半的比特速率（bitrate）达到MPEG-4级图像，在约500 Kbps时达到接近DVD的画质表现。同样地，配合服务器可获得更出色的效果。<br>\n官方网址：<a href=\"http://www.realnetworks.com\" target=\"_blank\" rel=\"noopener\">http://www.realnetworks.com</a></p>\n<h5 id=\"3-divx\"><a class=\"markdownIt-Anchor\" href=\"#3-divx\"></a> 3、DivX</h5>\n<p>历史介绍：<br>\nISO公布了“超低比特率活动图像和语音压缩标准 ”，排序MPEG－4,1998年10月批准第一版，1994年4月又公布了第二版及其校验模型（VM），MPEG－4正式编号是ISO/IEC国际标准14496，它是一种新型的多媒体标准，它与前标准一个重要区别就在于，是一个基于对象的视编码压缩标准，所定义的码率控制的目标就是获得在给定码率下的最优质量，它为互联网上传输高质量的多媒体视频提供了很好的技术平台。<br>\n1998年微软开发了第一个在PC上使用的MPEG－4编码器，它包括MS MPEG4V1、MS MPEG4V2、MS MPEG4V3的系列编码内码，其中V1和V2用来制作AVI文件，一直到现在它都是作为Windows的默认组件，不过V1和V2的编码质量不是很好，一直到MS　MPEG4V3才开始有好转，画质有了显著的进步，但是不知微软出于什么目的，却将这个MS　MPEGV3的视频编码内核封闭，仅仅使其应用于Windows Media流媒体技术上，也就是我们熟悉的ASF流媒体文件中。ASF文件虽然有一些优势，但是由于过分的封闭不能被编辑，末得到广泛应用，这便惹怒了那些个不怕天不怕地的视频黑客和致力于钻研视频编码的高手，后来，这些小组不仅破解了微软的视频编码，而且经过他们的修改，一种新的视频编码诞生了：那就是广为流传的MPEG编码器－DivX3.11。<br>\nDivX采用了MS的MPEGV3，改良后并加入自己功能称之为DivX3.11，也是目前互联网上普通采用的MPEG－4编码器之一。很快，DivX被传得红得发紫，几乎成了业界的标准，但是，同样很快地出现了，DivX的基础技术是非法盗用微软的，微软声称将对所有推动DivX发展的人、企业进行追究，可是DivX技术的创造者之一罗达（Rota）正全面申请将DivX合法化，这是基于DivX虽然是从Window的发明出来的，但却没有用过任何微软的技术，更组建新公司DivXNetworks全力推广DivX，看来DivX（俗称压缩电影）蓬勃发展的大潮是势不可挡了。<br>\n看来任何吸引眼球的故事在关键时刻都会发生转折，DivX的发展竟也不能脱离这一俗套，就在DivX顺利发展时期，DivX的技术逐渐成熟，商机无限的时候，一台好戏上演了，DivXNetworks成立初衷就是摆脱微软的技术封闭，因而发起一个完全开放源码的项目，名为 “ Projet Mayo ”，目标是开发一套全新的、开放源码的MPEG4编码软件，由于它完全符合ISO　MPEG标准，又是完全开放源代码，OpenDivXCODEC吸引了很多软件，视频高手参与，很快便开发出具有更高性能的编码器Encore2等等，就在DivX最辉煌的时期，DXN公司突然封闭了DivX的源代码，并在Encore2的基础上发布了自有产品DivX4，原来DXN早就给自己留了后门，DivX采取的是LGPL协议，而不是GPL协议，虽说它们都是公共许可证协议，保障自由使用和修改软件或源码的权利，但LGPL允许私有，DXN就是利用这一协议初其不备的耍出了大刀。<br>\n接着，很多被DXN公司狠狠涮了一回的软件、视频团体另起门户，逐渐重新聚拢开发力量，高举复仇大旗，在OpenDivX版本基础上，再次开发出一种新的MPEG－4编码–XviD，名字的顺序和DviX刚好相反，仅仅从名字就可以看出Xvid充满了复仇的力量。<br>\nDivX是近一两年来称霸网络视频的图像压缩编码标准。起初它是以微软MPEG 4视频编码标准为基础修改和开发的，并以免费方式发布。其特点是具有十分不错的压缩比率，可以将一整套DVD质量的影片压缩存放到一张CD-R光盘中。现在的DivX分为普通版和Pro版，其中后者还有收费版和Adware（广告）版两种，自带DivX Player程序进行播放。用户如果安装了免费的DivX Codec后，也可用Windows Media player观看DivX影片。<br>\n官方网站：<a href=\"http://www.divx.com\" target=\"_blank\" rel=\"noopener\">http://www.divx.com</a></p>\n<h5 id=\"4-koepis-xvid-codec\"><a class=\"markdownIt-Anchor\" href=\"#4-koepis-xvid-codec\"></a> 4、Koepi’s XviD Codec</h5>\n<p>相比起前三种视频编码标准来说，Xvid推出市场的时间最迟。从其名字就知道这种标准是针对DivX而来的。原来，DivX由免费转为收费编码后，使部份原有开发人员不满，继而离开并组成一个新的开发小组，设计免费且开放源代码的XviD Codec。当前，Koepi和Nic的XviD都是比较活跃和最多人使用的版本，虽然两者在编译上有所不同，但实际做出的效果相差无几。Xivd与DivX一样，在编译后都是一个.AVI文件，播放时只要安装Xvid codec就能用Windows媒体播放器中播放。<br>\n官方网站：<a href=\"http://roeder.goe.net/~koepi\" target=\"_blank\" rel=\"noopener\">http://roeder.goe.net/~koepi</a></p>\n<h4 id=\"视频压缩基本概念\"><a class=\"markdownIt-Anchor\" href=\"#视频压缩基本概念\"></a> 视频压缩基本概念：</h4>\n<h5 id=\"一-有损和无损压缩\"><a class=\"markdownIt-Anchor\" href=\"#一-有损和无损压缩\"></a> 一、有损和无损压缩：</h5>\n<p>在视频压缩中有损（Lossy ）和无损（Lossless）的概念与静态图像中基本类似。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息，而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩，这样才能达到低数据率的目标。丢失的数据率与压缩比有关，压缩比越小，丢失的数据越多，解压缩后的效果一般越差。此外，某些有损压缩算法采用多次重复压缩的方式，这样还会引起额外的数据丢失。</p>\n<h5 id=\"二-帧内和帧间压缩\"><a class=\"markdownIt-Anchor\" href=\"#二-帧内和帧间压缩\"></a> 二、帧内和帧间压缩：</h5>\n<p>帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩时各个帧之间没有相互关系，所以压缩后的视频数据仍可以以帧为单位进行编辑。帧内压缩一般达不到很高的压缩。<br>\n采用帧间（Interframe）压缩是基于许多视频或动画的连续前后两帧具有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>\n<h5 id=\"三-对称和不对称编码\"><a class=\"markdownIt-Anchor\" href=\"#三-对称和不对称编码\"></a> 三、对称和不对称编码：</h5>\n<p>对称性（symmetric）是压缩编码的一个关键特征。对称意味着压缩和解压缩占用相同的计算处理能力和时间，对称算法适合于实时压缩和传送视频，如视频会议应用就以采用对称的压缩编码算法为好。而在电子出版和其它多媒体应用中，一般是把视频预先压缩处理好，尔后再播放，因此可以采用不对称（asymmetric）编码。不对称或非对称意味着压缩时需要花费大量的处理能力和时间，而解压缩时则能较好地实时回放，也即以不同的速度进行压缩和解压缩。一般地说，压缩一段视频的时间比回放（解压缩）该视频的时间要多得多。例如，压缩一段三分钟的视频片断可能需要10多分钟的时间，而该片断实时回放时间只有三分钟。</p>\n<h3 id=\"第三部分音频文件格式\"><a class=\"markdownIt-Anchor\" href=\"#第三部分音频文件格式\"></a> 第三部分：音频文件格式</h3>\n<p>一些音视频的参数含义:</p>\n<p><strong>声道</strong>：目前人们所使用的各种声场技术规范非常多，但最常见的几乎都来自三家公司，他们是Dolby（杜比）、HTX和DTS。声卡所支持的声道数是衡量声卡档次的重要指标之一，从单声道到最新的环绕立体声，下面一一详细介绍：</p>\n<p><strong>1.单声道</strong>：单声道是比较原始的声音复制形式，早期的声卡采用的比较普遍。当通过两个扬声器回放单声道信息的时候，我们可以明显感觉到声音是从两个音箱中间传递到我们耳朵里的。这种缺乏位置感的录制方式用现在的眼光看自然是很落后的，但在声卡刚刚起步时，已经是非常先进的技术了。</p>\n<p><strong>2.立体声</strong>：单声道缺乏对声音的位置定位，而立体声技术则彻底改变了这一状况。声音在录制过程中被分配到两个独立的声道，从而达到了很好的声音定位效果。这种技术在音乐欣赏中显得尤为有用，听众可以清晰地分辨出各种乐器来自的方向，从而使音乐更富想象力，更加接近于临场感受。立体声技术广泛运用于自Sound Blaster Pro以后的大量声卡，成为了影响深远的一个音频标准。时至今日，立体声依然是许多产品遵循的技术标准。</p>\n<p><strong>3.准立体声</strong>：准立体声声卡的基本概念就是：在录制声音的时候采用单声道，而放音有时是立体声，有时是单声道。采用这种技术的声卡也曾在市面上流行过一段时间，但现在已经销声匿迹了。</p>\n<p><strong>4.四声道环绕</strong>：人们的欲望是无止境的，立体声虽然满足了人们对左右声道位置感体验的要求，但是随着技术的进一步发展，大家逐渐发现双声道已经越来越不能满足我们的需求。由于PCI声卡的出现带来了许多新的技术，其中发展最为神速的当数三维音效。三维音效的主旨是为人们带来一个虚拟的声音环境，通过特殊的HRTF技术营造一个趋于真实的声场，从而获得更好的游戏听觉效果和声场定位。而要达到好的效果，仅仅依靠两个音箱是远远不够的，所以立体声技术在三维音效面前就显得捉襟见肘了，但四声道环绕音频技术则很好的解决了这一问题。四声道环绕规定了4个发音点：前左、前右，后左、后右，听众则被包围在这中间。同时还建议增加一个低音音箱，以加强对低频信号的回放处理(这也就是如今4.1声道音箱系统广泛流行的原因)。就整体效果而言，四声道系统可以为听众带来来自多个不同方向的声音环绕，可以获得身临各种不同环境的听觉感受，给用户以全新的体验。如今四声道技术已经广泛融入于各类中高档声卡的设计中，成为未来发展的主流趋势。</p>\n<p><strong>5. 5.1声道</strong> 5.1声道已广泛运用于各类传统影院和家庭影院中，一些比较知名的声音录制压缩格式，譬如杜比AC-3（Dolby Digital）、DTS等都是以5.1声音系统为技术蓝本的。其实5.1声音系统来源于4.1环绕，不同之处在于它增加了一个中置单元。这个中置单元负责传送低于80Hz的声音信号，在欣赏影片时有利于加强人声，把对话集中在整个声场的中部，以增加整体效果。相信每一个真正体验过Dolby AC-3音效的朋友都会为5.1声道所折服。千万不要以为5.1已经是环绕立体声的顶峰了，更强大的7.1系统已经出现了。它在5.1的基础上又增加了中左和中右两个发音点，以求达到更加完美的境界。由于成本比较高，没有广泛普及。</p>\n<h5 id=\"一wma\"><a class=\"markdownIt-Anchor\" href=\"#一wma\"></a> 一.WMA</h5>\n<p>WMA的全称是Windows Media Audio，是微软力推的一种音频格式。WMA格式是以减少数据流量但保持音质的方法来达到更高的压缩率目的，其压缩率一般可以达到1:18，生成的文件大小只有相应MP3文件的一半。此外，WMA还可以通过DRM（Digital Rights Management）方案加入防止拷贝，或者加入限制播放时间和播放次数，甚至是播放机器的限制，可有力地防止盗版。<br>\n优点<br>\nWMA 7之后的WMA支持证书加密，未经许可（即未获得许可证书），即使是非法拷贝到本地，也是无法收听的。同时，微软公司开始时宣称的：同文件比MP3体积小一倍而音质不变，也得到了兑现。事实上，这个说法，仅仅适用于低比特率的情况，另外，微软公司在WMA 9大幅改进了其引擎，实际上几乎可以在同文件同音质下比相同的MP3体积少1/3左右。<br>\n缺点<br>\n在高比率的渲染能力低下，同音源的一个320KBPS的MP3与比较192KBPS的WMA相比，音质和渲染力很容易分别出是前者较优。</p>\n<h5 id=\"二vqf\"><a class=\"markdownIt-Anchor\" href=\"#二vqf\"></a> 二.VQF</h5>\n<p>VQF即TwinVQ（Transform－domain Weighted Interleave Vector Quantization），是由NTT（Nippon Telegraph and Telephone）与Yamaha共同开发的一种音频压缩技术。VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。<br>\n但是VQF不支持&quot;流&quot;，这可能也是为什么现在它完全被WMA压下去的一个主要原因.</p>\n<h5 id=\"三mp3\"><a class=\"markdownIt-Anchor\" href=\"#三mp3\"></a> 三.MP3</h5>\n<p>MP3的全称是Moving Picture Experts Group Audio Layer III。简单的说，MP3就是一种音频压缩技术，由于这种压缩方式的全称叫MPEG Audio Layer3，所以人们把它简称为MP3。MP3是利用 MPEG Audio Layer 3 的技术，将音乐以1:10 甚至 1:12 的压缩率，压缩成容量较小的file，换句话说，能够在音质丢失很小的情况下把文件压缩到更小的程度。而且还非常好的保持了原来的音质。正是因为MP3体积小，音质高的特点使得MP3格式几乎成为网上音乐的代名词。每分钟音乐的MP3格式只有1MB左右大小，这样每首歌的大小只有3-4兆字节。使用MP3播放器对MP3文件进行实时的解压缩(解码)，这样，高品质的MP3音乐就播放出来了。　　<br>\nMP3最受争议的就是音质问题(尤其是随着WMA的普及)，其高频损失很大，很多MP3编码器粗糙的编码算法不但导致高频丢失，还丢失了许多细节，类似吉他擦弦的感觉在MP3中是找不到的.在对MP3快要失望时，偶发现了Lame,它支持根据人耳遮蔽效应原理来分析波形，配合VBR技术，可以让音质达到令人吃惊的地步; 其独创的心理音响模型技术保证了CD音频还原的真实性，配合VBR(动态比特率)和ABR(平均比特率)参数，编码出来的MP3音色纯厚、空间宽广、低音清晰、细节表现良好,音质几乎可以媲美CD音频，但文件体积却非常小.很多网友在使用LAME后的反映就是：立刻删除硬盘上所有的MP3和其他编码器，全部用Lame重新来过。Lame提供EXE 和 DLL，其中DLL是作为标准的动态运行库供其他程序调用.EXE是Command Line程序，象DOS程序一样工作，两者彼此独立，互不关联。但大家很快能发现两者编码的质量是不一样的,那是由于dll可控性差，与具备丰富调节参数的EXE版相比，其压缩出来的MP3效果稍逊一筹。但EXE是一个命令行工具，操作很麻烦，幸亏有了WinLAMEr或lameGUIxp这些Shell。只要学会使用这些Shell(是傻瓜型的,一看即会)，就可以用LAME压缩出最最精彩的MP3了。再说说APS, 在LAME出现以前，APS就是最好的MP3编码器，它使用的Fraunhofer IIS编码算法，这比LAME使用的编码算法要先进，在192k Bitrate(CBR)下，甚至比LAME编码的曲子要优秀，细节明显要丰富一些，但APS本身不支持VBR，当Bitrate往上提高时，音质就要比LAME编码的要差了，大部分朋友的MP3的一般都是128-192K Bitrate的，因此APS仍旧有推荐的价值。特别是有很多MP3随身听不支持VBR和256K Bitrate以上的MP3，LAME就不一定合适这些朋友了，APS就成了不错的选择，由它编码的曲子，绝对不会辱没你昂贵的PLAYER.</p>\n<h5 id=\"四mp3pro\"><a class=\"markdownIt-Anchor\" href=\"#四mp3pro\"></a> 四.MP3PRO</h5>\n<p>MP3PRO完全是基于传统MP3编码技术的一种改良，本身最大的技术亮点就在于SBR(Spectral Band Replication 频段复制),这是一种新的音频编码增强算法.它提供了改善低位率情况下音频和语音编码的性能的可能.这种方法可在指定的位率下增加音频的带宽或改善编码效率,SBR最大的优势就是在低数据速率下实现非常高效的编码.如果在高数据速率的情况下，SBR将如同虚设.当制作MP3PRO文件时，编码器将音频分为两部分。一部分是将音频数据中的低频段部分分离出来，通过传统的MP3技术而编码得出的正常的MP3音频流，此举可令到MP3编码器可以专注于低频段信号从而获得更好的压缩质量，而且原来的MP3播放器也可播放MP3PRO文件。另一部分则是将分离出来的高频段信号进行编码并嵌入到MP3流中，传统的MP3播放器会将其忽略掉，而新的MP3PRO播放器则可从中还原出高频信号，并将两者进行组合，得到高质量的全带宽的声音.官方宣称通过这样的技术，使得MP3PRO能在64kbps的编码率便可提供与128kbps的mp3相同的质量。低比特率下MP3PRO的性能很明显地比MP3要高,但是它与WMA谁胜谁负就很难说了,根据一些发烧友的评测, MP3PRO似乎略胜一些.高比特率下很少有人用到MP3PRO.</p>\n<h5 id=\"五ogg\"><a class=\"markdownIt-Anchor\" href=\"#五ogg\"></a> 五.OGG</h5>\n<p>OGG格式的全称应该是OGG Vobis。它是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。OGG Vobis有一个很出众的特点，就是支持多声道，随着它的流行，以后用随身听来听DTS编码的多声道作品将不会是梦想。OGG Vobis在压缩技术上比MP3好，而且它的多声道，免费，开源这些特点，使它很有可能成为一个流行的趋势，这也正是一些MP3播放器对其支持的原因<br>\n在高音质要求下,有损音频编码世界中是三足项立，分别为MP3、MPC、OGG。　<br>\nOgg Vorbis中的主要算法还是利用MDCT（修饰离散余弦变换Modified Discrete Cosine Transform ）而不是用现在比较时兴的小波（wavelet）技术。Ogg的多通道编码技术，统称为立体声通道耦合Stereo Channel Coupling。而该技术实际又是由两种不同的技术组成的：channel interleaving 和 square polar mapping，而这也是Ogg能成为免费制式的一个必要条件，以往的“联合立体声Joint Stereo”的编码模式是有专利限制的。据官方声称，与其他会造成立体空间感减弱的编码模型相比，这两种技术都可以在保持编码器的灵活性的同时而不损害本来的立体声空间影像――相信配合iRiver的3d音效会有更好的表现力，而且实现的复杂程度比联合立体声方式要低。<br>\n　　OGG Vorbis这种编码也远比90年×××发成功的MP3先进，它可以在相对较低的数据速率下实现比MP3更好的音质！――我认为Ogg很象MD的atrac格式，特别象新的lp2编码，它能在低别特率下有着很要的音质。此外，在编码上，Ogg Vorbis是使用了VBR（可变比特率）和ABR（平均比特率）方式进行编码，所以理论上，Ogg Vorbis带来的音乐可以比采用CBR文件有更好的声音表现，当然前提是两者使用同样比特率(Bit Rate)的压缩模式――这里可以知道。Ogg Vorbis的比特率缩放功能可以在不用重新编码的情况下调节文件的相关压缩率，与此同时，Ogg文件的单位编辑能力和超越左右声道的音频流技术可以带来更为奇妙的音乐享受。Vorbis还具有比特率缩放功能，可以不用重新编码便可调节文件的比特率。<br>\n　　Vorbis文件可以被分成小块并以样本粒度（granularity，专业术语，指数据可以被分割的最小尺寸）进行编辑；Vorbis支持多通道（大于2）音频流并使用了独创性的处理技术；这意味着什么？这意味着Ogg Vorbis在SACD、DTSCD、DVD AUDIO抓轨软件（目前这种软件还没有）的支持下，可以对所有的声道进行编码，而不是MP3只能编码2个声道。多声道音乐的兴起，给音乐欣赏带来了革命性的变化，尤其在欣赏交响时，会带来更多临场感。这场革命性的变化是MP3无法适应的。在以后的播放技术不断提高以后，而且人们对音质要求不断提高，Ogg的优势将更加明显。</p>\n<h5 id=\"六-mpc\"><a class=\"markdownIt-Anchor\" href=\"#六-mpc\"></a> 六. MPC</h5>\n<p>MusePaCk是由德国人Andree Buschmann开发的一种完全免费的高品质音频格式。在其问世之前，Lame MP3是公认音质最好的有损压缩方案，追求音质的人对它趋之若鹜。但现在这个桂冠无疑该让给MPC了，在中高码率下，MPC可以做到比MP3更好音质。在高码率下，MPC的高频要比MP3细腻不少，可以在节省大量空间的前提下获得最佳音质的音乐欣赏，是目前最适合用于音乐欣赏的有损编码。<br>\nMPC的编码方案是在MP2的基础上改进而来。它同样采用子带编码技术，但相比MP2，它所采用的心理声学模型要优秀得多，并加入了像ANS（Adaptive Noise Shaping）、CVD(ClearVoiceDetection)等技术，甚至改变了压缩时所用的Huffman（哈夫曼）编码，以得到更大的压缩率。另外，MPC采用的是可变码率进行编码。毫无疑问，可变码率的编码效率要高于固定码率，因为前者可以合理地分配数据量，在信号复杂（微弱）时提高（降低）比特率，在得到满意的效果又能确保不错的压缩率。为了保证高音质，MPC的瞬间最大码率甚至高达1.32Mbps，这已经快接近CD的1.41Mbps了<br>\n较高比特率下(250kbps左右),MPC表现非常的出众,甚至超过了MP3，很难分辨它和原始信号有多少区别，无论从频率保留还是细节保留，以及信号强度失真来说，MPC太优秀了. 但MPC并非万能的，它无法编码48khz采样率的曲子，所幸的是，这样的曲子来源很少.可惜这种格式并没有像MP3或WMA那样流行.</p>\n<h5 id=\"七atrac\"><a class=\"markdownIt-Anchor\" href=\"#七atrac\"></a> 七.ATRAC</h5>\n<p>ATRAC（Adaptive TRansform Acoustic Coding自适应声学转换编码技术）：是Sony的原创音乐压缩技术，主要用于MD Walkman的录音及播放方面。是一项基于听觉心理学领域的研究和不损伤可闻声质量的数码音频译码压缩技术，对音乐资讯有效的进行压缩，压缩的比率为原来的五分之一，因为MD使用了ATRAC压缩技术，这样的压缩大大节省了许多空间，所以 CD的碟片要120mm大小，而MD只需64mm就可以录下74分钟的音乐。<br>\nATRAC压缩技术主要是利用了人耳的蔽遮效应，在心理声学原理上，在进行音频录入的同时，有许多外部的频段同时也会被录入，当人耳同时听到两个不同频率、不同音量的声音时，音量较小的低频及音量较小的高频连同不为人耳所察觉的频段信号都会被自动减弱或忽略不予记录，因此又可以称为适应性变换声码技术，由于近年來编码压缩技术（ATRAC的版本）越來越成熟，所以经过编码解码过程后的声音仍直逼CD，大家就不必担心音质差啦。<br>\nATRAC将16比特44.1KHz的数字信号以频率响应轴分成52个区段（在低频时分割较细而在高频时分割较粗），根据声音心理学的原理，将声音信号中人耳听不到和对人的听力影响不大的信息给剔除出去而达到缩小声音文件的目的。利用这种原理，ATRAC可以将录音的资料量压缩为原来的五分之一（即压缩比为1：5）。<br>\n.</p>\n<h5 id=\"八-ape\"><a class=\"markdownIt-Anchor\" href=\"#八-ape\"></a> 八. APE</h5>\n<p>APE的本质，其实它是一种无损压缩音频格式。庞大的WAV音频文件可以通过Monkey’‘s Audio这个软件进行“瘦身”压缩为 APE。很时候它被用做网络音频文件传输，因为被压缩后的APE文件容量要比WAV源文件小一半多，可以节约传输所用的时间。更重要的是，通过 Monkey’‘s Audio解压缩还原以后得到的WAV文件可以做到与压缩前的源文件完全一致。所以APE被誉为“无损音频压缩格式”， Monkey’‘s Audio被誉为“无损音频压缩软件”。与采用WinZip或者WinRAR这类专业数据压缩软件来压缩音频文件不同，压缩之后的 APE音频文件是可以直接被播放的。 Monkey’'s Audio会向Winamp中安装一个“in_APE.dll”插件，从而使Winamp也具备播放APE文件的能力。<br>\n和上面介绍的几款编码不同的是，这个编码提供了最好的音质保证(无损压缩)！还提供了 Winamp的插件支持,可以直接用Winamp来播放.所谓无损就是指压缩后的格式和源文件在音质上并无差异，而Mp3、WMA等的编码方案是基于有损的，在损失部分音质的前提下节约存贮空间，所以说音质再好的Mp3、WMA也只能是无限接近源文件的音质。APE非常适合来编码讲究细节的独奏曲目和大动态的交响曲。向各位音乐迷们(不是歌迷)作最强烈的推荐！它的压缩比约为2:1.</p>\n<h5 id=\"九-wav\"><a class=\"markdownIt-Anchor\" href=\"#九-wav\"></a> 九. WAV</h5>\n<p>WAV是录音时用的标准的windows文件格式，文件的扩展名为“ .wav”，WAVE文件作为最经典的Windows多媒体音频格式，应用非常广泛。声道有单声道和立体声之分，采样频率一般有11kHz、22kHz和44kHz三种。<br>\nWAVE文件所占容量=（采样频率×采样位数×声道）×时间/8（1字节=8bit）。<br>\n　　WAV文件与MIDIMP3这类多媒体声音文件比较起来，所占的硬盘空间要大得多，但WAV文件的回放效果是最好的，WAV文件直接反映了一个声音在每个时刻的大小值，1分钟 44khz 采样率的WAV文件就会占用10M硬盘空间！<br>\n它通常作为制作高质量音乐的中间体</p>\n<h5 id=\"十rm\"><a class=\"markdownIt-Anchor\" href=\"#十rm\"></a> 十.RM</h5>\n<p>Real Networks公司所制定的音频视频压缩规范称为Real Media，用户可以使用RealPlayer或RealOne Player对符合RealMedia技术规范的网络音频/视频资源进行实况转播并且RealMedia可以根据不同的网络传输速率制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放。这种格式的另一个特点是用户使用RealPlayer或RealOne Player播放器可以在不下载音频/视频内容的条件下实现在线播放。另外，RM作为目前主流网络视频格式，它还可以通过其Real Server服务器将其它格式的视频转换成RM视频并由Real Server服务器负责对外发布和播放。RM和ASF格式可以说各有千秋，通常RM视频更柔和一些，而ASF视频则相对清晰一些。<br>\nRM格式一开始就定位在视频流应用方面，也可以说是视频流技术的始创者。它可以在用56 K Modem拨号上网的条件下实现不间断的视频播放，当然，其图像质量和MPEG2，DIVX等相比有一定差距，毕竟要实现在网上传输不间断的视频是需要很大带宽的。<br>\nRM已经是昨日黄花，没有任何新意，低Bitrate比不过WMA，高Bitrate比不过MP3，虽然新的RM导入了ATRAC3算法，但颓势已定，很难东山再起了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cknpirxei0008sifycbtslosx","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxen000fsifyw106l9hx"},{"post_id":"cknpirxea0001sifylgmb7d0z","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxeo000jsifye2biktx6"},{"post_id":"cknpirxej0009sifysr023nxt","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxep000lsifyiqehnpmb"},{"post_id":"cknpirxem000dsifyvahbe7rd","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxer000psify7n0jeajl"},{"post_id":"cknpirxee0003sifymfpq3foe","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxes000ssify2am67l47"},{"post_id":"cknpirxen000esifyutmh17r4","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxet000xsifysu7eco2e"},{"post_id":"cknpirxeh0007sifyc48tnq6t","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxet0010sifyuftftlty"},{"post_id":"cknpirxeo000isify8okpshop","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxeu0015sifyb5svpnh3"},{"post_id":"cknpirxes000vsifyfus6r6up","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxev0017sifyw7jhv5ha"},{"post_id":"cknpirxet000zsifyxqaqjajg","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxew001bsify7we9bnn9"},{"post_id":"cknpirxep000ksifymoy4d27l","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxew001esifyzu0vtiu9"},{"post_id":"cknpirxeu0013sifyue8rfulv","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxex001hsifyqdgz9c8q"},{"post_id":"cknpirxeq000osify0mxeqs6r","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxey001msifyvrvt9agl"},{"post_id":"cknpirxev0016sify3u9xpu8b","category_id":"cknpirxex001jsifykl84hmo2","_id":"cknpirxf2001tsifycugtwq39"},{"post_id":"cknpirxf0001qsifyie397hj3","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxf3001zsifyvlbqab4r"},{"post_id":"cknpirxev0019sifyq5rjwwl5","category_id":"cknpirxf0001psifyocnvgpjn","_id":"cknpirxf40023sifykcdhhbvr"},{"post_id":"cknpirxf2001wsifytli363k9","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxf60027sify5z2m12yt"},{"post_id":"cknpirxew001dsifyggqg6ln7","category_id":"cknpirxf2001vsifyl6u8b1x3","_id":"cknpirxf6002asifylfbve2xm"},{"post_id":"cknpirxer000rsify0p6dzvdq","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxf9002hsifyn2oulqk4"},{"post_id":"cknpirxer000rsify0p6dzvdq","category_id":"cknpirxf50024sifydud441qr","_id":"cknpirxfa002ksifypgmk7ob4"},{"post_id":"cknpirxex001gsifygas47y7c","category_id":"cknpirxf0001psifyocnvgpjn","_id":"cknpirxfb002nsifyknc7nx6l"},{"post_id":"cknpirxf8002fsifyrc7fnuq8","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfb002qsifyykc77u76"},{"post_id":"cknpirxf9002jsifyws1bc285","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfc002ssify7sx6i4e9"},{"post_id":"cknpirxex001lsifyk9opad4r","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxfd002wsifyrj0g8j7r"},{"post_id":"cknpirxfa002lsifyo1h194p7","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfe002ysifyn89mqztk"},{"post_id":"cknpirxey001nsifyv11qbzfd","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxff0032sifytu1vf1ij"},{"post_id":"cknpirxfc002rsifykoi7t1lf","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfg0034sifyl9f7wegt"},{"post_id":"cknpirxf1001ssify98huvgnk","category_id":"cknpirxfc002usifywy1di4uu","_id":"cknpirxfh0038sifye3g7x0ta"},{"post_id":"cknpirxfd002xsifycyyfmnpo","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxfi003bsifyna6ywnda"},{"post_id":"cknpirxfe0031sify4935iduf","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfj003gsifyow6sspai"},{"post_id":"cknpirxf3001ysifylue7cjun","category_id":"cknpirxfe0030sifyydfyrgky","_id":"cknpirxfj003jsifyh44bs35w"},{"post_id":"cknpirxf40022sifyi4sl2q4q","category_id":"cknpirxfc002usifywy1di4uu","_id":"cknpirxfk003osify64os2wmt"},{"post_id":"cknpirxfi003esifyqarfnv23","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxfl003rsifyiz9zmn7j"},{"post_id":"cknpirxfj003isifymcm3v45l","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxfm003vsify11vdroey"},{"post_id":"cknpirxf50026sify4pfg8r1v","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfm003xsifyjtx22xgl"},{"post_id":"cknpirxfk003qsifyccmp8mje","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxfn0040sify4c9whc2t"},{"post_id":"cknpirxf60029sify0cqqyhds","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfo0044sifymg3l6jbx"},{"post_id":"cknpirxfm003wsifye8hv318z","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfp0048sifydp3i4mqz"},{"post_id":"cknpirxf7002dsifytf4pxstt","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfp004csify6cvvep8h"},{"post_id":"cknpirxfb002psifyscd7d69f","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfq004esifys6c9syu6"},{"post_id":"cknpirxfd002vsifyd7pzfrg6","category_id":"cknpirxfp0047sifysx09yqfh","_id":"cknpirxfs004lsifysl79f0cy"},{"post_id":"cknpirxfr004hsifyxfubf71r","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxft004qsify2puvnt8e"},{"post_id":"cknpirxff0033sify5xkiew4h","category_id":"cknpirxfq004fsifyba9ob691","_id":"cknpirxfu004usifydq0ptu1i"},{"post_id":"cknpirxfs004jsifyz9e2j2e4","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfv004xsifynbgqy0f8"},{"post_id":"cknpirxfg0036sifyfygb8qip","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxfw0050sify29bs6sdy"},{"post_id":"cknpirxfu004tsifyqbfqow22","category_id":"cknpirxew001asifyqza37uk6","_id":"cknpirxfy0055sifyniuw81nm"},{"post_id":"cknpirxfv004wsifyw09ewd2r","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxfz0057sify27qt1wgm"},{"post_id":"cknpirxfh003asifyh1ps8ru5","category_id":"cknpirxfu004rsifyvrafq8fh","_id":"cknpirxg0005bsifyrv4c8btf"},{"post_id":"cknpirxfv004zsifyr07tegi5","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxg1005dsify1v80v278"},{"post_id":"cknpirxfj003msifydu117i5g","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxg2005hsifyox6izbqg"},{"post_id":"cknpirxfy0056sifyj6jwdpi4","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxg3005ksify61wzp137"},{"post_id":"cknpirxfz005asify429mi0r9","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxg4005psifye4git470"},{"post_id":"cknpirxfl003ssify5armhsyh","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxg5005ssifysn1dhciz"},{"post_id":"cknpirxg2005gsifyfypmnvzu","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxg8005vsify01zvi0pm"},{"post_id":"cknpirxfn003ysifyed4t2n4w","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxg9005zsifyuzi4arvf"},{"post_id":"cknpirxg2005jsifyiu8kde36","category_id":"cknpirxfc002usifywy1di4uu","_id":"cknpirxga0063sifybq3kixim"},{"post_id":"cknpirxg3005osifyvr8c9ik1","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxgb0067sifym4t5ruj8"},{"post_id":"cknpirxfo0042sifyu6dt1d50","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxgb006asifyj0ferm9a"},{"post_id":"cknpirxg5005rsifythturg5r","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxgc006esifyq2p45dsu"},{"post_id":"cknpirxg8005usifywci5xofg","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxgd006isify7vshtkfg"},{"post_id":"cknpirxfo0045sifyyh9xv3u1","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxge006msify9itrx9os"},{"post_id":"cknpirxg9005ysifyuseabaxq","category_id":"cknpirxfq004fsifyba9ob691","_id":"cknpirxge006psifyrms0o7a7"},{"post_id":"cknpirxga0062sifyl74x9b2d","category_id":"cknpirxfc002usifywy1di4uu","_id":"cknpirxgf006ssifyem1i9duk"},{"post_id":"cknpirxfp004asify1tqqqsi4","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxgf006vsify2o0g1nqt"},{"post_id":"cknpirxga0066sifyq899vfmz","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxgf006ysify7xngwdly"},{"post_id":"cknpirxfp004dsify3vp6440p","category_id":"cknpirxfu004rsifyvrafq8fh","_id":"cknpirxgf0071sifyaaw4nm8a"},{"post_id":"cknpirxgc006dsifynfr2md24","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxgf0073sifyxgpga4kd"},{"post_id":"cknpirxfs004osifyesuvhryx","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxgg0075sifyjc0sppua"},{"post_id":"cknpirxgd006lsifyplqlhkwd","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxgg0078sify5urunm0p"},{"post_id":"cknpirxge006osifyxuy1erzm","category_id":"cknpirxf9002gsifyvx264mgt","_id":"cknpirxgg007bsifyqqqybkk0"},{"post_id":"cknpirxft004psify2usoqjpl","category_id":"cknpirxge006nsifyeutr1cgh","_id":"cknpirxgg007dsifyyvxcosz5"},{"post_id":"cknpirxfx0054sifyqqq0scp9","category_id":"cknpirxgf006tsify4u4st6sp","_id":"cknpirxgh007gsifyq6zqfij7"},{"post_id":"cknpirxg0005csifyl3231qw1","category_id":"cknpirxgf0070sify8dsxknto","_id":"cknpirxgh007isifyqme4hcun"},{"post_id":"cknpirxgb0069sify86l3325q","category_id":"cknpirxgg0076sifym4ickwzi","_id":"cknpirxgh007lsifywzl4b5oc"},{"post_id":"cknpirxgd006hsifyals6ukwg","category_id":"cknpirxgg007csify2lcfoz0c","_id":"cknpirxgh007nsifys94cxfis"},{"post_id":"cknpirxhv00bhsifyfcsy3w3k","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxi100bosifyi0ezxemy"},{"post_id":"cknpirxhy00bisifykff8di94","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxi300bqsifyctttj11f"},{"post_id":"cknpirxi000bksifykyjr1ov4","category_id":"cknpirxf0001psifyocnvgpjn","_id":"cknpirxi400busify7r6y9h97"},{"post_id":"cknpirxi200bpsifyyjz2t3mj","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxi600bzsifyiq8ep8ub"},{"post_id":"cknpirxi400bssifyk0o0md3j","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxi700c3sifyk8ekzvpb"},{"post_id":"cknpirxi500bwsify73x9wmno","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxi800c6sify4798msi3"},{"post_id":"cknpirxi100bnsifymw12dj3q","category_id":"cknpirxi300brsifyrk9dm2nt","_id":"cknpirxi900cbsifyjjkbgj1f"},{"post_id":"cknpirxi600bysify0udtw1bo","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxia00cesifyx8v0xma8"},{"post_id":"cknpirxi800c5sifyktvdsb09","category_id":"cknpirxeg0004sifyo7b2b2su","_id":"cknpirxia00cisifymzouhc67"},{"post_id":"cknpirxi900casifysb2vip90","category_id":"cknpirxfi003fsifyhqxdcj6l","_id":"cknpirxic00clsifyhdol7puf"},{"post_id":"cknpirxi900cdsifyuhbwzz7n","category_id":"cknpirxfw0051sifyzk0odc1n","_id":"cknpirxic00cosifyl4oz7sp5"},{"post_id":"cknpirxi700c2sifykr1jjff5","category_id":"cknpirxi900c8sifyplunw3tw","_id":"cknpirxic00cqsifydpkokhr4"},{"post_id":"cknpirxia00chsifyn8ee7d4e","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxic00cssify3av3mirl"},{"post_id":"cknpirxib00cksifygvj6qx9q","category_id":"cknpirxgg007csify2lcfoz0c","_id":"cknpirxid00cvsifyvfztw47m"},{"post_id":"cknpirxij00dbsifyhbiyn581","category_id":"cknpirxgf006tsify4u4st6sp","_id":"cknpirxik00ddsify4kwe36o4"},{"post_id":"cknpirxjd00disify15d1ecuv","category_id":"cknpirxeq000nsifyf4fgiqpt","_id":"cknpirxje00dksify91vvp548"},{"post_id":"cknpirxjo00dmsify19a7z2fz","category_id":"cknpirxgg007csify2lcfoz0c","_id":"cknpirxjo00dosify3m7uv15y"}],"PostTag":[{"post_id":"cknpirxei0008sifycbtslosx","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxel000csifydasf1jei"},{"post_id":"cknpirxea0001sifylgmb7d0z","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxer000qsifyb0qj06u3"},{"post_id":"cknpirxea0001sifylgmb7d0z","tag_id":"cknpirxek000bsify1ep73hbm","_id":"cknpirxes000tsifyvr7ehhzd"},{"post_id":"cknpirxea0001sifylgmb7d0z","tag_id":"cknpirxeo000hsify1aioorg7","_id":"cknpirxet000ysifyg881xnl5"},{"post_id":"cknpirxee0003sifymfpq3foe","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxet0011sifypna244m6"},{"post_id":"cknpirxeh0007sifyc48tnq6t","tag_id":"cknpirxes000usifyelgf7lw9","_id":"cknpirxew001csifyqi8xsmw6"},{"post_id":"cknpirxeh0007sifyc48tnq6t","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxex001fsifyqwila1gp"},{"post_id":"cknpirxej0009sifysr023nxt","tag_id":"cknpirxev0018sify6d814lf3","_id":"cknpirxex001ksifyj2q7xyb0"},{"post_id":"cknpirxem000dsifyvahbe7rd","tag_id":"cknpirxex001isify29w8mypr","_id":"cknpirxf1001rsifywsjfb0l9"},{"post_id":"cknpirxen000esifyutmh17r4","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxf3001xsify2ccpyuvn"},{"post_id":"cknpirxen000esifyutmh17r4","tag_id":"cknpirxf0001osifyd3ulzbgy","_id":"cknpirxf30020sifygn6p595i"},{"post_id":"cknpirxeo000isify8okpshop","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxf50025sifydi69f9v8"},{"post_id":"cknpirxep000ksifymoy4d27l","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxf7002csifyx9b3glpm"},{"post_id":"cknpirxeq000osify0mxeqs6r","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxf9002isify4hvwh4cw"},{"post_id":"cknpirxer000rsify0p6dzvdq","tag_id":"cknpirxf8002esifyuo4fymsx","_id":"cknpirxfh0039sify3fn5kvd5"},{"post_id":"cknpirxer000rsify0p6dzvdq","tag_id":"cknpirxfa002msifyr2667cy6","_id":"cknpirxfi003csifyny0s4xt0"},{"post_id":"cknpirxer000rsify0p6dzvdq","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxfj003hsifyd109crsf"},{"post_id":"cknpirxer000rsify0p6dzvdq","tag_id":"cknpirxfe002zsifym68xwhi6","_id":"cknpirxfj003ksify6i81atkm"},{"post_id":"cknpirxes000vsifyfus6r6up","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxfk003psify3fywq3wv"},{"post_id":"cknpirxet000zsifyxqaqjajg","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxfo0043sifyhz8f8hd5"},{"post_id":"cknpirxet000zsifyxqaqjajg","tag_id":"cknpirxfj003lsifyf3xnc26q","_id":"cknpirxfp0046sifyanvxlo5i"},{"post_id":"cknpirxet000zsifyxqaqjajg","tag_id":"cknpirxfm003tsify96r8cldp","_id":"cknpirxfp004bsifyul1ll99x"},{"post_id":"cknpirxeu0013sifyue8rfulv","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxfr004isify3x7qyncm"},{"post_id":"cknpirxeu0013sifyue8rfulv","tag_id":"cknpirxfp0049sifyq27dp9y0","_id":"cknpirxfs004ksifyx0fw3sz2"},{"post_id":"cknpirxev0016sify3u9xpu8b","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxfv004vsifyuoh1b83x"},{"post_id":"cknpirxev0016sify3u9xpu8b","tag_id":"cknpirxfs004msifynp8qu0oc","_id":"cknpirxfv004ysifyrmqmjo58"},{"post_id":"cknpirxfu004tsifyqbfqow22","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxfx0053sifynji2zygz"},{"post_id":"cknpirxev0019sifyq5rjwwl5","tag_id":"cknpirxfu004ssifylt40qnb1","_id":"cknpirxg2005isify6gdg29o8"},{"post_id":"cknpirxev0019sifyq5rjwwl5","tag_id":"cknpirxfw0052sifyp2r2zzhl","_id":"cknpirxg3005msifyxybp1gm0"},{"post_id":"cknpirxev0019sifyq5rjwwl5","tag_id":"cknpirxfz0059sify2y58kbh1","_id":"cknpirxg5005qsifyyi97dhp1"},{"post_id":"cknpirxew001dsifyggqg6ln7","tag_id":"cknpirxg2005fsifyl913njao","_id":"cknpirxg9005xsifyi2aimal5"},{"post_id":"cknpirxew001dsifyggqg6ln7","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxga0061sifytibw86at"},{"post_id":"cknpirxew001dsifyggqg6ln7","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxga0065sifye4kwrnf8"},{"post_id":"cknpirxga0066sifyq899vfmz","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxgc006csifydrjo5622"},{"post_id":"cknpirxex001gsifygas47y7c","tag_id":"cknpirxfz0059sify2y58kbh1","_id":"cknpirxgc006gsifykmddhh78"},{"post_id":"cknpirxex001gsifygas47y7c","tag_id":"cknpirxga0064sifywh41jrha","_id":"cknpirxgd006ksify7khmt602"},{"post_id":"cknpirxgd006lsifyplqlhkwd","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxge006rsifyylfupk3s"},{"post_id":"cknpirxex001lsifyk9opad4r","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgf006usify6drq4daz"},{"post_id":"cknpirxex001lsifyk9opad4r","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgf006xsifyk6qnhan3"},{"post_id":"cknpirxey001nsifyv11qbzfd","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgf006zsifyjcsl80qb"},{"post_id":"cknpirxf0001qsifyie397hj3","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxgg0074sifyz448jdmb"},{"post_id":"cknpirxf0001qsifyie397hj3","tag_id":"cknpirxev0018sify6d814lf3","_id":"cknpirxgg0077sifyzsc3mlmq"},{"post_id":"cknpirxf0001qsifyie397hj3","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxgg007asifyprclji1x"},{"post_id":"cknpirxf1001ssify98huvgnk","tag_id":"cknpirxgf0072sifyw7nupy2h","_id":"cknpirxgh007fsify0z8fy194"},{"post_id":"cknpirxf1001ssify98huvgnk","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxgh007hsifylstj80ac"},{"post_id":"cknpirxf2001wsifytli363k9","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxgh007ksify8bvvv3er"},{"post_id":"cknpirxf2001wsifytli363k9","tag_id":"cknpirxev0018sify6d814lf3","_id":"cknpirxgh007msifyfq80k55k"},{"post_id":"cknpirxf2001wsifytli363k9","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxgh007psify7vt7m6jg"},{"post_id":"cknpirxf3001ysifylue7cjun","tag_id":"cknpirxgh007jsify72ffi4uq","_id":"cknpirxgh007qsifygwiiazeu"},{"post_id":"cknpirxf40022sifyi4sl2q4q","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxgi007usifygr3jpfqc"},{"post_id":"cknpirxf40022sifyi4sl2q4q","tag_id":"cknpirxgh007rsify0bvskyjr","_id":"cknpirxgi007vsify1209281u"},{"post_id":"cknpirxf40022sifyi4sl2q4q","tag_id":"cknpirxgh007ssifyagfyaomx","_id":"cknpirxgi007xsifyiktnpyqg"},{"post_id":"cknpirxf50026sify4pfg8r1v","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgi007ysify6w9rh537"},{"post_id":"cknpirxf60029sify0cqqyhds","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgj0080sifyn05qahq3"},{"post_id":"cknpirxf7002dsifytf4pxstt","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgj0083sifyvhpeij54"},{"post_id":"cknpirxf7002dsifytf4pxstt","tag_id":"cknpirxgj0081sifyn3vl31vu","_id":"cknpirxgj0084sify498nzyhx"},{"post_id":"cknpirxf8002fsifyrc7fnuq8","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxgj0086sifynjg2qhhc"},{"post_id":"cknpirxf9002jsifyws1bc285","tag_id":"cknpirxgj0085sifycwslk0vq","_id":"cknpirxgk008asifybpm4n616"},{"post_id":"cknpirxf9002jsifyws1bc285","tag_id":"cknpirxgj0087sifyjxvaij5z","_id":"cknpirxgk008bsifyydjg1anv"},{"post_id":"cknpirxf9002jsifyws1bc285","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxgk008dsifybbnji3uh"},{"post_id":"cknpirxfa002lsifyo1h194p7","tag_id":"cknpirxfc002tsify0q6okcga","_id":"cknpirxgk008gsifym6scntmh"},{"post_id":"cknpirxfa002lsifyo1h194p7","tag_id":"cknpirxgk008csify8g7ylqgb","_id":"cknpirxgk008hsifyaitlqxjw"},{"post_id":"cknpirxfa002lsifyo1h194p7","tag_id":"cknpirxgk008esifywerj01ff","_id":"cknpirxgl008jsifyiguonygp"},{"post_id":"cknpirxfb002psifyscd7d69f","tag_id":"cknpirxgk008fsify2aq4ct7q","_id":"cknpirxgl008lsifyi6sqt9es"},{"post_id":"cknpirxfb002psifyscd7d69f","tag_id":"cknpirxfz0059sify2y58kbh1","_id":"cknpirxgl008msify5fr9olqw"},{"post_id":"cknpirxfc002rsifykoi7t1lf","tag_id":"cknpirxgl008ksifyz1s3o3uy","_id":"cknpirxgl008osify4ht23s3i"},{"post_id":"cknpirxfd002vsifyd7pzfrg6","tag_id":"cknpirxgl008nsifyig0uu7k1","_id":"cknpirxgm008rsifyp2zmemb9"},{"post_id":"cknpirxfd002vsifyd7pzfrg6","tag_id":"cknpirxgl008psifygpj2rnnk","_id":"cknpirxgm008ssifyytbfhm43"},{"post_id":"cknpirxfd002xsifycyyfmnpo","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxgm008usifybf6vx6yz"},{"post_id":"cknpirxfd002xsifycyyfmnpo","tag_id":"cknpirxgm008qsifylrsylft7","_id":"cknpirxgm008vsifydlbnidbs"},{"post_id":"cknpirxfe0031sify4935iduf","tag_id":"cknpirxgm008tsify5jd3cjc6","_id":"cknpirxgn008xsifyc9748j1i"},{"post_id":"cknpirxff0033sify5xkiew4h","tag_id":"cknpirxgn008wsifyi7m7mmjp","_id":"cknpirxgn008zsify56fxh5w7"},{"post_id":"cknpirxfg0036sifyfygb8qip","tag_id":"cknpirxgn008ysifyuvfmdz8s","_id":"cknpirxgn0091sifye98h1rlu"},{"post_id":"cknpirxfh003asifyh1ps8ru5","tag_id":"cknpirxgn0090sifypmjnyfmz","_id":"cknpirxgo0093sifymkmzu7rf"},{"post_id":"cknpirxfh003asifyh1ps8ru5","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxgo0094sifyb8bsg3uk"},{"post_id":"cknpirxfi003esifyqarfnv23","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgp0096sifyih0er18m"},{"post_id":"cknpirxfj003isifymcm3v45l","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgp0098sify62s0995j"},{"post_id":"cknpirxfj003msifydu117i5g","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgp009asifycxg0fbtd"},{"post_id":"cknpirxfk003qsifyccmp8mje","tag_id":"cknpirxgp0099sifywbhpdtpp","_id":"cknpirxgp009csifygkzghhbp"},{"post_id":"cknpirxfl003ssify5armhsyh","tag_id":"cknpirxgp009bsifyrlpx3du9","_id":"cknpirxgq009esifyi5fld1i3"},{"post_id":"cknpirxfm003wsifye8hv318z","tag_id":"cknpirxgq009dsifyga2yrkwq","_id":"cknpirxgq009gsify4mmda6a9"},{"post_id":"cknpirxfn003ysifyed4t2n4w","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgr009isify1gvu2cvl"},{"post_id":"cknpirxfo0042sifyu6dt1d50","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgs009ksifyddj2d32w"},{"post_id":"cknpirxfo0045sifyyh9xv3u1","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgs009msifyuji5uya3"},{"post_id":"cknpirxfp004asify1tqqqsi4","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgs009osifyhix6n1vw"},{"post_id":"cknpirxfp004dsify3vp6440p","tag_id":"cknpirxgn0090sifypmjnyfmz","_id":"cknpirxgt009qsifygeq2efno"},{"post_id":"cknpirxfp004dsify3vp6440p","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxgt009rsify6ae3dkff"},{"post_id":"cknpirxfr004hsifyxfubf71r","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgt009usify6bj8k6kr"},{"post_id":"cknpirxfr004hsifyxfubf71r","tag_id":"cknpirxgt009ssifylqff3usp","_id":"cknpirxgt009vsifyw059bfsj"},{"post_id":"cknpirxfs004jsifyz9e2j2e4","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgt009xsify6060gvm4"},{"post_id":"cknpirxfs004osifyesuvhryx","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxgu009zsifybtgpbyw6"},{"post_id":"cknpirxft004psify2usoqjpl","tag_id":"cknpirxgu009ysifymi9pdboh","_id":"cknpirxgv00a2sifyw1qwqj6p"},{"post_id":"cknpirxft004psify2usoqjpl","tag_id":"cknpirxgu00a0sifyp4ztdahm","_id":"cknpirxgv00a3sifycyndhiws"},{"post_id":"cknpirxfv004wsifyw09ewd2r","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgv00a6sifyydg1js7b"},{"post_id":"cknpirxfv004wsifyw09ewd2r","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgv00a7sifyshxbj2uu"},{"post_id":"cknpirxfv004zsifyr07tegi5","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgw00aasify64lkstlr"},{"post_id":"cknpirxfv004zsifyr07tegi5","tag_id":"cknpirxgv00a8sifyb8f364ld","_id":"cknpirxgw00absifybmlysc1q"},{"post_id":"cknpirxfx0054sifyqqq0scp9","tag_id":"cknpirxgv00a9sify0tglrjxx","_id":"cknpirxgw00adsifyj9ioz60m"},{"post_id":"cknpirxfy0056sifyj6jwdpi4","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgx00agsify8ynxwhrg"},{"post_id":"cknpirxfy0056sifyj6jwdpi4","tag_id":"cknpirxgw00aesifykrxu1rgx","_id":"cknpirxgx00ahsifyl8ws9u77"},{"post_id":"cknpirxfz005asify429mi0r9","tag_id":"cknpirxgx00afsifydrf68usw","_id":"cknpirxgx00ajsifyjw9fli9x"},{"post_id":"cknpirxg0005csifyl3231qw1","tag_id":"cknpirxgx00aisifytlgz0shv","_id":"cknpirxgx00amsifyh7e0m3hz"},{"post_id":"cknpirxg0005csifyl3231qw1","tag_id":"cknpirxgx00aksify055zx1i2","_id":"cknpirxgx00ansifymmmeqlc1"},{"post_id":"cknpirxg2005gsifyfypmnvzu","tag_id":"cknpirxgx00alsifyuy6yqopm","_id":"cknpirxgy00aqsifylry0ja9u"},{"post_id":"cknpirxg2005gsifyfypmnvzu","tag_id":"cknpirxgx00aosifyqthytyjg","_id":"cknpirxgy00arsifytm3d6oqe"},{"post_id":"cknpirxg2005jsifyiu8kde36","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxgy00atsifyqim9f0up"},{"post_id":"cknpirxg3005osifyvr8c9ik1","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgy00avsifyxk6bgrnp"},{"post_id":"cknpirxg5005rsifythturg5r","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxgz00axsify6mq1f1sf"},{"post_id":"cknpirxg5005rsifythturg5r","tag_id":"cknpirxgy00ausifyvtk472jn","_id":"cknpirxgz00aysify4cxu47a0"},{"post_id":"cknpirxg8005usifywci5xofg","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxgz00b0sifyhjuj8bc2"},{"post_id":"cknpirxg8005usifywci5xofg","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxgz00b1sifyb032tmfm"},{"post_id":"cknpirxg9005ysifyuseabaxq","tag_id":"cknpirxgn008wsifyi7m7mmjp","_id":"cknpirxgz00b3sifyufncwp8y"},{"post_id":"cknpirxga0062sifyl74x9b2d","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxh000b5sify4x811j6o"},{"post_id":"cknpirxgb0069sify86l3325q","tag_id":"cknpirxgz00b4sify8sedphha","_id":"cknpirxh000b7sify5ha0xaoj"},{"post_id":"cknpirxgc006dsifynfr2md24","tag_id":"cknpirxh000b6sifydwwcmx9h","_id":"cknpirxh000b9sifyyn88j26w"},{"post_id":"cknpirxgc006dsifynfr2md24","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxh000basifyeyts1i2u"},{"post_id":"cknpirxgd006hsifyals6ukwg","tag_id":"cknpirxh000b8sify3qguchl2","_id":"cknpirxh000bdsifynepsls3k"},{"post_id":"cknpirxgd006hsifyals6ukwg","tag_id":"cknpirxh000bbsifyjf9okcgy","_id":"cknpirxh000besifyv7q1q72g"},{"post_id":"cknpirxge006osifyxuy1erzm","tag_id":"cknpirxh000bcsifyinvu1pvo","_id":"cknpirxh000bfsifyj6zkuf1s"},{"post_id":"cknpirxge006osifyxuy1erzm","tag_id":"cknpirxgc006bsifyog36op59","_id":"cknpirxh000bgsifyijxiden6"},{"post_id":"cknpirxhv00bhsifyfcsy3w3k","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxhz00bjsifydo4s0mxz"},{"post_id":"cknpirxhv00bhsifyfcsy3w3k","tag_id":"cknpirxes000usifyelgf7lw9","_id":"cknpirxi100bmsify25314a4d"},{"post_id":"cknpirxhy00bisifykff8di94","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxi500bvsifyif7d88df"},{"post_id":"cknpirxhy00bisifykff8di94","tag_id":"cknpirxi000blsify1rckp7nv","_id":"cknpirxi600bxsifyd7zfqj9z"},{"post_id":"cknpirxi500bwsify73x9wmno","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxi700c1sifyhsyryf0u"},{"post_id":"cknpirxi500bwsify73x9wmno","tag_id":"cknpirxes000usifyelgf7lw9","_id":"cknpirxi800c4sifyp6w7id9d"},{"post_id":"cknpirxi500bwsify73x9wmno","tag_id":"cknpirxev0018sify6d814lf3","_id":"cknpirxi900c9sifyn5sdpv4m"},{"post_id":"cknpirxi500bwsify73x9wmno","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxi900ccsify1r0chhyq"},{"post_id":"cknpirxi000bksifykyjr1ov4","tag_id":"cknpirxfz0059sify2y58kbh1","_id":"cknpirxia00cgsifyjs7wblk8"},{"post_id":"cknpirxi000bksifykyjr1ov4","tag_id":"cknpirxi000blsify1rckp7nv","_id":"cknpirxib00cjsifyywrpnj5z"},{"post_id":"cknpirxi600bysify0udtw1bo","tag_id":"cknpirxev0018sify6d814lf3","_id":"cknpirxic00cnsifyuuynty74"},{"post_id":"cknpirxi600bysify0udtw1bo","tag_id":"cknpirxgf006wsify54faw1i3","_id":"cknpirxic00cpsify70mr52ca"},{"post_id":"cknpirxi600bysify0udtw1bo","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxic00crsifynrt6qytz"},{"post_id":"cknpirxi700c2sifykr1jjff5","tag_id":"cknpirxgj0085sifycwslk0vq","_id":"cknpirxid00cusify72dypak3"},{"post_id":"cknpirxi100bnsifymw12dj3q","tag_id":"cknpirxh000bcsifyinvu1pvo","_id":"cknpirxid00cwsify4fxefcm5"},{"post_id":"cknpirxi100bnsifymw12dj3q","tag_id":"cknpirxi600c0sifyljfui1r6","_id":"cknpirxid00cysifyxc6fmjt9"},{"post_id":"cknpirxi900casifysb2vip90","tag_id":"cknpirxg3005nsifydsbwb6db","_id":"cknpirxid00czsifynon6nb6x"},{"post_id":"cknpirxi200bpsifyyjz2t3mj","tag_id":"cknpirxi800c7sifyzw4hfjv1","_id":"cknpirxid00d0sify0faqzsyy"},{"post_id":"cknpirxi200bpsifyyjz2t3mj","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxid00d1sifystcgl32h"},{"post_id":"cknpirxi900cdsifyuhbwzz7n","tag_id":"cknpirxgp0097sify9reajafe","_id":"cknpirxid00d2sifyfudwtzua"},{"post_id":"cknpirxi400bssifyk0o0md3j","tag_id":"cknpirxia00cfsifywmhsn7tz","_id":"cknpirxie00d3sifych2n3x6y"},{"post_id":"cknpirxi800c5sifyktvdsb09","tag_id":"cknpirxeh0005sify4arftmvi","_id":"cknpirxie00d4sifywal9mdls"},{"post_id":"cknpirxi800c5sifyktvdsb09","tag_id":"cknpirxic00cmsifyc3lifz9l","_id":"cknpirxie00d5sifyd42ob53x"},{"post_id":"cknpirxia00chsifyn8ee7d4e","tag_id":"cknpirxgm008qsifylrsylft7","_id":"cknpirxie00d6sify90vg83u1"},{"post_id":"cknpirxia00chsifyn8ee7d4e","tag_id":"cknpirxic00ctsifyxpfe2a1q","_id":"cknpirxie00d7sifyg3rk11o3"},{"post_id":"cknpirxia00chsifyn8ee7d4e","tag_id":"cknpirxf2001usify7ycaazso","_id":"cknpirxie00d8sify8ux5ddwf"},{"post_id":"cknpirxib00cksifygvj6qx9q","tag_id":"cknpirxh000b8sify3qguchl2","_id":"cknpirxie00d9sify574ta2sf"},{"post_id":"cknpirxib00cksifygvj6qx9q","tag_id":"cknpirxid00cxsifycar2q981","_id":"cknpirxie00dasifykjps4dvt"},{"post_id":"cknpirxij00dbsifyhbiyn581","tag_id":"cknpirxik00dcsify55et8zg6","_id":"cknpirxik00dfsifynqrbe37n"},{"post_id":"cknpirxij00dbsifyhbiyn581","tag_id":"cknpirxik00desifyyp9frm1a","_id":"cknpirxik00dgsifyc7zhnw8c"},{"post_id":"cknpirxij00dbsifyhbiyn581","tag_id":"cknpirxgv00a9sify0tglrjxx","_id":"cknpirxik00dhsifydq8ze44g"},{"post_id":"cknpirxjd00disify15d1ecuv","tag_id":"cknpirxjd00djsify311l27cf","_id":"cknpirxje00dlsify7gyn7tc3"},{"post_id":"cknpirxjo00dmsify19a7z2fz","tag_id":"cknpirxh000b8sify3qguchl2","_id":"cknpirxjo00dnsifytdiqrikz"}],"Tag":[{"name":"android","_id":"cknpirxeh0005sify4arftmvi"},{"name":"qq","_id":"cknpirxek000bsify1ep73hbm"},{"name":"intent","_id":"cknpirxeo000hsify1aioorg7"},{"name":"ndk","_id":"cknpirxes000usifyelgf7lw9"},{"name":"jni","_id":"cknpirxev0018sify6d814lf3"},{"name":"apktool","_id":"cknpirxex001isify29w8mypr"},{"name":"jar","_id":"cknpirxf0001osifyd3ulzbgy"},{"name":"c++","_id":"cknpirxf2001usify7ycaazso"},{"name":"atom","_id":"cknpirxf8002esifyuo4fymsx"},{"name":"tools","_id":"cknpirxfa002msifyr2667cy6"},{"name":"mac","_id":"cknpirxfc002tsify0q6okcga"},{"name":"RAML","_id":"cknpirxfe002zsifym68xwhi6"},{"name":"debug","_id":"cknpirxfj003lsifyf3xnc26q"},{"name":"gdb","_id":"cknpirxfm003tsify96r8cldp"},{"name":"变量","_id":"cknpirxfp0049sifyq27dp9y0"},{"name":"chrome","_id":"cknpirxfs004msifynp8qu0oc"},{"name":"排序","_id":"cknpirxfu004ssifylt40qnb1"},{"name":"查找","_id":"cknpirxfw0052sifyp2r2zzhl"},{"name":"c","_id":"cknpirxfz0059sify2y58kbh1"},{"name":"curl","_id":"cknpirxg2005fsifyl913njao"},{"name":"linux","_id":"cknpirxg3005nsifydsbwb6db"},{"name":"单向链表","_id":"cknpirxga0064sifywh41jrha"},{"name":"git","_id":"cknpirxgc006bsifyog36op59"},{"name":"java","_id":"cknpirxgf006wsify54faw1i3"},{"name":"integer","_id":"cknpirxgf0072sifyw7nupy2h"},{"name":"hexo","_id":"cknpirxgh007jsify72ffi4uq"},{"name":"math","_id":"cknpirxgh007rsify0bvskyjr"},{"name":"round","_id":"cknpirxgh007ssifyagfyaomx"},{"name":"ag","_id":"cknpirxgj0081sifyn3vl31vu"},{"name":"mysql","_id":"cknpirxgj0085sifycwslk0vq"},{"name":"数据库","_id":"cknpirxgj0087sifyjxvaij5z"},{"name":"dns","_id":"cknpirxgk008csify8g7ylqgb"},{"name":"缓存","_id":"cknpirxgk008esifywerj01ff"},{"name":"makefile","_id":"cknpirxgk008fsify2aq4ct7q"},{"name":"sublime","_id":"cknpirxgl008ksifyz1s3o3uy"},{"name":"usb","_id":"cknpirxgl008nsifyig0uu7k1"},{"name":"常识","_id":"cknpirxgl008psifygpj2rnnk"},{"name":"stl","_id":"cknpirxgm008qsifylrsylft7"},{"name":"vitualBox","_id":"cknpirxgm008tsify5jd3cjc6"},{"name":"qt","_id":"cknpirxgn008wsifyi7m7mmjp"},{"name":"vim","_id":"cknpirxgn008ysifyuvfmdz8s"},{"name":"xcode","_id":"cknpirxgn0090sifypmjnyfmz"},{"name":"ios","_id":"cknpirxgp0097sify9reajafe"},{"name":"glide","_id":"cknpirxgp0099sifywbhpdtpp"},{"name":"appicon","_id":"cknpirxgp009bsifyrlpx3du9"},{"name":"grep","_id":"cknpirxgq009dsifyga2yrkwq"},{"name":"process","_id":"cknpirxgt009ssifylqff3usp"},{"name":"webrtc","_id":"cknpirxgu009ysifymi9pdboh"},{"name":"depot_tool","_id":"cknpirxgu00a0sifyp4ztdahm"},{"name":"tar","_id":"cknpirxgv00a8sifyb8f364ld"},{"name":"python","_id":"cknpirxgv00a9sify0tglrjxx"},{"name":"wireshark","_id":"cknpirxgw00aesifykrxu1rgx"},{"name":"keyboard","_id":"cknpirxgx00afsifydrf68usw"},{"name":"vscode","_id":"cknpirxgx00aisifytlgz0shv"},{"name":"快捷键","_id":"cknpirxgx00aksify055zx1i2"},{"name":"apk","_id":"cknpirxgx00alsifyuy6yqopm"},{"name":"backup","_id":"cknpirxgx00aosifyqthytyjg"},{"name":"lint","_id":"cknpirxgy00ausifyvtk472jn"},{"name":"english","_id":"cknpirxgz00b4sify8sedphha"},{"name":"命名","_id":"cknpirxh000b6sifydwwcmx9h"},{"name":"音视频","_id":"cknpirxh000b8sify3qguchl2"},{"name":"码率","_id":"cknpirxh000bbsifyjf9okcgy"},{"name":"github","_id":"cknpirxh000bcsifyinvu1pvo"},{"name":"file","_id":"cknpirxi000blsify1rckp7nv"},{"name":"安全","_id":"cknpirxi600c0sifyljfui1r6"},{"name":"AsyncTask","_id":"cknpirxi800c7sifyzw4hfjv1"},{"name":"EditText","_id":"cknpirxia00cfsifywmhsn7tz"},{"name":"WebView","_id":"cknpirxic00cmsifyc3lifz9l"},{"name":"string","_id":"cknpirxic00ctsifyxpfe2a1q"},{"name":"视频协议","_id":"cknpirxid00cxsifycar2q981"},{"name":"wechat","_id":"cknpirxik00dcsify55et8zg6"},{"name":"微信","_id":"cknpirxik00desifyyp9frm1a"},{"name":"gyp","_id":"cknpirxjd00djsify311l27cf"}]}}